
F303_Blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000022bc  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002444  08002444  00012444  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800247c  0800247c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  0800247c  0800247c  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800247c  0800247c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800247c  0800247c  0001247c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002480  08002480  00012480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002484  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000090  2000000c  08002490  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000009c  08002490  0002009c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a9a4  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001563  00000000  00000000  0002a9e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000005d0  00000000  00000000  0002bf48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000538  00000000  00000000  0002c518  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017155  00000000  00000000  0002ca50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000627e  00000000  00000000  00043ba5  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007e9c1  00000000  00000000  00049e23  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000c87e4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001674  00000000  00000000  000c8860  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800242c 	.word	0x0800242c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	0800242c 	.word	0x0800242c

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f92f 	bl	800043c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f001 ffec 	bl	80021c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f939 	bl	800048a <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f000 f90f 	bl	8000452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000028 	.word	0x20000028

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028

08000294 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800029c:	f7ff ffee 	bl	800027c <HAL_GetTick>
 80002a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002ac:	d005      	beq.n	80002ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <HAL_Delay+0x40>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4413      	add	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002ba:	bf00      	nop
 80002bc:	f7ff ffde 	bl	800027c <HAL_GetTick>
 80002c0:	4602      	mov	r2, r0
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	1ad3      	subs	r3, r2, r3
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d8f7      	bhi.n	80002bc <HAL_Delay+0x28>
  {
  }
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000004 	.word	0x20000004

080002d8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f003 0307 	and.w	r3, r3, #7
 80002e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <NVIC_SetPriorityGrouping+0x44>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ee:	68ba      	ldr	r2, [r7, #8]
 80002f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002f4:	4013      	ands	r3, r2
 80002f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800030a:	4a04      	ldr	r2, [pc, #16]	; (800031c <NVIC_SetPriorityGrouping+0x44>)
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	60d3      	str	r3, [r2, #12]
}
 8000310:	bf00      	nop
 8000312:	3714      	adds	r7, #20
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <NVIC_GetPriorityGrouping+0x18>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	0a1b      	lsrs	r3, r3, #8
 800032a:	f003 0307 	and.w	r3, r3, #7
}
 800032e:	4618      	mov	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	6039      	str	r1, [r7, #0]
 8000346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034c:	2b00      	cmp	r3, #0
 800034e:	da0b      	bge.n	8000368 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	b2da      	uxtb	r2, r3
 8000354:	490c      	ldr	r1, [pc, #48]	; (8000388 <NVIC_SetPriority+0x4c>)
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	f003 030f 	and.w	r3, r3, #15
 800035c:	3b04      	subs	r3, #4
 800035e:	0112      	lsls	r2, r2, #4
 8000360:	b2d2      	uxtb	r2, r2
 8000362:	440b      	add	r3, r1
 8000364:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000366:	e009      	b.n	800037c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	b2da      	uxtb	r2, r3
 800036c:	4907      	ldr	r1, [pc, #28]	; (800038c <NVIC_SetPriority+0x50>)
 800036e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000372:	0112      	lsls	r2, r2, #4
 8000374:	b2d2      	uxtb	r2, r2
 8000376:	440b      	add	r3, r1
 8000378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	e000ed00 	.word	0xe000ed00
 800038c:	e000e100 	.word	0xe000e100

08000390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000390:	b480      	push	{r7}
 8000392:	b089      	sub	sp, #36	; 0x24
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f003 0307 	and.w	r3, r3, #7
 80003a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003a4:	69fb      	ldr	r3, [r7, #28]
 80003a6:	f1c3 0307 	rsb	r3, r3, #7
 80003aa:	2b04      	cmp	r3, #4
 80003ac:	bf28      	it	cs
 80003ae:	2304      	movcs	r3, #4
 80003b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	3304      	adds	r3, #4
 80003b6:	2b06      	cmp	r3, #6
 80003b8:	d902      	bls.n	80003c0 <NVIC_EncodePriority+0x30>
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	3b03      	subs	r3, #3
 80003be:	e000      	b.n	80003c2 <NVIC_EncodePriority+0x32>
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c4:	f04f 32ff 	mov.w	r2, #4294967295
 80003c8:	69bb      	ldr	r3, [r7, #24]
 80003ca:	fa02 f303 	lsl.w	r3, r2, r3
 80003ce:	43da      	mvns	r2, r3
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	401a      	ands	r2, r3
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003d8:	f04f 31ff 	mov.w	r1, #4294967295
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	fa01 f303 	lsl.w	r3, r1, r3
 80003e2:	43d9      	mvns	r1, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003e8:	4313      	orrs	r3, r2
         );
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3724      	adds	r7, #36	; 0x24
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
	...

080003f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3b01      	subs	r3, #1
 8000404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000408:	d301      	bcc.n	800040e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040a:	2301      	movs	r3, #1
 800040c:	e00f      	b.n	800042e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800040e:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <SysTick_Config+0x40>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000416:	210f      	movs	r1, #15
 8000418:	f04f 30ff 	mov.w	r0, #4294967295
 800041c:	f7ff ff8e 	bl	800033c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <SysTick_Config+0x40>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <SysTick_Config+0x40>)
 8000428:	2207      	movs	r2, #7
 800042a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800042c:	2300      	movs	r3, #0
}
 800042e:	4618      	mov	r0, r3
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	e000e010 	.word	0xe000e010

0800043c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f7ff ff47 	bl	80002d8 <NVIC_SetPriorityGrouping>
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	b086      	sub	sp, #24
 8000456:	af00      	add	r7, sp, #0
 8000458:	4603      	mov	r3, r0
 800045a:	60b9      	str	r1, [r7, #8]
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000464:	f7ff ff5c 	bl	8000320 <NVIC_GetPriorityGrouping>
 8000468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	68b9      	ldr	r1, [r7, #8]
 800046e:	6978      	ldr	r0, [r7, #20]
 8000470:	f7ff ff8e 	bl	8000390 <NVIC_EncodePriority>
 8000474:	4602      	mov	r2, r0
 8000476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047a:	4611      	mov	r1, r2
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff5d 	bl	800033c <NVIC_SetPriority>
}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f7ff ffb0 	bl	80003f8 <SysTick_Config>
 8000498:	4603      	mov	r3, r0
}
 800049a:	4618      	mov	r0, r3
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b087      	sub	sp, #28
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004ba:	e14e      	b.n	800075a <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	2101      	movs	r1, #1
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	fa01 f303 	lsl.w	r3, r1, r3
 80004c8:	4013      	ands	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	f000 8140 	beq.w	8000754 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d003      	beq.n	80004e4 <HAL_GPIO_Init+0x40>
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b12      	cmp	r3, #18
 80004e2:	d123      	bne.n	800052c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	08da      	lsrs	r2, r3, #3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3208      	adds	r2, #8
 80004ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	f003 0307 	and.w	r3, r3, #7
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	220f      	movs	r2, #15
 80004fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	693a      	ldr	r2, [r7, #16]
 8000504:	4013      	ands	r3, r2
 8000506:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	691a      	ldr	r2, [r3, #16]
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	f003 0307 	and.w	r3, r3, #7
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	693a      	ldr	r2, [r7, #16]
 800051a:	4313      	orrs	r3, r2
 800051c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	08da      	lsrs	r2, r3, #3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3208      	adds	r2, #8
 8000526:	6939      	ldr	r1, [r7, #16]
 8000528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	2203      	movs	r2, #3
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	43db      	mvns	r3, r3
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	4013      	ands	r3, r2
 8000542:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	f003 0203 	and.w	r2, r3, #3
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	4313      	orrs	r3, r2
 8000558:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	693a      	ldr	r2, [r7, #16]
 800055e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d00b      	beq.n	8000580 <HAL_GPIO_Init+0xdc>
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	2b02      	cmp	r3, #2
 800056e:	d007      	beq.n	8000580 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000574:	2b11      	cmp	r3, #17
 8000576:	d003      	beq.n	8000580 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	2b12      	cmp	r3, #18
 800057e:	d130      	bne.n	80005e2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	2203      	movs	r2, #3
 800058c:	fa02 f303 	lsl.w	r3, r2, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	4013      	ands	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	68da      	ldr	r2, [r3, #12]
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	693a      	ldr	r2, [r7, #16]
 80005ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005b6:	2201      	movs	r2, #1
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	4013      	ands	r3, r2
 80005c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	091b      	lsrs	r3, r3, #4
 80005cc:	f003 0201 	and.w	r2, r3, #1
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	4313      	orrs	r3, r2
 80005da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	2203      	movs	r2, #3
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	693a      	ldr	r2, [r7, #16]
 80005f6:	4013      	ands	r3, r2
 80005f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	4313      	orrs	r3, r2
 800060a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061a:	2b00      	cmp	r3, #0
 800061c:	f000 809a 	beq.w	8000754 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000620:	4b55      	ldr	r3, [pc, #340]	; (8000778 <HAL_GPIO_Init+0x2d4>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a54      	ldr	r2, [pc, #336]	; (8000778 <HAL_GPIO_Init+0x2d4>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b52      	ldr	r3, [pc, #328]	; (8000778 <HAL_GPIO_Init+0x2d4>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000638:	4a50      	ldr	r2, [pc, #320]	; (800077c <HAL_GPIO_Init+0x2d8>)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	089b      	lsrs	r3, r3, #2
 800063e:	3302      	adds	r3, #2
 8000640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000644:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	f003 0303 	and.w	r3, r3, #3
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	220f      	movs	r2, #15
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	43db      	mvns	r3, r3
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	4013      	ands	r3, r2
 800065a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000662:	d013      	beq.n	800068c <HAL_GPIO_Init+0x1e8>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a46      	ldr	r2, [pc, #280]	; (8000780 <HAL_GPIO_Init+0x2dc>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d00d      	beq.n	8000688 <HAL_GPIO_Init+0x1e4>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a45      	ldr	r2, [pc, #276]	; (8000784 <HAL_GPIO_Init+0x2e0>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d007      	beq.n	8000684 <HAL_GPIO_Init+0x1e0>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a44      	ldr	r2, [pc, #272]	; (8000788 <HAL_GPIO_Init+0x2e4>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d101      	bne.n	8000680 <HAL_GPIO_Init+0x1dc>
 800067c:	2303      	movs	r3, #3
 800067e:	e006      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 8000680:	2305      	movs	r3, #5
 8000682:	e004      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 8000684:	2302      	movs	r3, #2
 8000686:	e002      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 8000688:	2301      	movs	r3, #1
 800068a:	e000      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 800068c:	2300      	movs	r3, #0
 800068e:	697a      	ldr	r2, [r7, #20]
 8000690:	f002 0203 	and.w	r2, r2, #3
 8000694:	0092      	lsls	r2, r2, #2
 8000696:	4093      	lsls	r3, r2
 8000698:	693a      	ldr	r2, [r7, #16]
 800069a:	4313      	orrs	r3, r2
 800069c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800069e:	4937      	ldr	r1, [pc, #220]	; (800077c <HAL_GPIO_Init+0x2d8>)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	3302      	adds	r3, #2
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	43db      	mvns	r3, r3
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d003      	beq.n	80006d0 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80006c8:	693a      	ldr	r2, [r7, #16]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006d0:	4a2e      	ldr	r2, [pc, #184]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	43db      	mvns	r3, r3
 80006e0:	693a      	ldr	r2, [r7, #16]
 80006e2:	4013      	ands	r3, r2
 80006e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d003      	beq.n	80006fa <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <HAL_GPIO_Init+0x2e8>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	43db      	mvns	r3, r3
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	4013      	ands	r3, r2
 800070e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 800071c:	693a      	ldr	r2, [r7, #16]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	4313      	orrs	r3, r2
 8000722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <HAL_GPIO_Init+0x2e8>)
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_GPIO_Init+0x2e8>)
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	43db      	mvns	r3, r3
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	4013      	ands	r3, r2
 8000738:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000742:	2b00      	cmp	r3, #0
 8000744:	d003      	beq.n	800074e <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4313      	orrs	r3, r2
 800074c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <HAL_GPIO_Init+0x2e8>)
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	3301      	adds	r3, #1
 8000758:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	fa22 f303 	lsr.w	r3, r2, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	f47f aea9 	bne.w	80004bc <HAL_GPIO_Init+0x18>
  }
}
 800076a:	bf00      	nop
 800076c:	371c      	adds	r7, #28
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000
 800077c:	40010000 	.word	0x40010000
 8000780:	48000400 	.word	0x48000400
 8000784:	48000800 	.word	0x48000800
 8000788:	48000c00 	.word	0x48000c00
 800078c:	40010400 	.word	0x40010400

08000790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	807b      	strh	r3, [r7, #2]
 800079c:	4613      	mov	r3, r2
 800079e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007a0:	787b      	ldrb	r3, [r7, #1]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d003      	beq.n	80007ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007a6:	887a      	ldrh	r2, [r7, #2]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007ac:	e002      	b.n	80007b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007ae:	887a      	ldrh	r2, [r7, #2]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
 80007c8:	460b      	mov	r3, r1
 80007ca:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	695a      	ldr	r2, [r3, #20]
 80007d0:	887b      	ldrh	r3, [r7, #2]
 80007d2:	405a      	eors	r2, r3
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	615a      	str	r2, [r3, #20]
}
 80007d8:	bf00      	nop
 80007da:	370c      	adds	r7, #12
 80007dc:	46bd      	mov	sp, r7
 80007de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007e2:	4770      	bx	lr

080007e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80007ea:	af00      	add	r7, sp, #0
 80007ec:	1d3b      	adds	r3, r7, #4
 80007ee:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80007f0:	1d3b      	adds	r3, r7, #4
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d102      	bne.n	80007fe <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80007f8:	2301      	movs	r3, #1
 80007fa:	f000 beda 	b.w	80015b2 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80007fe:	1d3b      	adds	r3, r7, #4
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	f003 0301 	and.w	r3, r3, #1
 8000808:	2b00      	cmp	r3, #0
 800080a:	f000 816e 	beq.w	8000aea <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800080e:	4bb5      	ldr	r3, [pc, #724]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000810:	685b      	ldr	r3, [r3, #4]
 8000812:	f003 030c 	and.w	r3, r3, #12
 8000816:	2b04      	cmp	r3, #4
 8000818:	d00c      	beq.n	8000834 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800081a:	4bb2      	ldr	r3, [pc, #712]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	f003 030c 	and.w	r3, r3, #12
 8000822:	2b08      	cmp	r3, #8
 8000824:	d15a      	bne.n	80008dc <HAL_RCC_OscConfig+0xf8>
 8000826:	4baf      	ldr	r3, [pc, #700]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000828:	685b      	ldr	r3, [r3, #4]
 800082a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800082e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000832:	d153      	bne.n	80008dc <HAL_RCC_OscConfig+0xf8>
 8000834:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000838:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800083c:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000840:	fa93 f3a3 	rbit	r3, r3
 8000844:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000848:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800084c:	fab3 f383 	clz	r3, r3
 8000850:	b2db      	uxtb	r3, r3
 8000852:	095b      	lsrs	r3, r3, #5
 8000854:	b2db      	uxtb	r3, r3
 8000856:	f043 0301 	orr.w	r3, r3, #1
 800085a:	b2db      	uxtb	r3, r3
 800085c:	2b01      	cmp	r3, #1
 800085e:	d102      	bne.n	8000866 <HAL_RCC_OscConfig+0x82>
 8000860:	4ba0      	ldr	r3, [pc, #640]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000862:	681b      	ldr	r3, [r3, #0]
 8000864:	e015      	b.n	8000892 <HAL_RCC_OscConfig+0xae>
 8000866:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800086a:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800086e:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000872:	fa93 f3a3 	rbit	r3, r3
 8000876:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800087a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800087e:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000882:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000886:	fa93 f3a3 	rbit	r3, r3
 800088a:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 800088e:	4b95      	ldr	r3, [pc, #596]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000890:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000892:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000896:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800089a:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 800089e:	fa92 f2a2 	rbit	r2, r2
 80008a2:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80008a6:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80008aa:	fab2 f282 	clz	r2, r2
 80008ae:	b252      	sxtb	r2, r2
 80008b0:	f042 0220 	orr.w	r2, r2, #32
 80008b4:	b252      	sxtb	r2, r2
 80008b6:	b2d2      	uxtb	r2, r2
 80008b8:	f002 021f 	and.w	r2, r2, #31
 80008bc:	2101      	movs	r1, #1
 80008be:	fa01 f202 	lsl.w	r2, r1, r2
 80008c2:	4013      	ands	r3, r2
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	f000 810f 	beq.w	8000ae8 <HAL_RCC_OscConfig+0x304>
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	681b      	ldr	r3, [r3, #0]
 80008ce:	685b      	ldr	r3, [r3, #4]
 80008d0:	2b00      	cmp	r3, #0
 80008d2:	f040 8109 	bne.w	8000ae8 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 80008d6:	2301      	movs	r3, #1
 80008d8:	f000 be6b 	b.w	80015b2 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80008dc:	1d3b      	adds	r3, r7, #4
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	685b      	ldr	r3, [r3, #4]
 80008e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80008e6:	d106      	bne.n	80008f6 <HAL_RCC_OscConfig+0x112>
 80008e8:	4b7e      	ldr	r3, [pc, #504]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 80008ea:	681b      	ldr	r3, [r3, #0]
 80008ec:	4a7d      	ldr	r2, [pc, #500]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 80008ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008f2:	6013      	str	r3, [r2, #0]
 80008f4:	e030      	b.n	8000958 <HAL_RCC_OscConfig+0x174>
 80008f6:	1d3b      	adds	r3, r7, #4
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	685b      	ldr	r3, [r3, #4]
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d10c      	bne.n	800091a <HAL_RCC_OscConfig+0x136>
 8000900:	4b78      	ldr	r3, [pc, #480]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	4a77      	ldr	r2, [pc, #476]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800090a:	6013      	str	r3, [r2, #0]
 800090c:	4b75      	ldr	r3, [pc, #468]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	4a74      	ldr	r2, [pc, #464]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000912:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000916:	6013      	str	r3, [r2, #0]
 8000918:	e01e      	b.n	8000958 <HAL_RCC_OscConfig+0x174>
 800091a:	1d3b      	adds	r3, r7, #4
 800091c:	681b      	ldr	r3, [r3, #0]
 800091e:	685b      	ldr	r3, [r3, #4]
 8000920:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000924:	d10c      	bne.n	8000940 <HAL_RCC_OscConfig+0x15c>
 8000926:	4b6f      	ldr	r3, [pc, #444]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4a6e      	ldr	r2, [pc, #440]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 800092c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000930:	6013      	str	r3, [r2, #0]
 8000932:	4b6c      	ldr	r3, [pc, #432]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	4a6b      	ldr	r2, [pc, #428]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000938:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800093c:	6013      	str	r3, [r2, #0]
 800093e:	e00b      	b.n	8000958 <HAL_RCC_OscConfig+0x174>
 8000940:	4b68      	ldr	r3, [pc, #416]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a67      	ldr	r2, [pc, #412]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000946:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800094a:	6013      	str	r3, [r2, #0]
 800094c:	4b65      	ldr	r3, [pc, #404]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a64      	ldr	r2, [pc, #400]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000952:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000956:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000958:	4b62      	ldr	r3, [pc, #392]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 800095a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800095c:	f023 020f 	bic.w	r2, r3, #15
 8000960:	1d3b      	adds	r3, r7, #4
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	689b      	ldr	r3, [r3, #8]
 8000966:	495f      	ldr	r1, [pc, #380]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000968:	4313      	orrs	r3, r2
 800096a:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800096c:	1d3b      	adds	r3, r7, #4
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	685b      	ldr	r3, [r3, #4]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d05a      	beq.n	8000a2c <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000976:	f7ff fc81 	bl	800027c <HAL_GetTick>
 800097a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800097e:	e00a      	b.n	8000996 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000980:	f7ff fc7c 	bl	800027c <HAL_GetTick>
 8000984:	4602      	mov	r2, r0
 8000986:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800098a:	1ad3      	subs	r3, r2, r3
 800098c:	2b64      	cmp	r3, #100	; 0x64
 800098e:	d902      	bls.n	8000996 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000990:	2303      	movs	r3, #3
 8000992:	f000 be0e 	b.w	80015b2 <HAL_RCC_OscConfig+0xdce>
 8000996:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800099a:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800099e:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80009a2:	fa93 f3a3 	rbit	r3, r3
 80009a6:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80009aa:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80009ae:	fab3 f383 	clz	r3, r3
 80009b2:	b2db      	uxtb	r3, r3
 80009b4:	095b      	lsrs	r3, r3, #5
 80009b6:	b2db      	uxtb	r3, r3
 80009b8:	f043 0301 	orr.w	r3, r3, #1
 80009bc:	b2db      	uxtb	r3, r3
 80009be:	2b01      	cmp	r3, #1
 80009c0:	d102      	bne.n	80009c8 <HAL_RCC_OscConfig+0x1e4>
 80009c2:	4b48      	ldr	r3, [pc, #288]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	e015      	b.n	80009f4 <HAL_RCC_OscConfig+0x210>
 80009c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009cc:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009d0:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80009d4:	fa93 f3a3 	rbit	r3, r3
 80009d8:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80009dc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009e0:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80009e4:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80009e8:	fa93 f3a3 	rbit	r3, r3
 80009ec:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80009f0:	4b3c      	ldr	r3, [pc, #240]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 80009f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009f4:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80009f8:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80009fc:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000a00:	fa92 f2a2 	rbit	r2, r2
 8000a04:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000a08:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000a0c:	fab2 f282 	clz	r2, r2
 8000a10:	b252      	sxtb	r2, r2
 8000a12:	f042 0220 	orr.w	r2, r2, #32
 8000a16:	b252      	sxtb	r2, r2
 8000a18:	b2d2      	uxtb	r2, r2
 8000a1a:	f002 021f 	and.w	r2, r2, #31
 8000a1e:	2101      	movs	r1, #1
 8000a20:	fa01 f202 	lsl.w	r2, r1, r2
 8000a24:	4013      	ands	r3, r2
 8000a26:	2b00      	cmp	r3, #0
 8000a28:	d0aa      	beq.n	8000980 <HAL_RCC_OscConfig+0x19c>
 8000a2a:	e05e      	b.n	8000aea <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000a2c:	f7ff fc26 	bl	800027c <HAL_GetTick>
 8000a30:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a34:	e00a      	b.n	8000a4c <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000a36:	f7ff fc21 	bl	800027c <HAL_GetTick>
 8000a3a:	4602      	mov	r2, r0
 8000a3c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000a40:	1ad3      	subs	r3, r2, r3
 8000a42:	2b64      	cmp	r3, #100	; 0x64
 8000a44:	d902      	bls.n	8000a4c <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000a46:	2303      	movs	r3, #3
 8000a48:	f000 bdb3 	b.w	80015b2 <HAL_RCC_OscConfig+0xdce>
 8000a4c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a50:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a54:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000a58:	fa93 f3a3 	rbit	r3, r3
 8000a5c:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000a60:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000a64:	fab3 f383 	clz	r3, r3
 8000a68:	b2db      	uxtb	r3, r3
 8000a6a:	095b      	lsrs	r3, r3, #5
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	f043 0301 	orr.w	r3, r3, #1
 8000a72:	b2db      	uxtb	r3, r3
 8000a74:	2b01      	cmp	r3, #1
 8000a76:	d102      	bne.n	8000a7e <HAL_RCC_OscConfig+0x29a>
 8000a78:	4b1a      	ldr	r3, [pc, #104]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	e015      	b.n	8000aaa <HAL_RCC_OscConfig+0x2c6>
 8000a7e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a82:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000a86:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000a8a:	fa93 f3a3 	rbit	r3, r3
 8000a8e:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000a92:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a96:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000a9a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000a9e:	fa93 f3a3 	rbit	r3, r3
 8000aa2:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000aa6:	4b0f      	ldr	r3, [pc, #60]	; (8000ae4 <HAL_RCC_OscConfig+0x300>)
 8000aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000aaa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000aae:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000ab2:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000ab6:	fa92 f2a2 	rbit	r2, r2
 8000aba:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000abe:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000ac2:	fab2 f282 	clz	r2, r2
 8000ac6:	b252      	sxtb	r2, r2
 8000ac8:	f042 0220 	orr.w	r2, r2, #32
 8000acc:	b252      	sxtb	r2, r2
 8000ace:	b2d2      	uxtb	r2, r2
 8000ad0:	f002 021f 	and.w	r2, r2, #31
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	fa01 f202 	lsl.w	r2, r1, r2
 8000ada:	4013      	ands	r3, r2
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d1aa      	bne.n	8000a36 <HAL_RCC_OscConfig+0x252>
 8000ae0:	e003      	b.n	8000aea <HAL_RCC_OscConfig+0x306>
 8000ae2:	bf00      	nop
 8000ae4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000aea:	1d3b      	adds	r3, r7, #4
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f003 0302 	and.w	r3, r3, #2
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	f000 8170 	beq.w	8000dda <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000afa:	4bd0      	ldr	r3, [pc, #832]	; (8000e3c <HAL_RCC_OscConfig+0x658>)
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	f003 030c 	and.w	r3, r3, #12
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d00b      	beq.n	8000b1e <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000b06:	4bcd      	ldr	r3, [pc, #820]	; (8000e3c <HAL_RCC_OscConfig+0x658>)
 8000b08:	685b      	ldr	r3, [r3, #4]
 8000b0a:	f003 030c 	and.w	r3, r3, #12
 8000b0e:	2b08      	cmp	r3, #8
 8000b10:	d16d      	bne.n	8000bee <HAL_RCC_OscConfig+0x40a>
 8000b12:	4bca      	ldr	r3, [pc, #808]	; (8000e3c <HAL_RCC_OscConfig+0x658>)
 8000b14:	685b      	ldr	r3, [r3, #4]
 8000b16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d167      	bne.n	8000bee <HAL_RCC_OscConfig+0x40a>
 8000b1e:	2302      	movs	r3, #2
 8000b20:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b24:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000b28:	fa93 f3a3 	rbit	r3, r3
 8000b2c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000b30:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000b34:	fab3 f383 	clz	r3, r3
 8000b38:	b2db      	uxtb	r3, r3
 8000b3a:	095b      	lsrs	r3, r3, #5
 8000b3c:	b2db      	uxtb	r3, r3
 8000b3e:	f043 0301 	orr.w	r3, r3, #1
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	2b01      	cmp	r3, #1
 8000b46:	d102      	bne.n	8000b4e <HAL_RCC_OscConfig+0x36a>
 8000b48:	4bbc      	ldr	r3, [pc, #752]	; (8000e3c <HAL_RCC_OscConfig+0x658>)
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	e013      	b.n	8000b76 <HAL_RCC_OscConfig+0x392>
 8000b4e:	2302      	movs	r3, #2
 8000b50:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b54:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000b58:	fa93 f3a3 	rbit	r3, r3
 8000b5c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000b60:	2302      	movs	r3, #2
 8000b62:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000b66:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000b6a:	fa93 f3a3 	rbit	r3, r3
 8000b6e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000b72:	4bb2      	ldr	r3, [pc, #712]	; (8000e3c <HAL_RCC_OscConfig+0x658>)
 8000b74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b76:	2202      	movs	r2, #2
 8000b78:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000b7c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000b80:	fa92 f2a2 	rbit	r2, r2
 8000b84:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000b88:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000b8c:	fab2 f282 	clz	r2, r2
 8000b90:	b252      	sxtb	r2, r2
 8000b92:	f042 0220 	orr.w	r2, r2, #32
 8000b96:	b252      	sxtb	r2, r2
 8000b98:	b2d2      	uxtb	r2, r2
 8000b9a:	f002 021f 	and.w	r2, r2, #31
 8000b9e:	2101      	movs	r1, #1
 8000ba0:	fa01 f202 	lsl.w	r2, r1, r2
 8000ba4:	4013      	ands	r3, r2
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d007      	beq.n	8000bba <HAL_RCC_OscConfig+0x3d6>
 8000baa:	1d3b      	adds	r3, r7, #4
 8000bac:	681b      	ldr	r3, [r3, #0]
 8000bae:	691b      	ldr	r3, [r3, #16]
 8000bb0:	2b01      	cmp	r3, #1
 8000bb2:	d002      	beq.n	8000bba <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000bb4:	2301      	movs	r3, #1
 8000bb6:	f000 bcfc 	b.w	80015b2 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000bba:	4ba0      	ldr	r3, [pc, #640]	; (8000e3c <HAL_RCC_OscConfig+0x658>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000bc2:	1d3b      	adds	r3, r7, #4
 8000bc4:	681b      	ldr	r3, [r3, #0]
 8000bc6:	6959      	ldr	r1, [r3, #20]
 8000bc8:	23f8      	movs	r3, #248	; 0xf8
 8000bca:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000bce:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000bd2:	fa93 f3a3 	rbit	r3, r3
 8000bd6:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000bda:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000bde:	fab3 f383 	clz	r3, r3
 8000be2:	fa01 f303 	lsl.w	r3, r1, r3
 8000be6:	4995      	ldr	r1, [pc, #596]	; (8000e3c <HAL_RCC_OscConfig+0x658>)
 8000be8:	4313      	orrs	r3, r2
 8000bea:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000bec:	e0f5      	b.n	8000dda <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000bee:	1d3b      	adds	r3, r7, #4
 8000bf0:	681b      	ldr	r3, [r3, #0]
 8000bf2:	691b      	ldr	r3, [r3, #16]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	f000 8085 	beq.w	8000d04 <HAL_RCC_OscConfig+0x520>
 8000bfa:	2301      	movs	r3, #1
 8000bfc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c00:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000c04:	fa93 f3a3 	rbit	r3, r3
 8000c08:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000c0c:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000c10:	fab3 f383 	clz	r3, r3
 8000c14:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000c18:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000c1c:	009b      	lsls	r3, r3, #2
 8000c1e:	461a      	mov	r2, r3
 8000c20:	2301      	movs	r3, #1
 8000c22:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c24:	f7ff fb2a 	bl	800027c <HAL_GetTick>
 8000c28:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c2c:	e00a      	b.n	8000c44 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000c2e:	f7ff fb25 	bl	800027c <HAL_GetTick>
 8000c32:	4602      	mov	r2, r0
 8000c34:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000c38:	1ad3      	subs	r3, r2, r3
 8000c3a:	2b02      	cmp	r3, #2
 8000c3c:	d902      	bls.n	8000c44 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	f000 bcb7 	b.w	80015b2 <HAL_RCC_OscConfig+0xdce>
 8000c44:	2302      	movs	r3, #2
 8000c46:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c4a:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000c4e:	fa93 f3a3 	rbit	r3, r3
 8000c52:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000c56:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c5a:	fab3 f383 	clz	r3, r3
 8000c5e:	b2db      	uxtb	r3, r3
 8000c60:	095b      	lsrs	r3, r3, #5
 8000c62:	b2db      	uxtb	r3, r3
 8000c64:	f043 0301 	orr.w	r3, r3, #1
 8000c68:	b2db      	uxtb	r3, r3
 8000c6a:	2b01      	cmp	r3, #1
 8000c6c:	d102      	bne.n	8000c74 <HAL_RCC_OscConfig+0x490>
 8000c6e:	4b73      	ldr	r3, [pc, #460]	; (8000e3c <HAL_RCC_OscConfig+0x658>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	e013      	b.n	8000c9c <HAL_RCC_OscConfig+0x4b8>
 8000c74:	2302      	movs	r3, #2
 8000c76:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c7a:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000c7e:	fa93 f3a3 	rbit	r3, r3
 8000c82:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000c86:	2302      	movs	r3, #2
 8000c88:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000c8c:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000c90:	fa93 f3a3 	rbit	r3, r3
 8000c94:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000c98:	4b68      	ldr	r3, [pc, #416]	; (8000e3c <HAL_RCC_OscConfig+0x658>)
 8000c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c9c:	2202      	movs	r2, #2
 8000c9e:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000ca2:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000ca6:	fa92 f2a2 	rbit	r2, r2
 8000caa:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000cae:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000cb2:	fab2 f282 	clz	r2, r2
 8000cb6:	b252      	sxtb	r2, r2
 8000cb8:	f042 0220 	orr.w	r2, r2, #32
 8000cbc:	b252      	sxtb	r2, r2
 8000cbe:	b2d2      	uxtb	r2, r2
 8000cc0:	f002 021f 	and.w	r2, r2, #31
 8000cc4:	2101      	movs	r1, #1
 8000cc6:	fa01 f202 	lsl.w	r2, r1, r2
 8000cca:	4013      	ands	r3, r2
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d0ae      	beq.n	8000c2e <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cd0:	4b5a      	ldr	r3, [pc, #360]	; (8000e3c <HAL_RCC_OscConfig+0x658>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cd8:	1d3b      	adds	r3, r7, #4
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	6959      	ldr	r1, [r3, #20]
 8000cde:	23f8      	movs	r3, #248	; 0xf8
 8000ce0:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce4:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000ce8:	fa93 f3a3 	rbit	r3, r3
 8000cec:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000cf0:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000cf4:	fab3 f383 	clz	r3, r3
 8000cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8000cfc:	494f      	ldr	r1, [pc, #316]	; (8000e3c <HAL_RCC_OscConfig+0x658>)
 8000cfe:	4313      	orrs	r3, r2
 8000d00:	600b      	str	r3, [r1, #0]
 8000d02:	e06a      	b.n	8000dda <HAL_RCC_OscConfig+0x5f6>
 8000d04:	2301      	movs	r3, #1
 8000d06:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d0a:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000d0e:	fa93 f3a3 	rbit	r3, r3
 8000d12:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000d16:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d1a:	fab3 f383 	clz	r3, r3
 8000d1e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000d22:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	461a      	mov	r2, r3
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d2e:	f7ff faa5 	bl	800027c <HAL_GetTick>
 8000d32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d36:	e00a      	b.n	8000d4e <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d38:	f7ff faa0 	bl	800027c <HAL_GetTick>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000d42:	1ad3      	subs	r3, r2, r3
 8000d44:	2b02      	cmp	r3, #2
 8000d46:	d902      	bls.n	8000d4e <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000d48:	2303      	movs	r3, #3
 8000d4a:	f000 bc32 	b.w	80015b2 <HAL_RCC_OscConfig+0xdce>
 8000d4e:	2302      	movs	r3, #2
 8000d50:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d54:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000d58:	fa93 f3a3 	rbit	r3, r3
 8000d5c:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000d60:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d64:	fab3 f383 	clz	r3, r3
 8000d68:	b2db      	uxtb	r3, r3
 8000d6a:	095b      	lsrs	r3, r3, #5
 8000d6c:	b2db      	uxtb	r3, r3
 8000d6e:	f043 0301 	orr.w	r3, r3, #1
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	2b01      	cmp	r3, #1
 8000d76:	d102      	bne.n	8000d7e <HAL_RCC_OscConfig+0x59a>
 8000d78:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <HAL_RCC_OscConfig+0x658>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	e013      	b.n	8000da6 <HAL_RCC_OscConfig+0x5c2>
 8000d7e:	2302      	movs	r3, #2
 8000d80:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d84:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000d88:	fa93 f3a3 	rbit	r3, r3
 8000d8c:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000d90:	2302      	movs	r3, #2
 8000d92:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000d96:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000d9a:	fa93 f3a3 	rbit	r3, r3
 8000d9e:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <HAL_RCC_OscConfig+0x658>)
 8000da4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000da6:	2202      	movs	r2, #2
 8000da8:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000dac:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000db0:	fa92 f2a2 	rbit	r2, r2
 8000db4:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000db8:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000dbc:	fab2 f282 	clz	r2, r2
 8000dc0:	b252      	sxtb	r2, r2
 8000dc2:	f042 0220 	orr.w	r2, r2, #32
 8000dc6:	b252      	sxtb	r2, r2
 8000dc8:	b2d2      	uxtb	r2, r2
 8000dca:	f002 021f 	and.w	r2, r2, #31
 8000dce:	2101      	movs	r1, #1
 8000dd0:	fa01 f202 	lsl.w	r2, r1, r2
 8000dd4:	4013      	ands	r3, r2
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d1ae      	bne.n	8000d38 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dda:	1d3b      	adds	r3, r7, #4
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	f003 0308 	and.w	r3, r3, #8
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	f000 80d8 	beq.w	8000f9a <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	699b      	ldr	r3, [r3, #24]
 8000df0:	2b00      	cmp	r3, #0
 8000df2:	d067      	beq.n	8000ec4 <HAL_RCC_OscConfig+0x6e0>
 8000df4:	2301      	movs	r3, #1
 8000df6:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dfa:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000dfe:	fa93 f3a3 	rbit	r3, r3
 8000e02:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000e06:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e0a:	fab3 f383 	clz	r3, r3
 8000e0e:	461a      	mov	r2, r3
 8000e10:	4b0b      	ldr	r3, [pc, #44]	; (8000e40 <HAL_RCC_OscConfig+0x65c>)
 8000e12:	4413      	add	r3, r2
 8000e14:	009b      	lsls	r3, r3, #2
 8000e16:	461a      	mov	r2, r3
 8000e18:	2301      	movs	r3, #1
 8000e1a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e1c:	f7ff fa2e 	bl	800027c <HAL_GetTick>
 8000e20:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e24:	e00e      	b.n	8000e44 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e26:	f7ff fa29 	bl	800027c <HAL_GetTick>
 8000e2a:	4602      	mov	r2, r0
 8000e2c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000e30:	1ad3      	subs	r3, r2, r3
 8000e32:	2b02      	cmp	r3, #2
 8000e34:	d906      	bls.n	8000e44 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000e36:	2303      	movs	r3, #3
 8000e38:	e3bb      	b.n	80015b2 <HAL_RCC_OscConfig+0xdce>
 8000e3a:	bf00      	nop
 8000e3c:	40021000 	.word	0x40021000
 8000e40:	10908120 	.word	0x10908120
 8000e44:	2302      	movs	r3, #2
 8000e46:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e4a:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000e4e:	fa93 f3a3 	rbit	r3, r3
 8000e52:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000e56:	2302      	movs	r3, #2
 8000e58:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000e5c:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000e60:	fa93 f2a3 	rbit	r2, r3
 8000e64:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000e68:	601a      	str	r2, [r3, #0]
 8000e6a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e6e:	2202      	movs	r2, #2
 8000e70:	601a      	str	r2, [r3, #0]
 8000e72:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	fa93 f2a3 	rbit	r2, r3
 8000e7c:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8000e80:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e82:	4ba5      	ldr	r3, [pc, #660]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8000e84:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e86:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e8a:	2102      	movs	r1, #2
 8000e8c:	6019      	str	r1, [r3, #0]
 8000e8e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	fa93 f1a3 	rbit	r1, r3
 8000e98:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000e9c:	6019      	str	r1, [r3, #0]
  return(result);
 8000e9e:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	fab3 f383 	clz	r3, r3
 8000ea8:	b25b      	sxtb	r3, r3
 8000eaa:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000eae:	b25b      	sxtb	r3, r3
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	f003 031f 	and.w	r3, r3, #31
 8000eb6:	2101      	movs	r1, #1
 8000eb8:	fa01 f303 	lsl.w	r3, r1, r3
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d0b1      	beq.n	8000e26 <HAL_RCC_OscConfig+0x642>
 8000ec2:	e06a      	b.n	8000f9a <HAL_RCC_OscConfig+0x7b6>
 8000ec4:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ec8:	2201      	movs	r2, #1
 8000eca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ecc:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	fa93 f2a3 	rbit	r2, r3
 8000ed6:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000eda:	601a      	str	r2, [r3, #0]
  return(result);
 8000edc:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8000ee0:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000ee2:	fab3 f383 	clz	r3, r3
 8000ee6:	461a      	mov	r2, r3
 8000ee8:	4b8c      	ldr	r3, [pc, #560]	; (800111c <HAL_RCC_OscConfig+0x938>)
 8000eea:	4413      	add	r3, r2
 8000eec:	009b      	lsls	r3, r3, #2
 8000eee:	461a      	mov	r2, r3
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef4:	f7ff f9c2 	bl	800027c <HAL_GetTick>
 8000ef8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000efc:	e009      	b.n	8000f12 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000efe:	f7ff f9bd 	bl	800027c <HAL_GetTick>
 8000f02:	4602      	mov	r2, r0
 8000f04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	2b02      	cmp	r3, #2
 8000f0c:	d901      	bls.n	8000f12 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8000f0e:	2303      	movs	r3, #3
 8000f10:	e34f      	b.n	80015b2 <HAL_RCC_OscConfig+0xdce>
 8000f12:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f16:	2202      	movs	r2, #2
 8000f18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1a:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	fa93 f2a3 	rbit	r2, r3
 8000f24:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8000f28:	601a      	str	r2, [r3, #0]
 8000f2a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f2e:	2202      	movs	r2, #2
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	fa93 f2a3 	rbit	r2, r3
 8000f3c:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f46:	2202      	movs	r2, #2
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	fa93 f2a3 	rbit	r2, r3
 8000f54:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8000f58:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000f5a:	4b6f      	ldr	r3, [pc, #444]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8000f5c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000f5e:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f62:	2102      	movs	r1, #2
 8000f64:	6019      	str	r1, [r3, #0]
 8000f66:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	fa93 f1a3 	rbit	r1, r3
 8000f70:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f74:	6019      	str	r1, [r3, #0]
  return(result);
 8000f76:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	fab3 f383 	clz	r3, r3
 8000f80:	b25b      	sxtb	r3, r3
 8000f82:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8000f86:	b25b      	sxtb	r3, r3
 8000f88:	b2db      	uxtb	r3, r3
 8000f8a:	f003 031f 	and.w	r3, r3, #31
 8000f8e:	2101      	movs	r1, #1
 8000f90:	fa01 f303 	lsl.w	r3, r1, r3
 8000f94:	4013      	ands	r3, r2
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d1b1      	bne.n	8000efe <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000f9a:	1d3b      	adds	r3, r7, #4
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 0304 	and.w	r3, r3, #4
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	f000 8159 	beq.w	800125c <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000faa:	2300      	movs	r3, #0
 8000fac:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000fb0:	4b59      	ldr	r3, [pc, #356]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8000fb2:	69db      	ldr	r3, [r3, #28]
 8000fb4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d112      	bne.n	8000fe2 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000fbc:	4b56      	ldr	r3, [pc, #344]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	4a55      	ldr	r2, [pc, #340]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8000fc2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	61d3      	str	r3, [r2, #28]
 8000fc8:	4b53      	ldr	r3, [pc, #332]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8000fca:	69db      	ldr	r3, [r3, #28]
 8000fcc:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8000fd0:	f107 030c 	add.w	r3, r7, #12
 8000fd4:	601a      	str	r2, [r3, #0]
 8000fd6:	f107 030c 	add.w	r3, r7, #12
 8000fda:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000fe2:	4b4f      	ldr	r3, [pc, #316]	; (8001120 <HAL_RCC_OscConfig+0x93c>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d11a      	bne.n	8001024 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000fee:	4b4c      	ldr	r3, [pc, #304]	; (8001120 <HAL_RCC_OscConfig+0x93c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a4b      	ldr	r2, [pc, #300]	; (8001120 <HAL_RCC_OscConfig+0x93c>)
 8000ff4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ff8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ffa:	f7ff f93f 	bl	800027c <HAL_GetTick>
 8000ffe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001002:	e009      	b.n	8001018 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001004:	f7ff f93a 	bl	800027c <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800100e:	1ad3      	subs	r3, r2, r3
 8001010:	2b64      	cmp	r3, #100	; 0x64
 8001012:	d901      	bls.n	8001018 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001014:	2303      	movs	r3, #3
 8001016:	e2cc      	b.n	80015b2 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001018:	4b41      	ldr	r3, [pc, #260]	; (8001120 <HAL_RCC_OscConfig+0x93c>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001020:	2b00      	cmp	r3, #0
 8001022:	d0ef      	beq.n	8001004 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001024:	1d3b      	adds	r3, r7, #4
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	68db      	ldr	r3, [r3, #12]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d106      	bne.n	800103c <HAL_RCC_OscConfig+0x858>
 800102e:	4b3a      	ldr	r3, [pc, #232]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8001030:	6a1b      	ldr	r3, [r3, #32]
 8001032:	4a39      	ldr	r2, [pc, #228]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8001034:	f043 0301 	orr.w	r3, r3, #1
 8001038:	6213      	str	r3, [r2, #32]
 800103a:	e02f      	b.n	800109c <HAL_RCC_OscConfig+0x8b8>
 800103c:	1d3b      	adds	r3, r7, #4
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	68db      	ldr	r3, [r3, #12]
 8001042:	2b00      	cmp	r3, #0
 8001044:	d10c      	bne.n	8001060 <HAL_RCC_OscConfig+0x87c>
 8001046:	4b34      	ldr	r3, [pc, #208]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8001048:	6a1b      	ldr	r3, [r3, #32]
 800104a:	4a33      	ldr	r2, [pc, #204]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 800104c:	f023 0301 	bic.w	r3, r3, #1
 8001050:	6213      	str	r3, [r2, #32]
 8001052:	4b31      	ldr	r3, [pc, #196]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8001054:	6a1b      	ldr	r3, [r3, #32]
 8001056:	4a30      	ldr	r2, [pc, #192]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8001058:	f023 0304 	bic.w	r3, r3, #4
 800105c:	6213      	str	r3, [r2, #32]
 800105e:	e01d      	b.n	800109c <HAL_RCC_OscConfig+0x8b8>
 8001060:	1d3b      	adds	r3, r7, #4
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	68db      	ldr	r3, [r3, #12]
 8001066:	2b05      	cmp	r3, #5
 8001068:	d10c      	bne.n	8001084 <HAL_RCC_OscConfig+0x8a0>
 800106a:	4b2b      	ldr	r3, [pc, #172]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 800106c:	6a1b      	ldr	r3, [r3, #32]
 800106e:	4a2a      	ldr	r2, [pc, #168]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8001070:	f043 0304 	orr.w	r3, r3, #4
 8001074:	6213      	str	r3, [r2, #32]
 8001076:	4b28      	ldr	r3, [pc, #160]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8001078:	6a1b      	ldr	r3, [r3, #32]
 800107a:	4a27      	ldr	r2, [pc, #156]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 800107c:	f043 0301 	orr.w	r3, r3, #1
 8001080:	6213      	str	r3, [r2, #32]
 8001082:	e00b      	b.n	800109c <HAL_RCC_OscConfig+0x8b8>
 8001084:	4b24      	ldr	r3, [pc, #144]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8001086:	6a1b      	ldr	r3, [r3, #32]
 8001088:	4a23      	ldr	r2, [pc, #140]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 800108a:	f023 0301 	bic.w	r3, r3, #1
 800108e:	6213      	str	r3, [r2, #32]
 8001090:	4b21      	ldr	r3, [pc, #132]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8001092:	6a1b      	ldr	r3, [r3, #32]
 8001094:	4a20      	ldr	r2, [pc, #128]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8001096:	f023 0304 	bic.w	r3, r3, #4
 800109a:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800109c:	1d3b      	adds	r3, r7, #4
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	68db      	ldr	r3, [r3, #12]
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d06b      	beq.n	800117e <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80010a6:	f7ff f8e9 	bl	800027c <HAL_GetTick>
 80010aa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010ae:	e00b      	b.n	80010c8 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80010b0:	f7ff f8e4 	bl	800027c <HAL_GetTick>
 80010b4:	4602      	mov	r2, r0
 80010b6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80010ba:	1ad3      	subs	r3, r2, r3
 80010bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80010c0:	4293      	cmp	r3, r2
 80010c2:	d901      	bls.n	80010c8 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e274      	b.n	80015b2 <HAL_RCC_OscConfig+0xdce>
 80010c8:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010cc:	2202      	movs	r2, #2
 80010ce:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010d0:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	fa93 f2a3 	rbit	r2, r3
 80010da:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80010de:	601a      	str	r2, [r3, #0]
 80010e0:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010e4:	2202      	movs	r2, #2
 80010e6:	601a      	str	r2, [r3, #0]
 80010e8:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	fa93 f2a3 	rbit	r2, r3
 80010f2:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010f6:	601a      	str	r2, [r3, #0]
  return(result);
 80010f8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80010fc:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80010fe:	fab3 f383 	clz	r3, r3
 8001102:	b2db      	uxtb	r3, r3
 8001104:	095b      	lsrs	r3, r3, #5
 8001106:	b2db      	uxtb	r3, r3
 8001108:	f043 0302 	orr.w	r3, r3, #2
 800110c:	b2db      	uxtb	r3, r3
 800110e:	2b02      	cmp	r3, #2
 8001110:	d108      	bne.n	8001124 <HAL_RCC_OscConfig+0x940>
 8001112:	4b01      	ldr	r3, [pc, #4]	; (8001118 <HAL_RCC_OscConfig+0x934>)
 8001114:	6a1b      	ldr	r3, [r3, #32]
 8001116:	e013      	b.n	8001140 <HAL_RCC_OscConfig+0x95c>
 8001118:	40021000 	.word	0x40021000
 800111c:	10908120 	.word	0x10908120
 8001120:	40007000 	.word	0x40007000
 8001124:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001128:	2202      	movs	r2, #2
 800112a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800112c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	fa93 f2a3 	rbit	r2, r3
 8001136:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800113a:	601a      	str	r2, [r3, #0]
 800113c:	4bbb      	ldr	r3, [pc, #748]	; (800142c <HAL_RCC_OscConfig+0xc48>)
 800113e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001140:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001144:	2102      	movs	r1, #2
 8001146:	6011      	str	r1, [r2, #0]
 8001148:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	fa92 f1a2 	rbit	r1, r2
 8001152:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001156:	6011      	str	r1, [r2, #0]
  return(result);
 8001158:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	fab2 f282 	clz	r2, r2
 8001162:	b252      	sxtb	r2, r2
 8001164:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001168:	b252      	sxtb	r2, r2
 800116a:	b2d2      	uxtb	r2, r2
 800116c:	f002 021f 	and.w	r2, r2, #31
 8001170:	2101      	movs	r1, #1
 8001172:	fa01 f202 	lsl.w	r2, r1, r2
 8001176:	4013      	ands	r3, r2
 8001178:	2b00      	cmp	r3, #0
 800117a:	d099      	beq.n	80010b0 <HAL_RCC_OscConfig+0x8cc>
 800117c:	e064      	b.n	8001248 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800117e:	f7ff f87d 	bl	800027c <HAL_GetTick>
 8001182:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001186:	e00b      	b.n	80011a0 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001188:	f7ff f878 	bl	800027c <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001192:	1ad3      	subs	r3, r2, r3
 8001194:	f241 3288 	movw	r2, #5000	; 0x1388
 8001198:	4293      	cmp	r3, r2
 800119a:	d901      	bls.n	80011a0 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 800119c:	2303      	movs	r3, #3
 800119e:	e208      	b.n	80015b2 <HAL_RCC_OscConfig+0xdce>
 80011a0:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011a4:	2202      	movs	r2, #2
 80011a6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a8:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	fa93 f2a3 	rbit	r2, r3
 80011b2:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011bc:	2202      	movs	r2, #2
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	fa93 f2a3 	rbit	r2, r3
 80011ca:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011ce:	601a      	str	r2, [r3, #0]
  return(result);
 80011d0:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80011d4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80011d6:	fab3 f383 	clz	r3, r3
 80011da:	b2db      	uxtb	r3, r3
 80011dc:	095b      	lsrs	r3, r3, #5
 80011de:	b2db      	uxtb	r3, r3
 80011e0:	f043 0302 	orr.w	r3, r3, #2
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	2b02      	cmp	r3, #2
 80011e8:	d102      	bne.n	80011f0 <HAL_RCC_OscConfig+0xa0c>
 80011ea:	4b90      	ldr	r3, [pc, #576]	; (800142c <HAL_RCC_OscConfig+0xc48>)
 80011ec:	6a1b      	ldr	r3, [r3, #32]
 80011ee:	e00d      	b.n	800120c <HAL_RCC_OscConfig+0xa28>
 80011f0:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011f4:	2202      	movs	r2, #2
 80011f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	fa93 f2a3 	rbit	r2, r3
 8001202:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001206:	601a      	str	r2, [r3, #0]
 8001208:	4b88      	ldr	r3, [pc, #544]	; (800142c <HAL_RCC_OscConfig+0xc48>)
 800120a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800120c:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001210:	2102      	movs	r1, #2
 8001212:	6011      	str	r1, [r2, #0]
 8001214:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001218:	6812      	ldr	r2, [r2, #0]
 800121a:	fa92 f1a2 	rbit	r1, r2
 800121e:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001222:	6011      	str	r1, [r2, #0]
  return(result);
 8001224:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001228:	6812      	ldr	r2, [r2, #0]
 800122a:	fab2 f282 	clz	r2, r2
 800122e:	b252      	sxtb	r2, r2
 8001230:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001234:	b252      	sxtb	r2, r2
 8001236:	b2d2      	uxtb	r2, r2
 8001238:	f002 021f 	and.w	r2, r2, #31
 800123c:	2101      	movs	r1, #1
 800123e:	fa01 f202 	lsl.w	r2, r1, r2
 8001242:	4013      	ands	r3, r2
 8001244:	2b00      	cmp	r3, #0
 8001246:	d19f      	bne.n	8001188 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001248:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 800124c:	2b01      	cmp	r3, #1
 800124e:	d105      	bne.n	800125c <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001250:	4b76      	ldr	r3, [pc, #472]	; (800142c <HAL_RCC_OscConfig+0xc48>)
 8001252:	69db      	ldr	r3, [r3, #28]
 8001254:	4a75      	ldr	r2, [pc, #468]	; (800142c <HAL_RCC_OscConfig+0xc48>)
 8001256:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800125a:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	69db      	ldr	r3, [r3, #28]
 8001262:	2b00      	cmp	r3, #0
 8001264:	f000 81a4 	beq.w	80015b0 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001268:	4b70      	ldr	r3, [pc, #448]	; (800142c <HAL_RCC_OscConfig+0xc48>)
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 030c 	and.w	r3, r3, #12
 8001270:	2b08      	cmp	r3, #8
 8001272:	f000 819b 	beq.w	80015ac <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	69db      	ldr	r3, [r3, #28]
 800127c:	2b02      	cmp	r3, #2
 800127e:	f040 8113 	bne.w	80014a8 <HAL_RCC_OscConfig+0xcc4>
 8001282:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001286:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800128a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800128c:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	fa93 f2a3 	rbit	r2, r3
 8001296:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800129a:	601a      	str	r2, [r3, #0]
  return(result);
 800129c:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80012a0:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80012a2:	fab3 f383 	clz	r3, r3
 80012a6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012aa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012ae:	009b      	lsls	r3, r3, #2
 80012b0:	461a      	mov	r2, r3
 80012b2:	2300      	movs	r3, #0
 80012b4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012b6:	f7fe ffe1 	bl	800027c <HAL_GetTick>
 80012ba:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012be:	e009      	b.n	80012d4 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80012c0:	f7fe ffdc 	bl	800027c <HAL_GetTick>
 80012c4:	4602      	mov	r2, r0
 80012c6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80012ca:	1ad3      	subs	r3, r2, r3
 80012cc:	2b02      	cmp	r3, #2
 80012ce:	d901      	bls.n	80012d4 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 80012d0:	2303      	movs	r3, #3
 80012d2:	e16e      	b.n	80015b2 <HAL_RCC_OscConfig+0xdce>
 80012d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012d8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80012dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012de:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	fa93 f2a3 	rbit	r2, r3
 80012e8:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012ec:	601a      	str	r2, [r3, #0]
  return(result);
 80012ee:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80012f2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012f4:	fab3 f383 	clz	r3, r3
 80012f8:	b2db      	uxtb	r3, r3
 80012fa:	095b      	lsrs	r3, r3, #5
 80012fc:	b2db      	uxtb	r3, r3
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	b2db      	uxtb	r3, r3
 8001304:	2b01      	cmp	r3, #1
 8001306:	d102      	bne.n	800130e <HAL_RCC_OscConfig+0xb2a>
 8001308:	4b48      	ldr	r3, [pc, #288]	; (800142c <HAL_RCC_OscConfig+0xc48>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	e01b      	b.n	8001346 <HAL_RCC_OscConfig+0xb62>
 800130e:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001312:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001316:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001318:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	fa93 f2a3 	rbit	r2, r3
 8001322:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001326:	601a      	str	r2, [r3, #0]
 8001328:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800132c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001330:	601a      	str	r2, [r3, #0]
 8001332:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	fa93 f2a3 	rbit	r2, r3
 800133c:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001340:	601a      	str	r2, [r3, #0]
 8001342:	4b3a      	ldr	r3, [pc, #232]	; (800142c <HAL_RCC_OscConfig+0xc48>)
 8001344:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001346:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800134a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800134e:	6011      	str	r1, [r2, #0]
 8001350:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001354:	6812      	ldr	r2, [r2, #0]
 8001356:	fa92 f1a2 	rbit	r1, r2
 800135a:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800135e:	6011      	str	r1, [r2, #0]
  return(result);
 8001360:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001364:	6812      	ldr	r2, [r2, #0]
 8001366:	fab2 f282 	clz	r2, r2
 800136a:	b252      	sxtb	r2, r2
 800136c:	f042 0220 	orr.w	r2, r2, #32
 8001370:	b252      	sxtb	r2, r2
 8001372:	b2d2      	uxtb	r2, r2
 8001374:	f002 021f 	and.w	r2, r2, #31
 8001378:	2101      	movs	r1, #1
 800137a:	fa01 f202 	lsl.w	r2, r1, r2
 800137e:	4013      	ands	r3, r2
 8001380:	2b00      	cmp	r3, #0
 8001382:	d19d      	bne.n	80012c0 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001384:	4b29      	ldr	r3, [pc, #164]	; (800142c <HAL_RCC_OscConfig+0xc48>)
 8001386:	685b      	ldr	r3, [r3, #4]
 8001388:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800138c:	1d3b      	adds	r3, r7, #4
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001392:	1d3b      	adds	r3, r7, #4
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	6a1b      	ldr	r3, [r3, #32]
 8001398:	430b      	orrs	r3, r1
 800139a:	4924      	ldr	r1, [pc, #144]	; (800142c <HAL_RCC_OscConfig+0xc48>)
 800139c:	4313      	orrs	r3, r2
 800139e:	604b      	str	r3, [r1, #4]
 80013a0:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80013a8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	fa93 f2a3 	rbit	r2, r3
 80013b4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013b8:	601a      	str	r2, [r3, #0]
  return(result);
 80013ba:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80013be:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80013c0:	fab3 f383 	clz	r3, r3
 80013c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80013c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80013cc:	009b      	lsls	r3, r3, #2
 80013ce:	461a      	mov	r2, r3
 80013d0:	2301      	movs	r3, #1
 80013d2:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d4:	f7fe ff52 	bl	800027c <HAL_GetTick>
 80013d8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80013dc:	e009      	b.n	80013f2 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013de:	f7fe ff4d 	bl	800027c <HAL_GetTick>
 80013e2:	4602      	mov	r2, r0
 80013e4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80013e8:	1ad3      	subs	r3, r2, r3
 80013ea:	2b02      	cmp	r3, #2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e0df      	b.n	80015b2 <HAL_RCC_OscConfig+0xdce>
 80013f2:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80013f6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013fc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	fa93 f2a3 	rbit	r2, r3
 8001406:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800140a:	601a      	str	r2, [r3, #0]
  return(result);
 800140c:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001410:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001412:	fab3 f383 	clz	r3, r3
 8001416:	b2db      	uxtb	r3, r3
 8001418:	095b      	lsrs	r3, r3, #5
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f043 0301 	orr.w	r3, r3, #1
 8001420:	b2db      	uxtb	r3, r3
 8001422:	2b01      	cmp	r3, #1
 8001424:	d104      	bne.n	8001430 <HAL_RCC_OscConfig+0xc4c>
 8001426:	4b01      	ldr	r3, [pc, #4]	; (800142c <HAL_RCC_OscConfig+0xc48>)
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	e01d      	b.n	8001468 <HAL_RCC_OscConfig+0xc84>
 800142c:	40021000 	.word	0x40021000
 8001430:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001434:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001438:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800143a:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	fa93 f2a3 	rbit	r2, r3
 8001444:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800144e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001452:	601a      	str	r2, [r3, #0]
 8001454:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	fa93 f2a3 	rbit	r2, r3
 800145e:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001462:	601a      	str	r2, [r3, #0]
 8001464:	4b55      	ldr	r3, [pc, #340]	; (80015bc <HAL_RCC_OscConfig+0xdd8>)
 8001466:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001468:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800146c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001470:	6011      	str	r1, [r2, #0]
 8001472:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001476:	6812      	ldr	r2, [r2, #0]
 8001478:	fa92 f1a2 	rbit	r1, r2
 800147c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001480:	6011      	str	r1, [r2, #0]
  return(result);
 8001482:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001486:	6812      	ldr	r2, [r2, #0]
 8001488:	fab2 f282 	clz	r2, r2
 800148c:	b252      	sxtb	r2, r2
 800148e:	f042 0220 	orr.w	r2, r2, #32
 8001492:	b252      	sxtb	r2, r2
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	f002 021f 	and.w	r2, r2, #31
 800149a:	2101      	movs	r1, #1
 800149c:	fa01 f202 	lsl.w	r2, r1, r2
 80014a0:	4013      	ands	r3, r2
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d09b      	beq.n	80013de <HAL_RCC_OscConfig+0xbfa>
 80014a6:	e083      	b.n	80015b0 <HAL_RCC_OscConfig+0xdcc>
 80014a8:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80014b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	fa93 f2a3 	rbit	r2, r3
 80014bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c0:	601a      	str	r2, [r3, #0]
  return(result);
 80014c2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80014c6:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80014c8:	fab3 f383 	clz	r3, r3
 80014cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80014d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80014d4:	009b      	lsls	r3, r3, #2
 80014d6:	461a      	mov	r2, r3
 80014d8:	2300      	movs	r3, #0
 80014da:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014dc:	f7fe fece 	bl	800027c <HAL_GetTick>
 80014e0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80014e4:	e009      	b.n	80014fa <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014e6:	f7fe fec9 	bl	800027c <HAL_GetTick>
 80014ea:	4602      	mov	r2, r0
 80014ec:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	2b02      	cmp	r3, #2
 80014f4:	d901      	bls.n	80014fa <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 80014f6:	2303      	movs	r3, #3
 80014f8:	e05b      	b.n	80015b2 <HAL_RCC_OscConfig+0xdce>
 80014fa:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80014fe:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001502:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001504:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	fa93 f2a3 	rbit	r2, r3
 800150e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001512:	601a      	str	r2, [r3, #0]
  return(result);
 8001514:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001518:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800151a:	fab3 f383 	clz	r3, r3
 800151e:	b2db      	uxtb	r3, r3
 8001520:	095b      	lsrs	r3, r3, #5
 8001522:	b2db      	uxtb	r3, r3
 8001524:	f043 0301 	orr.w	r3, r3, #1
 8001528:	b2db      	uxtb	r3, r3
 800152a:	2b01      	cmp	r3, #1
 800152c:	d102      	bne.n	8001534 <HAL_RCC_OscConfig+0xd50>
 800152e:	4b23      	ldr	r3, [pc, #140]	; (80015bc <HAL_RCC_OscConfig+0xdd8>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	e01b      	b.n	800156c <HAL_RCC_OscConfig+0xd88>
 8001534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001538:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800153c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	fa93 f2a3 	rbit	r2, r3
 8001548:	f107 0320 	add.w	r3, r7, #32
 800154c:	601a      	str	r2, [r3, #0]
 800154e:	f107 031c 	add.w	r3, r7, #28
 8001552:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	f107 031c 	add.w	r3, r7, #28
 800155c:	681b      	ldr	r3, [r3, #0]
 800155e:	fa93 f2a3 	rbit	r2, r3
 8001562:	f107 0318 	add.w	r3, r7, #24
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	4b14      	ldr	r3, [pc, #80]	; (80015bc <HAL_RCC_OscConfig+0xdd8>)
 800156a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800156c:	f107 0214 	add.w	r2, r7, #20
 8001570:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001574:	6011      	str	r1, [r2, #0]
 8001576:	f107 0214 	add.w	r2, r7, #20
 800157a:	6812      	ldr	r2, [r2, #0]
 800157c:	fa92 f1a2 	rbit	r1, r2
 8001580:	f107 0210 	add.w	r2, r7, #16
 8001584:	6011      	str	r1, [r2, #0]
  return(result);
 8001586:	f107 0210 	add.w	r2, r7, #16
 800158a:	6812      	ldr	r2, [r2, #0]
 800158c:	fab2 f282 	clz	r2, r2
 8001590:	b252      	sxtb	r2, r2
 8001592:	f042 0220 	orr.w	r2, r2, #32
 8001596:	b252      	sxtb	r2, r2
 8001598:	b2d2      	uxtb	r2, r2
 800159a:	f002 021f 	and.w	r2, r2, #31
 800159e:	2101      	movs	r1, #1
 80015a0:	fa01 f202 	lsl.w	r2, r1, r2
 80015a4:	4013      	ands	r3, r2
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d19d      	bne.n	80014e6 <HAL_RCC_OscConfig+0xd02>
 80015aa:	e001      	b.n	80015b0 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80015ac:	2301      	movs	r3, #1
 80015ae:	e000      	b.n	80015b2 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80015b0:	2300      	movs	r3, #0
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40021000 	.word	0x40021000

080015c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80015c0:	b580      	push	{r7, lr}
 80015c2:	b09e      	sub	sp, #120	; 0x78
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
 80015c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80015ca:	2300      	movs	r3, #0
 80015cc:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d101      	bne.n	80015d8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e164      	b.n	80018a2 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80015d8:	4b92      	ldr	r3, [pc, #584]	; (8001824 <HAL_RCC_ClockConfig+0x264>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f003 0307 	and.w	r3, r3, #7
 80015e0:	683a      	ldr	r2, [r7, #0]
 80015e2:	429a      	cmp	r2, r3
 80015e4:	d910      	bls.n	8001608 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80015e6:	4b8f      	ldr	r3, [pc, #572]	; (8001824 <HAL_RCC_ClockConfig+0x264>)
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f023 0207 	bic.w	r2, r3, #7
 80015ee:	498d      	ldr	r1, [pc, #564]	; (8001824 <HAL_RCC_ClockConfig+0x264>)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	4313      	orrs	r3, r2
 80015f4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015f6:	4b8b      	ldr	r3, [pc, #556]	; (8001824 <HAL_RCC_ClockConfig+0x264>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f003 0307 	and.w	r3, r3, #7
 80015fe:	683a      	ldr	r2, [r7, #0]
 8001600:	429a      	cmp	r2, r3
 8001602:	d001      	beq.n	8001608 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e14c      	b.n	80018a2 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f003 0302 	and.w	r3, r3, #2
 8001610:	2b00      	cmp	r3, #0
 8001612:	d008      	beq.n	8001626 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001614:	4b84      	ldr	r3, [pc, #528]	; (8001828 <HAL_RCC_ClockConfig+0x268>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	4981      	ldr	r1, [pc, #516]	; (8001828 <HAL_RCC_ClockConfig+0x268>)
 8001622:	4313      	orrs	r3, r2
 8001624:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	2b00      	cmp	r3, #0
 8001630:	f000 80df 	beq.w	80017f2 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	2b01      	cmp	r3, #1
 800163a:	d13d      	bne.n	80016b8 <HAL_RCC_ClockConfig+0xf8>
 800163c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001640:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001642:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001644:	fa93 f3a3 	rbit	r3, r3
 8001648:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800164a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800164c:	fab3 f383 	clz	r3, r3
 8001650:	b2db      	uxtb	r3, r3
 8001652:	095b      	lsrs	r3, r3, #5
 8001654:	b2db      	uxtb	r3, r3
 8001656:	f043 0301 	orr.w	r3, r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d102      	bne.n	8001666 <HAL_RCC_ClockConfig+0xa6>
 8001660:	4b71      	ldr	r3, [pc, #452]	; (8001828 <HAL_RCC_ClockConfig+0x268>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	e00f      	b.n	8001686 <HAL_RCC_ClockConfig+0xc6>
 8001666:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800166a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800166e:	fa93 f3a3 	rbit	r3, r3
 8001672:	667b      	str	r3, [r7, #100]	; 0x64
 8001674:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001678:	663b      	str	r3, [r7, #96]	; 0x60
 800167a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800167c:	fa93 f3a3 	rbit	r3, r3
 8001680:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001682:	4b69      	ldr	r3, [pc, #420]	; (8001828 <HAL_RCC_ClockConfig+0x268>)
 8001684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001686:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800168a:	65ba      	str	r2, [r7, #88]	; 0x58
 800168c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800168e:	fa92 f2a2 	rbit	r2, r2
 8001692:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001694:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001696:	fab2 f282 	clz	r2, r2
 800169a:	b252      	sxtb	r2, r2
 800169c:	f042 0220 	orr.w	r2, r2, #32
 80016a0:	b252      	sxtb	r2, r2
 80016a2:	b2d2      	uxtb	r2, r2
 80016a4:	f002 021f 	and.w	r2, r2, #31
 80016a8:	2101      	movs	r1, #1
 80016aa:	fa01 f202 	lsl.w	r2, r1, r2
 80016ae:	4013      	ands	r3, r2
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	d17d      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80016b4:	2301      	movs	r3, #1
 80016b6:	e0f4      	b.n	80018a2 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	685b      	ldr	r3, [r3, #4]
 80016bc:	2b02      	cmp	r3, #2
 80016be:	d13d      	bne.n	800173c <HAL_RCC_ClockConfig+0x17c>
 80016c0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016c4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80016c8:	fa93 f3a3 	rbit	r3, r3
 80016cc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80016ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d0:	fab3 f383 	clz	r3, r3
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	095b      	lsrs	r3, r3, #5
 80016d8:	b2db      	uxtb	r3, r3
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	b2db      	uxtb	r3, r3
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d102      	bne.n	80016ea <HAL_RCC_ClockConfig+0x12a>
 80016e4:	4b50      	ldr	r3, [pc, #320]	; (8001828 <HAL_RCC_ClockConfig+0x268>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	e00f      	b.n	800170a <HAL_RCC_ClockConfig+0x14a>
 80016ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016ee:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80016f2:	fa93 f3a3 	rbit	r3, r3
 80016f6:	647b      	str	r3, [r7, #68]	; 0x44
 80016f8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80016fc:	643b      	str	r3, [r7, #64]	; 0x40
 80016fe:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001700:	fa93 f3a3 	rbit	r3, r3
 8001704:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001706:	4b48      	ldr	r3, [pc, #288]	; (8001828 <HAL_RCC_ClockConfig+0x268>)
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800170e:	63ba      	str	r2, [r7, #56]	; 0x38
 8001710:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001712:	fa92 f2a2 	rbit	r2, r2
 8001716:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001718:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800171a:	fab2 f282 	clz	r2, r2
 800171e:	b252      	sxtb	r2, r2
 8001720:	f042 0220 	orr.w	r2, r2, #32
 8001724:	b252      	sxtb	r2, r2
 8001726:	b2d2      	uxtb	r2, r2
 8001728:	f002 021f 	and.w	r2, r2, #31
 800172c:	2101      	movs	r1, #1
 800172e:	fa01 f202 	lsl.w	r2, r1, r2
 8001732:	4013      	ands	r3, r2
 8001734:	2b00      	cmp	r3, #0
 8001736:	d13b      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e0b2      	b.n	80018a2 <HAL_RCC_ClockConfig+0x2e2>
 800173c:	2302      	movs	r3, #2
 800173e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001742:	fa93 f3a3 	rbit	r3, r3
 8001746:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800174a:	fab3 f383 	clz	r3, r3
 800174e:	b2db      	uxtb	r3, r3
 8001750:	095b      	lsrs	r3, r3, #5
 8001752:	b2db      	uxtb	r3, r3
 8001754:	f043 0301 	orr.w	r3, r3, #1
 8001758:	b2db      	uxtb	r3, r3
 800175a:	2b01      	cmp	r3, #1
 800175c:	d102      	bne.n	8001764 <HAL_RCC_ClockConfig+0x1a4>
 800175e:	4b32      	ldr	r3, [pc, #200]	; (8001828 <HAL_RCC_ClockConfig+0x268>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	e00d      	b.n	8001780 <HAL_RCC_ClockConfig+0x1c0>
 8001764:	2302      	movs	r3, #2
 8001766:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800176a:	fa93 f3a3 	rbit	r3, r3
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
 8001770:	2302      	movs	r3, #2
 8001772:	623b      	str	r3, [r7, #32]
 8001774:	6a3b      	ldr	r3, [r7, #32]
 8001776:	fa93 f3a3 	rbit	r3, r3
 800177a:	61fb      	str	r3, [r7, #28]
 800177c:	4b2a      	ldr	r3, [pc, #168]	; (8001828 <HAL_RCC_ClockConfig+0x268>)
 800177e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001780:	2202      	movs	r2, #2
 8001782:	61ba      	str	r2, [r7, #24]
 8001784:	69ba      	ldr	r2, [r7, #24]
 8001786:	fa92 f2a2 	rbit	r2, r2
 800178a:	617a      	str	r2, [r7, #20]
  return(result);
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	fab2 f282 	clz	r2, r2
 8001792:	b252      	sxtb	r2, r2
 8001794:	f042 0220 	orr.w	r2, r2, #32
 8001798:	b252      	sxtb	r2, r2
 800179a:	b2d2      	uxtb	r2, r2
 800179c:	f002 021f 	and.w	r2, r2, #31
 80017a0:	2101      	movs	r1, #1
 80017a2:	fa01 f202 	lsl.w	r2, r1, r2
 80017a6:	4013      	ands	r3, r2
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d101      	bne.n	80017b0 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80017ac:	2301      	movs	r3, #1
 80017ae:	e078      	b.n	80018a2 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80017b0:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_RCC_ClockConfig+0x268>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f023 0203 	bic.w	r2, r3, #3
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	491a      	ldr	r1, [pc, #104]	; (8001828 <HAL_RCC_ClockConfig+0x268>)
 80017be:	4313      	orrs	r3, r2
 80017c0:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017c2:	f7fe fd5b 	bl	800027c <HAL_GetTick>
 80017c6:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017c8:	e00a      	b.n	80017e0 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017ca:	f7fe fd57 	bl	800027c <HAL_GetTick>
 80017ce:	4602      	mov	r2, r0
 80017d0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80017d2:	1ad3      	subs	r3, r2, r3
 80017d4:	f241 3288 	movw	r2, #5000	; 0x1388
 80017d8:	4293      	cmp	r3, r2
 80017da:	d901      	bls.n	80017e0 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 80017dc:	2303      	movs	r3, #3
 80017de:	e060      	b.n	80018a2 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017e0:	4b11      	ldr	r3, [pc, #68]	; (8001828 <HAL_RCC_ClockConfig+0x268>)
 80017e2:	685b      	ldr	r3, [r3, #4]
 80017e4:	f003 020c 	and.w	r2, r3, #12
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	685b      	ldr	r3, [r3, #4]
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	429a      	cmp	r2, r3
 80017f0:	d1eb      	bne.n	80017ca <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017f2:	4b0c      	ldr	r3, [pc, #48]	; (8001824 <HAL_RCC_ClockConfig+0x264>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 0307 	and.w	r3, r3, #7
 80017fa:	683a      	ldr	r2, [r7, #0]
 80017fc:	429a      	cmp	r2, r3
 80017fe:	d215      	bcs.n	800182c <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001800:	4b08      	ldr	r3, [pc, #32]	; (8001824 <HAL_RCC_ClockConfig+0x264>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	f023 0207 	bic.w	r2, r3, #7
 8001808:	4906      	ldr	r1, [pc, #24]	; (8001824 <HAL_RCC_ClockConfig+0x264>)
 800180a:	683b      	ldr	r3, [r7, #0]
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001810:	4b04      	ldr	r3, [pc, #16]	; (8001824 <HAL_RCC_ClockConfig+0x264>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	f003 0307 	and.w	r3, r3, #7
 8001818:	683a      	ldr	r2, [r7, #0]
 800181a:	429a      	cmp	r2, r3
 800181c:	d006      	beq.n	800182c <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 800181e:	2301      	movs	r3, #1
 8001820:	e03f      	b.n	80018a2 <HAL_RCC_ClockConfig+0x2e2>
 8001822:	bf00      	nop
 8001824:	40022000 	.word	0x40022000
 8001828:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 0304 	and.w	r3, r3, #4
 8001834:	2b00      	cmp	r3, #0
 8001836:	d008      	beq.n	800184a <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001838:	4b1c      	ldr	r3, [pc, #112]	; (80018ac <HAL_RCC_ClockConfig+0x2ec>)
 800183a:	685b      	ldr	r3, [r3, #4]
 800183c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	4919      	ldr	r1, [pc, #100]	; (80018ac <HAL_RCC_ClockConfig+0x2ec>)
 8001846:	4313      	orrs	r3, r2
 8001848:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0308 	and.w	r3, r3, #8
 8001852:	2b00      	cmp	r3, #0
 8001854:	d009      	beq.n	800186a <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001856:	4b15      	ldr	r3, [pc, #84]	; (80018ac <HAL_RCC_ClockConfig+0x2ec>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	691b      	ldr	r3, [r3, #16]
 8001862:	00db      	lsls	r3, r3, #3
 8001864:	4911      	ldr	r1, [pc, #68]	; (80018ac <HAL_RCC_ClockConfig+0x2ec>)
 8001866:	4313      	orrs	r3, r2
 8001868:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800186a:	f000 f825 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 800186e:	4601      	mov	r1, r0
 8001870:	4b0e      	ldr	r3, [pc, #56]	; (80018ac <HAL_RCC_ClockConfig+0x2ec>)
 8001872:	685b      	ldr	r3, [r3, #4]
 8001874:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001878:	23f0      	movs	r3, #240	; 0xf0
 800187a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	60fb      	str	r3, [r7, #12]
  return(result);
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	fab3 f383 	clz	r3, r3
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	4a08      	ldr	r2, [pc, #32]	; (80018b0 <HAL_RCC_ClockConfig+0x2f0>)
 8001890:	5cd3      	ldrb	r3, [r2, r3]
 8001892:	fa21 f303 	lsr.w	r3, r1, r3
 8001896:	4a07      	ldr	r2, [pc, #28]	; (80018b4 <HAL_RCC_ClockConfig+0x2f4>)
 8001898:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800189a:	2000      	movs	r0, #0
 800189c:	f7fe fcaa 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 80018a0:	2300      	movs	r3, #0
}
 80018a2:	4618      	mov	r0, r3
 80018a4:	3778      	adds	r7, #120	; 0x78
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000
 80018b0:	08002464 	.word	0x08002464
 80018b4:	20000008 	.word	0x20000008

080018b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b08b      	sub	sp, #44	; 0x2c
 80018bc:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80018be:	2300      	movs	r3, #0
 80018c0:	61fb      	str	r3, [r7, #28]
 80018c2:	2300      	movs	r3, #0
 80018c4:	61bb      	str	r3, [r7, #24]
 80018c6:	2300      	movs	r3, #0
 80018c8:	627b      	str	r3, [r7, #36]	; 0x24
 80018ca:	2300      	movs	r3, #0
 80018cc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80018ce:	2300      	movs	r3, #0
 80018d0:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80018d2:	4b29      	ldr	r3, [pc, #164]	; (8001978 <HAL_RCC_GetSysClockFreq+0xc0>)
 80018d4:	685b      	ldr	r3, [r3, #4]
 80018d6:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80018d8:	69fb      	ldr	r3, [r7, #28]
 80018da:	f003 030c 	and.w	r3, r3, #12
 80018de:	2b04      	cmp	r3, #4
 80018e0:	d002      	beq.n	80018e8 <HAL_RCC_GetSysClockFreq+0x30>
 80018e2:	2b08      	cmp	r3, #8
 80018e4:	d003      	beq.n	80018ee <HAL_RCC_GetSysClockFreq+0x36>
 80018e6:	e03c      	b.n	8001962 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80018e8:	4b24      	ldr	r3, [pc, #144]	; (800197c <HAL_RCC_GetSysClockFreq+0xc4>)
 80018ea:	623b      	str	r3, [r7, #32]
      break;
 80018ec:	e03c      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80018ee:	69fb      	ldr	r3, [r7, #28]
 80018f0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80018f4:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80018f8:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	fa93 f3a3 	rbit	r3, r3
 8001900:	607b      	str	r3, [r7, #4]
  return(result);
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	fab3 f383 	clz	r3, r3
 8001908:	fa22 f303 	lsr.w	r3, r2, r3
 800190c:	4a1c      	ldr	r2, [pc, #112]	; (8001980 <HAL_RCC_GetSysClockFreq+0xc8>)
 800190e:	5cd3      	ldrb	r3, [r2, r3]
 8001910:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001912:	4b19      	ldr	r3, [pc, #100]	; (8001978 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001916:	f003 020f 	and.w	r2, r3, #15
 800191a:	230f      	movs	r3, #15
 800191c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	fa93 f3a3 	rbit	r3, r3
 8001924:	60fb      	str	r3, [r7, #12]
  return(result);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	fab3 f383 	clz	r3, r3
 800192c:	fa22 f303 	lsr.w	r3, r2, r3
 8001930:	4a14      	ldr	r2, [pc, #80]	; (8001984 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001932:	5cd3      	ldrb	r3, [r2, r3]
 8001934:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800193c:	2b00      	cmp	r3, #0
 800193e:	d008      	beq.n	8001952 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001940:	4a0e      	ldr	r2, [pc, #56]	; (800197c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	fbb2 f2f3 	udiv	r2, r2, r3
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	fb02 f303 	mul.w	r3, r2, r3
 800194e:	627b      	str	r3, [r7, #36]	; 0x24
 8001950:	e004      	b.n	800195c <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001952:	697b      	ldr	r3, [r7, #20]
 8001954:	4a0c      	ldr	r2, [pc, #48]	; (8001988 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001956:	fb02 f303 	mul.w	r3, r2, r3
 800195a:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	623b      	str	r3, [r7, #32]
      break;
 8001960:	e002      	b.n	8001968 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001962:	4b06      	ldr	r3, [pc, #24]	; (800197c <HAL_RCC_GetSysClockFreq+0xc4>)
 8001964:	623b      	str	r3, [r7, #32]
      break;
 8001966:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001968:	6a3b      	ldr	r3, [r7, #32]
}
 800196a:	4618      	mov	r0, r3
 800196c:	372c      	adds	r7, #44	; 0x2c
 800196e:	46bd      	mov	sp, r7
 8001970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001974:	4770      	bx	lr
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	007a1200 	.word	0x007a1200
 8001980:	08002444 	.word	0x08002444
 8001984:	08002454 	.word	0x08002454
 8001988:	003d0900 	.word	0x003d0900

0800198c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20000008 	.word	0x20000008

080019a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80019aa:	f7ff ffef 	bl	800198c <HAL_RCC_GetHCLKFreq>
 80019ae:	4601      	mov	r1, r0
 80019b0:	4b0b      	ldr	r3, [pc, #44]	; (80019e0 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80019b8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80019bc:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	fa93 f3a3 	rbit	r3, r3
 80019c4:	603b      	str	r3, [r7, #0]
  return(result);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	fab3 f383 	clz	r3, r3
 80019cc:	fa22 f303 	lsr.w	r3, r2, r3
 80019d0:	4a04      	ldr	r2, [pc, #16]	; (80019e4 <HAL_RCC_GetPCLK1Freq+0x40>)
 80019d2:	5cd3      	ldrb	r3, [r2, r3]
 80019d4:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80019d8:	4618      	mov	r0, r3
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40021000 	.word	0x40021000
 80019e4:	08002474 	.word	0x08002474

080019e8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b082      	sub	sp, #8
 80019ec:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80019ee:	f7ff ffcd 	bl	800198c <HAL_RCC_GetHCLKFreq>
 80019f2:	4601      	mov	r1, r0
 80019f4:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80019fc:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001a00:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	fa93 f3a3 	rbit	r3, r3
 8001a08:	603b      	str	r3, [r7, #0]
  return(result);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	fab3 f383 	clz	r3, r3
 8001a10:	fa22 f303 	lsr.w	r3, r2, r3
 8001a14:	4a04      	ldr	r2, [pc, #16]	; (8001a28 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001a16:	5cd3      	ldrb	r3, [r2, r3]
 8001a18:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40021000 	.word	0x40021000
 8001a28:	08002474 	.word	0x08002474

08001a2c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d101      	bne.n	8001a3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e043      	b.n	8001ac6 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d106      	bne.n	8001a58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001a52:	6878      	ldr	r0, [r7, #4]
 8001a54:	f000 fbd8 	bl	8002208 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	2224      	movs	r2, #36	; 0x24
 8001a5c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	681a      	ldr	r2, [r3, #0]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0201 	bic.w	r2, r2, #1
 8001a6e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001a70:	6878      	ldr	r0, [r7, #4]
 8001a72:	f000 f82d 	bl	8001ad0 <UART_SetConfig>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d101      	bne.n	8001a80 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	e022      	b.n	8001ac6 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d002      	beq.n	8001a8e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f000 f987 	bl	8001d9c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	685a      	ldr	r2, [r3, #4]
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001a9c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	689a      	ldr	r2, [r3, #8]
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001aac:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 0201 	orr.w	r2, r2, #1
 8001abc:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 fa0e 	bl	8001ee0 <UART_CheckIdleState>
 8001ac4:	4603      	mov	r3, r0
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	3708      	adds	r7, #8
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bd80      	pop	{r7, pc}
	...

08001ad0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b086      	sub	sp, #24
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001adc:	2310      	movs	r3, #16
 8001ade:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689a      	ldr	r2, [r3, #8]
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	691b      	ldr	r3, [r3, #16]
 8001af4:	431a      	orrs	r2, r3
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	695b      	ldr	r3, [r3, #20]
 8001afa:	431a      	orrs	r2, r3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	69db      	ldr	r3, [r3, #28]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681a      	ldr	r2, [r3, #0]
 8001b0a:	4b9f      	ldr	r3, [pc, #636]	; (8001d88 <UART_SetConfig+0x2b8>)
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	6812      	ldr	r2, [r2, #0]
 8001b12:	68f9      	ldr	r1, [r7, #12]
 8001b14:	430b      	orrs	r3, r1
 8001b16:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	685b      	ldr	r3, [r3, #4]
 8001b1e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68da      	ldr	r2, [r3, #12]
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	430a      	orrs	r2, r1
 8001b2c:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	699a      	ldr	r2, [r3, #24]
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6a1b      	ldr	r3, [r3, #32]
 8001b36:	4313      	orrs	r3, r2
 8001b38:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	689b      	ldr	r3, [r3, #8]
 8001b40:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	68fa      	ldr	r2, [r7, #12]
 8001b4a:	430a      	orrs	r2, r1
 8001b4c:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4a8e      	ldr	r2, [pc, #568]	; (8001d8c <UART_SetConfig+0x2bc>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d121      	bne.n	8001b9c <UART_SetConfig+0xcc>
 8001b58:	4b8d      	ldr	r3, [pc, #564]	; (8001d90 <UART_SetConfig+0x2c0>)
 8001b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b5c:	f003 0303 	and.w	r3, r3, #3
 8001b60:	2b03      	cmp	r3, #3
 8001b62:	d817      	bhi.n	8001b94 <UART_SetConfig+0xc4>
 8001b64:	a201      	add	r2, pc, #4	; (adr r2, 8001b6c <UART_SetConfig+0x9c>)
 8001b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6a:	bf00      	nop
 8001b6c:	08001b7d 	.word	0x08001b7d
 8001b70:	08001b89 	.word	0x08001b89
 8001b74:	08001b8f 	.word	0x08001b8f
 8001b78:	08001b83 	.word	0x08001b83
 8001b7c:	2300      	movs	r3, #0
 8001b7e:	75fb      	strb	r3, [r7, #23]
 8001b80:	e01e      	b.n	8001bc0 <UART_SetConfig+0xf0>
 8001b82:	2302      	movs	r3, #2
 8001b84:	75fb      	strb	r3, [r7, #23]
 8001b86:	e01b      	b.n	8001bc0 <UART_SetConfig+0xf0>
 8001b88:	2304      	movs	r3, #4
 8001b8a:	75fb      	strb	r3, [r7, #23]
 8001b8c:	e018      	b.n	8001bc0 <UART_SetConfig+0xf0>
 8001b8e:	2308      	movs	r3, #8
 8001b90:	75fb      	strb	r3, [r7, #23]
 8001b92:	e015      	b.n	8001bc0 <UART_SetConfig+0xf0>
 8001b94:	2310      	movs	r3, #16
 8001b96:	75fb      	strb	r3, [r7, #23]
 8001b98:	bf00      	nop
 8001b9a:	e011      	b.n	8001bc0 <UART_SetConfig+0xf0>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	4a7c      	ldr	r2, [pc, #496]	; (8001d94 <UART_SetConfig+0x2c4>)
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d102      	bne.n	8001bac <UART_SetConfig+0xdc>
 8001ba6:	2300      	movs	r3, #0
 8001ba8:	75fb      	strb	r3, [r7, #23]
 8001baa:	e009      	b.n	8001bc0 <UART_SetConfig+0xf0>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	4a79      	ldr	r2, [pc, #484]	; (8001d98 <UART_SetConfig+0x2c8>)
 8001bb2:	4293      	cmp	r3, r2
 8001bb4:	d102      	bne.n	8001bbc <UART_SetConfig+0xec>
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	75fb      	strb	r3, [r7, #23]
 8001bba:	e001      	b.n	8001bc0 <UART_SetConfig+0xf0>
 8001bbc:	2310      	movs	r3, #16
 8001bbe:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69db      	ldr	r3, [r3, #28]
 8001bc4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001bc8:	d16f      	bne.n	8001caa <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8001bca:	7dfb      	ldrb	r3, [r7, #23]
 8001bcc:	2b08      	cmp	r3, #8
 8001bce:	d857      	bhi.n	8001c80 <UART_SetConfig+0x1b0>
 8001bd0:	a201      	add	r2, pc, #4	; (adr r2, 8001bd8 <UART_SetConfig+0x108>)
 8001bd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bd6:	bf00      	nop
 8001bd8:	08001bfd 	.word	0x08001bfd
 8001bdc:	08001c19 	.word	0x08001c19
 8001be0:	08001c35 	.word	0x08001c35
 8001be4:	08001c81 	.word	0x08001c81
 8001be8:	08001c4f 	.word	0x08001c4f
 8001bec:	08001c81 	.word	0x08001c81
 8001bf0:	08001c81 	.word	0x08001c81
 8001bf4:	08001c81 	.word	0x08001c81
 8001bf8:	08001c6b 	.word	0x08001c6b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001bfc:	f7ff fed2 	bl	80019a4 <HAL_RCC_GetPCLK1Freq>
 8001c00:	4603      	mov	r3, r0
 8001c02:	005a      	lsls	r2, r3, #1
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	085b      	lsrs	r3, r3, #1
 8001c0a:	441a      	add	r2, r3
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	685b      	ldr	r3, [r3, #4]
 8001c10:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c14:	82bb      	strh	r3, [r7, #20]
        break;
 8001c16:	e036      	b.n	8001c86 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c18:	f7ff fee6 	bl	80019e8 <HAL_RCC_GetPCLK2Freq>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	005a      	lsls	r2, r3, #1
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	085b      	lsrs	r3, r3, #1
 8001c26:	441a      	add	r2, r3
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c30:	82bb      	strh	r3, [r7, #20]
        break;
 8001c32:	e028      	b.n	8001c86 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	085b      	lsrs	r3, r3, #1
 8001c3a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001c3e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001c42:	687a      	ldr	r2, [r7, #4]
 8001c44:	6852      	ldr	r2, [r2, #4]
 8001c46:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c4a:	82bb      	strh	r3, [r7, #20]
        break;
 8001c4c:	e01b      	b.n	8001c86 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c4e:	f7ff fe33 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8001c52:	4603      	mov	r3, r0
 8001c54:	005a      	lsls	r2, r3, #1
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	085b      	lsrs	r3, r3, #1
 8001c5c:	441a      	add	r2, r3
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	685b      	ldr	r3, [r3, #4]
 8001c62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c66:	82bb      	strh	r3, [r7, #20]
        break;
 8001c68:	e00d      	b.n	8001c86 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	085b      	lsrs	r3, r3, #1
 8001c70:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	685b      	ldr	r3, [r3, #4]
 8001c78:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c7c:	82bb      	strh	r3, [r7, #20]
        break;
 8001c7e:	e002      	b.n	8001c86 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001c80:	2301      	movs	r3, #1
 8001c82:	74fb      	strb	r3, [r7, #19]
        break;
 8001c84:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001c86:	8abb      	ldrh	r3, [r7, #20]
 8001c88:	f023 030f 	bic.w	r3, r3, #15
 8001c8c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001c8e:	8abb      	ldrh	r3, [r7, #20]
 8001c90:	105b      	asrs	r3, r3, #1
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	f003 0307 	and.w	r3, r3, #7
 8001c98:	b29a      	uxth	r2, r3
 8001c9a:	897b      	ldrh	r3, [r7, #10]
 8001c9c:	4313      	orrs	r3, r2
 8001c9e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	897a      	ldrh	r2, [r7, #10]
 8001ca6:	60da      	str	r2, [r3, #12]
 8001ca8:	e069      	b.n	8001d7e <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8001caa:	7dfb      	ldrb	r3, [r7, #23]
 8001cac:	2b08      	cmp	r3, #8
 8001cae:	d863      	bhi.n	8001d78 <UART_SetConfig+0x2a8>
 8001cb0:	a201      	add	r2, pc, #4	; (adr r2, 8001cb8 <UART_SetConfig+0x1e8>)
 8001cb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cb6:	bf00      	nop
 8001cb8:	08001cdd 	.word	0x08001cdd
 8001cbc:	08001cfd 	.word	0x08001cfd
 8001cc0:	08001d1d 	.word	0x08001d1d
 8001cc4:	08001d79 	.word	0x08001d79
 8001cc8:	08001d3d 	.word	0x08001d3d
 8001ccc:	08001d79 	.word	0x08001d79
 8001cd0:	08001d79 	.word	0x08001d79
 8001cd4:	08001d79 	.word	0x08001d79
 8001cd8:	08001d5d 	.word	0x08001d5d
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001cdc:	f7ff fe62 	bl	80019a4 <HAL_RCC_GetPCLK1Freq>
 8001ce0:	4602      	mov	r2, r0
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	685b      	ldr	r3, [r3, #4]
 8001ce6:	085b      	lsrs	r3, r3, #1
 8001ce8:	441a      	add	r2, r3
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	60da      	str	r2, [r3, #12]
        break;
 8001cfa:	e040      	b.n	8001d7e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001cfc:	f7ff fe74 	bl	80019e8 <HAL_RCC_GetPCLK2Freq>
 8001d00:	4602      	mov	r2, r0
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	685b      	ldr	r3, [r3, #4]
 8001d06:	085b      	lsrs	r3, r3, #1
 8001d08:	441a      	add	r2, r3
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	685b      	ldr	r3, [r3, #4]
 8001d0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d12:	b29a      	uxth	r2, r3
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	60da      	str	r2, [r3, #12]
        break;
 8001d1a:	e030      	b.n	8001d7e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	085b      	lsrs	r3, r3, #1
 8001d22:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001d26:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	6852      	ldr	r2, [r2, #4]
 8001d2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	60da      	str	r2, [r3, #12]
        break;
 8001d3a:	e020      	b.n	8001d7e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001d3c:	f7ff fdbc 	bl	80018b8 <HAL_RCC_GetSysClockFreq>
 8001d40:	4602      	mov	r2, r0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	685b      	ldr	r3, [r3, #4]
 8001d46:	085b      	lsrs	r3, r3, #1
 8001d48:	441a      	add	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	685b      	ldr	r3, [r3, #4]
 8001d4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d52:	b29a      	uxth	r2, r3
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	60da      	str	r2, [r3, #12]
        break;
 8001d5a:	e010      	b.n	8001d7e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	085b      	lsrs	r3, r3, #1
 8001d62:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	685b      	ldr	r3, [r3, #4]
 8001d6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d6e:	b29a      	uxth	r2, r3
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	60da      	str	r2, [r3, #12]
        break;
 8001d76:	e002      	b.n	8001d7e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001d78:	2301      	movs	r3, #1
 8001d7a:	74fb      	strb	r3, [r7, #19]
        break;
 8001d7c:	bf00      	nop
    }
  }

  return ret;
 8001d7e:	7cfb      	ldrb	r3, [r7, #19]

}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3718      	adds	r7, #24
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	efff69f3 	.word	0xefff69f3
 8001d8c:	40013800 	.word	0x40013800
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40004400 	.word	0x40004400
 8001d98:	40004800 	.word	0x40004800

08001d9c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d00a      	beq.n	8001dc6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dca:	f003 0302 	and.w	r3, r3, #2
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d00a      	beq.n	8001de8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	685b      	ldr	r3, [r3, #4]
 8001dd8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	430a      	orrs	r2, r1
 8001de6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dec:	f003 0304 	and.w	r3, r3, #4
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d00a      	beq.n	8001e0a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	430a      	orrs	r2, r1
 8001e08:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d00a      	beq.n	8001e2c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	430a      	orrs	r2, r1
 8001e2a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e30:	f003 0310 	and.w	r3, r3, #16
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d00a      	beq.n	8001e4e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e52:	f003 0320 	and.w	r3, r3, #32
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d00a      	beq.n	8001e70 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	430a      	orrs	r2, r1
 8001e6e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d01a      	beq.n	8001eb2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	430a      	orrs	r2, r1
 8001e90:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8001e9a:	d10a      	bne.n	8001eb2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	430a      	orrs	r2, r1
 8001eb0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d00a      	beq.n	8001ed4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	430a      	orrs	r2, r1
 8001ed2:	605a      	str	r2, [r3, #4]
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	370c      	adds	r7, #12
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr

08001ee0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b086      	sub	sp, #24
 8001ee4:	af02      	add	r7, sp, #8
 8001ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8001ef2:	f7fe f9c3 	bl	800027c <HAL_GetTick>
 8001ef6:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b08      	cmp	r3, #8
 8001f04:	d10e      	bne.n	8001f24 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f06:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001f0a:	9300      	str	r3, [sp, #0]
 8001f0c:	68fb      	ldr	r3, [r7, #12]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001f14:	6878      	ldr	r0, [r7, #4]
 8001f16:	f000 f82c 	bl	8001f72 <UART_WaitOnFlagUntilTimeout>
 8001f1a:	4603      	mov	r3, r0
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d001      	beq.n	8001f24 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8001f20:	2303      	movs	r3, #3
 8001f22:	e022      	b.n	8001f6a <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0304 	and.w	r3, r3, #4
 8001f2e:	2b04      	cmp	r3, #4
 8001f30:	d10e      	bne.n	8001f50 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001f32:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001f36:	9300      	str	r3, [sp, #0]
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f000 f816 	bl	8001f72 <UART_WaitOnFlagUntilTimeout>
 8001f46:	4603      	mov	r3, r0
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d001      	beq.n	8001f50 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e00c      	b.n	8001f6a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2220      	movs	r2, #32
 8001f54:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	2220      	movs	r2, #32
 8001f5c:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2200      	movs	r2, #0
 8001f64:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8001f68:	2300      	movs	r3, #0
}
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	3710      	adds	r7, #16
 8001f6e:	46bd      	mov	sp, r7
 8001f70:	bd80      	pop	{r7, pc}

08001f72 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001f72:	b580      	push	{r7, lr}
 8001f74:	b084      	sub	sp, #16
 8001f76:	af00      	add	r7, sp, #0
 8001f78:	60f8      	str	r0, [r7, #12]
 8001f7a:	60b9      	str	r1, [r7, #8]
 8001f7c:	603b      	str	r3, [r7, #0]
 8001f7e:	4613      	mov	r3, r2
 8001f80:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001f82:	e02c      	b.n	8001fde <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8001f84:	69bb      	ldr	r3, [r7, #24]
 8001f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f8a:	d028      	beq.n	8001fde <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d007      	beq.n	8001fa2 <UART_WaitOnFlagUntilTimeout+0x30>
 8001f92:	f7fe f973 	bl	800027c <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	683b      	ldr	r3, [r7, #0]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	69ba      	ldr	r2, [r7, #24]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d21d      	bcs.n	8001fde <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001fb0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	689a      	ldr	r2, [r3, #8]
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f022 0201 	bic.w	r2, r2, #1
 8001fc0:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2220      	movs	r2, #32
 8001fce:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	e00f      	b.n	8001ffe <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	69da      	ldr	r2, [r3, #28]
 8001fe4:	68bb      	ldr	r3, [r7, #8]
 8001fe6:	4013      	ands	r3, r2
 8001fe8:	68ba      	ldr	r2, [r7, #8]
 8001fea:	429a      	cmp	r2, r3
 8001fec:	bf0c      	ite	eq
 8001fee:	2301      	moveq	r3, #1
 8001ff0:	2300      	movne	r3, #0
 8001ff2:	b2db      	uxtb	r3, r3
 8001ff4:	461a      	mov	r2, r3
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d0c3      	beq.n	8001f84 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001ffc:	2300      	movs	r3, #0
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3710      	adds	r7, #16
 8002002:	46bd      	mov	sp, r7
 8002004:	bd80      	pop	{r7, pc}
	...

08002008 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800200c:	f7fe f8dc 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002010:	f000 f810 	bl	8002034 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002014:	f000 f882 	bl	800211c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002018:	f000 f850 	bl	80020bc <MX_USART2_UART_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800201c:	2108      	movs	r1, #8
 800201e:	4804      	ldr	r0, [pc, #16]	; (8002030 <main+0x28>)
 8002020:	f7fe fbce 	bl	80007c0 <HAL_GPIO_TogglePin>
	  HAL_Delay(500);
 8002024:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002028:	f7fe f934 	bl	8000294 <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 800202c:	e7f6      	b.n	800201c <main+0x14>
 800202e:	bf00      	nop
 8002030:	48000400 	.word	0x48000400

08002034 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002034:	b580      	push	{r7, lr}
 8002036:	b090      	sub	sp, #64	; 0x40
 8002038:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800203a:	f107 0318 	add.w	r3, r7, #24
 800203e:	2228      	movs	r2, #40	; 0x28
 8002040:	2100      	movs	r1, #0
 8002042:	4618      	mov	r0, r3
 8002044:	f000 f9ea 	bl	800241c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002048:	1d3b      	adds	r3, r7, #4
 800204a:	2200      	movs	r2, #0
 800204c:	601a      	str	r2, [r3, #0]
 800204e:	605a      	str	r2, [r3, #4]
 8002050:	609a      	str	r2, [r3, #8]
 8002052:	60da      	str	r2, [r3, #12]
 8002054:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002056:	2301      	movs	r3, #1
 8002058:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800205a:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800205e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002060:	2300      	movs	r3, #0
 8002062:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002064:	2301      	movs	r3, #1
 8002066:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002068:	2302      	movs	r3, #2
 800206a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800206c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002070:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8002072:	2300      	movs	r3, #0
 8002074:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002076:	f107 0318 	add.w	r3, r7, #24
 800207a:	4618      	mov	r0, r3
 800207c:	f7fe fbb2 	bl	80007e4 <HAL_RCC_OscConfig>
 8002080:	4603      	mov	r3, r0
 8002082:	2b00      	cmp	r3, #0
 8002084:	d001      	beq.n	800208a <SystemClock_Config+0x56>
  {
    Error_Handler();
 8002086:	f000 f893 	bl	80021b0 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800208a:	230f      	movs	r3, #15
 800208c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800208e:	2302      	movs	r3, #2
 8002090:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8002092:	2380      	movs	r3, #128	; 0x80
 8002094:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002096:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800209a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800209c:	2300      	movs	r3, #0
 800209e:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80020a0:	1d3b      	adds	r3, r7, #4
 80020a2:	2100      	movs	r1, #0
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7ff fa8b 	bl	80015c0 <HAL_RCC_ClockConfig>
 80020aa:	4603      	mov	r3, r0
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d001      	beq.n	80020b4 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80020b0:	f000 f87e 	bl	80021b0 <Error_Handler>
  }
}
 80020b4:	bf00      	nop
 80020b6:	3740      	adds	r7, #64	; 0x40
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}

080020bc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020c0:	4b14      	ldr	r3, [pc, #80]	; (8002114 <MX_USART2_UART_Init+0x58>)
 80020c2:	4a15      	ldr	r2, [pc, #84]	; (8002118 <MX_USART2_UART_Init+0x5c>)
 80020c4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80020c6:	4b13      	ldr	r3, [pc, #76]	; (8002114 <MX_USART2_UART_Init+0x58>)
 80020c8:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80020cc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020ce:	4b11      	ldr	r3, [pc, #68]	; (8002114 <MX_USART2_UART_Init+0x58>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020d4:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <MX_USART2_UART_Init+0x58>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80020da:	4b0e      	ldr	r3, [pc, #56]	; (8002114 <MX_USART2_UART_Init+0x58>)
 80020dc:	2200      	movs	r2, #0
 80020de:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <MX_USART2_UART_Init+0x58>)
 80020e2:	220c      	movs	r2, #12
 80020e4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020e6:	4b0b      	ldr	r3, [pc, #44]	; (8002114 <MX_USART2_UART_Init+0x58>)
 80020e8:	2200      	movs	r2, #0
 80020ea:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80020ec:	4b09      	ldr	r3, [pc, #36]	; (8002114 <MX_USART2_UART_Init+0x58>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020f2:	4b08      	ldr	r3, [pc, #32]	; (8002114 <MX_USART2_UART_Init+0x58>)
 80020f4:	2200      	movs	r2, #0
 80020f6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020f8:	4b06      	ldr	r3, [pc, #24]	; (8002114 <MX_USART2_UART_Init+0x58>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80020fe:	4805      	ldr	r0, [pc, #20]	; (8002114 <MX_USART2_UART_Init+0x58>)
 8002100:	f7ff fc94 	bl	8001a2c <HAL_UART_Init>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d001      	beq.n	800210e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800210a:	f000 f851 	bl	80021b0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	2000002c 	.word	0x2000002c
 8002118:	40004400 	.word	0x40004400

0800211c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b088      	sub	sp, #32
 8002120:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002122:	f107 030c 	add.w	r3, r7, #12
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
 800212a:	605a      	str	r2, [r3, #4]
 800212c:	609a      	str	r2, [r3, #8]
 800212e:	60da      	str	r2, [r3, #12]
 8002130:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8002132:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <MX_GPIO_Init+0x8c>)
 8002134:	695b      	ldr	r3, [r3, #20]
 8002136:	4a1c      	ldr	r2, [pc, #112]	; (80021a8 <MX_GPIO_Init+0x8c>)
 8002138:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800213c:	6153      	str	r3, [r2, #20]
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <MX_GPIO_Init+0x8c>)
 8002140:	695b      	ldr	r3, [r3, #20]
 8002142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002146:	60bb      	str	r3, [r7, #8]
 8002148:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800214a:	4b17      	ldr	r3, [pc, #92]	; (80021a8 <MX_GPIO_Init+0x8c>)
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	4a16      	ldr	r2, [pc, #88]	; (80021a8 <MX_GPIO_Init+0x8c>)
 8002150:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002154:	6153      	str	r3, [r2, #20]
 8002156:	4b14      	ldr	r3, [pc, #80]	; (80021a8 <MX_GPIO_Init+0x8c>)
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	607b      	str	r3, [r7, #4]
 8002160:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002162:	4b11      	ldr	r3, [pc, #68]	; (80021a8 <MX_GPIO_Init+0x8c>)
 8002164:	695b      	ldr	r3, [r3, #20]
 8002166:	4a10      	ldr	r2, [pc, #64]	; (80021a8 <MX_GPIO_Init+0x8c>)
 8002168:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800216c:	6153      	str	r3, [r2, #20]
 800216e:	4b0e      	ldr	r3, [pc, #56]	; (80021a8 <MX_GPIO_Init+0x8c>)
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002176:	603b      	str	r3, [r7, #0]
 8002178:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800217a:	2200      	movs	r2, #0
 800217c:	2108      	movs	r1, #8
 800217e:	480b      	ldr	r0, [pc, #44]	; (80021ac <MX_GPIO_Init+0x90>)
 8002180:	f7fe fb06 	bl	8000790 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002184:	2308      	movs	r3, #8
 8002186:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002188:	2301      	movs	r3, #1
 800218a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002190:	2300      	movs	r3, #0
 8002192:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002194:	f107 030c 	add.w	r3, r7, #12
 8002198:	4619      	mov	r1, r3
 800219a:	4804      	ldr	r0, [pc, #16]	; (80021ac <MX_GPIO_Init+0x90>)
 800219c:	f7fe f982 	bl	80004a4 <HAL_GPIO_Init>

}
 80021a0:	bf00      	nop
 80021a2:	3720      	adds	r7, #32
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	48000400 	.word	0x48000400

080021b0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr
	...

080021c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021c6:	4b0f      	ldr	r3, [pc, #60]	; (8002204 <HAL_MspInit+0x44>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	4a0e      	ldr	r2, [pc, #56]	; (8002204 <HAL_MspInit+0x44>)
 80021cc:	f043 0301 	orr.w	r3, r3, #1
 80021d0:	6193      	str	r3, [r2, #24]
 80021d2:	4b0c      	ldr	r3, [pc, #48]	; (8002204 <HAL_MspInit+0x44>)
 80021d4:	699b      	ldr	r3, [r3, #24]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	607b      	str	r3, [r7, #4]
 80021dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021de:	4b09      	ldr	r3, [pc, #36]	; (8002204 <HAL_MspInit+0x44>)
 80021e0:	69db      	ldr	r3, [r3, #28]
 80021e2:	4a08      	ldr	r2, [pc, #32]	; (8002204 <HAL_MspInit+0x44>)
 80021e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021e8:	61d3      	str	r3, [r2, #28]
 80021ea:	4b06      	ldr	r3, [pc, #24]	; (8002204 <HAL_MspInit+0x44>)
 80021ec:	69db      	ldr	r3, [r3, #28]
 80021ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021f2:	603b      	str	r3, [r7, #0]
 80021f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002200:	4770      	bx	lr
 8002202:	bf00      	nop
 8002204:	40021000 	.word	0x40021000

08002208 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	b08a      	sub	sp, #40	; 0x28
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002210:	f107 0314 	add.w	r3, r7, #20
 8002214:	2200      	movs	r2, #0
 8002216:	601a      	str	r2, [r3, #0]
 8002218:	605a      	str	r2, [r3, #4]
 800221a:	609a      	str	r2, [r3, #8]
 800221c:	60da      	str	r2, [r3, #12]
 800221e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	4a18      	ldr	r2, [pc, #96]	; (8002288 <HAL_UART_MspInit+0x80>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d129      	bne.n	800227e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800222a:	4b18      	ldr	r3, [pc, #96]	; (800228c <HAL_UART_MspInit+0x84>)
 800222c:	69db      	ldr	r3, [r3, #28]
 800222e:	4a17      	ldr	r2, [pc, #92]	; (800228c <HAL_UART_MspInit+0x84>)
 8002230:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002234:	61d3      	str	r3, [r2, #28]
 8002236:	4b15      	ldr	r3, [pc, #84]	; (800228c <HAL_UART_MspInit+0x84>)
 8002238:	69db      	ldr	r3, [r3, #28]
 800223a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223e:	613b      	str	r3, [r7, #16]
 8002240:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002242:	4b12      	ldr	r3, [pc, #72]	; (800228c <HAL_UART_MspInit+0x84>)
 8002244:	695b      	ldr	r3, [r3, #20]
 8002246:	4a11      	ldr	r2, [pc, #68]	; (800228c <HAL_UART_MspInit+0x84>)
 8002248:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800224c:	6153      	str	r3, [r2, #20]
 800224e:	4b0f      	ldr	r3, [pc, #60]	; (800228c <HAL_UART_MspInit+0x84>)
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002256:	60fb      	str	r3, [r7, #12]
 8002258:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800225a:	f248 0304 	movw	r3, #32772	; 0x8004
 800225e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002260:	2302      	movs	r3, #2
 8002262:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002264:	2300      	movs	r3, #0
 8002266:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002268:	2303      	movs	r3, #3
 800226a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800226c:	2307      	movs	r3, #7
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002270:	f107 0314 	add.w	r3, r7, #20
 8002274:	4619      	mov	r1, r3
 8002276:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800227a:	f7fe f913 	bl	80004a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800227e:	bf00      	nop
 8002280:	3728      	adds	r7, #40	; 0x28
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	40004400 	.word	0x40004400
 800228c:	40021000 	.word	0x40021000

08002290 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002294:	bf00      	nop
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr

0800229e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800229e:	b480      	push	{r7}
 80022a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022a2:	e7fe      	b.n	80022a2 <HardFault_Handler+0x4>

080022a4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022a4:	b480      	push	{r7}
 80022a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022a8:	e7fe      	b.n	80022a8 <MemManage_Handler+0x4>

080022aa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022aa:	b480      	push	{r7}
 80022ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022ae:	e7fe      	b.n	80022ae <BusFault_Handler+0x4>

080022b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022b4:	e7fe      	b.n	80022b4 <UsageFault_Handler+0x4>

080022b6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80022b6:	b480      	push	{r7}
 80022b8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80022ba:	bf00      	nop
 80022bc:	46bd      	mov	sp, r7
 80022be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c2:	4770      	bx	lr

080022c4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022c8:	bf00      	nop
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr

080022d2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80022d2:	b480      	push	{r7}
 80022d4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80022d6:	bf00      	nop
 80022d8:	46bd      	mov	sp, r7
 80022da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022de:	4770      	bx	lr

080022e0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80022e4:	f7fd ffb6 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	bd80      	pop	{r7, pc}

080022ec <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80022ec:	b480      	push	{r7}
 80022ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80022f0:	4b1f      	ldr	r3, [pc, #124]	; (8002370 <SystemInit+0x84>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	4a1e      	ldr	r2, [pc, #120]	; (8002370 <SystemInit+0x84>)
 80022f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80022fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002300:	4b1c      	ldr	r3, [pc, #112]	; (8002374 <SystemInit+0x88>)
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	4a1b      	ldr	r2, [pc, #108]	; (8002374 <SystemInit+0x88>)
 8002306:	f043 0301 	orr.w	r3, r3, #1
 800230a:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <SystemInit+0x88>)
 800230e:	685a      	ldr	r2, [r3, #4]
 8002310:	4918      	ldr	r1, [pc, #96]	; (8002374 <SystemInit+0x88>)
 8002312:	4b19      	ldr	r3, [pc, #100]	; (8002378 <SystemInit+0x8c>)
 8002314:	4013      	ands	r3, r2
 8002316:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002318:	4b16      	ldr	r3, [pc, #88]	; (8002374 <SystemInit+0x88>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a15      	ldr	r2, [pc, #84]	; (8002374 <SystemInit+0x88>)
 800231e:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002322:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002326:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8002328:	4b12      	ldr	r3, [pc, #72]	; (8002374 <SystemInit+0x88>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4a11      	ldr	r2, [pc, #68]	; (8002374 <SystemInit+0x88>)
 800232e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002332:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002334:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <SystemInit+0x88>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a0e      	ldr	r2, [pc, #56]	; (8002374 <SystemInit+0x88>)
 800233a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800233e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002340:	4b0c      	ldr	r3, [pc, #48]	; (8002374 <SystemInit+0x88>)
 8002342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002344:	4a0b      	ldr	r2, [pc, #44]	; (8002374 <SystemInit+0x88>)
 8002346:	f023 030f 	bic.w	r3, r3, #15
 800234a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800234c:	4b09      	ldr	r3, [pc, #36]	; (8002374 <SystemInit+0x88>)
 800234e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002350:	4908      	ldr	r1, [pc, #32]	; (8002374 <SystemInit+0x88>)
 8002352:	4b0a      	ldr	r3, [pc, #40]	; (800237c <SystemInit+0x90>)
 8002354:	4013      	ands	r3, r2
 8002356:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002358:	4b06      	ldr	r3, [pc, #24]	; (8002374 <SystemInit+0x88>)
 800235a:	2200      	movs	r2, #0
 800235c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800235e:	4b04      	ldr	r3, [pc, #16]	; (8002370 <SystemInit+0x84>)
 8002360:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002364:	609a      	str	r2, [r3, #8]
#endif
}
 8002366:	bf00      	nop
 8002368:	46bd      	mov	sp, r7
 800236a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236e:	4770      	bx	lr
 8002370:	e000ed00 	.word	0xe000ed00
 8002374:	40021000 	.word	0x40021000
 8002378:	f87fc00c 	.word	0xf87fc00c
 800237c:	ff00fccc 	.word	0xff00fccc

08002380 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002380:	f8df d034 	ldr.w	sp, [pc, #52]	; 80023b8 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002384:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002386:	e003      	b.n	8002390 <LoopCopyDataInit>

08002388 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002388:	4b0c      	ldr	r3, [pc, #48]	; (80023bc <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800238a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800238c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800238e:	3104      	adds	r1, #4

08002390 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002390:	480b      	ldr	r0, [pc, #44]	; (80023c0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8002392:	4b0c      	ldr	r3, [pc, #48]	; (80023c4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002394:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002396:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002398:	d3f6      	bcc.n	8002388 <CopyDataInit>
	ldr	r2, =_sbss
 800239a:	4a0b      	ldr	r2, [pc, #44]	; (80023c8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800239c:	e002      	b.n	80023a4 <LoopFillZerobss>

0800239e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800239e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80023a0:	f842 3b04 	str.w	r3, [r2], #4

080023a4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80023a4:	4b09      	ldr	r3, [pc, #36]	; (80023cc <LoopForever+0x16>)
	cmp	r2, r3
 80023a6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80023a8:	d3f9      	bcc.n	800239e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80023aa:	f7ff ff9f 	bl	80022ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023ae:	f000 f811 	bl	80023d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023b2:	f7ff fe29 	bl	8002008 <main>

080023b6 <LoopForever>:

LoopForever:
    b LoopForever
 80023b6:	e7fe      	b.n	80023b6 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80023b8:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80023bc:	08002484 	.word	0x08002484
	ldr	r0, =_sdata
 80023c0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80023c4:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80023c8:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80023cc:	2000009c 	.word	0x2000009c

080023d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023d0:	e7fe      	b.n	80023d0 <ADC1_2_IRQHandler>
	...

080023d4 <__libc_init_array>:
 80023d4:	b570      	push	{r4, r5, r6, lr}
 80023d6:	4e0d      	ldr	r6, [pc, #52]	; (800240c <__libc_init_array+0x38>)
 80023d8:	4c0d      	ldr	r4, [pc, #52]	; (8002410 <__libc_init_array+0x3c>)
 80023da:	1ba4      	subs	r4, r4, r6
 80023dc:	10a4      	asrs	r4, r4, #2
 80023de:	2500      	movs	r5, #0
 80023e0:	42a5      	cmp	r5, r4
 80023e2:	d109      	bne.n	80023f8 <__libc_init_array+0x24>
 80023e4:	4e0b      	ldr	r6, [pc, #44]	; (8002414 <__libc_init_array+0x40>)
 80023e6:	4c0c      	ldr	r4, [pc, #48]	; (8002418 <__libc_init_array+0x44>)
 80023e8:	f000 f820 	bl	800242c <_init>
 80023ec:	1ba4      	subs	r4, r4, r6
 80023ee:	10a4      	asrs	r4, r4, #2
 80023f0:	2500      	movs	r5, #0
 80023f2:	42a5      	cmp	r5, r4
 80023f4:	d105      	bne.n	8002402 <__libc_init_array+0x2e>
 80023f6:	bd70      	pop	{r4, r5, r6, pc}
 80023f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80023fc:	4798      	blx	r3
 80023fe:	3501      	adds	r5, #1
 8002400:	e7ee      	b.n	80023e0 <__libc_init_array+0xc>
 8002402:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002406:	4798      	blx	r3
 8002408:	3501      	adds	r5, #1
 800240a:	e7f2      	b.n	80023f2 <__libc_init_array+0x1e>
 800240c:	0800247c 	.word	0x0800247c
 8002410:	0800247c 	.word	0x0800247c
 8002414:	0800247c 	.word	0x0800247c
 8002418:	08002480 	.word	0x08002480

0800241c <memset>:
 800241c:	4402      	add	r2, r0
 800241e:	4603      	mov	r3, r0
 8002420:	4293      	cmp	r3, r2
 8002422:	d100      	bne.n	8002426 <memset+0xa>
 8002424:	4770      	bx	lr
 8002426:	f803 1b01 	strb.w	r1, [r3], #1
 800242a:	e7f9      	b.n	8002420 <memset+0x4>

0800242c <_init>:
 800242c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800242e:	bf00      	nop
 8002430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002432:	bc08      	pop	{r3}
 8002434:	469e      	mov	lr, r3
 8002436:	4770      	bx	lr

08002438 <_fini>:
 8002438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800243a:	bf00      	nop
 800243c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800243e:	bc08      	pop	{r3}
 8002440:	469e      	mov	lr, r3
 8002442:	4770      	bx	lr
