
F303_DAC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002510  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  08002698  08002698  00012698  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080026d0  080026d0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080026d0  080026d0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080026d0  080026d0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080026d0  080026d0  000126d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080026d4  080026d4  000126d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080026d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  2000000c  080026e4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b0  080026e4  000200b0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d0dd  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001a15  00000000  00000000  0002d119  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000748  00000000  00000000  0002eb30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000690  00000000  00000000  0002f278  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017a19  00000000  00000000  0002f908  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000078fd  00000000  00000000  00047321  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000803f9  00000000  00000000  0004ec1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cf017  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001cc4  00000000  00000000  000cf094  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002680 	.word	0x08002680

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08002680 	.word	0x08002680

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f90d 	bl	80003f8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f002 f8d8 	bl	8002398 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f917 	bl	8000446 <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f000 f8ed 	bl	800040e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000028 	.word	0x20000028

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028

08000294 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000294:	b480      	push	{r7}
 8000296:	b085      	sub	sp, #20
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	f003 0307 	and.w	r3, r3, #7
 80002a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002a4:	4b0c      	ldr	r3, [pc, #48]	; (80002d8 <NVIC_SetPriorityGrouping+0x44>)
 80002a6:	68db      	ldr	r3, [r3, #12]
 80002a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002aa:	68ba      	ldr	r2, [r7, #8]
 80002ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002b0:	4013      	ands	r3, r2
 80002b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002b8:	68bb      	ldr	r3, [r7, #8]
 80002ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80002bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80002c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80002c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80002c6:	4a04      	ldr	r2, [pc, #16]	; (80002d8 <NVIC_SetPriorityGrouping+0x44>)
 80002c8:	68bb      	ldr	r3, [r7, #8]
 80002ca:	60d3      	str	r3, [r2, #12]
}
 80002cc:	bf00      	nop
 80002ce:	3714      	adds	r7, #20
 80002d0:	46bd      	mov	sp, r7
 80002d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d6:	4770      	bx	lr
 80002d8:	e000ed00 	.word	0xe000ed00

080002dc <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 80002dc:	b480      	push	{r7}
 80002de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002e0:	4b04      	ldr	r3, [pc, #16]	; (80002f4 <NVIC_GetPriorityGrouping+0x18>)
 80002e2:	68db      	ldr	r3, [r3, #12]
 80002e4:	0a1b      	lsrs	r3, r3, #8
 80002e6:	f003 0307 	and.w	r3, r3, #7
}
 80002ea:	4618      	mov	r0, r3
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr
 80002f4:	e000ed00 	.word	0xe000ed00

080002f8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002f8:	b480      	push	{r7}
 80002fa:	b083      	sub	sp, #12
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	4603      	mov	r3, r0
 8000300:	6039      	str	r1, [r7, #0]
 8000302:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000304:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000308:	2b00      	cmp	r3, #0
 800030a:	da0b      	bge.n	8000324 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030c:	683b      	ldr	r3, [r7, #0]
 800030e:	b2da      	uxtb	r2, r3
 8000310:	490c      	ldr	r1, [pc, #48]	; (8000344 <NVIC_SetPriority+0x4c>)
 8000312:	79fb      	ldrb	r3, [r7, #7]
 8000314:	f003 030f 	and.w	r3, r3, #15
 8000318:	3b04      	subs	r3, #4
 800031a:	0112      	lsls	r2, r2, #4
 800031c:	b2d2      	uxtb	r2, r2
 800031e:	440b      	add	r3, r1
 8000320:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000322:	e009      	b.n	8000338 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000324:	683b      	ldr	r3, [r7, #0]
 8000326:	b2da      	uxtb	r2, r3
 8000328:	4907      	ldr	r1, [pc, #28]	; (8000348 <NVIC_SetPriority+0x50>)
 800032a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032e:	0112      	lsls	r2, r2, #4
 8000330:	b2d2      	uxtb	r2, r2
 8000332:	440b      	add	r3, r1
 8000334:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000338:	bf00      	nop
 800033a:	370c      	adds	r7, #12
 800033c:	46bd      	mov	sp, r7
 800033e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000342:	4770      	bx	lr
 8000344:	e000ed00 	.word	0xe000ed00
 8000348:	e000e100 	.word	0xe000e100

0800034c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800034c:	b480      	push	{r7}
 800034e:	b089      	sub	sp, #36	; 0x24
 8000350:	af00      	add	r7, sp, #0
 8000352:	60f8      	str	r0, [r7, #12]
 8000354:	60b9      	str	r1, [r7, #8]
 8000356:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000358:	68fb      	ldr	r3, [r7, #12]
 800035a:	f003 0307 	and.w	r3, r3, #7
 800035e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000360:	69fb      	ldr	r3, [r7, #28]
 8000362:	f1c3 0307 	rsb	r3, r3, #7
 8000366:	2b04      	cmp	r3, #4
 8000368:	bf28      	it	cs
 800036a:	2304      	movcs	r3, #4
 800036c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800036e:	69fb      	ldr	r3, [r7, #28]
 8000370:	3304      	adds	r3, #4
 8000372:	2b06      	cmp	r3, #6
 8000374:	d902      	bls.n	800037c <NVIC_EncodePriority+0x30>
 8000376:	69fb      	ldr	r3, [r7, #28]
 8000378:	3b03      	subs	r3, #3
 800037a:	e000      	b.n	800037e <NVIC_EncodePriority+0x32>
 800037c:	2300      	movs	r3, #0
 800037e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000380:	f04f 32ff 	mov.w	r2, #4294967295
 8000384:	69bb      	ldr	r3, [r7, #24]
 8000386:	fa02 f303 	lsl.w	r3, r2, r3
 800038a:	43da      	mvns	r2, r3
 800038c:	68bb      	ldr	r3, [r7, #8]
 800038e:	401a      	ands	r2, r3
 8000390:	697b      	ldr	r3, [r7, #20]
 8000392:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000394:	f04f 31ff 	mov.w	r1, #4294967295
 8000398:	697b      	ldr	r3, [r7, #20]
 800039a:	fa01 f303 	lsl.w	r3, r1, r3
 800039e:	43d9      	mvns	r1, r3
 80003a0:	687b      	ldr	r3, [r7, #4]
 80003a2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003a4:	4313      	orrs	r3, r2
         );
}
 80003a6:	4618      	mov	r0, r3
 80003a8:	3724      	adds	r7, #36	; 0x24
 80003aa:	46bd      	mov	sp, r7
 80003ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003b0:	4770      	bx	lr
	...

080003b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003b4:	b580      	push	{r7, lr}
 80003b6:	b082      	sub	sp, #8
 80003b8:	af00      	add	r7, sp, #0
 80003ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003bc:	687b      	ldr	r3, [r7, #4]
 80003be:	3b01      	subs	r3, #1
 80003c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80003c4:	d301      	bcc.n	80003ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80003c6:	2301      	movs	r3, #1
 80003c8:	e00f      	b.n	80003ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ca:	4a0a      	ldr	r2, [pc, #40]	; (80003f4 <SysTick_Config+0x40>)
 80003cc:	687b      	ldr	r3, [r7, #4]
 80003ce:	3b01      	subs	r3, #1
 80003d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80003d2:	210f      	movs	r1, #15
 80003d4:	f04f 30ff 	mov.w	r0, #4294967295
 80003d8:	f7ff ff8e 	bl	80002f8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003dc:	4b05      	ldr	r3, [pc, #20]	; (80003f4 <SysTick_Config+0x40>)
 80003de:	2200      	movs	r2, #0
 80003e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e2:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <SysTick_Config+0x40>)
 80003e4:	2207      	movs	r2, #7
 80003e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80003e8:	2300      	movs	r3, #0
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3708      	adds	r7, #8
 80003ee:	46bd      	mov	sp, r7
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	e000e010 	.word	0xe000e010

080003f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000400:	6878      	ldr	r0, [r7, #4]
 8000402:	f7ff ff47 	bl	8000294 <NVIC_SetPriorityGrouping>
}
 8000406:	bf00      	nop
 8000408:	3708      	adds	r7, #8
 800040a:	46bd      	mov	sp, r7
 800040c:	bd80      	pop	{r7, pc}

0800040e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800040e:	b580      	push	{r7, lr}
 8000410:	b086      	sub	sp, #24
 8000412:	af00      	add	r7, sp, #0
 8000414:	4603      	mov	r3, r0
 8000416:	60b9      	str	r1, [r7, #8]
 8000418:	607a      	str	r2, [r7, #4]
 800041a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800041c:	2300      	movs	r3, #0
 800041e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000420:	f7ff ff5c 	bl	80002dc <NVIC_GetPriorityGrouping>
 8000424:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000426:	687a      	ldr	r2, [r7, #4]
 8000428:	68b9      	ldr	r1, [r7, #8]
 800042a:	6978      	ldr	r0, [r7, #20]
 800042c:	f7ff ff8e 	bl	800034c <NVIC_EncodePriority>
 8000430:	4602      	mov	r2, r0
 8000432:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000436:	4611      	mov	r1, r2
 8000438:	4618      	mov	r0, r3
 800043a:	f7ff ff5d 	bl	80002f8 <NVIC_SetPriority>
}
 800043e:	bf00      	nop
 8000440:	3718      	adds	r7, #24
 8000442:	46bd      	mov	sp, r7
 8000444:	bd80      	pop	{r7, pc}

08000446 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000446:	b580      	push	{r7, lr}
 8000448:	b082      	sub	sp, #8
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800044e:	6878      	ldr	r0, [r7, #4]
 8000450:	f7ff ffb0 	bl	80003b4 <SysTick_Config>
 8000454:	4603      	mov	r3, r0
}
 8000456:	4618      	mov	r0, r3
 8000458:	3708      	adds	r7, #8
 800045a:	46bd      	mov	sp, r7
 800045c:	bd80      	pop	{r7, pc}

0800045e <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 800045e:	b580      	push	{r7, lr}
 8000460:	b082      	sub	sp, #8
 8000462:	af00      	add	r7, sp, #0
 8000464:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000466:	687b      	ldr	r3, [r7, #4]
 8000468:	2b00      	cmp	r3, #0
 800046a:	d101      	bne.n	8000470 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 800046c:	2301      	movs	r3, #1
 800046e:	e014      	b.n	800049a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000470:	687b      	ldr	r3, [r7, #4]
 8000472:	791b      	ldrb	r3, [r3, #4]
 8000474:	b2db      	uxtb	r3, r3
 8000476:	2b00      	cmp	r3, #0
 8000478:	d105      	bne.n	8000486 <HAL_DAC_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	2200      	movs	r2, #0
 800047e:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000480:	6878      	ldr	r0, [r7, #4]
 8000482:	f001 ffad 	bl	80023e0 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000486:	687b      	ldr	r3, [r7, #4]
 8000488:	2202      	movs	r2, #2
 800048a:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800048c:	687b      	ldr	r3, [r7, #4]
 800048e:	2200      	movs	r2, #0
 8000490:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	2201      	movs	r2, #1
 8000496:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8000498:	2300      	movs	r3, #0
}
 800049a:	4618      	mov	r0, r3
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}

080004a2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80004a2:	b480      	push	{r7}
 80004a4:	b087      	sub	sp, #28
 80004a6:	af00      	add	r7, sp, #0
 80004a8:	60f8      	str	r0, [r7, #12]
 80004aa:	60b9      	str	r1, [r7, #8]
 80004ac:	607a      	str	r2, [r7, #4]
 80004ae:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 80004b0:	2300      	movs	r3, #0
 80004b2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80004b4:	68fb      	ldr	r3, [r7, #12]
 80004b6:	681b      	ldr	r3, [r3, #0]
 80004b8:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 80004ba:	68bb      	ldr	r3, [r7, #8]
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d105      	bne.n	80004cc <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 80004c0:	697a      	ldr	r2, [r7, #20]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	4413      	add	r3, r2
 80004c6:	3308      	adds	r3, #8
 80004c8:	617b      	str	r3, [r7, #20]
 80004ca:	e004      	b.n	80004d6 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 80004cc:	697a      	ldr	r2, [r7, #20]
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	4413      	add	r3, r2
 80004d2:	3314      	adds	r3, #20
 80004d4:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 80004d6:	697b      	ldr	r3, [r7, #20]
 80004d8:	461a      	mov	r2, r3
 80004da:	683b      	ldr	r3, [r7, #0]
 80004dc:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 80004de:	2300      	movs	r3, #0
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	371c      	adds	r7, #28
 80004e4:	46bd      	mov	sp, r7
 80004e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ea:	4770      	bx	lr

080004ec <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
 80004f4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 80004f6:	687b      	ldr	r3, [r7, #4]
 80004f8:	795b      	ldrb	r3, [r3, #5]
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d101      	bne.n	8000502 <HAL_DAC_Start+0x16>
 80004fe:	2302      	movs	r3, #2
 8000500:	e039      	b.n	8000576 <HAL_DAC_Start+0x8a>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	2201      	movs	r2, #1
 8000506:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000508:	687b      	ldr	r3, [r7, #4]
 800050a:	2202      	movs	r2, #2
 800050c:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	681b      	ldr	r3, [r3, #0]
 8000512:	6819      	ldr	r1, [r3, #0]
 8000514:	2201      	movs	r2, #1
 8000516:	683b      	ldr	r3, [r7, #0]
 8000518:	409a      	lsls	r2, r3
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	681b      	ldr	r3, [r3, #0]
 800051e:	430a      	orrs	r2, r1
 8000520:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8000522:	683b      	ldr	r3, [r7, #0]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d10f      	bne.n	8000548 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8000528:	687b      	ldr	r3, [r7, #4]
 800052a:	681b      	ldr	r3, [r3, #0]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8000532:	2b3c      	cmp	r3, #60	; 0x3c
 8000534:	d118      	bne.n	8000568 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	681b      	ldr	r3, [r3, #0]
 800053a:	685a      	ldr	r2, [r3, #4]
 800053c:	687b      	ldr	r3, [r7, #4]
 800053e:	681b      	ldr	r3, [r3, #0]
 8000540:	f042 0201 	orr.w	r2, r2, #1
 8000544:	605a      	str	r2, [r3, #4]
 8000546:	e00f      	b.n	8000568 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	681b      	ldr	r3, [r3, #0]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000552:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8000556:	d107      	bne.n	8000568 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	685a      	ldr	r2, [r3, #4]
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	681b      	ldr	r3, [r3, #0]
 8000562:	f042 0202 	orr.w	r2, r2, #2
 8000566:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000568:	687b      	ldr	r3, [r7, #4]
 800056a:	2201      	movs	r2, #1
 800056c:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	2200      	movs	r2, #0
 8000572:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8000574:	2300      	movs	r3, #0
}
 8000576:	4618      	mov	r0, r3
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
	...

08000584 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000584:	b480      	push	{r7}
 8000586:	b087      	sub	sp, #28
 8000588:	af00      	add	r7, sp, #0
 800058a:	60f8      	str	r0, [r7, #12]
 800058c:	60b9      	str	r1, [r7, #8]
 800058e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000590:	2300      	movs	r3, #0
 8000592:	617b      	str	r3, [r7, #20]
 8000594:	2300      	movs	r3, #0
 8000596:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000598:	68fb      	ldr	r3, [r7, #12]
 800059a:	795b      	ldrb	r3, [r3, #5]
 800059c:	2b01      	cmp	r3, #1
 800059e:	d101      	bne.n	80005a4 <HAL_DAC_ConfigChannel+0x20>
 80005a0:	2302      	movs	r3, #2
 80005a2:	e04e      	b.n	8000642 <HAL_DAC_ConfigChannel+0xbe>
 80005a4:	68fb      	ldr	r3, [r7, #12]
 80005a6:	2201      	movs	r2, #1
 80005a8:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80005aa:	68fb      	ldr	r3, [r7, #12]
 80005ac:	2202      	movs	r2, #2
 80005ae:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80005b0:	68fb      	ldr	r3, [r7, #12]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	681b      	ldr	r3, [r3, #0]
 80005b6:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 80005b8:	68fb      	ldr	r3, [r7, #12]
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a24      	ldr	r2, [pc, #144]	; (8000650 <HAL_DAC_ConfigChannel+0xcc>)
 80005be:	4293      	cmp	r3, r2
 80005c0:	d112      	bne.n	80005e8 <HAL_DAC_ConfigChannel+0x64>
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d10f      	bne.n	80005e8 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80005c8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	fa02 f303 	lsl.w	r3, r2, r3
 80005d2:	43db      	mvns	r3, r3
 80005d4:	697a      	ldr	r2, [r7, #20]
 80005d6:	4013      	ands	r3, r2
 80005d8:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	681a      	ldr	r2, [r3, #0]
 80005de:	68bb      	ldr	r3, [r7, #8]
 80005e0:	685b      	ldr	r3, [r3, #4]
 80005e2:	4313      	orrs	r3, r2
 80005e4:	613b      	str	r3, [r7, #16]
 80005e6:	e00e      	b.n	8000606 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 80005e8:	f640 72fe 	movw	r2, #4094	; 0xffe
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	697a      	ldr	r2, [r7, #20]
 80005f6:	4013      	ands	r3, r2
 80005f8:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 80005fa:	68bb      	ldr	r3, [r7, #8]
 80005fc:	681a      	ldr	r2, [r3, #0]
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	689b      	ldr	r3, [r3, #8]
 8000602:	4313      	orrs	r3, r2
 8000604:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	fa02 f303 	lsl.w	r3, r2, r3
 800060e:	697a      	ldr	r2, [r7, #20]
 8000610:	4313      	orrs	r3, r2
 8000612:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000614:	68fb      	ldr	r3, [r7, #12]
 8000616:	681b      	ldr	r3, [r3, #0]
 8000618:	697a      	ldr	r2, [r7, #20]
 800061a:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	6819      	ldr	r1, [r3, #0]
 8000622:	22c0      	movs	r2, #192	; 0xc0
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	43da      	mvns	r2, r3
 800062c:	68fb      	ldr	r3, [r7, #12]
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	400a      	ands	r2, r1
 8000632:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2201      	movs	r2, #1
 8000638:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	2200      	movs	r2, #0
 800063e:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000640:	2300      	movs	r3, #0
}
 8000642:	4618      	mov	r0, r3
 8000644:	371c      	adds	r7, #28
 8000646:	46bd      	mov	sp, r7
 8000648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800064c:	4770      	bx	lr
 800064e:	bf00      	nop
 8000650:	40007400 	.word	0x40007400

08000654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000654:	b480      	push	{r7}
 8000656:	b087      	sub	sp, #28
 8000658:	af00      	add	r7, sp, #0
 800065a:	6078      	str	r0, [r7, #4]
 800065c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800065e:	2300      	movs	r3, #0
 8000660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000662:	2300      	movs	r3, #0
 8000664:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000666:	2300      	movs	r3, #0
 8000668:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800066a:	e14e      	b.n	800090a <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800066c:	683b      	ldr	r3, [r7, #0]
 800066e:	681a      	ldr	r2, [r3, #0]
 8000670:	2101      	movs	r1, #1
 8000672:	697b      	ldr	r3, [r7, #20]
 8000674:	fa01 f303 	lsl.w	r3, r1, r3
 8000678:	4013      	ands	r3, r2
 800067a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 800067c:	68fb      	ldr	r3, [r7, #12]
 800067e:	2b00      	cmp	r3, #0
 8000680:	f000 8140 	beq.w	8000904 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000684:	683b      	ldr	r3, [r7, #0]
 8000686:	685b      	ldr	r3, [r3, #4]
 8000688:	2b02      	cmp	r3, #2
 800068a:	d003      	beq.n	8000694 <HAL_GPIO_Init+0x40>
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	685b      	ldr	r3, [r3, #4]
 8000690:	2b12      	cmp	r3, #18
 8000692:	d123      	bne.n	80006dc <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000694:	697b      	ldr	r3, [r7, #20]
 8000696:	08da      	lsrs	r2, r3, #3
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	3208      	adds	r2, #8
 800069c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80006a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	f003 0307 	and.w	r3, r3, #7
 80006a8:	009b      	lsls	r3, r3, #2
 80006aa:	220f      	movs	r2, #15
 80006ac:	fa02 f303 	lsl.w	r3, r2, r3
 80006b0:	43db      	mvns	r3, r3
 80006b2:	693a      	ldr	r2, [r7, #16]
 80006b4:	4013      	ands	r3, r2
 80006b6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80006b8:	683b      	ldr	r3, [r7, #0]
 80006ba:	691a      	ldr	r2, [r3, #16]
 80006bc:	697b      	ldr	r3, [r7, #20]
 80006be:	f003 0307 	and.w	r3, r3, #7
 80006c2:	009b      	lsls	r3, r3, #2
 80006c4:	fa02 f303 	lsl.w	r3, r2, r3
 80006c8:	693a      	ldr	r2, [r7, #16]
 80006ca:	4313      	orrs	r3, r2
 80006cc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 80006ce:	697b      	ldr	r3, [r7, #20]
 80006d0:	08da      	lsrs	r2, r3, #3
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	3208      	adds	r2, #8
 80006d6:	6939      	ldr	r1, [r7, #16]
 80006d8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80006e2:	697b      	ldr	r3, [r7, #20]
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	2203      	movs	r2, #3
 80006e8:	fa02 f303 	lsl.w	r3, r2, r3
 80006ec:	43db      	mvns	r3, r3
 80006ee:	693a      	ldr	r2, [r7, #16]
 80006f0:	4013      	ands	r3, r2
 80006f2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80006f4:	683b      	ldr	r3, [r7, #0]
 80006f6:	685b      	ldr	r3, [r3, #4]
 80006f8:	f003 0203 	and.w	r2, r3, #3
 80006fc:	697b      	ldr	r3, [r7, #20]
 80006fe:	005b      	lsls	r3, r3, #1
 8000700:	fa02 f303 	lsl.w	r3, r2, r3
 8000704:	693a      	ldr	r2, [r7, #16]
 8000706:	4313      	orrs	r3, r2
 8000708:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800070a:	687b      	ldr	r3, [r7, #4]
 800070c:	693a      	ldr	r2, [r7, #16]
 800070e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	2b01      	cmp	r3, #1
 8000716:	d00b      	beq.n	8000730 <HAL_GPIO_Init+0xdc>
 8000718:	683b      	ldr	r3, [r7, #0]
 800071a:	685b      	ldr	r3, [r3, #4]
 800071c:	2b02      	cmp	r3, #2
 800071e:	d007      	beq.n	8000730 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000720:	683b      	ldr	r3, [r7, #0]
 8000722:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000724:	2b11      	cmp	r3, #17
 8000726:	d003      	beq.n	8000730 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000728:	683b      	ldr	r3, [r7, #0]
 800072a:	685b      	ldr	r3, [r3, #4]
 800072c:	2b12      	cmp	r3, #18
 800072e:	d130      	bne.n	8000792 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000730:	687b      	ldr	r3, [r7, #4]
 8000732:	689b      	ldr	r3, [r3, #8]
 8000734:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000736:	697b      	ldr	r3, [r7, #20]
 8000738:	005b      	lsls	r3, r3, #1
 800073a:	2203      	movs	r2, #3
 800073c:	fa02 f303 	lsl.w	r3, r2, r3
 8000740:	43db      	mvns	r3, r3
 8000742:	693a      	ldr	r2, [r7, #16]
 8000744:	4013      	ands	r3, r2
 8000746:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	68da      	ldr	r2, [r3, #12]
 800074c:	697b      	ldr	r3, [r7, #20]
 800074e:	005b      	lsls	r3, r3, #1
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	693a      	ldr	r2, [r7, #16]
 8000756:	4313      	orrs	r3, r2
 8000758:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	693a      	ldr	r2, [r7, #16]
 800075e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	685b      	ldr	r3, [r3, #4]
 8000764:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000766:	2201      	movs	r2, #1
 8000768:	697b      	ldr	r3, [r7, #20]
 800076a:	fa02 f303 	lsl.w	r3, r2, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	693a      	ldr	r2, [r7, #16]
 8000772:	4013      	ands	r3, r2
 8000774:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000776:	683b      	ldr	r3, [r7, #0]
 8000778:	685b      	ldr	r3, [r3, #4]
 800077a:	091b      	lsrs	r3, r3, #4
 800077c:	f003 0201 	and.w	r2, r3, #1
 8000780:	697b      	ldr	r3, [r7, #20]
 8000782:	fa02 f303 	lsl.w	r3, r2, r3
 8000786:	693a      	ldr	r2, [r7, #16]
 8000788:	4313      	orrs	r3, r2
 800078a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	693a      	ldr	r2, [r7, #16]
 8000790:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	68db      	ldr	r3, [r3, #12]
 8000796:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000798:	697b      	ldr	r3, [r7, #20]
 800079a:	005b      	lsls	r3, r3, #1
 800079c:	2203      	movs	r2, #3
 800079e:	fa02 f303 	lsl.w	r3, r2, r3
 80007a2:	43db      	mvns	r3, r3
 80007a4:	693a      	ldr	r2, [r7, #16]
 80007a6:	4013      	ands	r3, r2
 80007a8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	689a      	ldr	r2, [r3, #8]
 80007ae:	697b      	ldr	r3, [r7, #20]
 80007b0:	005b      	lsls	r3, r3, #1
 80007b2:	fa02 f303 	lsl.w	r3, r2, r3
 80007b6:	693a      	ldr	r2, [r7, #16]
 80007b8:	4313      	orrs	r3, r2
 80007ba:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	693a      	ldr	r2, [r7, #16]
 80007c0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	685b      	ldr	r3, [r3, #4]
 80007c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	f000 809a 	beq.w	8000904 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d0:	4b55      	ldr	r3, [pc, #340]	; (8000928 <HAL_GPIO_Init+0x2d4>)
 80007d2:	699b      	ldr	r3, [r3, #24]
 80007d4:	4a54      	ldr	r2, [pc, #336]	; (8000928 <HAL_GPIO_Init+0x2d4>)
 80007d6:	f043 0301 	orr.w	r3, r3, #1
 80007da:	6193      	str	r3, [r2, #24]
 80007dc:	4b52      	ldr	r3, [pc, #328]	; (8000928 <HAL_GPIO_Init+0x2d4>)
 80007de:	699b      	ldr	r3, [r3, #24]
 80007e0:	f003 0301 	and.w	r3, r3, #1
 80007e4:	60bb      	str	r3, [r7, #8]
 80007e6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80007e8:	4a50      	ldr	r2, [pc, #320]	; (800092c <HAL_GPIO_Init+0x2d8>)
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	089b      	lsrs	r3, r3, #2
 80007ee:	3302      	adds	r3, #2
 80007f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80007f4:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	f003 0303 	and.w	r3, r3, #3
 80007fc:	009b      	lsls	r3, r3, #2
 80007fe:	220f      	movs	r2, #15
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	43db      	mvns	r3, r3
 8000806:	693a      	ldr	r2, [r7, #16]
 8000808:	4013      	ands	r3, r2
 800080a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000812:	d013      	beq.n	800083c <HAL_GPIO_Init+0x1e8>
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	4a46      	ldr	r2, [pc, #280]	; (8000930 <HAL_GPIO_Init+0x2dc>)
 8000818:	4293      	cmp	r3, r2
 800081a:	d00d      	beq.n	8000838 <HAL_GPIO_Init+0x1e4>
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	4a45      	ldr	r2, [pc, #276]	; (8000934 <HAL_GPIO_Init+0x2e0>)
 8000820:	4293      	cmp	r3, r2
 8000822:	d007      	beq.n	8000834 <HAL_GPIO_Init+0x1e0>
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	4a44      	ldr	r2, [pc, #272]	; (8000938 <HAL_GPIO_Init+0x2e4>)
 8000828:	4293      	cmp	r3, r2
 800082a:	d101      	bne.n	8000830 <HAL_GPIO_Init+0x1dc>
 800082c:	2303      	movs	r3, #3
 800082e:	e006      	b.n	800083e <HAL_GPIO_Init+0x1ea>
 8000830:	2305      	movs	r3, #5
 8000832:	e004      	b.n	800083e <HAL_GPIO_Init+0x1ea>
 8000834:	2302      	movs	r3, #2
 8000836:	e002      	b.n	800083e <HAL_GPIO_Init+0x1ea>
 8000838:	2301      	movs	r3, #1
 800083a:	e000      	b.n	800083e <HAL_GPIO_Init+0x1ea>
 800083c:	2300      	movs	r3, #0
 800083e:	697a      	ldr	r2, [r7, #20]
 8000840:	f002 0203 	and.w	r2, r2, #3
 8000844:	0092      	lsls	r2, r2, #2
 8000846:	4093      	lsls	r3, r2
 8000848:	693a      	ldr	r2, [r7, #16]
 800084a:	4313      	orrs	r3, r2
 800084c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800084e:	4937      	ldr	r1, [pc, #220]	; (800092c <HAL_GPIO_Init+0x2d8>)
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	089b      	lsrs	r3, r3, #2
 8000854:	3302      	adds	r3, #2
 8000856:	693a      	ldr	r2, [r7, #16]
 8000858:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800085c:	4b37      	ldr	r3, [pc, #220]	; (800093c <HAL_GPIO_Init+0x2e8>)
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	43db      	mvns	r3, r3
 8000866:	693a      	ldr	r2, [r7, #16]
 8000868:	4013      	ands	r3, r2
 800086a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800086c:	683b      	ldr	r3, [r7, #0]
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000874:	2b00      	cmp	r3, #0
 8000876:	d003      	beq.n	8000880 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8000878:	693a      	ldr	r2, [r7, #16]
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	4313      	orrs	r3, r2
 800087e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000880:	4a2e      	ldr	r2, [pc, #184]	; (800093c <HAL_GPIO_Init+0x2e8>)
 8000882:	693b      	ldr	r3, [r7, #16]
 8000884:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000886:	4b2d      	ldr	r3, [pc, #180]	; (800093c <HAL_GPIO_Init+0x2e8>)
 8000888:	685b      	ldr	r3, [r3, #4]
 800088a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	43db      	mvns	r3, r3
 8000890:	693a      	ldr	r2, [r7, #16]
 8000892:	4013      	ands	r3, r2
 8000894:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000896:	683b      	ldr	r3, [r7, #0]
 8000898:	685b      	ldr	r3, [r3, #4]
 800089a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d003      	beq.n	80008aa <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80008a2:	693a      	ldr	r2, [r7, #16]
 80008a4:	68fb      	ldr	r3, [r7, #12]
 80008a6:	4313      	orrs	r3, r2
 80008a8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80008aa:	4a24      	ldr	r2, [pc, #144]	; (800093c <HAL_GPIO_Init+0x2e8>)
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80008b0:	4b22      	ldr	r3, [pc, #136]	; (800093c <HAL_GPIO_Init+0x2e8>)
 80008b2:	689b      	ldr	r3, [r3, #8]
 80008b4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	43db      	mvns	r3, r3
 80008ba:	693a      	ldr	r2, [r7, #16]
 80008bc:	4013      	ands	r3, r2
 80008be:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80008c0:	683b      	ldr	r3, [r7, #0]
 80008c2:	685b      	ldr	r3, [r3, #4]
 80008c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d003      	beq.n	80008d4 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80008cc:	693a      	ldr	r2, [r7, #16]
 80008ce:	68fb      	ldr	r3, [r7, #12]
 80008d0:	4313      	orrs	r3, r2
 80008d2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80008d4:	4a19      	ldr	r2, [pc, #100]	; (800093c <HAL_GPIO_Init+0x2e8>)
 80008d6:	693b      	ldr	r3, [r7, #16]
 80008d8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80008da:	4b18      	ldr	r3, [pc, #96]	; (800093c <HAL_GPIO_Init+0x2e8>)
 80008dc:	68db      	ldr	r3, [r3, #12]
 80008de:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80008e0:	68fb      	ldr	r3, [r7, #12]
 80008e2:	43db      	mvns	r3, r3
 80008e4:	693a      	ldr	r2, [r7, #16]
 80008e6:	4013      	ands	r3, r2
 80008e8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	685b      	ldr	r3, [r3, #4]
 80008ee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d003      	beq.n	80008fe <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80008f6:	693a      	ldr	r2, [r7, #16]
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	4313      	orrs	r3, r2
 80008fc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80008fe:	4a0f      	ldr	r2, [pc, #60]	; (800093c <HAL_GPIO_Init+0x2e8>)
 8000900:	693b      	ldr	r3, [r7, #16]
 8000902:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000904:	697b      	ldr	r3, [r7, #20]
 8000906:	3301      	adds	r3, #1
 8000908:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800090a:	683b      	ldr	r3, [r7, #0]
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	697b      	ldr	r3, [r7, #20]
 8000910:	fa22 f303 	lsr.w	r3, r2, r3
 8000914:	2b00      	cmp	r3, #0
 8000916:	f47f aea9 	bne.w	800066c <HAL_GPIO_Init+0x18>
  }
}
 800091a:	bf00      	nop
 800091c:	371c      	adds	r7, #28
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40021000 	.word	0x40021000
 800092c:	40010000 	.word	0x40010000
 8000930:	48000400 	.word	0x48000400
 8000934:	48000800 	.word	0x48000800
 8000938:	48000c00 	.word	0x48000c00
 800093c:	40010400 	.word	0x40010400

08000940 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000940:	b480      	push	{r7}
 8000942:	b083      	sub	sp, #12
 8000944:	af00      	add	r7, sp, #0
 8000946:	6078      	str	r0, [r7, #4]
 8000948:	460b      	mov	r3, r1
 800094a:	807b      	strh	r3, [r7, #2]
 800094c:	4613      	mov	r3, r2
 800094e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000950:	787b      	ldrb	r3, [r7, #1]
 8000952:	2b00      	cmp	r3, #0
 8000954:	d003      	beq.n	800095e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000956:	887a      	ldrh	r2, [r7, #2]
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800095c:	e002      	b.n	8000964 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800095e:	887a      	ldrh	r2, [r7, #2]
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000964:	bf00      	nop
 8000966:	370c      	adds	r7, #12
 8000968:	46bd      	mov	sp, r7
 800096a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096e:	4770      	bx	lr

08000970 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000970:	b580      	push	{r7, lr}
 8000972:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000976:	af00      	add	r7, sp, #0
 8000978:	1d3b      	adds	r3, r7, #4
 800097a:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800097c:	1d3b      	adds	r3, r7, #4
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	2b00      	cmp	r3, #0
 8000982:	d102      	bne.n	800098a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000984:	2301      	movs	r3, #1
 8000986:	f000 beda 	b.w	800173e <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800098a:	1d3b      	adds	r3, r7, #4
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f003 0301 	and.w	r3, r3, #1
 8000994:	2b00      	cmp	r3, #0
 8000996:	f000 816e 	beq.w	8000c76 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800099a:	4bb5      	ldr	r3, [pc, #724]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 800099c:	685b      	ldr	r3, [r3, #4]
 800099e:	f003 030c 	and.w	r3, r3, #12
 80009a2:	2b04      	cmp	r3, #4
 80009a4:	d00c      	beq.n	80009c0 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80009a6:	4bb2      	ldr	r3, [pc, #712]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 80009a8:	685b      	ldr	r3, [r3, #4]
 80009aa:	f003 030c 	and.w	r3, r3, #12
 80009ae:	2b08      	cmp	r3, #8
 80009b0:	d15a      	bne.n	8000a68 <HAL_RCC_OscConfig+0xf8>
 80009b2:	4baf      	ldr	r3, [pc, #700]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 80009b4:	685b      	ldr	r3, [r3, #4]
 80009b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80009ba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80009be:	d153      	bne.n	8000a68 <HAL_RCC_OscConfig+0xf8>
 80009c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009c4:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009c8:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 80009cc:	fa93 f3a3 	rbit	r3, r3
 80009d0:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 80009d4:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80009d8:	fab3 f383 	clz	r3, r3
 80009dc:	b2db      	uxtb	r3, r3
 80009de:	095b      	lsrs	r3, r3, #5
 80009e0:	b2db      	uxtb	r3, r3
 80009e2:	f043 0301 	orr.w	r3, r3, #1
 80009e6:	b2db      	uxtb	r3, r3
 80009e8:	2b01      	cmp	r3, #1
 80009ea:	d102      	bne.n	80009f2 <HAL_RCC_OscConfig+0x82>
 80009ec:	4ba0      	ldr	r3, [pc, #640]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 80009ee:	681b      	ldr	r3, [r3, #0]
 80009f0:	e015      	b.n	8000a1e <HAL_RCC_OscConfig+0xae>
 80009f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80009f6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80009fa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80009fe:	fa93 f3a3 	rbit	r3, r3
 8000a02:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000a06:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000a0a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000a0e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000a12:	fa93 f3a3 	rbit	r3, r3
 8000a16:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000a1a:	4b95      	ldr	r3, [pc, #596]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000a1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000a22:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000a26:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000a2a:	fa92 f2a2 	rbit	r2, r2
 8000a2e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000a32:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000a36:	fab2 f282 	clz	r2, r2
 8000a3a:	b252      	sxtb	r2, r2
 8000a3c:	f042 0220 	orr.w	r2, r2, #32
 8000a40:	b252      	sxtb	r2, r2
 8000a42:	b2d2      	uxtb	r2, r2
 8000a44:	f002 021f 	and.w	r2, r2, #31
 8000a48:	2101      	movs	r1, #1
 8000a4a:	fa01 f202 	lsl.w	r2, r1, r2
 8000a4e:	4013      	ands	r3, r2
 8000a50:	2b00      	cmp	r3, #0
 8000a52:	f000 810f 	beq.w	8000c74 <HAL_RCC_OscConfig+0x304>
 8000a56:	1d3b      	adds	r3, r7, #4
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	685b      	ldr	r3, [r3, #4]
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	f040 8109 	bne.w	8000c74 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000a62:	2301      	movs	r3, #1
 8000a64:	f000 be6b 	b.w	800173e <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000a68:	1d3b      	adds	r3, r7, #4
 8000a6a:	681b      	ldr	r3, [r3, #0]
 8000a6c:	685b      	ldr	r3, [r3, #4]
 8000a6e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000a72:	d106      	bne.n	8000a82 <HAL_RCC_OscConfig+0x112>
 8000a74:	4b7e      	ldr	r3, [pc, #504]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a7d      	ldr	r2, [pc, #500]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000a7a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000a7e:	6013      	str	r3, [r2, #0]
 8000a80:	e030      	b.n	8000ae4 <HAL_RCC_OscConfig+0x174>
 8000a82:	1d3b      	adds	r3, r7, #4
 8000a84:	681b      	ldr	r3, [r3, #0]
 8000a86:	685b      	ldr	r3, [r3, #4]
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d10c      	bne.n	8000aa6 <HAL_RCC_OscConfig+0x136>
 8000a8c:	4b78      	ldr	r3, [pc, #480]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a77      	ldr	r2, [pc, #476]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a96:	6013      	str	r3, [r2, #0]
 8000a98:	4b75      	ldr	r3, [pc, #468]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	4a74      	ldr	r2, [pc, #464]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000aa2:	6013      	str	r3, [r2, #0]
 8000aa4:	e01e      	b.n	8000ae4 <HAL_RCC_OscConfig+0x174>
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ab0:	d10c      	bne.n	8000acc <HAL_RCC_OscConfig+0x15c>
 8000ab2:	4b6f      	ldr	r3, [pc, #444]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	4a6e      	ldr	r2, [pc, #440]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000ab8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000abc:	6013      	str	r3, [r2, #0]
 8000abe:	4b6c      	ldr	r3, [pc, #432]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a6b      	ldr	r2, [pc, #428]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000ac4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ac8:	6013      	str	r3, [r2, #0]
 8000aca:	e00b      	b.n	8000ae4 <HAL_RCC_OscConfig+0x174>
 8000acc:	4b68      	ldr	r3, [pc, #416]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a67      	ldr	r2, [pc, #412]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000ad2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ad6:	6013      	str	r3, [r2, #0]
 8000ad8:	4b65      	ldr	r3, [pc, #404]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	4a64      	ldr	r2, [pc, #400]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000ade:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000ae2:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000ae4:	4b62      	ldr	r3, [pc, #392]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000ae6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ae8:	f023 020f 	bic.w	r2, r3, #15
 8000aec:	1d3b      	adds	r3, r7, #4
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	689b      	ldr	r3, [r3, #8]
 8000af2:	495f      	ldr	r1, [pc, #380]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000af4:	4313      	orrs	r3, r2
 8000af6:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000af8:	1d3b      	adds	r3, r7, #4
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d05a      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000b02:	f7ff fbbb 	bl	800027c <HAL_GetTick>
 8000b06:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b0a:	e00a      	b.n	8000b22 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000b0c:	f7ff fbb6 	bl	800027c <HAL_GetTick>
 8000b10:	4602      	mov	r2, r0
 8000b12:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000b16:	1ad3      	subs	r3, r2, r3
 8000b18:	2b64      	cmp	r3, #100	; 0x64
 8000b1a:	d902      	bls.n	8000b22 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	f000 be0e 	b.w	800173e <HAL_RCC_OscConfig+0xdce>
 8000b22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b26:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b2a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000b2e:	fa93 f3a3 	rbit	r3, r3
 8000b32:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8000b36:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000b3a:	fab3 f383 	clz	r3, r3
 8000b3e:	b2db      	uxtb	r3, r3
 8000b40:	095b      	lsrs	r3, r3, #5
 8000b42:	b2db      	uxtb	r3, r3
 8000b44:	f043 0301 	orr.w	r3, r3, #1
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b01      	cmp	r3, #1
 8000b4c:	d102      	bne.n	8000b54 <HAL_RCC_OscConfig+0x1e4>
 8000b4e:	4b48      	ldr	r3, [pc, #288]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	e015      	b.n	8000b80 <HAL_RCC_OscConfig+0x210>
 8000b54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b58:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000b5c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000b60:	fa93 f3a3 	rbit	r3, r3
 8000b64:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000b68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b6c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000b70:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000b74:	fa93 f3a3 	rbit	r3, r3
 8000b78:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000b7c:	4b3c      	ldr	r3, [pc, #240]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000b80:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000b84:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000b88:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000b8c:	fa92 f2a2 	rbit	r2, r2
 8000b90:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8000b94:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000b98:	fab2 f282 	clz	r2, r2
 8000b9c:	b252      	sxtb	r2, r2
 8000b9e:	f042 0220 	orr.w	r2, r2, #32
 8000ba2:	b252      	sxtb	r2, r2
 8000ba4:	b2d2      	uxtb	r2, r2
 8000ba6:	f002 021f 	and.w	r2, r2, #31
 8000baa:	2101      	movs	r1, #1
 8000bac:	fa01 f202 	lsl.w	r2, r1, r2
 8000bb0:	4013      	ands	r3, r2
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d0aa      	beq.n	8000b0c <HAL_RCC_OscConfig+0x19c>
 8000bb6:	e05e      	b.n	8000c76 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000bb8:	f7ff fb60 	bl	800027c <HAL_GetTick>
 8000bbc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bc0:	e00a      	b.n	8000bd8 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000bc2:	f7ff fb5b 	bl	800027c <HAL_GetTick>
 8000bc6:	4602      	mov	r2, r0
 8000bc8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000bcc:	1ad3      	subs	r3, r2, r3
 8000bce:	2b64      	cmp	r3, #100	; 0x64
 8000bd0:	d902      	bls.n	8000bd8 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	f000 bdb3 	b.w	800173e <HAL_RCC_OscConfig+0xdce>
 8000bd8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bdc:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000be0:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000be4:	fa93 f3a3 	rbit	r3, r3
 8000be8:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8000bec:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000bf0:	fab3 f383 	clz	r3, r3
 8000bf4:	b2db      	uxtb	r3, r3
 8000bf6:	095b      	lsrs	r3, r3, #5
 8000bf8:	b2db      	uxtb	r3, r3
 8000bfa:	f043 0301 	orr.w	r3, r3, #1
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d102      	bne.n	8000c0a <HAL_RCC_OscConfig+0x29a>
 8000c04:	4b1a      	ldr	r3, [pc, #104]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	e015      	b.n	8000c36 <HAL_RCC_OscConfig+0x2c6>
 8000c0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c0e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c12:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000c16:	fa93 f3a3 	rbit	r3, r3
 8000c1a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000c1e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000c22:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000c26:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000c2a:	fa93 f3a3 	rbit	r3, r3
 8000c2e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000c32:	4b0f      	ldr	r3, [pc, #60]	; (8000c70 <HAL_RCC_OscConfig+0x300>)
 8000c34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000c36:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000c3a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000c3e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000c42:	fa92 f2a2 	rbit	r2, r2
 8000c46:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8000c4a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000c4e:	fab2 f282 	clz	r2, r2
 8000c52:	b252      	sxtb	r2, r2
 8000c54:	f042 0220 	orr.w	r2, r2, #32
 8000c58:	b252      	sxtb	r2, r2
 8000c5a:	b2d2      	uxtb	r2, r2
 8000c5c:	f002 021f 	and.w	r2, r2, #31
 8000c60:	2101      	movs	r1, #1
 8000c62:	fa01 f202 	lsl.w	r2, r1, r2
 8000c66:	4013      	ands	r3, r2
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d1aa      	bne.n	8000bc2 <HAL_RCC_OscConfig+0x252>
 8000c6c:	e003      	b.n	8000c76 <HAL_RCC_OscConfig+0x306>
 8000c6e:	bf00      	nop
 8000c70:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c74:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c76:	1d3b      	adds	r3, r7, #4
 8000c78:	681b      	ldr	r3, [r3, #0]
 8000c7a:	681b      	ldr	r3, [r3, #0]
 8000c7c:	f003 0302 	and.w	r3, r3, #2
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	f000 8170 	beq.w	8000f66 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000c86:	4bd0      	ldr	r3, [pc, #832]	; (8000fc8 <HAL_RCC_OscConfig+0x658>)
 8000c88:	685b      	ldr	r3, [r3, #4]
 8000c8a:	f003 030c 	and.w	r3, r3, #12
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d00b      	beq.n	8000caa <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000c92:	4bcd      	ldr	r3, [pc, #820]	; (8000fc8 <HAL_RCC_OscConfig+0x658>)
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	f003 030c 	and.w	r3, r3, #12
 8000c9a:	2b08      	cmp	r3, #8
 8000c9c:	d16d      	bne.n	8000d7a <HAL_RCC_OscConfig+0x40a>
 8000c9e:	4bca      	ldr	r3, [pc, #808]	; (8000fc8 <HAL_RCC_OscConfig+0x658>)
 8000ca0:	685b      	ldr	r3, [r3, #4]
 8000ca2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d167      	bne.n	8000d7a <HAL_RCC_OscConfig+0x40a>
 8000caa:	2302      	movs	r3, #2
 8000cac:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cb0:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8000cb4:	fa93 f3a3 	rbit	r3, r3
 8000cb8:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8000cbc:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cc0:	fab3 f383 	clz	r3, r3
 8000cc4:	b2db      	uxtb	r3, r3
 8000cc6:	095b      	lsrs	r3, r3, #5
 8000cc8:	b2db      	uxtb	r3, r3
 8000cca:	f043 0301 	orr.w	r3, r3, #1
 8000cce:	b2db      	uxtb	r3, r3
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d102      	bne.n	8000cda <HAL_RCC_OscConfig+0x36a>
 8000cd4:	4bbc      	ldr	r3, [pc, #752]	; (8000fc8 <HAL_RCC_OscConfig+0x658>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	e013      	b.n	8000d02 <HAL_RCC_OscConfig+0x392>
 8000cda:	2302      	movs	r3, #2
 8000cdc:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce0:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8000ce4:	fa93 f3a3 	rbit	r3, r3
 8000ce8:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8000cec:	2302      	movs	r3, #2
 8000cee:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8000cf2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8000cf6:	fa93 f3a3 	rbit	r3, r3
 8000cfa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8000cfe:	4bb2      	ldr	r3, [pc, #712]	; (8000fc8 <HAL_RCC_OscConfig+0x658>)
 8000d00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d02:	2202      	movs	r2, #2
 8000d04:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8000d08:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8000d0c:	fa92 f2a2 	rbit	r2, r2
 8000d10:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8000d14:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8000d18:	fab2 f282 	clz	r2, r2
 8000d1c:	b252      	sxtb	r2, r2
 8000d1e:	f042 0220 	orr.w	r2, r2, #32
 8000d22:	b252      	sxtb	r2, r2
 8000d24:	b2d2      	uxtb	r2, r2
 8000d26:	f002 021f 	and.w	r2, r2, #31
 8000d2a:	2101      	movs	r1, #1
 8000d2c:	fa01 f202 	lsl.w	r2, r1, r2
 8000d30:	4013      	ands	r3, r2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d007      	beq.n	8000d46 <HAL_RCC_OscConfig+0x3d6>
 8000d36:	1d3b      	adds	r3, r7, #4
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	691b      	ldr	r3, [r3, #16]
 8000d3c:	2b01      	cmp	r3, #1
 8000d3e:	d002      	beq.n	8000d46 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8000d40:	2301      	movs	r3, #1
 8000d42:	f000 bcfc 	b.w	800173e <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d46:	4ba0      	ldr	r3, [pc, #640]	; (8000fc8 <HAL_RCC_OscConfig+0x658>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d4e:	1d3b      	adds	r3, r7, #4
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	6959      	ldr	r1, [r3, #20]
 8000d54:	23f8      	movs	r3, #248	; 0xf8
 8000d56:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d5a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8000d5e:	fa93 f3a3 	rbit	r3, r3
 8000d62:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8000d66:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8000d6a:	fab3 f383 	clz	r3, r3
 8000d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8000d72:	4995      	ldr	r1, [pc, #596]	; (8000fc8 <HAL_RCC_OscConfig+0x658>)
 8000d74:	4313      	orrs	r3, r2
 8000d76:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d78:	e0f5      	b.n	8000f66 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000d7a:	1d3b      	adds	r3, r7, #4
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	691b      	ldr	r3, [r3, #16]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	f000 8085 	beq.w	8000e90 <HAL_RCC_OscConfig+0x520>
 8000d86:	2301      	movs	r3, #1
 8000d88:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8000d90:	fa93 f3a3 	rbit	r3, r3
 8000d94:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8000d98:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d9c:	fab3 f383 	clz	r3, r3
 8000da0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000da4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000da8:	009b      	lsls	r3, r3, #2
 8000daa:	461a      	mov	r2, r3
 8000dac:	2301      	movs	r3, #1
 8000dae:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000db0:	f7ff fa64 	bl	800027c <HAL_GetTick>
 8000db4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db8:	e00a      	b.n	8000dd0 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dba:	f7ff fa5f 	bl	800027c <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000dc4:	1ad3      	subs	r3, r2, r3
 8000dc6:	2b02      	cmp	r3, #2
 8000dc8:	d902      	bls.n	8000dd0 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8000dca:	2303      	movs	r3, #3
 8000dcc:	f000 bcb7 	b.w	800173e <HAL_RCC_OscConfig+0xdce>
 8000dd0:	2302      	movs	r3, #2
 8000dd2:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd6:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8000dda:	fa93 f3a3 	rbit	r3, r3
 8000dde:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8000de2:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000de6:	fab3 f383 	clz	r3, r3
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	095b      	lsrs	r3, r3, #5
 8000dee:	b2db      	uxtb	r3, r3
 8000df0:	f043 0301 	orr.w	r3, r3, #1
 8000df4:	b2db      	uxtb	r3, r3
 8000df6:	2b01      	cmp	r3, #1
 8000df8:	d102      	bne.n	8000e00 <HAL_RCC_OscConfig+0x490>
 8000dfa:	4b73      	ldr	r3, [pc, #460]	; (8000fc8 <HAL_RCC_OscConfig+0x658>)
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	e013      	b.n	8000e28 <HAL_RCC_OscConfig+0x4b8>
 8000e00:	2302      	movs	r3, #2
 8000e02:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e06:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8000e0a:	fa93 f3a3 	rbit	r3, r3
 8000e0e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8000e12:	2302      	movs	r3, #2
 8000e14:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8000e18:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8000e1c:	fa93 f3a3 	rbit	r3, r3
 8000e20:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8000e24:	4b68      	ldr	r3, [pc, #416]	; (8000fc8 <HAL_RCC_OscConfig+0x658>)
 8000e26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e28:	2202      	movs	r2, #2
 8000e2a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8000e2e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8000e32:	fa92 f2a2 	rbit	r2, r2
 8000e36:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8000e3a:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8000e3e:	fab2 f282 	clz	r2, r2
 8000e42:	b252      	sxtb	r2, r2
 8000e44:	f042 0220 	orr.w	r2, r2, #32
 8000e48:	b252      	sxtb	r2, r2
 8000e4a:	b2d2      	uxtb	r2, r2
 8000e4c:	f002 021f 	and.w	r2, r2, #31
 8000e50:	2101      	movs	r1, #1
 8000e52:	fa01 f202 	lsl.w	r2, r1, r2
 8000e56:	4013      	ands	r3, r2
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d0ae      	beq.n	8000dba <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000e5c:	4b5a      	ldr	r3, [pc, #360]	; (8000fc8 <HAL_RCC_OscConfig+0x658>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000e64:	1d3b      	adds	r3, r7, #4
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	6959      	ldr	r1, [r3, #20]
 8000e6a:	23f8      	movs	r3, #248	; 0xf8
 8000e6c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e70:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8000e74:	fa93 f3a3 	rbit	r3, r3
 8000e78:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8000e7c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8000e80:	fab3 f383 	clz	r3, r3
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	494f      	ldr	r1, [pc, #316]	; (8000fc8 <HAL_RCC_OscConfig+0x658>)
 8000e8a:	4313      	orrs	r3, r2
 8000e8c:	600b      	str	r3, [r1, #0]
 8000e8e:	e06a      	b.n	8000f66 <HAL_RCC_OscConfig+0x5f6>
 8000e90:	2301      	movs	r3, #1
 8000e92:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e96:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8000e9a:	fa93 f3a3 	rbit	r3, r3
 8000e9e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8000ea2:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000ea6:	fab3 f383 	clz	r3, r3
 8000eaa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000eae:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000eb2:	009b      	lsls	r3, r3, #2
 8000eb4:	461a      	mov	r2, r3
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000eba:	f7ff f9df 	bl	800027c <HAL_GetTick>
 8000ebe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ec2:	e00a      	b.n	8000eda <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000ec4:	f7ff f9da 	bl	800027c <HAL_GetTick>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000ece:	1ad3      	subs	r3, r2, r3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d902      	bls.n	8000eda <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	f000 bc32 	b.w	800173e <HAL_RCC_OscConfig+0xdce>
 8000eda:	2302      	movs	r3, #2
 8000edc:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ee0:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8000ee4:	fa93 f3a3 	rbit	r3, r3
 8000ee8:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8000eec:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000ef0:	fab3 f383 	clz	r3, r3
 8000ef4:	b2db      	uxtb	r3, r3
 8000ef6:	095b      	lsrs	r3, r3, #5
 8000ef8:	b2db      	uxtb	r3, r3
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	b2db      	uxtb	r3, r3
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d102      	bne.n	8000f0a <HAL_RCC_OscConfig+0x59a>
 8000f04:	4b30      	ldr	r3, [pc, #192]	; (8000fc8 <HAL_RCC_OscConfig+0x658>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	e013      	b.n	8000f32 <HAL_RCC_OscConfig+0x5c2>
 8000f0a:	2302      	movs	r3, #2
 8000f0c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f10:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8000f14:	fa93 f3a3 	rbit	r3, r3
 8000f18:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8000f1c:	2302      	movs	r3, #2
 8000f1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8000f22:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8000f26:	fa93 f3a3 	rbit	r3, r3
 8000f2a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8000f2e:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <HAL_RCC_OscConfig+0x658>)
 8000f30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f32:	2202      	movs	r2, #2
 8000f34:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8000f38:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8000f3c:	fa92 f2a2 	rbit	r2, r2
 8000f40:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8000f44:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8000f48:	fab2 f282 	clz	r2, r2
 8000f4c:	b252      	sxtb	r2, r2
 8000f4e:	f042 0220 	orr.w	r2, r2, #32
 8000f52:	b252      	sxtb	r2, r2
 8000f54:	b2d2      	uxtb	r2, r2
 8000f56:	f002 021f 	and.w	r2, r2, #31
 8000f5a:	2101      	movs	r1, #1
 8000f5c:	fa01 f202 	lsl.w	r2, r1, r2
 8000f60:	4013      	ands	r3, r2
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d1ae      	bne.n	8000ec4 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000f66:	1d3b      	adds	r3, r7, #4
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	f003 0308 	and.w	r3, r3, #8
 8000f70:	2b00      	cmp	r3, #0
 8000f72:	f000 80d8 	beq.w	8001126 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8000f76:	1d3b      	adds	r3, r7, #4
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	699b      	ldr	r3, [r3, #24]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d067      	beq.n	8001050 <HAL_RCC_OscConfig+0x6e0>
 8000f80:	2301      	movs	r3, #1
 8000f82:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f86:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8000f8a:	fa93 f3a3 	rbit	r3, r3
 8000f8e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8000f92:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000f96:	fab3 f383 	clz	r3, r3
 8000f9a:	461a      	mov	r2, r3
 8000f9c:	4b0b      	ldr	r3, [pc, #44]	; (8000fcc <HAL_RCC_OscConfig+0x65c>)
 8000f9e:	4413      	add	r3, r2
 8000fa0:	009b      	lsls	r3, r3, #2
 8000fa2:	461a      	mov	r2, r3
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000fa8:	f7ff f968 	bl	800027c <HAL_GetTick>
 8000fac:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000fb0:	e00e      	b.n	8000fd0 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000fb2:	f7ff f963 	bl	800027c <HAL_GetTick>
 8000fb6:	4602      	mov	r2, r0
 8000fb8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8000fbc:	1ad3      	subs	r3, r2, r3
 8000fbe:	2b02      	cmp	r3, #2
 8000fc0:	d906      	bls.n	8000fd0 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	e3bb      	b.n	800173e <HAL_RCC_OscConfig+0xdce>
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000
 8000fcc:	10908120 	.word	0x10908120
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000fd6:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8000fda:	fa93 f3a3 	rbit	r3, r3
 8000fde:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8000fe8:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8000fec:	fa93 f2a3 	rbit	r2, r3
 8000ff0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8000ff4:	601a      	str	r2, [r3, #0]
 8000ff6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8000ffa:	2202      	movs	r2, #2
 8000ffc:	601a      	str	r2, [r3, #0]
 8000ffe:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	fa93 f2a3 	rbit	r2, r3
 8001008:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800100c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800100e:	4ba5      	ldr	r3, [pc, #660]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 8001010:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001012:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001016:	2102      	movs	r1, #2
 8001018:	6019      	str	r1, [r3, #0]
 800101a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	fa93 f1a3 	rbit	r1, r3
 8001024:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001028:	6019      	str	r1, [r3, #0]
  return(result);
 800102a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800102e:	681b      	ldr	r3, [r3, #0]
 8001030:	fab3 f383 	clz	r3, r3
 8001034:	b25b      	sxtb	r3, r3
 8001036:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800103a:	b25b      	sxtb	r3, r3
 800103c:	b2db      	uxtb	r3, r3
 800103e:	f003 031f 	and.w	r3, r3, #31
 8001042:	2101      	movs	r1, #1
 8001044:	fa01 f303 	lsl.w	r3, r1, r3
 8001048:	4013      	ands	r3, r2
 800104a:	2b00      	cmp	r3, #0
 800104c:	d0b1      	beq.n	8000fb2 <HAL_RCC_OscConfig+0x642>
 800104e:	e06a      	b.n	8001126 <HAL_RCC_OscConfig+0x7b6>
 8001050:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001054:	2201      	movs	r2, #1
 8001056:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001058:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	fa93 f2a3 	rbit	r2, r3
 8001062:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001066:	601a      	str	r2, [r3, #0]
  return(result);
 8001068:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800106c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800106e:	fab3 f383 	clz	r3, r3
 8001072:	461a      	mov	r2, r3
 8001074:	4b8c      	ldr	r3, [pc, #560]	; (80012a8 <HAL_RCC_OscConfig+0x938>)
 8001076:	4413      	add	r3, r2
 8001078:	009b      	lsls	r3, r3, #2
 800107a:	461a      	mov	r2, r3
 800107c:	2300      	movs	r3, #0
 800107e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001080:	f7ff f8fc 	bl	800027c <HAL_GetTick>
 8001084:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001088:	e009      	b.n	800109e <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800108a:	f7ff f8f7 	bl	800027c <HAL_GetTick>
 800108e:	4602      	mov	r2, r0
 8001090:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001094:	1ad3      	subs	r3, r2, r3
 8001096:	2b02      	cmp	r3, #2
 8001098:	d901      	bls.n	800109e <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 800109a:	2303      	movs	r3, #3
 800109c:	e34f      	b.n	800173e <HAL_RCC_OscConfig+0xdce>
 800109e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010a2:	2202      	movs	r2, #2
 80010a4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010a6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	fa93 f2a3 	rbit	r2, r3
 80010b0:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80010b4:	601a      	str	r2, [r3, #0]
 80010b6:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010ba:	2202      	movs	r2, #2
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	fa93 f2a3 	rbit	r2, r3
 80010c8:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010d2:	2202      	movs	r2, #2
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	fa93 f2a3 	rbit	r2, r3
 80010e0:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80010e4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80010e6:	4b6f      	ldr	r3, [pc, #444]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 80010e8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80010ea:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010ee:	2102      	movs	r1, #2
 80010f0:	6019      	str	r1, [r3, #0]
 80010f2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	fa93 f1a3 	rbit	r1, r3
 80010fc:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001100:	6019      	str	r1, [r3, #0]
  return(result);
 8001102:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	b25b      	sxtb	r3, r3
 800110e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001112:	b25b      	sxtb	r3, r3
 8001114:	b2db      	uxtb	r3, r3
 8001116:	f003 031f 	and.w	r3, r3, #31
 800111a:	2101      	movs	r1, #1
 800111c:	fa01 f303 	lsl.w	r3, r1, r3
 8001120:	4013      	ands	r3, r2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d1b1      	bne.n	800108a <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001126:	1d3b      	adds	r3, r7, #4
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	f003 0304 	and.w	r3, r3, #4
 8001130:	2b00      	cmp	r3, #0
 8001132:	f000 8159 	beq.w	80013e8 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001136:	2300      	movs	r3, #0
 8001138:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800113c:	4b59      	ldr	r3, [pc, #356]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 800113e:	69db      	ldr	r3, [r3, #28]
 8001140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001144:	2b00      	cmp	r3, #0
 8001146:	d112      	bne.n	800116e <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001148:	4b56      	ldr	r3, [pc, #344]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 800114a:	69db      	ldr	r3, [r3, #28]
 800114c:	4a55      	ldr	r2, [pc, #340]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 800114e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001152:	61d3      	str	r3, [r2, #28]
 8001154:	4b53      	ldr	r3, [pc, #332]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 8001156:	69db      	ldr	r3, [r3, #28]
 8001158:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	601a      	str	r2, [r3, #0]
 8001162:	f107 030c 	add.w	r3, r7, #12
 8001166:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001168:	2301      	movs	r3, #1
 800116a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800116e:	4b4f      	ldr	r3, [pc, #316]	; (80012ac <HAL_RCC_OscConfig+0x93c>)
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001176:	2b00      	cmp	r3, #0
 8001178:	d11a      	bne.n	80011b0 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800117a:	4b4c      	ldr	r3, [pc, #304]	; (80012ac <HAL_RCC_OscConfig+0x93c>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	4a4b      	ldr	r2, [pc, #300]	; (80012ac <HAL_RCC_OscConfig+0x93c>)
 8001180:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001184:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001186:	f7ff f879 	bl	800027c <HAL_GetTick>
 800118a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118e:	e009      	b.n	80011a4 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001190:	f7ff f874 	bl	800027c <HAL_GetTick>
 8001194:	4602      	mov	r2, r0
 8001196:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b64      	cmp	r3, #100	; 0x64
 800119e:	d901      	bls.n	80011a4 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e2cc      	b.n	800173e <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011a4:	4b41      	ldr	r3, [pc, #260]	; (80012ac <HAL_RCC_OscConfig+0x93c>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d0ef      	beq.n	8001190 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011b0:	1d3b      	adds	r3, r7, #4
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68db      	ldr	r3, [r3, #12]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	d106      	bne.n	80011c8 <HAL_RCC_OscConfig+0x858>
 80011ba:	4b3a      	ldr	r3, [pc, #232]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 80011bc:	6a1b      	ldr	r3, [r3, #32]
 80011be:	4a39      	ldr	r2, [pc, #228]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 80011c0:	f043 0301 	orr.w	r3, r3, #1
 80011c4:	6213      	str	r3, [r2, #32]
 80011c6:	e02f      	b.n	8001228 <HAL_RCC_OscConfig+0x8b8>
 80011c8:	1d3b      	adds	r3, r7, #4
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	68db      	ldr	r3, [r3, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d10c      	bne.n	80011ec <HAL_RCC_OscConfig+0x87c>
 80011d2:	4b34      	ldr	r3, [pc, #208]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 80011d4:	6a1b      	ldr	r3, [r3, #32]
 80011d6:	4a33      	ldr	r2, [pc, #204]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 80011d8:	f023 0301 	bic.w	r3, r3, #1
 80011dc:	6213      	str	r3, [r2, #32]
 80011de:	4b31      	ldr	r3, [pc, #196]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	4a30      	ldr	r2, [pc, #192]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 80011e4:	f023 0304 	bic.w	r3, r3, #4
 80011e8:	6213      	str	r3, [r2, #32]
 80011ea:	e01d      	b.n	8001228 <HAL_RCC_OscConfig+0x8b8>
 80011ec:	1d3b      	adds	r3, r7, #4
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	68db      	ldr	r3, [r3, #12]
 80011f2:	2b05      	cmp	r3, #5
 80011f4:	d10c      	bne.n	8001210 <HAL_RCC_OscConfig+0x8a0>
 80011f6:	4b2b      	ldr	r3, [pc, #172]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 80011f8:	6a1b      	ldr	r3, [r3, #32]
 80011fa:	4a2a      	ldr	r2, [pc, #168]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 80011fc:	f043 0304 	orr.w	r3, r3, #4
 8001200:	6213      	str	r3, [r2, #32]
 8001202:	4b28      	ldr	r3, [pc, #160]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 8001204:	6a1b      	ldr	r3, [r3, #32]
 8001206:	4a27      	ldr	r2, [pc, #156]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 8001208:	f043 0301 	orr.w	r3, r3, #1
 800120c:	6213      	str	r3, [r2, #32]
 800120e:	e00b      	b.n	8001228 <HAL_RCC_OscConfig+0x8b8>
 8001210:	4b24      	ldr	r3, [pc, #144]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 8001212:	6a1b      	ldr	r3, [r3, #32]
 8001214:	4a23      	ldr	r2, [pc, #140]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	6213      	str	r3, [r2, #32]
 800121c:	4b21      	ldr	r3, [pc, #132]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 800121e:	6a1b      	ldr	r3, [r3, #32]
 8001220:	4a20      	ldr	r2, [pc, #128]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 8001222:	f023 0304 	bic.w	r3, r3, #4
 8001226:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001228:	1d3b      	adds	r3, r7, #4
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	68db      	ldr	r3, [r3, #12]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d06b      	beq.n	800130a <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001232:	f7ff f823 	bl	800027c <HAL_GetTick>
 8001236:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800123a:	e00b      	b.n	8001254 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800123c:	f7ff f81e 	bl	800027c <HAL_GetTick>
 8001240:	4602      	mov	r2, r0
 8001242:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001246:	1ad3      	subs	r3, r2, r3
 8001248:	f241 3288 	movw	r2, #5000	; 0x1388
 800124c:	4293      	cmp	r3, r2
 800124e:	d901      	bls.n	8001254 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001250:	2303      	movs	r3, #3
 8001252:	e274      	b.n	800173e <HAL_RCC_OscConfig+0xdce>
 8001254:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001258:	2202      	movs	r2, #2
 800125a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800125c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	fa93 f2a3 	rbit	r2, r3
 8001266:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001270:	2202      	movs	r2, #2
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	fa93 f2a3 	rbit	r2, r3
 800127e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001282:	601a      	str	r2, [r3, #0]
  return(result);
 8001284:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001288:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800128a:	fab3 f383 	clz	r3, r3
 800128e:	b2db      	uxtb	r3, r3
 8001290:	095b      	lsrs	r3, r3, #5
 8001292:	b2db      	uxtb	r3, r3
 8001294:	f043 0302 	orr.w	r3, r3, #2
 8001298:	b2db      	uxtb	r3, r3
 800129a:	2b02      	cmp	r3, #2
 800129c:	d108      	bne.n	80012b0 <HAL_RCC_OscConfig+0x940>
 800129e:	4b01      	ldr	r3, [pc, #4]	; (80012a4 <HAL_RCC_OscConfig+0x934>)
 80012a0:	6a1b      	ldr	r3, [r3, #32]
 80012a2:	e013      	b.n	80012cc <HAL_RCC_OscConfig+0x95c>
 80012a4:	40021000 	.word	0x40021000
 80012a8:	10908120 	.word	0x10908120
 80012ac:	40007000 	.word	0x40007000
 80012b0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80012b4:	2202      	movs	r2, #2
 80012b6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012b8:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	fa93 f2a3 	rbit	r2, r3
 80012c2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80012c6:	601a      	str	r2, [r3, #0]
 80012c8:	4bbb      	ldr	r3, [pc, #748]	; (80015b8 <HAL_RCC_OscConfig+0xc48>)
 80012ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012cc:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80012d0:	2102      	movs	r1, #2
 80012d2:	6011      	str	r1, [r2, #0]
 80012d4:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80012d8:	6812      	ldr	r2, [r2, #0]
 80012da:	fa92 f1a2 	rbit	r1, r2
 80012de:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80012e2:	6011      	str	r1, [r2, #0]
  return(result);
 80012e4:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80012e8:	6812      	ldr	r2, [r2, #0]
 80012ea:	fab2 f282 	clz	r2, r2
 80012ee:	b252      	sxtb	r2, r2
 80012f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80012f4:	b252      	sxtb	r2, r2
 80012f6:	b2d2      	uxtb	r2, r2
 80012f8:	f002 021f 	and.w	r2, r2, #31
 80012fc:	2101      	movs	r1, #1
 80012fe:	fa01 f202 	lsl.w	r2, r1, r2
 8001302:	4013      	ands	r3, r2
 8001304:	2b00      	cmp	r3, #0
 8001306:	d099      	beq.n	800123c <HAL_RCC_OscConfig+0x8cc>
 8001308:	e064      	b.n	80013d4 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800130a:	f7fe ffb7 	bl	800027c <HAL_GetTick>
 800130e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001312:	e00b      	b.n	800132c <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001314:	f7fe ffb2 	bl	800027c <HAL_GetTick>
 8001318:	4602      	mov	r2, r0
 800131a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	f241 3288 	movw	r2, #5000	; 0x1388
 8001324:	4293      	cmp	r3, r2
 8001326:	d901      	bls.n	800132c <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001328:	2303      	movs	r3, #3
 800132a:	e208      	b.n	800173e <HAL_RCC_OscConfig+0xdce>
 800132c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001330:	2202      	movs	r2, #2
 8001332:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001334:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	fa93 f2a3 	rbit	r2, r3
 800133e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001342:	601a      	str	r2, [r3, #0]
 8001344:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001348:	2202      	movs	r2, #2
 800134a:	601a      	str	r2, [r3, #0]
 800134c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	fa93 f2a3 	rbit	r2, r3
 8001356:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800135a:	601a      	str	r2, [r3, #0]
  return(result);
 800135c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001360:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001362:	fab3 f383 	clz	r3, r3
 8001366:	b2db      	uxtb	r3, r3
 8001368:	095b      	lsrs	r3, r3, #5
 800136a:	b2db      	uxtb	r3, r3
 800136c:	f043 0302 	orr.w	r3, r3, #2
 8001370:	b2db      	uxtb	r3, r3
 8001372:	2b02      	cmp	r3, #2
 8001374:	d102      	bne.n	800137c <HAL_RCC_OscConfig+0xa0c>
 8001376:	4b90      	ldr	r3, [pc, #576]	; (80015b8 <HAL_RCC_OscConfig+0xc48>)
 8001378:	6a1b      	ldr	r3, [r3, #32]
 800137a:	e00d      	b.n	8001398 <HAL_RCC_OscConfig+0xa28>
 800137c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001380:	2202      	movs	r2, #2
 8001382:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001384:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	fa93 f2a3 	rbit	r2, r3
 800138e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001392:	601a      	str	r2, [r3, #0]
 8001394:	4b88      	ldr	r3, [pc, #544]	; (80015b8 <HAL_RCC_OscConfig+0xc48>)
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800139c:	2102      	movs	r1, #2
 800139e:	6011      	str	r1, [r2, #0]
 80013a0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80013a4:	6812      	ldr	r2, [r2, #0]
 80013a6:	fa92 f1a2 	rbit	r1, r2
 80013aa:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013ae:	6011      	str	r1, [r2, #0]
  return(result);
 80013b0:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80013b4:	6812      	ldr	r2, [r2, #0]
 80013b6:	fab2 f282 	clz	r2, r2
 80013ba:	b252      	sxtb	r2, r2
 80013bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80013c0:	b252      	sxtb	r2, r2
 80013c2:	b2d2      	uxtb	r2, r2
 80013c4:	f002 021f 	and.w	r2, r2, #31
 80013c8:	2101      	movs	r1, #1
 80013ca:	fa01 f202 	lsl.w	r2, r1, r2
 80013ce:	4013      	ands	r3, r2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	d19f      	bne.n	8001314 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013d4:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80013d8:	2b01      	cmp	r3, #1
 80013da:	d105      	bne.n	80013e8 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80013dc:	4b76      	ldr	r3, [pc, #472]	; (80015b8 <HAL_RCC_OscConfig+0xc48>)
 80013de:	69db      	ldr	r3, [r3, #28]
 80013e0:	4a75      	ldr	r2, [pc, #468]	; (80015b8 <HAL_RCC_OscConfig+0xc48>)
 80013e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013e6:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80013e8:	1d3b      	adds	r3, r7, #4
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	69db      	ldr	r3, [r3, #28]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	f000 81a4 	beq.w	800173c <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80013f4:	4b70      	ldr	r3, [pc, #448]	; (80015b8 <HAL_RCC_OscConfig+0xc48>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f003 030c 	and.w	r3, r3, #12
 80013fc:	2b08      	cmp	r3, #8
 80013fe:	f000 819b 	beq.w	8001738 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	69db      	ldr	r3, [r3, #28]
 8001408:	2b02      	cmp	r3, #2
 800140a:	f040 8113 	bne.w	8001634 <HAL_RCC_OscConfig+0xcc4>
 800140e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001412:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001416:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001418:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	fa93 f2a3 	rbit	r2, r3
 8001422:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001426:	601a      	str	r2, [r3, #0]
  return(result);
 8001428:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800142c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800142e:	fab3 f383 	clz	r3, r3
 8001432:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001436:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800143a:	009b      	lsls	r3, r3, #2
 800143c:	461a      	mov	r2, r3
 800143e:	2300      	movs	r3, #0
 8001440:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001442:	f7fe ff1b 	bl	800027c <HAL_GetTick>
 8001446:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800144a:	e009      	b.n	8001460 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800144c:	f7fe ff16 	bl	800027c <HAL_GetTick>
 8001450:	4602      	mov	r2, r0
 8001452:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001456:	1ad3      	subs	r3, r2, r3
 8001458:	2b02      	cmp	r3, #2
 800145a:	d901      	bls.n	8001460 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 800145c:	2303      	movs	r3, #3
 800145e:	e16e      	b.n	800173e <HAL_RCC_OscConfig+0xdce>
 8001460:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001464:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001468:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800146a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	fa93 f2a3 	rbit	r2, r3
 8001474:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001478:	601a      	str	r2, [r3, #0]
  return(result);
 800147a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800147e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001480:	fab3 f383 	clz	r3, r3
 8001484:	b2db      	uxtb	r3, r3
 8001486:	095b      	lsrs	r3, r3, #5
 8001488:	b2db      	uxtb	r3, r3
 800148a:	f043 0301 	orr.w	r3, r3, #1
 800148e:	b2db      	uxtb	r3, r3
 8001490:	2b01      	cmp	r3, #1
 8001492:	d102      	bne.n	800149a <HAL_RCC_OscConfig+0xb2a>
 8001494:	4b48      	ldr	r3, [pc, #288]	; (80015b8 <HAL_RCC_OscConfig+0xc48>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	e01b      	b.n	80014d2 <HAL_RCC_OscConfig+0xb62>
 800149a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800149e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014a4:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	fa93 f2a3 	rbit	r2, r3
 80014ae:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014b8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	fa93 f2a3 	rbit	r2, r3
 80014c8:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80014cc:	601a      	str	r2, [r3, #0]
 80014ce:	4b3a      	ldr	r3, [pc, #232]	; (80015b8 <HAL_RCC_OscConfig+0xc48>)
 80014d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014d2:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80014d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80014da:	6011      	str	r1, [r2, #0]
 80014dc:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80014e0:	6812      	ldr	r2, [r2, #0]
 80014e2:	fa92 f1a2 	rbit	r1, r2
 80014e6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80014ea:	6011      	str	r1, [r2, #0]
  return(result);
 80014ec:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80014f0:	6812      	ldr	r2, [r2, #0]
 80014f2:	fab2 f282 	clz	r2, r2
 80014f6:	b252      	sxtb	r2, r2
 80014f8:	f042 0220 	orr.w	r2, r2, #32
 80014fc:	b252      	sxtb	r2, r2
 80014fe:	b2d2      	uxtb	r2, r2
 8001500:	f002 021f 	and.w	r2, r2, #31
 8001504:	2101      	movs	r1, #1
 8001506:	fa01 f202 	lsl.w	r2, r1, r2
 800150a:	4013      	ands	r3, r2
 800150c:	2b00      	cmp	r3, #0
 800150e:	d19d      	bne.n	800144c <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_RCC_OscConfig+0xc48>)
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001518:	1d3b      	adds	r3, r7, #4
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800151e:	1d3b      	adds	r3, r7, #4
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	6a1b      	ldr	r3, [r3, #32]
 8001524:	430b      	orrs	r3, r1
 8001526:	4924      	ldr	r1, [pc, #144]	; (80015b8 <HAL_RCC_OscConfig+0xc48>)
 8001528:	4313      	orrs	r3, r2
 800152a:	604b      	str	r3, [r1, #4]
 800152c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001530:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001534:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001536:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	fa93 f2a3 	rbit	r2, r3
 8001540:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001544:	601a      	str	r2, [r3, #0]
  return(result);
 8001546:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800154a:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800154c:	fab3 f383 	clz	r3, r3
 8001550:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001554:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001558:	009b      	lsls	r3, r3, #2
 800155a:	461a      	mov	r2, r3
 800155c:	2301      	movs	r3, #1
 800155e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001560:	f7fe fe8c 	bl	800027c <HAL_GetTick>
 8001564:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001568:	e009      	b.n	800157e <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800156a:	f7fe fe87 	bl	800027c <HAL_GetTick>
 800156e:	4602      	mov	r2, r0
 8001570:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b02      	cmp	r3, #2
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e0df      	b.n	800173e <HAL_RCC_OscConfig+0xdce>
 800157e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001582:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001586:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001588:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	fa93 f2a3 	rbit	r2, r3
 8001592:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001596:	601a      	str	r2, [r3, #0]
  return(result);
 8001598:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800159c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800159e:	fab3 f383 	clz	r3, r3
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	095b      	lsrs	r3, r3, #5
 80015a6:	b2db      	uxtb	r3, r3
 80015a8:	f043 0301 	orr.w	r3, r3, #1
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d104      	bne.n	80015bc <HAL_RCC_OscConfig+0xc4c>
 80015b2:	4b01      	ldr	r3, [pc, #4]	; (80015b8 <HAL_RCC_OscConfig+0xc48>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	e01d      	b.n	80015f4 <HAL_RCC_OscConfig+0xc84>
 80015b8:	40021000 	.word	0x40021000
 80015bc:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c6:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	fa93 f2a3 	rbit	r2, r3
 80015d0:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015da:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80015de:	601a      	str	r2, [r3, #0]
 80015e0:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	fa93 f2a3 	rbit	r2, r3
 80015ea:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	4b55      	ldr	r3, [pc, #340]	; (8001748 <HAL_RCC_OscConfig+0xdd8>)
 80015f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015f4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80015f8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80015fc:	6011      	str	r1, [r2, #0]
 80015fe:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001602:	6812      	ldr	r2, [r2, #0]
 8001604:	fa92 f1a2 	rbit	r1, r2
 8001608:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800160c:	6011      	str	r1, [r2, #0]
  return(result);
 800160e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001612:	6812      	ldr	r2, [r2, #0]
 8001614:	fab2 f282 	clz	r2, r2
 8001618:	b252      	sxtb	r2, r2
 800161a:	f042 0220 	orr.w	r2, r2, #32
 800161e:	b252      	sxtb	r2, r2
 8001620:	b2d2      	uxtb	r2, r2
 8001622:	f002 021f 	and.w	r2, r2, #31
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	4013      	ands	r3, r2
 800162e:	2b00      	cmp	r3, #0
 8001630:	d09b      	beq.n	800156a <HAL_RCC_OscConfig+0xbfa>
 8001632:	e083      	b.n	800173c <HAL_RCC_OscConfig+0xdcc>
 8001634:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001638:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800163c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163e:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	fa93 f2a3 	rbit	r2, r3
 8001648:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800164c:	601a      	str	r2, [r3, #0]
  return(result);
 800164e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001652:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800165c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001660:	009b      	lsls	r3, r3, #2
 8001662:	461a      	mov	r2, r3
 8001664:	2300      	movs	r3, #0
 8001666:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001668:	f7fe fe08 	bl	800027c <HAL_GetTick>
 800166c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001670:	e009      	b.n	8001686 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001672:	f7fe fe03 	bl	800027c <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b02      	cmp	r3, #2
 8001680:	d901      	bls.n	8001686 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001682:	2303      	movs	r3, #3
 8001684:	e05b      	b.n	800173e <HAL_RCC_OscConfig+0xdce>
 8001686:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800168a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800168e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	fa93 f2a3 	rbit	r2, r3
 800169a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800169e:	601a      	str	r2, [r3, #0]
  return(result);
 80016a0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80016a4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016a6:	fab3 f383 	clz	r3, r3
 80016aa:	b2db      	uxtb	r3, r3
 80016ac:	095b      	lsrs	r3, r3, #5
 80016ae:	b2db      	uxtb	r3, r3
 80016b0:	f043 0301 	orr.w	r3, r3, #1
 80016b4:	b2db      	uxtb	r3, r3
 80016b6:	2b01      	cmp	r3, #1
 80016b8:	d102      	bne.n	80016c0 <HAL_RCC_OscConfig+0xd50>
 80016ba:	4b23      	ldr	r3, [pc, #140]	; (8001748 <HAL_RCC_OscConfig+0xdd8>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	e01b      	b.n	80016f8 <HAL_RCC_OscConfig+0xd88>
 80016c0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016c8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	fa93 f2a3 	rbit	r2, r3
 80016d4:	f107 0320 	add.w	r3, r7, #32
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	f107 031c 	add.w	r3, r7, #28
 80016de:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	f107 031c 	add.w	r3, r7, #28
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	fa93 f2a3 	rbit	r2, r3
 80016ee:	f107 0318 	add.w	r3, r7, #24
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	4b14      	ldr	r3, [pc, #80]	; (8001748 <HAL_RCC_OscConfig+0xdd8>)
 80016f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016f8:	f107 0214 	add.w	r2, r7, #20
 80016fc:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001700:	6011      	str	r1, [r2, #0]
 8001702:	f107 0214 	add.w	r2, r7, #20
 8001706:	6812      	ldr	r2, [r2, #0]
 8001708:	fa92 f1a2 	rbit	r1, r2
 800170c:	f107 0210 	add.w	r2, r7, #16
 8001710:	6011      	str	r1, [r2, #0]
  return(result);
 8001712:	f107 0210 	add.w	r2, r7, #16
 8001716:	6812      	ldr	r2, [r2, #0]
 8001718:	fab2 f282 	clz	r2, r2
 800171c:	b252      	sxtb	r2, r2
 800171e:	f042 0220 	orr.w	r2, r2, #32
 8001722:	b252      	sxtb	r2, r2
 8001724:	b2d2      	uxtb	r2, r2
 8001726:	f002 021f 	and.w	r2, r2, #31
 800172a:	2101      	movs	r1, #1
 800172c:	fa01 f202 	lsl.w	r2, r1, r2
 8001730:	4013      	ands	r3, r2
 8001732:	2b00      	cmp	r3, #0
 8001734:	d19d      	bne.n	8001672 <HAL_RCC_OscConfig+0xd02>
 8001736:	e001      	b.n	800173c <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001738:	2301      	movs	r3, #1
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 800173c:	2300      	movs	r3, #0
}
 800173e:	4618      	mov	r0, r3
 8001740:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	40021000 	.word	0x40021000

0800174c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b09e      	sub	sp, #120	; 0x78
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001756:	2300      	movs	r3, #0
 8001758:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d101      	bne.n	8001764 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001760:	2301      	movs	r3, #1
 8001762:	e164      	b.n	8001a2e <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001764:	4b92      	ldr	r3, [pc, #584]	; (80019b0 <HAL_RCC_ClockConfig+0x264>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	f003 0307 	and.w	r3, r3, #7
 800176c:	683a      	ldr	r2, [r7, #0]
 800176e:	429a      	cmp	r2, r3
 8001770:	d910      	bls.n	8001794 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001772:	4b8f      	ldr	r3, [pc, #572]	; (80019b0 <HAL_RCC_ClockConfig+0x264>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f023 0207 	bic.w	r2, r3, #7
 800177a:	498d      	ldr	r1, [pc, #564]	; (80019b0 <HAL_RCC_ClockConfig+0x264>)
 800177c:	683b      	ldr	r3, [r7, #0]
 800177e:	4313      	orrs	r3, r2
 8001780:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001782:	4b8b      	ldr	r3, [pc, #556]	; (80019b0 <HAL_RCC_ClockConfig+0x264>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	f003 0307 	and.w	r3, r3, #7
 800178a:	683a      	ldr	r2, [r7, #0]
 800178c:	429a      	cmp	r2, r3
 800178e:	d001      	beq.n	8001794 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001790:	2301      	movs	r3, #1
 8001792:	e14c      	b.n	8001a2e <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0302 	and.w	r3, r3, #2
 800179c:	2b00      	cmp	r3, #0
 800179e:	d008      	beq.n	80017b2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017a0:	4b84      	ldr	r3, [pc, #528]	; (80019b4 <HAL_RCC_ClockConfig+0x268>)
 80017a2:	685b      	ldr	r3, [r3, #4]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	689b      	ldr	r3, [r3, #8]
 80017ac:	4981      	ldr	r1, [pc, #516]	; (80019b4 <HAL_RCC_ClockConfig+0x268>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	f000 80df 	beq.w	800197e <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b01      	cmp	r3, #1
 80017c6:	d13d      	bne.n	8001844 <HAL_RCC_ClockConfig+0xf8>
 80017c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017cc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80017d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d8:	fab3 f383 	clz	r3, r3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	b2db      	uxtb	r3, r3
 80017e8:	2b01      	cmp	r3, #1
 80017ea:	d102      	bne.n	80017f2 <HAL_RCC_ClockConfig+0xa6>
 80017ec:	4b71      	ldr	r3, [pc, #452]	; (80019b4 <HAL_RCC_ClockConfig+0x268>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	e00f      	b.n	8001812 <HAL_RCC_ClockConfig+0xc6>
 80017f2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80017f6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80017fa:	fa93 f3a3 	rbit	r3, r3
 80017fe:	667b      	str	r3, [r7, #100]	; 0x64
 8001800:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001804:	663b      	str	r3, [r7, #96]	; 0x60
 8001806:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001808:	fa93 f3a3 	rbit	r3, r3
 800180c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800180e:	4b69      	ldr	r3, [pc, #420]	; (80019b4 <HAL_RCC_ClockConfig+0x268>)
 8001810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001812:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001816:	65ba      	str	r2, [r7, #88]	; 0x58
 8001818:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800181a:	fa92 f2a2 	rbit	r2, r2
 800181e:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001820:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001822:	fab2 f282 	clz	r2, r2
 8001826:	b252      	sxtb	r2, r2
 8001828:	f042 0220 	orr.w	r2, r2, #32
 800182c:	b252      	sxtb	r2, r2
 800182e:	b2d2      	uxtb	r2, r2
 8001830:	f002 021f 	and.w	r2, r2, #31
 8001834:	2101      	movs	r1, #1
 8001836:	fa01 f202 	lsl.w	r2, r1, r2
 800183a:	4013      	ands	r3, r2
 800183c:	2b00      	cmp	r3, #0
 800183e:	d17d      	bne.n	800193c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001840:	2301      	movs	r3, #1
 8001842:	e0f4      	b.n	8001a2e <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	2b02      	cmp	r3, #2
 800184a:	d13d      	bne.n	80018c8 <HAL_RCC_ClockConfig+0x17c>
 800184c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001850:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001852:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001854:	fa93 f3a3 	rbit	r3, r3
 8001858:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800185a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800185c:	fab3 f383 	clz	r3, r3
 8001860:	b2db      	uxtb	r3, r3
 8001862:	095b      	lsrs	r3, r3, #5
 8001864:	b2db      	uxtb	r3, r3
 8001866:	f043 0301 	orr.w	r3, r3, #1
 800186a:	b2db      	uxtb	r3, r3
 800186c:	2b01      	cmp	r3, #1
 800186e:	d102      	bne.n	8001876 <HAL_RCC_ClockConfig+0x12a>
 8001870:	4b50      	ldr	r3, [pc, #320]	; (80019b4 <HAL_RCC_ClockConfig+0x268>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	e00f      	b.n	8001896 <HAL_RCC_ClockConfig+0x14a>
 8001876:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800187a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800187c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800187e:	fa93 f3a3 	rbit	r3, r3
 8001882:	647b      	str	r3, [r7, #68]	; 0x44
 8001884:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001888:	643b      	str	r3, [r7, #64]	; 0x40
 800188a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800188c:	fa93 f3a3 	rbit	r3, r3
 8001890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001892:	4b48      	ldr	r3, [pc, #288]	; (80019b4 <HAL_RCC_ClockConfig+0x268>)
 8001894:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001896:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800189a:	63ba      	str	r2, [r7, #56]	; 0x38
 800189c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800189e:	fa92 f2a2 	rbit	r2, r2
 80018a2:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80018a4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80018a6:	fab2 f282 	clz	r2, r2
 80018aa:	b252      	sxtb	r2, r2
 80018ac:	f042 0220 	orr.w	r2, r2, #32
 80018b0:	b252      	sxtb	r2, r2
 80018b2:	b2d2      	uxtb	r2, r2
 80018b4:	f002 021f 	and.w	r2, r2, #31
 80018b8:	2101      	movs	r1, #1
 80018ba:	fa01 f202 	lsl.w	r2, r1, r2
 80018be:	4013      	ands	r3, r2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d13b      	bne.n	800193c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80018c4:	2301      	movs	r3, #1
 80018c6:	e0b2      	b.n	8001a2e <HAL_RCC_ClockConfig+0x2e2>
 80018c8:	2302      	movs	r3, #2
 80018ca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80018ce:	fa93 f3a3 	rbit	r3, r3
 80018d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80018d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018d6:	fab3 f383 	clz	r3, r3
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	095b      	lsrs	r3, r3, #5
 80018de:	b2db      	uxtb	r3, r3
 80018e0:	f043 0301 	orr.w	r3, r3, #1
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b01      	cmp	r3, #1
 80018e8:	d102      	bne.n	80018f0 <HAL_RCC_ClockConfig+0x1a4>
 80018ea:	4b32      	ldr	r3, [pc, #200]	; (80019b4 <HAL_RCC_ClockConfig+0x268>)
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	e00d      	b.n	800190c <HAL_RCC_ClockConfig+0x1c0>
 80018f0:	2302      	movs	r3, #2
 80018f2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018f6:	fa93 f3a3 	rbit	r3, r3
 80018fa:	627b      	str	r3, [r7, #36]	; 0x24
 80018fc:	2302      	movs	r3, #2
 80018fe:	623b      	str	r3, [r7, #32]
 8001900:	6a3b      	ldr	r3, [r7, #32]
 8001902:	fa93 f3a3 	rbit	r3, r3
 8001906:	61fb      	str	r3, [r7, #28]
 8001908:	4b2a      	ldr	r3, [pc, #168]	; (80019b4 <HAL_RCC_ClockConfig+0x268>)
 800190a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800190c:	2202      	movs	r2, #2
 800190e:	61ba      	str	r2, [r7, #24]
 8001910:	69ba      	ldr	r2, [r7, #24]
 8001912:	fa92 f2a2 	rbit	r2, r2
 8001916:	617a      	str	r2, [r7, #20]
  return(result);
 8001918:	697a      	ldr	r2, [r7, #20]
 800191a:	fab2 f282 	clz	r2, r2
 800191e:	b252      	sxtb	r2, r2
 8001920:	f042 0220 	orr.w	r2, r2, #32
 8001924:	b252      	sxtb	r2, r2
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	f002 021f 	and.w	r2, r2, #31
 800192c:	2101      	movs	r1, #1
 800192e:	fa01 f202 	lsl.w	r2, r1, r2
 8001932:	4013      	ands	r3, r2
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e078      	b.n	8001a2e <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800193c:	4b1d      	ldr	r3, [pc, #116]	; (80019b4 <HAL_RCC_ClockConfig+0x268>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f023 0203 	bic.w	r2, r3, #3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	491a      	ldr	r1, [pc, #104]	; (80019b4 <HAL_RCC_ClockConfig+0x268>)
 800194a:	4313      	orrs	r3, r2
 800194c:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800194e:	f7fe fc95 	bl	800027c <HAL_GetTick>
 8001952:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001954:	e00a      	b.n	800196c <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001956:	f7fe fc91 	bl	800027c <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	f241 3288 	movw	r2, #5000	; 0x1388
 8001964:	4293      	cmp	r3, r2
 8001966:	d901      	bls.n	800196c <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e060      	b.n	8001a2e <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <HAL_RCC_ClockConfig+0x268>)
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 020c 	and.w	r2, r3, #12
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	009b      	lsls	r3, r3, #2
 800197a:	429a      	cmp	r2, r3
 800197c:	d1eb      	bne.n	8001956 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800197e:	4b0c      	ldr	r3, [pc, #48]	; (80019b0 <HAL_RCC_ClockConfig+0x264>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d215      	bcs.n	80019b8 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800198c:	4b08      	ldr	r3, [pc, #32]	; (80019b0 <HAL_RCC_ClockConfig+0x264>)
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	f023 0207 	bic.w	r2, r3, #7
 8001994:	4906      	ldr	r1, [pc, #24]	; (80019b0 <HAL_RCC_ClockConfig+0x264>)
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	4313      	orrs	r3, r2
 800199a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800199c:	4b04      	ldr	r3, [pc, #16]	; (80019b0 <HAL_RCC_ClockConfig+0x264>)
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	f003 0307 	and.w	r3, r3, #7
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d006      	beq.n	80019b8 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e03f      	b.n	8001a2e <HAL_RCC_ClockConfig+0x2e2>
 80019ae:	bf00      	nop
 80019b0:	40022000 	.word	0x40022000
 80019b4:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f003 0304 	and.w	r3, r3, #4
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d008      	beq.n	80019d6 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019c4:	4b1c      	ldr	r3, [pc, #112]	; (8001a38 <HAL_RCC_ClockConfig+0x2ec>)
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	68db      	ldr	r3, [r3, #12]
 80019d0:	4919      	ldr	r1, [pc, #100]	; (8001a38 <HAL_RCC_ClockConfig+0x2ec>)
 80019d2:	4313      	orrs	r3, r2
 80019d4:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f003 0308 	and.w	r3, r3, #8
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d009      	beq.n	80019f6 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019e2:	4b15      	ldr	r3, [pc, #84]	; (8001a38 <HAL_RCC_ClockConfig+0x2ec>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	691b      	ldr	r3, [r3, #16]
 80019ee:	00db      	lsls	r3, r3, #3
 80019f0:	4911      	ldr	r1, [pc, #68]	; (8001a38 <HAL_RCC_ClockConfig+0x2ec>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80019f6:	f000 f825 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 80019fa:	4601      	mov	r1, r0
 80019fc:	4b0e      	ldr	r3, [pc, #56]	; (8001a38 <HAL_RCC_ClockConfig+0x2ec>)
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001a04:	23f0      	movs	r3, #240	; 0xf0
 8001a06:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	fa93 f3a3 	rbit	r3, r3
 8001a0e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	fab3 f383 	clz	r3, r3
 8001a16:	fa22 f303 	lsr.w	r3, r2, r3
 8001a1a:	4a08      	ldr	r2, [pc, #32]	; (8001a3c <HAL_RCC_ClockConfig+0x2f0>)
 8001a1c:	5cd3      	ldrb	r3, [r2, r3]
 8001a1e:	fa21 f303 	lsr.w	r3, r1, r3
 8001a22:	4a07      	ldr	r2, [pc, #28]	; (8001a40 <HAL_RCC_ClockConfig+0x2f4>)
 8001a24:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001a26:	2000      	movs	r0, #0
 8001a28:	f7fe fbe4 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8001a2c:	2300      	movs	r3, #0
}
 8001a2e:	4618      	mov	r0, r3
 8001a30:	3778      	adds	r7, #120	; 0x78
 8001a32:	46bd      	mov	sp, r7
 8001a34:	bd80      	pop	{r7, pc}
 8001a36:	bf00      	nop
 8001a38:	40021000 	.word	0x40021000
 8001a3c:	080026b8 	.word	0x080026b8
 8001a40:	20000008 	.word	0x20000008

08001a44 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b08b      	sub	sp, #44	; 0x2c
 8001a48:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	61fb      	str	r3, [r7, #28]
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
 8001a56:	2300      	movs	r3, #0
 8001a58:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001a5e:	4b29      	ldr	r3, [pc, #164]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001a64:	69fb      	ldr	r3, [r7, #28]
 8001a66:	f003 030c 	and.w	r3, r3, #12
 8001a6a:	2b04      	cmp	r3, #4
 8001a6c:	d002      	beq.n	8001a74 <HAL_RCC_GetSysClockFreq+0x30>
 8001a6e:	2b08      	cmp	r3, #8
 8001a70:	d003      	beq.n	8001a7a <HAL_RCC_GetSysClockFreq+0x36>
 8001a72:	e03c      	b.n	8001aee <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001a74:	4b24      	ldr	r3, [pc, #144]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001a76:	623b      	str	r3, [r7, #32]
      break;
 8001a78:	e03c      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001a80:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001a84:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	fa93 f3a3 	rbit	r3, r3
 8001a8c:	607b      	str	r3, [r7, #4]
  return(result);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	fab3 f383 	clz	r3, r3
 8001a94:	fa22 f303 	lsr.w	r3, r2, r3
 8001a98:	4a1c      	ldr	r2, [pc, #112]	; (8001b0c <HAL_RCC_GetSysClockFreq+0xc8>)
 8001a9a:	5cd3      	ldrb	r3, [r2, r3]
 8001a9c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8001a9e:	4b19      	ldr	r3, [pc, #100]	; (8001b04 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001aa2:	f003 020f 	and.w	r2, r3, #15
 8001aa6:	230f      	movs	r3, #15
 8001aa8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aaa:	693b      	ldr	r3, [r7, #16]
 8001aac:	fa93 f3a3 	rbit	r3, r3
 8001ab0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	fab3 f383 	clz	r3, r3
 8001ab8:	fa22 f303 	lsr.w	r3, r2, r3
 8001abc:	4a14      	ldr	r2, [pc, #80]	; (8001b10 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001abe:	5cd3      	ldrb	r3, [r2, r3]
 8001ac0:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8001ac2:	69fb      	ldr	r3, [r7, #28]
 8001ac4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d008      	beq.n	8001ade <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001acc:	4a0e      	ldr	r2, [pc, #56]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001ace:	69bb      	ldr	r3, [r7, #24]
 8001ad0:	fbb2 f2f3 	udiv	r2, r2, r3
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	fb02 f303 	mul.w	r3, r2, r3
 8001ada:	627b      	str	r3, [r7, #36]	; 0x24
 8001adc:	e004      	b.n	8001ae8 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001ade:	697b      	ldr	r3, [r7, #20]
 8001ae0:	4a0c      	ldr	r2, [pc, #48]	; (8001b14 <HAL_RCC_GetSysClockFreq+0xd0>)
 8001ae2:	fb02 f303 	mul.w	r3, r2, r3
 8001ae6:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aea:	623b      	str	r3, [r7, #32]
      break;
 8001aec:	e002      	b.n	8001af4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001aee:	4b06      	ldr	r3, [pc, #24]	; (8001b08 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001af0:	623b      	str	r3, [r7, #32]
      break;
 8001af2:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af4:	6a3b      	ldr	r3, [r7, #32]
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	372c      	adds	r7, #44	; 0x2c
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	007a1200 	.word	0x007a1200
 8001b0c:	08002698 	.word	0x08002698
 8001b10:	080026a8 	.word	0x080026a8
 8001b14:	003d0900 	.word	0x003d0900

08001b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b18:	b480      	push	{r7}
 8001b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b1c:	4b03      	ldr	r3, [pc, #12]	; (8001b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b1e:	681b      	ldr	r3, [r3, #0]
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	20000008 	.word	0x20000008

08001b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001b36:	f7ff ffef 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b3a:	4601      	mov	r1, r0
 8001b3c:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <HAL_RCC_GetPCLK1Freq+0x3c>)
 8001b3e:	685b      	ldr	r3, [r3, #4]
 8001b40:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001b44:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001b48:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	fa93 f3a3 	rbit	r3, r3
 8001b50:	603b      	str	r3, [r7, #0]
  return(result);
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	fab3 f383 	clz	r3, r3
 8001b58:	fa22 f303 	lsr.w	r3, r2, r3
 8001b5c:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <HAL_RCC_GetPCLK1Freq+0x40>)
 8001b5e:	5cd3      	ldrb	r3, [r2, r3]
 8001b60:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8001b64:	4618      	mov	r0, r3
 8001b66:	3708      	adds	r7, #8
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	bd80      	pop	{r7, pc}
 8001b6c:	40021000 	.word	0x40021000
 8001b70:	080026c8 	.word	0x080026c8

08001b74 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	b082      	sub	sp, #8
 8001b78:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001b7a:	f7ff ffcd 	bl	8001b18 <HAL_RCC_GetHCLKFreq>
 8001b7e:	4601      	mov	r1, r0
 8001b80:	4b0b      	ldr	r3, [pc, #44]	; (8001bb0 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8001b82:	685b      	ldr	r3, [r3, #4]
 8001b84:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8001b88:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8001b8c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	fa93 f3a3 	rbit	r3, r3
 8001b94:	603b      	str	r3, [r7, #0]
  return(result);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	fab3 f383 	clz	r3, r3
 8001b9c:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba0:	4a04      	ldr	r2, [pc, #16]	; (8001bb4 <HAL_RCC_GetPCLK2Freq+0x40>)
 8001ba2:	5cd3      	ldrb	r3, [r2, r3]
 8001ba4:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8001ba8:	4618      	mov	r0, r3
 8001baa:	3708      	adds	r7, #8
 8001bac:	46bd      	mov	sp, r7
 8001bae:	bd80      	pop	{r7, pc}
 8001bb0:	40021000 	.word	0x40021000
 8001bb4:	080026c8 	.word	0x080026c8

08001bb8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d101      	bne.n	8001bca <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e043      	b.n	8001c52 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8001bd0:	b2db      	uxtb	r3, r3
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d106      	bne.n	8001be4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2200      	movs	r2, #0
 8001bda:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001bde:	6878      	ldr	r0, [r7, #4]
 8001be0:	f000 fc3c 	bl	800245c <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	2224      	movs	r2, #36	; 0x24
 8001be8:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	f022 0201 	bic.w	r2, r2, #1
 8001bfa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001bfc:	6878      	ldr	r0, [r7, #4]
 8001bfe:	f000 f82d 	bl	8001c5c <UART_SetConfig>
 8001c02:	4603      	mov	r3, r0
 8001c04:	2b01      	cmp	r3, #1
 8001c06:	d101      	bne.n	8001c0c <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	e022      	b.n	8001c52 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d002      	beq.n	8001c1a <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8001c14:	6878      	ldr	r0, [r7, #4]
 8001c16:	f000 f987 	bl	8001f28 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001c28:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	689a      	ldr	r2, [r3, #8]
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001c38:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	681a      	ldr	r2, [r3, #0]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	f042 0201 	orr.w	r2, r2, #1
 8001c48:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8001c4a:	6878      	ldr	r0, [r7, #4]
 8001c4c:	f000 fa0e 	bl	800206c <UART_CheckIdleState>
 8001c50:	4603      	mov	r3, r0
}
 8001c52:	4618      	mov	r0, r3
 8001c54:	3708      	adds	r7, #8
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
	...

08001c5c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	b086      	sub	sp, #24
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8001c64:	2300      	movs	r3, #0
 8001c66:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8001c68:	2310      	movs	r3, #16
 8001c6a:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8001c6c:	2300      	movs	r3, #0
 8001c6e:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8001c70:	2300      	movs	r3, #0
 8001c72:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c74:	2300      	movs	r3, #0
 8001c76:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	691b      	ldr	r3, [r3, #16]
 8001c80:	431a      	orrs	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	695b      	ldr	r3, [r3, #20]
 8001c86:	431a      	orrs	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	69db      	ldr	r3, [r3, #28]
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	4b9f      	ldr	r3, [pc, #636]	; (8001f14 <UART_SetConfig+0x2b8>)
 8001c98:	4013      	ands	r3, r2
 8001c9a:	687a      	ldr	r2, [r7, #4]
 8001c9c:	6812      	ldr	r2, [r2, #0]
 8001c9e:	68f9      	ldr	r1, [r7, #12]
 8001ca0:	430b      	orrs	r3, r1
 8001ca2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	685b      	ldr	r3, [r3, #4]
 8001caa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	68da      	ldr	r2, [r3, #12]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	430a      	orrs	r2, r1
 8001cb8:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	699a      	ldr	r2, [r3, #24]
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	6a1b      	ldr	r3, [r3, #32]
 8001cc2:	4313      	orrs	r3, r2
 8001cc4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	68fa      	ldr	r2, [r7, #12]
 8001cd6:	430a      	orrs	r2, r1
 8001cd8:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4a8e      	ldr	r2, [pc, #568]	; (8001f18 <UART_SetConfig+0x2bc>)
 8001ce0:	4293      	cmp	r3, r2
 8001ce2:	d121      	bne.n	8001d28 <UART_SetConfig+0xcc>
 8001ce4:	4b8d      	ldr	r3, [pc, #564]	; (8001f1c <UART_SetConfig+0x2c0>)
 8001ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ce8:	f003 0303 	and.w	r3, r3, #3
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d817      	bhi.n	8001d20 <UART_SetConfig+0xc4>
 8001cf0:	a201      	add	r2, pc, #4	; (adr r2, 8001cf8 <UART_SetConfig+0x9c>)
 8001cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf6:	bf00      	nop
 8001cf8:	08001d09 	.word	0x08001d09
 8001cfc:	08001d15 	.word	0x08001d15
 8001d00:	08001d1b 	.word	0x08001d1b
 8001d04:	08001d0f 	.word	0x08001d0f
 8001d08:	2300      	movs	r3, #0
 8001d0a:	75fb      	strb	r3, [r7, #23]
 8001d0c:	e01e      	b.n	8001d4c <UART_SetConfig+0xf0>
 8001d0e:	2302      	movs	r3, #2
 8001d10:	75fb      	strb	r3, [r7, #23]
 8001d12:	e01b      	b.n	8001d4c <UART_SetConfig+0xf0>
 8001d14:	2304      	movs	r3, #4
 8001d16:	75fb      	strb	r3, [r7, #23]
 8001d18:	e018      	b.n	8001d4c <UART_SetConfig+0xf0>
 8001d1a:	2308      	movs	r3, #8
 8001d1c:	75fb      	strb	r3, [r7, #23]
 8001d1e:	e015      	b.n	8001d4c <UART_SetConfig+0xf0>
 8001d20:	2310      	movs	r3, #16
 8001d22:	75fb      	strb	r3, [r7, #23]
 8001d24:	bf00      	nop
 8001d26:	e011      	b.n	8001d4c <UART_SetConfig+0xf0>
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	4a7c      	ldr	r2, [pc, #496]	; (8001f20 <UART_SetConfig+0x2c4>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d102      	bne.n	8001d38 <UART_SetConfig+0xdc>
 8001d32:	2300      	movs	r3, #0
 8001d34:	75fb      	strb	r3, [r7, #23]
 8001d36:	e009      	b.n	8001d4c <UART_SetConfig+0xf0>
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4a79      	ldr	r2, [pc, #484]	; (8001f24 <UART_SetConfig+0x2c8>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d102      	bne.n	8001d48 <UART_SetConfig+0xec>
 8001d42:	2300      	movs	r3, #0
 8001d44:	75fb      	strb	r3, [r7, #23]
 8001d46:	e001      	b.n	8001d4c <UART_SetConfig+0xf0>
 8001d48:	2310      	movs	r3, #16
 8001d4a:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	69db      	ldr	r3, [r3, #28]
 8001d50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001d54:	d16f      	bne.n	8001e36 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8001d56:	7dfb      	ldrb	r3, [r7, #23]
 8001d58:	2b08      	cmp	r3, #8
 8001d5a:	d857      	bhi.n	8001e0c <UART_SetConfig+0x1b0>
 8001d5c:	a201      	add	r2, pc, #4	; (adr r2, 8001d64 <UART_SetConfig+0x108>)
 8001d5e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d62:	bf00      	nop
 8001d64:	08001d89 	.word	0x08001d89
 8001d68:	08001da5 	.word	0x08001da5
 8001d6c:	08001dc1 	.word	0x08001dc1
 8001d70:	08001e0d 	.word	0x08001e0d
 8001d74:	08001ddb 	.word	0x08001ddb
 8001d78:	08001e0d 	.word	0x08001e0d
 8001d7c:	08001e0d 	.word	0x08001e0d
 8001d80:	08001e0d 	.word	0x08001e0d
 8001d84:	08001df7 	.word	0x08001df7
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001d88:	f7ff fed2 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	005a      	lsls	r2, r3, #1
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	085b      	lsrs	r3, r3, #1
 8001d96:	441a      	add	r2, r3
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	82bb      	strh	r3, [r7, #20]
        break;
 8001da2:	e036      	b.n	8001e12 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001da4:	f7ff fee6 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8001da8:	4603      	mov	r3, r0
 8001daa:	005a      	lsls	r2, r3, #1
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	685b      	ldr	r3, [r3, #4]
 8001db0:	085b      	lsrs	r3, r3, #1
 8001db2:	441a      	add	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dbc:	82bb      	strh	r3, [r7, #20]
        break;
 8001dbe:	e028      	b.n	8001e12 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	085b      	lsrs	r3, r3, #1
 8001dc6:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001dca:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8001dce:	687a      	ldr	r2, [r7, #4]
 8001dd0:	6852      	ldr	r2, [r2, #4]
 8001dd2:	fbb3 f3f2 	udiv	r3, r3, r2
 8001dd6:	82bb      	strh	r3, [r7, #20]
        break;
 8001dd8:	e01b      	b.n	8001e12 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001dda:	f7ff fe33 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 8001dde:	4603      	mov	r3, r0
 8001de0:	005a      	lsls	r2, r3, #1
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	085b      	lsrs	r3, r3, #1
 8001de8:	441a      	add	r2, r3
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	685b      	ldr	r3, [r3, #4]
 8001dee:	fbb2 f3f3 	udiv	r3, r2, r3
 8001df2:	82bb      	strh	r3, [r7, #20]
        break;
 8001df4:	e00d      	b.n	8001e12 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	085b      	lsrs	r3, r3, #1
 8001dfc:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e08:	82bb      	strh	r3, [r7, #20]
        break;
 8001e0a:	e002      	b.n	8001e12 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	74fb      	strb	r3, [r7, #19]
        break;
 8001e10:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001e12:	8abb      	ldrh	r3, [r7, #20]
 8001e14:	f023 030f 	bic.w	r3, r3, #15
 8001e18:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001e1a:	8abb      	ldrh	r3, [r7, #20]
 8001e1c:	105b      	asrs	r3, r3, #1
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	f003 0307 	and.w	r3, r3, #7
 8001e24:	b29a      	uxth	r2, r3
 8001e26:	897b      	ldrh	r3, [r7, #10]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	897a      	ldrh	r2, [r7, #10]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	e069      	b.n	8001f0a <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8001e36:	7dfb      	ldrb	r3, [r7, #23]
 8001e38:	2b08      	cmp	r3, #8
 8001e3a:	d863      	bhi.n	8001f04 <UART_SetConfig+0x2a8>
 8001e3c:	a201      	add	r2, pc, #4	; (adr r2, 8001e44 <UART_SetConfig+0x1e8>)
 8001e3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e42:	bf00      	nop
 8001e44:	08001e69 	.word	0x08001e69
 8001e48:	08001e89 	.word	0x08001e89
 8001e4c:	08001ea9 	.word	0x08001ea9
 8001e50:	08001f05 	.word	0x08001f05
 8001e54:	08001ec9 	.word	0x08001ec9
 8001e58:	08001f05 	.word	0x08001f05
 8001e5c:	08001f05 	.word	0x08001f05
 8001e60:	08001f05 	.word	0x08001f05
 8001e64:	08001ee9 	.word	0x08001ee9
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001e68:	f7ff fe62 	bl	8001b30 <HAL_RCC_GetPCLK1Freq>
 8001e6c:	4602      	mov	r2, r0
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	085b      	lsrs	r3, r3, #1
 8001e74:	441a      	add	r2, r3
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e7e:	b29a      	uxth	r2, r3
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60da      	str	r2, [r3, #12]
        break;
 8001e86:	e040      	b.n	8001f0a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001e88:	f7ff fe74 	bl	8001b74 <HAL_RCC_GetPCLK2Freq>
 8001e8c:	4602      	mov	r2, r0
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	685b      	ldr	r3, [r3, #4]
 8001e92:	085b      	lsrs	r3, r3, #1
 8001e94:	441a      	add	r2, r3
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	685b      	ldr	r3, [r3, #4]
 8001e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9e:	b29a      	uxth	r2, r3
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	60da      	str	r2, [r3, #12]
        break;
 8001ea6:	e030      	b.n	8001f0a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	685b      	ldr	r3, [r3, #4]
 8001eac:	085b      	lsrs	r3, r3, #1
 8001eae:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001eb2:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8001eb6:	687a      	ldr	r2, [r7, #4]
 8001eb8:	6852      	ldr	r2, [r2, #4]
 8001eba:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	60da      	str	r2, [r3, #12]
        break;
 8001ec6:	e020      	b.n	8001f0a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001ec8:	f7ff fdbc 	bl	8001a44 <HAL_RCC_GetSysClockFreq>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	085b      	lsrs	r3, r3, #1
 8001ed4:	441a      	add	r2, r3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ede:	b29a      	uxth	r2, r3
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	60da      	str	r2, [r3, #12]
        break;
 8001ee6:	e010      	b.n	8001f0a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	085b      	lsrs	r3, r3, #1
 8001eee:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001efa:	b29a      	uxth	r2, r3
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	60da      	str	r2, [r3, #12]
        break;
 8001f02:	e002      	b.n	8001f0a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001f04:	2301      	movs	r3, #1
 8001f06:	74fb      	strb	r3, [r7, #19]
        break;
 8001f08:	bf00      	nop
    }
  }

  return ret;
 8001f0a:	7cfb      	ldrb	r3, [r7, #19]

}
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	3718      	adds	r7, #24
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	efff69f3 	.word	0xefff69f3
 8001f18:	40013800 	.word	0x40013800
 8001f1c:	40021000 	.word	0x40021000
 8001f20:	40004400 	.word	0x40004400
 8001f24:	40004800 	.word	0x40004800

08001f28 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8001f28:	b480      	push	{r7}
 8001f2a:	b083      	sub	sp, #12
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f34:	f003 0301 	and.w	r3, r3, #1
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00a      	beq.n	8001f52 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	430a      	orrs	r2, r1
 8001f50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f56:	f003 0302 	and.w	r3, r3, #2
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d00a      	beq.n	8001f74 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	685b      	ldr	r3, [r3, #4]
 8001f64:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	430a      	orrs	r2, r1
 8001f72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	f003 0304 	and.w	r3, r3, #4
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d00a      	beq.n	8001f96 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	430a      	orrs	r2, r1
 8001f94:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f9a:	f003 0308 	and.w	r3, r3, #8
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00a      	beq.n	8001fb8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	685b      	ldr	r3, [r3, #4]
 8001fa8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	430a      	orrs	r2, r1
 8001fb6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fbc:	f003 0310 	and.w	r3, r3, #16
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d00a      	beq.n	8001fda <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	430a      	orrs	r2, r1
 8001fd8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fde:	f003 0320 	and.w	r3, r3, #32
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d00a      	beq.n	8001ffc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	430a      	orrs	r2, r1
 8001ffa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002000:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01a      	beq.n	800203e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	430a      	orrs	r2, r1
 800201c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002026:	d10a      	bne.n	800203e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	430a      	orrs	r2, r1
 800203c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002046:	2b00      	cmp	r3, #0
 8002048:	d00a      	beq.n	8002060 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	430a      	orrs	r2, r1
 800205e:	605a      	str	r2, [r3, #4]
  }
}
 8002060:	bf00      	nop
 8002062:	370c      	adds	r7, #12
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b086      	sub	sp, #24
 8002070:	af02      	add	r7, sp, #8
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002074:	2300      	movs	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800207e:	f7fe f8fd 	bl	800027c <HAL_GetTick>
 8002082:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f003 0308 	and.w	r3, r3, #8
 800208e:	2b08      	cmp	r3, #8
 8002090:	d10e      	bne.n	80020b0 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002092:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002096:	9300      	str	r3, [sp, #0]
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f000 f82c 	bl	80020fe <UART_WaitOnFlagUntilTimeout>
 80020a6:	4603      	mov	r3, r0
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d001      	beq.n	80020b0 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80020ac:	2303      	movs	r3, #3
 80020ae:	e022      	b.n	80020f6 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0304 	and.w	r3, r3, #4
 80020ba:	2b04      	cmp	r3, #4
 80020bc:	d10e      	bne.n	80020dc <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80020be:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80020c2:	9300      	str	r3, [sp, #0]
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	2200      	movs	r2, #0
 80020c8:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80020cc:	6878      	ldr	r0, [r7, #4]
 80020ce:	f000 f816 	bl	80020fe <UART_WaitOnFlagUntilTimeout>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d001      	beq.n	80020dc <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80020d8:	2303      	movs	r3, #3
 80020da:	e00c      	b.n	80020f6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	2220      	movs	r2, #32
 80020e0:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	2220      	movs	r2, #32
 80020e8:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	2200      	movs	r2, #0
 80020f0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80020f4:	2300      	movs	r3, #0
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}

080020fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80020fe:	b580      	push	{r7, lr}
 8002100:	b084      	sub	sp, #16
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	603b      	str	r3, [r7, #0]
 800210a:	4613      	mov	r3, r2
 800210c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800210e:	e02c      	b.n	800216a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002116:	d028      	beq.n	800216a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002118:	69bb      	ldr	r3, [r7, #24]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d007      	beq.n	800212e <UART_WaitOnFlagUntilTimeout+0x30>
 800211e:	f7fe f8ad 	bl	800027c <HAL_GetTick>
 8002122:	4602      	mov	r2, r0
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	1ad3      	subs	r3, r2, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	429a      	cmp	r2, r3
 800212c:	d21d      	bcs.n	800216a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800213c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	689a      	ldr	r2, [r3, #8]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 0201 	bic.w	r2, r2, #1
 800214c:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2220      	movs	r2, #32
 8002152:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2220      	movs	r2, #32
 800215a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8002166:	2303      	movs	r3, #3
 8002168:	e00f      	b.n	800218a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	69da      	ldr	r2, [r3, #28]
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	4013      	ands	r3, r2
 8002174:	68ba      	ldr	r2, [r7, #8]
 8002176:	429a      	cmp	r2, r3
 8002178:	bf0c      	ite	eq
 800217a:	2301      	moveq	r3, #1
 800217c:	2300      	movne	r3, #0
 800217e:	b2db      	uxtb	r3, r3
 8002180:	461a      	mov	r2, r3
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	429a      	cmp	r2, r3
 8002186:	d0c3      	beq.n	8002110 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002188:	2300      	movs	r3, #0
}
 800218a:	4618      	mov	r0, r3
 800218c:	3710      	adds	r7, #16
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002198:	f7fe f816 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800219c:	f000 f814 	bl	80021c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80021a0:	f000 f8a8 	bl	80022f4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80021a4:	f000 f876 	bl	8002294 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 80021a8:	f000 f84a 	bl	8002240 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80021ac:	2100      	movs	r1, #0
 80021ae:	4805      	ldr	r0, [pc, #20]	; (80021c4 <main+0x30>)
 80021b0:	f7fe f99c 	bl	80004ec <HAL_DAC_Start>

  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2800);
 80021b4:	f44f 632f 	mov.w	r3, #2800	; 0xaf0
 80021b8:	2200      	movs	r2, #0
 80021ba:	2100      	movs	r1, #0
 80021bc:	4801      	ldr	r0, [pc, #4]	; (80021c4 <main+0x30>)
 80021be:	f7fe f970 	bl	80004a2 <HAL_DAC_SetValue>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80021c2:	e7fe      	b.n	80021c2 <main+0x2e>
 80021c4:	2000002c 	.word	0x2000002c

080021c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b090      	sub	sp, #64	; 0x40
 80021cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021ce:	f107 0318 	add.w	r3, r7, #24
 80021d2:	2228      	movs	r2, #40	; 0x28
 80021d4:	2100      	movs	r1, #0
 80021d6:	4618      	mov	r0, r3
 80021d8:	f000 fa4a 	bl	8002670 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]
 80021e8:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80021ea:	2302      	movs	r3, #2
 80021ec:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021ee:	2301      	movs	r3, #1
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80021f2:	2310      	movs	r3, #16
 80021f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80021f6:	2300      	movs	r3, #0
 80021f8:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80021fa:	f107 0318 	add.w	r3, r7, #24
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe fbb6 	bl	8000970 <HAL_RCC_OscConfig>
 8002204:	4603      	mov	r3, r0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <SystemClock_Config+0x46>
  {
    Error_Handler();
 800220a:	f000 f8bd 	bl	8002388 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800220e:	230f      	movs	r3, #15
 8002210:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8002212:	2300      	movs	r3, #0
 8002214:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002216:	2300      	movs	r3, #0
 8002218:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800221e:	2300      	movs	r3, #0
 8002220:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8002222:	1d3b      	adds	r3, r7, #4
 8002224:	2100      	movs	r1, #0
 8002226:	4618      	mov	r0, r3
 8002228:	f7ff fa90 	bl	800174c <HAL_RCC_ClockConfig>
 800222c:	4603      	mov	r3, r0
 800222e:	2b00      	cmp	r3, #0
 8002230:	d001      	beq.n	8002236 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8002232:	f000 f8a9 	bl	8002388 <Error_Handler>
  }
}
 8002236:	bf00      	nop
 8002238:	3740      	adds	r7, #64	; 0x40
 800223a:	46bd      	mov	sp, r7
 800223c:	bd80      	pop	{r7, pc}
	...

08002240 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002246:	1d3b      	adds	r3, r7, #4
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]
 800224c:	605a      	str	r2, [r3, #4]
 800224e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8002250:	4b0e      	ldr	r3, [pc, #56]	; (800228c <MX_DAC1_Init+0x4c>)
 8002252:	4a0f      	ldr	r2, [pc, #60]	; (8002290 <MX_DAC1_Init+0x50>)
 8002254:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002256:	480d      	ldr	r0, [pc, #52]	; (800228c <MX_DAC1_Init+0x4c>)
 8002258:	f7fe f901 	bl	800045e <HAL_DAC_Init>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8002262:	f000 f891 	bl	8002388 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002266:	2300      	movs	r3, #0
 8002268:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800226a:	2300      	movs	r3, #0
 800226c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800226e:	1d3b      	adds	r3, r7, #4
 8002270:	2200      	movs	r2, #0
 8002272:	4619      	mov	r1, r3
 8002274:	4805      	ldr	r0, [pc, #20]	; (800228c <MX_DAC1_Init+0x4c>)
 8002276:	f7fe f985 	bl	8000584 <HAL_DAC_ConfigChannel>
 800227a:	4603      	mov	r3, r0
 800227c:	2b00      	cmp	r3, #0
 800227e:	d001      	beq.n	8002284 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8002280:	f000 f882 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002284:	bf00      	nop
 8002286:	3710      	adds	r7, #16
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	2000002c 	.word	0x2000002c
 8002290:	40007400 	.word	0x40007400

08002294 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002298:	4b14      	ldr	r3, [pc, #80]	; (80022ec <MX_USART2_UART_Init+0x58>)
 800229a:	4a15      	ldr	r2, [pc, #84]	; (80022f0 <MX_USART2_UART_Init+0x5c>)
 800229c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <MX_USART2_UART_Init+0x58>)
 80022a0:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 80022a4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80022a6:	4b11      	ldr	r3, [pc, #68]	; (80022ec <MX_USART2_UART_Init+0x58>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80022ac:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <MX_USART2_UART_Init+0x58>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80022b2:	4b0e      	ldr	r3, [pc, #56]	; (80022ec <MX_USART2_UART_Init+0x58>)
 80022b4:	2200      	movs	r2, #0
 80022b6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80022b8:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <MX_USART2_UART_Init+0x58>)
 80022ba:	220c      	movs	r2, #12
 80022bc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022be:	4b0b      	ldr	r3, [pc, #44]	; (80022ec <MX_USART2_UART_Init+0x58>)
 80022c0:	2200      	movs	r2, #0
 80022c2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80022c4:	4b09      	ldr	r3, [pc, #36]	; (80022ec <MX_USART2_UART_Init+0x58>)
 80022c6:	2200      	movs	r2, #0
 80022c8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ca:	4b08      	ldr	r3, [pc, #32]	; (80022ec <MX_USART2_UART_Init+0x58>)
 80022cc:	2200      	movs	r2, #0
 80022ce:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022d0:	4b06      	ldr	r3, [pc, #24]	; (80022ec <MX_USART2_UART_Init+0x58>)
 80022d2:	2200      	movs	r2, #0
 80022d4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80022d6:	4805      	ldr	r0, [pc, #20]	; (80022ec <MX_USART2_UART_Init+0x58>)
 80022d8:	f7ff fc6e 	bl	8001bb8 <HAL_UART_Init>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d001      	beq.n	80022e6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80022e2:	f000 f851 	bl	8002388 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80022e6:	bf00      	nop
 80022e8:	bd80      	pop	{r7, pc}
 80022ea:	bf00      	nop
 80022ec:	20000040 	.word	0x20000040
 80022f0:	40004400 	.word	0x40004400

080022f4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b088      	sub	sp, #32
 80022f8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022fa:	f107 030c 	add.w	r3, r7, #12
 80022fe:	2200      	movs	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	605a      	str	r2, [r3, #4]
 8002304:	609a      	str	r2, [r3, #8]
 8002306:	60da      	str	r2, [r3, #12]
 8002308:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800230a:	4b1d      	ldr	r3, [pc, #116]	; (8002380 <MX_GPIO_Init+0x8c>)
 800230c:	695b      	ldr	r3, [r3, #20]
 800230e:	4a1c      	ldr	r2, [pc, #112]	; (8002380 <MX_GPIO_Init+0x8c>)
 8002310:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002314:	6153      	str	r3, [r2, #20]
 8002316:	4b1a      	ldr	r3, [pc, #104]	; (8002380 <MX_GPIO_Init+0x8c>)
 8002318:	695b      	ldr	r3, [r3, #20]
 800231a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231e:	60bb      	str	r3, [r7, #8]
 8002320:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002322:	4b17      	ldr	r3, [pc, #92]	; (8002380 <MX_GPIO_Init+0x8c>)
 8002324:	695b      	ldr	r3, [r3, #20]
 8002326:	4a16      	ldr	r2, [pc, #88]	; (8002380 <MX_GPIO_Init+0x8c>)
 8002328:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800232c:	6153      	str	r3, [r2, #20]
 800232e:	4b14      	ldr	r3, [pc, #80]	; (8002380 <MX_GPIO_Init+0x8c>)
 8002330:	695b      	ldr	r3, [r3, #20]
 8002332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002336:	607b      	str	r3, [r7, #4]
 8002338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800233a:	4b11      	ldr	r3, [pc, #68]	; (8002380 <MX_GPIO_Init+0x8c>)
 800233c:	695b      	ldr	r3, [r3, #20]
 800233e:	4a10      	ldr	r2, [pc, #64]	; (8002380 <MX_GPIO_Init+0x8c>)
 8002340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002344:	6153      	str	r3, [r2, #20]
 8002346:	4b0e      	ldr	r3, [pc, #56]	; (8002380 <MX_GPIO_Init+0x8c>)
 8002348:	695b      	ldr	r3, [r3, #20]
 800234a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800234e:	603b      	str	r3, [r7, #0]
 8002350:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002352:	2200      	movs	r2, #0
 8002354:	2108      	movs	r1, #8
 8002356:	480b      	ldr	r0, [pc, #44]	; (8002384 <MX_GPIO_Init+0x90>)
 8002358:	f7fe faf2 	bl	8000940 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 800235c:	2308      	movs	r3, #8
 800235e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002360:	2301      	movs	r3, #1
 8002362:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800236c:	f107 030c 	add.w	r3, r7, #12
 8002370:	4619      	mov	r1, r3
 8002372:	4804      	ldr	r0, [pc, #16]	; (8002384 <MX_GPIO_Init+0x90>)
 8002374:	f7fe f96e 	bl	8000654 <HAL_GPIO_Init>

}
 8002378:	bf00      	nop
 800237a:	3720      	adds	r7, #32
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}
 8002380:	40021000 	.word	0x40021000
 8002384:	48000400 	.word	0x48000400

08002388 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002388:	b480      	push	{r7}
 800238a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800238c:	bf00      	nop
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
	...

08002398 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002398:	b480      	push	{r7}
 800239a:	b083      	sub	sp, #12
 800239c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239e:	4b0f      	ldr	r3, [pc, #60]	; (80023dc <HAL_MspInit+0x44>)
 80023a0:	699b      	ldr	r3, [r3, #24]
 80023a2:	4a0e      	ldr	r2, [pc, #56]	; (80023dc <HAL_MspInit+0x44>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6193      	str	r3, [r2, #24]
 80023aa:	4b0c      	ldr	r3, [pc, #48]	; (80023dc <HAL_MspInit+0x44>)
 80023ac:	699b      	ldr	r3, [r3, #24]
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	4b09      	ldr	r3, [pc, #36]	; (80023dc <HAL_MspInit+0x44>)
 80023b8:	69db      	ldr	r3, [r3, #28]
 80023ba:	4a08      	ldr	r2, [pc, #32]	; (80023dc <HAL_MspInit+0x44>)
 80023bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023c0:	61d3      	str	r3, [r2, #28]
 80023c2:	4b06      	ldr	r3, [pc, #24]	; (80023dc <HAL_MspInit+0x44>)
 80023c4:	69db      	ldr	r3, [r3, #28]
 80023c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023ca:	603b      	str	r3, [r7, #0]
 80023cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023ce:	bf00      	nop
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	40021000 	.word	0x40021000

080023e0 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b08a      	sub	sp, #40	; 0x28
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023e8:	f107 0314 	add.w	r3, r7, #20
 80023ec:	2200      	movs	r2, #0
 80023ee:	601a      	str	r2, [r3, #0]
 80023f0:	605a      	str	r2, [r3, #4]
 80023f2:	609a      	str	r2, [r3, #8]
 80023f4:	60da      	str	r2, [r3, #12]
 80023f6:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	4a15      	ldr	r2, [pc, #84]	; (8002454 <HAL_DAC_MspInit+0x74>)
 80023fe:	4293      	cmp	r3, r2
 8002400:	d124      	bne.n	800244c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002402:	4b15      	ldr	r3, [pc, #84]	; (8002458 <HAL_DAC_MspInit+0x78>)
 8002404:	69db      	ldr	r3, [r3, #28]
 8002406:	4a14      	ldr	r2, [pc, #80]	; (8002458 <HAL_DAC_MspInit+0x78>)
 8002408:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800240c:	61d3      	str	r3, [r2, #28]
 800240e:	4b12      	ldr	r3, [pc, #72]	; (8002458 <HAL_DAC_MspInit+0x78>)
 8002410:	69db      	ldr	r3, [r3, #28]
 8002412:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002416:	613b      	str	r3, [r7, #16]
 8002418:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800241a:	4b0f      	ldr	r3, [pc, #60]	; (8002458 <HAL_DAC_MspInit+0x78>)
 800241c:	695b      	ldr	r3, [r3, #20]
 800241e:	4a0e      	ldr	r2, [pc, #56]	; (8002458 <HAL_DAC_MspInit+0x78>)
 8002420:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002424:	6153      	str	r3, [r2, #20]
 8002426:	4b0c      	ldr	r3, [pc, #48]	; (8002458 <HAL_DAC_MspInit+0x78>)
 8002428:	695b      	ldr	r3, [r3, #20]
 800242a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002432:	2310      	movs	r3, #16
 8002434:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002436:	2303      	movs	r3, #3
 8002438:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243a:	2300      	movs	r3, #0
 800243c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800243e:	f107 0314 	add.w	r3, r7, #20
 8002442:	4619      	mov	r1, r3
 8002444:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002448:	f7fe f904 	bl	8000654 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800244c:	bf00      	nop
 800244e:	3728      	adds	r7, #40	; 0x28
 8002450:	46bd      	mov	sp, r7
 8002452:	bd80      	pop	{r7, pc}
 8002454:	40007400 	.word	0x40007400
 8002458:	40021000 	.word	0x40021000

0800245c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800245c:	b580      	push	{r7, lr}
 800245e:	b08a      	sub	sp, #40	; 0x28
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002464:	f107 0314 	add.w	r3, r7, #20
 8002468:	2200      	movs	r2, #0
 800246a:	601a      	str	r2, [r3, #0]
 800246c:	605a      	str	r2, [r3, #4]
 800246e:	609a      	str	r2, [r3, #8]
 8002470:	60da      	str	r2, [r3, #12]
 8002472:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a18      	ldr	r2, [pc, #96]	; (80024dc <HAL_UART_MspInit+0x80>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d129      	bne.n	80024d2 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800247e:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <HAL_UART_MspInit+0x84>)
 8002480:	69db      	ldr	r3, [r3, #28]
 8002482:	4a17      	ldr	r2, [pc, #92]	; (80024e0 <HAL_UART_MspInit+0x84>)
 8002484:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002488:	61d3      	str	r3, [r2, #28]
 800248a:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <HAL_UART_MspInit+0x84>)
 800248c:	69db      	ldr	r3, [r3, #28]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002496:	4b12      	ldr	r3, [pc, #72]	; (80024e0 <HAL_UART_MspInit+0x84>)
 8002498:	695b      	ldr	r3, [r3, #20]
 800249a:	4a11      	ldr	r2, [pc, #68]	; (80024e0 <HAL_UART_MspInit+0x84>)
 800249c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80024a0:	6153      	str	r3, [r2, #20]
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_UART_MspInit+0x84>)
 80024a4:	695b      	ldr	r3, [r3, #20]
 80024a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024aa:	60fb      	str	r3, [r7, #12]
 80024ac:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80024ae:	f248 0304 	movw	r3, #32772	; 0x8004
 80024b2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024b4:	2302      	movs	r3, #2
 80024b6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024b8:	2300      	movs	r3, #0
 80024ba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024bc:	2303      	movs	r3, #3
 80024be:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024c0:	2307      	movs	r3, #7
 80024c2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024c4:	f107 0314 	add.w	r3, r7, #20
 80024c8:	4619      	mov	r1, r3
 80024ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024ce:	f7fe f8c1 	bl	8000654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80024d2:	bf00      	nop
 80024d4:	3728      	adds	r7, #40	; 0x28
 80024d6:	46bd      	mov	sp, r7
 80024d8:	bd80      	pop	{r7, pc}
 80024da:	bf00      	nop
 80024dc:	40004400 	.word	0x40004400
 80024e0:	40021000 	.word	0x40021000

080024e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr

080024f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80024f2:	b480      	push	{r7}
 80024f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80024f6:	e7fe      	b.n	80024f6 <HardFault_Handler+0x4>

080024f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80024f8:	b480      	push	{r7}
 80024fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80024fc:	e7fe      	b.n	80024fc <MemManage_Handler+0x4>

080024fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80024fe:	b480      	push	{r7}
 8002500:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002502:	e7fe      	b.n	8002502 <BusFault_Handler+0x4>

08002504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002504:	b480      	push	{r7}
 8002506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002508:	e7fe      	b.n	8002508 <UsageFault_Handler+0x4>

0800250a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800250a:	b480      	push	{r7}
 800250c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800250e:	bf00      	nop
 8002510:	46bd      	mov	sp, r7
 8002512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002516:	4770      	bx	lr

08002518 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002518:	b480      	push	{r7}
 800251a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800251c:	bf00      	nop
 800251e:	46bd      	mov	sp, r7
 8002520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002524:	4770      	bx	lr

08002526 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002526:	b480      	push	{r7}
 8002528:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800252a:	bf00      	nop
 800252c:	46bd      	mov	sp, r7
 800252e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002532:	4770      	bx	lr

08002534 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002538:	f7fd fe8c 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}

08002540 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002540:	b480      	push	{r7}
 8002542:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002544:	4b1f      	ldr	r3, [pc, #124]	; (80025c4 <SystemInit+0x84>)
 8002546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800254a:	4a1e      	ldr	r2, [pc, #120]	; (80025c4 <SystemInit+0x84>)
 800254c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002550:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002554:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <SystemInit+0x88>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4a1b      	ldr	r2, [pc, #108]	; (80025c8 <SystemInit+0x88>)
 800255a:	f043 0301 	orr.w	r3, r3, #1
 800255e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8002560:	4b19      	ldr	r3, [pc, #100]	; (80025c8 <SystemInit+0x88>)
 8002562:	685a      	ldr	r2, [r3, #4]
 8002564:	4918      	ldr	r1, [pc, #96]	; (80025c8 <SystemInit+0x88>)
 8002566:	4b19      	ldr	r3, [pc, #100]	; (80025cc <SystemInit+0x8c>)
 8002568:	4013      	ands	r3, r2
 800256a:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800256c:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <SystemInit+0x88>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4a15      	ldr	r2, [pc, #84]	; (80025c8 <SystemInit+0x88>)
 8002572:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002576:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800257a:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800257c:	4b12      	ldr	r3, [pc, #72]	; (80025c8 <SystemInit+0x88>)
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4a11      	ldr	r2, [pc, #68]	; (80025c8 <SystemInit+0x88>)
 8002582:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002586:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002588:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <SystemInit+0x88>)
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	4a0e      	ldr	r2, [pc, #56]	; (80025c8 <SystemInit+0x88>)
 800258e:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8002592:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8002594:	4b0c      	ldr	r3, [pc, #48]	; (80025c8 <SystemInit+0x88>)
 8002596:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002598:	4a0b      	ldr	r2, [pc, #44]	; (80025c8 <SystemInit+0x88>)
 800259a:	f023 030f 	bic.w	r3, r3, #15
 800259e:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80025a0:	4b09      	ldr	r3, [pc, #36]	; (80025c8 <SystemInit+0x88>)
 80025a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025a4:	4908      	ldr	r1, [pc, #32]	; (80025c8 <SystemInit+0x88>)
 80025a6:	4b0a      	ldr	r3, [pc, #40]	; (80025d0 <SystemInit+0x90>)
 80025a8:	4013      	ands	r3, r2
 80025aa:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80025ac:	4b06      	ldr	r3, [pc, #24]	; (80025c8 <SystemInit+0x88>)
 80025ae:	2200      	movs	r2, #0
 80025b0:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025b2:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <SystemInit+0x84>)
 80025b4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80025b8:	609a      	str	r2, [r3, #8]
#endif
}
 80025ba:	bf00      	nop
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	e000ed00 	.word	0xe000ed00
 80025c8:	40021000 	.word	0x40021000
 80025cc:	f87fc00c 	.word	0xf87fc00c
 80025d0:	ff00fccc 	.word	0xff00fccc

080025d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80025d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800260c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80025d8:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80025da:	e003      	b.n	80025e4 <LoopCopyDataInit>

080025dc <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80025dc:	4b0c      	ldr	r3, [pc, #48]	; (8002610 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80025de:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80025e0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80025e2:	3104      	adds	r1, #4

080025e4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80025e4:	480b      	ldr	r0, [pc, #44]	; (8002614 <LoopForever+0xa>)
	ldr	r3, =_edata
 80025e6:	4b0c      	ldr	r3, [pc, #48]	; (8002618 <LoopForever+0xe>)
	adds	r2, r0, r1
 80025e8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80025ea:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80025ec:	d3f6      	bcc.n	80025dc <CopyDataInit>
	ldr	r2, =_sbss
 80025ee:	4a0b      	ldr	r2, [pc, #44]	; (800261c <LoopForever+0x12>)
	b	LoopFillZerobss
 80025f0:	e002      	b.n	80025f8 <LoopFillZerobss>

080025f2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80025f2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80025f4:	f842 3b04 	str.w	r3, [r2], #4

080025f8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80025f8:	4b09      	ldr	r3, [pc, #36]	; (8002620 <LoopForever+0x16>)
	cmp	r2, r3
 80025fa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80025fc:	d3f9      	bcc.n	80025f2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80025fe:	f7ff ff9f 	bl	8002540 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002602:	f000 f811 	bl	8002628 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002606:	f7ff fdc5 	bl	8002194 <main>

0800260a <LoopForever>:

LoopForever:
    b LoopForever
 800260a:	e7fe      	b.n	800260a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800260c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002610:	080026d8 	.word	0x080026d8
	ldr	r0, =_sdata
 8002614:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002618:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800261c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002620:	200000b0 	.word	0x200000b0

08002624 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002624:	e7fe      	b.n	8002624 <ADC1_2_IRQHandler>
	...

08002628 <__libc_init_array>:
 8002628:	b570      	push	{r4, r5, r6, lr}
 800262a:	4e0d      	ldr	r6, [pc, #52]	; (8002660 <__libc_init_array+0x38>)
 800262c:	4c0d      	ldr	r4, [pc, #52]	; (8002664 <__libc_init_array+0x3c>)
 800262e:	1ba4      	subs	r4, r4, r6
 8002630:	10a4      	asrs	r4, r4, #2
 8002632:	2500      	movs	r5, #0
 8002634:	42a5      	cmp	r5, r4
 8002636:	d109      	bne.n	800264c <__libc_init_array+0x24>
 8002638:	4e0b      	ldr	r6, [pc, #44]	; (8002668 <__libc_init_array+0x40>)
 800263a:	4c0c      	ldr	r4, [pc, #48]	; (800266c <__libc_init_array+0x44>)
 800263c:	f000 f820 	bl	8002680 <_init>
 8002640:	1ba4      	subs	r4, r4, r6
 8002642:	10a4      	asrs	r4, r4, #2
 8002644:	2500      	movs	r5, #0
 8002646:	42a5      	cmp	r5, r4
 8002648:	d105      	bne.n	8002656 <__libc_init_array+0x2e>
 800264a:	bd70      	pop	{r4, r5, r6, pc}
 800264c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002650:	4798      	blx	r3
 8002652:	3501      	adds	r5, #1
 8002654:	e7ee      	b.n	8002634 <__libc_init_array+0xc>
 8002656:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800265a:	4798      	blx	r3
 800265c:	3501      	adds	r5, #1
 800265e:	e7f2      	b.n	8002646 <__libc_init_array+0x1e>
 8002660:	080026d0 	.word	0x080026d0
 8002664:	080026d0 	.word	0x080026d0
 8002668:	080026d0 	.word	0x080026d0
 800266c:	080026d4 	.word	0x080026d4

08002670 <memset>:
 8002670:	4402      	add	r2, r0
 8002672:	4603      	mov	r3, r0
 8002674:	4293      	cmp	r3, r2
 8002676:	d100      	bne.n	800267a <memset+0xa>
 8002678:	4770      	bx	lr
 800267a:	f803 1b01 	strb.w	r1, [r3], #1
 800267e:	e7f9      	b.n	8002674 <memset+0x4>

08002680 <_init>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	bf00      	nop
 8002684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002686:	bc08      	pop	{r3}
 8002688:	469e      	mov	lr, r3
 800268a:	4770      	bx	lr

0800268c <_fini>:
 800268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800268e:	bf00      	nop
 8002690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002692:	bc08      	pop	{r3}
 8002694:	469e      	mov	lr, r3
 8002696:	4770      	bx	lr
