
UART_Rx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001694  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800181c  0800181c  0001181c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800185c  0800185c  0001185c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001860  08001860  00011860  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001864  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          00000104  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000110  20000110  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000eb2a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000215d  00000000  00000000  0002eb66  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003521  00000000  00000000  00030cc3  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000005f0  00000000  00000000  000341e8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008c0  00000000  00000000  000347d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003e4b  00000000  00000000  00035098  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000025d3  00000000  00000000  00038ee3  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003b4b6  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000f48  00000000  00000000  0003b534  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001804 	.word	0x08001804

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001804 	.word	0x08001804

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f88c 	bl	80002fc <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 f842 	bl	800027c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f81b 	bl	8000258 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f001 f9c6 	bl	80015b8 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800025a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800025c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000260:	041b      	lsls	r3, r3, #16
 8000262:	0c1b      	lsrs	r3, r3, #16
 8000264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000268:	0200      	lsls	r0, r0, #8
 800026a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800026e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000272:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000274:	60d3      	str	r3, [r2, #12]
 8000276:	4770      	bx	lr
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800027e:	b530      	push	{r4, r5, lr}
 8000280:	68dc      	ldr	r4, [r3, #12]
 8000282:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000286:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800028a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800028c:	2b04      	cmp	r3, #4
 800028e:	bf28      	it	cs
 8000290:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000292:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000294:	f04f 0501 	mov.w	r5, #1
 8000298:	fa05 f303 	lsl.w	r3, r5, r3
 800029c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a0:	bf8c      	ite	hi
 80002a2:	3c03      	subhi	r4, #3
 80002a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a6:	4019      	ands	r1, r3
 80002a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002aa:	fa05 f404 	lsl.w	r4, r5, r4
 80002ae:	3c01      	subs	r4, #1
 80002b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b4:	ea42 0201 	orr.w	r2, r2, r1
 80002b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	bfaf      	iteee	ge
 80002be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c2:	f000 000f 	andlt.w	r0, r0, #15
 80002c6:	4b06      	ldrlt	r3, [pc, #24]	; (80002e0 <HAL_NVIC_SetPriority+0x64>)
 80002c8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ca:	bfa5      	ittet	ge
 80002cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002d8:	bd30      	pop	{r4, r5, pc}
 80002da:	bf00      	nop
 80002dc:	e000ed00 	.word	0xe000ed00
 80002e0:	e000ed14 	.word	0xe000ed14

080002e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002e4:	0942      	lsrs	r2, r0, #5
 80002e6:	2301      	movs	r3, #1
 80002e8:	f000 001f 	and.w	r0, r0, #31
 80002ec:	fa03 f000 	lsl.w	r0, r3, r0
 80002f0:	4b01      	ldr	r3, [pc, #4]	; (80002f8 <HAL_NVIC_EnableIRQ+0x14>)
 80002f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002f6:	4770      	bx	lr
 80002f8:	e000e100 	.word	0xe000e100

080002fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002fc:	3801      	subs	r0, #1
 80002fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000302:	d20a      	bcs.n	800031a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	4a07      	ldr	r2, [pc, #28]	; (8000324 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000308:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030a:	21f0      	movs	r1, #240	; 0xf0
 800030c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000310:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000312:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000314:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000e010 	.word	0xe000e010
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000328:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 800032c:	2a02      	cmp	r2, #2
{  
 800032e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000330:	d003      	beq.n	800033a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000332:	2204      	movs	r2, #4
 8000334:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000336:	2001      	movs	r0, #1
 8000338:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800033a:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800033c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800033e:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000340:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000342:	f021 010e 	bic.w	r1, r1, #14
 8000346:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000348:	6811      	ldr	r1, [r2, #0]
 800034a:	f021 0101 	bic.w	r1, r1, #1
 800034e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000350:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000352:	2101      	movs	r1, #1
 8000354:	fa01 f202 	lsl.w	r2, r1, r2
 8000358:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800035a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800035c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000360:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000364:	b113      	cbz	r3, 800036c <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000366:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000368:	4620      	mov	r0, r4
 800036a:	bd10      	pop	{r4, pc}
 800036c:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800036e:	bd10      	pop	{r4, pc}

08000370 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000374:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000376:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000378:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80004e0 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800037c:	4a56      	ldr	r2, [pc, #344]	; (80004d8 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800037e:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000380:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000384:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000386:	9c01      	ldr	r4, [sp, #4]
 8000388:	40dc      	lsrs	r4, r3
 800038a:	d102      	bne.n	8000392 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 800038c:	b005      	add	sp, #20
 800038e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000392:	2401      	movs	r4, #1
 8000394:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000398:	9c01      	ldr	r4, [sp, #4]
 800039a:	ea14 050a 	ands.w	r5, r4, sl
 800039e:	f000 8093 	beq.w	80004c8 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80003a2:	684c      	ldr	r4, [r1, #4]
 80003a4:	f024 0b10 	bic.w	fp, r4, #16
 80003a8:	f1bb 0f02 	cmp.w	fp, #2
 80003ac:	d111      	bne.n	80003d2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80003ae:	08df      	lsrs	r7, r3, #3
 80003b0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003b4:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80003b8:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80003ba:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80003be:	fa09 fc0e 	lsl.w	ip, r9, lr
 80003c2:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80003c6:	690e      	ldr	r6, [r1, #16]
 80003c8:	fa06 f60e 	lsl.w	r6, r6, lr
 80003cc:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 80003d0:	623e      	str	r6, [r7, #32]
 80003d2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003d6:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80003d8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003da:	fa07 f70c 	lsl.w	r7, r7, ip
 80003de:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003e0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003e4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003e6:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ea:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ee:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003f2:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80003f6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003f8:	d811      	bhi.n	800041e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80003fa:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003fc:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000400:	68ce      	ldr	r6, [r1, #12]
 8000402:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000406:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 800040a:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 800040c:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800040e:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000412:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000416:	409e      	lsls	r6, r3
 8000418:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 800041c:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800041e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000420:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000422:	688e      	ldr	r6, [r1, #8]
 8000424:	fa06 f60c 	lsl.w	r6, r6, ip
 8000428:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800042a:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 800042c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800042e:	d54b      	bpl.n	80004c8 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000430:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000434:	f046 0601 	orr.w	r6, r6, #1
 8000438:	f8c8 6018 	str.w	r6, [r8, #24]
 800043c:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000440:	f023 0703 	bic.w	r7, r3, #3
 8000444:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000448:	f006 0601 	and.w	r6, r6, #1
 800044c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000450:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000452:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000456:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000458:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800045a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800045e:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000462:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000466:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800046a:	d02f      	beq.n	80004cc <HAL_GPIO_Init+0x15c>
 800046c:	4e1b      	ldr	r6, [pc, #108]	; (80004dc <HAL_GPIO_Init+0x16c>)
 800046e:	42b0      	cmp	r0, r6
 8000470:	d02e      	beq.n	80004d0 <HAL_GPIO_Init+0x160>
 8000472:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000476:	42b0      	cmp	r0, r6
 8000478:	d02c      	beq.n	80004d4 <HAL_GPIO_Init+0x164>
 800047a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800047e:	42b0      	cmp	r0, r6
 8000480:	bf14      	ite	ne
 8000482:	2605      	movne	r6, #5
 8000484:	2603      	moveq	r6, #3
 8000486:	fa06 f60e 	lsl.w	r6, r6, lr
 800048a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800048e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000490:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000492:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000494:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000498:	bf0c      	ite	eq
 800049a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800049c:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 800049e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 80004a0:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80004a2:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80004a6:	bf0c      	ite	eq
 80004a8:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80004aa:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 80004ac:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80004ae:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80004b0:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80004b4:	bf0c      	ite	eq
 80004b6:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80004b8:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 80004ba:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80004bc:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80004be:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004c0:	bf54      	ite	pl
 80004c2:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80004c4:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 80004c6:	60d6      	str	r6, [r2, #12]
    position++;
 80004c8:	3301      	adds	r3, #1
 80004ca:	e75c      	b.n	8000386 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004cc:	2600      	movs	r6, #0
 80004ce:	e7da      	b.n	8000486 <HAL_GPIO_Init+0x116>
 80004d0:	2601      	movs	r6, #1
 80004d2:	e7d8      	b.n	8000486 <HAL_GPIO_Init+0x116>
 80004d4:	2602      	movs	r6, #2
 80004d6:	e7d6      	b.n	8000486 <HAL_GPIO_Init+0x116>
 80004d8:	40010400 	.word	0x40010400
 80004dc:	48000400 	.word	0x48000400
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004e4:	b10a      	cbz	r2, 80004ea <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004e6:	6181      	str	r1, [r0, #24]
 80004e8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004ea:	6281      	str	r1, [r0, #40]	; 0x28
 80004ec:	4770      	bx	lr

080004ee <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004ee:	6943      	ldr	r3, [r0, #20]
 80004f0:	4059      	eors	r1, r3
 80004f2:	6141      	str	r1, [r0, #20]
 80004f4:	4770      	bx	lr
	...

080004f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80004fc:	4605      	mov	r5, r0
 80004fe:	b918      	cbnz	r0, 8000508 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000500:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000502:	b002      	add	sp, #8
 8000504:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000508:	6803      	ldr	r3, [r0, #0]
 800050a:	07da      	lsls	r2, r3, #31
 800050c:	d411      	bmi.n	8000532 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800050e:	682b      	ldr	r3, [r5, #0]
 8000510:	079b      	lsls	r3, r3, #30
 8000512:	f100 8085 	bmi.w	8000620 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000516:	682b      	ldr	r3, [r5, #0]
 8000518:	071c      	lsls	r4, r3, #28
 800051a:	f100 80f6 	bmi.w	800070a <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800051e:	682b      	ldr	r3, [r5, #0]
 8000520:	0758      	lsls	r0, r3, #29
 8000522:	f100 813f 	bmi.w	80007a4 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000526:	69ea      	ldr	r2, [r5, #28]
 8000528:	2a00      	cmp	r2, #0
 800052a:	f040 81d6 	bne.w	80008da <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 800052e:	2000      	movs	r0, #0
 8000530:	e7e7      	b.n	8000502 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000532:	4cba      	ldr	r4, [pc, #744]	; (800081c <HAL_RCC_OscConfig+0x324>)
 8000534:	6863      	ldr	r3, [r4, #4]
 8000536:	f003 030c 	and.w	r3, r3, #12
 800053a:	2b04      	cmp	r3, #4
 800053c:	d007      	beq.n	800054e <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800053e:	6863      	ldr	r3, [r4, #4]
 8000540:	f003 030c 	and.w	r3, r3, #12
 8000544:	2b08      	cmp	r3, #8
 8000546:	d116      	bne.n	8000576 <HAL_RCC_OscConfig+0x7e>
 8000548:	6863      	ldr	r3, [r4, #4]
 800054a:	03df      	lsls	r7, r3, #15
 800054c:	d513      	bpl.n	8000576 <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800054e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000552:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000556:	6821      	ldr	r1, [r4, #0]
 8000558:	fa93 f3a3 	rbit	r3, r3
 800055c:	fab3 f383 	clz	r3, r3
 8000560:	f003 031f 	and.w	r3, r3, #31
 8000564:	2201      	movs	r2, #1
 8000566:	fa02 f303 	lsl.w	r3, r2, r3
 800056a:	420b      	tst	r3, r1
 800056c:	d0cf      	beq.n	800050e <HAL_RCC_OscConfig+0x16>
 800056e:	686b      	ldr	r3, [r5, #4]
 8000570:	2b00      	cmp	r3, #0
 8000572:	d1cc      	bne.n	800050e <HAL_RCC_OscConfig+0x16>
 8000574:	e7c4      	b.n	8000500 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000576:	686a      	ldr	r2, [r5, #4]
 8000578:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800057c:	d125      	bne.n	80005ca <HAL_RCC_OscConfig+0xd2>
 800057e:	6823      	ldr	r3, [r4, #0]
 8000580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000584:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000586:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000588:	68a9      	ldr	r1, [r5, #8]
 800058a:	f023 030f 	bic.w	r3, r3, #15
 800058e:	430b      	orrs	r3, r1
 8000590:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000592:	b352      	cbz	r2, 80005ea <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000594:	f7ff fe5a 	bl	800024c <HAL_GetTick>
 8000598:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800059c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800059e:	2701      	movs	r7, #1
 80005a0:	fa96 f3a6 	rbit	r3, r6
 80005a4:	6822      	ldr	r2, [r4, #0]
 80005a6:	fa96 f3a6 	rbit	r3, r6
 80005aa:	fab3 f383 	clz	r3, r3
 80005ae:	f003 031f 	and.w	r3, r3, #31
 80005b2:	fa07 f303 	lsl.w	r3, r7, r3
 80005b6:	4213      	tst	r3, r2
 80005b8:	d1a9      	bne.n	800050e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ba:	f7ff fe47 	bl	800024c <HAL_GetTick>
 80005be:	eba0 0008 	sub.w	r0, r0, r8
 80005c2:	2864      	cmp	r0, #100	; 0x64
 80005c4:	d9ec      	bls.n	80005a0 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 80005c6:	2003      	movs	r0, #3
 80005c8:	e79b      	b.n	8000502 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005ca:	6823      	ldr	r3, [r4, #0]
 80005cc:	b932      	cbnz	r2, 80005dc <HAL_RCC_OscConfig+0xe4>
 80005ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005d2:	6023      	str	r3, [r4, #0]
 80005d4:	6823      	ldr	r3, [r4, #0]
 80005d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005da:	e7d3      	b.n	8000584 <HAL_RCC_OscConfig+0x8c>
 80005dc:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80005e0:	d1f5      	bne.n	80005ce <HAL_RCC_OscConfig+0xd6>
 80005e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005e6:	6023      	str	r3, [r4, #0]
 80005e8:	e7c9      	b.n	800057e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80005ea:	f7ff fe2f 	bl	800024c <HAL_GetTick>
 80005ee:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005f2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005f4:	2701      	movs	r7, #1
 80005f6:	fa96 f3a6 	rbit	r3, r6
 80005fa:	6822      	ldr	r2, [r4, #0]
 80005fc:	fa96 f3a6 	rbit	r3, r6
 8000600:	fab3 f383 	clz	r3, r3
 8000604:	f003 031f 	and.w	r3, r3, #31
 8000608:	fa07 f303 	lsl.w	r3, r7, r3
 800060c:	4213      	tst	r3, r2
 800060e:	f43f af7e 	beq.w	800050e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000612:	f7ff fe1b 	bl	800024c <HAL_GetTick>
 8000616:	eba0 0008 	sub.w	r0, r0, r8
 800061a:	2864      	cmp	r0, #100	; 0x64
 800061c:	d9eb      	bls.n	80005f6 <HAL_RCC_OscConfig+0xfe>
 800061e:	e7d2      	b.n	80005c6 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000620:	4c7e      	ldr	r4, [pc, #504]	; (800081c <HAL_RCC_OscConfig+0x324>)
 8000622:	6863      	ldr	r3, [r4, #4]
 8000624:	f013 0f0c 	tst.w	r3, #12
 8000628:	d007      	beq.n	800063a <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800062a:	6863      	ldr	r3, [r4, #4]
 800062c:	f003 030c 	and.w	r3, r3, #12
 8000630:	2b08      	cmp	r3, #8
 8000632:	d122      	bne.n	800067a <HAL_RCC_OscConfig+0x182>
 8000634:	6863      	ldr	r3, [r4, #4]
 8000636:	03de      	lsls	r6, r3, #15
 8000638:	d41f      	bmi.n	800067a <HAL_RCC_OscConfig+0x182>
 800063a:	2302      	movs	r3, #2
 800063c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000640:	6821      	ldr	r1, [r4, #0]
 8000642:	fa93 f3a3 	rbit	r3, r3
 8000646:	fab3 f383 	clz	r3, r3
 800064a:	f003 031f 	and.w	r3, r3, #31
 800064e:	2201      	movs	r2, #1
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	420b      	tst	r3, r1
 8000656:	d003      	beq.n	8000660 <HAL_RCC_OscConfig+0x168>
 8000658:	692b      	ldr	r3, [r5, #16]
 800065a:	4293      	cmp	r3, r2
 800065c:	f47f af50 	bne.w	8000500 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000660:	6821      	ldr	r1, [r4, #0]
 8000662:	23f8      	movs	r3, #248	; 0xf8
 8000664:	fa93 f3a3 	rbit	r3, r3
 8000668:	fab3 f283 	clz	r2, r3
 800066c:	696b      	ldr	r3, [r5, #20]
 800066e:	4093      	lsls	r3, r2
 8000670:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000674:	4313      	orrs	r3, r2
 8000676:	6023      	str	r3, [r4, #0]
 8000678:	e74d      	b.n	8000516 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800067a:	692a      	ldr	r2, [r5, #16]
 800067c:	2601      	movs	r6, #1
 800067e:	b30a      	cbz	r2, 80006c4 <HAL_RCC_OscConfig+0x1cc>
 8000680:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000684:	fab3 f383 	clz	r3, r3
 8000688:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800068c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000690:	009b      	lsls	r3, r3, #2
 8000692:	2702      	movs	r7, #2
 8000694:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000696:	f7ff fdd9 	bl	800024c <HAL_GetTick>
 800069a:	4680      	mov	r8, r0
 800069c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80006a0:	6822      	ldr	r2, [r4, #0]
 80006a2:	fa97 f3a7 	rbit	r3, r7
 80006a6:	fab3 f383 	clz	r3, r3
 80006aa:	f003 031f 	and.w	r3, r3, #31
 80006ae:	fa06 f303 	lsl.w	r3, r6, r3
 80006b2:	4213      	tst	r3, r2
 80006b4:	d1d4      	bne.n	8000660 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006b6:	f7ff fdc9 	bl	800024c <HAL_GetTick>
 80006ba:	eba0 0008 	sub.w	r0, r0, r8
 80006be:	2802      	cmp	r0, #2
 80006c0:	d9ec      	bls.n	800069c <HAL_RCC_OscConfig+0x1a4>
 80006c2:	e780      	b.n	80005c6 <HAL_RCC_OscConfig+0xce>
 80006c4:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80006c8:	fab3 f383 	clz	r3, r3
 80006cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006d4:	009b      	lsls	r3, r3, #2
 80006d6:	2702      	movs	r7, #2
 80006d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006da:	f7ff fdb7 	bl	800024c <HAL_GetTick>
 80006de:	4680      	mov	r8, r0
 80006e0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006e4:	6822      	ldr	r2, [r4, #0]
 80006e6:	fa97 f3a7 	rbit	r3, r7
 80006ea:	fab3 f383 	clz	r3, r3
 80006ee:	f003 031f 	and.w	r3, r3, #31
 80006f2:	fa06 f303 	lsl.w	r3, r6, r3
 80006f6:	4213      	tst	r3, r2
 80006f8:	f43f af0d 	beq.w	8000516 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006fc:	f7ff fda6 	bl	800024c <HAL_GetTick>
 8000700:	eba0 0008 	sub.w	r0, r0, r8
 8000704:	2802      	cmp	r0, #2
 8000706:	d9eb      	bls.n	80006e0 <HAL_RCC_OscConfig+0x1e8>
 8000708:	e75d      	b.n	80005c6 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800070a:	69aa      	ldr	r2, [r5, #24]
 800070c:	4e43      	ldr	r6, [pc, #268]	; (800081c <HAL_RCC_OscConfig+0x324>)
 800070e:	4944      	ldr	r1, [pc, #272]	; (8000820 <HAL_RCC_OscConfig+0x328>)
 8000710:	2401      	movs	r4, #1
 8000712:	b31a      	cbz	r2, 800075c <HAL_RCC_OscConfig+0x264>
 8000714:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000718:	fab3 f383 	clz	r3, r3
 800071c:	440b      	add	r3, r1
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	2702      	movs	r7, #2
 8000722:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000724:	f7ff fd92 	bl	800024c <HAL_GetTick>
 8000728:	4680      	mov	r8, r0
 800072a:	fa97 f3a7 	rbit	r3, r7
 800072e:	fa97 f3a7 	rbit	r3, r7
 8000732:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000736:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000738:	fa97 f3a7 	rbit	r3, r7
 800073c:	fab3 f383 	clz	r3, r3
 8000740:	f003 031f 	and.w	r3, r3, #31
 8000744:	fa04 f303 	lsl.w	r3, r4, r3
 8000748:	4213      	tst	r3, r2
 800074a:	f47f aee8 	bne.w	800051e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800074e:	f7ff fd7d 	bl	800024c <HAL_GetTick>
 8000752:	eba0 0008 	sub.w	r0, r0, r8
 8000756:	2802      	cmp	r0, #2
 8000758:	d9e7      	bls.n	800072a <HAL_RCC_OscConfig+0x232>
 800075a:	e734      	b.n	80005c6 <HAL_RCC_OscConfig+0xce>
 800075c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000760:	fab3 f383 	clz	r3, r3
 8000764:	440b      	add	r3, r1
 8000766:	009b      	lsls	r3, r3, #2
 8000768:	2702      	movs	r7, #2
 800076a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800076c:	f7ff fd6e 	bl	800024c <HAL_GetTick>
 8000770:	4680      	mov	r8, r0
 8000772:	fa97 f3a7 	rbit	r3, r7
 8000776:	fa97 f3a7 	rbit	r3, r7
 800077a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800077e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000780:	fa97 f3a7 	rbit	r3, r7
 8000784:	fab3 f383 	clz	r3, r3
 8000788:	f003 031f 	and.w	r3, r3, #31
 800078c:	fa04 f303 	lsl.w	r3, r4, r3
 8000790:	4213      	tst	r3, r2
 8000792:	f43f aec4 	beq.w	800051e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000796:	f7ff fd59 	bl	800024c <HAL_GetTick>
 800079a:	eba0 0008 	sub.w	r0, r0, r8
 800079e:	2802      	cmp	r0, #2
 80007a0:	d9e7      	bls.n	8000772 <HAL_RCC_OscConfig+0x27a>
 80007a2:	e710      	b.n	80005c6 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80007a4:	4c1d      	ldr	r4, [pc, #116]	; (800081c <HAL_RCC_OscConfig+0x324>)
 80007a6:	69e3      	ldr	r3, [r4, #28]
 80007a8:	00d9      	lsls	r1, r3, #3
 80007aa:	d434      	bmi.n	8000816 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80007ac:	69e3      	ldr	r3, [r4, #28]
 80007ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80007b2:	61e3      	str	r3, [r4, #28]
 80007b4:	69e3      	ldr	r3, [r4, #28]
 80007b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007ba:	9301      	str	r3, [sp, #4]
 80007bc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80007be:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007c0:	4f18      	ldr	r7, [pc, #96]	; (8000824 <HAL_RCC_OscConfig+0x32c>)
 80007c2:	683b      	ldr	r3, [r7, #0]
 80007c4:	05da      	lsls	r2, r3, #23
 80007c6:	d52f      	bpl.n	8000828 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007c8:	68eb      	ldr	r3, [r5, #12]
 80007ca:	2b01      	cmp	r3, #1
 80007cc:	d13d      	bne.n	800084a <HAL_RCC_OscConfig+0x352>
 80007ce:	6a23      	ldr	r3, [r4, #32]
 80007d0:	f043 0301 	orr.w	r3, r3, #1
 80007d4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007d6:	f7ff fd39 	bl	800024c <HAL_GetTick>
 80007da:	2702      	movs	r7, #2
 80007dc:	4682      	mov	sl, r0
 80007de:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007e0:	f04f 0801 	mov.w	r8, #1
 80007e4:	fa97 f3a7 	rbit	r3, r7
 80007e8:	fa97 f3a7 	rbit	r3, r7
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d06c      	beq.n	80008ca <HAL_RCC_OscConfig+0x3d2>
 80007f0:	6a22      	ldr	r2, [r4, #32]
 80007f2:	fa99 f3a9 	rbit	r3, r9
 80007f6:	fab3 f383 	clz	r3, r3
 80007fa:	f003 031f 	and.w	r3, r3, #31
 80007fe:	fa08 f303 	lsl.w	r3, r8, r3
 8000802:	4213      	tst	r3, r2
 8000804:	d058      	beq.n	80008b8 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8000806:	2e00      	cmp	r6, #0
 8000808:	f43f ae8d 	beq.w	8000526 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800080c:	69e3      	ldr	r3, [r4, #28]
 800080e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000812:	61e3      	str	r3, [r4, #28]
 8000814:	e687      	b.n	8000526 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8000816:	2600      	movs	r6, #0
 8000818:	e7d2      	b.n	80007c0 <HAL_RCC_OscConfig+0x2c8>
 800081a:	bf00      	nop
 800081c:	40021000 	.word	0x40021000
 8000820:	10908120 	.word	0x10908120
 8000824:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000828:	683b      	ldr	r3, [r7, #0]
 800082a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800082e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000830:	f7ff fd0c 	bl	800024c <HAL_GetTick>
 8000834:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000836:	683b      	ldr	r3, [r7, #0]
 8000838:	05db      	lsls	r3, r3, #23
 800083a:	d4c5      	bmi.n	80007c8 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800083c:	f7ff fd06 	bl	800024c <HAL_GetTick>
 8000840:	eba0 0008 	sub.w	r0, r0, r8
 8000844:	2864      	cmp	r0, #100	; 0x64
 8000846:	d9f6      	bls.n	8000836 <HAL_RCC_OscConfig+0x33e>
 8000848:	e6bd      	b.n	80005c6 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800084a:	bb3b      	cbnz	r3, 800089c <HAL_RCC_OscConfig+0x3a4>
 800084c:	6a23      	ldr	r3, [r4, #32]
 800084e:	f023 0301 	bic.w	r3, r3, #1
 8000852:	6223      	str	r3, [r4, #32]
 8000854:	6a23      	ldr	r3, [r4, #32]
 8000856:	f023 0304 	bic.w	r3, r3, #4
 800085a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800085c:	f7ff fcf6 	bl	800024c <HAL_GetTick>
 8000860:	2702      	movs	r7, #2
 8000862:	4682      	mov	sl, r0
 8000864:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000866:	f04f 0801 	mov.w	r8, #1
 800086a:	fa97 f3a7 	rbit	r3, r7
 800086e:	fa97 f3a7 	rbit	r3, r7
 8000872:	b373      	cbz	r3, 80008d2 <HAL_RCC_OscConfig+0x3da>
 8000874:	6a22      	ldr	r2, [r4, #32]
 8000876:	fa99 f3a9 	rbit	r3, r9
 800087a:	fab3 f383 	clz	r3, r3
 800087e:	f003 031f 	and.w	r3, r3, #31
 8000882:	fa08 f303 	lsl.w	r3, r8, r3
 8000886:	4213      	tst	r3, r2
 8000888:	d0bd      	beq.n	8000806 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800088a:	f7ff fcdf 	bl	800024c <HAL_GetTick>
 800088e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000892:	eba0 000a 	sub.w	r0, r0, sl
 8000896:	4298      	cmp	r0, r3
 8000898:	d9e7      	bls.n	800086a <HAL_RCC_OscConfig+0x372>
 800089a:	e694      	b.n	80005c6 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800089c:	2b05      	cmp	r3, #5
 800089e:	6a23      	ldr	r3, [r4, #32]
 80008a0:	d103      	bne.n	80008aa <HAL_RCC_OscConfig+0x3b2>
 80008a2:	f043 0304 	orr.w	r3, r3, #4
 80008a6:	6223      	str	r3, [r4, #32]
 80008a8:	e791      	b.n	80007ce <HAL_RCC_OscConfig+0x2d6>
 80008aa:	f023 0301 	bic.w	r3, r3, #1
 80008ae:	6223      	str	r3, [r4, #32]
 80008b0:	6a23      	ldr	r3, [r4, #32]
 80008b2:	f023 0304 	bic.w	r3, r3, #4
 80008b6:	e78d      	b.n	80007d4 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80008b8:	f7ff fcc8 	bl	800024c <HAL_GetTick>
 80008bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80008c0:	eba0 000a 	sub.w	r0, r0, sl
 80008c4:	4298      	cmp	r0, r3
 80008c6:	d98d      	bls.n	80007e4 <HAL_RCC_OscConfig+0x2ec>
 80008c8:	e67d      	b.n	80005c6 <HAL_RCC_OscConfig+0xce>
 80008ca:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008d0:	e78f      	b.n	80007f2 <HAL_RCC_OscConfig+0x2fa>
 80008d2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008d8:	e7cd      	b.n	8000876 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008da:	4c41      	ldr	r4, [pc, #260]	; (80009e0 <HAL_RCC_OscConfig+0x4e8>)
 80008dc:	6863      	ldr	r3, [r4, #4]
 80008de:	f003 030c 	and.w	r3, r3, #12
 80008e2:	2b08      	cmp	r3, #8
 80008e4:	f43f ae0c 	beq.w	8000500 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008e8:	2a02      	cmp	r2, #2
 80008ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008ee:	d152      	bne.n	8000996 <HAL_RCC_OscConfig+0x49e>
 80008f0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008f4:	fab3 f383 	clz	r3, r3
 80008f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000900:	009b      	lsls	r3, r3, #2
 8000902:	2200      	movs	r2, #0
 8000904:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000906:	f7ff fca1 	bl	800024c <HAL_GetTick>
 800090a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 800090e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000910:	2601      	movs	r6, #1
 8000912:	fa97 f3a7 	rbit	r3, r7
 8000916:	6822      	ldr	r2, [r4, #0]
 8000918:	fa97 f3a7 	rbit	r3, r7
 800091c:	fab3 f383 	clz	r3, r3
 8000920:	f003 031f 	and.w	r3, r3, #31
 8000924:	fa06 f303 	lsl.w	r3, r6, r3
 8000928:	4213      	tst	r3, r2
 800092a:	d12d      	bne.n	8000988 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800092c:	6862      	ldr	r2, [r4, #4]
 800092e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000930:	6a29      	ldr	r1, [r5, #32]
 8000932:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000936:	430b      	orrs	r3, r1
 8000938:	4313      	orrs	r3, r2
 800093a:	6063      	str	r3, [r4, #4]
 800093c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000940:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000944:	fab3 f383 	clz	r3, r3
 8000948:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800094c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000950:	009b      	lsls	r3, r3, #2
 8000952:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000956:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000958:	f7ff fc78 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800095c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800095e:	4607      	mov	r7, r0
 8000960:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000964:	6822      	ldr	r2, [r4, #0]
 8000966:	fa95 f3a5 	rbit	r3, r5
 800096a:	fab3 f383 	clz	r3, r3
 800096e:	f003 031f 	and.w	r3, r3, #31
 8000972:	fa06 f303 	lsl.w	r3, r6, r3
 8000976:	4213      	tst	r3, r2
 8000978:	f47f add9 	bne.w	800052e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800097c:	f7ff fc66 	bl	800024c <HAL_GetTick>
 8000980:	1bc0      	subs	r0, r0, r7
 8000982:	2802      	cmp	r0, #2
 8000984:	d9ec      	bls.n	8000960 <HAL_RCC_OscConfig+0x468>
 8000986:	e61e      	b.n	80005c6 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000988:	f7ff fc60 	bl	800024c <HAL_GetTick>
 800098c:	eba0 0008 	sub.w	r0, r0, r8
 8000990:	2802      	cmp	r0, #2
 8000992:	d9be      	bls.n	8000912 <HAL_RCC_OscConfig+0x41a>
 8000994:	e617      	b.n	80005c6 <HAL_RCC_OscConfig+0xce>
 8000996:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800099a:	fab3 f383 	clz	r3, r3
 800099e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009a2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009a6:	009b      	lsls	r3, r3, #2
 80009a8:	2200      	movs	r2, #0
 80009aa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009ac:	f7ff fc4e 	bl	800024c <HAL_GetTick>
 80009b0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009b4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009b6:	2601      	movs	r6, #1
 80009b8:	fa95 f3a5 	rbit	r3, r5
 80009bc:	6822      	ldr	r2, [r4, #0]
 80009be:	fa95 f3a5 	rbit	r3, r5
 80009c2:	fab3 f383 	clz	r3, r3
 80009c6:	f003 031f 	and.w	r3, r3, #31
 80009ca:	fa06 f303 	lsl.w	r3, r6, r3
 80009ce:	4213      	tst	r3, r2
 80009d0:	f43f adad 	beq.w	800052e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009d4:	f7ff fc3a 	bl	800024c <HAL_GetTick>
 80009d8:	1bc0      	subs	r0, r0, r7
 80009da:	2802      	cmp	r0, #2
 80009dc:	d9ec      	bls.n	80009b8 <HAL_RCC_OscConfig+0x4c0>
 80009de:	e5f2      	b.n	80005c6 <HAL_RCC_OscConfig+0xce>
 80009e0:	40021000 	.word	0x40021000

080009e4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009e4:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80009e6:	4c13      	ldr	r4, [pc, #76]	; (8000a34 <HAL_RCC_GetSysClockFreq+0x50>)
 80009e8:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009ea:	f001 030c 	and.w	r3, r1, #12
 80009ee:	2b08      	cmp	r3, #8
 80009f0:	d11e      	bne.n	8000a30 <HAL_RCC_GetSysClockFreq+0x4c>
 80009f2:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80009f6:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009fa:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80009fe:	fab3 f383 	clz	r3, r3
 8000a02:	fa22 f303 	lsr.w	r3, r2, r3
 8000a06:	4a0c      	ldr	r2, [pc, #48]	; (8000a38 <HAL_RCC_GetSysClockFreq+0x54>)
 8000a08:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000a0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000a0c:	220f      	movs	r2, #15
 8000a0e:	fa92 f2a2 	rbit	r2, r2
 8000a12:	fab2 f282 	clz	r2, r2
 8000a16:	f003 030f 	and.w	r3, r3, #15
 8000a1a:	40d3      	lsrs	r3, r2
 8000a1c:	4a07      	ldr	r2, [pc, #28]	; (8000a3c <HAL_RCC_GetSysClockFreq+0x58>)
 8000a1e:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000a20:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a22:	bf4a      	itet	mi
 8000a24:	4b06      	ldrmi	r3, [pc, #24]	; (8000a40 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000a26:	4b07      	ldrpl	r3, [pc, #28]	; (8000a44 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a28:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000a2c:	4358      	muls	r0, r3
 8000a2e:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a32:	bd10      	pop	{r4, pc}
 8000a34:	40021000 	.word	0x40021000
 8000a38:	0800181c 	.word	0x0800181c
 8000a3c:	0800182c 	.word	0x0800182c
 8000a40:	007a1200 	.word	0x007a1200
 8000a44:	003d0900 	.word	0x003d0900

08000a48 <HAL_RCC_ClockConfig>:
{
 8000a48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a4c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000a4e:	4604      	mov	r4, r0
 8000a50:	b910      	cbnz	r0, 8000a58 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000a52:	2001      	movs	r0, #1
 8000a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a58:	4a4c      	ldr	r2, [pc, #304]	; (8000b8c <HAL_RCC_ClockConfig+0x144>)
 8000a5a:	6813      	ldr	r3, [r2, #0]
 8000a5c:	f003 0307 	and.w	r3, r3, #7
 8000a60:	428b      	cmp	r3, r1
 8000a62:	d32e      	bcc.n	8000ac2 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a64:	6822      	ldr	r2, [r4, #0]
 8000a66:	0791      	lsls	r1, r2, #30
 8000a68:	d436      	bmi.n	8000ad8 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a6a:	07d2      	lsls	r2, r2, #31
 8000a6c:	d43c      	bmi.n	8000ae8 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000a6e:	4a47      	ldr	r2, [pc, #284]	; (8000b8c <HAL_RCC_ClockConfig+0x144>)
 8000a70:	6813      	ldr	r3, [r2, #0]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	429d      	cmp	r5, r3
 8000a78:	d375      	bcc.n	8000b66 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a7a:	6822      	ldr	r2, [r4, #0]
 8000a7c:	4d44      	ldr	r5, [pc, #272]	; (8000b90 <HAL_RCC_ClockConfig+0x148>)
 8000a7e:	f012 0f04 	tst.w	r2, #4
 8000a82:	d17c      	bne.n	8000b7e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a84:	0713      	lsls	r3, r2, #28
 8000a86:	d506      	bpl.n	8000a96 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a88:	686b      	ldr	r3, [r5, #4]
 8000a8a:	6922      	ldr	r2, [r4, #16]
 8000a8c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a94:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a96:	f7ff ffa5 	bl	80009e4 <HAL_RCC_GetSysClockFreq>
 8000a9a:	686b      	ldr	r3, [r5, #4]
 8000a9c:	22f0      	movs	r2, #240	; 0xf0
 8000a9e:	fa92 f2a2 	rbit	r2, r2
 8000aa2:	fab2 f282 	clz	r2, r2
 8000aa6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000aaa:	40d3      	lsrs	r3, r2
 8000aac:	4a39      	ldr	r2, [pc, #228]	; (8000b94 <HAL_RCC_ClockConfig+0x14c>)
 8000aae:	5cd3      	ldrb	r3, [r2, r3]
 8000ab0:	40d8      	lsrs	r0, r3
 8000ab2:	4b39      	ldr	r3, [pc, #228]	; (8000b98 <HAL_RCC_ClockConfig+0x150>)
 8000ab4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000ab6:	2000      	movs	r0, #0
 8000ab8:	f7ff fb86 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000abc:	2000      	movs	r0, #0
 8000abe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000ac2:	6813      	ldr	r3, [r2, #0]
 8000ac4:	f023 0307 	bic.w	r3, r3, #7
 8000ac8:	430b      	orrs	r3, r1
 8000aca:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000acc:	6813      	ldr	r3, [r2, #0]
 8000ace:	f003 0307 	and.w	r3, r3, #7
 8000ad2:	4299      	cmp	r1, r3
 8000ad4:	d1bd      	bne.n	8000a52 <HAL_RCC_ClockConfig+0xa>
 8000ad6:	e7c5      	b.n	8000a64 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ad8:	492d      	ldr	r1, [pc, #180]	; (8000b90 <HAL_RCC_ClockConfig+0x148>)
 8000ada:	68a0      	ldr	r0, [r4, #8]
 8000adc:	684b      	ldr	r3, [r1, #4]
 8000ade:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000ae2:	4303      	orrs	r3, r0
 8000ae4:	604b      	str	r3, [r1, #4]
 8000ae6:	e7c0      	b.n	8000a6a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ae8:	6862      	ldr	r2, [r4, #4]
 8000aea:	4e29      	ldr	r6, [pc, #164]	; (8000b90 <HAL_RCC_ClockConfig+0x148>)
 8000aec:	2a01      	cmp	r2, #1
 8000aee:	d127      	bne.n	8000b40 <HAL_RCC_ClockConfig+0xf8>
 8000af0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000af4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000af8:	6831      	ldr	r1, [r6, #0]
 8000afa:	fa93 f3a3 	rbit	r3, r3
 8000afe:	fab3 f383 	clz	r3, r3
 8000b02:	f003 031f 	and.w	r3, r3, #31
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b0c:	d0a1      	beq.n	8000a52 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000b0e:	6873      	ldr	r3, [r6, #4]
 8000b10:	f023 0303 	bic.w	r3, r3, #3
 8000b14:	431a      	orrs	r2, r3
 8000b16:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000b18:	f7ff fb98 	bl	800024c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b1c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000b20:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000b22:	6873      	ldr	r3, [r6, #4]
 8000b24:	6862      	ldr	r2, [r4, #4]
 8000b26:	f003 030c 	and.w	r3, r3, #12
 8000b2a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000b2e:	d09e      	beq.n	8000a6e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b30:	f7ff fb8c 	bl	800024c <HAL_GetTick>
 8000b34:	1bc0      	subs	r0, r0, r7
 8000b36:	4540      	cmp	r0, r8
 8000b38:	d9f3      	bls.n	8000b22 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000b3a:	2003      	movs	r0, #3
}
 8000b3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b40:	2a02      	cmp	r2, #2
 8000b42:	bf0c      	ite	eq
 8000b44:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b48:	2302      	movne	r3, #2
 8000b4a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b4e:	6830      	ldr	r0, [r6, #0]
 8000b50:	fa93 f3a3 	rbit	r3, r3
 8000b54:	fab3 f383 	clz	r3, r3
 8000b58:	f003 031f 	and.w	r3, r3, #31
 8000b5c:	2101      	movs	r1, #1
 8000b5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b62:	4203      	tst	r3, r0
 8000b64:	e7d2      	b.n	8000b0c <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b66:	6813      	ldr	r3, [r2, #0]
 8000b68:	f023 0307 	bic.w	r3, r3, #7
 8000b6c:	432b      	orrs	r3, r5
 8000b6e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b70:	6813      	ldr	r3, [r2, #0]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	429d      	cmp	r5, r3
 8000b78:	f47f af6b 	bne.w	8000a52 <HAL_RCC_ClockConfig+0xa>
 8000b7c:	e77d      	b.n	8000a7a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b7e:	686b      	ldr	r3, [r5, #4]
 8000b80:	68e1      	ldr	r1, [r4, #12]
 8000b82:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b86:	430b      	orrs	r3, r1
 8000b88:	606b      	str	r3, [r5, #4]
 8000b8a:	e77b      	b.n	8000a84 <HAL_RCC_ClockConfig+0x3c>
 8000b8c:	40022000 	.word	0x40022000
 8000b90:	40021000 	.word	0x40021000
 8000b94:	08001843 	.word	0x08001843
 8000b98:	20000008 	.word	0x20000008

08000b9c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000b9c:	4b08      	ldr	r3, [pc, #32]	; (8000bc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ba2:	685b      	ldr	r3, [r3, #4]
 8000ba4:	fa92 f2a2 	rbit	r2, r2
 8000ba8:	fab2 f282 	clz	r2, r2
 8000bac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000bb0:	40d3      	lsrs	r3, r2
 8000bb2:	4a04      	ldr	r2, [pc, #16]	; (8000bc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000bb4:	5cd3      	ldrb	r3, [r2, r3]
 8000bb6:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000bb8:	6810      	ldr	r0, [r2, #0]
}    
 8000bba:	40d8      	lsrs	r0, r3
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	40021000 	.word	0x40021000
 8000bc4:	08001853 	.word	0x08001853
 8000bc8:	20000008 	.word	0x20000008

08000bcc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000bcc:	4b08      	ldr	r3, [pc, #32]	; (8000bf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000bce:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	fa92 f2a2 	rbit	r2, r2
 8000bd8:	fab2 f282 	clz	r2, r2
 8000bdc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000be0:	40d3      	lsrs	r3, r2
 8000be2:	4a04      	ldr	r2, [pc, #16]	; (8000bf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000be4:	5cd3      	ldrb	r3, [r2, r3]
 8000be6:	4a04      	ldr	r2, [pc, #16]	; (8000bf8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000be8:	6810      	ldr	r0, [r2, #0]
} 
 8000bea:	40d8      	lsrs	r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	40021000 	.word	0x40021000
 8000bf4:	08001853 	.word	0x08001853
 8000bf8:	20000008 	.word	0x20000008

08000bfc <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000bfc:	6803      	ldr	r3, [r0, #0]
{
 8000bfe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000c02:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000c04:	03d8      	lsls	r0, r3, #15
 8000c06:	d520      	bpl.n	8000c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000c08:	4c50      	ldr	r4, [pc, #320]	; (8000d4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000c0a:	69e3      	ldr	r3, [r4, #28]
 8000c0c:	00d9      	lsls	r1, r3, #3
 8000c0e:	d444      	bmi.n	8000c9a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000c10:	69e3      	ldr	r3, [r4, #28]
 8000c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c16:	61e3      	str	r3, [r4, #28]
 8000c18:	69e3      	ldr	r3, [r4, #28]
 8000c1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c1e:	9301      	str	r3, [sp, #4]
 8000c20:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000c22:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000c24:	4f4a      	ldr	r7, [pc, #296]	; (8000d50 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8000c26:	683b      	ldr	r3, [r7, #0]
 8000c28:	05da      	lsls	r2, r3, #23
 8000c2a:	d538      	bpl.n	8000c9e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000c2c:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000c2e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000c32:	d148      	bne.n	8000cc6 <HAL_RCCEx_PeriphCLKConfig+0xca>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000c34:	6a23      	ldr	r3, [r4, #32]
 8000c36:	686a      	ldr	r2, [r5, #4]
 8000c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000c40:	b11e      	cbz	r6, 8000c4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000c42:	69e3      	ldr	r3, [r4, #28]
 8000c44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000c48:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000c4a:	6828      	ldr	r0, [r5, #0]
 8000c4c:	07c1      	lsls	r1, r0, #31
 8000c4e:	d506      	bpl.n	8000c5e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000c50:	4a3e      	ldr	r2, [pc, #248]	; (8000d4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000c52:	68a9      	ldr	r1, [r5, #8]
 8000c54:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c56:	f023 0303 	bic.w	r3, r3, #3
 8000c5a:	430b      	orrs	r3, r1
 8000c5c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000c5e:	0682      	lsls	r2, r0, #26
 8000c60:	d506      	bpl.n	8000c70 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000c62:	4a3a      	ldr	r2, [pc, #232]	; (8000d4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000c64:	68e9      	ldr	r1, [r5, #12]
 8000c66:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c68:	f023 0310 	bic.w	r3, r3, #16
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000c70:	0603      	lsls	r3, r0, #24
 8000c72:	d506      	bpl.n	8000c82 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000c74:	4a35      	ldr	r2, [pc, #212]	; (8000d4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000c76:	6929      	ldr	r1, [r5, #16]
 8000c78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000c7a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000c7e:	430b      	orrs	r3, r1
 8000c80:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000c82:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000c86:	d01b      	beq.n	8000cc0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000c88:	4a30      	ldr	r2, [pc, #192]	; (8000d4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000c8a:	6969      	ldr	r1, [r5, #20]
 8000c8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000c8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000c92:	430b      	orrs	r3, r1
 8000c94:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000c96:	2000      	movs	r0, #0
 8000c98:	e012      	b.n	8000cc0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    FlagStatus       pwrclkchanged = RESET;
 8000c9a:	2600      	movs	r6, #0
 8000c9c:	e7c2      	b.n	8000c24 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000c9e:	683b      	ldr	r3, [r7, #0]
 8000ca0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ca4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000ca6:	f7ff fad1 	bl	800024c <HAL_GetTick>
 8000caa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	05db      	lsls	r3, r3, #23
 8000cb0:	d4bc      	bmi.n	8000c2c <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000cb2:	f7ff facb 	bl	800024c <HAL_GetTick>
 8000cb6:	eba0 0008 	sub.w	r0, r0, r8
 8000cba:	2864      	cmp	r0, #100	; 0x64
 8000cbc:	d9f6      	bls.n	8000cac <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 8000cbe:	2003      	movs	r0, #3
}
 8000cc0:	b002      	add	sp, #8
 8000cc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000cc6:	686a      	ldr	r2, [r5, #4]
 8000cc8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000ccc:	4293      	cmp	r3, r2
 8000cce:	d0b1      	beq.n	8000c34 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000cd0:	6a21      	ldr	r1, [r4, #32]
 8000cd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000cd6:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000cda:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000cde:	f8df e074 	ldr.w	lr, [pc, #116]	; 8000d54 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8000ce2:	fab2 f282 	clz	r2, r2
 8000ce6:	4472      	add	r2, lr
 8000ce8:	0092      	lsls	r2, r2, #2
 8000cea:	2701      	movs	r7, #1
 8000cec:	6017      	str	r7, [r2, #0]
 8000cee:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000cf2:	fab3 f383 	clz	r3, r3
 8000cf6:	4473      	add	r3, lr
 8000cf8:	009b      	lsls	r3, r3, #2
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8000cfe:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000d00:	07c8      	lsls	r0, r1, #31
 8000d02:	d597      	bpl.n	8000c34 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000d04:	f7ff faa2 	bl	800024c <HAL_GetTick>
 8000d08:	f04f 0802 	mov.w	r8, #2
 8000d0c:	4682      	mov	sl, r0
 8000d0e:	46c1      	mov	r9, r8
 8000d10:	fa98 f3a8 	rbit	r3, r8
 8000d14:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d18:	b19b      	cbz	r3, 8000d42 <HAL_RCCEx_PeriphCLKConfig+0x146>
 8000d1a:	6a22      	ldr	r2, [r4, #32]
 8000d1c:	fa99 f3a9 	rbit	r3, r9
 8000d20:	fab3 f383 	clz	r3, r3
 8000d24:	f003 031f 	and.w	r3, r3, #31
 8000d28:	fa07 f303 	lsl.w	r3, r7, r3
 8000d2c:	4213      	tst	r3, r2
 8000d2e:	d181      	bne.n	8000c34 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000d30:	f7ff fa8c 	bl	800024c <HAL_GetTick>
 8000d34:	f241 3388 	movw	r3, #5000	; 0x1388
 8000d38:	eba0 000a 	sub.w	r0, r0, sl
 8000d3c:	4298      	cmp	r0, r3
 8000d3e:	d9e7      	bls.n	8000d10 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8000d40:	e7bd      	b.n	8000cbe <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8000d42:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000d46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000d48:	e7e8      	b.n	8000d1c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8000d4a:	bf00      	nop
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	40007000 	.word	0x40007000
 8000d54:	10908100 	.word	0x10908100

08000d58 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000d58:	6803      	ldr	r3, [r0, #0]
 8000d5a:	681a      	ldr	r2, [r3, #0]
 8000d5c:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000d60:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000d62:	689a      	ldr	r2, [r3, #8]
 8000d64:	f022 0201 	bic.w	r2, r2, #1
 8000d68:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000d6a:	2320      	movs	r3, #32
 8000d6c:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8000d70:	4770      	bx	lr

08000d72 <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 8000d72:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8000d76:	2b20      	cmp	r3, #32
 8000d78:	d13d      	bne.n	8000df6 <HAL_UART_Receive_IT+0x84>
    if((pData == NULL ) || (Size == 0U))
 8000d7a:	2900      	cmp	r1, #0
 8000d7c:	d039      	beq.n	8000df2 <HAL_UART_Receive_IT+0x80>
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	d037      	beq.n	8000df2 <HAL_UART_Receive_IT+0x80>
    __HAL_LOCK(huart);
 8000d82:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d035      	beq.n	8000df6 <HAL_UART_Receive_IT+0x84>
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    UART_MASK_COMPUTATION(huart);
 8000d90:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr = pData;
 8000d92:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8000d94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize = Size;
 8000d98:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 8000d9c:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8000da0:	d119      	bne.n	8000dd6 <HAL_UART_Receive_IT+0x64>
 8000da2:	6903      	ldr	r3, [r0, #16]
 8000da4:	b9ab      	cbnz	r3, 8000dd2 <HAL_UART_Receive_IT+0x60>
 8000da6:	f240 13ff 	movw	r3, #511	; 0x1ff
 8000daa:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000dae:	2300      	movs	r3, #0
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000db0:	2222      	movs	r2, #34	; 0x22
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000db2:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8000db4:	f880 206a 	strb.w	r2, [r0, #106]	; 0x6a
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000db8:	6802      	ldr	r2, [r0, #0]
    __HAL_UNLOCK(huart);
 8000dba:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000dbe:	6891      	ldr	r1, [r2, #8]
 8000dc0:	f041 0101 	orr.w	r1, r1, #1
 8000dc4:	6091      	str	r1, [r2, #8]
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8000dc6:	6811      	ldr	r1, [r2, #0]
 8000dc8:	f441 7190 	orr.w	r1, r1, #288	; 0x120
 8000dcc:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 8000dce:	4618      	mov	r0, r3
 8000dd0:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8000dd2:	23ff      	movs	r3, #255	; 0xff
 8000dd4:	e7e9      	b.n	8000daa <HAL_UART_Receive_IT+0x38>
 8000dd6:	b923      	cbnz	r3, 8000de2 <HAL_UART_Receive_IT+0x70>
 8000dd8:	6903      	ldr	r3, [r0, #16]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d0f9      	beq.n	8000dd2 <HAL_UART_Receive_IT+0x60>
 8000dde:	237f      	movs	r3, #127	; 0x7f
 8000de0:	e7e3      	b.n	8000daa <HAL_UART_Receive_IT+0x38>
 8000de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8000de6:	d1e2      	bne.n	8000dae <HAL_UART_Receive_IT+0x3c>
 8000de8:	6903      	ldr	r3, [r0, #16]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d0f7      	beq.n	8000dde <HAL_UART_Receive_IT+0x6c>
 8000dee:	233f      	movs	r3, #63	; 0x3f
 8000df0:	e7db      	b.n	8000daa <HAL_UART_Receive_IT+0x38>
      return HAL_ERROR;
 8000df2:	2001      	movs	r0, #1
 8000df4:	4770      	bx	lr
    return HAL_BUSY;
 8000df6:	2002      	movs	r0, #2
}
 8000df8:	4770      	bx	lr

08000dfa <HAL_UART_TxCpltCallback>:
 8000dfa:	4770      	bx	lr

08000dfc <HAL_UART_ErrorCallback>:
 8000dfc:	4770      	bx	lr

08000dfe <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000dfe:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8000e00:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8000e02:	2300      	movs	r3, #0
 8000e04:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8000e08:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8000e0c:	f7ff fff6 	bl	8000dfc <HAL_UART_ErrorCallback>
 8000e10:	bd08      	pop	{r3, pc}
	...

08000e14 <UART_SetConfig>:
{
 8000e14:	b538      	push	{r3, r4, r5, lr}
 8000e16:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000e18:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000e1a:	6921      	ldr	r1, [r4, #16]
 8000e1c:	68a3      	ldr	r3, [r4, #8]
 8000e1e:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000e20:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000e22:	430b      	orrs	r3, r1
 8000e24:	6961      	ldr	r1, [r4, #20]
 8000e26:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000e28:	4949      	ldr	r1, [pc, #292]	; (8000f50 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000e2a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000e2c:	4001      	ands	r1, r0
 8000e2e:	430b      	orrs	r3, r1
 8000e30:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e32:	686b      	ldr	r3, [r5, #4]
 8000e34:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000e36:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000e38:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e3c:	430b      	orrs	r3, r1
 8000e3e:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000e40:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000e42:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000e44:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000e48:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000e4a:	430b      	orrs	r3, r1
 8000e4c:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000e4e:	4b41      	ldr	r3, [pc, #260]	; (8000f54 <UART_SetConfig+0x140>)
 8000e50:	429d      	cmp	r5, r3
 8000e52:	d112      	bne.n	8000e7a <UART_SetConfig+0x66>
 8000e54:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000e58:	493f      	ldr	r1, [pc, #252]	; (8000f58 <UART_SetConfig+0x144>)
 8000e5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e5c:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e60:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000e64:	5ccb      	ldrb	r3, [r1, r3]
 8000e66:	d13b      	bne.n	8000ee0 <UART_SetConfig+0xcc>
    switch (clocksource)
 8000e68:	2b08      	cmp	r3, #8
 8000e6a:	d836      	bhi.n	8000eda <UART_SetConfig+0xc6>
 8000e6c:	e8df f003 	tbb	[pc, r3]
 8000e70:	3524210f 	.word	0x3524210f
 8000e74:	3535352d 	.word	0x3535352d
 8000e78:	30          	.byte	0x30
 8000e79:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000e7a:	4b38      	ldr	r3, [pc, #224]	; (8000f5c <UART_SetConfig+0x148>)
 8000e7c:	429d      	cmp	r5, r3
 8000e7e:	d003      	beq.n	8000e88 <UART_SetConfig+0x74>
 8000e80:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000e84:	429d      	cmp	r5, r3
 8000e86:	d15e      	bne.n	8000f46 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e88:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000e8c:	d131      	bne.n	8000ef2 <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000e8e:	f7ff fe85 	bl	8000b9c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000e92:	6861      	ldr	r1, [r4, #4]
 8000e94:	084a      	lsrs	r2, r1, #1
 8000e96:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8000e9a:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000e9e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8000ea0:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8000ea2:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8000ea6:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000ea8:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8000eac:	4313      	orrs	r3, r2
 8000eae:	60cb      	str	r3, [r1, #12]
 8000eb0:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8000eb2:	f7ff fe8b 	bl	8000bcc <HAL_RCC_GetPCLK2Freq>
 8000eb6:	e7ec      	b.n	8000e92 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000eb8:	6860      	ldr	r0, [r4, #4]
 8000eba:	0843      	lsrs	r3, r0, #1
 8000ebc:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8000ec0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000ec4:	fbb3 f3f0 	udiv	r3, r3, r0
 8000ec8:	e7e9      	b.n	8000e9e <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000eca:	f7ff fd8b 	bl	80009e4 <HAL_RCC_GetSysClockFreq>
 8000ece:	e7e0      	b.n	8000e92 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000ed0:	6860      	ldr	r0, [r4, #4]
 8000ed2:	0843      	lsrs	r3, r0, #1
 8000ed4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000ed8:	e7f4      	b.n	8000ec4 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8000eda:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000edc:	2300      	movs	r3, #0
 8000ede:	e7e0      	b.n	8000ea2 <UART_SetConfig+0x8e>
    switch (clocksource)
 8000ee0:	2b08      	cmp	r3, #8
 8000ee2:	d833      	bhi.n	8000f4c <UART_SetConfig+0x138>
 8000ee4:	e8df f003 	tbb	[pc, r3]
 8000ee8:	321b1005 	.word	0x321b1005
 8000eec:	32323227 	.word	0x32323227
 8000ef0:	2a          	.byte	0x2a
 8000ef1:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000ef2:	f7ff fe53 	bl	8000b9c <HAL_RCC_GetPCLK1Freq>
 8000ef6:	6863      	ldr	r3, [r4, #4]
 8000ef8:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8000efc:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f00:	b280      	uxth	r0, r0
 8000f02:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000f04:	2000      	movs	r0, #0
        break;
 8000f06:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8000f08:	f7ff fe60 	bl	8000bcc <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000f0c:	6863      	ldr	r3, [r4, #4]
 8000f0e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8000f12:	fbb0 f0f3 	udiv	r0, r0, r3
 8000f16:	4b0f      	ldr	r3, [pc, #60]	; (8000f54 <UART_SetConfig+0x140>)
 8000f18:	b280      	uxth	r0, r0
 8000f1a:	60d8      	str	r0, [r3, #12]
 8000f1c:	e7f2      	b.n	8000f04 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000f1e:	6862      	ldr	r2, [r4, #4]
 8000f20:	0853      	lsrs	r3, r2, #1
 8000f22:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8000f26:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000f2a:	fbb3 f3f2 	udiv	r3, r3, r2
 8000f2e:	4a09      	ldr	r2, [pc, #36]	; (8000f54 <UART_SetConfig+0x140>)
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	60d3      	str	r3, [r2, #12]
 8000f34:	e7e6      	b.n	8000f04 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000f36:	f7ff fd55 	bl	80009e4 <HAL_RCC_GetSysClockFreq>
 8000f3a:	e7e7      	b.n	8000f0c <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000f3c:	6862      	ldr	r2, [r4, #4]
 8000f3e:	0853      	lsrs	r3, r2, #1
 8000f40:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000f44:	e7f1      	b.n	8000f2a <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000f46:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000f4a:	d0c6      	beq.n	8000eda <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8000f4c:	2001      	movs	r0, #1
  return ret;
 8000f4e:	bd38      	pop	{r3, r4, r5, pc}
 8000f50:	efff69f3 	.word	0xefff69f3
 8000f54:	40013800 	.word	0x40013800
 8000f58:	0800183c 	.word	0x0800183c
 8000f5c:	40004400 	.word	0x40004400

08000f60 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000f60:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000f62:	07da      	lsls	r2, r3, #31
{
 8000f64:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000f66:	d506      	bpl.n	8000f76 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8000f68:	6801      	ldr	r1, [r0, #0]
 8000f6a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8000f6c:	684a      	ldr	r2, [r1, #4]
 8000f6e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000f72:	4322      	orrs	r2, r4
 8000f74:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8000f76:	079c      	lsls	r4, r3, #30
 8000f78:	d506      	bpl.n	8000f88 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8000f7a:	6801      	ldr	r1, [r0, #0]
 8000f7c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000f7e:	684a      	ldr	r2, [r1, #4]
 8000f80:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000f84:	4322      	orrs	r2, r4
 8000f86:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8000f88:	0759      	lsls	r1, r3, #29
 8000f8a:	d506      	bpl.n	8000f9a <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8000f8c:	6801      	ldr	r1, [r0, #0]
 8000f8e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000f90:	684a      	ldr	r2, [r1, #4]
 8000f92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000f96:	4322      	orrs	r2, r4
 8000f98:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8000f9a:	071a      	lsls	r2, r3, #28
 8000f9c:	d506      	bpl.n	8000fac <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8000f9e:	6801      	ldr	r1, [r0, #0]
 8000fa0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000fa2:	684a      	ldr	r2, [r1, #4]
 8000fa4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000fa8:	4322      	orrs	r2, r4
 8000faa:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8000fac:	06dc      	lsls	r4, r3, #27
 8000fae:	d506      	bpl.n	8000fbe <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8000fb0:	6801      	ldr	r1, [r0, #0]
 8000fb2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000fb4:	688a      	ldr	r2, [r1, #8]
 8000fb6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000fba:	4322      	orrs	r2, r4
 8000fbc:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8000fbe:	0699      	lsls	r1, r3, #26
 8000fc0:	d506      	bpl.n	8000fd0 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8000fc2:	6801      	ldr	r1, [r0, #0]
 8000fc4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000fc6:	688a      	ldr	r2, [r1, #8]
 8000fc8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000fcc:	4322      	orrs	r2, r4
 8000fce:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8000fd0:	065a      	lsls	r2, r3, #25
 8000fd2:	d50f      	bpl.n	8000ff4 <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8000fd4:	6801      	ldr	r1, [r0, #0]
 8000fd6:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000fd8:	684a      	ldr	r2, [r1, #4]
 8000fda:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000fde:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8000fe0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8000fe4:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8000fe6:	d105      	bne.n	8000ff4 <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8000fe8:	684a      	ldr	r2, [r1, #4]
 8000fea:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000fec:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8000ff0:	4322      	orrs	r2, r4
 8000ff2:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8000ff4:	061b      	lsls	r3, r3, #24
 8000ff6:	d506      	bpl.n	8001006 <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8000ff8:	6802      	ldr	r2, [r0, #0]
 8000ffa:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000ffc:	6853      	ldr	r3, [r2, #4]
 8000ffe:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001002:	430b      	orrs	r3, r1
 8001004:	6053      	str	r3, [r2, #4]
 8001006:	bd10      	pop	{r4, pc}

08001008 <UART_WaitOnFlagUntilTimeout>:
{
 8001008:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800100c:	9d06      	ldr	r5, [sp, #24]
 800100e:	4604      	mov	r4, r0
 8001010:	460f      	mov	r7, r1
 8001012:	4616      	mov	r6, r2
 8001014:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001016:	6821      	ldr	r1, [r4, #0]
 8001018:	69ca      	ldr	r2, [r1, #28]
 800101a:	ea37 0302 	bics.w	r3, r7, r2
 800101e:	bf0c      	ite	eq
 8001020:	2201      	moveq	r2, #1
 8001022:	2200      	movne	r2, #0
 8001024:	42b2      	cmp	r2, r6
 8001026:	d002      	beq.n	800102e <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001028:	2000      	movs	r0, #0
}
 800102a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 800102e:	1c6b      	adds	r3, r5, #1
 8001030:	d0f2      	beq.n	8001018 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001032:	b99d      	cbnz	r5, 800105c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001034:	6823      	ldr	r3, [r4, #0]
 8001036:	681a      	ldr	r2, [r3, #0]
 8001038:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800103c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800103e:	689a      	ldr	r2, [r3, #8]
 8001040:	f022 0201 	bic.w	r2, r2, #1
 8001044:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001046:	2320      	movs	r3, #32
 8001048:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800104c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001050:	2300      	movs	r3, #0
 8001052:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001056:	2003      	movs	r0, #3
 8001058:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800105c:	f7ff f8f6 	bl	800024c <HAL_GetTick>
 8001060:	eba0 0008 	sub.w	r0, r0, r8
 8001064:	4285      	cmp	r5, r0
 8001066:	d2d6      	bcs.n	8001016 <UART_WaitOnFlagUntilTimeout+0xe>
 8001068:	e7e4      	b.n	8001034 <UART_WaitOnFlagUntilTimeout+0x2c>

0800106a <HAL_UART_Transmit>:
{
 800106a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800106e:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001070:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001074:	2b20      	cmp	r3, #32
{
 8001076:	4604      	mov	r4, r0
 8001078:	460d      	mov	r5, r1
 800107a:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 800107c:	d14c      	bne.n	8001118 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 800107e:	2900      	cmp	r1, #0
 8001080:	d048      	beq.n	8001114 <HAL_UART_Transmit+0xaa>
 8001082:	2a00      	cmp	r2, #0
 8001084:	d046      	beq.n	8001114 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8001086:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 800108a:	2b01      	cmp	r3, #1
 800108c:	d044      	beq.n	8001118 <HAL_UART_Transmit+0xae>
 800108e:	2301      	movs	r3, #1
 8001090:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001094:	2300      	movs	r3, #0
 8001096:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001098:	2321      	movs	r3, #33	; 0x21
 800109a:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 800109e:	f7ff f8d5 	bl	800024c <HAL_GetTick>
    huart->TxXferSize = Size;
 80010a2:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80010a6:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80010a8:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80010ac:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80010b0:	b292      	uxth	r2, r2
 80010b2:	b962      	cbnz	r2, 80010ce <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80010b4:	9700      	str	r7, [sp, #0]
 80010b6:	4633      	mov	r3, r6
 80010b8:	2140      	movs	r1, #64	; 0x40
 80010ba:	4620      	mov	r0, r4
 80010bc:	f7ff ffa4 	bl	8001008 <UART_WaitOnFlagUntilTimeout>
 80010c0:	b998      	cbnz	r0, 80010ea <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80010c2:	2320      	movs	r3, #32
 80010c4:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80010c8:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 80010cc:	e00e      	b.n	80010ec <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80010ce:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010d2:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 80010d4:	3b01      	subs	r3, #1
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80010dc:	2200      	movs	r2, #0
 80010de:	4633      	mov	r3, r6
 80010e0:	2180      	movs	r1, #128	; 0x80
 80010e2:	4620      	mov	r0, r4
 80010e4:	f7ff ff90 	bl	8001008 <UART_WaitOnFlagUntilTimeout>
 80010e8:	b118      	cbz	r0, 80010f2 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 80010ea:	2003      	movs	r0, #3
}
 80010ec:	b002      	add	sp, #8
 80010ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010f2:	68a3      	ldr	r3, [r4, #8]
 80010f4:	6822      	ldr	r2, [r4, #0]
 80010f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010fa:	d107      	bne.n	800110c <HAL_UART_Transmit+0xa2>
 80010fc:	6923      	ldr	r3, [r4, #16]
 80010fe:	b92b      	cbnz	r3, 800110c <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001100:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001108:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 800110a:	e7cf      	b.n	80010ac <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 800110c:	782b      	ldrb	r3, [r5, #0]
 800110e:	8513      	strh	r3, [r2, #40]	; 0x28
 8001110:	3501      	adds	r5, #1
 8001112:	e7cb      	b.n	80010ac <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001114:	2001      	movs	r0, #1
 8001116:	e7e9      	b.n	80010ec <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001118:	2002      	movs	r0, #2
 800111a:	e7e7      	b.n	80010ec <HAL_UART_Transmit+0x82>

0800111c <UART_CheckIdleState>:
{
 800111c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800111e:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001120:	2600      	movs	r6, #0
 8001122:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001124:	f7ff f892 	bl	800024c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001128:	6823      	ldr	r3, [r4, #0]
 800112a:	681b      	ldr	r3, [r3, #0]
 800112c:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 800112e:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001130:	d417      	bmi.n	8001162 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001132:	6823      	ldr	r3, [r4, #0]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	075b      	lsls	r3, r3, #29
 8001138:	d50a      	bpl.n	8001150 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800113a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800113e:	9300      	str	r3, [sp, #0]
 8001140:	2200      	movs	r2, #0
 8001142:	462b      	mov	r3, r5
 8001144:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001148:	4620      	mov	r0, r4
 800114a:	f7ff ff5d 	bl	8001008 <UART_WaitOnFlagUntilTimeout>
 800114e:	b9a0      	cbnz	r0, 800117a <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001150:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001152:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001154:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001158:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800115c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001160:	e00c      	b.n	800117c <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001162:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001166:	9300      	str	r3, [sp, #0]
 8001168:	4632      	mov	r2, r6
 800116a:	4603      	mov	r3, r0
 800116c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001170:	4620      	mov	r0, r4
 8001172:	f7ff ff49 	bl	8001008 <UART_WaitOnFlagUntilTimeout>
 8001176:	2800      	cmp	r0, #0
 8001178:	d0db      	beq.n	8001132 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800117a:	2003      	movs	r0, #3
}
 800117c:	b002      	add	sp, #8
 800117e:	bd70      	pop	{r4, r5, r6, pc}

08001180 <HAL_UART_Init>:
{
 8001180:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001182:	4604      	mov	r4, r0
 8001184:	b360      	cbz	r0, 80011e0 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001186:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800118a:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800118e:	b91b      	cbnz	r3, 8001198 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001190:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001194:	f000 fa28 	bl	80015e8 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001198:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800119a:	2324      	movs	r3, #36	; 0x24
 800119c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80011a0:	6813      	ldr	r3, [r2, #0]
 80011a2:	f023 0301 	bic.w	r3, r3, #1
 80011a6:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80011a8:	4620      	mov	r0, r4
 80011aa:	f7ff fe33 	bl	8000e14 <UART_SetConfig>
 80011ae:	2801      	cmp	r0, #1
 80011b0:	d016      	beq.n	80011e0 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80011b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011b4:	b113      	cbz	r3, 80011bc <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80011b6:	4620      	mov	r0, r4
 80011b8:	f7ff fed2 	bl	8000f60 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80011bc:	6823      	ldr	r3, [r4, #0]
 80011be:	685a      	ldr	r2, [r3, #4]
 80011c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80011c4:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80011c6:	689a      	ldr	r2, [r3, #8]
 80011c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80011cc:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80011ce:	681a      	ldr	r2, [r3, #0]
 80011d0:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80011d4:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80011d6:	601a      	str	r2, [r3, #0]
}
 80011d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80011dc:	f7ff bf9e 	b.w	800111c <UART_CheckIdleState>
}
 80011e0:	2001      	movs	r0, #1
 80011e2:	bd10      	pop	{r4, pc}

080011e4 <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80011e4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80011e8:	2b21      	cmp	r3, #33	; 0x21
 80011ea:	d127      	bne.n	800123c <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 80011ec:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80011f0:	6802      	ldr	r2, [r0, #0]
 80011f2:	b29b      	uxth	r3, r3
 80011f4:	b94b      	cbnz	r3, 800120a <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80011f6:	6811      	ldr	r1, [r2, #0]
 80011f8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80011fc:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80011fe:	6811      	ldr	r1, [r2, #0]
 8001200:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 8001204:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 8001206:	2000      	movs	r0, #0
 8001208:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800120a:	6883      	ldr	r3, [r0, #8]
 800120c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001210:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001212:	d10e      	bne.n	8001232 <UART_Transmit_IT+0x4e>
 8001214:	6901      	ldr	r1, [r0, #16]
 8001216:	b961      	cbnz	r1, 8001232 <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001218:	f833 1b02 	ldrh.w	r1, [r3], #2
 800121c:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001220:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8001222:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001224:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001228:	3b01      	subs	r3, #1
 800122a:	b29b      	uxth	r3, r3
 800122c:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8001230:	e7e9      	b.n	8001206 <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8001232:	1c59      	adds	r1, r3, #1
 8001234:	64c1      	str	r1, [r0, #76]	; 0x4c
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	8513      	strh	r3, [r2, #40]	; 0x28
 800123a:	e7f3      	b.n	8001224 <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 800123c:	2002      	movs	r0, #2
  }
}
 800123e:	4770      	bx	lr

08001240 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001240:	6801      	ldr	r1, [r0, #0]
{
 8001242:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001244:	680b      	ldr	r3, [r1, #0]
 8001246:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800124a:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800124c:	2320      	movs	r3, #32
 800124e:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8001252:	f7ff fdd2 	bl	8000dfa <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8001256:	2000      	movs	r0, #0
 8001258:	bd08      	pop	{r3, pc}

0800125a <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800125a:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 800125e:	2b22      	cmp	r3, #34	; 0x22
{
 8001260:	b510      	push	{r4, lr}
 8001262:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001264:	d129      	bne.n	80012ba <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001266:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001268:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 800126a:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800126e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001272:	ea02 0201 	and.w	r2, r2, r1
 8001276:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001278:	d11b      	bne.n	80012b2 <UART_Receive_IT+0x58>
 800127a:	6901      	ldr	r1, [r0, #16]
 800127c:	b9c9      	cbnz	r1, 80012b2 <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 800127e:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 8001282:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8001284:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8001288:	3c01      	subs	r4, #1
 800128a:	b2a4      	uxth	r4, r4
 800128c:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8001290:	b96c      	cbnz	r4, 80012ae <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001292:	6803      	ldr	r3, [r0, #0]
 8001294:	681a      	ldr	r2, [r3, #0]
 8001296:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800129a:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	f022 0201 	bic.w	r2, r2, #1
 80012a2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80012a4:	2320      	movs	r3, #32
 80012a6:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 80012aa:	f000 f96b 	bl	8001584 <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 80012ae:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 80012b0:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 80012b2:	1c59      	adds	r1, r3, #1
 80012b4:	6541      	str	r1, [r0, #84]	; 0x54
 80012b6:	701a      	strb	r2, [r3, #0]
 80012b8:	e7e4      	b.n	8001284 <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80012ba:	699a      	ldr	r2, [r3, #24]
 80012bc:	f042 0208 	orr.w	r2, r2, #8
 80012c0:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 80012c2:	2002      	movs	r0, #2
 80012c4:	bd10      	pop	{r4, pc}
	...

080012c8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80012c8:	6802      	ldr	r2, [r0, #0]
 80012ca:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80012cc:	6811      	ldr	r1, [r2, #0]
{
 80012ce:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80012d0:	f013 050f 	ands.w	r5, r3, #15
{
 80012d4:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80012d6:	d107      	bne.n	80012e8 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80012d8:	069e      	lsls	r6, r3, #26
 80012da:	d505      	bpl.n	80012e8 <HAL_UART_IRQHandler+0x20>
 80012dc:	068e      	lsls	r6, r1, #26
 80012de:	d503      	bpl.n	80012e8 <HAL_UART_IRQHandler+0x20>
}
 80012e0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80012e4:	f7ff bfb9 	b.w	800125a <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 80012e8:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 80012ea:	2d00      	cmp	r5, #0
 80012ec:	d05c      	beq.n	80013a8 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80012ee:	f010 0501 	ands.w	r5, r0, #1
 80012f2:	d102      	bne.n	80012fa <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80012f4:	f411 7f90 	tst.w	r1, #288	; 0x120
 80012f8:	d056      	beq.n	80013a8 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80012fa:	07d8      	lsls	r0, r3, #31
 80012fc:	d507      	bpl.n	800130e <HAL_UART_IRQHandler+0x46>
 80012fe:	05ce      	lsls	r6, r1, #23
 8001300:	d505      	bpl.n	800130e <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001302:	2001      	movs	r0, #1
 8001304:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001306:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001308:	f040 0001 	orr.w	r0, r0, #1
 800130c:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800130e:	0798      	lsls	r0, r3, #30
 8001310:	d506      	bpl.n	8001320 <HAL_UART_IRQHandler+0x58>
 8001312:	b12d      	cbz	r5, 8001320 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001314:	2002      	movs	r0, #2
 8001316:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001318:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800131a:	f040 0004 	orr.w	r0, r0, #4
 800131e:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001320:	075e      	lsls	r6, r3, #29
 8001322:	d506      	bpl.n	8001332 <HAL_UART_IRQHandler+0x6a>
 8001324:	b12d      	cbz	r5, 8001332 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001326:	2004      	movs	r0, #4
 8001328:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800132a:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800132c:	f040 0002 	orr.w	r0, r0, #2
 8001330:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001332:	0718      	lsls	r0, r3, #28
 8001334:	d507      	bpl.n	8001346 <HAL_UART_IRQHandler+0x7e>
 8001336:	068e      	lsls	r6, r1, #26
 8001338:	d400      	bmi.n	800133c <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 800133a:	b125      	cbz	r5, 8001346 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 800133c:	2008      	movs	r0, #8
 800133e:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001340:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001342:	4302      	orrs	r2, r0
 8001344:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001346:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001348:	2a00      	cmp	r2, #0
 800134a:	d050      	beq.n	80013ee <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800134c:	0698      	lsls	r0, r3, #26
 800134e:	d504      	bpl.n	800135a <HAL_UART_IRQHandler+0x92>
 8001350:	068a      	lsls	r2, r1, #26
 8001352:	d502      	bpl.n	800135a <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8001354:	4620      	mov	r0, r4
 8001356:	f7ff ff80 	bl	800125a <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800135a:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 800135c:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 800135e:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001360:	d404      	bmi.n	800136c <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001362:	6823      	ldr	r3, [r4, #0]
 8001364:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001366:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800136a:	d019      	beq.n	80013a0 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 800136c:	f7ff fcf4 	bl	8000d58 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001370:	6823      	ldr	r3, [r4, #0]
 8001372:	689a      	ldr	r2, [r3, #8]
 8001374:	0656      	lsls	r6, r2, #25
 8001376:	d50f      	bpl.n	8001398 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001378:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800137a:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800137c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001380:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001382:	b148      	cbz	r0, 8001398 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001384:	4b1a      	ldr	r3, [pc, #104]	; (80013f0 <HAL_UART_IRQHandler+0x128>)
 8001386:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001388:	f7fe ffce 	bl	8000328 <HAL_DMA_Abort_IT>
 800138c:	b378      	cbz	r0, 80013ee <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800138e:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8001390:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001394:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001396:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001398:	4620      	mov	r0, r4
 800139a:	f7ff fd2f 	bl	8000dfc <HAL_UART_ErrorCallback>
 800139e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 80013a0:	f7ff fd2c 	bl	8000dfc <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80013a4:	66e5      	str	r5, [r4, #108]	; 0x6c
 80013a6:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 80013a8:	02dd      	lsls	r5, r3, #11
 80013aa:	d50e      	bpl.n	80013ca <HAL_UART_IRQHandler+0x102>
 80013ac:	0246      	lsls	r6, r0, #9
 80013ae:	d50c      	bpl.n	80013ca <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 80013b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80013b4:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 80013b6:	2320      	movs	r3, #32
 80013b8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 80013bc:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 80013be:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 80013c2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 80013c6:	f000 b815 	b.w	80013f4 <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80013ca:	061d      	lsls	r5, r3, #24
 80013cc:	d506      	bpl.n	80013dc <HAL_UART_IRQHandler+0x114>
 80013ce:	0608      	lsls	r0, r1, #24
 80013d0:	d504      	bpl.n	80013dc <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 80013d2:	4620      	mov	r0, r4
}
 80013d4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 80013d8:	f7ff bf04 	b.w	80011e4 <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80013dc:	065a      	lsls	r2, r3, #25
 80013de:	d506      	bpl.n	80013ee <HAL_UART_IRQHandler+0x126>
 80013e0:	064b      	lsls	r3, r1, #25
 80013e2:	d504      	bpl.n	80013ee <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 80013e4:	4620      	mov	r0, r4
}
 80013e6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 80013ea:	f7ff bf29 	b.w	8001240 <UART_EndTransmit_IT>
 80013ee:	bd70      	pop	{r4, r5, r6, pc}
 80013f0:	08000dff 	.word	0x08000dff

080013f4 <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80013f4:	4770      	bx	lr

080013f6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80013f6:	b570      	push	{r4, r5, r6, lr}
 80013f8:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013fa:	2228      	movs	r2, #40	; 0x28
 80013fc:	2100      	movs	r1, #0
 80013fe:	a80c      	add	r0, sp, #48	; 0x30
 8001400:	f000 f9f8 	bl	80017f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001404:	2214      	movs	r2, #20
 8001406:	2100      	movs	r1, #0
 8001408:	a801      	add	r0, sp, #4
 800140a:	f000 f9f3 	bl	80017f4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800140e:	2218      	movs	r2, #24
 8001410:	eb0d 0002 	add.w	r0, sp, r2
 8001414:	2100      	movs	r1, #0
 8001416:	f000 f9ed 	bl	80017f4 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800141a:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800141c:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141e:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001420:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001422:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001424:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001428:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800142a:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800142c:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800142e:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001430:	f7ff f862 	bl	80004f8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001434:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001436:	2500      	movs	r5, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001438:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800143a:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800143c:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001440:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001442:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001444:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001446:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001448:	9505      	str	r5, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800144a:	f7ff fafd 	bl	8000a48 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800144e:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001450:	9606      	str	r6, [sp, #24]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001452:	9508      	str	r5, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001454:	f7ff fbd2 	bl	8000bfc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001458:	b016      	add	sp, #88	; 0x58
 800145a:	bd70      	pop	{r4, r5, r6, pc}

0800145c <main>:
{
 800145c:	b500      	push	{lr}
 800145e:	b089      	sub	sp, #36	; 0x24
  HAL_Init();
 8001460:	f7fe fed6 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 8001464:	f7ff ffc7 	bl	80013f6 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001468:	2214      	movs	r2, #20
 800146a:	2100      	movs	r1, #0
 800146c:	a803      	add	r0, sp, #12
 800146e:	f000 f9c1 	bl	80017f4 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001472:	4b2a      	ldr	r3, [pc, #168]	; (800151c <main+0xc0>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001474:	482a      	ldr	r0, [pc, #168]	; (8001520 <main+0xc4>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001476:	695a      	ldr	r2, [r3, #20]
  huart1.Instance = USART1;
 8001478:	4d2a      	ldr	r5, [pc, #168]	; (8001524 <main+0xc8>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800147a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800147e:	615a      	str	r2, [r3, #20]
 8001480:	695a      	ldr	r2, [r3, #20]
 8001482:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001486:	9200      	str	r2, [sp, #0]
 8001488:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	695a      	ldr	r2, [r3, #20]
 800148c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001490:	615a      	str	r2, [r3, #20]
 8001492:	695a      	ldr	r2, [r3, #20]
 8001494:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001498:	9201      	str	r2, [sp, #4]
 800149a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80014a2:	615a      	str	r2, [r3, #20]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014aa:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ac:	9302      	str	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014ae:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014b0:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80014b2:	f7ff f817 	bl	80004e4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80014b6:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b8:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80014ba:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Pin = LD3_Pin;
 80014bc:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80014be:	4818      	ldr	r0, [pc, #96]	; (8001520 <main+0xc4>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c2:	2301      	movs	r3, #1
 80014c4:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c6:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80014c8:	f7fe ff52 	bl	8000370 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80014cc:	4816      	ldr	r0, [pc, #88]	; (8001528 <main+0xcc>)
  huart2.Init.BaudRate = 38400;
 80014ce:	4a17      	ldr	r2, [pc, #92]	; (800152c <main+0xd0>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014d0:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 80014d2:	f44f 4316 	mov.w	r3, #38400	; 0x9600
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014d6:	260c      	movs	r6, #12
  huart2.Init.BaudRate = 38400;
 80014d8:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014dc:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014de:	6104      	str	r4, [r0, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e0:	6146      	str	r6, [r0, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80014e6:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80014e8:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ea:	f7ff fe49 	bl	8001180 <HAL_UART_Init>
  huart1.Init.BaudRate = 31250;
 80014ee:	4910      	ldr	r1, [pc, #64]	; (8001530 <main+0xd4>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014f0:	60ac      	str	r4, [r5, #8]
  huart1.Init.BaudRate = 31250;
 80014f2:	f647 2312 	movw	r3, #31250	; 0x7a12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80014f6:	4628      	mov	r0, r5
  huart1.Init.BaudRate = 31250;
 80014f8:	e885 000a 	stmia.w	r5, {r1, r3}
  huart1.Init.StopBits = UART_STOPBITS_1;
 80014fc:	60ec      	str	r4, [r5, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80014fe:	612c      	str	r4, [r5, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001500:	616e      	str	r6, [r5, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	61ac      	str	r4, [r5, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001504:	61ec      	str	r4, [r5, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001506:	622c      	str	r4, [r5, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001508:	626c      	str	r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800150a:	f7ff fe39 	bl	8001180 <HAL_UART_Init>
  __HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800150e:	682a      	ldr	r2, [r5, #0]
 8001510:	6813      	ldr	r3, [r2, #0]
 8001512:	f043 0320 	orr.w	r3, r3, #32
 8001516:	6013      	str	r3, [r2, #0]
 8001518:	e7fe      	b.n	8001518 <main+0xbc>
 800151a:	bf00      	nop
 800151c:	40021000 	.word	0x40021000
 8001520:	48000400 	.word	0x48000400
 8001524:	20000030 	.word	0x20000030
 8001528:	200000a0 	.word	0x200000a0
 800152c:	40004400 	.word	0x40004400
 8001530:	40013800 	.word	0x40013800

08001534 <tx_byte>:
	}

	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
}

void tx_byte(UART_HandleTypeDef *huart, uint8_t data, uint32_t Timeout){
 8001534:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8001536:	4604      	mov	r4, r0
 8001538:	460d      	mov	r5, r1
 800153a:	2200      	movs	r2, #0
 800153c:	a902      	add	r1, sp, #8
	for(uint8_t i=0;i<8;i++){
		if((data>>(7-i) & 0x01)==1){
			byte[i]=0x31;
		}
		if((data>>(7-i) & 0x01)==0){
			byte[i]=0x30;
 800153e:	2030      	movs	r0, #48	; 0x30
			byte[i]=0x31;
 8001540:	2631      	movs	r6, #49	; 0x31
		if((data>>(7-i) & 0x01)==1){
 8001542:	f1c2 0307 	rsb	r3, r2, #7
 8001546:	fa45 f303 	asr.w	r3, r5, r3
 800154a:	07db      	lsls	r3, r3, #31
 800154c:	d516      	bpl.n	800157c <tx_byte+0x48>
			byte[i]=0x31;
 800154e:	548e      	strb	r6, [r1, r2]
 8001550:	3201      	adds	r2, #1
	for(uint8_t i=0;i<8;i++){
 8001552:	2a08      	cmp	r2, #8
 8001554:	d1f5      	bne.n	8001542 <tx_byte+0xe>
		}
	}
HAL_UART_Transmit(huart, byte, sizeof(byte), 10);
 8001556:	230a      	movs	r3, #10
 8001558:	4620      	mov	r0, r4
 800155a:	f7ff fd86 	bl	800106a <HAL_UART_Transmit>

uint8_t salto[] = "\r\n";
 800155e:	4b08      	ldr	r3, [pc, #32]	; (8001580 <tx_byte+0x4c>)
 8001560:	881a      	ldrh	r2, [r3, #0]
 8001562:	789b      	ldrb	r3, [r3, #2]
 8001564:	f8ad 2004 	strh.w	r2, [sp, #4]
 8001568:	f88d 3006 	strb.w	r3, [sp, #6]
HAL_UART_Transmit(huart, salto, 2, 10);
 800156c:	2202      	movs	r2, #2
 800156e:	230a      	movs	r3, #10
 8001570:	a901      	add	r1, sp, #4
 8001572:	4620      	mov	r0, r4
 8001574:	f7ff fd79 	bl	800106a <HAL_UART_Transmit>
}
 8001578:	b004      	add	sp, #16
 800157a:	bd70      	pop	{r4, r5, r6, pc}
			byte[i]=0x30;
 800157c:	5488      	strb	r0, [r1, r2]
 800157e:	e7e7      	b.n	8001550 <tx_byte+0x1c>
 8001580:	08001840 	.word	0x08001840

08001584 <HAL_UART_RxCpltCallback>:
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001584:	b570      	push	{r4, r5, r6, lr}
		tx_byte(&huart2, mensaje[i], 10);
 8001586:	4e09      	ldr	r6, [pc, #36]	; (80015ac <HAL_UART_RxCpltCallback+0x28>)
 8001588:	4d09      	ldr	r5, [pc, #36]	; (80015b0 <HAL_UART_RxCpltCallback+0x2c>)
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800158a:	2400      	movs	r4, #0
		tx_byte(&huart2, mensaje[i], 10);
 800158c:	5d31      	ldrb	r1, [r6, r4]
 800158e:	220a      	movs	r2, #10
 8001590:	4628      	mov	r0, r5
 8001592:	3401      	adds	r4, #1
 8001594:	f7ff ffce 	bl	8001534 <tx_byte>
	for(uint8_t i=0;i<sizeof(mensaje);i++){
 8001598:	2c03      	cmp	r4, #3
 800159a:	d1f7      	bne.n	800158c <HAL_UART_RxCpltCallback+0x8>
	__HAL_UART_ENABLE_IT(&huart1, UART_IT_RXNE);
 800159c:	4b05      	ldr	r3, [pc, #20]	; (80015b4 <HAL_UART_RxCpltCallback+0x30>)
 800159e:	681a      	ldr	r2, [r3, #0]
 80015a0:	6813      	ldr	r3, [r2, #0]
 80015a2:	f043 0320 	orr.w	r3, r3, #32
 80015a6:	6013      	str	r3, [r2, #0]
 80015a8:	bd70      	pop	{r4, r5, r6, pc}
 80015aa:	bf00      	nop
 80015ac:	2000002c 	.word	0x2000002c
 80015b0:	200000a0 	.word	0x200000a0
 80015b4:	20000030 	.word	0x20000030

080015b8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015b8:	4b0a      	ldr	r3, [pc, #40]	; (80015e4 <HAL_MspInit+0x2c>)
 80015ba:	699a      	ldr	r2, [r3, #24]
 80015bc:	f042 0201 	orr.w	r2, r2, #1
 80015c0:	619a      	str	r2, [r3, #24]
 80015c2:	699a      	ldr	r2, [r3, #24]
{
 80015c4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	f002 0201 	and.w	r2, r2, #1
 80015ca:	9200      	str	r2, [sp, #0]
 80015cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	69da      	ldr	r2, [r3, #28]
 80015d0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80015d4:	61da      	str	r2, [r3, #28]
 80015d6:	69db      	ldr	r3, [r3, #28]
 80015d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015dc:	9301      	str	r3, [sp, #4]
 80015de:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015e0:	b002      	add	sp, #8
 80015e2:	4770      	bx	lr
 80015e4:	40021000 	.word	0x40021000

080015e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80015e8:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ea:	2214      	movs	r2, #20
{
 80015ec:	b08a      	sub	sp, #40	; 0x28
 80015ee:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	2100      	movs	r1, #0
 80015f2:	eb0d 0002 	add.w	r0, sp, r2
 80015f6:	f000 f8fd 	bl	80017f4 <memset>
  if(huart->Instance==USART1)
 80015fa:	6823      	ldr	r3, [r4, #0]
 80015fc:	4a29      	ldr	r2, [pc, #164]	; (80016a4 <HAL_UART_MspInit+0xbc>)
 80015fe:	4293      	cmp	r3, r2
 8001600:	d12a      	bne.n	8001658 <HAL_UART_MspInit+0x70>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <HAL_UART_MspInit+0xc0>)
 8001604:	699a      	ldr	r2, [r3, #24]
 8001606:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800160a:	619a      	str	r2, [r3, #24]
 800160c:	699a      	ldr	r2, [r3, #24]
 800160e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001612:	9201      	str	r2, [sp, #4]
 8001614:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	695a      	ldr	r2, [r3, #20]
 8001618:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800161c:	615a      	str	r2, [r3, #20]
 800161e:	695b      	ldr	r3, [r3, #20]
 8001620:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001624:	9302      	str	r3, [sp, #8]
 8001626:	9b02      	ldr	r3, [sp, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001628:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800162c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800162e:	2302      	movs	r3, #2
 8001630:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001632:	2303      	movs	r3, #3
 8001634:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001636:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001638:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800163a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800163e:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001640:	f7fe fe96 	bl	8000370 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001644:	2200      	movs	r2, #0
 8001646:	2025      	movs	r0, #37	; 0x25
 8001648:	4611      	mov	r1, r2
 800164a:	f7fe fe17 	bl	800027c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800164e:	2025      	movs	r0, #37	; 0x25
 8001650:	f7fe fe48 	bl	80002e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001654:	b00a      	add	sp, #40	; 0x28
 8001656:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8001658:	4a14      	ldr	r2, [pc, #80]	; (80016ac <HAL_UART_MspInit+0xc4>)
 800165a:	4293      	cmp	r3, r2
 800165c:	d1fa      	bne.n	8001654 <HAL_UART_MspInit+0x6c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800165e:	4b12      	ldr	r3, [pc, #72]	; (80016a8 <HAL_UART_MspInit+0xc0>)
 8001660:	69da      	ldr	r2, [r3, #28]
 8001662:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001666:	61da      	str	r2, [r3, #28]
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800166e:	9203      	str	r2, [sp, #12]
 8001670:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001672:	695a      	ldr	r2, [r3, #20]
 8001674:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001678:	615a      	str	r2, [r3, #20]
 800167a:	695b      	ldr	r3, [r3, #20]
 800167c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001680:	9304      	str	r3, [sp, #16]
 8001682:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001684:	f248 0304 	movw	r3, #32772	; 0x8004
 8001688:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800168a:	2302      	movs	r3, #2
 800168c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800168e:	2303      	movs	r3, #3
 8001690:	9308      	str	r3, [sp, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001694:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001696:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800169a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800169c:	f7fe fe68 	bl	8000370 <HAL_GPIO_Init>
}
 80016a0:	e7d8      	b.n	8001654 <HAL_UART_MspInit+0x6c>
 80016a2:	bf00      	nop
 80016a4:	40013800 	.word	0x40013800
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40004400 	.word	0x40004400

080016b0 <NMI_Handler>:
 80016b0:	4770      	bx	lr

080016b2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016b2:	e7fe      	b.n	80016b2 <HardFault_Handler>

080016b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016b4:	e7fe      	b.n	80016b4 <MemManage_Handler>

080016b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016b6:	e7fe      	b.n	80016b6 <BusFault_Handler>

080016b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016b8:	e7fe      	b.n	80016b8 <UsageFault_Handler>

080016ba <SVC_Handler>:
 80016ba:	4770      	bx	lr

080016bc <DebugMon_Handler>:
 80016bc:	4770      	bx	lr

080016be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016be:	4770      	bx	lr

080016c0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80016c0:	f7fe bdb8 	b.w	8000234 <HAL_IncTick>

080016c4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXT line 25.
  */
void USART1_IRQHandler(void)
{
 80016c4:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USART1_IRQn 0 */
	HAL_UART_Receive_IT(&huart1, mensaje, sizeof(mensaje));
 80016c6:	4c07      	ldr	r4, [pc, #28]	; (80016e4 <USART1_IRQHandler+0x20>)
 80016c8:	4907      	ldr	r1, [pc, #28]	; (80016e8 <USART1_IRQHandler+0x24>)
 80016ca:	2203      	movs	r2, #3
 80016cc:	4620      	mov	r0, r4
 80016ce:	f7ff fb50 	bl	8000d72 <HAL_UART_Receive_IT>
	HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80016d2:	4806      	ldr	r0, [pc, #24]	; (80016ec <USART1_IRQHandler+0x28>)
 80016d4:	2108      	movs	r1, #8
 80016d6:	f7fe ff0a 	bl	80004ee <HAL_GPIO_TogglePin>

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80016da:	4620      	mov	r0, r4
  /* USER CODE BEGIN USART1_IRQn 1 */


  /* USER CODE END USART1_IRQn 1 */
}
 80016dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_UART_IRQHandler(&huart1);
 80016e0:	f7ff bdf2 	b.w	80012c8 <HAL_UART_IRQHandler>
 80016e4:	20000030 	.word	0x20000030
 80016e8:	2000002c 	.word	0x2000002c
 80016ec:	48000400 	.word	0x48000400

080016f0 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80016f0:	4915      	ldr	r1, [pc, #84]	; (8001748 <SystemInit+0x58>)
 80016f2:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80016f6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80016fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80016fe:	4b13      	ldr	r3, [pc, #76]	; (800174c <SystemInit+0x5c>)
 8001700:	681a      	ldr	r2, [r3, #0]
 8001702:	f042 0201 	orr.w	r2, r2, #1
 8001706:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001708:	6858      	ldr	r0, [r3, #4]
 800170a:	4a11      	ldr	r2, [pc, #68]	; (8001750 <SystemInit+0x60>)
 800170c:	4002      	ands	r2, r0
 800170e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001710:	681a      	ldr	r2, [r3, #0]
 8001712:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001716:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800171a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001722:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001724:	685a      	ldr	r2, [r3, #4]
 8001726:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800172a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800172c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800172e:	f022 020f 	bic.w	r2, r2, #15
 8001732:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001734:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001736:	4a07      	ldr	r2, [pc, #28]	; (8001754 <SystemInit+0x64>)
 8001738:	4002      	ands	r2, r0
 800173a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001740:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001744:	608b      	str	r3, [r1, #8]
 8001746:	4770      	bx	lr
 8001748:	e000ed00 	.word	0xe000ed00
 800174c:	40021000 	.word	0x40021000
 8001750:	f87fc00c 	.word	0xf87fc00c
 8001754:	ff00fccc 	.word	0xff00fccc

08001758 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001790 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800175c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800175e:	e003      	b.n	8001768 <LoopCopyDataInit>

08001760 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001760:	4b0c      	ldr	r3, [pc, #48]	; (8001794 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001762:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001764:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001766:	3104      	adds	r1, #4

08001768 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001768:	480b      	ldr	r0, [pc, #44]	; (8001798 <LoopForever+0xa>)
	ldr	r3, =_edata
 800176a:	4b0c      	ldr	r3, [pc, #48]	; (800179c <LoopForever+0xe>)
	adds	r2, r0, r1
 800176c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800176e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001770:	d3f6      	bcc.n	8001760 <CopyDataInit>
	ldr	r2, =_sbss
 8001772:	4a0b      	ldr	r2, [pc, #44]	; (80017a0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001774:	e002      	b.n	800177c <LoopFillZerobss>

08001776 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001776:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001778:	f842 3b04 	str.w	r3, [r2], #4

0800177c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800177c:	4b09      	ldr	r3, [pc, #36]	; (80017a4 <LoopForever+0x16>)
	cmp	r2, r3
 800177e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001780:	d3f9      	bcc.n	8001776 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001782:	f7ff ffb5 	bl	80016f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001786:	f000 f811 	bl	80017ac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800178a:	f7ff fe67 	bl	800145c <main>

0800178e <LoopForever>:

LoopForever:
    b LoopForever
 800178e:	e7fe      	b.n	800178e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001790:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001794:	08001864 	.word	0x08001864
	ldr	r0, =_sdata
 8001798:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800179c:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80017a0:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80017a4:	20000110 	.word	0x20000110

080017a8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80017a8:	e7fe      	b.n	80017a8 <ADC1_2_IRQHandler>
	...

080017ac <__libc_init_array>:
 80017ac:	b570      	push	{r4, r5, r6, lr}
 80017ae:	4e0d      	ldr	r6, [pc, #52]	; (80017e4 <__libc_init_array+0x38>)
 80017b0:	4c0d      	ldr	r4, [pc, #52]	; (80017e8 <__libc_init_array+0x3c>)
 80017b2:	1ba4      	subs	r4, r4, r6
 80017b4:	10a4      	asrs	r4, r4, #2
 80017b6:	2500      	movs	r5, #0
 80017b8:	42a5      	cmp	r5, r4
 80017ba:	d109      	bne.n	80017d0 <__libc_init_array+0x24>
 80017bc:	4e0b      	ldr	r6, [pc, #44]	; (80017ec <__libc_init_array+0x40>)
 80017be:	4c0c      	ldr	r4, [pc, #48]	; (80017f0 <__libc_init_array+0x44>)
 80017c0:	f000 f820 	bl	8001804 <_init>
 80017c4:	1ba4      	subs	r4, r4, r6
 80017c6:	10a4      	asrs	r4, r4, #2
 80017c8:	2500      	movs	r5, #0
 80017ca:	42a5      	cmp	r5, r4
 80017cc:	d105      	bne.n	80017da <__libc_init_array+0x2e>
 80017ce:	bd70      	pop	{r4, r5, r6, pc}
 80017d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017d4:	4798      	blx	r3
 80017d6:	3501      	adds	r5, #1
 80017d8:	e7ee      	b.n	80017b8 <__libc_init_array+0xc>
 80017da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80017de:	4798      	blx	r3
 80017e0:	3501      	adds	r5, #1
 80017e2:	e7f2      	b.n	80017ca <__libc_init_array+0x1e>
 80017e4:	0800185c 	.word	0x0800185c
 80017e8:	0800185c 	.word	0x0800185c
 80017ec:	0800185c 	.word	0x0800185c
 80017f0:	08001860 	.word	0x08001860

080017f4 <memset>:
 80017f4:	4402      	add	r2, r0
 80017f6:	4603      	mov	r3, r0
 80017f8:	4293      	cmp	r3, r2
 80017fa:	d100      	bne.n	80017fe <memset+0xa>
 80017fc:	4770      	bx	lr
 80017fe:	f803 1b01 	strb.w	r1, [r3], #1
 8001802:	e7f9      	b.n	80017f8 <memset+0x4>

08001804 <_init>:
 8001804:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001806:	bf00      	nop
 8001808:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800180a:	bc08      	pop	{r3}
 800180c:	469e      	mov	lr, r3
 800180e:	4770      	bx	lr

08001810 <_fini>:
 8001810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001812:	bf00      	nop
 8001814:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001816:	bc08      	pop	{r3}
 8001818:	469e      	mov	lr, r3
 800181a:	4770      	bx	lr
