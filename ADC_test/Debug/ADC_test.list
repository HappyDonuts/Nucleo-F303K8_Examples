
ADC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002410  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080025a0  080025a0  000125a0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002614  08002614  00012614  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002618  08002618  00012618  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  0800261c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  7 .bss          000000f4  20000070  20000070  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000164  20000164  00020070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000dba8  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001c57  00000000  00000000  0002dc48  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000040b8  00000000  00000000  0002f89f  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000648  00000000  00000000  00033958  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000008b8  00000000  00000000  00033fa0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000040dc  00000000  00000000  00034858  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00002b32  00000000  00000000  00038934  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003b466  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001470  00000000  00000000  0003b4e4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002588 	.word	0x08002588

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08002588 	.word	0x08002588

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000270:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000272:	4a0e      	ldr	r2, [pc, #56]	; (80002ac <HAL_InitTick+0x3c>)
 8000274:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <HAL_InitTick+0x40>)
{
 8000276:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000278:	7818      	ldrb	r0, [r3, #0]
 800027a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000282:	6810      	ldr	r0, [r2, #0]
 8000284:	fbb0 f0f3 	udiv	r0, r0, r3
 8000288:	f000 fd3e 	bl	8000d08 <HAL_SYSTICK_Config>
 800028c:	4604      	mov	r4, r0
 800028e:	b958      	cbnz	r0, 80002a8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000290:	2d0f      	cmp	r5, #15
 8000292:	d809      	bhi.n	80002a8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000294:	4602      	mov	r2, r0
 8000296:	4629      	mov	r1, r5
 8000298:	f04f 30ff 	mov.w	r0, #4294967295
 800029c:	f000 fd00 	bl	8000ca0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <HAL_InitTick+0x44>)
 80002a2:	4620      	mov	r0, r4
 80002a4:	601d      	str	r5, [r3, #0]
 80002a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80002a8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80002aa:	bd38      	pop	{r3, r4, r5, pc}
 80002ac:	20000008 	.word	0x20000008
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000004 	.word	0x20000004

080002b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002b8:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <HAL_Init+0x20>)
{
 80002ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002bc:	6813      	ldr	r3, [r2, #0]
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002c4:	2003      	movs	r0, #3
 80002c6:	f000 fcd9 	bl	8000c7c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ca:	2000      	movs	r0, #0
 80002cc:	f7ff ffd0 	bl	8000270 <HAL_InitTick>
  HAL_MspInit();
 80002d0:	f001 fc22 	bl	8001b18 <HAL_MspInit>
}
 80002d4:	2000      	movs	r0, #0
 80002d6:	bd08      	pop	{r3, pc}
 80002d8:	40022000 	.word	0x40022000

080002dc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002dc:	4a03      	ldr	r2, [pc, #12]	; (80002ec <HAL_IncTick+0x10>)
 80002de:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <HAL_IncTick+0x14>)
 80002e0:	6811      	ldr	r1, [r2, #0]
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	440b      	add	r3, r1
 80002e6:	6013      	str	r3, [r2, #0]
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	20000098 	.word	0x20000098
 80002f0:	20000000 	.word	0x20000000

080002f4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80002f4:	4b01      	ldr	r3, [pc, #4]	; (80002fc <HAL_GetTick+0x8>)
 80002f6:	6818      	ldr	r0, [r3, #0]
}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000098 	.word	0x20000098

08000300 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000300:	b538      	push	{r3, r4, r5, lr}
 8000302:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000304:	f7ff fff6 	bl	80002f4 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000308:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800030a:	bf1c      	itt	ne
 800030c:	4b05      	ldrne	r3, [pc, #20]	; (8000324 <HAL_Delay+0x24>)
 800030e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000310:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000312:	bf18      	it	ne
 8000314:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000316:	f7ff ffed 	bl	80002f4 <HAL_GetTick>
 800031a:	1b40      	subs	r0, r0, r5
 800031c:	4284      	cmp	r4, r0
 800031e:	d8fa      	bhi.n	8000316 <HAL_Delay+0x16>
  {
  }
}
 8000320:	bd38      	pop	{r3, r4, r5, pc}
 8000322:	bf00      	nop
 8000324:	20000000 	.word	0x20000000

08000328 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8000328:	b538      	push	{r3, r4, r5, lr}
  uint32_t tickstart = 0U;
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 800032a:	6803      	ldr	r3, [r0, #0]
{
 800032c:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) != RESET )
 800032e:	6898      	ldr	r0, [r3, #8]
 8000330:	f000 0003 	and.w	r0, r0, #3
 8000334:	2801      	cmp	r0, #1
 8000336:	d001      	beq.n	800033c <ADC_Disable+0x14>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8000338:	2000      	movs	r0, #0
 800033a:	bd38      	pop	{r3, r4, r5, pc}
  if (ADC_IS_ENABLE(hadc) != RESET )
 800033c:	681a      	ldr	r2, [r3, #0]
 800033e:	07d2      	lsls	r2, r2, #31
 8000340:	d5fa      	bpl.n	8000338 <ADC_Disable+0x10>
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8000342:	689a      	ldr	r2, [r3, #8]
 8000344:	f002 020d 	and.w	r2, r2, #13
 8000348:	2a01      	cmp	r2, #1
 800034a:	d11b      	bne.n	8000384 <ADC_Disable+0x5c>
      __HAL_ADC_DISABLE(hadc);
 800034c:	689a      	ldr	r2, [r3, #8]
 800034e:	f042 0202 	orr.w	r2, r2, #2
 8000352:	609a      	str	r2, [r3, #8]
 8000354:	2203      	movs	r2, #3
 8000356:	601a      	str	r2, [r3, #0]
    tickstart = HAL_GetTick();
 8000358:	f7ff ffcc 	bl	80002f4 <HAL_GetTick>
 800035c:	4605      	mov	r5, r0
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 800035e:	6823      	ldr	r3, [r4, #0]
 8000360:	689b      	ldr	r3, [r3, #8]
 8000362:	07db      	lsls	r3, r3, #31
 8000364:	d5e8      	bpl.n	8000338 <ADC_Disable+0x10>
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8000366:	f7ff ffc5 	bl	80002f4 <HAL_GetTick>
 800036a:	1b40      	subs	r0, r0, r5
 800036c:	2802      	cmp	r0, #2
 800036e:	d9f6      	bls.n	800035e <ADC_Disable+0x36>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000370:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000372:	f043 0310 	orr.w	r3, r3, #16
 8000376:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000378:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800037a:	f043 0301 	orr.w	r3, r3, #1
 800037e:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000380:	2001      	movs	r0, #1
 8000382:	bd38      	pop	{r3, r4, r5, pc}
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000384:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000386:	f043 0310 	orr.w	r3, r3, #16
 800038a:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800038c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	64a3      	str	r3, [r4, #72]	; 0x48
      return HAL_ERROR;
 8000394:	bd38      	pop	{r3, r4, r5, pc}
	...

08000398 <ADC_ConversionStop>:
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8000398:	6803      	ldr	r3, [r0, #0]
 800039a:	689a      	ldr	r2, [r3, #8]
 800039c:	f012 0f0c 	tst.w	r2, #12
{
 80003a0:	b570      	push	{r4, r5, r6, lr}
 80003a2:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 80003a4:	d101      	bne.n	80003aa <ADC_ConversionStop+0x12>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 80003a6:	2000      	movs	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 80003aa:	68da      	ldr	r2, [r3, #12]
 80003ac:	0190      	lsls	r0, r2, #6
 80003ae:	d526      	bpl.n	80003fe <ADC_ConversionStop+0x66>
 80003b0:	69e2      	ldr	r2, [r4, #28]
 80003b2:	2a01      	cmp	r2, #1
 80003b4:	d123      	bne.n	80003fe <ADC_ConversionStop+0x66>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 80003b6:	69a2      	ldr	r2, [r4, #24]
 80003b8:	2a01      	cmp	r2, #1
 80003ba:	d120      	bne.n	80003fe <ADC_ConversionStop+0x66>
 80003bc:	4a20      	ldr	r2, [pc, #128]	; (8000440 <ADC_ConversionStop+0xa8>)
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 80003be:	6819      	ldr	r1, [r3, #0]
 80003c0:	0649      	lsls	r1, r1, #25
 80003c2:	d510      	bpl.n	80003e6 <ADC_ConversionStop+0x4e>
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 80003c4:	2240      	movs	r2, #64	; 0x40
 80003c6:	601a      	str	r2, [r3, #0]
      ConversionGroup = ADC_REGULAR_GROUP;
 80003c8:	210c      	movs	r1, #12
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80003ca:	689a      	ldr	r2, [r3, #8]
 80003cc:	0756      	lsls	r6, r2, #29
 80003ce:	d506      	bpl.n	80003de <ADC_ConversionStop+0x46>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 80003d0:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 80003d2:	0795      	lsls	r5, r2, #30
        hadc->Instance->CR |= ADC_CR_ADSTP;
 80003d4:	bf5e      	ittt	pl
 80003d6:	689a      	ldrpl	r2, [r3, #8]
 80003d8:	f042 0210 	orrpl.w	r2, r2, #16
 80003dc:	609a      	strpl	r2, [r3, #8]
    if (ConversionGroup != ADC_REGULAR_GROUP)
 80003de:	290c      	cmp	r1, #12
 80003e0:	d10f      	bne.n	8000402 <ADC_ConversionStop+0x6a>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 80003e2:	2504      	movs	r5, #4
        break;
 80003e4:	e01e      	b.n	8000424 <ADC_ConversionStop+0x8c>
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 80003e6:	3a01      	subs	r2, #1
 80003e8:	d1e9      	bne.n	80003be <ADC_ConversionStop+0x26>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80003ea:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80003ec:	f043 0310 	orr.w	r3, r3, #16
 80003f0:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80003f2:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80003f4:	f043 0301 	orr.w	r3, r3, #1
 80003f8:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 80003fa:	2001      	movs	r0, #1
 80003fc:	bd70      	pop	{r4, r5, r6, pc}
    if (ConversionGroup != ADC_INJECTED_GROUP)
 80003fe:	2960      	cmp	r1, #96	; 0x60
 8000400:	d1e3      	bne.n	80003ca <ADC_ConversionStop+0x32>
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8000402:	689a      	ldr	r2, [r3, #8]
 8000404:	0710      	lsls	r0, r2, #28
 8000406:	d506      	bpl.n	8000416 <ADC_ConversionStop+0x7e>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8000408:	689a      	ldr	r2, [r3, #8]
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 800040a:	0792      	lsls	r2, r2, #30
        hadc->Instance->CR |= ADC_CR_JADSTP;
 800040c:	bf5e      	ittt	pl
 800040e:	689a      	ldrpl	r2, [r3, #8]
 8000410:	f042 0220 	orrpl.w	r2, r2, #32
 8000414:	609a      	strpl	r2, [r3, #8]
    switch(ConversionGroup)
 8000416:	2960      	cmp	r1, #96	; 0x60
 8000418:	d003      	beq.n	8000422 <ADC_ConversionStop+0x8a>
 800041a:	296c      	cmp	r1, #108	; 0x6c
 800041c:	d1e1      	bne.n	80003e2 <ADC_ConversionStop+0x4a>
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 800041e:	250c      	movs	r5, #12
 8000420:	e000      	b.n	8000424 <ADC_ConversionStop+0x8c>
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8000422:	2508      	movs	r5, #8
    tickstart = HAL_GetTick();
 8000424:	f7ff ff66 	bl	80002f4 <HAL_GetTick>
 8000428:	4606      	mov	r6, r0
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 800042a:	6823      	ldr	r3, [r4, #0]
 800042c:	689b      	ldr	r3, [r3, #8]
 800042e:	421d      	tst	r5, r3
 8000430:	d0b9      	beq.n	80003a6 <ADC_ConversionStop+0xe>
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8000432:	f7ff ff5f 	bl	80002f4 <HAL_GetTick>
 8000436:	1b80      	subs	r0, r0, r6
 8000438:	280b      	cmp	r0, #11
 800043a:	d9f6      	bls.n	800042a <ADC_ConversionStop+0x92>
 800043c:	e7d5      	b.n	80003ea <ADC_ConversionStop+0x52>
 800043e:	bf00      	nop
 8000440:	00099401 	.word	0x00099401

08000444 <ADC_Enable>:
{
 8000444:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000446:	6803      	ldr	r3, [r0, #0]
 8000448:	689a      	ldr	r2, [r3, #8]
 800044a:	f002 0203 	and.w	r2, r2, #3
 800044e:	2a01      	cmp	r2, #1
{
 8000450:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8000452:	d104      	bne.n	800045e <ADC_Enable+0x1a>
 8000454:	681a      	ldr	r2, [r3, #0]
 8000456:	07d2      	lsls	r2, r2, #31
 8000458:	d501      	bpl.n	800045e <ADC_Enable+0x1a>
  return HAL_OK;
 800045a:	2000      	movs	r0, #0
 800045c:	bd38      	pop	{r3, r4, r5, pc}
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800045e:	6899      	ldr	r1, [r3, #8]
 8000460:	4a0e      	ldr	r2, [pc, #56]	; (800049c <ADC_Enable+0x58>)
 8000462:	4211      	tst	r1, r2
 8000464:	d10f      	bne.n	8000486 <ADC_Enable+0x42>
    __HAL_ADC_ENABLE(hadc);
 8000466:	689a      	ldr	r2, [r3, #8]
 8000468:	f042 0201 	orr.w	r2, r2, #1
 800046c:	609a      	str	r2, [r3, #8]
    tickstart = HAL_GetTick();  
 800046e:	f7ff ff41 	bl	80002f4 <HAL_GetTick>
 8000472:	4605      	mov	r5, r0
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8000474:	6823      	ldr	r3, [r4, #0]
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	07db      	lsls	r3, r3, #31
 800047a:	d4ee      	bmi.n	800045a <ADC_Enable+0x16>
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800047c:	f7ff ff3a 	bl	80002f4 <HAL_GetTick>
 8000480:	1b40      	subs	r0, r0, r5
 8000482:	2802      	cmp	r0, #2
 8000484:	d9f6      	bls.n	8000474 <ADC_Enable+0x30>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000486:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000488:	f043 0310 	orr.w	r3, r3, #16
 800048c:	6463      	str	r3, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800048e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000490:	f043 0301 	orr.w	r3, r3, #1
 8000494:	64a3      	str	r3, [r4, #72]	; 0x48
        return HAL_ERROR;
 8000496:	2001      	movs	r0, #1
 8000498:	bd38      	pop	{r3, r4, r5, pc}
 800049a:	bf00      	nop
 800049c:	8000003f 	.word	0x8000003f

080004a0 <HAL_ADC_Init>:
{
 80004a0:	b570      	push	{r4, r5, r6, lr}
 80004a2:	b096      	sub	sp, #88	; 0x58
  __IO uint32_t wait_loop_index = 0U;
 80004a4:	2300      	movs	r3, #0
 80004a6:	9300      	str	r3, [sp, #0]
  if(hadc == NULL)
 80004a8:	4604      	mov	r4, r0
 80004aa:	2800      	cmp	r0, #0
 80004ac:	f000 80e3 	beq.w	8000676 <HAL_ADC_Init+0x1d6>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80004b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80004b2:	06d5      	lsls	r5, r2, #27
 80004b4:	f100 80cc 	bmi.w	8000650 <HAL_ADC_Init+0x1b0>
    if (hadc->State == HAL_ADC_STATE_RESET)
 80004b8:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	f000 8092 	beq.w	80005e4 <HAL_ADC_Init+0x144>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80004c0:	2000      	movs	r0, #0
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80004c2:	6823      	ldr	r3, [r4, #0]
 80004c4:	689a      	ldr	r2, [r3, #8]
 80004c6:	00d2      	lsls	r2, r2, #3
 80004c8:	d502      	bpl.n	80004d0 <HAL_ADC_Init+0x30>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 80004ca:	689b      	ldr	r3, [r3, #8]
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 80004cc:	009b      	lsls	r3, r3, #2
 80004ce:	d50a      	bpl.n	80004e6 <HAL_ADC_Init+0x46>
      ADC_STATE_CLR_SET(hadc->State,
 80004d0:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004d2:	f023 0312 	bic.w	r3, r3, #18
 80004d6:	f043 0310 	orr.w	r3, r3, #16
 80004da:	6463      	str	r3, [r4, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80004dc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80004de:	f043 0301 	orr.w	r3, r3, #1
 80004e2:	64a3      	str	r3, [r4, #72]	; 0x48
      tmp_hal_status = HAL_ERROR;
 80004e4:	2001      	movs	r0, #1
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80004e6:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80004e8:	06de      	lsls	r6, r3, #27
 80004ea:	f100 80be 	bmi.w	800066a <HAL_ADC_Init+0x1ca>
 80004ee:	2800      	cmp	r0, #0
 80004f0:	f040 80bb 	bne.w	800066a <HAL_ADC_Init+0x1ca>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80004f4:	6823      	ldr	r3, [r4, #0]
 80004f6:	6899      	ldr	r1, [r3, #8]
      (tmp_hal_status == HAL_OK)                                &&
 80004f8:	f011 0104 	ands.w	r1, r1, #4
 80004fc:	f040 80b5 	bne.w	800066a <HAL_ADC_Init+0x1ca>
    ADC_STATE_CLR_SET(hadc->State,
 8000500:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000502:	f422 7281 	bic.w	r2, r2, #258	; 0x102
 8000506:	f042 0202 	orr.w	r2, r2, #2
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800050a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    ADC_STATE_CLR_SET(hadc->State,
 800050e:	6462      	str	r2, [r4, #68]	; 0x44
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000510:	bf0c      	ite	eq
 8000512:	4a5a      	ldreq	r2, [pc, #360]	; (800067c <HAL_ADC_Init+0x1dc>)
 8000514:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8000518:	9201      	str	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800051a:	689a      	ldr	r2, [r3, #8]
 800051c:	f002 0203 	and.w	r2, r2, #3
 8000520:	2a01      	cmp	r2, #1
 8000522:	d102      	bne.n	800052a <HAL_ADC_Init+0x8a>
 8000524:	681a      	ldr	r2, [r3, #0]
 8000526:	07d5      	lsls	r5, r2, #31
 8000528:	d410      	bmi.n	800054c <HAL_ADC_Init+0xac>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800052a:	9a01      	ldr	r2, [sp, #4]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800052c:	b13a      	cbz	r2, 800053e <HAL_ADC_Init+0x9e>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800052e:	6895      	ldr	r5, [r2, #8]
 8000530:	f005 0503 	and.w	r5, r5, #3
 8000534:	2d01      	cmp	r5, #1
 8000536:	d102      	bne.n	800053e <HAL_ADC_Init+0x9e>
 8000538:	6812      	ldr	r2, [r2, #0]
 800053a:	07d2      	lsls	r2, r2, #31
 800053c:	d406      	bmi.n	800054c <HAL_ADC_Init+0xac>
      MODIFY_REG(tmpADC_Common->CCR       ,
 800053e:	4d50      	ldr	r5, [pc, #320]	; (8000680 <HAL_ADC_Init+0x1e0>)
 8000540:	6866      	ldr	r6, [r4, #4]
 8000542:	68aa      	ldr	r2, [r5, #8]
 8000544:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8000548:	4332      	orrs	r2, r6
 800054a:	60aa      	str	r2, [r5, #8]
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 800054c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800054e:	68a6      	ldr	r6, [r4, #8]
 8000550:	69e5      	ldr	r5, [r4, #28]
 8000552:	2a01      	cmp	r2, #1
 8000554:	68e2      	ldr	r2, [r4, #12]
 8000556:	ea42 0206 	orr.w	r2, r2, r6
 800055a:	bf18      	it	ne
 800055c:	f44f 5180 	movne.w	r1, #4096	; 0x1000
 8000560:	ea42 3245 	orr.w	r2, r2, r5, lsl #13
 8000564:	430a      	orrs	r2, r1
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000566:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8000568:	2901      	cmp	r1, #1
 800056a:	d107      	bne.n	800057c <HAL_ADC_Init+0xdc>
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800056c:	2d00      	cmp	r5, #0
 800056e:	d171      	bne.n	8000654 <HAL_ADC_Init+0x1b4>
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000570:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000572:	3901      	subs	r1, #1
 8000574:	ea42 4241 	orr.w	r2, r2, r1, lsl #17
 8000578:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800057c:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 800057e:	2901      	cmp	r1, #1
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000580:	bf1e      	ittt	ne
 8000582:	6b25      	ldrne	r5, [r4, #48]	; 0x30
 8000584:	4329      	orrne	r1, r5
 8000586:	430a      	orrne	r2, r1
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000588:	6899      	ldr	r1, [r3, #8]
 800058a:	f011 0f0c 	tst.w	r1, #12
 800058e:	d10b      	bne.n	80005a8 <HAL_ADC_Init+0x108>
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000590:	68d9      	ldr	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000592:	69a5      	ldr	r5, [r4, #24]
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000594:	f421 4180 	bic.w	r1, r1, #16384	; 0x4000
 8000598:	f021 0102 	bic.w	r1, r1, #2
 800059c:	60d9      	str	r1, [r3, #12]
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 800059e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80005a0:	0049      	lsls	r1, r1, #1
 80005a2:	ea41 3185 	orr.w	r1, r1, r5, lsl #14
 80005a6:	430a      	orrs	r2, r1
    MODIFY_REG(hadc->Instance->CFGR,
 80005a8:	68dd      	ldr	r5, [r3, #12]
 80005aa:	4936      	ldr	r1, [pc, #216]	; (8000684 <HAL_ADC_Init+0x1e4>)
 80005ac:	4029      	ands	r1, r5
 80005ae:	430a      	orrs	r2, r1
 80005b0:	60da      	str	r2, [r3, #12]
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80005b2:	6922      	ldr	r2, [r4, #16]
 80005b4:	2a01      	cmp	r2, #1
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80005b6:	bf05      	ittet	eq
 80005b8:	6b19      	ldreq	r1, [r3, #48]	; 0x30
 80005ba:	6a22      	ldreq	r2, [r4, #32]
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80005bc:	6b1a      	ldrne	r2, [r3, #48]	; 0x30
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80005be:	f102 32ff 	addeq.w	r2, r2, #4294967295
 80005c2:	bf06      	itte	eq
 80005c4:	f021 010f 	biceq.w	r1, r1, #15
 80005c8:	430a      	orreq	r2, r1
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80005ca:	f022 020f 	bicne.w	r2, r2, #15
 80005ce:	631a      	str	r2, [r3, #48]	; 0x30
    ADC_CLEAR_ERRORCODE(hadc);
 80005d0:	2300      	movs	r3, #0
 80005d2:	64a3      	str	r3, [r4, #72]	; 0x48
    ADC_STATE_CLR_SET(hadc->State,
 80005d4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80005d6:	f023 0303 	bic.w	r3, r3, #3
 80005da:	f043 0301 	orr.w	r3, r3, #1
 80005de:	6463      	str	r3, [r4, #68]	; 0x44
}
 80005e0:	b016      	add	sp, #88	; 0x58
 80005e2:	bd70      	pop	{r4, r5, r6, pc}
      ADC_CLEAR_ERRORCODE(hadc);
 80005e4:	6483      	str	r3, [r0, #72]	; 0x48
      hadc->InjectionConfig.ChannelCount = 0U;
 80005e6:	6503      	str	r3, [r0, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 80005e8:	64c3      	str	r3, [r0, #76]	; 0x4c
      hadc->Lock = HAL_UNLOCKED;
 80005ea:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
      HAL_ADC_MspInit(hadc);
 80005ee:	f001 faab 	bl	8001b48 <HAL_ADC_MspInit>
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80005f2:	6823      	ldr	r3, [r4, #0]
 80005f4:	689b      	ldr	r3, [r3, #8]
 80005f6:	00d8      	lsls	r0, r3, #3
 80005f8:	f53f af62 	bmi.w	80004c0 <HAL_ADC_Init+0x20>
        tmp_hal_status = ADC_Disable(hadc);
 80005fc:	4620      	mov	r0, r4
 80005fe:	f7ff fe93 	bl	8000328 <ADC_Disable>
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000602:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000604:	06d1      	lsls	r1, r2, #27
 8000606:	f53f af5c 	bmi.w	80004c2 <HAL_ADC_Init+0x22>
 800060a:	2800      	cmp	r0, #0
 800060c:	f47f af59 	bne.w	80004c2 <HAL_ADC_Init+0x22>
          ADC_STATE_CLR_SET(hadc->State,
 8000610:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000612:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000616:	f023 0302 	bic.w	r3, r3, #2
 800061a:	f043 0302 	orr.w	r3, r3, #2
 800061e:	6463      	str	r3, [r4, #68]	; 0x44
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000620:	6823      	ldr	r3, [r4, #0]
 8000622:	689a      	ldr	r2, [r3, #8]
 8000624:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000628:	609a      	str	r2, [r3, #8]
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800062a:	689a      	ldr	r2, [r3, #8]
 800062c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000630:	609a      	str	r2, [r3, #8]
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000632:	4b15      	ldr	r3, [pc, #84]	; (8000688 <HAL_ADC_Init+0x1e8>)
 8000634:	4a15      	ldr	r2, [pc, #84]	; (800068c <HAL_ADC_Init+0x1ec>)
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	fbb3 f2f2 	udiv	r2, r3, r2
 800063c:	230a      	movs	r3, #10
 800063e:	4353      	muls	r3, r2
            wait_loop_index--;
 8000640:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8000642:	9b00      	ldr	r3, [sp, #0]
 8000644:	2b00      	cmp	r3, #0
 8000646:	f43f af3b 	beq.w	80004c0 <HAL_ADC_Init+0x20>
            wait_loop_index--;
 800064a:	9b00      	ldr	r3, [sp, #0]
 800064c:	3b01      	subs	r3, #1
 800064e:	e7f7      	b.n	8000640 <HAL_ADC_Init+0x1a0>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000650:	4618      	mov	r0, r3
 8000652:	e748      	b.n	80004e6 <HAL_ADC_Init+0x46>
        ADC_STATE_CLR_SET(hadc->State,
 8000654:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8000656:	f021 0122 	bic.w	r1, r1, #34	; 0x22
 800065a:	f041 0120 	orr.w	r1, r1, #32
 800065e:	6461      	str	r1, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000660:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8000662:	f041 0101 	orr.w	r1, r1, #1
 8000666:	64a1      	str	r1, [r4, #72]	; 0x48
 8000668:	e788      	b.n	800057c <HAL_ADC_Init+0xdc>
    ADC_STATE_CLR_SET(hadc->State,
 800066a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 800066c:	f023 0312 	bic.w	r3, r3, #18
 8000670:	f043 0310 	orr.w	r3, r3, #16
 8000674:	6463      	str	r3, [r4, #68]	; 0x44
    return HAL_ERROR;
 8000676:	2001      	movs	r0, #1
 8000678:	e7b2      	b.n	80005e0 <HAL_ADC_Init+0x140>
 800067a:	bf00      	nop
 800067c:	50000100 	.word	0x50000100
 8000680:	50000300 	.word	0x50000300
 8000684:	fff0c007 	.word	0xfff0c007
 8000688:	20000008 	.word	0x20000008
 800068c:	000f4240 	.word	0x000f4240

08000690 <HAL_ADC_Start>:
{
 8000690:	b538      	push	{r3, r4, r5, lr}
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000692:	6803      	ldr	r3, [r0, #0]
 8000694:	689d      	ldr	r5, [r3, #8]
 8000696:	f015 0504 	ands.w	r5, r5, #4
{
 800069a:	4604      	mov	r4, r0
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800069c:	d158      	bne.n	8000750 <HAL_ADC_Start+0xc0>
    __HAL_LOCK(hadc);
 800069e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80006a2:	2b01      	cmp	r3, #1
 80006a4:	d054      	beq.n	8000750 <HAL_ADC_Start+0xc0>
 80006a6:	2301      	movs	r3, #1
 80006a8:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    tmp_hal_status = ADC_Enable(hadc);
 80006ac:	f7ff feca 	bl	8000444 <ADC_Enable>
    if (tmp_hal_status == HAL_OK)
 80006b0:	2800      	cmp	r0, #0
 80006b2:	d14a      	bne.n	800074a <HAL_ADC_Start+0xba>
      ADC_STATE_CLR_SET(hadc->State,
 80006b4:	6c63      	ldr	r3, [r4, #68]	; 0x44
 80006b6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80006ba:	f023 0301 	bic.w	r3, r3, #1
 80006be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80006c2:	6463      	str	r3, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80006c4:	4b23      	ldr	r3, [pc, #140]	; (8000754 <HAL_ADC_Start+0xc4>)
 80006c6:	689b      	ldr	r3, [r3, #8]
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80006c8:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80006ca:	f013 0f1f 	tst.w	r3, #31
 80006ce:	6823      	ldr	r3, [r4, #0]
 80006d0:	d002      	beq.n	80006d8 <HAL_ADC_Start+0x48>
 80006d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80006d6:	d12e      	bne.n	8000736 <HAL_ADC_Start+0xa6>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80006d8:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80006dc:	6462      	str	r2, [r4, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80006de:	68da      	ldr	r2, [r3, #12]
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80006e0:	0195      	lsls	r5, r2, #6
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80006e2:	bf41      	itttt	mi
 80006e4:	6c62      	ldrmi	r2, [r4, #68]	; 0x44
 80006e6:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 80006ea:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 80006ee:	6462      	strmi	r2, [r4, #68]	; 0x44
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80006f0:	6c62      	ldr	r2, [r4, #68]	; 0x44
 80006f2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80006f6:	bf1c      	itt	ne
 80006f8:	6ca2      	ldrne	r2, [r4, #72]	; 0x48
 80006fa:	f022 0206 	bicne.w	r2, r2, #6
        ADC_CLEAR_ERRORCODE(hadc);
 80006fe:	64a2      	str	r2, [r4, #72]	; 0x48
      __HAL_UNLOCK(hadc);
 8000700:	2200      	movs	r2, #0
 8000702:	f884 2040 	strb.w	r2, [r4, #64]	; 0x40
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8000706:	221c      	movs	r2, #28
 8000708:	601a      	str	r2, [r3, #0]
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 800070a:	4a12      	ldr	r2, [pc, #72]	; (8000754 <HAL_ADC_Start+0xc4>)
 800070c:	6891      	ldr	r1, [r2, #8]
 800070e:	06c9      	lsls	r1, r1, #27
 8000710:	d00c      	beq.n	800072c <HAL_ADC_Start+0x9c>
 8000712:	6891      	ldr	r1, [r2, #8]
 8000714:	f001 011f 	and.w	r1, r1, #31
 8000718:	2905      	cmp	r1, #5
 800071a:	d007      	beq.n	800072c <HAL_ADC_Start+0x9c>
 800071c:	6892      	ldr	r2, [r2, #8]
 800071e:	f002 021f 	and.w	r2, r2, #31
 8000722:	2a09      	cmp	r2, #9
 8000724:	d002      	beq.n	800072c <HAL_ADC_Start+0x9c>
 8000726:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800072a:	d112      	bne.n	8000752 <HAL_ADC_Start+0xc2>
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 800072c:	689a      	ldr	r2, [r3, #8]
 800072e:	f042 0204 	orr.w	r2, r2, #4
 8000732:	609a      	str	r2, [r3, #8]
 8000734:	bd38      	pop	{r3, r4, r5, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000736:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800073a:	6462      	str	r2, [r4, #68]	; 0x44
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800073c:	4a06      	ldr	r2, [pc, #24]	; (8000758 <HAL_ADC_Start+0xc8>)
 800073e:	4293      	cmp	r3, r2
 8000740:	d1d6      	bne.n	80006f0 <HAL_ADC_Start+0x60>
 8000742:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000746:	68d2      	ldr	r2, [r2, #12]
 8000748:	e7ca      	b.n	80006e0 <HAL_ADC_Start+0x50>
      __HAL_UNLOCK(hadc);
 800074a:	f884 5040 	strb.w	r5, [r4, #64]	; 0x40
 800074e:	bd38      	pop	{r3, r4, r5, pc}
    tmp_hal_status = HAL_BUSY;
 8000750:	2002      	movs	r0, #2
}
 8000752:	bd38      	pop	{r3, r4, r5, pc}
 8000754:	50000300 	.word	0x50000300
 8000758:	50000100 	.word	0x50000100

0800075c <HAL_ADC_Stop>:
  __HAL_LOCK(hadc);
 800075c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 8000760:	2b01      	cmp	r3, #1
{
 8000762:	b510      	push	{r4, lr}
 8000764:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8000766:	d016      	beq.n	8000796 <HAL_ADC_Stop+0x3a>
 8000768:	2301      	movs	r3, #1
 800076a:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 800076e:	216c      	movs	r1, #108	; 0x6c
 8000770:	f7ff fe12 	bl	8000398 <ADC_ConversionStop>
  if (tmp_hal_status == HAL_OK)
 8000774:	b958      	cbnz	r0, 800078e <HAL_ADC_Stop+0x32>
    tmp_hal_status = ADC_Disable(hadc);
 8000776:	4620      	mov	r0, r4
 8000778:	f7ff fdd6 	bl	8000328 <ADC_Disable>
    if (tmp_hal_status == HAL_OK)
 800077c:	b938      	cbnz	r0, 800078e <HAL_ADC_Stop+0x32>
      ADC_STATE_CLR_SET(hadc->State,
 800077e:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000780:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000784:	f023 0301 	bic.w	r3, r3, #1
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6463      	str	r3, [r4, #68]	; 0x44
  __HAL_UNLOCK(hadc);
 800078e:	2300      	movs	r3, #0
 8000790:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
  return tmp_hal_status;
 8000794:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8000796:	2002      	movs	r0, #2
}
 8000798:	bd10      	pop	{r4, pc}
	...

0800079c <HAL_ADC_PollForConversion>:
{
 800079c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80007a0:	6946      	ldr	r6, [r0, #20]
 80007a2:	2e08      	cmp	r6, #8
{
 80007a4:	4604      	mov	r4, r0
 80007a6:	460f      	mov	r7, r1
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 80007a8:	d01c      	beq.n	80007e4 <HAL_ADC_PollForConversion+0x48>
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80007aa:	4a37      	ldr	r2, [pc, #220]	; (8000888 <HAL_ADC_PollForConversion+0xec>)
 80007ac:	6893      	ldr	r3, [r2, #8]
 80007ae:	f013 031f 	ands.w	r3, r3, #31
 80007b2:	d10c      	bne.n	80007ce <HAL_ADC_PollForConversion+0x32>
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80007b4:	6802      	ldr	r2, [r0, #0]
 80007b6:	68d2      	ldr	r2, [r2, #12]
 80007b8:	07d1      	lsls	r1, r2, #31
 80007ba:	d512      	bpl.n	80007e2 <HAL_ADC_PollForConversion+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007bc:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80007be:	f042 0220 	orr.w	r2, r2, #32
 80007c2:	6442      	str	r2, [r0, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80007c4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_ERROR;
 80007c8:	2001      	movs	r0, #1
 80007ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80007ce:	6893      	ldr	r3, [r2, #8]
 80007d0:	f413 4f40 	tst.w	r3, #49152	; 0xc000
 80007d4:	d005      	beq.n	80007e2 <HAL_ADC_PollForConversion+0x46>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80007d6:	6c43      	ldr	r3, [r0, #68]	; 0x44
 80007d8:	f043 0320 	orr.w	r3, r3, #32
 80007dc:	6443      	str	r3, [r0, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 80007de:	2300      	movs	r3, #0
 80007e0:	e7f0      	b.n	80007c4 <HAL_ADC_PollForConversion+0x28>
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80007e2:	260c      	movs	r6, #12
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80007e4:	4b28      	ldr	r3, [pc, #160]	; (8000888 <HAL_ADC_PollForConversion+0xec>)
 80007e6:	689b      	ldr	r3, [r3, #8]
 80007e8:	f013 0f1f 	tst.w	r3, #31
 80007ec:	6823      	ldr	r3, [r4, #0]
 80007ee:	d004      	beq.n	80007fa <HAL_ADC_PollForConversion+0x5e>
 80007f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80007f4:	bf18      	it	ne
 80007f6:	f04f 43a0 	movne.w	r3, #1342177280	; 0x50000000
 80007fa:	68dd      	ldr	r5, [r3, #12]
  tickstart = HAL_GetTick();  
 80007fc:	f7ff fd7a 	bl	80002f4 <HAL_GetTick>
 8000800:	4680      	mov	r8, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8000802:	6823      	ldr	r3, [r4, #0]
 8000804:	681a      	ldr	r2, [r3, #0]
 8000806:	4216      	tst	r6, r2
 8000808:	d022      	beq.n	8000850 <HAL_ADC_PollForConversion+0xb4>
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800080a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800080c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000810:	6462      	str	r2, [r4, #68]	; 0x44
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 8000812:	68da      	ldr	r2, [r3, #12]
 8000814:	f412 6f40 	tst.w	r2, #3072	; 0xc00
 8000818:	d113      	bne.n	8000842 <HAL_ADC_PollForConversion+0xa6>
 800081a:	04a8      	lsls	r0, r5, #18
 800081c:	d411      	bmi.n	8000842 <HAL_ADC_PollForConversion+0xa6>
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 800081e:	681a      	ldr	r2, [r3, #0]
 8000820:	0711      	lsls	r1, r2, #28
 8000822:	d50e      	bpl.n	8000842 <HAL_ADC_PollForConversion+0xa6>
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8000824:	689a      	ldr	r2, [r3, #8]
 8000826:	f012 0f04 	tst.w	r2, #4
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800082a:	6c62      	ldr	r2, [r4, #68]	; 0x44
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800082c:	d124      	bne.n	8000878 <HAL_ADC_PollForConversion+0xdc>
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800082e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000832:	6462      	str	r2, [r4, #68]	; 0x44
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000834:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000836:	04d2      	lsls	r2, r2, #19
 8000838:	d403      	bmi.n	8000842 <HAL_ADC_PollForConversion+0xa6>
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800083a:	6c62      	ldr	r2, [r4, #68]	; 0x44
 800083c:	f042 0201 	orr.w	r2, r2, #1
 8000840:	6462      	str	r2, [r4, #68]	; 0x44
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 8000842:	f415 4080 	ands.w	r0, r5, #16384	; 0x4000
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 8000846:	bf0c      	ite	eq
 8000848:	601e      	streq	r6, [r3, #0]
  return HAL_OK;
 800084a:	2000      	movne	r0, #0
}
 800084c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000850:	1c7a      	adds	r2, r7, #1
 8000852:	d0d7      	beq.n	8000804 <HAL_ADC_PollForConversion+0x68>
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8000854:	b94f      	cbnz	r7, 800086a <HAL_ADC_PollForConversion+0xce>
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8000856:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000858:	f043 0304 	orr.w	r3, r3, #4
 800085c:	6463      	str	r3, [r4, #68]	; 0x44
        __HAL_UNLOCK(hadc);
 800085e:	2300      	movs	r3, #0
 8000860:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
        return HAL_TIMEOUT;
 8000864:	2003      	movs	r0, #3
 8000866:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800086a:	f7ff fd43 	bl	80002f4 <HAL_GetTick>
 800086e:	eba0 0008 	sub.w	r0, r0, r8
 8000872:	4287      	cmp	r7, r0
 8000874:	d2c5      	bcs.n	8000802 <HAL_ADC_PollForConversion+0x66>
 8000876:	e7ee      	b.n	8000856 <HAL_ADC_PollForConversion+0xba>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000878:	f042 0220 	orr.w	r2, r2, #32
 800087c:	6462      	str	r2, [r4, #68]	; 0x44
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800087e:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8000880:	f042 0201 	orr.w	r2, r2, #1
 8000884:	64a2      	str	r2, [r4, #72]	; 0x48
 8000886:	e7dc      	b.n	8000842 <HAL_ADC_PollForConversion+0xa6>
 8000888:	50000300 	.word	0x50000300

0800088c <HAL_ADC_GetValue>:
  return hadc->Instance->DR;
 800088c:	6803      	ldr	r3, [r0, #0]
 800088e:	6c18      	ldr	r0, [r3, #64]	; 0x40
}
 8000890:	4770      	bx	lr
	...

08000894 <HAL_ADC_ConfigChannel>:
{
 8000894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000896:	b097      	sub	sp, #92	; 0x5c
  __IO uint32_t wait_loop_index = 0U;
 8000898:	2300      	movs	r3, #0
 800089a:	9300      	str	r3, [sp, #0]
  __HAL_LOCK(hadc);
 800089c:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
 80008a0:	2b01      	cmp	r3, #1
{
 80008a2:	4605      	mov	r5, r0
  __HAL_LOCK(hadc);
 80008a4:	f000 8151 	beq.w	8000b4a <HAL_ADC_ConfigChannel+0x2b6>
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008a8:	682b      	ldr	r3, [r5, #0]
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 80008aa:	68ce      	ldr	r6, [r1, #12]
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008ac:	689a      	ldr	r2, [r3, #8]
  __HAL_LOCK(hadc);
 80008ae:	2001      	movs	r0, #1
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008b0:	0754      	lsls	r4, r2, #29
  __HAL_LOCK(hadc);
 80008b2:	f885 0040 	strb.w	r0, [r5, #64]	; 0x40
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80008b6:	f100 8143 	bmi.w	8000b40 <HAL_ADC_ConfigChannel+0x2ac>
    if (sConfig->Rank < 5U)
 80008ba:	6848      	ldr	r0, [r1, #4]
 80008bc:	680c      	ldr	r4, [r1, #0]
 80008be:	2804      	cmp	r0, #4
 80008c0:	f04f 0206 	mov.w	r2, #6
 80008c4:	d831      	bhi.n	800092a <HAL_ADC_ConfigChannel+0x96>
      MODIFY_REG(hadc->Instance->SQR1,
 80008c6:	4342      	muls	r2, r0
 80008c8:	6b1f      	ldr	r7, [r3, #48]	; 0x30
 80008ca:	201f      	movs	r0, #31
 80008cc:	4090      	lsls	r0, r2
 80008ce:	ea27 0000 	bic.w	r0, r7, r0
 80008d2:	fa04 f202 	lsl.w	r2, r4, r2
 80008d6:	4302      	orrs	r2, r0
 80008d8:	631a      	str	r2, [r3, #48]	; 0x30
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80008da:	689a      	ldr	r2, [r3, #8]
 80008dc:	f012 0f0c 	tst.w	r2, #12
 80008e0:	d162      	bne.n	80009a8 <HAL_ADC_ConfigChannel+0x114>
    if (sConfig->Channel >= ADC_CHANNEL_10)
 80008e2:	2c09      	cmp	r4, #9
 80008e4:	ea4f 0244 	mov.w	r2, r4, lsl #1
 80008e8:	688f      	ldr	r7, [r1, #8]
 80008ea:	d946      	bls.n	800097a <HAL_ADC_ConfigChannel+0xe6>
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 80008ec:	4422      	add	r2, r4
 80008ee:	6998      	ldr	r0, [r3, #24]
 80008f0:	3a1e      	subs	r2, #30
 80008f2:	f04f 0e07 	mov.w	lr, #7
 80008f6:	fa0e fe02 	lsl.w	lr, lr, r2
 80008fa:	ea20 000e 	bic.w	r0, r0, lr
 80008fe:	fa07 f202 	lsl.w	r2, r7, r2
 8000902:	4302      	orrs	r2, r0
 8000904:	619a      	str	r2, [r3, #24]
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 8000906:	68da      	ldr	r2, [r3, #12]
 8000908:	f3c2 0ec1 	ubfx	lr, r2, #3, #2
 800090c:	694a      	ldr	r2, [r1, #20]
 800090e:	ea4f 0e4e 	mov.w	lr, lr, lsl #1
 8000912:	fa02 fe0e 	lsl.w	lr, r2, lr
    switch (sConfig->OffsetNumber)
 8000916:	690a      	ldr	r2, [r1, #16]
 8000918:	3a01      	subs	r2, #1
 800091a:	ea4f 6c84 	mov.w	ip, r4, lsl #26
 800091e:	2a03      	cmp	r2, #3
 8000920:	d873      	bhi.n	8000a0a <HAL_ADC_ConfigChannel+0x176>
 8000922:	e8df f002 	tbb	[pc, r2]
 8000926:	5137      	.short	0x5137
 8000928:	675c      	.short	0x675c
    else if (sConfig->Rank < 10U)
 800092a:	2809      	cmp	r0, #9
 800092c:	d80b      	bhi.n	8000946 <HAL_ADC_ConfigChannel+0xb2>
      MODIFY_REG(hadc->Instance->SQR2,
 800092e:	4342      	muls	r2, r0
 8000930:	6b5f      	ldr	r7, [r3, #52]	; 0x34
 8000932:	3a1e      	subs	r2, #30
 8000934:	201f      	movs	r0, #31
 8000936:	4090      	lsls	r0, r2
 8000938:	ea27 0000 	bic.w	r0, r7, r0
 800093c:	fa04 f202 	lsl.w	r2, r4, r2
 8000940:	4302      	orrs	r2, r0
 8000942:	635a      	str	r2, [r3, #52]	; 0x34
 8000944:	e7c9      	b.n	80008da <HAL_ADC_ConfigChannel+0x46>
    else if (sConfig->Rank < 15U)
 8000946:	280e      	cmp	r0, #14
 8000948:	d80b      	bhi.n	8000962 <HAL_ADC_ConfigChannel+0xce>
      MODIFY_REG(hadc->Instance->SQR3                        ,
 800094a:	4342      	muls	r2, r0
 800094c:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 800094e:	3a3c      	subs	r2, #60	; 0x3c
 8000950:	201f      	movs	r0, #31
 8000952:	4090      	lsls	r0, r2
 8000954:	ea27 0000 	bic.w	r0, r7, r0
 8000958:	fa04 f202 	lsl.w	r2, r4, r2
 800095c:	4302      	orrs	r2, r0
 800095e:	639a      	str	r2, [r3, #56]	; 0x38
 8000960:	e7bb      	b.n	80008da <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8000962:	4342      	muls	r2, r0
 8000964:	6bdf      	ldr	r7, [r3, #60]	; 0x3c
 8000966:	3a5a      	subs	r2, #90	; 0x5a
 8000968:	201f      	movs	r0, #31
 800096a:	4090      	lsls	r0, r2
 800096c:	ea27 0000 	bic.w	r0, r7, r0
 8000970:	fa04 f202 	lsl.w	r2, r4, r2
 8000974:	4302      	orrs	r2, r0
 8000976:	63da      	str	r2, [r3, #60]	; 0x3c
 8000978:	e7af      	b.n	80008da <HAL_ADC_ConfigChannel+0x46>
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800097a:	6958      	ldr	r0, [r3, #20]
 800097c:	4422      	add	r2, r4
 800097e:	f04f 0e07 	mov.w	lr, #7
 8000982:	fa0e fe02 	lsl.w	lr, lr, r2
 8000986:	ea20 000e 	bic.w	r0, r0, lr
 800098a:	fa07 f202 	lsl.w	r2, r7, r2
 800098e:	4302      	orrs	r2, r0
 8000990:	615a      	str	r2, [r3, #20]
 8000992:	e7b8      	b.n	8000906 <HAL_ADC_ConfigChannel+0x72>
      MODIFY_REG(hadc->Instance->OFR1               ,
 8000994:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000996:	4f7a      	ldr	r7, [pc, #488]	; (8000b80 <HAL_ADC_ConfigChannel+0x2ec>)
 8000998:	4017      	ands	r7, r2
 800099a:	ea47 020c 	orr.w	r2, r7, ip
 800099e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80009a2:	ea42 020e 	orr.w	r2, r2, lr
 80009a6:	661a      	str	r2, [r3, #96]	; 0x60
  if (ADC_IS_ENABLE(hadc) == RESET)
 80009a8:	689a      	ldr	r2, [r3, #8]
 80009aa:	f002 0203 	and.w	r2, r2, #3
 80009ae:	2a01      	cmp	r2, #1
 80009b0:	f040 80cd 	bne.w	8000b4e <HAL_ADC_ConfigChannel+0x2ba>
 80009b4:	681a      	ldr	r2, [r3, #0]
 80009b6:	07d0      	lsls	r0, r2, #31
 80009b8:	f140 80c9 	bpl.w	8000b4e <HAL_ADC_ConfigChannel+0x2ba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80009bc:	2000      	movs	r0, #0
  __HAL_UNLOCK(hadc);
 80009be:	2300      	movs	r3, #0
 80009c0:	f885 3040 	strb.w	r3, [r5, #64]	; 0x40
}
 80009c4:	b017      	add	sp, #92	; 0x5c
 80009c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      MODIFY_REG(hadc->Instance->OFR2               ,
 80009c8:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80009ca:	4f6d      	ldr	r7, [pc, #436]	; (8000b80 <HAL_ADC_ConfigChannel+0x2ec>)
 80009cc:	4017      	ands	r7, r2
 80009ce:	ea47 020c 	orr.w	r2, r7, ip
 80009d2:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80009d6:	ea42 020e 	orr.w	r2, r2, lr
 80009da:	665a      	str	r2, [r3, #100]	; 0x64
      break;
 80009dc:	e7e4      	b.n	80009a8 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR3               ,
 80009de:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80009e0:	4867      	ldr	r0, [pc, #412]	; (8000b80 <HAL_ADC_ConfigChannel+0x2ec>)
 80009e2:	4010      	ands	r0, r2
 80009e4:	ea40 020c 	orr.w	r2, r0, ip
 80009e8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80009ec:	ea42 020e 	orr.w	r2, r2, lr
 80009f0:	669a      	str	r2, [r3, #104]	; 0x68
      break;
 80009f2:	e7d9      	b.n	80009a8 <HAL_ADC_ConfigChannel+0x114>
      MODIFY_REG(hadc->Instance->OFR4               ,
 80009f4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
 80009f6:	4a62      	ldr	r2, [pc, #392]	; (8000b80 <HAL_ADC_ConfigChannel+0x2ec>)
 80009f8:	4002      	ands	r2, r0
 80009fa:	ea42 020c 	orr.w	r2, r2, ip
 80009fe:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8000a02:	ea42 020e 	orr.w	r2, r2, lr
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000a06:	66da      	str	r2, [r3, #108]	; 0x6c
 8000a08:	e7ce      	b.n	80009a8 <HAL_ADC_ConfigChannel+0x114>
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000a0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a0c:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000a10:	4562      	cmp	r2, ip
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8000a12:	bf02      	ittt	eq
 8000a14:	6e1a      	ldreq	r2, [r3, #96]	; 0x60
 8000a16:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000a1a:	661a      	streq	r2, [r3, #96]	; 0x60
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000a1c:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8000a1e:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000a22:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 8000a24:	bf02      	ittt	eq
 8000a26:	6e5a      	ldreq	r2, [r3, #100]	; 0x64
 8000a28:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000a2c:	665a      	streq	r2, [r3, #100]	; 0x64
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000a2e:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8000a30:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000a34:	4594      	cmp	ip, r2
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8000a36:	bf02      	ittt	eq
 8000a38:	6e9a      	ldreq	r2, [r3, #104]	; 0x68
 8000a3a:	f022 4200 	biceq.w	r2, r2, #2147483648	; 0x80000000
 8000a3e:	669a      	streq	r2, [r3, #104]	; 0x68
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8000a40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000a42:	f002 42f8 	and.w	r2, r2, #2080374784	; 0x7c000000
 8000a46:	4594      	cmp	ip, r2
 8000a48:	d1ae      	bne.n	80009a8 <HAL_ADC_ConfigChannel+0x114>
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8000a4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8000a4c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8000a50:	e7d9      	b.n	8000a06 <HAL_ADC_ConfigChannel+0x172>
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000a52:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000a56:	2101      	movs	r1, #1
 8000a58:	40a1      	lsls	r1, r4
 8000a5a:	ea22 0201 	bic.w	r2, r2, r1
 8000a5e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000a62:	2c10      	cmp	r4, #16
 8000a64:	d143      	bne.n	8000aee <HAL_ADC_ConfigChannel+0x25a>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000a66:	4a47      	ldr	r2, [pc, #284]	; (8000b84 <HAL_ADC_ConfigChannel+0x2f0>)
 8000a68:	6892      	ldr	r2, [r2, #8]
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8000a6a:	f412 0f00 	tst.w	r2, #8388608	; 0x800000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000a6e:	d1a5      	bne.n	80009bc <HAL_ADC_ConfigChannel+0x128>
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000a70:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a74:	bf0c      	ite	eq
 8000a76:	4a44      	ldreq	r2, [pc, #272]	; (8000b88 <HAL_ADC_ConfigChannel+0x2f4>)
 8000a78:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8000a7c:	9201      	str	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000a7e:	689a      	ldr	r2, [r3, #8]
 8000a80:	f002 0203 	and.w	r2, r2, #3
 8000a84:	2a01      	cmp	r2, #1
 8000a86:	d102      	bne.n	8000a8e <HAL_ADC_ConfigChannel+0x1fa>
 8000a88:	681a      	ldr	r2, [r3, #0]
 8000a8a:	07d1      	lsls	r1, r2, #31
 8000a8c:	d452      	bmi.n	8000b34 <HAL_ADC_ConfigChannel+0x2a0>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000a8e:	9a01      	ldr	r2, [sp, #4]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8000a90:	b13a      	cbz	r2, 8000aa2 <HAL_ADC_ConfigChannel+0x20e>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000a92:	6891      	ldr	r1, [r2, #8]
 8000a94:	f001 0103 	and.w	r1, r1, #3
 8000a98:	2901      	cmp	r1, #1
 8000a9a:	d102      	bne.n	8000aa2 <HAL_ADC_ConfigChannel+0x20e>
 8000a9c:	6812      	ldr	r2, [r2, #0]
 8000a9e:	07d2      	lsls	r2, r2, #31
 8000aa0:	d448      	bmi.n	8000b34 <HAL_ADC_ConfigChannel+0x2a0>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8000aa2:	2c10      	cmp	r4, #16
 8000aa4:	d132      	bne.n	8000b0c <HAL_ADC_ConfigChannel+0x278>
 8000aa6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000aaa:	d187      	bne.n	80009bc <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8000aac:	4a35      	ldr	r2, [pc, #212]	; (8000b84 <HAL_ADC_ConfigChannel+0x2f0>)
 8000aae:	6893      	ldr	r3, [r2, #8]
 8000ab0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000ab4:	6093      	str	r3, [r2, #8]
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ab6:	4b35      	ldr	r3, [pc, #212]	; (8000b8c <HAL_ADC_ConfigChannel+0x2f8>)
 8000ab8:	4a35      	ldr	r2, [pc, #212]	; (8000b90 <HAL_ADC_ConfigChannel+0x2fc>)
 8000aba:	681b      	ldr	r3, [r3, #0]
 8000abc:	fbb3 f2f2 	udiv	r2, r3, r2
 8000ac0:	230a      	movs	r3, #10
 8000ac2:	4353      	muls	r3, r2
            wait_loop_index--;
 8000ac4:	9300      	str	r3, [sp, #0]
          while(wait_loop_index != 0U)
 8000ac6:	9b00      	ldr	r3, [sp, #0]
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	f43f af77 	beq.w	80009bc <HAL_ADC_ConfigChannel+0x128>
            wait_loop_index--;
 8000ace:	9b00      	ldr	r3, [sp, #0]
 8000ad0:	3b01      	subs	r3, #1
 8000ad2:	e7f7      	b.n	8000ac4 <HAL_ADC_ConfigChannel+0x230>
        MODIFY_REG(hadc->Instance->SMPR1,
 8000ad4:	1c60      	adds	r0, r4, #1
 8000ad6:	6959      	ldr	r1, [r3, #20]
 8000ad8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8000adc:	2207      	movs	r2, #7
 8000ade:	4082      	lsls	r2, r0
 8000ae0:	ea21 0102 	bic.w	r1, r1, r2
 8000ae4:	fa06 f200 	lsl.w	r2, r6, r0
 8000ae8:	430a      	orrs	r2, r1
 8000aea:	615a      	str	r2, [r3, #20]
 8000aec:	e7b9      	b.n	8000a62 <HAL_ADC_ConfigChannel+0x1ce>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8000aee:	2c11      	cmp	r4, #17
 8000af0:	d104      	bne.n	8000afc <HAL_ADC_ConfigChannel+0x268>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000af2:	4a24      	ldr	r2, [pc, #144]	; (8000b84 <HAL_ADC_ConfigChannel+0x2f0>)
 8000af4:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8000af6:	f012 7f80 	tst.w	r2, #16777216	; 0x1000000
 8000afa:	e7b8      	b.n	8000a6e <HAL_ADC_ConfigChannel+0x1da>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8000afc:	2c12      	cmp	r4, #18
 8000afe:	f47f af5d 	bne.w	80009bc <HAL_ADC_ConfigChannel+0x128>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8000b02:	4a20      	ldr	r2, [pc, #128]	; (8000b84 <HAL_ADC_ConfigChannel+0x2f0>)
 8000b04:	6892      	ldr	r2, [r2, #8]
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8000b06:	f412 0f80 	tst.w	r2, #4194304	; 0x400000
 8000b0a:	e7b0      	b.n	8000a6e <HAL_ADC_ConfigChannel+0x1da>
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8000b0c:	2c11      	cmp	r4, #17
 8000b0e:	d109      	bne.n	8000b24 <HAL_ADC_ConfigChannel+0x290>
 8000b10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000b14:	f47f af52 	bne.w	80009bc <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8000b18:	4a1a      	ldr	r2, [pc, #104]	; (8000b84 <HAL_ADC_ConfigChannel+0x2f0>)
 8000b1a:	6893      	ldr	r3, [r2, #8]
 8000b1c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000b20:	6093      	str	r3, [r2, #8]
 8000b22:	e74b      	b.n	80009bc <HAL_ADC_ConfigChannel+0x128>
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8000b24:	2c12      	cmp	r4, #18
 8000b26:	f47f af49 	bne.w	80009bc <HAL_ADC_ConfigChannel+0x128>
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8000b2a:	4a16      	ldr	r2, [pc, #88]	; (8000b84 <HAL_ADC_ConfigChannel+0x2f0>)
 8000b2c:	6893      	ldr	r3, [r2, #8]
 8000b2e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000b32:	e7f5      	b.n	8000b20 <HAL_ADC_ConfigChannel+0x28c>
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b34:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000b36:	f043 0320 	orr.w	r3, r3, #32
 8000b3a:	646b      	str	r3, [r5, #68]	; 0x44
        tmp_hal_status = HAL_ERROR;
 8000b3c:	2001      	movs	r0, #1
 8000b3e:	e73e      	b.n	80009be <HAL_ADC_ConfigChannel+0x12a>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b40:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8000b42:	f043 0320 	orr.w	r3, r3, #32
 8000b46:	646b      	str	r3, [r5, #68]	; 0x44
 8000b48:	e739      	b.n	80009be <HAL_ADC_ConfigChannel+0x12a>
  __HAL_LOCK(hadc);
 8000b4a:	2002      	movs	r0, #2
 8000b4c:	e73a      	b.n	80009c4 <HAL_ADC_ConfigChannel+0x130>
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8000b4e:	2e01      	cmp	r6, #1
 8000b50:	f47f af7f 	bne.w	8000a52 <HAL_ADC_ConfigChannel+0x1be>
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000b54:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8000b58:	40a6      	lsls	r6, r4
 8000b5a:	4316      	orrs	r6, r2
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b5c:	2c09      	cmp	r4, #9
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8000b5e:	f8c3 60b0 	str.w	r6, [r3, #176]	; 0xb0
 8000b62:	688e      	ldr	r6, [r1, #8]
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8000b64:	d9b6      	bls.n	8000ad4 <HAL_ADC_ConfigChannel+0x240>
        MODIFY_REG(hadc->Instance->SMPR2,
 8000b66:	eb04 0244 	add.w	r2, r4, r4, lsl #1
 8000b6a:	6999      	ldr	r1, [r3, #24]
 8000b6c:	3a1b      	subs	r2, #27
 8000b6e:	2007      	movs	r0, #7
 8000b70:	4090      	lsls	r0, r2
 8000b72:	ea21 0100 	bic.w	r1, r1, r0
 8000b76:	fa06 f202 	lsl.w	r2, r6, r2
 8000b7a:	430a      	orrs	r2, r1
 8000b7c:	619a      	str	r2, [r3, #24]
 8000b7e:	e770      	b.n	8000a62 <HAL_ADC_ConfigChannel+0x1ce>
 8000b80:	83fff000 	.word	0x83fff000
 8000b84:	50000300 	.word	0x50000300
 8000b88:	50000100 	.word	0x50000100
 8000b8c:	20000008 	.word	0x20000008
 8000b90:	000f4240 	.word	0x000f4240

08000b94 <HAL_ADCEx_MultiModeConfigChannel>:
{
 8000b94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b96:	4603      	mov	r3, r0
 8000b98:	b097      	sub	sp, #92	; 0x5c
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b9a:	681c      	ldr	r4, [r3, #0]
  if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000b9c:	6808      	ldr	r0, [r1, #0]
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000b9e:	f1b4 4fa0 	cmp.w	r4, #1342177280	; 0x50000000
 8000ba2:	bf0c      	ite	eq
 8000ba4:	4a33      	ldreq	r2, [pc, #204]	; (8000c74 <HAL_ADCEx_MultiModeConfigChannel+0xe0>)
 8000ba6:	f04f 42a0 	movne.w	r2, #1342177280	; 0x50000000
 8000baa:	9201      	str	r2, [sp, #4]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8000bac:	9a01      	ldr	r2, [sp, #4]
 8000bae:	2a00      	cmp	r2, #0
 8000bb0:	d049      	beq.n	8000c46 <HAL_ADCEx_MultiModeConfigChannel+0xb2>
  __HAL_LOCK(hadc);
 8000bb2:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
 8000bb6:	2d01      	cmp	r5, #1
 8000bb8:	d047      	beq.n	8000c4a <HAL_ADCEx_MultiModeConfigChannel+0xb6>
 8000bba:	2501      	movs	r5, #1
 8000bbc:	f883 5040 	strb.w	r5, [r3, #64]	; 0x40
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8000bc0:	68a5      	ldr	r5, [r4, #8]
 8000bc2:	076f      	lsls	r7, r5, #29
 8000bc4:	d435      	bmi.n	8000c32 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8000bc6:	6895      	ldr	r5, [r2, #8]
 8000bc8:	076e      	lsls	r6, r5, #29
 8000bca:	d432      	bmi.n	8000c32 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8000bcc:	4e2a      	ldr	r6, [pc, #168]	; (8000c78 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8000bce:	b1a0      	cbz	r0, 8000bfa <HAL_ADCEx_MultiModeConfigChannel+0x66>
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000bd0:	684d      	ldr	r5, [r1, #4]
 8000bd2:	f8d6 e008 	ldr.w	lr, [r6, #8]
 8000bd6:	462f      	mov	r7, r5
 8000bd8:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8000bda:	ea47 3545 	orr.w	r5, r7, r5, lsl #13
 8000bde:	f42e 4760 	bic.w	r7, lr, #57344	; 0xe000
 8000be2:	433d      	orrs	r5, r7
 8000be4:	60b5      	str	r5, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000be6:	68a5      	ldr	r5, [r4, #8]
 8000be8:	f005 0503 	and.w	r5, r5, #3
 8000bec:	2d01      	cmp	r5, #1
 8000bee:	d12e      	bne.n	8000c4e <HAL_ADCEx_MultiModeConfigChannel+0xba>
 8000bf0:	6824      	ldr	r4, [r4, #0]
 8000bf2:	07e5      	lsls	r5, r4, #31
 8000bf4:	d52b      	bpl.n	8000c4e <HAL_ADCEx_MultiModeConfigChannel+0xba>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000bf6:	2000      	movs	r0, #0
 8000bf8:	e020      	b.n	8000c3c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8000bfa:	68b1      	ldr	r1, [r6, #8]
 8000bfc:	f421 4160 	bic.w	r1, r1, #57344	; 0xe000
 8000c00:	60b1      	str	r1, [r6, #8]
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8000c02:	68a1      	ldr	r1, [r4, #8]
 8000c04:	f001 0103 	and.w	r1, r1, #3
 8000c08:	2901      	cmp	r1, #1
 8000c0a:	d102      	bne.n	8000c12 <HAL_ADCEx_MultiModeConfigChannel+0x7e>
 8000c0c:	6821      	ldr	r1, [r4, #0]
 8000c0e:	07c9      	lsls	r1, r1, #31
 8000c10:	d4f1      	bmi.n	8000bf6 <HAL_ADCEx_MultiModeConfigChannel+0x62>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000c12:	6891      	ldr	r1, [r2, #8]
 8000c14:	f001 0103 	and.w	r1, r1, #3
 8000c18:	2901      	cmp	r1, #1
 8000c1a:	d102      	bne.n	8000c22 <HAL_ADCEx_MultiModeConfigChannel+0x8e>
 8000c1c:	6812      	ldr	r2, [r2, #0]
 8000c1e:	07d2      	lsls	r2, r2, #31
 8000c20:	d4e9      	bmi.n	8000bf6 <HAL_ADCEx_MultiModeConfigChannel+0x62>
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8000c22:	4915      	ldr	r1, [pc, #84]	; (8000c78 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8000c24:	688a      	ldr	r2, [r1, #8]
 8000c26:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000c2a:	f022 020f 	bic.w	r2, r2, #15
 8000c2e:	608a      	str	r2, [r1, #8]
 8000c30:	e7e1      	b.n	8000bf6 <HAL_ADCEx_MultiModeConfigChannel+0x62>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000c32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000c34:	f042 0220 	orr.w	r2, r2, #32
 8000c38:	645a      	str	r2, [r3, #68]	; 0x44
    tmp_hal_status = HAL_ERROR;
 8000c3a:	2001      	movs	r0, #1
  __HAL_UNLOCK(hadc);
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
} 
 8000c42:	b017      	add	sp, #92	; 0x5c
 8000c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    return HAL_ERROR;
 8000c46:	2001      	movs	r0, #1
 8000c48:	e7fb      	b.n	8000c42 <HAL_ADCEx_MultiModeConfigChannel+0xae>
  __HAL_LOCK(hadc);
 8000c4a:	2002      	movs	r0, #2
 8000c4c:	e7f9      	b.n	8000c42 <HAL_ADCEx_MultiModeConfigChannel+0xae>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8000c4e:	6894      	ldr	r4, [r2, #8]
 8000c50:	f004 0403 	and.w	r4, r4, #3
 8000c54:	2c01      	cmp	r4, #1
 8000c56:	d102      	bne.n	8000c5e <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8000c58:	6812      	ldr	r2, [r2, #0]
 8000c5a:	07d4      	lsls	r4, r2, #31
 8000c5c:	d4cb      	bmi.n	8000bf6 <HAL_ADCEx_MultiModeConfigChannel+0x62>
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8000c5e:	4c06      	ldr	r4, [pc, #24]	; (8000c78 <HAL_ADCEx_MultiModeConfigChannel+0xe4>)
 8000c60:	6889      	ldr	r1, [r1, #8]
 8000c62:	68a2      	ldr	r2, [r4, #8]
 8000c64:	f422 6271 	bic.w	r2, r2, #3856	; 0xf10
 8000c68:	4308      	orrs	r0, r1
 8000c6a:	f022 020f 	bic.w	r2, r2, #15
 8000c6e:	4310      	orrs	r0, r2
 8000c70:	60a0      	str	r0, [r4, #8]
 8000c72:	e7c0      	b.n	8000bf6 <HAL_ADCEx_MultiModeConfigChannel+0x62>
 8000c74:	50000100 	.word	0x50000100
 8000c78:	50000300 	.word	0x50000300

08000c7c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c7c:	4a07      	ldr	r2, [pc, #28]	; (8000c9c <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c7e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c80:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c84:	041b      	lsls	r3, r3, #16
 8000c86:	0c1b      	lsrs	r3, r3, #16
 8000c88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c8c:	0200      	lsls	r0, r0, #8
 8000c8e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c92:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000c96:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c98:	60d3      	str	r3, [r2, #12]
 8000c9a:	4770      	bx	lr
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ca0:	4b17      	ldr	r3, [pc, #92]	; (8000d00 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ca2:	b530      	push	{r4, r5, lr}
 8000ca4:	68dc      	ldr	r4, [r3, #12]
 8000ca6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000caa:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cae:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cb0:	2b04      	cmp	r3, #4
 8000cb2:	bf28      	it	cs
 8000cb4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cb6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cb8:	f04f 0501 	mov.w	r5, #1
 8000cbc:	fa05 f303 	lsl.w	r3, r5, r3
 8000cc0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cc4:	bf8c      	ite	hi
 8000cc6:	3c03      	subhi	r4, #3
 8000cc8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cca:	4019      	ands	r1, r3
 8000ccc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cce:	fa05 f404 	lsl.w	r4, r5, r4
 8000cd2:	3c01      	subs	r4, #1
 8000cd4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000cd6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd8:	ea42 0201 	orr.w	r2, r2, r1
 8000cdc:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce0:	bfaf      	iteee	ge
 8000ce2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	f000 000f 	andlt.w	r0, r0, #15
 8000cea:	4b06      	ldrlt	r3, [pc, #24]	; (8000d04 <HAL_NVIC_SetPriority+0x64>)
 8000cec:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cee:	bfa5      	ittet	ge
 8000cf0:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000cf4:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf6:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cf8:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000cfc:	bd30      	pop	{r4, r5, pc}
 8000cfe:	bf00      	nop
 8000d00:	e000ed00 	.word	0xe000ed00
 8000d04:	e000ed14 	.word	0xe000ed14

08000d08 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d08:	3801      	subs	r0, #1
 8000d0a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000d0e:	d20a      	bcs.n	8000d26 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d10:	4b06      	ldr	r3, [pc, #24]	; (8000d2c <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d12:	4a07      	ldr	r2, [pc, #28]	; (8000d30 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d14:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d16:	21f0      	movs	r1, #240	; 0xf0
 8000d18:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d1c:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d1e:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d20:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d22:	601a      	str	r2, [r3, #0]
 8000d24:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000d26:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000d28:	4770      	bx	lr
 8000d2a:	bf00      	nop
 8000d2c:	e000e010 	.word	0xe000e010
 8000d30:	e000ed00 	.word	0xe000ed00

08000d34 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d38:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d3a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d3c:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000ea4 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d40:	4a56      	ldr	r2, [pc, #344]	; (8000e9c <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d42:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d44:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000d48:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d4a:	9c01      	ldr	r4, [sp, #4]
 8000d4c:	40dc      	lsrs	r4, r3
 8000d4e:	d102      	bne.n	8000d56 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000d50:	b005      	add	sp, #20
 8000d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d56:	2401      	movs	r4, #1
 8000d58:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000d5c:	9c01      	ldr	r4, [sp, #4]
 8000d5e:	ea14 050a 	ands.w	r5, r4, sl
 8000d62:	f000 8093 	beq.w	8000e8c <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d66:	684c      	ldr	r4, [r1, #4]
 8000d68:	f024 0b10 	bic.w	fp, r4, #16
 8000d6c:	f1bb 0f02 	cmp.w	fp, #2
 8000d70:	d111      	bne.n	8000d96 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000d72:	08df      	lsrs	r7, r3, #3
 8000d74:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d78:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000d7c:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d7e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000d82:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000d86:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d8a:	690e      	ldr	r6, [r1, #16]
 8000d8c:	fa06 f60e 	lsl.w	r6, r6, lr
 8000d90:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000d94:	623e      	str	r6, [r7, #32]
 8000d96:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d9a:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000d9c:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d9e:	fa07 f70c 	lsl.w	r7, r7, ip
 8000da2:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000da4:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000da8:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000daa:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dae:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000db2:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000db6:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000dba:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dbc:	d811      	bhi.n	8000de2 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000dbe:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000dc0:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000dc4:	68ce      	ldr	r6, [r1, #12]
 8000dc6:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000dca:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000dce:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000dd0:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dd2:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000dd6:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000dda:	409e      	lsls	r6, r3
 8000ddc:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000de0:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000de2:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000de4:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000de6:	688e      	ldr	r6, [r1, #8]
 8000de8:	fa06 f60c 	lsl.w	r6, r6, ip
 8000dec:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000dee:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000df0:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000df2:	d54b      	bpl.n	8000e8c <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000df4:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000df8:	f046 0601 	orr.w	r6, r6, #1
 8000dfc:	f8c8 6018 	str.w	r6, [r8, #24]
 8000e00:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000e04:	f023 0703 	bic.w	r7, r3, #3
 8000e08:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000e0c:	f006 0601 	and.w	r6, r6, #1
 8000e10:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000e14:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e16:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000e1c:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e1e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000e22:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e26:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e2a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e2e:	d02f      	beq.n	8000e90 <HAL_GPIO_Init+0x15c>
 8000e30:	4e1b      	ldr	r6, [pc, #108]	; (8000ea0 <HAL_GPIO_Init+0x16c>)
 8000e32:	42b0      	cmp	r0, r6
 8000e34:	d02e      	beq.n	8000e94 <HAL_GPIO_Init+0x160>
 8000e36:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e3a:	42b0      	cmp	r0, r6
 8000e3c:	d02c      	beq.n	8000e98 <HAL_GPIO_Init+0x164>
 8000e3e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e42:	42b0      	cmp	r0, r6
 8000e44:	bf14      	ite	ne
 8000e46:	2605      	movne	r6, #5
 8000e48:	2603      	moveq	r6, #3
 8000e4a:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e4e:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e52:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000e54:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e56:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e58:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e5c:	bf0c      	ite	eq
 8000e5e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e60:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000e62:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000e64:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e66:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e6a:	bf0c      	ite	eq
 8000e6c:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e6e:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000e70:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000e72:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e74:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e78:	bf0c      	ite	eq
 8000e7a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e7c:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000e7e:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000e80:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e82:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000e84:	bf54      	ite	pl
 8000e86:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000e88:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000e8a:	60d6      	str	r6, [r2, #12]
    position++;
 8000e8c:	3301      	adds	r3, #1
 8000e8e:	e75c      	b.n	8000d4a <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e90:	2600      	movs	r6, #0
 8000e92:	e7da      	b.n	8000e4a <HAL_GPIO_Init+0x116>
 8000e94:	2601      	movs	r6, #1
 8000e96:	e7d8      	b.n	8000e4a <HAL_GPIO_Init+0x116>
 8000e98:	2602      	movs	r6, #2
 8000e9a:	e7d6      	b.n	8000e4a <HAL_GPIO_Init+0x116>
 8000e9c:	40010400 	.word	0x40010400
 8000ea0:	48000400 	.word	0x48000400
 8000ea4:	40021000 	.word	0x40021000

08000ea8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ea8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eac:	4605      	mov	r5, r0
 8000eae:	b918      	cbnz	r0, 8000eb8 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000eb0:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000eb2:	b002      	add	sp, #8
 8000eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000eb8:	6803      	ldr	r3, [r0, #0]
 8000eba:	07da      	lsls	r2, r3, #31
 8000ebc:	d411      	bmi.n	8000ee2 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ebe:	682b      	ldr	r3, [r5, #0]
 8000ec0:	079b      	lsls	r3, r3, #30
 8000ec2:	f100 8085 	bmi.w	8000fd0 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ec6:	682b      	ldr	r3, [r5, #0]
 8000ec8:	071c      	lsls	r4, r3, #28
 8000eca:	f100 80f6 	bmi.w	80010ba <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ece:	682b      	ldr	r3, [r5, #0]
 8000ed0:	0758      	lsls	r0, r3, #29
 8000ed2:	f100 813f 	bmi.w	8001154 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ed6:	69ea      	ldr	r2, [r5, #28]
 8000ed8:	2a00      	cmp	r2, #0
 8000eda:	f040 81d6 	bne.w	800128a <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 8000ede:	2000      	movs	r0, #0
 8000ee0:	e7e7      	b.n	8000eb2 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ee2:	4cba      	ldr	r4, [pc, #744]	; (80011cc <HAL_RCC_OscConfig+0x324>)
 8000ee4:	6863      	ldr	r3, [r4, #4]
 8000ee6:	f003 030c 	and.w	r3, r3, #12
 8000eea:	2b04      	cmp	r3, #4
 8000eec:	d007      	beq.n	8000efe <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000eee:	6863      	ldr	r3, [r4, #4]
 8000ef0:	f003 030c 	and.w	r3, r3, #12
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d116      	bne.n	8000f26 <HAL_RCC_OscConfig+0x7e>
 8000ef8:	6863      	ldr	r3, [r4, #4]
 8000efa:	03df      	lsls	r7, r3, #15
 8000efc:	d513      	bpl.n	8000f26 <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000efe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f02:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f06:	6821      	ldr	r1, [r4, #0]
 8000f08:	fa93 f3a3 	rbit	r3, r3
 8000f0c:	fab3 f383 	clz	r3, r3
 8000f10:	f003 031f 	and.w	r3, r3, #31
 8000f14:	2201      	movs	r2, #1
 8000f16:	fa02 f303 	lsl.w	r3, r2, r3
 8000f1a:	420b      	tst	r3, r1
 8000f1c:	d0cf      	beq.n	8000ebe <HAL_RCC_OscConfig+0x16>
 8000f1e:	686b      	ldr	r3, [r5, #4]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d1cc      	bne.n	8000ebe <HAL_RCC_OscConfig+0x16>
 8000f24:	e7c4      	b.n	8000eb0 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f26:	686a      	ldr	r2, [r5, #4]
 8000f28:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000f2c:	d125      	bne.n	8000f7a <HAL_RCC_OscConfig+0xd2>
 8000f2e:	6823      	ldr	r3, [r4, #0]
 8000f30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f34:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f36:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f38:	68a9      	ldr	r1, [r5, #8]
 8000f3a:	f023 030f 	bic.w	r3, r3, #15
 8000f3e:	430b      	orrs	r3, r1
 8000f40:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f42:	b352      	cbz	r2, 8000f9a <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000f44:	f7ff f9d6 	bl	80002f4 <HAL_GetTick>
 8000f48:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000f4c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f4e:	2701      	movs	r7, #1
 8000f50:	fa96 f3a6 	rbit	r3, r6
 8000f54:	6822      	ldr	r2, [r4, #0]
 8000f56:	fa96 f3a6 	rbit	r3, r6
 8000f5a:	fab3 f383 	clz	r3, r3
 8000f5e:	f003 031f 	and.w	r3, r3, #31
 8000f62:	fa07 f303 	lsl.w	r3, r7, r3
 8000f66:	4213      	tst	r3, r2
 8000f68:	d1a9      	bne.n	8000ebe <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f6a:	f7ff f9c3 	bl	80002f4 <HAL_GetTick>
 8000f6e:	eba0 0008 	sub.w	r0, r0, r8
 8000f72:	2864      	cmp	r0, #100	; 0x64
 8000f74:	d9ec      	bls.n	8000f50 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 8000f76:	2003      	movs	r0, #3
 8000f78:	e79b      	b.n	8000eb2 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f7a:	6823      	ldr	r3, [r4, #0]
 8000f7c:	b932      	cbnz	r2, 8000f8c <HAL_RCC_OscConfig+0xe4>
 8000f7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f82:	6023      	str	r3, [r4, #0]
 8000f84:	6823      	ldr	r3, [r4, #0]
 8000f86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f8a:	e7d3      	b.n	8000f34 <HAL_RCC_OscConfig+0x8c>
 8000f8c:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000f90:	d1f5      	bne.n	8000f7e <HAL_RCC_OscConfig+0xd6>
 8000f92:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f96:	6023      	str	r3, [r4, #0]
 8000f98:	e7c9      	b.n	8000f2e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000f9a:	f7ff f9ab 	bl	80002f4 <HAL_GetTick>
 8000f9e:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000fa2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fa4:	2701      	movs	r7, #1
 8000fa6:	fa96 f3a6 	rbit	r3, r6
 8000faa:	6822      	ldr	r2, [r4, #0]
 8000fac:	fa96 f3a6 	rbit	r3, r6
 8000fb0:	fab3 f383 	clz	r3, r3
 8000fb4:	f003 031f 	and.w	r3, r3, #31
 8000fb8:	fa07 f303 	lsl.w	r3, r7, r3
 8000fbc:	4213      	tst	r3, r2
 8000fbe:	f43f af7e 	beq.w	8000ebe <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc2:	f7ff f997 	bl	80002f4 <HAL_GetTick>
 8000fc6:	eba0 0008 	sub.w	r0, r0, r8
 8000fca:	2864      	cmp	r0, #100	; 0x64
 8000fcc:	d9eb      	bls.n	8000fa6 <HAL_RCC_OscConfig+0xfe>
 8000fce:	e7d2      	b.n	8000f76 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fd0:	4c7e      	ldr	r4, [pc, #504]	; (80011cc <HAL_RCC_OscConfig+0x324>)
 8000fd2:	6863      	ldr	r3, [r4, #4]
 8000fd4:	f013 0f0c 	tst.w	r3, #12
 8000fd8:	d007      	beq.n	8000fea <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fda:	6863      	ldr	r3, [r4, #4]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	2b08      	cmp	r3, #8
 8000fe2:	d122      	bne.n	800102a <HAL_RCC_OscConfig+0x182>
 8000fe4:	6863      	ldr	r3, [r4, #4]
 8000fe6:	03de      	lsls	r6, r3, #15
 8000fe8:	d41f      	bmi.n	800102a <HAL_RCC_OscConfig+0x182>
 8000fea:	2302      	movs	r3, #2
 8000fec:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000ff0:	6821      	ldr	r1, [r4, #0]
 8000ff2:	fa93 f3a3 	rbit	r3, r3
 8000ff6:	fab3 f383 	clz	r3, r3
 8000ffa:	f003 031f 	and.w	r3, r3, #31
 8000ffe:	2201      	movs	r2, #1
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	420b      	tst	r3, r1
 8001006:	d003      	beq.n	8001010 <HAL_RCC_OscConfig+0x168>
 8001008:	692b      	ldr	r3, [r5, #16]
 800100a:	4293      	cmp	r3, r2
 800100c:	f47f af50 	bne.w	8000eb0 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001010:	6821      	ldr	r1, [r4, #0]
 8001012:	23f8      	movs	r3, #248	; 0xf8
 8001014:	fa93 f3a3 	rbit	r3, r3
 8001018:	fab3 f283 	clz	r2, r3
 800101c:	696b      	ldr	r3, [r5, #20]
 800101e:	4093      	lsls	r3, r2
 8001020:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001024:	4313      	orrs	r3, r2
 8001026:	6023      	str	r3, [r4, #0]
 8001028:	e74d      	b.n	8000ec6 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800102a:	692a      	ldr	r2, [r5, #16]
 800102c:	2601      	movs	r6, #1
 800102e:	b30a      	cbz	r2, 8001074 <HAL_RCC_OscConfig+0x1cc>
 8001030:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001034:	fab3 f383 	clz	r3, r3
 8001038:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800103c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	2702      	movs	r7, #2
 8001044:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001046:	f7ff f955 	bl	80002f4 <HAL_GetTick>
 800104a:	4680      	mov	r8, r0
 800104c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001050:	6822      	ldr	r2, [r4, #0]
 8001052:	fa97 f3a7 	rbit	r3, r7
 8001056:	fab3 f383 	clz	r3, r3
 800105a:	f003 031f 	and.w	r3, r3, #31
 800105e:	fa06 f303 	lsl.w	r3, r6, r3
 8001062:	4213      	tst	r3, r2
 8001064:	d1d4      	bne.n	8001010 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001066:	f7ff f945 	bl	80002f4 <HAL_GetTick>
 800106a:	eba0 0008 	sub.w	r0, r0, r8
 800106e:	2802      	cmp	r0, #2
 8001070:	d9ec      	bls.n	800104c <HAL_RCC_OscConfig+0x1a4>
 8001072:	e780      	b.n	8000f76 <HAL_RCC_OscConfig+0xce>
 8001074:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001078:	fab3 f383 	clz	r3, r3
 800107c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001080:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001084:	009b      	lsls	r3, r3, #2
 8001086:	2702      	movs	r7, #2
 8001088:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800108a:	f7ff f933 	bl	80002f4 <HAL_GetTick>
 800108e:	4680      	mov	r8, r0
 8001090:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001094:	6822      	ldr	r2, [r4, #0]
 8001096:	fa97 f3a7 	rbit	r3, r7
 800109a:	fab3 f383 	clz	r3, r3
 800109e:	f003 031f 	and.w	r3, r3, #31
 80010a2:	fa06 f303 	lsl.w	r3, r6, r3
 80010a6:	4213      	tst	r3, r2
 80010a8:	f43f af0d 	beq.w	8000ec6 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010ac:	f7ff f922 	bl	80002f4 <HAL_GetTick>
 80010b0:	eba0 0008 	sub.w	r0, r0, r8
 80010b4:	2802      	cmp	r0, #2
 80010b6:	d9eb      	bls.n	8001090 <HAL_RCC_OscConfig+0x1e8>
 80010b8:	e75d      	b.n	8000f76 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010ba:	69aa      	ldr	r2, [r5, #24]
 80010bc:	4e43      	ldr	r6, [pc, #268]	; (80011cc <HAL_RCC_OscConfig+0x324>)
 80010be:	4944      	ldr	r1, [pc, #272]	; (80011d0 <HAL_RCC_OscConfig+0x328>)
 80010c0:	2401      	movs	r4, #1
 80010c2:	b31a      	cbz	r2, 800110c <HAL_RCC_OscConfig+0x264>
 80010c4:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80010c8:	fab3 f383 	clz	r3, r3
 80010cc:	440b      	add	r3, r1
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	2702      	movs	r7, #2
 80010d2:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80010d4:	f7ff f90e 	bl	80002f4 <HAL_GetTick>
 80010d8:	4680      	mov	r8, r0
 80010da:	fa97 f3a7 	rbit	r3, r7
 80010de:	fa97 f3a7 	rbit	r3, r7
 80010e2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80010e6:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80010e8:	fa97 f3a7 	rbit	r3, r7
 80010ec:	fab3 f383 	clz	r3, r3
 80010f0:	f003 031f 	and.w	r3, r3, #31
 80010f4:	fa04 f303 	lsl.w	r3, r4, r3
 80010f8:	4213      	tst	r3, r2
 80010fa:	f47f aee8 	bne.w	8000ece <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80010fe:	f7ff f8f9 	bl	80002f4 <HAL_GetTick>
 8001102:	eba0 0008 	sub.w	r0, r0, r8
 8001106:	2802      	cmp	r0, #2
 8001108:	d9e7      	bls.n	80010da <HAL_RCC_OscConfig+0x232>
 800110a:	e734      	b.n	8000f76 <HAL_RCC_OscConfig+0xce>
 800110c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001110:	fab3 f383 	clz	r3, r3
 8001114:	440b      	add	r3, r1
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	2702      	movs	r7, #2
 800111a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800111c:	f7ff f8ea 	bl	80002f4 <HAL_GetTick>
 8001120:	4680      	mov	r8, r0
 8001122:	fa97 f3a7 	rbit	r3, r7
 8001126:	fa97 f3a7 	rbit	r3, r7
 800112a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800112e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001130:	fa97 f3a7 	rbit	r3, r7
 8001134:	fab3 f383 	clz	r3, r3
 8001138:	f003 031f 	and.w	r3, r3, #31
 800113c:	fa04 f303 	lsl.w	r3, r4, r3
 8001140:	4213      	tst	r3, r2
 8001142:	f43f aec4 	beq.w	8000ece <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001146:	f7ff f8d5 	bl	80002f4 <HAL_GetTick>
 800114a:	eba0 0008 	sub.w	r0, r0, r8
 800114e:	2802      	cmp	r0, #2
 8001150:	d9e7      	bls.n	8001122 <HAL_RCC_OscConfig+0x27a>
 8001152:	e710      	b.n	8000f76 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001154:	4c1d      	ldr	r4, [pc, #116]	; (80011cc <HAL_RCC_OscConfig+0x324>)
 8001156:	69e3      	ldr	r3, [r4, #28]
 8001158:	00d9      	lsls	r1, r3, #3
 800115a:	d434      	bmi.n	80011c6 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 800115c:	69e3      	ldr	r3, [r4, #28]
 800115e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001162:	61e3      	str	r3, [r4, #28]
 8001164:	69e3      	ldr	r3, [r4, #28]
 8001166:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800116a:	9301      	str	r3, [sp, #4]
 800116c:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800116e:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001170:	4f18      	ldr	r7, [pc, #96]	; (80011d4 <HAL_RCC_OscConfig+0x32c>)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	05da      	lsls	r2, r3, #23
 8001176:	d52f      	bpl.n	80011d8 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001178:	68eb      	ldr	r3, [r5, #12]
 800117a:	2b01      	cmp	r3, #1
 800117c:	d13d      	bne.n	80011fa <HAL_RCC_OscConfig+0x352>
 800117e:	6a23      	ldr	r3, [r4, #32]
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001186:	f7ff f8b5 	bl	80002f4 <HAL_GetTick>
 800118a:	2702      	movs	r7, #2
 800118c:	4682      	mov	sl, r0
 800118e:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001190:	f04f 0801 	mov.w	r8, #1
 8001194:	fa97 f3a7 	rbit	r3, r7
 8001198:	fa97 f3a7 	rbit	r3, r7
 800119c:	2b00      	cmp	r3, #0
 800119e:	d06c      	beq.n	800127a <HAL_RCC_OscConfig+0x3d2>
 80011a0:	6a22      	ldr	r2, [r4, #32]
 80011a2:	fa99 f3a9 	rbit	r3, r9
 80011a6:	fab3 f383 	clz	r3, r3
 80011aa:	f003 031f 	and.w	r3, r3, #31
 80011ae:	fa08 f303 	lsl.w	r3, r8, r3
 80011b2:	4213      	tst	r3, r2
 80011b4:	d058      	beq.n	8001268 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 80011b6:	2e00      	cmp	r6, #0
 80011b8:	f43f ae8d 	beq.w	8000ed6 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011bc:	69e3      	ldr	r3, [r4, #28]
 80011be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011c2:	61e3      	str	r3, [r4, #28]
 80011c4:	e687      	b.n	8000ed6 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80011c6:	2600      	movs	r6, #0
 80011c8:	e7d2      	b.n	8001170 <HAL_RCC_OscConfig+0x2c8>
 80011ca:	bf00      	nop
 80011cc:	40021000 	.word	0x40021000
 80011d0:	10908120 	.word	0x10908120
 80011d4:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011de:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80011e0:	f7ff f888 	bl	80002f4 <HAL_GetTick>
 80011e4:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	05db      	lsls	r3, r3, #23
 80011ea:	d4c5      	bmi.n	8001178 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80011ec:	f7ff f882 	bl	80002f4 <HAL_GetTick>
 80011f0:	eba0 0008 	sub.w	r0, r0, r8
 80011f4:	2864      	cmp	r0, #100	; 0x64
 80011f6:	d9f6      	bls.n	80011e6 <HAL_RCC_OscConfig+0x33e>
 80011f8:	e6bd      	b.n	8000f76 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011fa:	bb3b      	cbnz	r3, 800124c <HAL_RCC_OscConfig+0x3a4>
 80011fc:	6a23      	ldr	r3, [r4, #32]
 80011fe:	f023 0301 	bic.w	r3, r3, #1
 8001202:	6223      	str	r3, [r4, #32]
 8001204:	6a23      	ldr	r3, [r4, #32]
 8001206:	f023 0304 	bic.w	r3, r3, #4
 800120a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800120c:	f7ff f872 	bl	80002f4 <HAL_GetTick>
 8001210:	2702      	movs	r7, #2
 8001212:	4682      	mov	sl, r0
 8001214:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001216:	f04f 0801 	mov.w	r8, #1
 800121a:	fa97 f3a7 	rbit	r3, r7
 800121e:	fa97 f3a7 	rbit	r3, r7
 8001222:	b373      	cbz	r3, 8001282 <HAL_RCC_OscConfig+0x3da>
 8001224:	6a22      	ldr	r2, [r4, #32]
 8001226:	fa99 f3a9 	rbit	r3, r9
 800122a:	fab3 f383 	clz	r3, r3
 800122e:	f003 031f 	and.w	r3, r3, #31
 8001232:	fa08 f303 	lsl.w	r3, r8, r3
 8001236:	4213      	tst	r3, r2
 8001238:	d0bd      	beq.n	80011b6 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800123a:	f7ff f85b 	bl	80002f4 <HAL_GetTick>
 800123e:	f241 3388 	movw	r3, #5000	; 0x1388
 8001242:	eba0 000a 	sub.w	r0, r0, sl
 8001246:	4298      	cmp	r0, r3
 8001248:	d9e7      	bls.n	800121a <HAL_RCC_OscConfig+0x372>
 800124a:	e694      	b.n	8000f76 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800124c:	2b05      	cmp	r3, #5
 800124e:	6a23      	ldr	r3, [r4, #32]
 8001250:	d103      	bne.n	800125a <HAL_RCC_OscConfig+0x3b2>
 8001252:	f043 0304 	orr.w	r3, r3, #4
 8001256:	6223      	str	r3, [r4, #32]
 8001258:	e791      	b.n	800117e <HAL_RCC_OscConfig+0x2d6>
 800125a:	f023 0301 	bic.w	r3, r3, #1
 800125e:	6223      	str	r3, [r4, #32]
 8001260:	6a23      	ldr	r3, [r4, #32]
 8001262:	f023 0304 	bic.w	r3, r3, #4
 8001266:	e78d      	b.n	8001184 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001268:	f7ff f844 	bl	80002f4 <HAL_GetTick>
 800126c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001270:	eba0 000a 	sub.w	r0, r0, sl
 8001274:	4298      	cmp	r0, r3
 8001276:	d98d      	bls.n	8001194 <HAL_RCC_OscConfig+0x2ec>
 8001278:	e67d      	b.n	8000f76 <HAL_RCC_OscConfig+0xce>
 800127a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800127e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001280:	e78f      	b.n	80011a2 <HAL_RCC_OscConfig+0x2fa>
 8001282:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001286:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001288:	e7cd      	b.n	8001226 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800128a:	4c41      	ldr	r4, [pc, #260]	; (8001390 <HAL_RCC_OscConfig+0x4e8>)
 800128c:	6863      	ldr	r3, [r4, #4]
 800128e:	f003 030c 	and.w	r3, r3, #12
 8001292:	2b08      	cmp	r3, #8
 8001294:	f43f ae0c 	beq.w	8000eb0 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001298:	2a02      	cmp	r2, #2
 800129a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800129e:	d152      	bne.n	8001346 <HAL_RCC_OscConfig+0x49e>
 80012a0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80012a4:	fab3 f383 	clz	r3, r3
 80012a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	2200      	movs	r2, #0
 80012b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012b6:	f7ff f81d 	bl	80002f4 <HAL_GetTick>
 80012ba:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80012be:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012c0:	2601      	movs	r6, #1
 80012c2:	fa97 f3a7 	rbit	r3, r7
 80012c6:	6822      	ldr	r2, [r4, #0]
 80012c8:	fa97 f3a7 	rbit	r3, r7
 80012cc:	fab3 f383 	clz	r3, r3
 80012d0:	f003 031f 	and.w	r3, r3, #31
 80012d4:	fa06 f303 	lsl.w	r3, r6, r3
 80012d8:	4213      	tst	r3, r2
 80012da:	d12d      	bne.n	8001338 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012dc:	6862      	ldr	r2, [r4, #4]
 80012de:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80012e0:	6a29      	ldr	r1, [r5, #32]
 80012e2:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80012e6:	430b      	orrs	r3, r1
 80012e8:	4313      	orrs	r3, r2
 80012ea:	6063      	str	r3, [r4, #4]
 80012ec:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012f0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80012f4:	fab3 f383 	clz	r3, r3
 80012f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001306:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001308:	f7fe fff4 	bl	80002f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800130c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800130e:	4607      	mov	r7, r0
 8001310:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001314:	6822      	ldr	r2, [r4, #0]
 8001316:	fa95 f3a5 	rbit	r3, r5
 800131a:	fab3 f383 	clz	r3, r3
 800131e:	f003 031f 	and.w	r3, r3, #31
 8001322:	fa06 f303 	lsl.w	r3, r6, r3
 8001326:	4213      	tst	r3, r2
 8001328:	f47f add9 	bne.w	8000ede <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800132c:	f7fe ffe2 	bl	80002f4 <HAL_GetTick>
 8001330:	1bc0      	subs	r0, r0, r7
 8001332:	2802      	cmp	r0, #2
 8001334:	d9ec      	bls.n	8001310 <HAL_RCC_OscConfig+0x468>
 8001336:	e61e      	b.n	8000f76 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001338:	f7fe ffdc 	bl	80002f4 <HAL_GetTick>
 800133c:	eba0 0008 	sub.w	r0, r0, r8
 8001340:	2802      	cmp	r0, #2
 8001342:	d9be      	bls.n	80012c2 <HAL_RCC_OscConfig+0x41a>
 8001344:	e617      	b.n	8000f76 <HAL_RCC_OscConfig+0xce>
 8001346:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800134a:	fab3 f383 	clz	r3, r3
 800134e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001352:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001356:	009b      	lsls	r3, r3, #2
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800135c:	f7fe ffca 	bl	80002f4 <HAL_GetTick>
 8001360:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001364:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001366:	2601      	movs	r6, #1
 8001368:	fa95 f3a5 	rbit	r3, r5
 800136c:	6822      	ldr	r2, [r4, #0]
 800136e:	fa95 f3a5 	rbit	r3, r5
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	f003 031f 	and.w	r3, r3, #31
 800137a:	fa06 f303 	lsl.w	r3, r6, r3
 800137e:	4213      	tst	r3, r2
 8001380:	f43f adad 	beq.w	8000ede <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001384:	f7fe ffb6 	bl	80002f4 <HAL_GetTick>
 8001388:	1bc0      	subs	r0, r0, r7
 800138a:	2802      	cmp	r0, #2
 800138c:	d9ec      	bls.n	8001368 <HAL_RCC_OscConfig+0x4c0>
 800138e:	e5f2      	b.n	8000f76 <HAL_RCC_OscConfig+0xce>
 8001390:	40021000 	.word	0x40021000

08001394 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001394:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8001396:	4c13      	ldr	r4, [pc, #76]	; (80013e4 <HAL_RCC_GetSysClockFreq+0x50>)
 8001398:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800139a:	f001 030c 	and.w	r3, r1, #12
 800139e:	2b08      	cmp	r3, #8
 80013a0:	d11e      	bne.n	80013e0 <HAL_RCC_GetSysClockFreq+0x4c>
 80013a2:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80013a6:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80013aa:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80013ae:	fab3 f383 	clz	r3, r3
 80013b2:	fa22 f303 	lsr.w	r3, r2, r3
 80013b6:	4a0c      	ldr	r2, [pc, #48]	; (80013e8 <HAL_RCC_GetSysClockFreq+0x54>)
 80013b8:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80013ba:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013bc:	220f      	movs	r2, #15
 80013be:	fa92 f2a2 	rbit	r2, r2
 80013c2:	fab2 f282 	clz	r2, r2
 80013c6:	f003 030f 	and.w	r3, r3, #15
 80013ca:	40d3      	lsrs	r3, r2
 80013cc:	4a07      	ldr	r2, [pc, #28]	; (80013ec <HAL_RCC_GetSysClockFreq+0x58>)
 80013ce:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80013d0:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80013d2:	bf4a      	itet	mi
 80013d4:	4b06      	ldrmi	r3, [pc, #24]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80013d6:	4b07      	ldrpl	r3, [pc, #28]	; (80013f4 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80013d8:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80013dc:	4358      	muls	r0, r3
 80013de:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80013e0:	4803      	ldr	r0, [pc, #12]	; (80013f0 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013e2:	bd10      	pop	{r4, pc}
 80013e4:	40021000 	.word	0x40021000
 80013e8:	080025a0 	.word	0x080025a0
 80013ec:	080025b0 	.word	0x080025b0
 80013f0:	007a1200 	.word	0x007a1200
 80013f4:	003d0900 	.word	0x003d0900

080013f8 <HAL_RCC_ClockConfig>:
{
 80013f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80013fc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80013fe:	4604      	mov	r4, r0
 8001400:	b910      	cbnz	r0, 8001408 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8001402:	2001      	movs	r0, #1
 8001404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001408:	4a4c      	ldr	r2, [pc, #304]	; (800153c <HAL_RCC_ClockConfig+0x144>)
 800140a:	6813      	ldr	r3, [r2, #0]
 800140c:	f003 0307 	and.w	r3, r3, #7
 8001410:	428b      	cmp	r3, r1
 8001412:	d32e      	bcc.n	8001472 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001414:	6822      	ldr	r2, [r4, #0]
 8001416:	0791      	lsls	r1, r2, #30
 8001418:	d436      	bmi.n	8001488 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800141a:	07d2      	lsls	r2, r2, #31
 800141c:	d43c      	bmi.n	8001498 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800141e:	4a47      	ldr	r2, [pc, #284]	; (800153c <HAL_RCC_ClockConfig+0x144>)
 8001420:	6813      	ldr	r3, [r2, #0]
 8001422:	f003 0307 	and.w	r3, r3, #7
 8001426:	429d      	cmp	r5, r3
 8001428:	d375      	bcc.n	8001516 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800142a:	6822      	ldr	r2, [r4, #0]
 800142c:	4d44      	ldr	r5, [pc, #272]	; (8001540 <HAL_RCC_ClockConfig+0x148>)
 800142e:	f012 0f04 	tst.w	r2, #4
 8001432:	d17c      	bne.n	800152e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001434:	0713      	lsls	r3, r2, #28
 8001436:	d506      	bpl.n	8001446 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001438:	686b      	ldr	r3, [r5, #4]
 800143a:	6922      	ldr	r2, [r4, #16]
 800143c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001440:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001444:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001446:	f7ff ffa5 	bl	8001394 <HAL_RCC_GetSysClockFreq>
 800144a:	686b      	ldr	r3, [r5, #4]
 800144c:	22f0      	movs	r2, #240	; 0xf0
 800144e:	fa92 f2a2 	rbit	r2, r2
 8001452:	fab2 f282 	clz	r2, r2
 8001456:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800145a:	40d3      	lsrs	r3, r2
 800145c:	4a39      	ldr	r2, [pc, #228]	; (8001544 <HAL_RCC_ClockConfig+0x14c>)
 800145e:	5cd3      	ldrb	r3, [r2, r3]
 8001460:	40d8      	lsrs	r0, r3
 8001462:	4b39      	ldr	r3, [pc, #228]	; (8001548 <HAL_RCC_ClockConfig+0x150>)
 8001464:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001466:	2000      	movs	r0, #0
 8001468:	f7fe ff02 	bl	8000270 <HAL_InitTick>
  return HAL_OK;
 800146c:	2000      	movs	r0, #0
 800146e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001472:	6813      	ldr	r3, [r2, #0]
 8001474:	f023 0307 	bic.w	r3, r3, #7
 8001478:	430b      	orrs	r3, r1
 800147a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800147c:	6813      	ldr	r3, [r2, #0]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	4299      	cmp	r1, r3
 8001484:	d1bd      	bne.n	8001402 <HAL_RCC_ClockConfig+0xa>
 8001486:	e7c5      	b.n	8001414 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001488:	492d      	ldr	r1, [pc, #180]	; (8001540 <HAL_RCC_ClockConfig+0x148>)
 800148a:	68a0      	ldr	r0, [r4, #8]
 800148c:	684b      	ldr	r3, [r1, #4]
 800148e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001492:	4303      	orrs	r3, r0
 8001494:	604b      	str	r3, [r1, #4]
 8001496:	e7c0      	b.n	800141a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001498:	6862      	ldr	r2, [r4, #4]
 800149a:	4e29      	ldr	r6, [pc, #164]	; (8001540 <HAL_RCC_ClockConfig+0x148>)
 800149c:	2a01      	cmp	r2, #1
 800149e:	d127      	bne.n	80014f0 <HAL_RCC_ClockConfig+0xf8>
 80014a0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014a4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a8:	6831      	ldr	r1, [r6, #0]
 80014aa:	fa93 f3a3 	rbit	r3, r3
 80014ae:	fab3 f383 	clz	r3, r3
 80014b2:	f003 031f 	and.w	r3, r3, #31
 80014b6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ba:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014bc:	d0a1      	beq.n	8001402 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014be:	6873      	ldr	r3, [r6, #4]
 80014c0:	f023 0303 	bic.w	r3, r3, #3
 80014c4:	431a      	orrs	r2, r3
 80014c6:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 80014c8:	f7fe ff14 	bl	80002f4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014cc:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80014d0:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014d2:	6873      	ldr	r3, [r6, #4]
 80014d4:	6862      	ldr	r2, [r4, #4]
 80014d6:	f003 030c 	and.w	r3, r3, #12
 80014da:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014de:	d09e      	beq.n	800141e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e0:	f7fe ff08 	bl	80002f4 <HAL_GetTick>
 80014e4:	1bc0      	subs	r0, r0, r7
 80014e6:	4540      	cmp	r0, r8
 80014e8:	d9f3      	bls.n	80014d2 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 80014ea:	2003      	movs	r0, #3
}
 80014ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80014f0:	2a02      	cmp	r2, #2
 80014f2:	bf0c      	ite	eq
 80014f4:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 80014f8:	2302      	movne	r3, #2
 80014fa:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014fe:	6830      	ldr	r0, [r6, #0]
 8001500:	fa93 f3a3 	rbit	r3, r3
 8001504:	fab3 f383 	clz	r3, r3
 8001508:	f003 031f 	and.w	r3, r3, #31
 800150c:	2101      	movs	r1, #1
 800150e:	fa01 f303 	lsl.w	r3, r1, r3
 8001512:	4203      	tst	r3, r0
 8001514:	e7d2      	b.n	80014bc <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001516:	6813      	ldr	r3, [r2, #0]
 8001518:	f023 0307 	bic.w	r3, r3, #7
 800151c:	432b      	orrs	r3, r5
 800151e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001520:	6813      	ldr	r3, [r2, #0]
 8001522:	f003 0307 	and.w	r3, r3, #7
 8001526:	429d      	cmp	r5, r3
 8001528:	f47f af6b 	bne.w	8001402 <HAL_RCC_ClockConfig+0xa>
 800152c:	e77d      	b.n	800142a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800152e:	686b      	ldr	r3, [r5, #4]
 8001530:	68e1      	ldr	r1, [r4, #12]
 8001532:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001536:	430b      	orrs	r3, r1
 8001538:	606b      	str	r3, [r5, #4]
 800153a:	e77b      	b.n	8001434 <HAL_RCC_ClockConfig+0x3c>
 800153c:	40022000 	.word	0x40022000
 8001540:	40021000 	.word	0x40021000
 8001544:	080025c9 	.word	0x080025c9
 8001548:	20000008 	.word	0x20000008

0800154c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800154c:	4b08      	ldr	r3, [pc, #32]	; (8001570 <HAL_RCC_GetPCLK1Freq+0x24>)
 800154e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001552:	685b      	ldr	r3, [r3, #4]
 8001554:	fa92 f2a2 	rbit	r2, r2
 8001558:	fab2 f282 	clz	r2, r2
 800155c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001560:	40d3      	lsrs	r3, r2
 8001562:	4a04      	ldr	r2, [pc, #16]	; (8001574 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001564:	5cd3      	ldrb	r3, [r2, r3]
 8001566:	4a04      	ldr	r2, [pc, #16]	; (8001578 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001568:	6810      	ldr	r0, [r2, #0]
}    
 800156a:	40d8      	lsrs	r0, r3
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000
 8001574:	080025d9 	.word	0x080025d9
 8001578:	20000008 	.word	0x20000008

0800157c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 800157e:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8001582:	685b      	ldr	r3, [r3, #4]
 8001584:	fa92 f2a2 	rbit	r2, r2
 8001588:	fab2 f282 	clz	r2, r2
 800158c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8001590:	40d3      	lsrs	r3, r2
 8001592:	4a04      	ldr	r2, [pc, #16]	; (80015a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001594:	5cd3      	ldrb	r3, [r2, r3]
 8001596:	4a04      	ldr	r2, [pc, #16]	; (80015a8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8001598:	6810      	ldr	r0, [r2, #0]
} 
 800159a:	40d8      	lsrs	r0, r3
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	080025d9 	.word	0x080025d9
 80015a8:	20000008 	.word	0x20000008

080015ac <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80015ac:	b538      	push	{r3, r4, r5, lr}
 80015ae:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80015b0:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015b2:	6921      	ldr	r1, [r4, #16]
 80015b4:	68a3      	ldr	r3, [r4, #8]
 80015b6:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80015b8:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015ba:	430b      	orrs	r3, r1
 80015bc:	6961      	ldr	r1, [r4, #20]
 80015be:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80015c0:	4949      	ldr	r1, [pc, #292]	; (80016e8 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80015c2:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80015c4:	4001      	ands	r1, r0
 80015c6:	430b      	orrs	r3, r1
 80015c8:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015ca:	686b      	ldr	r3, [r5, #4]
 80015cc:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80015ce:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80015d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80015d4:	430b      	orrs	r3, r1
 80015d6:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80015d8:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80015da:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80015dc:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80015e0:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80015e2:	430b      	orrs	r3, r1
 80015e4:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80015e6:	4b41      	ldr	r3, [pc, #260]	; (80016ec <UART_SetConfig+0x140>)
 80015e8:	429d      	cmp	r5, r3
 80015ea:	d112      	bne.n	8001612 <UART_SetConfig+0x66>
 80015ec:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 80015f0:	493f      	ldr	r1, [pc, #252]	; (80016f0 <UART_SetConfig+0x144>)
 80015f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f4:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80015f8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80015fc:	5ccb      	ldrb	r3, [r1, r3]
 80015fe:	d13b      	bne.n	8001678 <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 8001600:	2b08      	cmp	r3, #8
 8001602:	d836      	bhi.n	8001672 <UART_SetConfig+0xc6>
 8001604:	e8df f003 	tbb	[pc, r3]
 8001608:	3524210f 	.word	0x3524210f
 800160c:	3535352d 	.word	0x3535352d
 8001610:	30          	.byte	0x30
 8001611:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001612:	4b38      	ldr	r3, [pc, #224]	; (80016f4 <UART_SetConfig+0x148>)
 8001614:	429d      	cmp	r5, r3
 8001616:	d003      	beq.n	8001620 <UART_SetConfig+0x74>
 8001618:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800161c:	429d      	cmp	r5, r3
 800161e:	d15e      	bne.n	80016de <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001620:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001624:	d131      	bne.n	800168a <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001626:	f7ff ff91 	bl	800154c <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800162a:	6861      	ldr	r1, [r4, #4]
 800162c:	084a      	lsrs	r2, r1, #1
 800162e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001632:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001636:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001638:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 800163a:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 800163e:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001640:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001644:	4313      	orrs	r3, r2
 8001646:	60cb      	str	r3, [r1, #12]
 8001648:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800164a:	f7ff ff97 	bl	800157c <HAL_RCC_GetPCLK2Freq>
 800164e:	e7ec      	b.n	800162a <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001650:	6860      	ldr	r0, [r4, #4]
 8001652:	0843      	lsrs	r3, r0, #1
 8001654:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001658:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800165c:	fbb3 f3f0 	udiv	r3, r3, r0
 8001660:	e7e9      	b.n	8001636 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001662:	f7ff fe97 	bl	8001394 <HAL_RCC_GetSysClockFreq>
 8001666:	e7e0      	b.n	800162a <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001668:	6860      	ldr	r0, [r4, #4]
 800166a:	0843      	lsrs	r3, r0, #1
 800166c:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001670:	e7f4      	b.n	800165c <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8001672:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001674:	2300      	movs	r3, #0
 8001676:	e7e0      	b.n	800163a <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 8001678:	2b08      	cmp	r3, #8
 800167a:	d833      	bhi.n	80016e4 <UART_SetConfig+0x138>
 800167c:	e8df f003 	tbb	[pc, r3]
 8001680:	321b1005 	.word	0x321b1005
 8001684:	32323227 	.word	0x32323227
 8001688:	2a          	.byte	0x2a
 8001689:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800168a:	f7ff ff5f 	bl	800154c <HAL_RCC_GetPCLK1Freq>
 800168e:	6863      	ldr	r3, [r4, #4]
 8001690:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001694:	fbb0 f0f3 	udiv	r0, r0, r3
 8001698:	b280      	uxth	r0, r0
 800169a:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 800169c:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 800169e:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80016a0:	f7ff ff6c 	bl	800157c <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80016a4:	6863      	ldr	r3, [r4, #4]
 80016a6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80016aa:	fbb0 f0f3 	udiv	r0, r0, r3
 80016ae:	4b0f      	ldr	r3, [pc, #60]	; (80016ec <UART_SetConfig+0x140>)
 80016b0:	b280      	uxth	r0, r0
 80016b2:	60d8      	str	r0, [r3, #12]
 80016b4:	e7f2      	b.n	800169c <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80016b6:	6862      	ldr	r2, [r4, #4]
 80016b8:	0853      	lsrs	r3, r2, #1
 80016ba:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80016be:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80016c2:	fbb3 f3f2 	udiv	r3, r3, r2
 80016c6:	4a09      	ldr	r2, [pc, #36]	; (80016ec <UART_SetConfig+0x140>)
 80016c8:	b29b      	uxth	r3, r3
 80016ca:	60d3      	str	r3, [r2, #12]
 80016cc:	e7e6      	b.n	800169c <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80016ce:	f7ff fe61 	bl	8001394 <HAL_RCC_GetSysClockFreq>
 80016d2:	e7e7      	b.n	80016a4 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80016d4:	6862      	ldr	r2, [r4, #4]
 80016d6:	0853      	lsrs	r3, r2, #1
 80016d8:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80016dc:	e7f1      	b.n	80016c2 <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80016de:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80016e2:	d0c6      	beq.n	8001672 <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80016e4:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 80016e6:	bd38      	pop	{r3, r4, r5, pc}
 80016e8:	efff69f3 	.word	0xefff69f3
 80016ec:	40013800 	.word	0x40013800
 80016f0:	080025c0 	.word	0x080025c0
 80016f4:	40004400 	.word	0x40004400

080016f8 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80016f8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80016fa:	07da      	lsls	r2, r3, #31
{
 80016fc:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80016fe:	d506      	bpl.n	800170e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001700:	6801      	ldr	r1, [r0, #0]
 8001702:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001704:	684a      	ldr	r2, [r1, #4]
 8001706:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800170a:	4322      	orrs	r2, r4
 800170c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800170e:	079c      	lsls	r4, r3, #30
 8001710:	d506      	bpl.n	8001720 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001712:	6801      	ldr	r1, [r0, #0]
 8001714:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001716:	684a      	ldr	r2, [r1, #4]
 8001718:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800171c:	4322      	orrs	r2, r4
 800171e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001720:	0759      	lsls	r1, r3, #29
 8001722:	d506      	bpl.n	8001732 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001724:	6801      	ldr	r1, [r0, #0]
 8001726:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001728:	684a      	ldr	r2, [r1, #4]
 800172a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800172e:	4322      	orrs	r2, r4
 8001730:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001732:	071a      	lsls	r2, r3, #28
 8001734:	d506      	bpl.n	8001744 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001736:	6801      	ldr	r1, [r0, #0]
 8001738:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800173a:	684a      	ldr	r2, [r1, #4]
 800173c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001740:	4322      	orrs	r2, r4
 8001742:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001744:	06dc      	lsls	r4, r3, #27
 8001746:	d506      	bpl.n	8001756 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001748:	6801      	ldr	r1, [r0, #0]
 800174a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800174c:	688a      	ldr	r2, [r1, #8]
 800174e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001752:	4322      	orrs	r2, r4
 8001754:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001756:	0699      	lsls	r1, r3, #26
 8001758:	d506      	bpl.n	8001768 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800175a:	6801      	ldr	r1, [r0, #0]
 800175c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800175e:	688a      	ldr	r2, [r1, #8]
 8001760:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001764:	4322      	orrs	r2, r4
 8001766:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001768:	065a      	lsls	r2, r3, #25
 800176a:	d50f      	bpl.n	800178c <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800176c:	6801      	ldr	r1, [r0, #0]
 800176e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001770:	684a      	ldr	r2, [r1, #4]
 8001772:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001776:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001778:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800177c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800177e:	d105      	bne.n	800178c <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001780:	684a      	ldr	r2, [r1, #4]
 8001782:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001784:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001788:	4322      	orrs	r2, r4
 800178a:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800178c:	061b      	lsls	r3, r3, #24
 800178e:	d506      	bpl.n	800179e <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001790:	6802      	ldr	r2, [r0, #0]
 8001792:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001794:	6853      	ldr	r3, [r2, #4]
 8001796:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 800179a:	430b      	orrs	r3, r1
 800179c:	6053      	str	r3, [r2, #4]
 800179e:	bd10      	pop	{r4, pc}

080017a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80017a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017a4:	9d06      	ldr	r5, [sp, #24]
 80017a6:	4604      	mov	r4, r0
 80017a8:	460f      	mov	r7, r1
 80017aa:	4616      	mov	r6, r2
 80017ac:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017ae:	6821      	ldr	r1, [r4, #0]
 80017b0:	69ca      	ldr	r2, [r1, #28]
 80017b2:	ea37 0302 	bics.w	r3, r7, r2
 80017b6:	bf0c      	ite	eq
 80017b8:	2201      	moveq	r2, #1
 80017ba:	2200      	movne	r2, #0
 80017bc:	42b2      	cmp	r2, r6
 80017be:	d002      	beq.n	80017c6 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80017c0:	2000      	movs	r0, #0
}
 80017c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80017c6:	1c6b      	adds	r3, r5, #1
 80017c8:	d0f2      	beq.n	80017b0 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80017ca:	b99d      	cbnz	r5, 80017f4 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80017d4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	f022 0201 	bic.w	r2, r2, #1
 80017dc:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80017de:	2320      	movs	r3, #32
 80017e0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80017e4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 80017e8:	2300      	movs	r3, #0
 80017ea:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 80017ee:	2003      	movs	r0, #3
 80017f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80017f4:	f7fe fd7e 	bl	80002f4 <HAL_GetTick>
 80017f8:	eba0 0008 	sub.w	r0, r0, r8
 80017fc:	4285      	cmp	r5, r0
 80017fe:	d2d6      	bcs.n	80017ae <UART_WaitOnFlagUntilTimeout+0xe>
 8001800:	e7e4      	b.n	80017cc <UART_WaitOnFlagUntilTimeout+0x2c>

08001802 <HAL_UART_Transmit>:
{
 8001802:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001806:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001808:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800180c:	2b20      	cmp	r3, #32
{
 800180e:	4604      	mov	r4, r0
 8001810:	460d      	mov	r5, r1
 8001812:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001814:	d14c      	bne.n	80018b0 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001816:	2900      	cmp	r1, #0
 8001818:	d048      	beq.n	80018ac <HAL_UART_Transmit+0xaa>
 800181a:	2a00      	cmp	r2, #0
 800181c:	d046      	beq.n	80018ac <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800181e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001822:	2b01      	cmp	r3, #1
 8001824:	d044      	beq.n	80018b0 <HAL_UART_Transmit+0xae>
 8001826:	2301      	movs	r3, #1
 8001828:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800182c:	2300      	movs	r3, #0
 800182e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001830:	2321      	movs	r3, #33	; 0x21
 8001832:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8001836:	f7fe fd5d 	bl	80002f4 <HAL_GetTick>
    huart->TxXferSize = Size;
 800183a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800183e:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001840:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001844:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001848:	b292      	uxth	r2, r2
 800184a:	b962      	cbnz	r2, 8001866 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800184c:	9700      	str	r7, [sp, #0]
 800184e:	4633      	mov	r3, r6
 8001850:	2140      	movs	r1, #64	; 0x40
 8001852:	4620      	mov	r0, r4
 8001854:	f7ff ffa4 	bl	80017a0 <UART_WaitOnFlagUntilTimeout>
 8001858:	b998      	cbnz	r0, 8001882 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 800185a:	2320      	movs	r3, #32
 800185c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8001860:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8001864:	e00e      	b.n	8001884 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8001866:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800186a:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 800186c:	3b01      	subs	r3, #1
 800186e:	b29b      	uxth	r3, r3
 8001870:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001874:	2200      	movs	r2, #0
 8001876:	4633      	mov	r3, r6
 8001878:	2180      	movs	r1, #128	; 0x80
 800187a:	4620      	mov	r0, r4
 800187c:	f7ff ff90 	bl	80017a0 <UART_WaitOnFlagUntilTimeout>
 8001880:	b118      	cbz	r0, 800188a <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8001882:	2003      	movs	r0, #3
}
 8001884:	b002      	add	sp, #8
 8001886:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800188a:	68a3      	ldr	r3, [r4, #8]
 800188c:	6822      	ldr	r2, [r4, #0]
 800188e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001892:	d107      	bne.n	80018a4 <HAL_UART_Transmit+0xa2>
 8001894:	6923      	ldr	r3, [r4, #16]
 8001896:	b92b      	cbnz	r3, 80018a4 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001898:	f835 3b02 	ldrh.w	r3, [r5], #2
 800189c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018a0:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 80018a2:	e7cf      	b.n	8001844 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80018a4:	782b      	ldrb	r3, [r5, #0]
 80018a6:	8513      	strh	r3, [r2, #40]	; 0x28
 80018a8:	3501      	adds	r5, #1
 80018aa:	e7cb      	b.n	8001844 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80018ac:	2001      	movs	r0, #1
 80018ae:	e7e9      	b.n	8001884 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 80018b0:	2002      	movs	r0, #2
 80018b2:	e7e7      	b.n	8001884 <HAL_UART_Transmit+0x82>

080018b4 <UART_CheckIdleState>:
{
 80018b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80018b6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80018b8:	2600      	movs	r6, #0
 80018ba:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 80018bc:	f7fe fd1a 	bl	80002f4 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80018c0:	6823      	ldr	r3, [r4, #0]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 80018c6:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80018c8:	d417      	bmi.n	80018fa <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80018ca:	6823      	ldr	r3, [r4, #0]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	075b      	lsls	r3, r3, #29
 80018d0:	d50a      	bpl.n	80018e8 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80018d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80018d6:	9300      	str	r3, [sp, #0]
 80018d8:	2200      	movs	r2, #0
 80018da:	462b      	mov	r3, r5
 80018dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80018e0:	4620      	mov	r0, r4
 80018e2:	f7ff ff5d 	bl	80017a0 <UART_WaitOnFlagUntilTimeout>
 80018e6:	b9a0      	cbnz	r0, 8001912 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80018e8:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80018ea:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80018ec:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80018f0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80018f4:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80018f8:	e00c      	b.n	8001914 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80018fa:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80018fe:	9300      	str	r3, [sp, #0]
 8001900:	4632      	mov	r2, r6
 8001902:	4603      	mov	r3, r0
 8001904:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001908:	4620      	mov	r0, r4
 800190a:	f7ff ff49 	bl	80017a0 <UART_WaitOnFlagUntilTimeout>
 800190e:	2800      	cmp	r0, #0
 8001910:	d0db      	beq.n	80018ca <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001912:	2003      	movs	r0, #3
}
 8001914:	b002      	add	sp, #8
 8001916:	bd70      	pop	{r4, r5, r6, pc}

08001918 <HAL_UART_Init>:
{
 8001918:	b510      	push	{r4, lr}
  if(huart == NULL)
 800191a:	4604      	mov	r4, r0
 800191c:	b360      	cbz	r0, 8001978 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800191e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001922:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001926:	b91b      	cbnz	r3, 8001930 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001928:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800192c:	f000 f93a 	bl	8001ba4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001930:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001932:	2324      	movs	r3, #36	; 0x24
 8001934:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001938:	6813      	ldr	r3, [r2, #0]
 800193a:	f023 0301 	bic.w	r3, r3, #1
 800193e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001940:	4620      	mov	r0, r4
 8001942:	f7ff fe33 	bl	80015ac <UART_SetConfig>
 8001946:	2801      	cmp	r0, #1
 8001948:	d016      	beq.n	8001978 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800194a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800194c:	b113      	cbz	r3, 8001954 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800194e:	4620      	mov	r0, r4
 8001950:	f7ff fed2 	bl	80016f8 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001954:	6823      	ldr	r3, [r4, #0]
 8001956:	685a      	ldr	r2, [r3, #4]
 8001958:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800195c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800195e:	689a      	ldr	r2, [r3, #8]
 8001960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001964:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001966:	681a      	ldr	r2, [r3, #0]
 8001968:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800196c:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800196e:	601a      	str	r2, [r3, #0]
}
 8001970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001974:	f7ff bf9e 	b.w	80018b4 <UART_CheckIdleState>
}
 8001978:	2001      	movs	r0, #1
 800197a:	bd10      	pop	{r4, pc}

0800197c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800197c:	b510      	push	{r4, lr}
 800197e:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001980:	2228      	movs	r2, #40	; 0x28
 8001982:	2100      	movs	r1, #0
 8001984:	a806      	add	r0, sp, #24
 8001986:	f000 f9cb 	bl	8001d20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800198a:	2214      	movs	r2, #20
 800198c:	2100      	movs	r1, #0
 800198e:	a801      	add	r0, sp, #4
 8001990:	f000 f9c6 	bl	8001d20 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001994:	2301      	movs	r3, #1
 8001996:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001998:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800199a:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800199c:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800199e:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80019a0:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80019a4:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80019a6:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019a8:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80019aa:	f7ff fa7d 	bl	8000ea8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80019ae:	230f      	movs	r3, #15
 80019b0:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019b2:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019b6:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019b8:	4621      	mov	r1, r4
 80019ba:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019bc:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019be:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019c0:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019c2:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019c4:	f7ff fd18 	bl	80013f8 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 80019c8:	b010      	add	sp, #64	; 0x40
 80019ca:	bd10      	pop	{r4, pc}

080019cc <tx_UART_int>:

}

/* USER CODE BEGIN 4 */
void tx_UART_int(UART_HandleTypeDef *huart, int data, uint16_t Size, uint32_t Timeout)
{
 80019cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	char data_char[Size+2];		// String de chars
 80019d0:	1c95      	adds	r5, r2, #2
 80019d2:	1c56      	adds	r6, r2, #1
 80019d4:	3209      	adds	r2, #9
 80019d6:	f022 0207 	bic.w	r2, r2, #7
{
 80019da:	af00      	add	r7, sp, #0
	char data_char[Size+2];		// String de chars
 80019dc:	ebad 0d02 	sub.w	sp, sp, r2
 80019e0:	46e9      	mov	r9, sp
{
 80019e2:	4604      	mov	r4, r0
	uint8_t data_tx[Size+2];	// String de uint8_t
 80019e4:	ebad 0d02 	sub.w	sp, sp, r2
	uint8_t i;

	sprintf(data_char,"%d\r\n", data);	// Cada numero del int en un char
 80019e8:	4648      	mov	r0, r9
 80019ea:	460a      	mov	r2, r1
 80019ec:	490b      	ldr	r1, [pc, #44]	; (8001a1c <tx_UART_int+0x50>)
 80019ee:	f000 f99f 	bl	8001d30 <siprintf>
	uint8_t data_tx[Size+2];	// String de uint8_t
 80019f2:	46e8      	mov	r8, sp

	for(i=0; i<Size+2; i++ ) {			// Casting de char a uint8_t
 80019f4:	2200      	movs	r2, #0
 80019f6:	b2d3      	uxtb	r3, r2
 80019f8:	429e      	cmp	r6, r3
 80019fa:	f102 0201 	add.w	r2, r2, #1
 80019fe:	da08      	bge.n	8001a12 <tx_UART_int+0x46>
		data_tx[i] = (uint8_t) data_char[i];
	}
	HAL_UART_Transmit(huart,data_tx,sizeof(data_tx), 10);	// TX por UART del array de uint8_t
 8001a00:	230a      	movs	r3, #10
 8001a02:	b2aa      	uxth	r2, r5
 8001a04:	4641      	mov	r1, r8
 8001a06:	4620      	mov	r0, r4
 8001a08:	f7ff fefb 	bl	8001802 <HAL_UART_Transmit>
}
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		data_tx[i] = (uint8_t) data_char[i];
 8001a12:	f819 1003 	ldrb.w	r1, [r9, r3]
 8001a16:	f808 1003 	strb.w	r1, [r8, r3]
 8001a1a:	e7ec      	b.n	80019f6 <tx_UART_int+0x2a>
 8001a1c:	080025c4 	.word	0x080025c4

08001a20 <main>:
{
 8001a20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a22:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001a24:	f7fe fc48 	bl	80002b8 <HAL_Init>
  SystemClock_Config();
 8001a28:	f7ff ffa8 	bl	800197c <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a2c:	4b36      	ldr	r3, [pc, #216]	; (8001b08 <main+0xe8>)
  huart2.Instance = USART2;
 8001a2e:	4e37      	ldr	r6, [pc, #220]	; (8001b0c <main+0xec>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a30:	695a      	ldr	r2, [r3, #20]
  hadc1.Instance = ADC1;
 8001a32:	4d37      	ldr	r5, [pc, #220]	; (8001b10 <main+0xf0>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001a34:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001a38:	615a      	str	r2, [r3, #20]
 8001a3a:	695a      	ldr	r2, [r3, #20]
 8001a3c:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001a40:	9201      	str	r2, [sp, #4]
 8001a42:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a44:	695a      	ldr	r2, [r3, #20]
 8001a46:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a4a:	615a      	str	r2, [r3, #20]
 8001a4c:	695b      	ldr	r3, [r3, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a4e:	4a31      	ldr	r2, [pc, #196]	; (8001b14 <main+0xf4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a54:	9302      	str	r3, [sp, #8]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a56:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a58:	9b02      	ldr	r3, [sp, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a5a:	60f4      	str	r4, [r6, #12]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a5c:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001a60:	e886 001c 	stmia.w	r6, {r2, r3, r4}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a64:	4630      	mov	r0, r6
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a66:	230c      	movs	r3, #12
 8001a68:	6173      	str	r3, [r6, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a6a:	6134      	str	r4, [r6, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a6c:	61b4      	str	r4, [r6, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a6e:	61f4      	str	r4, [r6, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001a70:	6234      	str	r4, [r6, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001a72:	6274      	str	r4, [r6, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a74:	f7ff ff50 	bl	8001918 <HAL_UART_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a78:	2218      	movs	r2, #24
 8001a7a:	eb0d 0002 	add.w	r0, sp, r2
 8001a7e:	4621      	mov	r1, r4
  ADC_MultiModeTypeDef multimode = {0};
 8001a80:	9403      	str	r4, [sp, #12]
 8001a82:	9404      	str	r4, [sp, #16]
 8001a84:	9405      	str	r4, [sp, #20]
  ADC_ChannelConfTypeDef sConfig = {0};
 8001a86:	f000 f94b 	bl	8001d20 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a8a:	f04f 41a0 	mov.w	r1, #1342177280	; 0x50000000
 8001a8e:	f44f 3340 	mov.w	r3, #196608	; 0x30000
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001a92:	2701      	movs	r7, #1
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001a94:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001a98:	4628      	mov	r0, r5
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001a9a:	2304      	movs	r3, #4
 8001a9c:	616b      	str	r3, [r5, #20]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001a9e:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001aa0:	612c      	str	r4, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001aa2:	61ec      	str	r4, [r5, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001aa4:	626c      	str	r4, [r5, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001aa6:	632c      	str	r4, [r5, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001aa8:	62ef      	str	r7, [r5, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001aaa:	60ec      	str	r4, [r5, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001aac:	622f      	str	r7, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001aae:	636c      	str	r4, [r5, #52]	; 0x34
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001ab0:	61ac      	str	r4, [r5, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8001ab2:	63ac      	str	r4, [r5, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001ab4:	f7fe fcf4 	bl	80004a0 <HAL_ADC_Init>
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001ab8:	a903      	add	r1, sp, #12
 8001aba:	4628      	mov	r0, r5
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001abc:	9403      	str	r4, [sp, #12]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001abe:	f7ff f869 	bl	8000b94 <HAL_ADCEx_MultiModeConfigChannel>
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ac2:	a906      	add	r1, sp, #24
 8001ac4:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8001ac6:	9706      	str	r7, [sp, #24]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001ac8:	9707      	str	r7, [sp, #28]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001aca:	9409      	str	r4, [sp, #36]	; 0x24
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001acc:	9408      	str	r4, [sp, #32]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001ace:	940a      	str	r4, [sp, #40]	; 0x28
  sConfig.Offset = 0;
 8001ad0:	940b      	str	r4, [sp, #44]	; 0x2c
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001ad2:	f7fe fedf 	bl	8000894 <HAL_ADC_ConfigChannel>
	  HAL_ADC_Start(&hadc1);
 8001ad6:	4628      	mov	r0, r5
 8001ad8:	f7fe fdda 	bl	8000690 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8001adc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001ae0:	4628      	mov	r0, r5
 8001ae2:	f7fe fe5b 	bl	800079c <HAL_ADC_PollForConversion>
	  data_adc = HAL_ADC_GetValue(&hadc1);
 8001ae6:	4628      	mov	r0, r5
 8001ae8:	f7fe fed0 	bl	800088c <HAL_ADC_GetValue>
 8001aec:	4604      	mov	r4, r0
	  HAL_ADC_Stop(&hadc1);
 8001aee:	4628      	mov	r0, r5
 8001af0:	f7fe fe34 	bl	800075c <HAL_ADC_Stop>
	  tx_UART_int(&huart2, data_adc, 4, 10);
 8001af4:	4630      	mov	r0, r6
 8001af6:	230a      	movs	r3, #10
 8001af8:	2204      	movs	r2, #4
 8001afa:	4621      	mov	r1, r4
 8001afc:	f7ff ff66 	bl	80019cc <tx_UART_int>
	  HAL_Delay(100);
 8001b00:	2064      	movs	r0, #100	; 0x64
 8001b02:	f7fe fbfd 	bl	8000300 <HAL_Delay>
 8001b06:	e7e6      	b.n	8001ad6 <main+0xb6>
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	200000f0 	.word	0x200000f0
 8001b10:	2000009c 	.word	0x2000009c
 8001b14:	40004400 	.word	0x40004400

08001b18 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b18:	4b0a      	ldr	r3, [pc, #40]	; (8001b44 <HAL_MspInit+0x2c>)
 8001b1a:	699a      	ldr	r2, [r3, #24]
 8001b1c:	f042 0201 	orr.w	r2, r2, #1
 8001b20:	619a      	str	r2, [r3, #24]
 8001b22:	699a      	ldr	r2, [r3, #24]
{
 8001b24:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b26:	f002 0201 	and.w	r2, r2, #1
 8001b2a:	9200      	str	r2, [sp, #0]
 8001b2c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b2e:	69da      	ldr	r2, [r3, #28]
 8001b30:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b34:	61da      	str	r2, [r3, #28]
 8001b36:	69db      	ldr	r3, [r3, #28]
 8001b38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b3c:	9301      	str	r3, [sp, #4]
 8001b3e:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b40:	b002      	add	sp, #8
 8001b42:	4770      	bx	lr
 8001b44:	40021000 	.word	0x40021000

08001b48 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001b48:	b510      	push	{r4, lr}
 8001b4a:	4604      	mov	r4, r0
 8001b4c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b4e:	2214      	movs	r2, #20
 8001b50:	2100      	movs	r1, #0
 8001b52:	a803      	add	r0, sp, #12
 8001b54:	f000 f8e4 	bl	8001d20 <memset>
  if(hadc->Instance==ADC1)
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001b5e:	d11e      	bne.n	8001b9e <HAL_ADC_MspInit+0x56>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b60:	f103 4370 	add.w	r3, r3, #4026531840	; 0xf0000000
 8001b64:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b68:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC12_CLK_ENABLE();
 8001b6a:	695a      	ldr	r2, [r3, #20]
 8001b6c:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001b70:	615a      	str	r2, [r3, #20]
 8001b72:	695a      	ldr	r2, [r3, #20]
 8001b74:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 8001b78:	9201      	str	r2, [sp, #4]
 8001b7a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b7c:	695a      	ldr	r2, [r3, #20]
 8001b7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001b82:	615a      	str	r2, [r3, #20]
 8001b84:	695b      	ldr	r3, [r3, #20]
 8001b86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b8a:	9302      	str	r3, [sp, #8]
 8001b8c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001b96:	2303      	movs	r3, #3
 8001b98:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b9a:	f7ff f8cb 	bl	8000d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001b9e:	b008      	add	sp, #32
 8001ba0:	bd10      	pop	{r4, pc}
	...

08001ba4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001ba4:	b510      	push	{r4, lr}
 8001ba6:	4604      	mov	r4, r0
 8001ba8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	2214      	movs	r2, #20
 8001bac:	2100      	movs	r1, #0
 8001bae:	a803      	add	r0, sp, #12
 8001bb0:	f000 f8b6 	bl	8001d20 <memset>
  if(huart->Instance==USART2)
 8001bb4:	6822      	ldr	r2, [r4, #0]
 8001bb6:	4b13      	ldr	r3, [pc, #76]	; (8001c04 <HAL_UART_MspInit+0x60>)
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d121      	bne.n	8001c00 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bbc:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc0:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8001bc2:	69da      	ldr	r2, [r3, #28]
 8001bc4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001bc8:	61da      	str	r2, [r3, #28]
 8001bca:	69da      	ldr	r2, [r3, #28]
 8001bcc:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001bd0:	9201      	str	r2, [sp, #4]
 8001bd2:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bd4:	695a      	ldr	r2, [r3, #20]
 8001bd6:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001bda:	615a      	str	r2, [r3, #20]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001be2:	9302      	str	r3, [sp, #8]
 8001be4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001be6:	f248 0304 	movw	r3, #32772	; 0x8004
 8001bea:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bec:	2302      	movs	r3, #2
 8001bee:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bf4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001bf8:	2307      	movs	r3, #7
 8001bfa:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bfc:	f7ff f89a 	bl	8000d34 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001c00:	b008      	add	sp, #32
 8001c02:	bd10      	pop	{r4, pc}
 8001c04:	40004400 	.word	0x40004400

08001c08 <NMI_Handler>:
 8001c08:	4770      	bx	lr

08001c0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c0a:	e7fe      	b.n	8001c0a <HardFault_Handler>

08001c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c0c:	e7fe      	b.n	8001c0c <MemManage_Handler>

08001c0e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001c0e:	e7fe      	b.n	8001c0e <BusFault_Handler>

08001c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001c10:	e7fe      	b.n	8001c10 <UsageFault_Handler>

08001c12 <SVC_Handler>:
 8001c12:	4770      	bx	lr

08001c14 <DebugMon_Handler>:
 8001c14:	4770      	bx	lr

08001c16 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001c16:	4770      	bx	lr

08001c18 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001c18:	f7fe bb60 	b.w	80002dc <HAL_IncTick>

08001c1c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001c1c:	4915      	ldr	r1, [pc, #84]	; (8001c74 <SystemInit+0x58>)
 8001c1e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001c22:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c26:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001c2a:	4b13      	ldr	r3, [pc, #76]	; (8001c78 <SystemInit+0x5c>)
 8001c2c:	681a      	ldr	r2, [r3, #0]
 8001c2e:	f042 0201 	orr.w	r2, r2, #1
 8001c32:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001c34:	6858      	ldr	r0, [r3, #4]
 8001c36:	4a11      	ldr	r2, [pc, #68]	; (8001c7c <SystemInit+0x60>)
 8001c38:	4002      	ands	r2, r0
 8001c3a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001c42:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001c46:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001c48:	681a      	ldr	r2, [r3, #0]
 8001c4a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001c4e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001c50:	685a      	ldr	r2, [r3, #4]
 8001c52:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001c56:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001c58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c5a:	f022 020f 	bic.w	r2, r2, #15
 8001c5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001c60:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001c62:	4a07      	ldr	r2, [pc, #28]	; (8001c80 <SystemInit+0x64>)
 8001c64:	4002      	ands	r2, r0
 8001c66:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001c68:	2200      	movs	r2, #0
 8001c6a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001c6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001c70:	608b      	str	r3, [r1, #8]
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	f87fc00c 	.word	0xf87fc00c
 8001c80:	ff00fccc 	.word	0xff00fccc

08001c84 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001c84:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001cbc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c88:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c8a:	e003      	b.n	8001c94 <LoopCopyDataInit>

08001c8c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c8c:	4b0c      	ldr	r3, [pc, #48]	; (8001cc0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c8e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c90:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c92:	3104      	adds	r1, #4

08001c94 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c94:	480b      	ldr	r0, [pc, #44]	; (8001cc4 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c96:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c98:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c9a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c9c:	d3f6      	bcc.n	8001c8c <CopyDataInit>
	ldr	r2, =_sbss
 8001c9e:	4a0b      	ldr	r2, [pc, #44]	; (8001ccc <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ca0:	e002      	b.n	8001ca8 <LoopFillZerobss>

08001ca2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ca2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ca4:	f842 3b04 	str.w	r3, [r2], #4

08001ca8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001ca8:	4b09      	ldr	r3, [pc, #36]	; (8001cd0 <LoopForever+0x16>)
	cmp	r2, r3
 8001caa:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001cac:	d3f9      	bcc.n	8001ca2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001cae:	f7ff ffb5 	bl	8001c1c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001cb2:	f000 f811 	bl	8001cd8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001cb6:	f7ff feb3 	bl	8001a20 <main>

08001cba <LoopForever>:

LoopForever:
    b LoopForever
 8001cba:	e7fe      	b.n	8001cba <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001cbc:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001cc0:	0800261c 	.word	0x0800261c
	ldr	r0, =_sdata
 8001cc4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001cc8:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001ccc:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001cd0:	20000164 	.word	0x20000164

08001cd4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001cd4:	e7fe      	b.n	8001cd4 <ADC1_2_IRQHandler>
	...

08001cd8 <__libc_init_array>:
 8001cd8:	b570      	push	{r4, r5, r6, lr}
 8001cda:	4e0d      	ldr	r6, [pc, #52]	; (8001d10 <__libc_init_array+0x38>)
 8001cdc:	4c0d      	ldr	r4, [pc, #52]	; (8001d14 <__libc_init_array+0x3c>)
 8001cde:	1ba4      	subs	r4, r4, r6
 8001ce0:	10a4      	asrs	r4, r4, #2
 8001ce2:	2500      	movs	r5, #0
 8001ce4:	42a5      	cmp	r5, r4
 8001ce6:	d109      	bne.n	8001cfc <__libc_init_array+0x24>
 8001ce8:	4e0b      	ldr	r6, [pc, #44]	; (8001d18 <__libc_init_array+0x40>)
 8001cea:	4c0c      	ldr	r4, [pc, #48]	; (8001d1c <__libc_init_array+0x44>)
 8001cec:	f000 fc4c 	bl	8002588 <_init>
 8001cf0:	1ba4      	subs	r4, r4, r6
 8001cf2:	10a4      	asrs	r4, r4, #2
 8001cf4:	2500      	movs	r5, #0
 8001cf6:	42a5      	cmp	r5, r4
 8001cf8:	d105      	bne.n	8001d06 <__libc_init_array+0x2e>
 8001cfa:	bd70      	pop	{r4, r5, r6, pc}
 8001cfc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d00:	4798      	blx	r3
 8001d02:	3501      	adds	r5, #1
 8001d04:	e7ee      	b.n	8001ce4 <__libc_init_array+0xc>
 8001d06:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001d0a:	4798      	blx	r3
 8001d0c:	3501      	adds	r5, #1
 8001d0e:	e7f2      	b.n	8001cf6 <__libc_init_array+0x1e>
 8001d10:	08002614 	.word	0x08002614
 8001d14:	08002614 	.word	0x08002614
 8001d18:	08002614 	.word	0x08002614
 8001d1c:	08002618 	.word	0x08002618

08001d20 <memset>:
 8001d20:	4402      	add	r2, r0
 8001d22:	4603      	mov	r3, r0
 8001d24:	4293      	cmp	r3, r2
 8001d26:	d100      	bne.n	8001d2a <memset+0xa>
 8001d28:	4770      	bx	lr
 8001d2a:	f803 1b01 	strb.w	r1, [r3], #1
 8001d2e:	e7f9      	b.n	8001d24 <memset+0x4>

08001d30 <siprintf>:
 8001d30:	b40e      	push	{r1, r2, r3}
 8001d32:	b500      	push	{lr}
 8001d34:	b09c      	sub	sp, #112	; 0x70
 8001d36:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001d3a:	ab1d      	add	r3, sp, #116	; 0x74
 8001d3c:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001d40:	9002      	str	r0, [sp, #8]
 8001d42:	9006      	str	r0, [sp, #24]
 8001d44:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001d48:	480a      	ldr	r0, [pc, #40]	; (8001d74 <siprintf+0x44>)
 8001d4a:	9104      	str	r1, [sp, #16]
 8001d4c:	9107      	str	r1, [sp, #28]
 8001d4e:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001d52:	f853 2b04 	ldr.w	r2, [r3], #4
 8001d56:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001d5a:	6800      	ldr	r0, [r0, #0]
 8001d5c:	9301      	str	r3, [sp, #4]
 8001d5e:	a902      	add	r1, sp, #8
 8001d60:	f000 f866 	bl	8001e30 <_svfiprintf_r>
 8001d64:	9b02      	ldr	r3, [sp, #8]
 8001d66:	2200      	movs	r2, #0
 8001d68:	701a      	strb	r2, [r3, #0]
 8001d6a:	b01c      	add	sp, #112	; 0x70
 8001d6c:	f85d eb04 	ldr.w	lr, [sp], #4
 8001d70:	b003      	add	sp, #12
 8001d72:	4770      	bx	lr
 8001d74:	2000000c 	.word	0x2000000c

08001d78 <__ssputs_r>:
 8001d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001d7c:	688e      	ldr	r6, [r1, #8]
 8001d7e:	429e      	cmp	r6, r3
 8001d80:	4682      	mov	sl, r0
 8001d82:	460c      	mov	r4, r1
 8001d84:	4691      	mov	r9, r2
 8001d86:	4698      	mov	r8, r3
 8001d88:	d835      	bhi.n	8001df6 <__ssputs_r+0x7e>
 8001d8a:	898a      	ldrh	r2, [r1, #12]
 8001d8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001d90:	d031      	beq.n	8001df6 <__ssputs_r+0x7e>
 8001d92:	6825      	ldr	r5, [r4, #0]
 8001d94:	6909      	ldr	r1, [r1, #16]
 8001d96:	1a6f      	subs	r7, r5, r1
 8001d98:	6965      	ldr	r5, [r4, #20]
 8001d9a:	2302      	movs	r3, #2
 8001d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001da0:	fb95 f5f3 	sdiv	r5, r5, r3
 8001da4:	f108 0301 	add.w	r3, r8, #1
 8001da8:	443b      	add	r3, r7
 8001daa:	429d      	cmp	r5, r3
 8001dac:	bf38      	it	cc
 8001dae:	461d      	movcc	r5, r3
 8001db0:	0553      	lsls	r3, r2, #21
 8001db2:	d531      	bpl.n	8001e18 <__ssputs_r+0xa0>
 8001db4:	4629      	mov	r1, r5
 8001db6:	f000 fb39 	bl	800242c <_malloc_r>
 8001dba:	4606      	mov	r6, r0
 8001dbc:	b950      	cbnz	r0, 8001dd4 <__ssputs_r+0x5c>
 8001dbe:	230c      	movs	r3, #12
 8001dc0:	f8ca 3000 	str.w	r3, [sl]
 8001dc4:	89a3      	ldrh	r3, [r4, #12]
 8001dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001dca:	81a3      	strh	r3, [r4, #12]
 8001dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8001dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001dd4:	463a      	mov	r2, r7
 8001dd6:	6921      	ldr	r1, [r4, #16]
 8001dd8:	f000 fab4 	bl	8002344 <memcpy>
 8001ddc:	89a3      	ldrh	r3, [r4, #12]
 8001dde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001de6:	81a3      	strh	r3, [r4, #12]
 8001de8:	6126      	str	r6, [r4, #16]
 8001dea:	6165      	str	r5, [r4, #20]
 8001dec:	443e      	add	r6, r7
 8001dee:	1bed      	subs	r5, r5, r7
 8001df0:	6026      	str	r6, [r4, #0]
 8001df2:	60a5      	str	r5, [r4, #8]
 8001df4:	4646      	mov	r6, r8
 8001df6:	4546      	cmp	r6, r8
 8001df8:	bf28      	it	cs
 8001dfa:	4646      	movcs	r6, r8
 8001dfc:	4632      	mov	r2, r6
 8001dfe:	4649      	mov	r1, r9
 8001e00:	6820      	ldr	r0, [r4, #0]
 8001e02:	f000 faaa 	bl	800235a <memmove>
 8001e06:	68a3      	ldr	r3, [r4, #8]
 8001e08:	1b9b      	subs	r3, r3, r6
 8001e0a:	60a3      	str	r3, [r4, #8]
 8001e0c:	6823      	ldr	r3, [r4, #0]
 8001e0e:	441e      	add	r6, r3
 8001e10:	6026      	str	r6, [r4, #0]
 8001e12:	2000      	movs	r0, #0
 8001e14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001e18:	462a      	mov	r2, r5
 8001e1a:	f000 fb65 	bl	80024e8 <_realloc_r>
 8001e1e:	4606      	mov	r6, r0
 8001e20:	2800      	cmp	r0, #0
 8001e22:	d1e1      	bne.n	8001de8 <__ssputs_r+0x70>
 8001e24:	6921      	ldr	r1, [r4, #16]
 8001e26:	4650      	mov	r0, sl
 8001e28:	f000 fab2 	bl	8002390 <_free_r>
 8001e2c:	e7c7      	b.n	8001dbe <__ssputs_r+0x46>
	...

08001e30 <_svfiprintf_r>:
 8001e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e34:	b09d      	sub	sp, #116	; 0x74
 8001e36:	4680      	mov	r8, r0
 8001e38:	9303      	str	r3, [sp, #12]
 8001e3a:	898b      	ldrh	r3, [r1, #12]
 8001e3c:	061c      	lsls	r4, r3, #24
 8001e3e:	460d      	mov	r5, r1
 8001e40:	4616      	mov	r6, r2
 8001e42:	d50f      	bpl.n	8001e64 <_svfiprintf_r+0x34>
 8001e44:	690b      	ldr	r3, [r1, #16]
 8001e46:	b96b      	cbnz	r3, 8001e64 <_svfiprintf_r+0x34>
 8001e48:	2140      	movs	r1, #64	; 0x40
 8001e4a:	f000 faef 	bl	800242c <_malloc_r>
 8001e4e:	6028      	str	r0, [r5, #0]
 8001e50:	6128      	str	r0, [r5, #16]
 8001e52:	b928      	cbnz	r0, 8001e60 <_svfiprintf_r+0x30>
 8001e54:	230c      	movs	r3, #12
 8001e56:	f8c8 3000 	str.w	r3, [r8]
 8001e5a:	f04f 30ff 	mov.w	r0, #4294967295
 8001e5e:	e0c5      	b.n	8001fec <_svfiprintf_r+0x1bc>
 8001e60:	2340      	movs	r3, #64	; 0x40
 8001e62:	616b      	str	r3, [r5, #20]
 8001e64:	2300      	movs	r3, #0
 8001e66:	9309      	str	r3, [sp, #36]	; 0x24
 8001e68:	2320      	movs	r3, #32
 8001e6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001e6e:	2330      	movs	r3, #48	; 0x30
 8001e70:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001e74:	f04f 0b01 	mov.w	fp, #1
 8001e78:	4637      	mov	r7, r6
 8001e7a:	463c      	mov	r4, r7
 8001e7c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d13c      	bne.n	8001efe <_svfiprintf_r+0xce>
 8001e84:	ebb7 0a06 	subs.w	sl, r7, r6
 8001e88:	d00b      	beq.n	8001ea2 <_svfiprintf_r+0x72>
 8001e8a:	4653      	mov	r3, sl
 8001e8c:	4632      	mov	r2, r6
 8001e8e:	4629      	mov	r1, r5
 8001e90:	4640      	mov	r0, r8
 8001e92:	f7ff ff71 	bl	8001d78 <__ssputs_r>
 8001e96:	3001      	adds	r0, #1
 8001e98:	f000 80a3 	beq.w	8001fe2 <_svfiprintf_r+0x1b2>
 8001e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001e9e:	4453      	add	r3, sl
 8001ea0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ea2:	783b      	ldrb	r3, [r7, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	f000 809c 	beq.w	8001fe2 <_svfiprintf_r+0x1b2>
 8001eaa:	2300      	movs	r3, #0
 8001eac:	f04f 32ff 	mov.w	r2, #4294967295
 8001eb0:	9304      	str	r3, [sp, #16]
 8001eb2:	9307      	str	r3, [sp, #28]
 8001eb4:	9205      	str	r2, [sp, #20]
 8001eb6:	9306      	str	r3, [sp, #24]
 8001eb8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001ebc:	931a      	str	r3, [sp, #104]	; 0x68
 8001ebe:	2205      	movs	r2, #5
 8001ec0:	7821      	ldrb	r1, [r4, #0]
 8001ec2:	4850      	ldr	r0, [pc, #320]	; (8002004 <_svfiprintf_r+0x1d4>)
 8001ec4:	f7fe f984 	bl	80001d0 <memchr>
 8001ec8:	1c67      	adds	r7, r4, #1
 8001eca:	9b04      	ldr	r3, [sp, #16]
 8001ecc:	b9d8      	cbnz	r0, 8001f06 <_svfiprintf_r+0xd6>
 8001ece:	06d9      	lsls	r1, r3, #27
 8001ed0:	bf44      	itt	mi
 8001ed2:	2220      	movmi	r2, #32
 8001ed4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ed8:	071a      	lsls	r2, r3, #28
 8001eda:	bf44      	itt	mi
 8001edc:	222b      	movmi	r2, #43	; 0x2b
 8001ede:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001ee2:	7822      	ldrb	r2, [r4, #0]
 8001ee4:	2a2a      	cmp	r2, #42	; 0x2a
 8001ee6:	d016      	beq.n	8001f16 <_svfiprintf_r+0xe6>
 8001ee8:	9a07      	ldr	r2, [sp, #28]
 8001eea:	2100      	movs	r1, #0
 8001eec:	200a      	movs	r0, #10
 8001eee:	4627      	mov	r7, r4
 8001ef0:	3401      	adds	r4, #1
 8001ef2:	783b      	ldrb	r3, [r7, #0]
 8001ef4:	3b30      	subs	r3, #48	; 0x30
 8001ef6:	2b09      	cmp	r3, #9
 8001ef8:	d951      	bls.n	8001f9e <_svfiprintf_r+0x16e>
 8001efa:	b1c9      	cbz	r1, 8001f30 <_svfiprintf_r+0x100>
 8001efc:	e011      	b.n	8001f22 <_svfiprintf_r+0xf2>
 8001efe:	2b25      	cmp	r3, #37	; 0x25
 8001f00:	d0c0      	beq.n	8001e84 <_svfiprintf_r+0x54>
 8001f02:	4627      	mov	r7, r4
 8001f04:	e7b9      	b.n	8001e7a <_svfiprintf_r+0x4a>
 8001f06:	4a3f      	ldr	r2, [pc, #252]	; (8002004 <_svfiprintf_r+0x1d4>)
 8001f08:	1a80      	subs	r0, r0, r2
 8001f0a:	fa0b f000 	lsl.w	r0, fp, r0
 8001f0e:	4318      	orrs	r0, r3
 8001f10:	9004      	str	r0, [sp, #16]
 8001f12:	463c      	mov	r4, r7
 8001f14:	e7d3      	b.n	8001ebe <_svfiprintf_r+0x8e>
 8001f16:	9a03      	ldr	r2, [sp, #12]
 8001f18:	1d11      	adds	r1, r2, #4
 8001f1a:	6812      	ldr	r2, [r2, #0]
 8001f1c:	9103      	str	r1, [sp, #12]
 8001f1e:	2a00      	cmp	r2, #0
 8001f20:	db01      	blt.n	8001f26 <_svfiprintf_r+0xf6>
 8001f22:	9207      	str	r2, [sp, #28]
 8001f24:	e004      	b.n	8001f30 <_svfiprintf_r+0x100>
 8001f26:	4252      	negs	r2, r2
 8001f28:	f043 0302 	orr.w	r3, r3, #2
 8001f2c:	9207      	str	r2, [sp, #28]
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	783b      	ldrb	r3, [r7, #0]
 8001f32:	2b2e      	cmp	r3, #46	; 0x2e
 8001f34:	d10e      	bne.n	8001f54 <_svfiprintf_r+0x124>
 8001f36:	787b      	ldrb	r3, [r7, #1]
 8001f38:	2b2a      	cmp	r3, #42	; 0x2a
 8001f3a:	f107 0101 	add.w	r1, r7, #1
 8001f3e:	d132      	bne.n	8001fa6 <_svfiprintf_r+0x176>
 8001f40:	9b03      	ldr	r3, [sp, #12]
 8001f42:	1d1a      	adds	r2, r3, #4
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	9203      	str	r2, [sp, #12]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	bfb8      	it	lt
 8001f4c:	f04f 33ff 	movlt.w	r3, #4294967295
 8001f50:	3702      	adds	r7, #2
 8001f52:	9305      	str	r3, [sp, #20]
 8001f54:	4c2c      	ldr	r4, [pc, #176]	; (8002008 <_svfiprintf_r+0x1d8>)
 8001f56:	7839      	ldrb	r1, [r7, #0]
 8001f58:	2203      	movs	r2, #3
 8001f5a:	4620      	mov	r0, r4
 8001f5c:	f7fe f938 	bl	80001d0 <memchr>
 8001f60:	b138      	cbz	r0, 8001f72 <_svfiprintf_r+0x142>
 8001f62:	2340      	movs	r3, #64	; 0x40
 8001f64:	1b00      	subs	r0, r0, r4
 8001f66:	fa03 f000 	lsl.w	r0, r3, r0
 8001f6a:	9b04      	ldr	r3, [sp, #16]
 8001f6c:	4303      	orrs	r3, r0
 8001f6e:	9304      	str	r3, [sp, #16]
 8001f70:	3701      	adds	r7, #1
 8001f72:	7839      	ldrb	r1, [r7, #0]
 8001f74:	4825      	ldr	r0, [pc, #148]	; (800200c <_svfiprintf_r+0x1dc>)
 8001f76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001f7a:	2206      	movs	r2, #6
 8001f7c:	1c7e      	adds	r6, r7, #1
 8001f7e:	f7fe f927 	bl	80001d0 <memchr>
 8001f82:	2800      	cmp	r0, #0
 8001f84:	d035      	beq.n	8001ff2 <_svfiprintf_r+0x1c2>
 8001f86:	4b22      	ldr	r3, [pc, #136]	; (8002010 <_svfiprintf_r+0x1e0>)
 8001f88:	b9fb      	cbnz	r3, 8001fca <_svfiprintf_r+0x19a>
 8001f8a:	9b03      	ldr	r3, [sp, #12]
 8001f8c:	3307      	adds	r3, #7
 8001f8e:	f023 0307 	bic.w	r3, r3, #7
 8001f92:	3308      	adds	r3, #8
 8001f94:	9303      	str	r3, [sp, #12]
 8001f96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f98:	444b      	add	r3, r9
 8001f9a:	9309      	str	r3, [sp, #36]	; 0x24
 8001f9c:	e76c      	b.n	8001e78 <_svfiprintf_r+0x48>
 8001f9e:	fb00 3202 	mla	r2, r0, r2, r3
 8001fa2:	2101      	movs	r1, #1
 8001fa4:	e7a3      	b.n	8001eee <_svfiprintf_r+0xbe>
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	9305      	str	r3, [sp, #20]
 8001faa:	4618      	mov	r0, r3
 8001fac:	240a      	movs	r4, #10
 8001fae:	460f      	mov	r7, r1
 8001fb0:	3101      	adds	r1, #1
 8001fb2:	783a      	ldrb	r2, [r7, #0]
 8001fb4:	3a30      	subs	r2, #48	; 0x30
 8001fb6:	2a09      	cmp	r2, #9
 8001fb8:	d903      	bls.n	8001fc2 <_svfiprintf_r+0x192>
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d0ca      	beq.n	8001f54 <_svfiprintf_r+0x124>
 8001fbe:	9005      	str	r0, [sp, #20]
 8001fc0:	e7c8      	b.n	8001f54 <_svfiprintf_r+0x124>
 8001fc2:	fb04 2000 	mla	r0, r4, r0, r2
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e7f1      	b.n	8001fae <_svfiprintf_r+0x17e>
 8001fca:	ab03      	add	r3, sp, #12
 8001fcc:	9300      	str	r3, [sp, #0]
 8001fce:	462a      	mov	r2, r5
 8001fd0:	4b10      	ldr	r3, [pc, #64]	; (8002014 <_svfiprintf_r+0x1e4>)
 8001fd2:	a904      	add	r1, sp, #16
 8001fd4:	4640      	mov	r0, r8
 8001fd6:	f3af 8000 	nop.w
 8001fda:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001fde:	4681      	mov	r9, r0
 8001fe0:	d1d9      	bne.n	8001f96 <_svfiprintf_r+0x166>
 8001fe2:	89ab      	ldrh	r3, [r5, #12]
 8001fe4:	065b      	lsls	r3, r3, #25
 8001fe6:	f53f af38 	bmi.w	8001e5a <_svfiprintf_r+0x2a>
 8001fea:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001fec:	b01d      	add	sp, #116	; 0x74
 8001fee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001ff2:	ab03      	add	r3, sp, #12
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	462a      	mov	r2, r5
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <_svfiprintf_r+0x1e4>)
 8001ffa:	a904      	add	r1, sp, #16
 8001ffc:	4640      	mov	r0, r8
 8001ffe:	f000 f881 	bl	8002104 <_printf_i>
 8002002:	e7ea      	b.n	8001fda <_svfiprintf_r+0x1aa>
 8002004:	080025e1 	.word	0x080025e1
 8002008:	080025e7 	.word	0x080025e7
 800200c:	080025eb 	.word	0x080025eb
 8002010:	00000000 	.word	0x00000000
 8002014:	08001d79 	.word	0x08001d79

08002018 <_printf_common>:
 8002018:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800201c:	4691      	mov	r9, r2
 800201e:	461f      	mov	r7, r3
 8002020:	688a      	ldr	r2, [r1, #8]
 8002022:	690b      	ldr	r3, [r1, #16]
 8002024:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002028:	4293      	cmp	r3, r2
 800202a:	bfb8      	it	lt
 800202c:	4613      	movlt	r3, r2
 800202e:	f8c9 3000 	str.w	r3, [r9]
 8002032:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002036:	4606      	mov	r6, r0
 8002038:	460c      	mov	r4, r1
 800203a:	b112      	cbz	r2, 8002042 <_printf_common+0x2a>
 800203c:	3301      	adds	r3, #1
 800203e:	f8c9 3000 	str.w	r3, [r9]
 8002042:	6823      	ldr	r3, [r4, #0]
 8002044:	0699      	lsls	r1, r3, #26
 8002046:	bf42      	ittt	mi
 8002048:	f8d9 3000 	ldrmi.w	r3, [r9]
 800204c:	3302      	addmi	r3, #2
 800204e:	f8c9 3000 	strmi.w	r3, [r9]
 8002052:	6825      	ldr	r5, [r4, #0]
 8002054:	f015 0506 	ands.w	r5, r5, #6
 8002058:	d107      	bne.n	800206a <_printf_common+0x52>
 800205a:	f104 0a19 	add.w	sl, r4, #25
 800205e:	68e3      	ldr	r3, [r4, #12]
 8002060:	f8d9 2000 	ldr.w	r2, [r9]
 8002064:	1a9b      	subs	r3, r3, r2
 8002066:	429d      	cmp	r5, r3
 8002068:	db29      	blt.n	80020be <_printf_common+0xa6>
 800206a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800206e:	6822      	ldr	r2, [r4, #0]
 8002070:	3300      	adds	r3, #0
 8002072:	bf18      	it	ne
 8002074:	2301      	movne	r3, #1
 8002076:	0692      	lsls	r2, r2, #26
 8002078:	d42e      	bmi.n	80020d8 <_printf_common+0xc0>
 800207a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800207e:	4639      	mov	r1, r7
 8002080:	4630      	mov	r0, r6
 8002082:	47c0      	blx	r8
 8002084:	3001      	adds	r0, #1
 8002086:	d021      	beq.n	80020cc <_printf_common+0xb4>
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	68e5      	ldr	r5, [r4, #12]
 800208c:	f8d9 2000 	ldr.w	r2, [r9]
 8002090:	f003 0306 	and.w	r3, r3, #6
 8002094:	2b04      	cmp	r3, #4
 8002096:	bf08      	it	eq
 8002098:	1aad      	subeq	r5, r5, r2
 800209a:	68a3      	ldr	r3, [r4, #8]
 800209c:	6922      	ldr	r2, [r4, #16]
 800209e:	bf0c      	ite	eq
 80020a0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80020a4:	2500      	movne	r5, #0
 80020a6:	4293      	cmp	r3, r2
 80020a8:	bfc4      	itt	gt
 80020aa:	1a9b      	subgt	r3, r3, r2
 80020ac:	18ed      	addgt	r5, r5, r3
 80020ae:	f04f 0900 	mov.w	r9, #0
 80020b2:	341a      	adds	r4, #26
 80020b4:	454d      	cmp	r5, r9
 80020b6:	d11b      	bne.n	80020f0 <_printf_common+0xd8>
 80020b8:	2000      	movs	r0, #0
 80020ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020be:	2301      	movs	r3, #1
 80020c0:	4652      	mov	r2, sl
 80020c2:	4639      	mov	r1, r7
 80020c4:	4630      	mov	r0, r6
 80020c6:	47c0      	blx	r8
 80020c8:	3001      	adds	r0, #1
 80020ca:	d103      	bne.n	80020d4 <_printf_common+0xbc>
 80020cc:	f04f 30ff 	mov.w	r0, #4294967295
 80020d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80020d4:	3501      	adds	r5, #1
 80020d6:	e7c2      	b.n	800205e <_printf_common+0x46>
 80020d8:	18e1      	adds	r1, r4, r3
 80020da:	1c5a      	adds	r2, r3, #1
 80020dc:	2030      	movs	r0, #48	; 0x30
 80020de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80020e2:	4422      	add	r2, r4
 80020e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80020e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80020ec:	3302      	adds	r3, #2
 80020ee:	e7c4      	b.n	800207a <_printf_common+0x62>
 80020f0:	2301      	movs	r3, #1
 80020f2:	4622      	mov	r2, r4
 80020f4:	4639      	mov	r1, r7
 80020f6:	4630      	mov	r0, r6
 80020f8:	47c0      	blx	r8
 80020fa:	3001      	adds	r0, #1
 80020fc:	d0e6      	beq.n	80020cc <_printf_common+0xb4>
 80020fe:	f109 0901 	add.w	r9, r9, #1
 8002102:	e7d7      	b.n	80020b4 <_printf_common+0x9c>

08002104 <_printf_i>:
 8002104:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002108:	4617      	mov	r7, r2
 800210a:	7e0a      	ldrb	r2, [r1, #24]
 800210c:	b085      	sub	sp, #20
 800210e:	2a6e      	cmp	r2, #110	; 0x6e
 8002110:	4698      	mov	r8, r3
 8002112:	4606      	mov	r6, r0
 8002114:	460c      	mov	r4, r1
 8002116:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002118:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 800211c:	f000 80bc 	beq.w	8002298 <_printf_i+0x194>
 8002120:	d81a      	bhi.n	8002158 <_printf_i+0x54>
 8002122:	2a63      	cmp	r2, #99	; 0x63
 8002124:	d02e      	beq.n	8002184 <_printf_i+0x80>
 8002126:	d80a      	bhi.n	800213e <_printf_i+0x3a>
 8002128:	2a00      	cmp	r2, #0
 800212a:	f000 80c8 	beq.w	80022be <_printf_i+0x1ba>
 800212e:	2a58      	cmp	r2, #88	; 0x58
 8002130:	f000 808a 	beq.w	8002248 <_printf_i+0x144>
 8002134:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002138:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 800213c:	e02a      	b.n	8002194 <_printf_i+0x90>
 800213e:	2a64      	cmp	r2, #100	; 0x64
 8002140:	d001      	beq.n	8002146 <_printf_i+0x42>
 8002142:	2a69      	cmp	r2, #105	; 0x69
 8002144:	d1f6      	bne.n	8002134 <_printf_i+0x30>
 8002146:	6821      	ldr	r1, [r4, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	f011 0f80 	tst.w	r1, #128	; 0x80
 800214e:	d023      	beq.n	8002198 <_printf_i+0x94>
 8002150:	1d11      	adds	r1, r2, #4
 8002152:	6019      	str	r1, [r3, #0]
 8002154:	6813      	ldr	r3, [r2, #0]
 8002156:	e027      	b.n	80021a8 <_printf_i+0xa4>
 8002158:	2a73      	cmp	r2, #115	; 0x73
 800215a:	f000 80b4 	beq.w	80022c6 <_printf_i+0x1c2>
 800215e:	d808      	bhi.n	8002172 <_printf_i+0x6e>
 8002160:	2a6f      	cmp	r2, #111	; 0x6f
 8002162:	d02a      	beq.n	80021ba <_printf_i+0xb6>
 8002164:	2a70      	cmp	r2, #112	; 0x70
 8002166:	d1e5      	bne.n	8002134 <_printf_i+0x30>
 8002168:	680a      	ldr	r2, [r1, #0]
 800216a:	f042 0220 	orr.w	r2, r2, #32
 800216e:	600a      	str	r2, [r1, #0]
 8002170:	e003      	b.n	800217a <_printf_i+0x76>
 8002172:	2a75      	cmp	r2, #117	; 0x75
 8002174:	d021      	beq.n	80021ba <_printf_i+0xb6>
 8002176:	2a78      	cmp	r2, #120	; 0x78
 8002178:	d1dc      	bne.n	8002134 <_printf_i+0x30>
 800217a:	2278      	movs	r2, #120	; 0x78
 800217c:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002180:	496e      	ldr	r1, [pc, #440]	; (800233c <_printf_i+0x238>)
 8002182:	e064      	b.n	800224e <_printf_i+0x14a>
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800218a:	1d11      	adds	r1, r2, #4
 800218c:	6019      	str	r1, [r3, #0]
 800218e:	6813      	ldr	r3, [r2, #0]
 8002190:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002194:	2301      	movs	r3, #1
 8002196:	e0a3      	b.n	80022e0 <_printf_i+0x1dc>
 8002198:	f011 0f40 	tst.w	r1, #64	; 0x40
 800219c:	f102 0104 	add.w	r1, r2, #4
 80021a0:	6019      	str	r1, [r3, #0]
 80021a2:	d0d7      	beq.n	8002154 <_printf_i+0x50>
 80021a4:	f9b2 3000 	ldrsh.w	r3, [r2]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	da03      	bge.n	80021b4 <_printf_i+0xb0>
 80021ac:	222d      	movs	r2, #45	; 0x2d
 80021ae:	425b      	negs	r3, r3
 80021b0:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80021b4:	4962      	ldr	r1, [pc, #392]	; (8002340 <_printf_i+0x23c>)
 80021b6:	220a      	movs	r2, #10
 80021b8:	e017      	b.n	80021ea <_printf_i+0xe6>
 80021ba:	6820      	ldr	r0, [r4, #0]
 80021bc:	6819      	ldr	r1, [r3, #0]
 80021be:	f010 0f80 	tst.w	r0, #128	; 0x80
 80021c2:	d003      	beq.n	80021cc <_printf_i+0xc8>
 80021c4:	1d08      	adds	r0, r1, #4
 80021c6:	6018      	str	r0, [r3, #0]
 80021c8:	680b      	ldr	r3, [r1, #0]
 80021ca:	e006      	b.n	80021da <_printf_i+0xd6>
 80021cc:	f010 0f40 	tst.w	r0, #64	; 0x40
 80021d0:	f101 0004 	add.w	r0, r1, #4
 80021d4:	6018      	str	r0, [r3, #0]
 80021d6:	d0f7      	beq.n	80021c8 <_printf_i+0xc4>
 80021d8:	880b      	ldrh	r3, [r1, #0]
 80021da:	4959      	ldr	r1, [pc, #356]	; (8002340 <_printf_i+0x23c>)
 80021dc:	2a6f      	cmp	r2, #111	; 0x6f
 80021de:	bf14      	ite	ne
 80021e0:	220a      	movne	r2, #10
 80021e2:	2208      	moveq	r2, #8
 80021e4:	2000      	movs	r0, #0
 80021e6:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80021ea:	6865      	ldr	r5, [r4, #4]
 80021ec:	60a5      	str	r5, [r4, #8]
 80021ee:	2d00      	cmp	r5, #0
 80021f0:	f2c0 809c 	blt.w	800232c <_printf_i+0x228>
 80021f4:	6820      	ldr	r0, [r4, #0]
 80021f6:	f020 0004 	bic.w	r0, r0, #4
 80021fa:	6020      	str	r0, [r4, #0]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d13f      	bne.n	8002280 <_printf_i+0x17c>
 8002200:	2d00      	cmp	r5, #0
 8002202:	f040 8095 	bne.w	8002330 <_printf_i+0x22c>
 8002206:	4675      	mov	r5, lr
 8002208:	2a08      	cmp	r2, #8
 800220a:	d10b      	bne.n	8002224 <_printf_i+0x120>
 800220c:	6823      	ldr	r3, [r4, #0]
 800220e:	07da      	lsls	r2, r3, #31
 8002210:	d508      	bpl.n	8002224 <_printf_i+0x120>
 8002212:	6923      	ldr	r3, [r4, #16]
 8002214:	6862      	ldr	r2, [r4, #4]
 8002216:	429a      	cmp	r2, r3
 8002218:	bfde      	ittt	le
 800221a:	2330      	movle	r3, #48	; 0x30
 800221c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002220:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002224:	ebae 0305 	sub.w	r3, lr, r5
 8002228:	6123      	str	r3, [r4, #16]
 800222a:	f8cd 8000 	str.w	r8, [sp]
 800222e:	463b      	mov	r3, r7
 8002230:	aa03      	add	r2, sp, #12
 8002232:	4621      	mov	r1, r4
 8002234:	4630      	mov	r0, r6
 8002236:	f7ff feef 	bl	8002018 <_printf_common>
 800223a:	3001      	adds	r0, #1
 800223c:	d155      	bne.n	80022ea <_printf_i+0x1e6>
 800223e:	f04f 30ff 	mov.w	r0, #4294967295
 8002242:	b005      	add	sp, #20
 8002244:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002248:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 800224c:	493c      	ldr	r1, [pc, #240]	; (8002340 <_printf_i+0x23c>)
 800224e:	6822      	ldr	r2, [r4, #0]
 8002250:	6818      	ldr	r0, [r3, #0]
 8002252:	f012 0f80 	tst.w	r2, #128	; 0x80
 8002256:	f100 0504 	add.w	r5, r0, #4
 800225a:	601d      	str	r5, [r3, #0]
 800225c:	d001      	beq.n	8002262 <_printf_i+0x15e>
 800225e:	6803      	ldr	r3, [r0, #0]
 8002260:	e002      	b.n	8002268 <_printf_i+0x164>
 8002262:	0655      	lsls	r5, r2, #25
 8002264:	d5fb      	bpl.n	800225e <_printf_i+0x15a>
 8002266:	8803      	ldrh	r3, [r0, #0]
 8002268:	07d0      	lsls	r0, r2, #31
 800226a:	bf44      	itt	mi
 800226c:	f042 0220 	orrmi.w	r2, r2, #32
 8002270:	6022      	strmi	r2, [r4, #0]
 8002272:	b91b      	cbnz	r3, 800227c <_printf_i+0x178>
 8002274:	6822      	ldr	r2, [r4, #0]
 8002276:	f022 0220 	bic.w	r2, r2, #32
 800227a:	6022      	str	r2, [r4, #0]
 800227c:	2210      	movs	r2, #16
 800227e:	e7b1      	b.n	80021e4 <_printf_i+0xe0>
 8002280:	4675      	mov	r5, lr
 8002282:	fbb3 f0f2 	udiv	r0, r3, r2
 8002286:	fb02 3310 	mls	r3, r2, r0, r3
 800228a:	5ccb      	ldrb	r3, [r1, r3]
 800228c:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002290:	4603      	mov	r3, r0
 8002292:	2800      	cmp	r0, #0
 8002294:	d1f5      	bne.n	8002282 <_printf_i+0x17e>
 8002296:	e7b7      	b.n	8002208 <_printf_i+0x104>
 8002298:	6808      	ldr	r0, [r1, #0]
 800229a:	681a      	ldr	r2, [r3, #0]
 800229c:	6949      	ldr	r1, [r1, #20]
 800229e:	f010 0f80 	tst.w	r0, #128	; 0x80
 80022a2:	d004      	beq.n	80022ae <_printf_i+0x1aa>
 80022a4:	1d10      	adds	r0, r2, #4
 80022a6:	6018      	str	r0, [r3, #0]
 80022a8:	6813      	ldr	r3, [r2, #0]
 80022aa:	6019      	str	r1, [r3, #0]
 80022ac:	e007      	b.n	80022be <_printf_i+0x1ba>
 80022ae:	f010 0f40 	tst.w	r0, #64	; 0x40
 80022b2:	f102 0004 	add.w	r0, r2, #4
 80022b6:	6018      	str	r0, [r3, #0]
 80022b8:	6813      	ldr	r3, [r2, #0]
 80022ba:	d0f6      	beq.n	80022aa <_printf_i+0x1a6>
 80022bc:	8019      	strh	r1, [r3, #0]
 80022be:	2300      	movs	r3, #0
 80022c0:	6123      	str	r3, [r4, #16]
 80022c2:	4675      	mov	r5, lr
 80022c4:	e7b1      	b.n	800222a <_printf_i+0x126>
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	1d11      	adds	r1, r2, #4
 80022ca:	6019      	str	r1, [r3, #0]
 80022cc:	6815      	ldr	r5, [r2, #0]
 80022ce:	6862      	ldr	r2, [r4, #4]
 80022d0:	2100      	movs	r1, #0
 80022d2:	4628      	mov	r0, r5
 80022d4:	f7fd ff7c 	bl	80001d0 <memchr>
 80022d8:	b108      	cbz	r0, 80022de <_printf_i+0x1da>
 80022da:	1b40      	subs	r0, r0, r5
 80022dc:	6060      	str	r0, [r4, #4]
 80022de:	6863      	ldr	r3, [r4, #4]
 80022e0:	6123      	str	r3, [r4, #16]
 80022e2:	2300      	movs	r3, #0
 80022e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80022e8:	e79f      	b.n	800222a <_printf_i+0x126>
 80022ea:	6923      	ldr	r3, [r4, #16]
 80022ec:	462a      	mov	r2, r5
 80022ee:	4639      	mov	r1, r7
 80022f0:	4630      	mov	r0, r6
 80022f2:	47c0      	blx	r8
 80022f4:	3001      	adds	r0, #1
 80022f6:	d0a2      	beq.n	800223e <_printf_i+0x13a>
 80022f8:	6823      	ldr	r3, [r4, #0]
 80022fa:	079b      	lsls	r3, r3, #30
 80022fc:	d507      	bpl.n	800230e <_printf_i+0x20a>
 80022fe:	2500      	movs	r5, #0
 8002300:	f104 0919 	add.w	r9, r4, #25
 8002304:	68e3      	ldr	r3, [r4, #12]
 8002306:	9a03      	ldr	r2, [sp, #12]
 8002308:	1a9b      	subs	r3, r3, r2
 800230a:	429d      	cmp	r5, r3
 800230c:	db05      	blt.n	800231a <_printf_i+0x216>
 800230e:	68e0      	ldr	r0, [r4, #12]
 8002310:	9b03      	ldr	r3, [sp, #12]
 8002312:	4298      	cmp	r0, r3
 8002314:	bfb8      	it	lt
 8002316:	4618      	movlt	r0, r3
 8002318:	e793      	b.n	8002242 <_printf_i+0x13e>
 800231a:	2301      	movs	r3, #1
 800231c:	464a      	mov	r2, r9
 800231e:	4639      	mov	r1, r7
 8002320:	4630      	mov	r0, r6
 8002322:	47c0      	blx	r8
 8002324:	3001      	adds	r0, #1
 8002326:	d08a      	beq.n	800223e <_printf_i+0x13a>
 8002328:	3501      	adds	r5, #1
 800232a:	e7eb      	b.n	8002304 <_printf_i+0x200>
 800232c:	2b00      	cmp	r3, #0
 800232e:	d1a7      	bne.n	8002280 <_printf_i+0x17c>
 8002330:	780b      	ldrb	r3, [r1, #0]
 8002332:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002336:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800233a:	e765      	b.n	8002208 <_printf_i+0x104>
 800233c:	08002603 	.word	0x08002603
 8002340:	080025f2 	.word	0x080025f2

08002344 <memcpy>:
 8002344:	b510      	push	{r4, lr}
 8002346:	1e43      	subs	r3, r0, #1
 8002348:	440a      	add	r2, r1
 800234a:	4291      	cmp	r1, r2
 800234c:	d100      	bne.n	8002350 <memcpy+0xc>
 800234e:	bd10      	pop	{r4, pc}
 8002350:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002354:	f803 4f01 	strb.w	r4, [r3, #1]!
 8002358:	e7f7      	b.n	800234a <memcpy+0x6>

0800235a <memmove>:
 800235a:	4288      	cmp	r0, r1
 800235c:	b510      	push	{r4, lr}
 800235e:	eb01 0302 	add.w	r3, r1, r2
 8002362:	d803      	bhi.n	800236c <memmove+0x12>
 8002364:	1e42      	subs	r2, r0, #1
 8002366:	4299      	cmp	r1, r3
 8002368:	d10c      	bne.n	8002384 <memmove+0x2a>
 800236a:	bd10      	pop	{r4, pc}
 800236c:	4298      	cmp	r0, r3
 800236e:	d2f9      	bcs.n	8002364 <memmove+0xa>
 8002370:	1881      	adds	r1, r0, r2
 8002372:	1ad2      	subs	r2, r2, r3
 8002374:	42d3      	cmn	r3, r2
 8002376:	d100      	bne.n	800237a <memmove+0x20>
 8002378:	bd10      	pop	{r4, pc}
 800237a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800237e:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002382:	e7f7      	b.n	8002374 <memmove+0x1a>
 8002384:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002388:	f802 4f01 	strb.w	r4, [r2, #1]!
 800238c:	e7eb      	b.n	8002366 <memmove+0xc>
	...

08002390 <_free_r>:
 8002390:	b538      	push	{r3, r4, r5, lr}
 8002392:	4605      	mov	r5, r0
 8002394:	2900      	cmp	r1, #0
 8002396:	d045      	beq.n	8002424 <_free_r+0x94>
 8002398:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800239c:	1f0c      	subs	r4, r1, #4
 800239e:	2b00      	cmp	r3, #0
 80023a0:	bfb8      	it	lt
 80023a2:	18e4      	addlt	r4, r4, r3
 80023a4:	f000 f8d6 	bl	8002554 <__malloc_lock>
 80023a8:	4a1f      	ldr	r2, [pc, #124]	; (8002428 <_free_r+0x98>)
 80023aa:	6813      	ldr	r3, [r2, #0]
 80023ac:	4610      	mov	r0, r2
 80023ae:	b933      	cbnz	r3, 80023be <_free_r+0x2e>
 80023b0:	6063      	str	r3, [r4, #4]
 80023b2:	6014      	str	r4, [r2, #0]
 80023b4:	4628      	mov	r0, r5
 80023b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023ba:	f000 b8cc 	b.w	8002556 <__malloc_unlock>
 80023be:	42a3      	cmp	r3, r4
 80023c0:	d90c      	bls.n	80023dc <_free_r+0x4c>
 80023c2:	6821      	ldr	r1, [r4, #0]
 80023c4:	1862      	adds	r2, r4, r1
 80023c6:	4293      	cmp	r3, r2
 80023c8:	bf04      	itt	eq
 80023ca:	681a      	ldreq	r2, [r3, #0]
 80023cc:	685b      	ldreq	r3, [r3, #4]
 80023ce:	6063      	str	r3, [r4, #4]
 80023d0:	bf04      	itt	eq
 80023d2:	1852      	addeq	r2, r2, r1
 80023d4:	6022      	streq	r2, [r4, #0]
 80023d6:	6004      	str	r4, [r0, #0]
 80023d8:	e7ec      	b.n	80023b4 <_free_r+0x24>
 80023da:	4613      	mov	r3, r2
 80023dc:	685a      	ldr	r2, [r3, #4]
 80023de:	b10a      	cbz	r2, 80023e4 <_free_r+0x54>
 80023e0:	42a2      	cmp	r2, r4
 80023e2:	d9fa      	bls.n	80023da <_free_r+0x4a>
 80023e4:	6819      	ldr	r1, [r3, #0]
 80023e6:	1858      	adds	r0, r3, r1
 80023e8:	42a0      	cmp	r0, r4
 80023ea:	d10b      	bne.n	8002404 <_free_r+0x74>
 80023ec:	6820      	ldr	r0, [r4, #0]
 80023ee:	4401      	add	r1, r0
 80023f0:	1858      	adds	r0, r3, r1
 80023f2:	4282      	cmp	r2, r0
 80023f4:	6019      	str	r1, [r3, #0]
 80023f6:	d1dd      	bne.n	80023b4 <_free_r+0x24>
 80023f8:	6810      	ldr	r0, [r2, #0]
 80023fa:	6852      	ldr	r2, [r2, #4]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	4401      	add	r1, r0
 8002400:	6019      	str	r1, [r3, #0]
 8002402:	e7d7      	b.n	80023b4 <_free_r+0x24>
 8002404:	d902      	bls.n	800240c <_free_r+0x7c>
 8002406:	230c      	movs	r3, #12
 8002408:	602b      	str	r3, [r5, #0]
 800240a:	e7d3      	b.n	80023b4 <_free_r+0x24>
 800240c:	6820      	ldr	r0, [r4, #0]
 800240e:	1821      	adds	r1, r4, r0
 8002410:	428a      	cmp	r2, r1
 8002412:	bf04      	itt	eq
 8002414:	6811      	ldreq	r1, [r2, #0]
 8002416:	6852      	ldreq	r2, [r2, #4]
 8002418:	6062      	str	r2, [r4, #4]
 800241a:	bf04      	itt	eq
 800241c:	1809      	addeq	r1, r1, r0
 800241e:	6021      	streq	r1, [r4, #0]
 8002420:	605c      	str	r4, [r3, #4]
 8002422:	e7c7      	b.n	80023b4 <_free_r+0x24>
 8002424:	bd38      	pop	{r3, r4, r5, pc}
 8002426:	bf00      	nop
 8002428:	2000008c 	.word	0x2000008c

0800242c <_malloc_r>:
 800242c:	b570      	push	{r4, r5, r6, lr}
 800242e:	1ccd      	adds	r5, r1, #3
 8002430:	f025 0503 	bic.w	r5, r5, #3
 8002434:	3508      	adds	r5, #8
 8002436:	2d0c      	cmp	r5, #12
 8002438:	bf38      	it	cc
 800243a:	250c      	movcc	r5, #12
 800243c:	2d00      	cmp	r5, #0
 800243e:	4606      	mov	r6, r0
 8002440:	db01      	blt.n	8002446 <_malloc_r+0x1a>
 8002442:	42a9      	cmp	r1, r5
 8002444:	d903      	bls.n	800244e <_malloc_r+0x22>
 8002446:	230c      	movs	r3, #12
 8002448:	6033      	str	r3, [r6, #0]
 800244a:	2000      	movs	r0, #0
 800244c:	bd70      	pop	{r4, r5, r6, pc}
 800244e:	f000 f881 	bl	8002554 <__malloc_lock>
 8002452:	4a23      	ldr	r2, [pc, #140]	; (80024e0 <_malloc_r+0xb4>)
 8002454:	6814      	ldr	r4, [r2, #0]
 8002456:	4621      	mov	r1, r4
 8002458:	b991      	cbnz	r1, 8002480 <_malloc_r+0x54>
 800245a:	4c22      	ldr	r4, [pc, #136]	; (80024e4 <_malloc_r+0xb8>)
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	b91b      	cbnz	r3, 8002468 <_malloc_r+0x3c>
 8002460:	4630      	mov	r0, r6
 8002462:	f000 f867 	bl	8002534 <_sbrk_r>
 8002466:	6020      	str	r0, [r4, #0]
 8002468:	4629      	mov	r1, r5
 800246a:	4630      	mov	r0, r6
 800246c:	f000 f862 	bl	8002534 <_sbrk_r>
 8002470:	1c43      	adds	r3, r0, #1
 8002472:	d126      	bne.n	80024c2 <_malloc_r+0x96>
 8002474:	230c      	movs	r3, #12
 8002476:	6033      	str	r3, [r6, #0]
 8002478:	4630      	mov	r0, r6
 800247a:	f000 f86c 	bl	8002556 <__malloc_unlock>
 800247e:	e7e4      	b.n	800244a <_malloc_r+0x1e>
 8002480:	680b      	ldr	r3, [r1, #0]
 8002482:	1b5b      	subs	r3, r3, r5
 8002484:	d41a      	bmi.n	80024bc <_malloc_r+0x90>
 8002486:	2b0b      	cmp	r3, #11
 8002488:	d90f      	bls.n	80024aa <_malloc_r+0x7e>
 800248a:	600b      	str	r3, [r1, #0]
 800248c:	50cd      	str	r5, [r1, r3]
 800248e:	18cc      	adds	r4, r1, r3
 8002490:	4630      	mov	r0, r6
 8002492:	f000 f860 	bl	8002556 <__malloc_unlock>
 8002496:	f104 000b 	add.w	r0, r4, #11
 800249a:	1d23      	adds	r3, r4, #4
 800249c:	f020 0007 	bic.w	r0, r0, #7
 80024a0:	1ac3      	subs	r3, r0, r3
 80024a2:	d01b      	beq.n	80024dc <_malloc_r+0xb0>
 80024a4:	425a      	negs	r2, r3
 80024a6:	50e2      	str	r2, [r4, r3]
 80024a8:	bd70      	pop	{r4, r5, r6, pc}
 80024aa:	428c      	cmp	r4, r1
 80024ac:	bf0d      	iteet	eq
 80024ae:	6863      	ldreq	r3, [r4, #4]
 80024b0:	684b      	ldrne	r3, [r1, #4]
 80024b2:	6063      	strne	r3, [r4, #4]
 80024b4:	6013      	streq	r3, [r2, #0]
 80024b6:	bf18      	it	ne
 80024b8:	460c      	movne	r4, r1
 80024ba:	e7e9      	b.n	8002490 <_malloc_r+0x64>
 80024bc:	460c      	mov	r4, r1
 80024be:	6849      	ldr	r1, [r1, #4]
 80024c0:	e7ca      	b.n	8002458 <_malloc_r+0x2c>
 80024c2:	1cc4      	adds	r4, r0, #3
 80024c4:	f024 0403 	bic.w	r4, r4, #3
 80024c8:	42a0      	cmp	r0, r4
 80024ca:	d005      	beq.n	80024d8 <_malloc_r+0xac>
 80024cc:	1a21      	subs	r1, r4, r0
 80024ce:	4630      	mov	r0, r6
 80024d0:	f000 f830 	bl	8002534 <_sbrk_r>
 80024d4:	3001      	adds	r0, #1
 80024d6:	d0cd      	beq.n	8002474 <_malloc_r+0x48>
 80024d8:	6025      	str	r5, [r4, #0]
 80024da:	e7d9      	b.n	8002490 <_malloc_r+0x64>
 80024dc:	bd70      	pop	{r4, r5, r6, pc}
 80024de:	bf00      	nop
 80024e0:	2000008c 	.word	0x2000008c
 80024e4:	20000090 	.word	0x20000090

080024e8 <_realloc_r>:
 80024e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80024ea:	4607      	mov	r7, r0
 80024ec:	4614      	mov	r4, r2
 80024ee:	460e      	mov	r6, r1
 80024f0:	b921      	cbnz	r1, 80024fc <_realloc_r+0x14>
 80024f2:	4611      	mov	r1, r2
 80024f4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80024f8:	f7ff bf98 	b.w	800242c <_malloc_r>
 80024fc:	b922      	cbnz	r2, 8002508 <_realloc_r+0x20>
 80024fe:	f7ff ff47 	bl	8002390 <_free_r>
 8002502:	4625      	mov	r5, r4
 8002504:	4628      	mov	r0, r5
 8002506:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002508:	f000 f826 	bl	8002558 <_malloc_usable_size_r>
 800250c:	4284      	cmp	r4, r0
 800250e:	d90f      	bls.n	8002530 <_realloc_r+0x48>
 8002510:	4621      	mov	r1, r4
 8002512:	4638      	mov	r0, r7
 8002514:	f7ff ff8a 	bl	800242c <_malloc_r>
 8002518:	4605      	mov	r5, r0
 800251a:	2800      	cmp	r0, #0
 800251c:	d0f2      	beq.n	8002504 <_realloc_r+0x1c>
 800251e:	4631      	mov	r1, r6
 8002520:	4622      	mov	r2, r4
 8002522:	f7ff ff0f 	bl	8002344 <memcpy>
 8002526:	4631      	mov	r1, r6
 8002528:	4638      	mov	r0, r7
 800252a:	f7ff ff31 	bl	8002390 <_free_r>
 800252e:	e7e9      	b.n	8002504 <_realloc_r+0x1c>
 8002530:	4635      	mov	r5, r6
 8002532:	e7e7      	b.n	8002504 <_realloc_r+0x1c>

08002534 <_sbrk_r>:
 8002534:	b538      	push	{r3, r4, r5, lr}
 8002536:	4c06      	ldr	r4, [pc, #24]	; (8002550 <_sbrk_r+0x1c>)
 8002538:	2300      	movs	r3, #0
 800253a:	4605      	mov	r5, r0
 800253c:	4608      	mov	r0, r1
 800253e:	6023      	str	r3, [r4, #0]
 8002540:	f000 f814 	bl	800256c <_sbrk>
 8002544:	1c43      	adds	r3, r0, #1
 8002546:	d102      	bne.n	800254e <_sbrk_r+0x1a>
 8002548:	6823      	ldr	r3, [r4, #0]
 800254a:	b103      	cbz	r3, 800254e <_sbrk_r+0x1a>
 800254c:	602b      	str	r3, [r5, #0]
 800254e:	bd38      	pop	{r3, r4, r5, pc}
 8002550:	20000160 	.word	0x20000160

08002554 <__malloc_lock>:
 8002554:	4770      	bx	lr

08002556 <__malloc_unlock>:
 8002556:	4770      	bx	lr

08002558 <_malloc_usable_size_r>:
 8002558:	f851 0c04 	ldr.w	r0, [r1, #-4]
 800255c:	2800      	cmp	r0, #0
 800255e:	f1a0 0004 	sub.w	r0, r0, #4
 8002562:	bfbc      	itt	lt
 8002564:	580b      	ldrlt	r3, [r1, r0]
 8002566:	18c0      	addlt	r0, r0, r3
 8002568:	4770      	bx	lr
	...

0800256c <_sbrk>:
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <_sbrk+0x14>)
 800256e:	6819      	ldr	r1, [r3, #0]
 8002570:	4602      	mov	r2, r0
 8002572:	b909      	cbnz	r1, 8002578 <_sbrk+0xc>
 8002574:	4903      	ldr	r1, [pc, #12]	; (8002584 <_sbrk+0x18>)
 8002576:	6019      	str	r1, [r3, #0]
 8002578:	6818      	ldr	r0, [r3, #0]
 800257a:	4402      	add	r2, r0
 800257c:	601a      	str	r2, [r3, #0]
 800257e:	4770      	bx	lr
 8002580:	20000094 	.word	0x20000094
 8002584:	20000164 	.word	0x20000164

08002588 <_init>:
 8002588:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800258a:	bf00      	nop
 800258c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800258e:	bc08      	pop	{r3}
 8002590:	469e      	mov	lr, r3
 8002592:	4770      	bx	lr

08002594 <_fini>:
 8002594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002596:	bf00      	nop
 8002598:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800259a:	bc08      	pop	{r3}
 800259c:	469e      	mov	lr, r3
 800259e:	4770      	bx	lr
