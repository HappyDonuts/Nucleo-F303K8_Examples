
PWM_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000019b8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001b40  08001b40  00011b40  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001b7c  08001b7c  00011b7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001b80  08001b80  00011b80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001b84  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          000000d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000dc  200000dc  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011a5e  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fb6  00000000  00000000  00031a9a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000067ea  00000000  00000000  00033a50  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000888  00000000  00000000  0003a240  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bc0  00000000  00000000  0003aac8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004b90  00000000  00000000  0003b688  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003680  00000000  00000000  00040218  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00043898  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001944  00000000  00000000  00043914  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001b28 	.word	0x08001b28

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001b28 	.word	0x08001b28

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f8a0 	bl	8000324 <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 f856 	bl	80002a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f82f 	bl	8000280 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f001 fb5c 	bl	80018e4 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b538      	push	{r3, r4, r5, lr}
 800025a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800025c:	f7ff fff6 	bl	800024c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000260:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000262:	bf1c      	itt	ne
 8000264:	4b05      	ldrne	r3, [pc, #20]	; (800027c <HAL_Delay+0x24>)
 8000266:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000268:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800026a:	bf18      	it	ne
 800026c:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800026e:	f7ff ffed 	bl	800024c <HAL_GetTick>
 8000272:	1b40      	subs	r0, r0, r5
 8000274:	4284      	cmp	r4, r0
 8000276:	d8fa      	bhi.n	800026e <HAL_Delay+0x16>
  {
  }
}
 8000278:	bd38      	pop	{r3, r4, r5, pc}
 800027a:	bf00      	nop
 800027c:	20000000 	.word	0x20000000

08000280 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000280:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000282:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000284:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000288:	041b      	lsls	r3, r3, #16
 800028a:	0c1b      	lsrs	r3, r3, #16
 800028c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000290:	0200      	lsls	r0, r0, #8
 8000292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000296:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800029a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800029c:	60d3      	str	r3, [r2, #12]
 800029e:	4770      	bx	lr
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a6:	b530      	push	{r4, r5, lr}
 80002a8:	68dc      	ldr	r4, [r3, #12]
 80002aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	bf28      	it	cs
 80002b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002bc:	f04f 0501 	mov.w	r5, #1
 80002c0:	fa05 f303 	lsl.w	r3, r5, r3
 80002c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c8:	bf8c      	ite	hi
 80002ca:	3c03      	subhi	r4, #3
 80002cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ce:	4019      	ands	r1, r3
 80002d0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002d2:	fa05 f404 	lsl.w	r4, r5, r4
 80002d6:	3c01      	subs	r4, #1
 80002d8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002dc:	ea42 0201 	orr.w	r2, r2, r1
 80002e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	bfaf      	iteee	ge
 80002e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	f000 000f 	andlt.w	r0, r0, #15
 80002ee:	4b06      	ldrlt	r3, [pc, #24]	; (8000308 <HAL_NVIC_SetPriority+0x64>)
 80002f0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	bfa5      	ittet	ge
 80002f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002f8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000300:	bd30      	pop	{r4, r5, pc}
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000ed14 	.word	0xe000ed14

0800030c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800030c:	0942      	lsrs	r2, r0, #5
 800030e:	2301      	movs	r3, #1
 8000310:	f000 001f 	and.w	r0, r0, #31
 8000314:	fa03 f000 	lsl.w	r0, r3, r0
 8000318:	4b01      	ldr	r3, [pc, #4]	; (8000320 <HAL_NVIC_EnableIRQ+0x14>)
 800031a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800031e:	4770      	bx	lr
 8000320:	e000e100 	.word	0xe000e100

08000324 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000324:	3801      	subs	r0, #1
 8000326:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 800032a:	d20a      	bcs.n	8000342 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800032c:	4b06      	ldr	r3, [pc, #24]	; (8000348 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800032e:	4a07      	ldr	r2, [pc, #28]	; (800034c <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000330:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000332:	21f0      	movs	r1, #240	; 0xf0
 8000334:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000338:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033a:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800033c:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800033e:	601a      	str	r2, [r3, #0]
 8000340:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000342:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000344:	4770      	bx	lr
 8000346:	bf00      	nop
 8000348:	e000e010 	.word	0xe000e010
 800034c:	e000ed00 	.word	0xe000ed00

08000350 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000350:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000354:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000356:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000358:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80004c0 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800035c:	4a56      	ldr	r2, [pc, #344]	; (80004b8 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800035e:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000360:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000364:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000366:	9c01      	ldr	r4, [sp, #4]
 8000368:	40dc      	lsrs	r4, r3
 800036a:	d102      	bne.n	8000372 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 800036c:	b005      	add	sp, #20
 800036e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000372:	2401      	movs	r4, #1
 8000374:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000378:	9c01      	ldr	r4, [sp, #4]
 800037a:	ea14 050a 	ands.w	r5, r4, sl
 800037e:	f000 8093 	beq.w	80004a8 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000382:	684c      	ldr	r4, [r1, #4]
 8000384:	f024 0b10 	bic.w	fp, r4, #16
 8000388:	f1bb 0f02 	cmp.w	fp, #2
 800038c:	d111      	bne.n	80003b2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800038e:	08df      	lsrs	r7, r3, #3
 8000390:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000394:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000398:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800039a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800039e:	fa09 fc0e 	lsl.w	ip, r9, lr
 80003a2:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80003a6:	690e      	ldr	r6, [r1, #16]
 80003a8:	fa06 f60e 	lsl.w	r6, r6, lr
 80003ac:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 80003b0:	623e      	str	r6, [r7, #32]
 80003b2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003b6:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80003b8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003ba:	fa07 f70c 	lsl.w	r7, r7, ip
 80003be:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003c0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80003c4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003c6:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003ca:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003ce:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003d2:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80003d6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003d8:	d811      	bhi.n	80003fe <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80003da:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003dc:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003e0:	68ce      	ldr	r6, [r1, #12]
 80003e2:	fa06 fe0c 	lsl.w	lr, r6, ip
 80003e6:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80003ea:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80003ec:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003ee:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003f2:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80003f6:	409e      	lsls	r6, r3
 80003f8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80003fc:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80003fe:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000400:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000402:	688e      	ldr	r6, [r1, #8]
 8000404:	fa06 f60c 	lsl.w	r6, r6, ip
 8000408:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800040a:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 800040c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800040e:	d54b      	bpl.n	80004a8 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000410:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000414:	f046 0601 	orr.w	r6, r6, #1
 8000418:	f8c8 6018 	str.w	r6, [r8, #24]
 800041c:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000420:	f023 0703 	bic.w	r7, r3, #3
 8000424:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000428:	f006 0601 	and.w	r6, r6, #1
 800042c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000430:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000432:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000436:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000438:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800043a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800043e:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000442:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000446:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800044a:	d02f      	beq.n	80004ac <HAL_GPIO_Init+0x15c>
 800044c:	4e1b      	ldr	r6, [pc, #108]	; (80004bc <HAL_GPIO_Init+0x16c>)
 800044e:	42b0      	cmp	r0, r6
 8000450:	d02e      	beq.n	80004b0 <HAL_GPIO_Init+0x160>
 8000452:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000456:	42b0      	cmp	r0, r6
 8000458:	d02c      	beq.n	80004b4 <HAL_GPIO_Init+0x164>
 800045a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800045e:	42b0      	cmp	r0, r6
 8000460:	bf14      	ite	ne
 8000462:	2605      	movne	r6, #5
 8000464:	2603      	moveq	r6, #3
 8000466:	fa06 f60e 	lsl.w	r6, r6, lr
 800046a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800046e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000470:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000472:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000474:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000478:	bf0c      	ite	eq
 800047a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800047c:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 800047e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000480:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000482:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000486:	bf0c      	ite	eq
 8000488:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800048a:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 800048c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800048e:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000490:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000494:	bf0c      	ite	eq
 8000496:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000498:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 800049a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 800049c:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800049e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80004a0:	bf54      	ite	pl
 80004a2:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80004a4:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 80004a6:	60d6      	str	r6, [r2, #12]
    position++;
 80004a8:	3301      	adds	r3, #1
 80004aa:	e75c      	b.n	8000366 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80004ac:	2600      	movs	r6, #0
 80004ae:	e7da      	b.n	8000466 <HAL_GPIO_Init+0x116>
 80004b0:	2601      	movs	r6, #1
 80004b2:	e7d8      	b.n	8000466 <HAL_GPIO_Init+0x116>
 80004b4:	2602      	movs	r6, #2
 80004b6:	e7d6      	b.n	8000466 <HAL_GPIO_Init+0x116>
 80004b8:	40010400 	.word	0x40010400
 80004bc:	48000400 	.word	0x48000400
 80004c0:	40021000 	.word	0x40021000

080004c4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004c4:	b10a      	cbz	r2, 80004ca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004c6:	6181      	str	r1, [r0, #24]
 80004c8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004ca:	6281      	str	r1, [r0, #40]	; 0x28
 80004cc:	4770      	bx	lr
	...

080004d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004d0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80004d4:	4605      	mov	r5, r0
 80004d6:	b918      	cbnz	r0, 80004e0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80004d8:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80004da:	b002      	add	sp, #8
 80004dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e0:	6803      	ldr	r3, [r0, #0]
 80004e2:	07da      	lsls	r2, r3, #31
 80004e4:	d411      	bmi.n	800050a <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004e6:	682b      	ldr	r3, [r5, #0]
 80004e8:	079b      	lsls	r3, r3, #30
 80004ea:	f100 8085 	bmi.w	80005f8 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004ee:	682b      	ldr	r3, [r5, #0]
 80004f0:	071c      	lsls	r4, r3, #28
 80004f2:	f100 80f6 	bmi.w	80006e2 <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004f6:	682b      	ldr	r3, [r5, #0]
 80004f8:	0758      	lsls	r0, r3, #29
 80004fa:	f100 813f 	bmi.w	800077c <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004fe:	69ea      	ldr	r2, [r5, #28]
 8000500:	2a00      	cmp	r2, #0
 8000502:	f040 81d6 	bne.w	80008b2 <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 8000506:	2000      	movs	r0, #0
 8000508:	e7e7      	b.n	80004da <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800050a:	4cba      	ldr	r4, [pc, #744]	; (80007f4 <HAL_RCC_OscConfig+0x324>)
 800050c:	6863      	ldr	r3, [r4, #4]
 800050e:	f003 030c 	and.w	r3, r3, #12
 8000512:	2b04      	cmp	r3, #4
 8000514:	d007      	beq.n	8000526 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000516:	6863      	ldr	r3, [r4, #4]
 8000518:	f003 030c 	and.w	r3, r3, #12
 800051c:	2b08      	cmp	r3, #8
 800051e:	d116      	bne.n	800054e <HAL_RCC_OscConfig+0x7e>
 8000520:	6863      	ldr	r3, [r4, #4]
 8000522:	03df      	lsls	r7, r3, #15
 8000524:	d513      	bpl.n	800054e <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000526:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800052a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800052e:	6821      	ldr	r1, [r4, #0]
 8000530:	fa93 f3a3 	rbit	r3, r3
 8000534:	fab3 f383 	clz	r3, r3
 8000538:	f003 031f 	and.w	r3, r3, #31
 800053c:	2201      	movs	r2, #1
 800053e:	fa02 f303 	lsl.w	r3, r2, r3
 8000542:	420b      	tst	r3, r1
 8000544:	d0cf      	beq.n	80004e6 <HAL_RCC_OscConfig+0x16>
 8000546:	686b      	ldr	r3, [r5, #4]
 8000548:	2b00      	cmp	r3, #0
 800054a:	d1cc      	bne.n	80004e6 <HAL_RCC_OscConfig+0x16>
 800054c:	e7c4      	b.n	80004d8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800054e:	686a      	ldr	r2, [r5, #4]
 8000550:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000554:	d125      	bne.n	80005a2 <HAL_RCC_OscConfig+0xd2>
 8000556:	6823      	ldr	r3, [r4, #0]
 8000558:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800055c:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800055e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000560:	68a9      	ldr	r1, [r5, #8]
 8000562:	f023 030f 	bic.w	r3, r3, #15
 8000566:	430b      	orrs	r3, r1
 8000568:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800056a:	b352      	cbz	r2, 80005c2 <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 800056c:	f7ff fe6e 	bl	800024c <HAL_GetTick>
 8000570:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000574:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000576:	2701      	movs	r7, #1
 8000578:	fa96 f3a6 	rbit	r3, r6
 800057c:	6822      	ldr	r2, [r4, #0]
 800057e:	fa96 f3a6 	rbit	r3, r6
 8000582:	fab3 f383 	clz	r3, r3
 8000586:	f003 031f 	and.w	r3, r3, #31
 800058a:	fa07 f303 	lsl.w	r3, r7, r3
 800058e:	4213      	tst	r3, r2
 8000590:	d1a9      	bne.n	80004e6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000592:	f7ff fe5b 	bl	800024c <HAL_GetTick>
 8000596:	eba0 0008 	sub.w	r0, r0, r8
 800059a:	2864      	cmp	r0, #100	; 0x64
 800059c:	d9ec      	bls.n	8000578 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 800059e:	2003      	movs	r0, #3
 80005a0:	e79b      	b.n	80004da <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005a2:	6823      	ldr	r3, [r4, #0]
 80005a4:	b932      	cbnz	r2, 80005b4 <HAL_RCC_OscConfig+0xe4>
 80005a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005aa:	6023      	str	r3, [r4, #0]
 80005ac:	6823      	ldr	r3, [r4, #0]
 80005ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005b2:	e7d3      	b.n	800055c <HAL_RCC_OscConfig+0x8c>
 80005b4:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80005b8:	d1f5      	bne.n	80005a6 <HAL_RCC_OscConfig+0xd6>
 80005ba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005be:	6023      	str	r3, [r4, #0]
 80005c0:	e7c9      	b.n	8000556 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80005c2:	f7ff fe43 	bl	800024c <HAL_GetTick>
 80005c6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005ca:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005cc:	2701      	movs	r7, #1
 80005ce:	fa96 f3a6 	rbit	r3, r6
 80005d2:	6822      	ldr	r2, [r4, #0]
 80005d4:	fa96 f3a6 	rbit	r3, r6
 80005d8:	fab3 f383 	clz	r3, r3
 80005dc:	f003 031f 	and.w	r3, r3, #31
 80005e0:	fa07 f303 	lsl.w	r3, r7, r3
 80005e4:	4213      	tst	r3, r2
 80005e6:	f43f af7e 	beq.w	80004e6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ea:	f7ff fe2f 	bl	800024c <HAL_GetTick>
 80005ee:	eba0 0008 	sub.w	r0, r0, r8
 80005f2:	2864      	cmp	r0, #100	; 0x64
 80005f4:	d9eb      	bls.n	80005ce <HAL_RCC_OscConfig+0xfe>
 80005f6:	e7d2      	b.n	800059e <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005f8:	4c7e      	ldr	r4, [pc, #504]	; (80007f4 <HAL_RCC_OscConfig+0x324>)
 80005fa:	6863      	ldr	r3, [r4, #4]
 80005fc:	f013 0f0c 	tst.w	r3, #12
 8000600:	d007      	beq.n	8000612 <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000602:	6863      	ldr	r3, [r4, #4]
 8000604:	f003 030c 	and.w	r3, r3, #12
 8000608:	2b08      	cmp	r3, #8
 800060a:	d122      	bne.n	8000652 <HAL_RCC_OscConfig+0x182>
 800060c:	6863      	ldr	r3, [r4, #4]
 800060e:	03de      	lsls	r6, r3, #15
 8000610:	d41f      	bmi.n	8000652 <HAL_RCC_OscConfig+0x182>
 8000612:	2302      	movs	r3, #2
 8000614:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000618:	6821      	ldr	r1, [r4, #0]
 800061a:	fa93 f3a3 	rbit	r3, r3
 800061e:	fab3 f383 	clz	r3, r3
 8000622:	f003 031f 	and.w	r3, r3, #31
 8000626:	2201      	movs	r2, #1
 8000628:	fa02 f303 	lsl.w	r3, r2, r3
 800062c:	420b      	tst	r3, r1
 800062e:	d003      	beq.n	8000638 <HAL_RCC_OscConfig+0x168>
 8000630:	692b      	ldr	r3, [r5, #16]
 8000632:	4293      	cmp	r3, r2
 8000634:	f47f af50 	bne.w	80004d8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000638:	6821      	ldr	r1, [r4, #0]
 800063a:	23f8      	movs	r3, #248	; 0xf8
 800063c:	fa93 f3a3 	rbit	r3, r3
 8000640:	fab3 f283 	clz	r2, r3
 8000644:	696b      	ldr	r3, [r5, #20]
 8000646:	4093      	lsls	r3, r2
 8000648:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800064c:	4313      	orrs	r3, r2
 800064e:	6023      	str	r3, [r4, #0]
 8000650:	e74d      	b.n	80004ee <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000652:	692a      	ldr	r2, [r5, #16]
 8000654:	2601      	movs	r6, #1
 8000656:	b30a      	cbz	r2, 800069c <HAL_RCC_OscConfig+0x1cc>
 8000658:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800065c:	fab3 f383 	clz	r3, r3
 8000660:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000664:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000668:	009b      	lsls	r3, r3, #2
 800066a:	2702      	movs	r7, #2
 800066c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800066e:	f7ff fded 	bl	800024c <HAL_GetTick>
 8000672:	4680      	mov	r8, r0
 8000674:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000678:	6822      	ldr	r2, [r4, #0]
 800067a:	fa97 f3a7 	rbit	r3, r7
 800067e:	fab3 f383 	clz	r3, r3
 8000682:	f003 031f 	and.w	r3, r3, #31
 8000686:	fa06 f303 	lsl.w	r3, r6, r3
 800068a:	4213      	tst	r3, r2
 800068c:	d1d4      	bne.n	8000638 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800068e:	f7ff fddd 	bl	800024c <HAL_GetTick>
 8000692:	eba0 0008 	sub.w	r0, r0, r8
 8000696:	2802      	cmp	r0, #2
 8000698:	d9ec      	bls.n	8000674 <HAL_RCC_OscConfig+0x1a4>
 800069a:	e780      	b.n	800059e <HAL_RCC_OscConfig+0xce>
 800069c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80006a0:	fab3 f383 	clz	r3, r3
 80006a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	2702      	movs	r7, #2
 80006b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006b2:	f7ff fdcb 	bl	800024c <HAL_GetTick>
 80006b6:	4680      	mov	r8, r0
 80006b8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006bc:	6822      	ldr	r2, [r4, #0]
 80006be:	fa97 f3a7 	rbit	r3, r7
 80006c2:	fab3 f383 	clz	r3, r3
 80006c6:	f003 031f 	and.w	r3, r3, #31
 80006ca:	fa06 f303 	lsl.w	r3, r6, r3
 80006ce:	4213      	tst	r3, r2
 80006d0:	f43f af0d 	beq.w	80004ee <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006d4:	f7ff fdba 	bl	800024c <HAL_GetTick>
 80006d8:	eba0 0008 	sub.w	r0, r0, r8
 80006dc:	2802      	cmp	r0, #2
 80006de:	d9eb      	bls.n	80006b8 <HAL_RCC_OscConfig+0x1e8>
 80006e0:	e75d      	b.n	800059e <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006e2:	69aa      	ldr	r2, [r5, #24]
 80006e4:	4e43      	ldr	r6, [pc, #268]	; (80007f4 <HAL_RCC_OscConfig+0x324>)
 80006e6:	4944      	ldr	r1, [pc, #272]	; (80007f8 <HAL_RCC_OscConfig+0x328>)
 80006e8:	2401      	movs	r4, #1
 80006ea:	b31a      	cbz	r2, 8000734 <HAL_RCC_OscConfig+0x264>
 80006ec:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80006f0:	fab3 f383 	clz	r3, r3
 80006f4:	440b      	add	r3, r1
 80006f6:	009b      	lsls	r3, r3, #2
 80006f8:	2702      	movs	r7, #2
 80006fa:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80006fc:	f7ff fda6 	bl	800024c <HAL_GetTick>
 8000700:	4680      	mov	r8, r0
 8000702:	fa97 f3a7 	rbit	r3, r7
 8000706:	fa97 f3a7 	rbit	r3, r7
 800070a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800070e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000710:	fa97 f3a7 	rbit	r3, r7
 8000714:	fab3 f383 	clz	r3, r3
 8000718:	f003 031f 	and.w	r3, r3, #31
 800071c:	fa04 f303 	lsl.w	r3, r4, r3
 8000720:	4213      	tst	r3, r2
 8000722:	f47f aee8 	bne.w	80004f6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000726:	f7ff fd91 	bl	800024c <HAL_GetTick>
 800072a:	eba0 0008 	sub.w	r0, r0, r8
 800072e:	2802      	cmp	r0, #2
 8000730:	d9e7      	bls.n	8000702 <HAL_RCC_OscConfig+0x232>
 8000732:	e734      	b.n	800059e <HAL_RCC_OscConfig+0xce>
 8000734:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000738:	fab3 f383 	clz	r3, r3
 800073c:	440b      	add	r3, r1
 800073e:	009b      	lsls	r3, r3, #2
 8000740:	2702      	movs	r7, #2
 8000742:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000744:	f7ff fd82 	bl	800024c <HAL_GetTick>
 8000748:	4680      	mov	r8, r0
 800074a:	fa97 f3a7 	rbit	r3, r7
 800074e:	fa97 f3a7 	rbit	r3, r7
 8000752:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000756:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000758:	fa97 f3a7 	rbit	r3, r7
 800075c:	fab3 f383 	clz	r3, r3
 8000760:	f003 031f 	and.w	r3, r3, #31
 8000764:	fa04 f303 	lsl.w	r3, r4, r3
 8000768:	4213      	tst	r3, r2
 800076a:	f43f aec4 	beq.w	80004f6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800076e:	f7ff fd6d 	bl	800024c <HAL_GetTick>
 8000772:	eba0 0008 	sub.w	r0, r0, r8
 8000776:	2802      	cmp	r0, #2
 8000778:	d9e7      	bls.n	800074a <HAL_RCC_OscConfig+0x27a>
 800077a:	e710      	b.n	800059e <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800077c:	4c1d      	ldr	r4, [pc, #116]	; (80007f4 <HAL_RCC_OscConfig+0x324>)
 800077e:	69e3      	ldr	r3, [r4, #28]
 8000780:	00d9      	lsls	r1, r3, #3
 8000782:	d434      	bmi.n	80007ee <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000784:	69e3      	ldr	r3, [r4, #28]
 8000786:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078a:	61e3      	str	r3, [r4, #28]
 800078c:	69e3      	ldr	r3, [r4, #28]
 800078e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000792:	9301      	str	r3, [sp, #4]
 8000794:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000796:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000798:	4f18      	ldr	r7, [pc, #96]	; (80007fc <HAL_RCC_OscConfig+0x32c>)
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	05da      	lsls	r2, r3, #23
 800079e:	d52f      	bpl.n	8000800 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a0:	68eb      	ldr	r3, [r5, #12]
 80007a2:	2b01      	cmp	r3, #1
 80007a4:	d13d      	bne.n	8000822 <HAL_RCC_OscConfig+0x352>
 80007a6:	6a23      	ldr	r3, [r4, #32]
 80007a8:	f043 0301 	orr.w	r3, r3, #1
 80007ac:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007ae:	f7ff fd4d 	bl	800024c <HAL_GetTick>
 80007b2:	2702      	movs	r7, #2
 80007b4:	4682      	mov	sl, r0
 80007b6:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007b8:	f04f 0801 	mov.w	r8, #1
 80007bc:	fa97 f3a7 	rbit	r3, r7
 80007c0:	fa97 f3a7 	rbit	r3, r7
 80007c4:	2b00      	cmp	r3, #0
 80007c6:	d06c      	beq.n	80008a2 <HAL_RCC_OscConfig+0x3d2>
 80007c8:	6a22      	ldr	r2, [r4, #32]
 80007ca:	fa99 f3a9 	rbit	r3, r9
 80007ce:	fab3 f383 	clz	r3, r3
 80007d2:	f003 031f 	and.w	r3, r3, #31
 80007d6:	fa08 f303 	lsl.w	r3, r8, r3
 80007da:	4213      	tst	r3, r2
 80007dc:	d058      	beq.n	8000890 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 80007de:	2e00      	cmp	r6, #0
 80007e0:	f43f ae8d 	beq.w	80004fe <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007e4:	69e3      	ldr	r3, [r4, #28]
 80007e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007ea:	61e3      	str	r3, [r4, #28]
 80007ec:	e687      	b.n	80004fe <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80007ee:	2600      	movs	r6, #0
 80007f0:	e7d2      	b.n	8000798 <HAL_RCC_OscConfig+0x2c8>
 80007f2:	bf00      	nop
 80007f4:	40021000 	.word	0x40021000
 80007f8:	10908120 	.word	0x10908120
 80007fc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000800:	683b      	ldr	r3, [r7, #0]
 8000802:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000806:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000808:	f7ff fd20 	bl	800024c <HAL_GetTick>
 800080c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800080e:	683b      	ldr	r3, [r7, #0]
 8000810:	05db      	lsls	r3, r3, #23
 8000812:	d4c5      	bmi.n	80007a0 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000814:	f7ff fd1a 	bl	800024c <HAL_GetTick>
 8000818:	eba0 0008 	sub.w	r0, r0, r8
 800081c:	2864      	cmp	r0, #100	; 0x64
 800081e:	d9f6      	bls.n	800080e <HAL_RCC_OscConfig+0x33e>
 8000820:	e6bd      	b.n	800059e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000822:	bb3b      	cbnz	r3, 8000874 <HAL_RCC_OscConfig+0x3a4>
 8000824:	6a23      	ldr	r3, [r4, #32]
 8000826:	f023 0301 	bic.w	r3, r3, #1
 800082a:	6223      	str	r3, [r4, #32]
 800082c:	6a23      	ldr	r3, [r4, #32]
 800082e:	f023 0304 	bic.w	r3, r3, #4
 8000832:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000834:	f7ff fd0a 	bl	800024c <HAL_GetTick>
 8000838:	2702      	movs	r7, #2
 800083a:	4682      	mov	sl, r0
 800083c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800083e:	f04f 0801 	mov.w	r8, #1
 8000842:	fa97 f3a7 	rbit	r3, r7
 8000846:	fa97 f3a7 	rbit	r3, r7
 800084a:	b373      	cbz	r3, 80008aa <HAL_RCC_OscConfig+0x3da>
 800084c:	6a22      	ldr	r2, [r4, #32]
 800084e:	fa99 f3a9 	rbit	r3, r9
 8000852:	fab3 f383 	clz	r3, r3
 8000856:	f003 031f 	and.w	r3, r3, #31
 800085a:	fa08 f303 	lsl.w	r3, r8, r3
 800085e:	4213      	tst	r3, r2
 8000860:	d0bd      	beq.n	80007de <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000862:	f7ff fcf3 	bl	800024c <HAL_GetTick>
 8000866:	f241 3388 	movw	r3, #5000	; 0x1388
 800086a:	eba0 000a 	sub.w	r0, r0, sl
 800086e:	4298      	cmp	r0, r3
 8000870:	d9e7      	bls.n	8000842 <HAL_RCC_OscConfig+0x372>
 8000872:	e694      	b.n	800059e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000874:	2b05      	cmp	r3, #5
 8000876:	6a23      	ldr	r3, [r4, #32]
 8000878:	d103      	bne.n	8000882 <HAL_RCC_OscConfig+0x3b2>
 800087a:	f043 0304 	orr.w	r3, r3, #4
 800087e:	6223      	str	r3, [r4, #32]
 8000880:	e791      	b.n	80007a6 <HAL_RCC_OscConfig+0x2d6>
 8000882:	f023 0301 	bic.w	r3, r3, #1
 8000886:	6223      	str	r3, [r4, #32]
 8000888:	6a23      	ldr	r3, [r4, #32]
 800088a:	f023 0304 	bic.w	r3, r3, #4
 800088e:	e78d      	b.n	80007ac <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000890:	f7ff fcdc 	bl	800024c <HAL_GetTick>
 8000894:	f241 3388 	movw	r3, #5000	; 0x1388
 8000898:	eba0 000a 	sub.w	r0, r0, sl
 800089c:	4298      	cmp	r0, r3
 800089e:	d98d      	bls.n	80007bc <HAL_RCC_OscConfig+0x2ec>
 80008a0:	e67d      	b.n	800059e <HAL_RCC_OscConfig+0xce>
 80008a2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008a8:	e78f      	b.n	80007ca <HAL_RCC_OscConfig+0x2fa>
 80008aa:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008b0:	e7cd      	b.n	800084e <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008b2:	4c41      	ldr	r4, [pc, #260]	; (80009b8 <HAL_RCC_OscConfig+0x4e8>)
 80008b4:	6863      	ldr	r3, [r4, #4]
 80008b6:	f003 030c 	and.w	r3, r3, #12
 80008ba:	2b08      	cmp	r3, #8
 80008bc:	f43f ae0c 	beq.w	80004d8 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008c0:	2a02      	cmp	r2, #2
 80008c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008c6:	d152      	bne.n	800096e <HAL_RCC_OscConfig+0x49e>
 80008c8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008cc:	fab3 f383 	clz	r3, r3
 80008d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008d8:	009b      	lsls	r3, r3, #2
 80008da:	2200      	movs	r2, #0
 80008dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008de:	f7ff fcb5 	bl	800024c <HAL_GetTick>
 80008e2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80008e6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008e8:	2601      	movs	r6, #1
 80008ea:	fa97 f3a7 	rbit	r3, r7
 80008ee:	6822      	ldr	r2, [r4, #0]
 80008f0:	fa97 f3a7 	rbit	r3, r7
 80008f4:	fab3 f383 	clz	r3, r3
 80008f8:	f003 031f 	and.w	r3, r3, #31
 80008fc:	fa06 f303 	lsl.w	r3, r6, r3
 8000900:	4213      	tst	r3, r2
 8000902:	d12d      	bne.n	8000960 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000904:	6862      	ldr	r2, [r4, #4]
 8000906:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000908:	6a29      	ldr	r1, [r5, #32]
 800090a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800090e:	430b      	orrs	r3, r1
 8000910:	4313      	orrs	r3, r2
 8000912:	6063      	str	r3, [r4, #4]
 8000914:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000918:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800091c:	fab3 f383 	clz	r3, r3
 8000920:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000924:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000928:	009b      	lsls	r3, r3, #2
 800092a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800092e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000930:	f7ff fc8c 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000934:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000936:	4607      	mov	r7, r0
 8000938:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800093c:	6822      	ldr	r2, [r4, #0]
 800093e:	fa95 f3a5 	rbit	r3, r5
 8000942:	fab3 f383 	clz	r3, r3
 8000946:	f003 031f 	and.w	r3, r3, #31
 800094a:	fa06 f303 	lsl.w	r3, r6, r3
 800094e:	4213      	tst	r3, r2
 8000950:	f47f add9 	bne.w	8000506 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000954:	f7ff fc7a 	bl	800024c <HAL_GetTick>
 8000958:	1bc0      	subs	r0, r0, r7
 800095a:	2802      	cmp	r0, #2
 800095c:	d9ec      	bls.n	8000938 <HAL_RCC_OscConfig+0x468>
 800095e:	e61e      	b.n	800059e <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000960:	f7ff fc74 	bl	800024c <HAL_GetTick>
 8000964:	eba0 0008 	sub.w	r0, r0, r8
 8000968:	2802      	cmp	r0, #2
 800096a:	d9be      	bls.n	80008ea <HAL_RCC_OscConfig+0x41a>
 800096c:	e617      	b.n	800059e <HAL_RCC_OscConfig+0xce>
 800096e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000972:	fab3 f383 	clz	r3, r3
 8000976:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800097a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800097e:	009b      	lsls	r3, r3, #2
 8000980:	2200      	movs	r2, #0
 8000982:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000984:	f7ff fc62 	bl	800024c <HAL_GetTick>
 8000988:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800098c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800098e:	2601      	movs	r6, #1
 8000990:	fa95 f3a5 	rbit	r3, r5
 8000994:	6822      	ldr	r2, [r4, #0]
 8000996:	fa95 f3a5 	rbit	r3, r5
 800099a:	fab3 f383 	clz	r3, r3
 800099e:	f003 031f 	and.w	r3, r3, #31
 80009a2:	fa06 f303 	lsl.w	r3, r6, r3
 80009a6:	4213      	tst	r3, r2
 80009a8:	f43f adad 	beq.w	8000506 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009ac:	f7ff fc4e 	bl	800024c <HAL_GetTick>
 80009b0:	1bc0      	subs	r0, r0, r7
 80009b2:	2802      	cmp	r0, #2
 80009b4:	d9ec      	bls.n	8000990 <HAL_RCC_OscConfig+0x4c0>
 80009b6:	e5f2      	b.n	800059e <HAL_RCC_OscConfig+0xce>
 80009b8:	40021000 	.word	0x40021000

080009bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009bc:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80009be:	4c13      	ldr	r4, [pc, #76]	; (8000a0c <HAL_RCC_GetSysClockFreq+0x50>)
 80009c0:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009c2:	f001 030c 	and.w	r3, r1, #12
 80009c6:	2b08      	cmp	r3, #8
 80009c8:	d11e      	bne.n	8000a08 <HAL_RCC_GetSysClockFreq+0x4c>
 80009ca:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80009ce:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009d2:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80009d6:	fab3 f383 	clz	r3, r3
 80009da:	fa22 f303 	lsr.w	r3, r2, r3
 80009de:	4a0c      	ldr	r2, [pc, #48]	; (8000a10 <HAL_RCC_GetSysClockFreq+0x54>)
 80009e0:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80009e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009e4:	220f      	movs	r2, #15
 80009e6:	fa92 f2a2 	rbit	r2, r2
 80009ea:	fab2 f282 	clz	r2, r2
 80009ee:	f003 030f 	and.w	r3, r3, #15
 80009f2:	40d3      	lsrs	r3, r2
 80009f4:	4a07      	ldr	r2, [pc, #28]	; (8000a14 <HAL_RCC_GetSysClockFreq+0x58>)
 80009f6:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80009f8:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009fa:	bf4a      	itet	mi
 80009fc:	4b06      	ldrmi	r3, [pc, #24]	; (8000a18 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80009fe:	4b07      	ldrpl	r3, [pc, #28]	; (8000a1c <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a00:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000a04:	4358      	muls	r0, r3
 8000a06:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000a08:	4803      	ldr	r0, [pc, #12]	; (8000a18 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a0a:	bd10      	pop	{r4, pc}
 8000a0c:	40021000 	.word	0x40021000
 8000a10:	08001b40 	.word	0x08001b40
 8000a14:	08001b50 	.word	0x08001b50
 8000a18:	007a1200 	.word	0x007a1200
 8000a1c:	003d0900 	.word	0x003d0900

08000a20 <HAL_RCC_ClockConfig>:
{
 8000a20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a24:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000a26:	4604      	mov	r4, r0
 8000a28:	b910      	cbnz	r0, 8000a30 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000a2a:	2001      	movs	r0, #1
 8000a2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a30:	4a4c      	ldr	r2, [pc, #304]	; (8000b64 <HAL_RCC_ClockConfig+0x144>)
 8000a32:	6813      	ldr	r3, [r2, #0]
 8000a34:	f003 0307 	and.w	r3, r3, #7
 8000a38:	428b      	cmp	r3, r1
 8000a3a:	d32e      	bcc.n	8000a9a <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a3c:	6822      	ldr	r2, [r4, #0]
 8000a3e:	0791      	lsls	r1, r2, #30
 8000a40:	d436      	bmi.n	8000ab0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a42:	07d2      	lsls	r2, r2, #31
 8000a44:	d43c      	bmi.n	8000ac0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000a46:	4a47      	ldr	r2, [pc, #284]	; (8000b64 <HAL_RCC_ClockConfig+0x144>)
 8000a48:	6813      	ldr	r3, [r2, #0]
 8000a4a:	f003 0307 	and.w	r3, r3, #7
 8000a4e:	429d      	cmp	r5, r3
 8000a50:	d375      	bcc.n	8000b3e <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a52:	6822      	ldr	r2, [r4, #0]
 8000a54:	4d44      	ldr	r5, [pc, #272]	; (8000b68 <HAL_RCC_ClockConfig+0x148>)
 8000a56:	f012 0f04 	tst.w	r2, #4
 8000a5a:	d17c      	bne.n	8000b56 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a5c:	0713      	lsls	r3, r2, #28
 8000a5e:	d506      	bpl.n	8000a6e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a60:	686b      	ldr	r3, [r5, #4]
 8000a62:	6922      	ldr	r2, [r4, #16]
 8000a64:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a68:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a6c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a6e:	f7ff ffa5 	bl	80009bc <HAL_RCC_GetSysClockFreq>
 8000a72:	686b      	ldr	r3, [r5, #4]
 8000a74:	22f0      	movs	r2, #240	; 0xf0
 8000a76:	fa92 f2a2 	rbit	r2, r2
 8000a7a:	fab2 f282 	clz	r2, r2
 8000a7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a82:	40d3      	lsrs	r3, r2
 8000a84:	4a39      	ldr	r2, [pc, #228]	; (8000b6c <HAL_RCC_ClockConfig+0x14c>)
 8000a86:	5cd3      	ldrb	r3, [r2, r3]
 8000a88:	40d8      	lsrs	r0, r3
 8000a8a:	4b39      	ldr	r3, [pc, #228]	; (8000b70 <HAL_RCC_ClockConfig+0x150>)
 8000a8c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a8e:	2000      	movs	r0, #0
 8000a90:	f7ff fb9a 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000a94:	2000      	movs	r0, #0
 8000a96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a9a:	6813      	ldr	r3, [r2, #0]
 8000a9c:	f023 0307 	bic.w	r3, r3, #7
 8000aa0:	430b      	orrs	r3, r1
 8000aa2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000aa4:	6813      	ldr	r3, [r2, #0]
 8000aa6:	f003 0307 	and.w	r3, r3, #7
 8000aaa:	4299      	cmp	r1, r3
 8000aac:	d1bd      	bne.n	8000a2a <HAL_RCC_ClockConfig+0xa>
 8000aae:	e7c5      	b.n	8000a3c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ab0:	492d      	ldr	r1, [pc, #180]	; (8000b68 <HAL_RCC_ClockConfig+0x148>)
 8000ab2:	68a0      	ldr	r0, [r4, #8]
 8000ab4:	684b      	ldr	r3, [r1, #4]
 8000ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000aba:	4303      	orrs	r3, r0
 8000abc:	604b      	str	r3, [r1, #4]
 8000abe:	e7c0      	b.n	8000a42 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ac0:	6862      	ldr	r2, [r4, #4]
 8000ac2:	4e29      	ldr	r6, [pc, #164]	; (8000b68 <HAL_RCC_ClockConfig+0x148>)
 8000ac4:	2a01      	cmp	r2, #1
 8000ac6:	d127      	bne.n	8000b18 <HAL_RCC_ClockConfig+0xf8>
 8000ac8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000acc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ad0:	6831      	ldr	r1, [r6, #0]
 8000ad2:	fa93 f3a3 	rbit	r3, r3
 8000ad6:	fab3 f383 	clz	r3, r3
 8000ada:	f003 031f 	and.w	r3, r3, #31
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ae4:	d0a1      	beq.n	8000a2a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ae6:	6873      	ldr	r3, [r6, #4]
 8000ae8:	f023 0303 	bic.w	r3, r3, #3
 8000aec:	431a      	orrs	r2, r3
 8000aee:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000af0:	f7ff fbac 	bl	800024c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000af4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000af8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000afa:	6873      	ldr	r3, [r6, #4]
 8000afc:	6862      	ldr	r2, [r4, #4]
 8000afe:	f003 030c 	and.w	r3, r3, #12
 8000b02:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000b06:	d09e      	beq.n	8000a46 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b08:	f7ff fba0 	bl	800024c <HAL_GetTick>
 8000b0c:	1bc0      	subs	r0, r0, r7
 8000b0e:	4540      	cmp	r0, r8
 8000b10:	d9f3      	bls.n	8000afa <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000b12:	2003      	movs	r0, #3
}
 8000b14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b18:	2a02      	cmp	r2, #2
 8000b1a:	bf0c      	ite	eq
 8000b1c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b20:	2302      	movne	r3, #2
 8000b22:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b26:	6830      	ldr	r0, [r6, #0]
 8000b28:	fa93 f3a3 	rbit	r3, r3
 8000b2c:	fab3 f383 	clz	r3, r3
 8000b30:	f003 031f 	and.w	r3, r3, #31
 8000b34:	2101      	movs	r1, #1
 8000b36:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3a:	4203      	tst	r3, r0
 8000b3c:	e7d2      	b.n	8000ae4 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b3e:	6813      	ldr	r3, [r2, #0]
 8000b40:	f023 0307 	bic.w	r3, r3, #7
 8000b44:	432b      	orrs	r3, r5
 8000b46:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b48:	6813      	ldr	r3, [r2, #0]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	429d      	cmp	r5, r3
 8000b50:	f47f af6b 	bne.w	8000a2a <HAL_RCC_ClockConfig+0xa>
 8000b54:	e77d      	b.n	8000a52 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b56:	686b      	ldr	r3, [r5, #4]
 8000b58:	68e1      	ldr	r1, [r4, #12]
 8000b5a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b5e:	430b      	orrs	r3, r1
 8000b60:	606b      	str	r3, [r5, #4]
 8000b62:	e77b      	b.n	8000a5c <HAL_RCC_ClockConfig+0x3c>
 8000b64:	40022000 	.word	0x40022000
 8000b68:	40021000 	.word	0x40021000
 8000b6c:	08001b64 	.word	0x08001b64
 8000b70:	20000008 	.word	0x20000008

08000b74 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000b74:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b76:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b7a:	685b      	ldr	r3, [r3, #4]
 8000b7c:	fa92 f2a2 	rbit	r2, r2
 8000b80:	fab2 f282 	clz	r2, r2
 8000b84:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b88:	40d3      	lsrs	r3, r2
 8000b8a:	4a04      	ldr	r2, [pc, #16]	; (8000b9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000b8c:	5cd3      	ldrb	r3, [r2, r3]
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000b90:	6810      	ldr	r0, [r2, #0]
}    
 8000b92:	40d8      	lsrs	r0, r3
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop
 8000b98:	40021000 	.word	0x40021000
 8000b9c:	08001b74 	.word	0x08001b74
 8000ba0:	20000008 	.word	0x20000008

08000ba4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000ba6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000baa:	685b      	ldr	r3, [r3, #4]
 8000bac:	fa92 f2a2 	rbit	r2, r2
 8000bb0:	fab2 f282 	clz	r2, r2
 8000bb4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000bb8:	40d3      	lsrs	r3, r2
 8000bba:	4a04      	ldr	r2, [pc, #16]	; (8000bcc <HAL_RCC_GetPCLK2Freq+0x28>)
 8000bbc:	5cd3      	ldrb	r3, [r2, r3]
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000bc0:	6810      	ldr	r0, [r2, #0]
} 
 8000bc2:	40d8      	lsrs	r0, r3
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40021000 	.word	0x40021000
 8000bcc:	08001b74 	.word	0x08001b74
 8000bd0:	20000008 	.word	0x20000008

08000bd4 <HAL_TIM_PWM_MspInit>:
 8000bd4:	4770      	bx	lr

08000bd6 <HAL_TIM_PeriodElapsedCallback>:
 8000bd6:	4770      	bx	lr

08000bd8 <HAL_TIM_OC_DelayElapsedCallback>:
 8000bd8:	4770      	bx	lr

08000bda <HAL_TIM_IC_CaptureCallback>:
 8000bda:	4770      	bx	lr

08000bdc <HAL_TIM_PWM_PulseFinishedCallback>:
 8000bdc:	4770      	bx	lr

08000bde <HAL_TIM_TriggerCallback>:
 8000bde:	4770      	bx	lr

08000be0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000be0:	6803      	ldr	r3, [r0, #0]
 8000be2:	691a      	ldr	r2, [r3, #16]
 8000be4:	0791      	lsls	r1, r2, #30
{
 8000be6:	b510      	push	{r4, lr}
 8000be8:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000bea:	d50f      	bpl.n	8000c0c <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000bec:	68da      	ldr	r2, [r3, #12]
 8000bee:	0792      	lsls	r2, r2, #30
 8000bf0:	d50c      	bpl.n	8000c0c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8000bf2:	f06f 0202 	mvn.w	r2, #2
 8000bf6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000bf8:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000bfa:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000bfc:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000bfe:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000c00:	f000 8085 	beq.w	8000d0e <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000c04:	f7ff ffe9 	bl	8000bda <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000c0c:	6823      	ldr	r3, [r4, #0]
 8000c0e:	691a      	ldr	r2, [r3, #16]
 8000c10:	0752      	lsls	r2, r2, #29
 8000c12:	d510      	bpl.n	8000c36 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000c14:	68da      	ldr	r2, [r3, #12]
 8000c16:	0750      	lsls	r0, r2, #29
 8000c18:	d50d      	bpl.n	8000c36 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8000c1a:	f06f 0204 	mvn.w	r2, #4
 8000c1e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000c20:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000c22:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000c24:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000c28:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c2a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000c2c:	d075      	beq.n	8000d1a <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c2e:	f7ff ffd4 	bl	8000bda <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c32:	2300      	movs	r3, #0
 8000c34:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000c36:	6823      	ldr	r3, [r4, #0]
 8000c38:	691a      	ldr	r2, [r3, #16]
 8000c3a:	0711      	lsls	r1, r2, #28
 8000c3c:	d50f      	bpl.n	8000c5e <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000c3e:	68da      	ldr	r2, [r3, #12]
 8000c40:	0712      	lsls	r2, r2, #28
 8000c42:	d50c      	bpl.n	8000c5e <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8000c44:	f06f 0208 	mvn.w	r2, #8
 8000c48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c4a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c4c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c4e:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c50:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c52:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c54:	d067      	beq.n	8000d26 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c56:	f7ff ffc0 	bl	8000bda <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000c5e:	6823      	ldr	r3, [r4, #0]
 8000c60:	691a      	ldr	r2, [r3, #16]
 8000c62:	06d0      	lsls	r0, r2, #27
 8000c64:	d510      	bpl.n	8000c88 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	06d1      	lsls	r1, r2, #27
 8000c6a:	d50d      	bpl.n	8000c88 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8000c6c:	f06f 0210 	mvn.w	r2, #16
 8000c70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c72:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c74:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c76:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c7a:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c7c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c7e:	d058      	beq.n	8000d32 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c80:	f7ff ffab 	bl	8000bda <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c84:	2300      	movs	r3, #0
 8000c86:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000c88:	6823      	ldr	r3, [r4, #0]
 8000c8a:	691a      	ldr	r2, [r3, #16]
 8000c8c:	07d2      	lsls	r2, r2, #31
 8000c8e:	d508      	bpl.n	8000ca2 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000c90:	68da      	ldr	r2, [r3, #12]
 8000c92:	07d0      	lsls	r0, r2, #31
 8000c94:	d505      	bpl.n	8000ca2 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8000c96:	f06f 0201 	mvn.w	r2, #1
 8000c9a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c9c:	4620      	mov	r0, r4
 8000c9e:	f7ff ff9a 	bl	8000bd6 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000ca2:	6823      	ldr	r3, [r4, #0]
 8000ca4:	691a      	ldr	r2, [r3, #16]
 8000ca6:	0611      	lsls	r1, r2, #24
 8000ca8:	d508      	bpl.n	8000cbc <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000caa:	68da      	ldr	r2, [r3, #12]
 8000cac:	0612      	lsls	r2, r2, #24
 8000cae:	d505      	bpl.n	8000cbc <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8000cb0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000cb4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000cb6:	4620      	mov	r0, r4
 8000cb8:	f000 fba5 	bl	8001406 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8000cbc:	6823      	ldr	r3, [r4, #0]
 8000cbe:	691a      	ldr	r2, [r3, #16]
 8000cc0:	05d0      	lsls	r0, r2, #23
 8000cc2:	d508      	bpl.n	8000cd6 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000cc4:	68da      	ldr	r2, [r3, #12]
 8000cc6:	0611      	lsls	r1, r2, #24
 8000cc8:	d505      	bpl.n	8000cd6 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8000cca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8000cce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8000cd0:	4620      	mov	r0, r4
 8000cd2:	f000 fb99 	bl	8001408 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000cd6:	6823      	ldr	r3, [r4, #0]
 8000cd8:	691a      	ldr	r2, [r3, #16]
 8000cda:	0652      	lsls	r2, r2, #25
 8000cdc:	d508      	bpl.n	8000cf0 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000cde:	68da      	ldr	r2, [r3, #12]
 8000ce0:	0650      	lsls	r0, r2, #25
 8000ce2:	d505      	bpl.n	8000cf0 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8000ce4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000ce8:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000cea:	4620      	mov	r0, r4
 8000cec:	f7ff ff77 	bl	8000bde <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000cf0:	6823      	ldr	r3, [r4, #0]
 8000cf2:	691a      	ldr	r2, [r3, #16]
 8000cf4:	0691      	lsls	r1, r2, #26
 8000cf6:	d522      	bpl.n	8000d3e <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000cf8:	68da      	ldr	r2, [r3, #12]
 8000cfa:	0692      	lsls	r2, r2, #26
 8000cfc:	d51f      	bpl.n	8000d3e <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000cfe:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000d02:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000d04:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000d06:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000d0a:	f000 bb7b 	b.w	8001404 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d0e:	f7ff ff63 	bl	8000bd8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d12:	4620      	mov	r0, r4
 8000d14:	f7ff ff62 	bl	8000bdc <HAL_TIM_PWM_PulseFinishedCallback>
 8000d18:	e776      	b.n	8000c08 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d1a:	f7ff ff5d 	bl	8000bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f7ff ff5c 	bl	8000bdc <HAL_TIM_PWM_PulseFinishedCallback>
 8000d24:	e785      	b.n	8000c32 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d26:	f7ff ff57 	bl	8000bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f7ff ff56 	bl	8000bdc <HAL_TIM_PWM_PulseFinishedCallback>
 8000d30:	e793      	b.n	8000c5a <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d32:	f7ff ff51 	bl	8000bd8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d36:	4620      	mov	r0, r4
 8000d38:	f7ff ff50 	bl	8000bdc <HAL_TIM_PWM_PulseFinishedCallback>
 8000d3c:	e7a2      	b.n	8000c84 <HAL_TIM_IRQHandler+0xa4>
 8000d3e:	bd10      	pop	{r4, pc}

08000d40 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d40:	4a21      	ldr	r2, [pc, #132]	; (8000dc8 <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 8000d42:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d44:	4290      	cmp	r0, r2
{
 8000d46:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d48:	d005      	beq.n	8000d56 <TIM_Base_SetConfig+0x16>
 8000d4a:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d4e:	d002      	beq.n	8000d56 <TIM_Base_SetConfig+0x16>
 8000d50:	4c1e      	ldr	r4, [pc, #120]	; (8000dcc <TIM_Base_SetConfig+0x8c>)
 8000d52:	42a0      	cmp	r0, r4
 8000d54:	d10c      	bne.n	8000d70 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000d56:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d58:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d5c:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8000d5e:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d62:	d010      	beq.n	8000d86 <TIM_Base_SetConfig+0x46>
 8000d64:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d68:	d00d      	beq.n	8000d86 <TIM_Base_SetConfig+0x46>
 8000d6a:	4a18      	ldr	r2, [pc, #96]	; (8000dcc <TIM_Base_SetConfig+0x8c>)
 8000d6c:	4290      	cmp	r0, r2
 8000d6e:	d00a      	beq.n	8000d86 <TIM_Base_SetConfig+0x46>
 8000d70:	4a17      	ldr	r2, [pc, #92]	; (8000dd0 <TIM_Base_SetConfig+0x90>)
 8000d72:	4290      	cmp	r0, r2
 8000d74:	d007      	beq.n	8000d86 <TIM_Base_SetConfig+0x46>
 8000d76:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d7a:	4290      	cmp	r0, r2
 8000d7c:	d003      	beq.n	8000d86 <TIM_Base_SetConfig+0x46>
 8000d7e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d82:	4290      	cmp	r0, r2
 8000d84:	d103      	bne.n	8000d8e <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d86:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d88:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d8c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000d8e:	694a      	ldr	r2, [r1, #20]
 8000d90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d94:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000d96:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d98:	688b      	ldr	r3, [r1, #8]
 8000d9a:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d9c:	680b      	ldr	r3, [r1, #0]
 8000d9e:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8000da0:	4b09      	ldr	r3, [pc, #36]	; (8000dc8 <TIM_Base_SetConfig+0x88>)
 8000da2:	4298      	cmp	r0, r3
 8000da4:	d00b      	beq.n	8000dbe <TIM_Base_SetConfig+0x7e>
 8000da6:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000daa:	4298      	cmp	r0, r3
 8000dac:	d007      	beq.n	8000dbe <TIM_Base_SetConfig+0x7e>
 8000dae:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000db2:	4298      	cmp	r0, r3
 8000db4:	d003      	beq.n	8000dbe <TIM_Base_SetConfig+0x7e>
 8000db6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dba:	4298      	cmp	r0, r3
 8000dbc:	d101      	bne.n	8000dc2 <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000dbe:	690b      	ldr	r3, [r1, #16]
 8000dc0:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000dc2:	2301      	movs	r3, #1
 8000dc4:	6143      	str	r3, [r0, #20]
 8000dc6:	bd10      	pop	{r4, pc}
 8000dc8:	40012c00 	.word	0x40012c00
 8000dcc:	40000400 	.word	0x40000400
 8000dd0:	40014000 	.word	0x40014000

08000dd4 <HAL_TIM_Base_Init>:
{ 
 8000dd4:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000dd6:	4604      	mov	r4, r0
 8000dd8:	b1a0      	cbz	r0, 8000e04 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000dda:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000dde:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000de2:	b91b      	cbnz	r3, 8000dec <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000de4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000de8:	f000 fd94 	bl	8001914 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000dec:	2302      	movs	r3, #2
 8000dee:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000df2:	6820      	ldr	r0, [r4, #0]
 8000df4:	1d21      	adds	r1, r4, #4
 8000df6:	f7ff ffa3 	bl	8000d40 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000dfa:	2301      	movs	r3, #1
 8000dfc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000e00:	2000      	movs	r0, #0
 8000e02:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e04:	2001      	movs	r0, #1
}
 8000e06:	bd10      	pop	{r4, pc}

08000e08 <HAL_TIM_PWM_Init>:
{
 8000e08:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000e0a:	4604      	mov	r4, r0
 8000e0c:	b1a0      	cbz	r0, 8000e38 <HAL_TIM_PWM_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000e0e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000e12:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e16:	b91b      	cbnz	r3, 8000e20 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000e18:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8000e1c:	f7ff feda 	bl	8000bd4 <HAL_TIM_PWM_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000e20:	2302      	movs	r3, #2
 8000e22:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000e26:	6820      	ldr	r0, [r4, #0]
 8000e28:	1d21      	adds	r1, r4, #4
 8000e2a:	f7ff ff89 	bl	8000d40 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000e34:	2000      	movs	r0, #0
 8000e36:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e38:	2001      	movs	r0, #1
}
 8000e3a:	bd10      	pop	{r4, pc}

08000e3c <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

   /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000e3c:	6a03      	ldr	r3, [r0, #32]
 8000e3e:	f023 0301 	bic.w	r3, r3, #1
 8000e42:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000e44:	6a03      	ldr	r3, [r0, #32]
{
 8000e46:	b570      	push	{r4, r5, r6, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8000e48:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000e4a:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000e4c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8000e4e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e52:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000e56:	432a      	orrs	r2, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8000e58:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8000e5a:	f023 0302 	bic.w	r3, r3, #2
  tmpccer |= OC_Config->OCPolarity;
 8000e5e:	432b      	orrs	r3, r5

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8000e60:	4d17      	ldr	r5, [pc, #92]	; (8000ec0 <TIM_OC1_SetConfig+0x84>)
 8000e62:	42a8      	cmp	r0, r5
 8000e64:	d00b      	beq.n	8000e7e <TIM_OC1_SetConfig+0x42>
 8000e66:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8000e6a:	42a8      	cmp	r0, r5
 8000e6c:	d007      	beq.n	8000e7e <TIM_OC1_SetConfig+0x42>
 8000e6e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e72:	42a8      	cmp	r0, r5
 8000e74:	d003      	beq.n	8000e7e <TIM_OC1_SetConfig+0x42>
 8000e76:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e7a:	42a8      	cmp	r0, r5
 8000e7c:	d11a      	bne.n	8000eb4 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));
 
    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8000e7e:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8000e80:	f023 0308 	bic.w	r3, r3, #8
    tmpccer |= OC_Config->OCNPolarity;
 8000e84:	432b      	orrs	r3, r5
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
  }
  
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000e86:	4d0e      	ldr	r5, [pc, #56]	; (8000ec0 <TIM_OC1_SetConfig+0x84>)
 8000e88:	42a8      	cmp	r0, r5
    tmpccer &= ~TIM_CCER_CC1NE;
 8000e8a:	f023 0304 	bic.w	r3, r3, #4
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000e8e:	d00b      	beq.n	8000ea8 <TIM_OC1_SetConfig+0x6c>
 8000e90:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8000e94:	42a8      	cmp	r0, r5
 8000e96:	d007      	beq.n	8000ea8 <TIM_OC1_SetConfig+0x6c>
 8000e98:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000e9c:	42a8      	cmp	r0, r5
 8000e9e:	d003      	beq.n	8000ea8 <TIM_OC1_SetConfig+0x6c>
 8000ea0:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ea4:	42a8      	cmp	r0, r5
 8000ea6:	d105      	bne.n	8000eb4 <TIM_OC1_SetConfig+0x78>
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8000ea8:	f424 7540 	bic.w	r5, r4, #768	; 0x300
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8000eac:	698e      	ldr	r6, [r1, #24]
 8000eae:	694c      	ldr	r4, [r1, #20]
 8000eb0:	4334      	orrs	r4, r6
 8000eb2:	432c      	orrs	r4, r5
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000eb4:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8000eb6:	6182      	str	r2, [r0, #24]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8000eb8:	684a      	ldr	r2, [r1, #4]
 8000eba:	6342      	str	r2, [r0, #52]	; 0x34
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000ebc:	6203      	str	r3, [r0, #32]
 8000ebe:	bd70      	pop	{r4, r5, r6, pc}
 8000ec0:	40012c00 	.word	0x40012c00

08000ec4 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ec4:	6a03      	ldr	r3, [r0, #32]
 8000ec6:	f023 0310 	bic.w	r3, r3, #16
 8000eca:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000ecc:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8000ece:	6842      	ldr	r2, [r0, #4]
{
 8000ed0:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8000ed2:	6984      	ldr	r4, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000ed4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8000ed6:	f024 7480 	bic.w	r4, r4, #16777216	; 0x1000000
 8000eda:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000ede:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000ee2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8000ee4:	f023 0320 	bic.w	r3, r3, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8000ee8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8000eec:	4d10      	ldr	r5, [pc, #64]	; (8000f30 <TIM_OC2_SetConfig+0x6c>)
 8000eee:	42a8      	cmp	r0, r5
 8000ef0:	d10e      	bne.n	8000f10 <TIM_OC2_SetConfig+0x4c>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000ef2:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 8000ef4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8000ef8:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8000efc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
#else
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8000f00:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000f02:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8000f04:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8000f08:	4335      	orrs	r5, r6
 8000f0a:	ea42 0285 	orr.w	r2, r2, r5, lsl #2
 8000f0e:	e009      	b.n	8000f24 <TIM_OC2_SetConfig+0x60>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000f10:	4d08      	ldr	r5, [pc, #32]	; (8000f34 <TIM_OC2_SetConfig+0x70>)
 8000f12:	42a8      	cmp	r0, r5
 8000f14:	d0f4      	beq.n	8000f00 <TIM_OC2_SetConfig+0x3c>
 8000f16:	4d08      	ldr	r5, [pc, #32]	; (8000f38 <TIM_OC2_SetConfig+0x74>)
 8000f18:	42a8      	cmp	r0, r5
 8000f1a:	d0f1      	beq.n	8000f00 <TIM_OC2_SetConfig+0x3c>
 8000f1c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f20:	42a8      	cmp	r0, r5
 8000f22:	d0ed      	beq.n	8000f00 <TIM_OC2_SetConfig+0x3c>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000f24:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8000f26:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR1 = tmpccmrx;
 8000f28:	6184      	str	r4, [r0, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8000f2a:	6382      	str	r2, [r0, #56]	; 0x38
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000f2c:	6203      	str	r3, [r0, #32]
}
 8000f2e:	bd70      	pop	{r4, r5, r6, pc}
 8000f30:	40012c00 	.word	0x40012c00
 8000f34:	40014000 	.word	0x40014000
 8000f38:	40014400 	.word	0x40014400

08000f3c <TIM_OC3_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8000f3c:	6a03      	ldr	r3, [r0, #32]
 8000f3e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000f42:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000f44:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8000f46:	6842      	ldr	r2, [r0, #4]
{
 8000f48:	b570      	push	{r4, r5, r6, lr}
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000f4a:	69c4      	ldr	r4, [r0, #28]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8000f4c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC3S;  
 8000f4e:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
 8000f52:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8000f56:	432c      	orrs	r4, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000f58:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 8000f5a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8000f5e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8

  if(IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8000f62:	4d11      	ldr	r5, [pc, #68]	; (8000fa8 <TIM_OC3_SetConfig+0x6c>)
 8000f64:	42a8      	cmp	r0, r5
 8000f66:	d10e      	bne.n	8000f86 <TIM_OC3_SetConfig+0x4a>
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000f68:	68cd      	ldr	r5, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8000f6a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8000f6e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8000f72:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
    tmpcr2 &= ~TIM_CR2_OIS3N;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8000f76:	694d      	ldr	r5, [r1, #20]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000f78:	698e      	ldr	r6, [r1, #24]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8000f7a:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8000f7e:	4335      	orrs	r5, r6
 8000f80:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
 8000f84:	e009      	b.n	8000f9a <TIM_OC3_SetConfig+0x5e>
  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000f86:	4d09      	ldr	r5, [pc, #36]	; (8000fac <TIM_OC3_SetConfig+0x70>)
 8000f88:	42a8      	cmp	r0, r5
 8000f8a:	d0f4      	beq.n	8000f76 <TIM_OC3_SetConfig+0x3a>
 8000f8c:	4d08      	ldr	r5, [pc, #32]	; (8000fb0 <TIM_OC3_SetConfig+0x74>)
 8000f8e:	42a8      	cmp	r0, r5
 8000f90:	d0f1      	beq.n	8000f76 <TIM_OC3_SetConfig+0x3a>
 8000f92:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000f96:	42a8      	cmp	r0, r5
 8000f98:	d0ed      	beq.n	8000f76 <TIM_OC3_SetConfig+0x3a>
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8000f9a:	6042      	str	r2, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
  
  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8000f9c:	684a      	ldr	r2, [r1, #4]
  TIMx->CCMR2 = tmpccmrx;
 8000f9e:	61c4      	str	r4, [r0, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8000fa0:	63c2      	str	r2, [r0, #60]	; 0x3c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8000fa2:	6203      	str	r3, [r0, #32]
}
 8000fa4:	bd70      	pop	{r4, r5, r6, pc}
 8000fa6:	bf00      	nop
 8000fa8:	40012c00 	.word	0x40012c00
 8000fac:	40014000 	.word	0x40014000
 8000fb0:	40014400 	.word	0x40014400

08000fb4 <TIM_OC4_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8000fb4:	6a03      	ldr	r3, [r0, #32]
 8000fb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000fba:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8000fbc:	6a02      	ldr	r2, [r0, #32]
{
 8000fbe:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 8000fc0:	6844      	ldr	r4, [r0, #4]
  
  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8000fc2:	69c3      	ldr	r3, [r0, #28]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;
  
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000fc4:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8000fc6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000fca:	f423 43e6 	bic.w	r3, r3, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8000fce:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000fd2:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8000fd4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8000fd8:	ea42 3205 	orr.w	r2, r2, r5, lsl #12

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8000fdc:	4d0c      	ldr	r5, [pc, #48]	; (8001010 <TIM_OC4_SetConfig+0x5c>)
 8000fde:	42a8      	cmp	r0, r5
 8000fe0:	d00b      	beq.n	8000ffa <TIM_OC4_SetConfig+0x46>
 8000fe2:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8000fe6:	42a8      	cmp	r0, r5
 8000fe8:	d007      	beq.n	8000ffa <TIM_OC4_SetConfig+0x46>
 8000fea:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000fee:	42a8      	cmp	r0, r5
 8000ff0:	d003      	beq.n	8000ffa <TIM_OC4_SetConfig+0x46>
 8000ff2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8000ff6:	42a8      	cmp	r0, r5
 8000ff8:	d104      	bne.n	8001004 <TIM_OC4_SetConfig+0x50>
#else
   /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
#endif
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8000ffa:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 8000ffc:	f424 4480 	bic.w	r4, r4, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8001000:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8001004:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8001006:	61c3      	str	r3, [r0, #28]
  
  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8001008:	684b      	ldr	r3, [r1, #4]
 800100a:	6403      	str	r3, [r0, #64]	; 0x40
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 800100c:	6202      	str	r2, [r0, #32]
 800100e:	bd30      	pop	{r4, r5, pc}
 8001010:	40012c00 	.word	0x40012c00

08001014 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001014:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8001016:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001018:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800101a:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800101e:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001022:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001024:	6083      	str	r3, [r0, #8]
 8001026:	bd10      	pop	{r4, pc}

08001028 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8001028:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800102c:	2b01      	cmp	r3, #1
{
 800102e:	b570      	push	{r4, r5, r6, lr}
 8001030:	4604      	mov	r4, r0
 8001032:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8001036:	d01a      	beq.n	800106e <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8001038:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 800103c:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 800103e:	2301      	movs	r3, #1
 8001040:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8001044:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001046:	4b52      	ldr	r3, [pc, #328]	; (8001190 <HAL_TIM_ConfigClockSource+0x168>)
 8001048:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 800104a:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 800104c:	680b      	ldr	r3, [r1, #0]
 800104e:	2b40      	cmp	r3, #64	; 0x40
 8001050:	d075      	beq.n	800113e <HAL_TIM_ConfigClockSource+0x116>
 8001052:	d818      	bhi.n	8001086 <HAL_TIM_ConfigClockSource+0x5e>
 8001054:	2b10      	cmp	r3, #16
 8001056:	f000 808f 	beq.w	8001178 <HAL_TIM_ConfigClockSource+0x150>
 800105a:	d809      	bhi.n	8001070 <HAL_TIM_ConfigClockSource+0x48>
 800105c:	2b00      	cmp	r3, #0
 800105e:	f000 8085 	beq.w	800116c <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8001062:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8001064:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8001066:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800106a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 800106e:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8001070:	2b20      	cmp	r3, #32
 8001072:	f000 8087 	beq.w	8001184 <HAL_TIM_ConfigClockSource+0x15c>
 8001076:	2b30      	cmp	r3, #48	; 0x30
 8001078:	d1f3      	bne.n	8001062 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 800107a:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800107c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001080:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8001084:	e033      	b.n	80010ee <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001086:	2b70      	cmp	r3, #112	; 0x70
 8001088:	d033      	beq.n	80010f2 <HAL_TIM_ConfigClockSource+0xca>
 800108a:	d81b      	bhi.n	80010c4 <HAL_TIM_ConfigClockSource+0x9c>
 800108c:	2b50      	cmp	r3, #80	; 0x50
 800108e:	d03f      	beq.n	8001110 <HAL_TIM_ConfigClockSource+0xe8>
 8001090:	2b60      	cmp	r3, #96	; 0x60
 8001092:	d1e6      	bne.n	8001062 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8001094:	684d      	ldr	r5, [r1, #4]
 8001096:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001098:	6a01      	ldr	r1, [r0, #32]
 800109a:	f021 0110 	bic.w	r1, r1, #16
 800109e:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 80010a0:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 80010a2:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80010a4:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80010a8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 80010ac:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80010b0:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 80010b4:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 80010b6:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80010b8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80010ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80010be:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 80010c2:	e014      	b.n	80010ee <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80010c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010c8:	d00c      	beq.n	80010e4 <HAL_TIM_ConfigClockSource+0xbc>
 80010ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80010ce:	d1c8      	bne.n	8001062 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 80010d0:	68cb      	ldr	r3, [r1, #12]
 80010d2:	684a      	ldr	r2, [r1, #4]
 80010d4:	6889      	ldr	r1, [r1, #8]
 80010d6:	f7ff ff9d 	bl	8001014 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80010da:	6822      	ldr	r2, [r4, #0]
 80010dc:	6893      	ldr	r3, [r2, #8]
 80010de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e2:	e013      	b.n	800110c <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80010e4:	6883      	ldr	r3, [r0, #8]
 80010e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80010ea:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 80010ee:	6083      	str	r3, [r0, #8]
 80010f0:	e7b7      	b.n	8001062 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 80010f2:	68cb      	ldr	r3, [r1, #12]
 80010f4:	684a      	ldr	r2, [r1, #4]
 80010f6:	6889      	ldr	r1, [r1, #8]
 80010f8:	f7ff ff8c 	bl	8001014 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80010fc:	6822      	ldr	r2, [r4, #0]
 80010fe:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001104:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001108:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800110c:	6093      	str	r3, [r2, #8]
    break;
 800110e:	e7a8      	b.n	8001062 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001110:	684a      	ldr	r2, [r1, #4]
 8001112:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001114:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001116:	6a05      	ldr	r5, [r0, #32]
 8001118:	f025 0501 	bic.w	r5, r5, #1
 800111c:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800111e:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001120:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001124:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001128:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800112c:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800112e:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001130:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001132:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001134:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001138:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 800113c:	e7d7      	b.n	80010ee <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 800113e:	684a      	ldr	r2, [r1, #4]
 8001140:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001142:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001144:	6a05      	ldr	r5, [r0, #32]
 8001146:	f025 0501 	bic.w	r5, r5, #1
 800114a:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 800114c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800114e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001152:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001156:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 800115a:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 800115c:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800115e:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001160:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001162:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001166:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 800116a:	e7c0      	b.n	80010ee <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 800116c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800116e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001172:	f043 0307 	orr.w	r3, r3, #7
 8001176:	e7ba      	b.n	80010ee <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001178:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 800117a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800117e:	f043 0317 	orr.w	r3, r3, #23
 8001182:	e7b4      	b.n	80010ee <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001184:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001186:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 800118a:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 800118e:	e7ae      	b.n	80010ee <HAL_TIM_ConfigClockSource+0xc6>
 8001190:	fffe0088 	.word	0xfffe0088

08001194 <TIM_CCxChannelCmd>:
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << Channel;

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8001194:	6a03      	ldr	r3, [r0, #32]
{
 8001196:	b510      	push	{r4, lr}
  tmp = TIM_CCER_CC1E << Channel;
 8001198:	2401      	movs	r4, #1
 800119a:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 800119c:	ea23 0304 	bic.w	r3, r3, r4
 80011a0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */ 
  TIMx->CCER |=  (uint32_t)(ChannelState << Channel);
 80011a2:	6a03      	ldr	r3, [r0, #32]
 80011a4:	408a      	lsls	r2, r1
 80011a6:	431a      	orrs	r2, r3
 80011a8:	6202      	str	r2, [r0, #32]
 80011aa:	bd10      	pop	{r4, pc}

080011ac <HAL_TIM_PWM_Start>:
{
 80011ac:	b510      	push	{r4, lr}
 80011ae:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80011b0:	2201      	movs	r2, #1
 80011b2:	6800      	ldr	r0, [r0, #0]
 80011b4:	f7ff ffee 	bl	8001194 <TIM_CCxChannelCmd>
  if(IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)  
 80011b8:	6823      	ldr	r3, [r4, #0]
 80011ba:	4a0c      	ldr	r2, [pc, #48]	; (80011ec <HAL_TIM_PWM_Start+0x40>)
 80011bc:	4293      	cmp	r3, r2
 80011be:	d00b      	beq.n	80011d8 <HAL_TIM_PWM_Start+0x2c>
 80011c0:	f502 52a0 	add.w	r2, r2, #5120	; 0x1400
 80011c4:	4293      	cmp	r3, r2
 80011c6:	d007      	beq.n	80011d8 <HAL_TIM_PWM_Start+0x2c>
 80011c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d003      	beq.n	80011d8 <HAL_TIM_PWM_Start+0x2c>
 80011d0:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80011d4:	4293      	cmp	r3, r2
 80011d6:	d103      	bne.n	80011e0 <HAL_TIM_PWM_Start+0x34>
    __HAL_TIM_MOE_ENABLE(htim);
 80011d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80011da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011de:	645a      	str	r2, [r3, #68]	; 0x44
  __HAL_TIM_ENABLE(htim);
 80011e0:	681a      	ldr	r2, [r3, #0]
 80011e2:	f042 0201 	orr.w	r2, r2, #1
 80011e6:	601a      	str	r2, [r3, #0]
} 
 80011e8:	2000      	movs	r0, #0
 80011ea:	bd10      	pop	{r4, pc}
 80011ec:	40012c00 	.word	0x40012c00

080011f0 <TIM_OC5_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80011f0:	6a03      	ldr	r3, [r0, #32]
 80011f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80011f6:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80011f8:	6a02      	ldr	r2, [r0, #32]
{
 80011fa:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 80011fc:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80011fe:	6d43      	ldr	r3, [r0, #84]	; 0x54

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8001200:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8001202:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001206:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpccmrx |= OC_Config->OCMode;
 800120a:	432b      	orrs	r3, r5
  
  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800120c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC5P;
 800120e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8001212:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001216:	4d0d      	ldr	r5, [pc, #52]	; (800124c <TIM_OC5_SetConfig+0x5c>)
 8001218:	42a8      	cmp	r0, r5
 800121a:	d00b      	beq.n	8001234 <TIM_OC5_SetConfig+0x44>
 800121c:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001220:	42a8      	cmp	r0, r5
 8001222:	d007      	beq.n	8001234 <TIM_OC5_SetConfig+0x44>
 8001224:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001228:	42a8      	cmp	r0, r5
 800122a:	d003      	beq.n	8001234 <TIM_OC5_SetConfig+0x44>
 800122c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001230:	42a8      	cmp	r0, r5
 8001232:	d104      	bne.n	800123e <TIM_OC5_SetConfig+0x4e>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8001234:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS5;
 8001236:	f424 3480 	bic.w	r4, r4, #65536	; 0x10000
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800123a:	ea44 2405 	orr.w	r4, r4, r5, lsl #8
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800123e:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8001240:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8001242:	684b      	ldr	r3, [r1, #4]
 8001244:	6583      	str	r3, [r0, #88]	; 0x58
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 8001246:	6202      	str	r2, [r0, #32]
 8001248:	bd30      	pop	{r4, r5, pc}
 800124a:	bf00      	nop
 800124c:	40012c00 	.word	0x40012c00

08001250 <TIM_OC6_SetConfig>:
  uint32_t tmpccmrx = 0U;
  uint32_t tmpccer = 0U;
  uint32_t tmpcr2 = 0U; 

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8001250:	6a03      	ldr	r3, [r0, #32]
 8001252:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8001256:	6203      	str	r3, [r0, #32]
  
  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8001258:	6a02      	ldr	r2, [r0, #32]
{
 800125a:	b530      	push	{r4, r5, lr}
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2; 
 800125c:	6844      	ldr	r4, [r0, #4]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800125e:	6d43      	ldr	r3, [r0, #84]	; 0x54
    
  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8001260:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8001262:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001266:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800126a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
  
  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 800126e:	688d      	ldr	r5, [r1, #8]
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8001270:	f422 1200 	bic.w	r2, r2, #2097152	; 0x200000
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8001274:	ea42 5205 	orr.w	r2, r2, r5, lsl #20

  if(IS_TIM_BREAK_INSTANCE(TIMx))
 8001278:	4d0c      	ldr	r5, [pc, #48]	; (80012ac <TIM_OC6_SetConfig+0x5c>)
 800127a:	42a8      	cmp	r0, r5
 800127c:	d00b      	beq.n	8001296 <TIM_OC6_SetConfig+0x46>
 800127e:	f505 55a0 	add.w	r5, r5, #5120	; 0x1400
 8001282:	42a8      	cmp	r0, r5
 8001284:	d007      	beq.n	8001296 <TIM_OC6_SetConfig+0x46>
 8001286:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800128a:	42a8      	cmp	r0, r5
 800128c:	d003      	beq.n	8001296 <TIM_OC6_SetConfig+0x46>
 800128e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001292:	42a8      	cmp	r0, r5
 8001294:	d104      	bne.n	80012a0 <TIM_OC6_SetConfig+0x50>
  {   
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8001296:	694d      	ldr	r5, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS6;
 8001298:	f424 2480 	bic.w	r4, r4, #262144	; 0x40000
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800129c:	ea44 2485 	orr.w	r4, r4, r5, lsl #10
  }
  
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80012a0:	6044      	str	r4, [r0, #4]
  
  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80012a2:	6543      	str	r3, [r0, #84]	; 0x54
  
  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80012a4:	684b      	ldr	r3, [r1, #4]
 80012a6:	65c3      	str	r3, [r0, #92]	; 0x5c
  
  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;  
 80012a8:	6202      	str	r2, [r0, #32]
 80012aa:	bd30      	pop	{r4, r5, pc}
 80012ac:	40012c00 	.word	0x40012c00

080012b0 <HAL_TIM_PWM_ConfigChannel>:
{
 80012b0:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 80012b2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80012b6:	2b01      	cmp	r3, #1
{
 80012b8:	4604      	mov	r4, r0
 80012ba:	460d      	mov	r5, r1
 80012bc:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80012c0:	d010      	beq.n	80012e4 <HAL_TIM_PWM_ConfigChannel+0x34>
 80012c2:	2301      	movs	r3, #1
  switch (Channel)
 80012c4:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80012c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 80012ca:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  switch (Channel)
 80012ce:	d043      	beq.n	8001358 <HAL_TIM_PWM_ConfigChannel+0xa8>
 80012d0:	d809      	bhi.n	80012e6 <HAL_TIM_PWM_ConfigChannel+0x36>
 80012d2:	b1fa      	cbz	r2, 8001314 <HAL_TIM_PWM_ConfigChannel+0x64>
 80012d4:	2a04      	cmp	r2, #4
 80012d6:	d02e      	beq.n	8001336 <HAL_TIM_PWM_ConfigChannel+0x86>
  htim->State = HAL_TIM_STATE_READY;
 80012d8:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80012da:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80012dc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80012e0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80012e4:	bd38      	pop	{r3, r4, r5, pc}
  switch (Channel)
 80012e6:	2a10      	cmp	r2, #16
 80012e8:	d047      	beq.n	800137a <HAL_TIM_PWM_ConfigChannel+0xca>
 80012ea:	2a14      	cmp	r2, #20
 80012ec:	d056      	beq.n	800139c <HAL_TIM_PWM_ConfigChannel+0xec>
 80012ee:	2a0c      	cmp	r2, #12
 80012f0:	d1f2      	bne.n	80012d8 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80012f2:	6820      	ldr	r0, [r4, #0]
 80012f4:	f7ff fe5e 	bl	8000fb4 <TIM_OC4_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80012f8:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 80012fa:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80012fc:	69da      	ldr	r2, [r3, #28]
 80012fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001302:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001304:	69da      	ldr	r2, [r3, #28]
 8001306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800130a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 800130c:	69da      	ldr	r2, [r3, #28]
 800130e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001312:	e030      	b.n	8001376 <HAL_TIM_PWM_ConfigChannel+0xc6>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001314:	6820      	ldr	r0, [r4, #0]
 8001316:	f7ff fd91 	bl	8000e3c <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800131a:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800131c:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800131e:	699a      	ldr	r2, [r3, #24]
 8001320:	f042 0208 	orr.w	r2, r2, #8
 8001324:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001326:	699a      	ldr	r2, [r3, #24]
 8001328:	f022 0204 	bic.w	r2, r2, #4
 800132c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800132e:	699a      	ldr	r2, [r3, #24]
 8001330:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001332:	619a      	str	r2, [r3, #24]
    break;
 8001334:	e7d0      	b.n	80012d8 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001336:	6820      	ldr	r0, [r4, #0]
 8001338:	f7ff fdc4 	bl	8000ec4 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800133c:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800133e:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001340:	699a      	ldr	r2, [r3, #24]
 8001342:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001346:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001348:	699a      	ldr	r2, [r3, #24]
 800134a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800134e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001350:	699a      	ldr	r2, [r3, #24]
 8001352:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8001356:	e7ec      	b.n	8001332 <HAL_TIM_PWM_ConfigChannel+0x82>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001358:	6820      	ldr	r0, [r4, #0]
 800135a:	f7ff fdef 	bl	8000f3c <TIM_OC3_SetConfig>
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800135e:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001360:	6929      	ldr	r1, [r5, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001362:	69da      	ldr	r2, [r3, #28]
 8001364:	f042 0208 	orr.w	r2, r2, #8
 8001368:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800136a:	69da      	ldr	r2, [r3, #28]
 800136c:	f022 0204 	bic.w	r2, r2, #4
 8001370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;  
 8001372:	69da      	ldr	r2, [r3, #28]
 8001374:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;  
 8001376:	61da      	str	r2, [r3, #28]
    break;
 8001378:	e7ae      	b.n	80012d8 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800137a:	6820      	ldr	r0, [r4, #0]
 800137c:	f7ff ff38 	bl	80011f0 <TIM_OC5_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001380:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001382:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8001384:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001386:	f042 0208 	orr.w	r2, r2, #8
 800138a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800138c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800138e:	f022 0204 	bic.w	r2, r2, #4
 8001392:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;  
 8001394:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001396:	430a      	orrs	r2, r1
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 8001398:	655a      	str	r2, [r3, #84]	; 0x54
    break;
 800139a:	e79d      	b.n	80012d8 <HAL_TIM_PWM_ConfigChannel+0x28>
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800139c:	6820      	ldr	r0, [r4, #0]
 800139e:	f7ff ff57 	bl	8001250 <TIM_OC6_SetConfig>
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80013a2:	6823      	ldr	r3, [r4, #0]
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 80013a4:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80013a6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80013a8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80013ac:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80013ae:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80013b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80013b4:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;  
 80013b6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80013b8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80013bc:	e7ec      	b.n	8001398 <HAL_TIM_PWM_ConfigChannel+0xe8>
	...

080013c0 <HAL_TIMEx_MasterConfigSynchronization>:
  __HAL_LOCK(htim);
 80013c0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80013c4:	2b01      	cmp	r3, #1
{
 80013c6:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80013c8:	d018      	beq.n	80013fc <HAL_TIMEx_MasterConfigSynchronization+0x3c>
  tmpcr2 = htim->Instance->CR2;
 80013ca:	6802      	ldr	r2, [r0, #0]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80013cc:	4d0c      	ldr	r5, [pc, #48]	; (8001400 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 80013ce:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80013d0:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80013d2:	42aa      	cmp	r2, r5
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80013d4:	bf02      	ittt	eq
 80013d6:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80013d8:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80013dc:	432b      	orreq	r3, r5
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80013de:	680d      	ldr	r5, [r1, #0]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80013e0:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80013e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80013e6:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80013e8:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  htim->Instance->CR2 = tmpcr2;
 80013ec:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80013ee:	4321      	orrs	r1, r4
  __HAL_UNLOCK(htim);
 80013f0:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80013f2:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80013f4:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 80013f8:	4618      	mov	r0, r3
 80013fa:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80013fc:	2002      	movs	r0, #2
} 
 80013fe:	bd30      	pop	{r4, r5, pc}
 8001400:	40012c00 	.word	0x40012c00

08001404 <HAL_TIMEx_CommutationCallback>:
 8001404:	4770      	bx	lr

08001406 <HAL_TIMEx_BreakCallback>:
 8001406:	4770      	bx	lr

08001408 <HAL_TIMEx_Break2Callback>:
{
 8001408:	4770      	bx	lr
	...

0800140c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800140c:	b538      	push	{r3, r4, r5, lr}
 800140e:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001410:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001412:	6921      	ldr	r1, [r4, #16]
 8001414:	68a3      	ldr	r3, [r4, #8]
 8001416:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001418:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800141a:	430b      	orrs	r3, r1
 800141c:	6961      	ldr	r1, [r4, #20]
 800141e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001420:	4949      	ldr	r1, [pc, #292]	; (8001548 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001422:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001424:	4001      	ands	r1, r0
 8001426:	430b      	orrs	r3, r1
 8001428:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800142a:	686b      	ldr	r3, [r5, #4]
 800142c:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800142e:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001430:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001434:	430b      	orrs	r3, r1
 8001436:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001438:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800143a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800143c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001440:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001442:	430b      	orrs	r3, r1
 8001444:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001446:	4b41      	ldr	r3, [pc, #260]	; (800154c <UART_SetConfig+0x140>)
 8001448:	429d      	cmp	r5, r3
 800144a:	d112      	bne.n	8001472 <UART_SetConfig+0x66>
 800144c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001450:	493f      	ldr	r1, [pc, #252]	; (8001550 <UART_SetConfig+0x144>)
 8001452:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001454:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001458:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800145c:	5ccb      	ldrb	r3, [r1, r3]
 800145e:	d13b      	bne.n	80014d8 <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 8001460:	2b08      	cmp	r3, #8
 8001462:	d836      	bhi.n	80014d2 <UART_SetConfig+0xc6>
 8001464:	e8df f003 	tbb	[pc, r3]
 8001468:	3524210f 	.word	0x3524210f
 800146c:	3535352d 	.word	0x3535352d
 8001470:	30          	.byte	0x30
 8001471:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001472:	4b38      	ldr	r3, [pc, #224]	; (8001554 <UART_SetConfig+0x148>)
 8001474:	429d      	cmp	r5, r3
 8001476:	d003      	beq.n	8001480 <UART_SetConfig+0x74>
 8001478:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800147c:	429d      	cmp	r5, r3
 800147e:	d15e      	bne.n	800153e <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001480:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001484:	d131      	bne.n	80014ea <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001486:	f7ff fb75 	bl	8000b74 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800148a:	6861      	ldr	r1, [r4, #4]
 800148c:	084a      	lsrs	r2, r1, #1
 800148e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001492:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001496:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001498:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 800149a:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 800149e:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80014a0:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80014a4:	4313      	orrs	r3, r2
 80014a6:	60cb      	str	r3, [r1, #12]
 80014a8:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80014aa:	f7ff fb7b 	bl	8000ba4 <HAL_RCC_GetPCLK2Freq>
 80014ae:	e7ec      	b.n	800148a <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80014b0:	6860      	ldr	r0, [r4, #4]
 80014b2:	0843      	lsrs	r3, r0, #1
 80014b4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80014b8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80014bc:	fbb3 f3f0 	udiv	r3, r3, r0
 80014c0:	e7e9      	b.n	8001496 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80014c2:	f7ff fa7b 	bl	80009bc <HAL_RCC_GetSysClockFreq>
 80014c6:	e7e0      	b.n	800148a <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80014c8:	6860      	ldr	r0, [r4, #4]
 80014ca:	0843      	lsrs	r3, r0, #1
 80014cc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80014d0:	e7f4      	b.n	80014bc <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 80014d2:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80014d4:	2300      	movs	r3, #0
 80014d6:	e7e0      	b.n	800149a <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 80014d8:	2b08      	cmp	r3, #8
 80014da:	d833      	bhi.n	8001544 <UART_SetConfig+0x138>
 80014dc:	e8df f003 	tbb	[pc, r3]
 80014e0:	321b1005 	.word	0x321b1005
 80014e4:	32323227 	.word	0x32323227
 80014e8:	2a          	.byte	0x2a
 80014e9:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80014ea:	f7ff fb43 	bl	8000b74 <HAL_RCC_GetPCLK1Freq>
 80014ee:	6863      	ldr	r3, [r4, #4]
 80014f0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80014f4:	fbb0 f0f3 	udiv	r0, r0, r3
 80014f8:	b280      	uxth	r0, r0
 80014fa:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80014fc:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 80014fe:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001500:	f7ff fb50 	bl	8000ba4 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001504:	6863      	ldr	r3, [r4, #4]
 8001506:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 800150a:	fbb0 f0f3 	udiv	r0, r0, r3
 800150e:	4b0f      	ldr	r3, [pc, #60]	; (800154c <UART_SetConfig+0x140>)
 8001510:	b280      	uxth	r0, r0
 8001512:	60d8      	str	r0, [r3, #12]
 8001514:	e7f2      	b.n	80014fc <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001516:	6862      	ldr	r2, [r4, #4]
 8001518:	0853      	lsrs	r3, r2, #1
 800151a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800151e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001522:	fbb3 f3f2 	udiv	r3, r3, r2
 8001526:	4a09      	ldr	r2, [pc, #36]	; (800154c <UART_SetConfig+0x140>)
 8001528:	b29b      	uxth	r3, r3
 800152a:	60d3      	str	r3, [r2, #12]
 800152c:	e7e6      	b.n	80014fc <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800152e:	f7ff fa45 	bl	80009bc <HAL_RCC_GetSysClockFreq>
 8001532:	e7e7      	b.n	8001504 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001534:	6862      	ldr	r2, [r4, #4]
 8001536:	0853      	lsrs	r3, r2, #1
 8001538:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800153c:	e7f1      	b.n	8001522 <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800153e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001542:	d0c6      	beq.n	80014d2 <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001544:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001546:	bd38      	pop	{r3, r4, r5, pc}
 8001548:	efff69f3 	.word	0xefff69f3
 800154c:	40013800 	.word	0x40013800
 8001550:	08001b60 	.word	0x08001b60
 8001554:	40004400 	.word	0x40004400

08001558 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001558:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800155a:	07da      	lsls	r2, r3, #31
{
 800155c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800155e:	d506      	bpl.n	800156e <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001560:	6801      	ldr	r1, [r0, #0]
 8001562:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001564:	684a      	ldr	r2, [r1, #4]
 8001566:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800156a:	4322      	orrs	r2, r4
 800156c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800156e:	079c      	lsls	r4, r3, #30
 8001570:	d506      	bpl.n	8001580 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001572:	6801      	ldr	r1, [r0, #0]
 8001574:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001576:	684a      	ldr	r2, [r1, #4]
 8001578:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800157c:	4322      	orrs	r2, r4
 800157e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001580:	0759      	lsls	r1, r3, #29
 8001582:	d506      	bpl.n	8001592 <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001584:	6801      	ldr	r1, [r0, #0]
 8001586:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001588:	684a      	ldr	r2, [r1, #4]
 800158a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800158e:	4322      	orrs	r2, r4
 8001590:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001592:	071a      	lsls	r2, r3, #28
 8001594:	d506      	bpl.n	80015a4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001596:	6801      	ldr	r1, [r0, #0]
 8001598:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800159a:	684a      	ldr	r2, [r1, #4]
 800159c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80015a0:	4322      	orrs	r2, r4
 80015a2:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80015a4:	06dc      	lsls	r4, r3, #27
 80015a6:	d506      	bpl.n	80015b6 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80015a8:	6801      	ldr	r1, [r0, #0]
 80015aa:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80015ac:	688a      	ldr	r2, [r1, #8]
 80015ae:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80015b2:	4322      	orrs	r2, r4
 80015b4:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80015b6:	0699      	lsls	r1, r3, #26
 80015b8:	d506      	bpl.n	80015c8 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80015ba:	6801      	ldr	r1, [r0, #0]
 80015bc:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80015be:	688a      	ldr	r2, [r1, #8]
 80015c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80015c4:	4322      	orrs	r2, r4
 80015c6:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80015c8:	065a      	lsls	r2, r3, #25
 80015ca:	d50f      	bpl.n	80015ec <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80015cc:	6801      	ldr	r1, [r0, #0]
 80015ce:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80015d0:	684a      	ldr	r2, [r1, #4]
 80015d2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80015d6:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80015d8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80015dc:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80015de:	d105      	bne.n	80015ec <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80015e0:	684a      	ldr	r2, [r1, #4]
 80015e2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80015e4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80015e8:	4322      	orrs	r2, r4
 80015ea:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80015ec:	061b      	lsls	r3, r3, #24
 80015ee:	d506      	bpl.n	80015fe <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80015f0:	6802      	ldr	r2, [r0, #0]
 80015f2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80015f4:	6853      	ldr	r3, [r2, #4]
 80015f6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80015fa:	430b      	orrs	r3, r1
 80015fc:	6053      	str	r3, [r2, #4]
 80015fe:	bd10      	pop	{r4, pc}

08001600 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001600:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001604:	9d06      	ldr	r5, [sp, #24]
 8001606:	4604      	mov	r4, r0
 8001608:	460f      	mov	r7, r1
 800160a:	4616      	mov	r6, r2
 800160c:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800160e:	6821      	ldr	r1, [r4, #0]
 8001610:	69ca      	ldr	r2, [r1, #28]
 8001612:	ea37 0302 	bics.w	r3, r7, r2
 8001616:	bf0c      	ite	eq
 8001618:	2201      	moveq	r2, #1
 800161a:	2200      	movne	r2, #0
 800161c:	42b2      	cmp	r2, r6
 800161e:	d002      	beq.n	8001626 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001620:	2000      	movs	r0, #0
}
 8001622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001626:	1c6b      	adds	r3, r5, #1
 8001628:	d0f2      	beq.n	8001610 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800162a:	b99d      	cbnz	r5, 8001654 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800162c:	6823      	ldr	r3, [r4, #0]
 800162e:	681a      	ldr	r2, [r3, #0]
 8001630:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001634:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001636:	689a      	ldr	r2, [r3, #8]
 8001638:	f022 0201 	bic.w	r2, r2, #1
 800163c:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800163e:	2320      	movs	r3, #32
 8001640:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001644:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001648:	2300      	movs	r3, #0
 800164a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800164e:	2003      	movs	r0, #3
 8001650:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001654:	f7fe fdfa 	bl	800024c <HAL_GetTick>
 8001658:	eba0 0008 	sub.w	r0, r0, r8
 800165c:	4285      	cmp	r5, r0
 800165e:	d2d6      	bcs.n	800160e <UART_WaitOnFlagUntilTimeout+0xe>
 8001660:	e7e4      	b.n	800162c <UART_WaitOnFlagUntilTimeout+0x2c>

08001662 <UART_CheckIdleState>:
{
 8001662:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001664:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001666:	2600      	movs	r6, #0
 8001668:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800166a:	f7fe fdef 	bl	800024c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800166e:	6823      	ldr	r3, [r4, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001674:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001676:	d417      	bmi.n	80016a8 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001678:	6823      	ldr	r3, [r4, #0]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	075b      	lsls	r3, r3, #29
 800167e:	d50a      	bpl.n	8001696 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001680:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001684:	9300      	str	r3, [sp, #0]
 8001686:	2200      	movs	r2, #0
 8001688:	462b      	mov	r3, r5
 800168a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800168e:	4620      	mov	r0, r4
 8001690:	f7ff ffb6 	bl	8001600 <UART_WaitOnFlagUntilTimeout>
 8001694:	b9a0      	cbnz	r0, 80016c0 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001696:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001698:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800169a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800169e:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80016a2:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80016a6:	e00c      	b.n	80016c2 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80016a8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80016ac:	9300      	str	r3, [sp, #0]
 80016ae:	4632      	mov	r2, r6
 80016b0:	4603      	mov	r3, r0
 80016b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80016b6:	4620      	mov	r0, r4
 80016b8:	f7ff ffa2 	bl	8001600 <UART_WaitOnFlagUntilTimeout>
 80016bc:	2800      	cmp	r0, #0
 80016be:	d0db      	beq.n	8001678 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80016c0:	2003      	movs	r0, #3
}
 80016c2:	b002      	add	sp, #8
 80016c4:	bd70      	pop	{r4, r5, r6, pc}

080016c6 <HAL_UART_Init>:
{
 80016c6:	b510      	push	{r4, lr}
  if(huart == NULL)
 80016c8:	4604      	mov	r4, r0
 80016ca:	b360      	cbz	r0, 8001726 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80016cc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80016d0:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80016d4:	b91b      	cbnz	r3, 80016de <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80016d6:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80016da:	f000 f959 	bl	8001990 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80016de:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80016e0:	2324      	movs	r3, #36	; 0x24
 80016e2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80016e6:	6813      	ldr	r3, [r2, #0]
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80016ee:	4620      	mov	r0, r4
 80016f0:	f7ff fe8c 	bl	800140c <UART_SetConfig>
 80016f4:	2801      	cmp	r0, #1
 80016f6:	d016      	beq.n	8001726 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80016f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80016fa:	b113      	cbz	r3, 8001702 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80016fc:	4620      	mov	r0, r4
 80016fe:	f7ff ff2b 	bl	8001558 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001702:	6823      	ldr	r3, [r4, #0]
 8001704:	685a      	ldr	r2, [r3, #4]
 8001706:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800170a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800170c:	689a      	ldr	r2, [r3, #8]
 800170e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001712:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001714:	681a      	ldr	r2, [r3, #0]
 8001716:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 800171a:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800171c:	601a      	str	r2, [r3, #0]
}
 800171e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001722:	f7ff bf9e 	b.w	8001662 <UART_CheckIdleState>
}
 8001726:	2001      	movs	r0, #1
 8001728:	bd10      	pop	{r4, pc}

0800172a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800172a:	b510      	push	{r4, lr}
 800172c:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800172e:	2228      	movs	r2, #40	; 0x28
 8001730:	2100      	movs	r1, #0
 8001732:	a806      	add	r0, sp, #24
 8001734:	f000 f9f0 	bl	8001b18 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001738:	2214      	movs	r2, #20
 800173a:	2100      	movs	r1, #0
 800173c:	a801      	add	r0, sp, #4
 800173e:	f000 f9eb 	bl	8001b18 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001742:	2301      	movs	r3, #1
 8001744:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001746:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001748:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800174a:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800174c:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800174e:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001752:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001754:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001756:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001758:	f7fe feba 	bl	80004d0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800175c:	230f      	movs	r3, #15
 800175e:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001760:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001764:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001766:	4621      	mov	r1, r4
 8001768:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800176a:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800176c:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800176e:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001770:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001772:	f7ff f955 	bl	8000a20 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001776:	b010      	add	sp, #64	; 0x40
 8001778:	bd10      	pop	{r4, pc}
	...

0800177c <main>:
{
 800177c:	b500      	push	{lr}
 800177e:	b093      	sub	sp, #76	; 0x4c
  HAL_Init();
 8001780:	f7fe fd46 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 8001784:	f7ff ffd1 	bl	800172a <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	2214      	movs	r2, #20
 800178a:	2100      	movs	r1, #0
 800178c:	a80b      	add	r0, sp, #44	; 0x2c
 800178e:	f000 f9c3 	bl	8001b18 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001792:	4b4f      	ldr	r3, [pc, #316]	; (80018d0 <main+0x154>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001794:	484f      	ldr	r0, [pc, #316]	; (80018d4 <main+0x158>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001796:	695a      	ldr	r2, [r3, #20]
  htim2.Instance = TIM2;
 8001798:	4d4f      	ldr	r5, [pc, #316]	; (80018d8 <main+0x15c>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800179a:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800179e:	615a      	str	r2, [r3, #20]
 80017a0:	695a      	ldr	r2, [r3, #20]
 80017a2:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80017a6:	9201      	str	r2, [sp, #4]
 80017a8:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017aa:	695a      	ldr	r2, [r3, #20]
 80017ac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017b0:	615a      	str	r2, [r3, #20]
 80017b2:	695a      	ldr	r2, [r3, #20]
 80017b4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80017b8:	9202      	str	r2, [sp, #8]
 80017ba:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017bc:	695a      	ldr	r2, [r3, #20]
 80017be:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80017c2:	615a      	str	r2, [r3, #20]
 80017c4:	695b      	ldr	r3, [r3, #20]
 80017c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80017ca:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017cc:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80017ce:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d0:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80017d2:	f7fe fe77 	bl	80004c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80017d6:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017d8:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80017da:	a90b      	add	r1, sp, #44	; 0x2c
  GPIO_InitStruct.Pin = LD3_Pin;
 80017dc:	930b      	str	r3, [sp, #44]	; 0x2c
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80017de:	483d      	ldr	r0, [pc, #244]	; (80018d4 <main+0x158>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e0:	940d      	str	r4, [sp, #52]	; 0x34
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e2:	2301      	movs	r3, #1
 80017e4:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	940e      	str	r4, [sp, #56]	; 0x38
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80017e8:	f7fe fdb2 	bl	8000350 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80017ec:	483b      	ldr	r0, [pc, #236]	; (80018dc <main+0x160>)
  huart2.Init.BaudRate = 38400;
 80017ee:	4a3c      	ldr	r2, [pc, #240]	; (80018e0 <main+0x164>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017f0:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 80017f2:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80017f6:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017fa:	230c      	movs	r3, #12
 80017fc:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017fe:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001800:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001802:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001804:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001806:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001808:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800180a:	f7ff ff5c 	bl	80016c6 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800180e:	4621      	mov	r1, r4
 8001810:	2210      	movs	r2, #16
 8001812:	a807      	add	r0, sp, #28
 8001814:	f000 f980 	bl	8001b18 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001818:	221c      	movs	r2, #28
 800181a:	4621      	mov	r1, r4
 800181c:	a80b      	add	r0, sp, #44	; 0x2c
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800181e:	9404      	str	r4, [sp, #16]
 8001820:	9405      	str	r4, [sp, #20]
 8001822:	9406      	str	r4, [sp, #24]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001824:	f000 f978 	bl	8001b18 <memset>
  htim2.Init.Prescaler = 319;
 8001828:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800182c:	f240 133f 	movw	r3, #319	; 0x13f
 8001830:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001834:	4628      	mov	r0, r5
  htim2.Init.Period = 1000;
 8001836:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800183a:	60ac      	str	r4, [r5, #8]
  htim2.Init.Period = 1000;
 800183c:	60eb      	str	r3, [r5, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183e:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001840:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001842:	f7ff fac7 	bl	8000dd4 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001846:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800184a:	a907      	add	r1, sp, #28
 800184c:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800184e:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001850:	f7ff fbea 	bl	8001028 <HAL_TIM_ConfigClockSource>
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001854:	4628      	mov	r0, r5
 8001856:	f7ff fad7 	bl	8000e08 <HAL_TIM_PWM_Init>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800185a:	a904      	add	r1, sp, #16
 800185c:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800185e:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001860:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001862:	f7ff fdad 	bl	80013c0 <HAL_TIMEx_MasterConfigSynchronization>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001866:	2360      	movs	r3, #96	; 0x60
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001868:	4622      	mov	r2, r4
 800186a:	a90b      	add	r1, sp, #44	; 0x2c
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800186c:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800186e:	4628      	mov	r0, r5
  sConfigOC.Pulse = 250;
 8001870:	23fa      	movs	r3, #250	; 0xfa
 8001872:	930c      	str	r3, [sp, #48]	; 0x30
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001874:	940d      	str	r4, [sp, #52]	; 0x34
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001876:	940f      	str	r4, [sp, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001878:	f7ff fd1a 	bl	80012b0 <HAL_TIM_PWM_ConfigChannel>
  HAL_TIM_MspPostInit(&htim2);
 800187c:	4628      	mov	r0, r5
 800187e:	f000 f864 	bl	800194a <HAL_TIM_MspPostInit>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8001882:	4621      	mov	r1, r4
 8001884:	4628      	mov	r0, r5
 8001886:	f7ff fc91 	bl	80011ac <HAL_TIM_PWM_Start>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 800188a:	2664      	movs	r6, #100	; 0x64
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 300);
 800188c:	f44f 7496 	mov.w	r4, #300	; 0x12c
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 8001890:	682b      	ldr	r3, [r5, #0]
	  HAL_Delay(200);
 8001892:	20c8      	movs	r0, #200	; 0xc8
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 100);
 8001894:	635e      	str	r6, [r3, #52]	; 0x34
	  HAL_Delay(200);
 8001896:	f7fe fcdf 	bl	8000258 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 300);
 800189a:	682b      	ldr	r3, [r5, #0]
	  HAL_Delay(200);
 800189c:	20c8      	movs	r0, #200	; 0xc8
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 300);
 800189e:	635c      	str	r4, [r3, #52]	; 0x34
	  HAL_Delay(200);
 80018a0:	f7fe fcda 	bl	8000258 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 500);
 80018a4:	682b      	ldr	r3, [r5, #0]
 80018a6:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 80018aa:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(200);
 80018ac:	20c8      	movs	r0, #200	; 0xc8
 80018ae:	f7fe fcd3 	bl	8000258 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 700);
 80018b2:	682b      	ldr	r3, [r5, #0]
 80018b4:	f44f 722f 	mov.w	r2, #700	; 0x2bc
 80018b8:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(200);
 80018ba:	20c8      	movs	r0, #200	; 0xc8
 80018bc:	f7fe fccc 	bl	8000258 <HAL_Delay>
	  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_1, 900);
 80018c0:	682b      	ldr	r3, [r5, #0]
 80018c2:	f44f 7261 	mov.w	r2, #900	; 0x384
 80018c6:	635a      	str	r2, [r3, #52]	; 0x34
	  HAL_Delay(200);
 80018c8:	20c8      	movs	r0, #200	; 0xc8
 80018ca:	f7fe fcc5 	bl	8000258 <HAL_Delay>
 80018ce:	e7df      	b.n	8001890 <main+0x114>
 80018d0:	40021000 	.word	0x40021000
 80018d4:	48000400 	.word	0x48000400
 80018d8:	2000002c 	.word	0x2000002c
 80018dc:	2000006c 	.word	0x2000006c
 80018e0:	40004400 	.word	0x40004400

080018e4 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e4:	4b0a      	ldr	r3, [pc, #40]	; (8001910 <HAL_MspInit+0x2c>)
 80018e6:	699a      	ldr	r2, [r3, #24]
 80018e8:	f042 0201 	orr.w	r2, r2, #1
 80018ec:	619a      	str	r2, [r3, #24]
 80018ee:	699a      	ldr	r2, [r3, #24]
{
 80018f0:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018f2:	f002 0201 	and.w	r2, r2, #1
 80018f6:	9200      	str	r2, [sp, #0]
 80018f8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018fa:	69da      	ldr	r2, [r3, #28]
 80018fc:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001900:	61da      	str	r2, [r3, #28]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001908:	9301      	str	r3, [sp, #4]
 800190a:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800190c:	b002      	add	sp, #8
 800190e:	4770      	bx	lr
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8001914:	6803      	ldr	r3, [r0, #0]
 8001916:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800191a:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 800191c:	d112      	bne.n	8001944 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800191e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001922:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001924:	69da      	ldr	r2, [r3, #28]
 8001926:	f042 0201 	orr.w	r2, r2, #1
 800192a:	61da      	str	r2, [r3, #28]
 800192c:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800192e:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001930:	f003 0301 	and.w	r3, r3, #1
 8001934:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001936:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001938:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800193a:	f7fe fcb3 	bl	80002a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800193e:	201c      	movs	r0, #28
 8001940:	f7fe fce4 	bl	800030c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001944:	b003      	add	sp, #12
 8001946:	f85d fb04 	ldr.w	pc, [sp], #4

0800194a <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800194a:	b510      	push	{r4, lr}
 800194c:	4604      	mov	r4, r0
 800194e:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001950:	2214      	movs	r2, #20
 8001952:	2100      	movs	r1, #0
 8001954:	a801      	add	r0, sp, #4
 8001956:	f000 f8df 	bl	8001b18 <memset>
  if(htim->Instance==TIM2)
 800195a:	6823      	ldr	r3, [r4, #0]
 800195c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001960:	d114      	bne.n	800198c <HAL_TIM_MspPostInit+0x42>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001962:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001966:	a901      	add	r1, sp, #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001968:	695a      	ldr	r2, [r3, #20]
 800196a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800196e:	615a      	str	r2, [r3, #20]
 8001970:	695b      	ldr	r3, [r3, #20]
 8001972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001976:	9300      	str	r3, [sp, #0]
 8001978:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2202      	movs	r2, #2
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800197c:	2301      	movs	r3, #1
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800197e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001982:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001984:	9202      	str	r2, [sp, #8]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001986:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f7fe fce2 	bl	8000350 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800198c:	b006      	add	sp, #24
 800198e:	bd10      	pop	{r4, pc}

08001990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001990:	b510      	push	{r4, lr}
 8001992:	4604      	mov	r4, r0
 8001994:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001996:	2214      	movs	r2, #20
 8001998:	2100      	movs	r1, #0
 800199a:	a803      	add	r0, sp, #12
 800199c:	f000 f8bc 	bl	8001b18 <memset>
  if(huart->Instance==USART2)
 80019a0:	6822      	ldr	r2, [r4, #0]
 80019a2:	4b13      	ldr	r3, [pc, #76]	; (80019f0 <HAL_UART_MspInit+0x60>)
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d121      	bne.n	80019ec <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80019a8:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ac:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 80019ae:	69da      	ldr	r2, [r3, #28]
 80019b0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019b4:	61da      	str	r2, [r3, #28]
 80019b6:	69da      	ldr	r2, [r3, #28]
 80019b8:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80019bc:	9201      	str	r2, [sp, #4]
 80019be:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c0:	695a      	ldr	r2, [r3, #20]
 80019c2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019c6:	615a      	str	r2, [r3, #20]
 80019c8:	695b      	ldr	r3, [r3, #20]
 80019ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019ce:	9302      	str	r3, [sp, #8]
 80019d0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80019d2:	f248 0304 	movw	r3, #32772	; 0x8004
 80019d6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d8:	2302      	movs	r3, #2
 80019da:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019dc:	2303      	movs	r3, #3
 80019de:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019e4:	2307      	movs	r3, #7
 80019e6:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e8:	f7fe fcb2 	bl	8000350 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019ec:	b008      	add	sp, #32
 80019ee:	bd10      	pop	{r4, pc}
 80019f0:	40004400 	.word	0x40004400

080019f4 <NMI_Handler>:
 80019f4:	4770      	bx	lr

080019f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019f6:	e7fe      	b.n	80019f6 <HardFault_Handler>

080019f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019f8:	e7fe      	b.n	80019f8 <MemManage_Handler>

080019fa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019fa:	e7fe      	b.n	80019fa <BusFault_Handler>

080019fc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019fc:	e7fe      	b.n	80019fc <UsageFault_Handler>

080019fe <SVC_Handler>:
 80019fe:	4770      	bx	lr

08001a00 <DebugMon_Handler>:
 8001a00:	4770      	bx	lr

08001a02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a02:	4770      	bx	lr

08001a04 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a04:	f7fe bc16 	b.w	8000234 <HAL_IncTick>

08001a08 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a08:	4801      	ldr	r0, [pc, #4]	; (8001a10 <TIM2_IRQHandler+0x8>)
 8001a0a:	f7ff b8e9 	b.w	8000be0 <HAL_TIM_IRQHandler>
 8001a0e:	bf00      	nop
 8001a10:	2000002c 	.word	0x2000002c

08001a14 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a14:	4915      	ldr	r1, [pc, #84]	; (8001a6c <SystemInit+0x58>)
 8001a16:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a1a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a22:	4b13      	ldr	r3, [pc, #76]	; (8001a70 <SystemInit+0x5c>)
 8001a24:	681a      	ldr	r2, [r3, #0]
 8001a26:	f042 0201 	orr.w	r2, r2, #1
 8001a2a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001a2c:	6858      	ldr	r0, [r3, #4]
 8001a2e:	4a11      	ldr	r2, [pc, #68]	; (8001a74 <SystemInit+0x60>)
 8001a30:	4002      	ands	r2, r0
 8001a32:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a3a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a3e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a40:	681a      	ldr	r2, [r3, #0]
 8001a42:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a46:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001a4e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a52:	f022 020f 	bic.w	r2, r2, #15
 8001a56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001a58:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001a5a:	4a07      	ldr	r2, [pc, #28]	; (8001a78 <SystemInit+0x64>)
 8001a5c:	4002      	ands	r2, r0
 8001a5e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001a60:	2200      	movs	r2, #0
 8001a62:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001a64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001a68:	608b      	str	r3, [r1, #8]
 8001a6a:	4770      	bx	lr
 8001a6c:	e000ed00 	.word	0xe000ed00
 8001a70:	40021000 	.word	0x40021000
 8001a74:	f87fc00c 	.word	0xf87fc00c
 8001a78:	ff00fccc 	.word	0xff00fccc

08001a7c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001a7c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ab4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001a80:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001a82:	e003      	b.n	8001a8c <LoopCopyDataInit>

08001a84 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001a86:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001a88:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001a8a:	3104      	adds	r1, #4

08001a8c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001a8c:	480b      	ldr	r0, [pc, #44]	; (8001abc <LoopForever+0xa>)
	ldr	r3, =_edata
 8001a8e:	4b0c      	ldr	r3, [pc, #48]	; (8001ac0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001a90:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001a92:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001a94:	d3f6      	bcc.n	8001a84 <CopyDataInit>
	ldr	r2, =_sbss
 8001a96:	4a0b      	ldr	r2, [pc, #44]	; (8001ac4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001a98:	e002      	b.n	8001aa0 <LoopFillZerobss>

08001a9a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001a9a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001a9c:	f842 3b04 	str.w	r3, [r2], #4

08001aa0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001aa0:	4b09      	ldr	r3, [pc, #36]	; (8001ac8 <LoopForever+0x16>)
	cmp	r2, r3
 8001aa2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001aa4:	d3f9      	bcc.n	8001a9a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001aa6:	f7ff ffb5 	bl	8001a14 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001aaa:	f000 f811 	bl	8001ad0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001aae:	f7ff fe65 	bl	800177c <main>

08001ab2 <LoopForever>:

LoopForever:
    b LoopForever
 8001ab2:	e7fe      	b.n	8001ab2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ab4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001ab8:	08001b84 	.word	0x08001b84
	ldr	r0, =_sdata
 8001abc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ac0:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001ac4:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001ac8:	200000dc 	.word	0x200000dc

08001acc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001acc:	e7fe      	b.n	8001acc <ADC1_2_IRQHandler>
	...

08001ad0 <__libc_init_array>:
 8001ad0:	b570      	push	{r4, r5, r6, lr}
 8001ad2:	4e0d      	ldr	r6, [pc, #52]	; (8001b08 <__libc_init_array+0x38>)
 8001ad4:	4c0d      	ldr	r4, [pc, #52]	; (8001b0c <__libc_init_array+0x3c>)
 8001ad6:	1ba4      	subs	r4, r4, r6
 8001ad8:	10a4      	asrs	r4, r4, #2
 8001ada:	2500      	movs	r5, #0
 8001adc:	42a5      	cmp	r5, r4
 8001ade:	d109      	bne.n	8001af4 <__libc_init_array+0x24>
 8001ae0:	4e0b      	ldr	r6, [pc, #44]	; (8001b10 <__libc_init_array+0x40>)
 8001ae2:	4c0c      	ldr	r4, [pc, #48]	; (8001b14 <__libc_init_array+0x44>)
 8001ae4:	f000 f820 	bl	8001b28 <_init>
 8001ae8:	1ba4      	subs	r4, r4, r6
 8001aea:	10a4      	asrs	r4, r4, #2
 8001aec:	2500      	movs	r5, #0
 8001aee:	42a5      	cmp	r5, r4
 8001af0:	d105      	bne.n	8001afe <__libc_init_array+0x2e>
 8001af2:	bd70      	pop	{r4, r5, r6, pc}
 8001af4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001af8:	4798      	blx	r3
 8001afa:	3501      	adds	r5, #1
 8001afc:	e7ee      	b.n	8001adc <__libc_init_array+0xc>
 8001afe:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b02:	4798      	blx	r3
 8001b04:	3501      	adds	r5, #1
 8001b06:	e7f2      	b.n	8001aee <__libc_init_array+0x1e>
 8001b08:	08001b7c 	.word	0x08001b7c
 8001b0c:	08001b7c 	.word	0x08001b7c
 8001b10:	08001b7c 	.word	0x08001b7c
 8001b14:	08001b80 	.word	0x08001b80

08001b18 <memset>:
 8001b18:	4402      	add	r2, r0
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d100      	bne.n	8001b22 <memset+0xa>
 8001b20:	4770      	bx	lr
 8001b22:	f803 1b01 	strb.w	r1, [r3], #1
 8001b26:	e7f9      	b.n	8001b1c <memset+0x4>

08001b28 <_init>:
 8001b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b2a:	bf00      	nop
 8001b2c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b2e:	bc08      	pop	{r3}
 8001b30:	469e      	mov	lr, r3
 8001b32:	4770      	bx	lr

08001b34 <_fini>:
 8001b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001b36:	bf00      	nop
 8001b38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001b3a:	bc08      	pop	{r3}
 8001b3c:	469e      	mov	lr, r3
 8001b3e:	4770      	bx	lr
