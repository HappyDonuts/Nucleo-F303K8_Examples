
Button_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001580  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001708  08001708  00011708  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001744  08001744  00011744  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001748  08001748  00011748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800174c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          000000d4  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000e0  200000e0  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011af3  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00002009  00000000  00000000  00031b2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000067cc  00000000  00000000  00033b38  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000890  00000000  00000000  0003a308  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000bb0  00000000  00000000  0003ab98  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004b7f  00000000  00000000  0003b748  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003688  00000000  00000000  000402c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004394f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001964  00000000  00000000  000439cc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080016f0 	.word	0x080016f0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080016f0 	.word	0x080016f0

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f88c 	bl	80002fc <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 f842 	bl	800027c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f81b 	bl	8000258 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f001 f94e 	bl	80014c8 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	2000002c 	.word	0x2000002c
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	2000002c 	.word	0x2000002c

08000258 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800025a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800025c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000260:	041b      	lsls	r3, r3, #16
 8000262:	0c1b      	lsrs	r3, r3, #16
 8000264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000268:	0200      	lsls	r0, r0, #8
 800026a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800026e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000272:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000274:	60d3      	str	r3, [r2, #12]
 8000276:	4770      	bx	lr
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800027e:	b530      	push	{r4, r5, lr}
 8000280:	68dc      	ldr	r4, [r3, #12]
 8000282:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000286:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800028a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800028c:	2b04      	cmp	r3, #4
 800028e:	bf28      	it	cs
 8000290:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000292:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000294:	f04f 0501 	mov.w	r5, #1
 8000298:	fa05 f303 	lsl.w	r3, r5, r3
 800029c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a0:	bf8c      	ite	hi
 80002a2:	3c03      	subhi	r4, #3
 80002a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a6:	4019      	ands	r1, r3
 80002a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002aa:	fa05 f404 	lsl.w	r4, r5, r4
 80002ae:	3c01      	subs	r4, #1
 80002b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b4:	ea42 0201 	orr.w	r2, r2, r1
 80002b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	bfaf      	iteee	ge
 80002be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c2:	f000 000f 	andlt.w	r0, r0, #15
 80002c6:	4b06      	ldrlt	r3, [pc, #24]	; (80002e0 <HAL_NVIC_SetPriority+0x64>)
 80002c8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ca:	bfa5      	ittet	ge
 80002cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002d8:	bd30      	pop	{r4, r5, pc}
 80002da:	bf00      	nop
 80002dc:	e000ed00 	.word	0xe000ed00
 80002e0:	e000ed14 	.word	0xe000ed14

080002e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002e4:	0942      	lsrs	r2, r0, #5
 80002e6:	2301      	movs	r3, #1
 80002e8:	f000 001f 	and.w	r0, r0, #31
 80002ec:	fa03 f000 	lsl.w	r0, r3, r0
 80002f0:	4b01      	ldr	r3, [pc, #4]	; (80002f8 <HAL_NVIC_EnableIRQ+0x14>)
 80002f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002f6:	4770      	bx	lr
 80002f8:	e000e100 	.word	0xe000e100

080002fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002fc:	3801      	subs	r0, #1
 80002fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000302:	d20a      	bcs.n	800031a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	4a07      	ldr	r2, [pc, #28]	; (8000324 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000308:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030a:	21f0      	movs	r1, #240	; 0xf0
 800030c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000310:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000312:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000314:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000e010 	.word	0xe000e010
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800032c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800032e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000330:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000498 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000334:	4a56      	ldr	r2, [pc, #344]	; (8000490 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000336:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000338:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 800033c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800033e:	9c01      	ldr	r4, [sp, #4]
 8000340:	40dc      	lsrs	r4, r3
 8000342:	d102      	bne.n	800034a <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000344:	b005      	add	sp, #20
 8000346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800034a:	2401      	movs	r4, #1
 800034c:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000350:	9c01      	ldr	r4, [sp, #4]
 8000352:	ea14 050a 	ands.w	r5, r4, sl
 8000356:	f000 8093 	beq.w	8000480 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800035a:	684c      	ldr	r4, [r1, #4]
 800035c:	f024 0b10 	bic.w	fp, r4, #16
 8000360:	f1bb 0f02 	cmp.w	fp, #2
 8000364:	d111      	bne.n	800038a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000366:	08df      	lsrs	r7, r3, #3
 8000368:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800036c:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000370:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000372:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000376:	fa09 fc0e 	lsl.w	ip, r9, lr
 800037a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800037e:	690e      	ldr	r6, [r1, #16]
 8000380:	fa06 f60e 	lsl.w	r6, r6, lr
 8000384:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000388:	623e      	str	r6, [r7, #32]
 800038a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800038e:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000390:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000392:	fa07 f70c 	lsl.w	r7, r7, ip
 8000396:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000398:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800039c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800039e:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a2:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003a6:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003aa:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80003ae:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b0:	d811      	bhi.n	80003d6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80003b2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003b4:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003b8:	68ce      	ldr	r6, [r1, #12]
 80003ba:	fa06 fe0c 	lsl.w	lr, r6, ip
 80003be:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80003c2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80003c4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003c6:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003ca:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80003ce:	409e      	lsls	r6, r3
 80003d0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80003d4:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80003d6:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003d8:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003da:	688e      	ldr	r6, [r1, #8]
 80003dc:	fa06 f60c 	lsl.w	r6, r6, ip
 80003e0:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003e2:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80003e4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003e6:	d54b      	bpl.n	8000480 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e8:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80003ec:	f046 0601 	orr.w	r6, r6, #1
 80003f0:	f8c8 6018 	str.w	r6, [r8, #24]
 80003f4:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80003f8:	f023 0703 	bic.w	r7, r3, #3
 80003fc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000400:	f006 0601 	and.w	r6, r6, #1
 8000404:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000408:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800040a:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040e:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000410:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000412:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000416:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800041a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800041e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000422:	d02f      	beq.n	8000484 <HAL_GPIO_Init+0x15c>
 8000424:	4e1b      	ldr	r6, [pc, #108]	; (8000494 <HAL_GPIO_Init+0x16c>)
 8000426:	42b0      	cmp	r0, r6
 8000428:	d02e      	beq.n	8000488 <HAL_GPIO_Init+0x160>
 800042a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800042e:	42b0      	cmp	r0, r6
 8000430:	d02c      	beq.n	800048c <HAL_GPIO_Init+0x164>
 8000432:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000436:	42b0      	cmp	r0, r6
 8000438:	bf14      	ite	ne
 800043a:	2605      	movne	r6, #5
 800043c:	2603      	moveq	r6, #3
 800043e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000442:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000446:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000448:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800044a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800044c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000450:	bf0c      	ite	eq
 8000452:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000454:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000456:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000458:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800045a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800045e:	bf0c      	ite	eq
 8000460:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000462:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000464:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000466:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000468:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800046c:	bf0c      	ite	eq
 800046e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000470:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000472:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000474:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000476:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000478:	bf54      	ite	pl
 800047a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800047c:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 800047e:	60d6      	str	r6, [r2, #12]
    position++;
 8000480:	3301      	adds	r3, #1
 8000482:	e75c      	b.n	800033e <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000484:	2600      	movs	r6, #0
 8000486:	e7da      	b.n	800043e <HAL_GPIO_Init+0x116>
 8000488:	2601      	movs	r6, #1
 800048a:	e7d8      	b.n	800043e <HAL_GPIO_Init+0x116>
 800048c:	2602      	movs	r6, #2
 800048e:	e7d6      	b.n	800043e <HAL_GPIO_Init+0x116>
 8000490:	40010400 	.word	0x40010400
 8000494:	48000400 	.word	0x48000400
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800049c:	6903      	ldr	r3, [r0, #16]
 800049e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80004a0:	bf14      	ite	ne
 80004a2:	2001      	movne	r0, #1
 80004a4:	2000      	moveq	r0, #0
 80004a6:	4770      	bx	lr

080004a8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80004a8:	b10a      	cbz	r2, 80004ae <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80004aa:	6181      	str	r1, [r0, #24]
 80004ac:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004ae:	6281      	str	r1, [r0, #40]	; 0x28
 80004b0:	4770      	bx	lr

080004b2 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004b2:	6943      	ldr	r3, [r0, #20]
 80004b4:	4059      	eors	r1, r3
 80004b6:	6141      	str	r1, [r0, #20]
 80004b8:	4770      	bx	lr

080004ba <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80004ba:	4770      	bx	lr

080004bc <HAL_GPIO_EXTI_IRQHandler>:
{
 80004bc:	b508      	push	{r3, lr}
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80004be:	4b04      	ldr	r3, [pc, #16]	; (80004d0 <HAL_GPIO_EXTI_IRQHandler+0x14>)
 80004c0:	6959      	ldr	r1, [r3, #20]
 80004c2:	4201      	tst	r1, r0
 80004c4:	d002      	beq.n	80004cc <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80004c6:	6158      	str	r0, [r3, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80004c8:	f7ff fff7 	bl	80004ba <HAL_GPIO_EXTI_Callback>
 80004cc:	bd08      	pop	{r3, pc}
 80004ce:	bf00      	nop
 80004d0:	40010400 	.word	0x40010400

080004d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004d4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80004d8:	4605      	mov	r5, r0
 80004da:	b918      	cbnz	r0, 80004e4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80004dc:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80004de:	b002      	add	sp, #8
 80004e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e4:	6803      	ldr	r3, [r0, #0]
 80004e6:	07da      	lsls	r2, r3, #31
 80004e8:	d411      	bmi.n	800050e <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004ea:	682b      	ldr	r3, [r5, #0]
 80004ec:	079b      	lsls	r3, r3, #30
 80004ee:	f100 8085 	bmi.w	80005fc <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004f2:	682b      	ldr	r3, [r5, #0]
 80004f4:	071c      	lsls	r4, r3, #28
 80004f6:	f100 80f6 	bmi.w	80006e6 <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004fa:	682b      	ldr	r3, [r5, #0]
 80004fc:	0758      	lsls	r0, r3, #29
 80004fe:	f100 813f 	bmi.w	8000780 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000502:	69ea      	ldr	r2, [r5, #28]
 8000504:	2a00      	cmp	r2, #0
 8000506:	f040 81d6 	bne.w	80008b6 <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 800050a:	2000      	movs	r0, #0
 800050c:	e7e7      	b.n	80004de <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800050e:	4cba      	ldr	r4, [pc, #744]	; (80007f8 <HAL_RCC_OscConfig+0x324>)
 8000510:	6863      	ldr	r3, [r4, #4]
 8000512:	f003 030c 	and.w	r3, r3, #12
 8000516:	2b04      	cmp	r3, #4
 8000518:	d007      	beq.n	800052a <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800051a:	6863      	ldr	r3, [r4, #4]
 800051c:	f003 030c 	and.w	r3, r3, #12
 8000520:	2b08      	cmp	r3, #8
 8000522:	d116      	bne.n	8000552 <HAL_RCC_OscConfig+0x7e>
 8000524:	6863      	ldr	r3, [r4, #4]
 8000526:	03df      	lsls	r7, r3, #15
 8000528:	d513      	bpl.n	8000552 <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800052a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800052e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000532:	6821      	ldr	r1, [r4, #0]
 8000534:	fa93 f3a3 	rbit	r3, r3
 8000538:	fab3 f383 	clz	r3, r3
 800053c:	f003 031f 	and.w	r3, r3, #31
 8000540:	2201      	movs	r2, #1
 8000542:	fa02 f303 	lsl.w	r3, r2, r3
 8000546:	420b      	tst	r3, r1
 8000548:	d0cf      	beq.n	80004ea <HAL_RCC_OscConfig+0x16>
 800054a:	686b      	ldr	r3, [r5, #4]
 800054c:	2b00      	cmp	r3, #0
 800054e:	d1cc      	bne.n	80004ea <HAL_RCC_OscConfig+0x16>
 8000550:	e7c4      	b.n	80004dc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000552:	686a      	ldr	r2, [r5, #4]
 8000554:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000558:	d125      	bne.n	80005a6 <HAL_RCC_OscConfig+0xd2>
 800055a:	6823      	ldr	r3, [r4, #0]
 800055c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000560:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000562:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000564:	68a9      	ldr	r1, [r5, #8]
 8000566:	f023 030f 	bic.w	r3, r3, #15
 800056a:	430b      	orrs	r3, r1
 800056c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800056e:	b352      	cbz	r2, 80005c6 <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000570:	f7ff fe6c 	bl	800024c <HAL_GetTick>
 8000574:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000578:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800057a:	2701      	movs	r7, #1
 800057c:	fa96 f3a6 	rbit	r3, r6
 8000580:	6822      	ldr	r2, [r4, #0]
 8000582:	fa96 f3a6 	rbit	r3, r6
 8000586:	fab3 f383 	clz	r3, r3
 800058a:	f003 031f 	and.w	r3, r3, #31
 800058e:	fa07 f303 	lsl.w	r3, r7, r3
 8000592:	4213      	tst	r3, r2
 8000594:	d1a9      	bne.n	80004ea <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000596:	f7ff fe59 	bl	800024c <HAL_GetTick>
 800059a:	eba0 0008 	sub.w	r0, r0, r8
 800059e:	2864      	cmp	r0, #100	; 0x64
 80005a0:	d9ec      	bls.n	800057c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 80005a2:	2003      	movs	r0, #3
 80005a4:	e79b      	b.n	80004de <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80005a6:	6823      	ldr	r3, [r4, #0]
 80005a8:	b932      	cbnz	r2, 80005b8 <HAL_RCC_OscConfig+0xe4>
 80005aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80005ae:	6023      	str	r3, [r4, #0]
 80005b0:	6823      	ldr	r3, [r4, #0]
 80005b2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005b6:	e7d3      	b.n	8000560 <HAL_RCC_OscConfig+0x8c>
 80005b8:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80005bc:	d1f5      	bne.n	80005aa <HAL_RCC_OscConfig+0xd6>
 80005be:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80005c2:	6023      	str	r3, [r4, #0]
 80005c4:	e7c9      	b.n	800055a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80005c6:	f7ff fe41 	bl	800024c <HAL_GetTick>
 80005ca:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005ce:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005d0:	2701      	movs	r7, #1
 80005d2:	fa96 f3a6 	rbit	r3, r6
 80005d6:	6822      	ldr	r2, [r4, #0]
 80005d8:	fa96 f3a6 	rbit	r3, r6
 80005dc:	fab3 f383 	clz	r3, r3
 80005e0:	f003 031f 	and.w	r3, r3, #31
 80005e4:	fa07 f303 	lsl.w	r3, r7, r3
 80005e8:	4213      	tst	r3, r2
 80005ea:	f43f af7e 	beq.w	80004ea <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ee:	f7ff fe2d 	bl	800024c <HAL_GetTick>
 80005f2:	eba0 0008 	sub.w	r0, r0, r8
 80005f6:	2864      	cmp	r0, #100	; 0x64
 80005f8:	d9eb      	bls.n	80005d2 <HAL_RCC_OscConfig+0xfe>
 80005fa:	e7d2      	b.n	80005a2 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005fc:	4c7e      	ldr	r4, [pc, #504]	; (80007f8 <HAL_RCC_OscConfig+0x324>)
 80005fe:	6863      	ldr	r3, [r4, #4]
 8000600:	f013 0f0c 	tst.w	r3, #12
 8000604:	d007      	beq.n	8000616 <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000606:	6863      	ldr	r3, [r4, #4]
 8000608:	f003 030c 	and.w	r3, r3, #12
 800060c:	2b08      	cmp	r3, #8
 800060e:	d122      	bne.n	8000656 <HAL_RCC_OscConfig+0x182>
 8000610:	6863      	ldr	r3, [r4, #4]
 8000612:	03de      	lsls	r6, r3, #15
 8000614:	d41f      	bmi.n	8000656 <HAL_RCC_OscConfig+0x182>
 8000616:	2302      	movs	r3, #2
 8000618:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800061c:	6821      	ldr	r1, [r4, #0]
 800061e:	fa93 f3a3 	rbit	r3, r3
 8000622:	fab3 f383 	clz	r3, r3
 8000626:	f003 031f 	and.w	r3, r3, #31
 800062a:	2201      	movs	r2, #1
 800062c:	fa02 f303 	lsl.w	r3, r2, r3
 8000630:	420b      	tst	r3, r1
 8000632:	d003      	beq.n	800063c <HAL_RCC_OscConfig+0x168>
 8000634:	692b      	ldr	r3, [r5, #16]
 8000636:	4293      	cmp	r3, r2
 8000638:	f47f af50 	bne.w	80004dc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800063c:	6821      	ldr	r1, [r4, #0]
 800063e:	23f8      	movs	r3, #248	; 0xf8
 8000640:	fa93 f3a3 	rbit	r3, r3
 8000644:	fab3 f283 	clz	r2, r3
 8000648:	696b      	ldr	r3, [r5, #20]
 800064a:	4093      	lsls	r3, r2
 800064c:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000650:	4313      	orrs	r3, r2
 8000652:	6023      	str	r3, [r4, #0]
 8000654:	e74d      	b.n	80004f2 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000656:	692a      	ldr	r2, [r5, #16]
 8000658:	2601      	movs	r6, #1
 800065a:	b30a      	cbz	r2, 80006a0 <HAL_RCC_OscConfig+0x1cc>
 800065c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000660:	fab3 f383 	clz	r3, r3
 8000664:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000668:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	2702      	movs	r7, #2
 8000670:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000672:	f7ff fdeb 	bl	800024c <HAL_GetTick>
 8000676:	4680      	mov	r8, r0
 8000678:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800067c:	6822      	ldr	r2, [r4, #0]
 800067e:	fa97 f3a7 	rbit	r3, r7
 8000682:	fab3 f383 	clz	r3, r3
 8000686:	f003 031f 	and.w	r3, r3, #31
 800068a:	fa06 f303 	lsl.w	r3, r6, r3
 800068e:	4213      	tst	r3, r2
 8000690:	d1d4      	bne.n	800063c <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000692:	f7ff fddb 	bl	800024c <HAL_GetTick>
 8000696:	eba0 0008 	sub.w	r0, r0, r8
 800069a:	2802      	cmp	r0, #2
 800069c:	d9ec      	bls.n	8000678 <HAL_RCC_OscConfig+0x1a4>
 800069e:	e780      	b.n	80005a2 <HAL_RCC_OscConfig+0xce>
 80006a0:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80006a4:	fab3 f383 	clz	r3, r3
 80006a8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80006ac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80006b0:	009b      	lsls	r3, r3, #2
 80006b2:	2702      	movs	r7, #2
 80006b4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80006b6:	f7ff fdc9 	bl	800024c <HAL_GetTick>
 80006ba:	4680      	mov	r8, r0
 80006bc:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80006c0:	6822      	ldr	r2, [r4, #0]
 80006c2:	fa97 f3a7 	rbit	r3, r7
 80006c6:	fab3 f383 	clz	r3, r3
 80006ca:	f003 031f 	and.w	r3, r3, #31
 80006ce:	fa06 f303 	lsl.w	r3, r6, r3
 80006d2:	4213      	tst	r3, r2
 80006d4:	f43f af0d 	beq.w	80004f2 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006d8:	f7ff fdb8 	bl	800024c <HAL_GetTick>
 80006dc:	eba0 0008 	sub.w	r0, r0, r8
 80006e0:	2802      	cmp	r0, #2
 80006e2:	d9eb      	bls.n	80006bc <HAL_RCC_OscConfig+0x1e8>
 80006e4:	e75d      	b.n	80005a2 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006e6:	69aa      	ldr	r2, [r5, #24]
 80006e8:	4e43      	ldr	r6, [pc, #268]	; (80007f8 <HAL_RCC_OscConfig+0x324>)
 80006ea:	4944      	ldr	r1, [pc, #272]	; (80007fc <HAL_RCC_OscConfig+0x328>)
 80006ec:	2401      	movs	r4, #1
 80006ee:	b31a      	cbz	r2, 8000738 <HAL_RCC_OscConfig+0x264>
 80006f0:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80006f4:	fab3 f383 	clz	r3, r3
 80006f8:	440b      	add	r3, r1
 80006fa:	009b      	lsls	r3, r3, #2
 80006fc:	2702      	movs	r7, #2
 80006fe:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000700:	f7ff fda4 	bl	800024c <HAL_GetTick>
 8000704:	4680      	mov	r8, r0
 8000706:	fa97 f3a7 	rbit	r3, r7
 800070a:	fa97 f3a7 	rbit	r3, r7
 800070e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000712:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000714:	fa97 f3a7 	rbit	r3, r7
 8000718:	fab3 f383 	clz	r3, r3
 800071c:	f003 031f 	and.w	r3, r3, #31
 8000720:	fa04 f303 	lsl.w	r3, r4, r3
 8000724:	4213      	tst	r3, r2
 8000726:	f47f aee8 	bne.w	80004fa <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800072a:	f7ff fd8f 	bl	800024c <HAL_GetTick>
 800072e:	eba0 0008 	sub.w	r0, r0, r8
 8000732:	2802      	cmp	r0, #2
 8000734:	d9e7      	bls.n	8000706 <HAL_RCC_OscConfig+0x232>
 8000736:	e734      	b.n	80005a2 <HAL_RCC_OscConfig+0xce>
 8000738:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800073c:	fab3 f383 	clz	r3, r3
 8000740:	440b      	add	r3, r1
 8000742:	009b      	lsls	r3, r3, #2
 8000744:	2702      	movs	r7, #2
 8000746:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000748:	f7ff fd80 	bl	800024c <HAL_GetTick>
 800074c:	4680      	mov	r8, r0
 800074e:	fa97 f3a7 	rbit	r3, r7
 8000752:	fa97 f3a7 	rbit	r3, r7
 8000756:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800075a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800075c:	fa97 f3a7 	rbit	r3, r7
 8000760:	fab3 f383 	clz	r3, r3
 8000764:	f003 031f 	and.w	r3, r3, #31
 8000768:	fa04 f303 	lsl.w	r3, r4, r3
 800076c:	4213      	tst	r3, r2
 800076e:	f43f aec4 	beq.w	80004fa <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000772:	f7ff fd6b 	bl	800024c <HAL_GetTick>
 8000776:	eba0 0008 	sub.w	r0, r0, r8
 800077a:	2802      	cmp	r0, #2
 800077c:	d9e7      	bls.n	800074e <HAL_RCC_OscConfig+0x27a>
 800077e:	e710      	b.n	80005a2 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000780:	4c1d      	ldr	r4, [pc, #116]	; (80007f8 <HAL_RCC_OscConfig+0x324>)
 8000782:	69e3      	ldr	r3, [r4, #28]
 8000784:	00d9      	lsls	r1, r3, #3
 8000786:	d434      	bmi.n	80007f2 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000788:	69e3      	ldr	r3, [r4, #28]
 800078a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800078e:	61e3      	str	r3, [r4, #28]
 8000790:	69e3      	ldr	r3, [r4, #28]
 8000792:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000796:	9301      	str	r3, [sp, #4]
 8000798:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800079a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800079c:	4f18      	ldr	r7, [pc, #96]	; (8000800 <HAL_RCC_OscConfig+0x32c>)
 800079e:	683b      	ldr	r3, [r7, #0]
 80007a0:	05da      	lsls	r2, r3, #23
 80007a2:	d52f      	bpl.n	8000804 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80007a4:	68eb      	ldr	r3, [r5, #12]
 80007a6:	2b01      	cmp	r3, #1
 80007a8:	d13d      	bne.n	8000826 <HAL_RCC_OscConfig+0x352>
 80007aa:	6a23      	ldr	r3, [r4, #32]
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80007b2:	f7ff fd4b 	bl	800024c <HAL_GetTick>
 80007b6:	2702      	movs	r7, #2
 80007b8:	4682      	mov	sl, r0
 80007ba:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80007bc:	f04f 0801 	mov.w	r8, #1
 80007c0:	fa97 f3a7 	rbit	r3, r7
 80007c4:	fa97 f3a7 	rbit	r3, r7
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d06c      	beq.n	80008a6 <HAL_RCC_OscConfig+0x3d2>
 80007cc:	6a22      	ldr	r2, [r4, #32]
 80007ce:	fa99 f3a9 	rbit	r3, r9
 80007d2:	fab3 f383 	clz	r3, r3
 80007d6:	f003 031f 	and.w	r3, r3, #31
 80007da:	fa08 f303 	lsl.w	r3, r8, r3
 80007de:	4213      	tst	r3, r2
 80007e0:	d058      	beq.n	8000894 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 80007e2:	2e00      	cmp	r6, #0
 80007e4:	f43f ae8d 	beq.w	8000502 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007e8:	69e3      	ldr	r3, [r4, #28]
 80007ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007ee:	61e3      	str	r3, [r4, #28]
 80007f0:	e687      	b.n	8000502 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80007f2:	2600      	movs	r6, #0
 80007f4:	e7d2      	b.n	800079c <HAL_RCC_OscConfig+0x2c8>
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000
 80007fc:	10908120 	.word	0x10908120
 8000800:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800080a:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800080c:	f7ff fd1e 	bl	800024c <HAL_GetTick>
 8000810:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000812:	683b      	ldr	r3, [r7, #0]
 8000814:	05db      	lsls	r3, r3, #23
 8000816:	d4c5      	bmi.n	80007a4 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000818:	f7ff fd18 	bl	800024c <HAL_GetTick>
 800081c:	eba0 0008 	sub.w	r0, r0, r8
 8000820:	2864      	cmp	r0, #100	; 0x64
 8000822:	d9f6      	bls.n	8000812 <HAL_RCC_OscConfig+0x33e>
 8000824:	e6bd      	b.n	80005a2 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000826:	bb3b      	cbnz	r3, 8000878 <HAL_RCC_OscConfig+0x3a4>
 8000828:	6a23      	ldr	r3, [r4, #32]
 800082a:	f023 0301 	bic.w	r3, r3, #1
 800082e:	6223      	str	r3, [r4, #32]
 8000830:	6a23      	ldr	r3, [r4, #32]
 8000832:	f023 0304 	bic.w	r3, r3, #4
 8000836:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000838:	f7ff fd08 	bl	800024c <HAL_GetTick>
 800083c:	2702      	movs	r7, #2
 800083e:	4682      	mov	sl, r0
 8000840:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000842:	f04f 0801 	mov.w	r8, #1
 8000846:	fa97 f3a7 	rbit	r3, r7
 800084a:	fa97 f3a7 	rbit	r3, r7
 800084e:	b373      	cbz	r3, 80008ae <HAL_RCC_OscConfig+0x3da>
 8000850:	6a22      	ldr	r2, [r4, #32]
 8000852:	fa99 f3a9 	rbit	r3, r9
 8000856:	fab3 f383 	clz	r3, r3
 800085a:	f003 031f 	and.w	r3, r3, #31
 800085e:	fa08 f303 	lsl.w	r3, r8, r3
 8000862:	4213      	tst	r3, r2
 8000864:	d0bd      	beq.n	80007e2 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000866:	f7ff fcf1 	bl	800024c <HAL_GetTick>
 800086a:	f241 3388 	movw	r3, #5000	; 0x1388
 800086e:	eba0 000a 	sub.w	r0, r0, sl
 8000872:	4298      	cmp	r0, r3
 8000874:	d9e7      	bls.n	8000846 <HAL_RCC_OscConfig+0x372>
 8000876:	e694      	b.n	80005a2 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000878:	2b05      	cmp	r3, #5
 800087a:	6a23      	ldr	r3, [r4, #32]
 800087c:	d103      	bne.n	8000886 <HAL_RCC_OscConfig+0x3b2>
 800087e:	f043 0304 	orr.w	r3, r3, #4
 8000882:	6223      	str	r3, [r4, #32]
 8000884:	e791      	b.n	80007aa <HAL_RCC_OscConfig+0x2d6>
 8000886:	f023 0301 	bic.w	r3, r3, #1
 800088a:	6223      	str	r3, [r4, #32]
 800088c:	6a23      	ldr	r3, [r4, #32]
 800088e:	f023 0304 	bic.w	r3, r3, #4
 8000892:	e78d      	b.n	80007b0 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000894:	f7ff fcda 	bl	800024c <HAL_GetTick>
 8000898:	f241 3388 	movw	r3, #5000	; 0x1388
 800089c:	eba0 000a 	sub.w	r0, r0, sl
 80008a0:	4298      	cmp	r0, r3
 80008a2:	d98d      	bls.n	80007c0 <HAL_RCC_OscConfig+0x2ec>
 80008a4:	e67d      	b.n	80005a2 <HAL_RCC_OscConfig+0xce>
 80008a6:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008aa:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008ac:	e78f      	b.n	80007ce <HAL_RCC_OscConfig+0x2fa>
 80008ae:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80008b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80008b4:	e7cd      	b.n	8000852 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80008b6:	4c41      	ldr	r4, [pc, #260]	; (80009bc <HAL_RCC_OscConfig+0x4e8>)
 80008b8:	6863      	ldr	r3, [r4, #4]
 80008ba:	f003 030c 	and.w	r3, r3, #12
 80008be:	2b08      	cmp	r3, #8
 80008c0:	f43f ae0c 	beq.w	80004dc <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008c4:	2a02      	cmp	r2, #2
 80008c6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008ca:	d152      	bne.n	8000972 <HAL_RCC_OscConfig+0x49e>
 80008cc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008d0:	fab3 f383 	clz	r3, r3
 80008d4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008d8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008dc:	009b      	lsls	r3, r3, #2
 80008de:	2200      	movs	r2, #0
 80008e0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008e2:	f7ff fcb3 	bl	800024c <HAL_GetTick>
 80008e6:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80008ea:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008ec:	2601      	movs	r6, #1
 80008ee:	fa97 f3a7 	rbit	r3, r7
 80008f2:	6822      	ldr	r2, [r4, #0]
 80008f4:	fa97 f3a7 	rbit	r3, r7
 80008f8:	fab3 f383 	clz	r3, r3
 80008fc:	f003 031f 	and.w	r3, r3, #31
 8000900:	fa06 f303 	lsl.w	r3, r6, r3
 8000904:	4213      	tst	r3, r2
 8000906:	d12d      	bne.n	8000964 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000908:	6862      	ldr	r2, [r4, #4]
 800090a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800090c:	6a29      	ldr	r1, [r5, #32]
 800090e:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000912:	430b      	orrs	r3, r1
 8000914:	4313      	orrs	r3, r2
 8000916:	6063      	str	r3, [r4, #4]
 8000918:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800091c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000920:	fab3 f383 	clz	r3, r3
 8000924:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000928:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800092c:	009b      	lsls	r3, r3, #2
 800092e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000932:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000934:	f7ff fc8a 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000938:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800093a:	4607      	mov	r7, r0
 800093c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000940:	6822      	ldr	r2, [r4, #0]
 8000942:	fa95 f3a5 	rbit	r3, r5
 8000946:	fab3 f383 	clz	r3, r3
 800094a:	f003 031f 	and.w	r3, r3, #31
 800094e:	fa06 f303 	lsl.w	r3, r6, r3
 8000952:	4213      	tst	r3, r2
 8000954:	f47f add9 	bne.w	800050a <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000958:	f7ff fc78 	bl	800024c <HAL_GetTick>
 800095c:	1bc0      	subs	r0, r0, r7
 800095e:	2802      	cmp	r0, #2
 8000960:	d9ec      	bls.n	800093c <HAL_RCC_OscConfig+0x468>
 8000962:	e61e      	b.n	80005a2 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000964:	f7ff fc72 	bl	800024c <HAL_GetTick>
 8000968:	eba0 0008 	sub.w	r0, r0, r8
 800096c:	2802      	cmp	r0, #2
 800096e:	d9be      	bls.n	80008ee <HAL_RCC_OscConfig+0x41a>
 8000970:	e617      	b.n	80005a2 <HAL_RCC_OscConfig+0xce>
 8000972:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000976:	fab3 f383 	clz	r3, r3
 800097a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800097e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000982:	009b      	lsls	r3, r3, #2
 8000984:	2200      	movs	r2, #0
 8000986:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000988:	f7ff fc60 	bl	800024c <HAL_GetTick>
 800098c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000990:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000992:	2601      	movs	r6, #1
 8000994:	fa95 f3a5 	rbit	r3, r5
 8000998:	6822      	ldr	r2, [r4, #0]
 800099a:	fa95 f3a5 	rbit	r3, r5
 800099e:	fab3 f383 	clz	r3, r3
 80009a2:	f003 031f 	and.w	r3, r3, #31
 80009a6:	fa06 f303 	lsl.w	r3, r6, r3
 80009aa:	4213      	tst	r3, r2
 80009ac:	f43f adad 	beq.w	800050a <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80009b0:	f7ff fc4c 	bl	800024c <HAL_GetTick>
 80009b4:	1bc0      	subs	r0, r0, r7
 80009b6:	2802      	cmp	r0, #2
 80009b8:	d9ec      	bls.n	8000994 <HAL_RCC_OscConfig+0x4c0>
 80009ba:	e5f2      	b.n	80005a2 <HAL_RCC_OscConfig+0xce>
 80009bc:	40021000 	.word	0x40021000

080009c0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80009c0:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80009c2:	4c13      	ldr	r4, [pc, #76]	; (8000a10 <HAL_RCC_GetSysClockFreq+0x50>)
 80009c4:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009c6:	f001 030c 	and.w	r3, r1, #12
 80009ca:	2b08      	cmp	r3, #8
 80009cc:	d11e      	bne.n	8000a0c <HAL_RCC_GetSysClockFreq+0x4c>
 80009ce:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80009d2:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009d6:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80009da:	fab3 f383 	clz	r3, r3
 80009de:	fa22 f303 	lsr.w	r3, r2, r3
 80009e2:	4a0c      	ldr	r2, [pc, #48]	; (8000a14 <HAL_RCC_GetSysClockFreq+0x54>)
 80009e4:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80009e6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009e8:	220f      	movs	r2, #15
 80009ea:	fa92 f2a2 	rbit	r2, r2
 80009ee:	fab2 f282 	clz	r2, r2
 80009f2:	f003 030f 	and.w	r3, r3, #15
 80009f6:	40d3      	lsrs	r3, r2
 80009f8:	4a07      	ldr	r2, [pc, #28]	; (8000a18 <HAL_RCC_GetSysClockFreq+0x58>)
 80009fa:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80009fc:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009fe:	bf4a      	itet	mi
 8000a00:	4b06      	ldrmi	r3, [pc, #24]	; (8000a1c <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000a02:	4b07      	ldrpl	r3, [pc, #28]	; (8000a20 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000a04:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000a08:	4358      	muls	r0, r3
 8000a0a:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000a0c:	4803      	ldr	r0, [pc, #12]	; (8000a1c <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000a0e:	bd10      	pop	{r4, pc}
 8000a10:	40021000 	.word	0x40021000
 8000a14:	08001708 	.word	0x08001708
 8000a18:	08001718 	.word	0x08001718
 8000a1c:	007a1200 	.word	0x007a1200
 8000a20:	003d0900 	.word	0x003d0900

08000a24 <HAL_RCC_ClockConfig>:
{
 8000a24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a28:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000a2a:	4604      	mov	r4, r0
 8000a2c:	b910      	cbnz	r0, 8000a34 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000a2e:	2001      	movs	r0, #1
 8000a30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a34:	4a4c      	ldr	r2, [pc, #304]	; (8000b68 <HAL_RCC_ClockConfig+0x144>)
 8000a36:	6813      	ldr	r3, [r2, #0]
 8000a38:	f003 0307 	and.w	r3, r3, #7
 8000a3c:	428b      	cmp	r3, r1
 8000a3e:	d32e      	bcc.n	8000a9e <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a40:	6822      	ldr	r2, [r4, #0]
 8000a42:	0791      	lsls	r1, r2, #30
 8000a44:	d436      	bmi.n	8000ab4 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a46:	07d2      	lsls	r2, r2, #31
 8000a48:	d43c      	bmi.n	8000ac4 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000a4a:	4a47      	ldr	r2, [pc, #284]	; (8000b68 <HAL_RCC_ClockConfig+0x144>)
 8000a4c:	6813      	ldr	r3, [r2, #0]
 8000a4e:	f003 0307 	and.w	r3, r3, #7
 8000a52:	429d      	cmp	r5, r3
 8000a54:	d375      	bcc.n	8000b42 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a56:	6822      	ldr	r2, [r4, #0]
 8000a58:	4d44      	ldr	r5, [pc, #272]	; (8000b6c <HAL_RCC_ClockConfig+0x148>)
 8000a5a:	f012 0f04 	tst.w	r2, #4
 8000a5e:	d17c      	bne.n	8000b5a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a60:	0713      	lsls	r3, r2, #28
 8000a62:	d506      	bpl.n	8000a72 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a64:	686b      	ldr	r3, [r5, #4]
 8000a66:	6922      	ldr	r2, [r4, #16]
 8000a68:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a6c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a70:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a72:	f7ff ffa5 	bl	80009c0 <HAL_RCC_GetSysClockFreq>
 8000a76:	686b      	ldr	r3, [r5, #4]
 8000a78:	22f0      	movs	r2, #240	; 0xf0
 8000a7a:	fa92 f2a2 	rbit	r2, r2
 8000a7e:	fab2 f282 	clz	r2, r2
 8000a82:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a86:	40d3      	lsrs	r3, r2
 8000a88:	4a39      	ldr	r2, [pc, #228]	; (8000b70 <HAL_RCC_ClockConfig+0x14c>)
 8000a8a:	5cd3      	ldrb	r3, [r2, r3]
 8000a8c:	40d8      	lsrs	r0, r3
 8000a8e:	4b39      	ldr	r3, [pc, #228]	; (8000b74 <HAL_RCC_ClockConfig+0x150>)
 8000a90:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a92:	2000      	movs	r0, #0
 8000a94:	f7ff fb98 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000a98:	2000      	movs	r0, #0
 8000a9a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a9e:	6813      	ldr	r3, [r2, #0]
 8000aa0:	f023 0307 	bic.w	r3, r3, #7
 8000aa4:	430b      	orrs	r3, r1
 8000aa6:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000aa8:	6813      	ldr	r3, [r2, #0]
 8000aaa:	f003 0307 	and.w	r3, r3, #7
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	d1bd      	bne.n	8000a2e <HAL_RCC_ClockConfig+0xa>
 8000ab2:	e7c5      	b.n	8000a40 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000ab4:	492d      	ldr	r1, [pc, #180]	; (8000b6c <HAL_RCC_ClockConfig+0x148>)
 8000ab6:	68a0      	ldr	r0, [r4, #8]
 8000ab8:	684b      	ldr	r3, [r1, #4]
 8000aba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000abe:	4303      	orrs	r3, r0
 8000ac0:	604b      	str	r3, [r1, #4]
 8000ac2:	e7c0      	b.n	8000a46 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ac4:	6862      	ldr	r2, [r4, #4]
 8000ac6:	4e29      	ldr	r6, [pc, #164]	; (8000b6c <HAL_RCC_ClockConfig+0x148>)
 8000ac8:	2a01      	cmp	r2, #1
 8000aca:	d127      	bne.n	8000b1c <HAL_RCC_ClockConfig+0xf8>
 8000acc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ad0:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ad4:	6831      	ldr	r1, [r6, #0]
 8000ad6:	fa93 f3a3 	rbit	r3, r3
 8000ada:	fab3 f383 	clz	r3, r3
 8000ade:	f003 031f 	and.w	r3, r3, #31
 8000ae2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae6:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ae8:	d0a1      	beq.n	8000a2e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000aea:	6873      	ldr	r3, [r6, #4]
 8000aec:	f023 0303 	bic.w	r3, r3, #3
 8000af0:	431a      	orrs	r2, r3
 8000af2:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000af4:	f7ff fbaa 	bl	800024c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000af8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000afc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000afe:	6873      	ldr	r3, [r6, #4]
 8000b00:	6862      	ldr	r2, [r4, #4]
 8000b02:	f003 030c 	and.w	r3, r3, #12
 8000b06:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000b0a:	d09e      	beq.n	8000a4a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000b0c:	f7ff fb9e 	bl	800024c <HAL_GetTick>
 8000b10:	1bc0      	subs	r0, r0, r7
 8000b12:	4540      	cmp	r0, r8
 8000b14:	d9f3      	bls.n	8000afe <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000b16:	2003      	movs	r0, #3
}
 8000b18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000b1c:	2a02      	cmp	r2, #2
 8000b1e:	bf0c      	ite	eq
 8000b20:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b24:	2302      	movne	r3, #2
 8000b26:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b2a:	6830      	ldr	r0, [r6, #0]
 8000b2c:	fa93 f3a3 	rbit	r3, r3
 8000b30:	fab3 f383 	clz	r3, r3
 8000b34:	f003 031f 	and.w	r3, r3, #31
 8000b38:	2101      	movs	r1, #1
 8000b3a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b3e:	4203      	tst	r3, r0
 8000b40:	e7d2      	b.n	8000ae8 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b42:	6813      	ldr	r3, [r2, #0]
 8000b44:	f023 0307 	bic.w	r3, r3, #7
 8000b48:	432b      	orrs	r3, r5
 8000b4a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b4c:	6813      	ldr	r3, [r2, #0]
 8000b4e:	f003 0307 	and.w	r3, r3, #7
 8000b52:	429d      	cmp	r5, r3
 8000b54:	f47f af6b 	bne.w	8000a2e <HAL_RCC_ClockConfig+0xa>
 8000b58:	e77d      	b.n	8000a56 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b5a:	686b      	ldr	r3, [r5, #4]
 8000b5c:	68e1      	ldr	r1, [r4, #12]
 8000b5e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b62:	430b      	orrs	r3, r1
 8000b64:	606b      	str	r3, [r5, #4]
 8000b66:	e77b      	b.n	8000a60 <HAL_RCC_ClockConfig+0x3c>
 8000b68:	40022000 	.word	0x40022000
 8000b6c:	40021000 	.word	0x40021000
 8000b70:	0800172c 	.word	0x0800172c
 8000b74:	20000008 	.word	0x20000008

08000b78 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000b78:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b7a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b7e:	685b      	ldr	r3, [r3, #4]
 8000b80:	fa92 f2a2 	rbit	r2, r2
 8000b84:	fab2 f282 	clz	r2, r2
 8000b88:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b8c:	40d3      	lsrs	r3, r2
 8000b8e:	4a04      	ldr	r2, [pc, #16]	; (8000ba0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000b90:	5cd3      	ldrb	r3, [r2, r3]
 8000b92:	4a04      	ldr	r2, [pc, #16]	; (8000ba4 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000b94:	6810      	ldr	r0, [r2, #0]
}    
 8000b96:	40d8      	lsrs	r0, r3
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	40021000 	.word	0x40021000
 8000ba0:	0800173c 	.word	0x0800173c
 8000ba4:	20000008 	.word	0x20000008

08000ba8 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000ba8:	4b08      	ldr	r3, [pc, #32]	; (8000bcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8000baa:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000bae:	685b      	ldr	r3, [r3, #4]
 8000bb0:	fa92 f2a2 	rbit	r2, r2
 8000bb4:	fab2 f282 	clz	r2, r2
 8000bb8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000bbc:	40d3      	lsrs	r3, r2
 8000bbe:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000bc0:	5cd3      	ldrb	r3, [r2, r3]
 8000bc2:	4a04      	ldr	r2, [pc, #16]	; (8000bd4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000bc4:	6810      	ldr	r0, [r2, #0]
} 
 8000bc6:	40d8      	lsrs	r0, r3
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	40021000 	.word	0x40021000
 8000bd0:	0800173c 	.word	0x0800173c
 8000bd4:	20000008 	.word	0x20000008

08000bd8 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000bd8:	6803      	ldr	r3, [r0, #0]
 8000bda:	68da      	ldr	r2, [r3, #12]
 8000bdc:	f042 0201 	orr.w	r2, r2, #1
 8000be0:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000be2:	681a      	ldr	r2, [r3, #0]
 8000be4:	f042 0201 	orr.w	r2, r2, #1
 8000be8:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000bea:	2000      	movs	r0, #0
 8000bec:	4770      	bx	lr

08000bee <HAL_TIM_Base_Stop_IT>:
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8000bee:	6803      	ldr	r3, [r0, #0]
 8000bf0:	68da      	ldr	r2, [r3, #12]
 8000bf2:	f022 0201 	bic.w	r2, r2, #1
 8000bf6:	60da      	str	r2, [r3, #12]
      
  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8000bf8:	6a19      	ldr	r1, [r3, #32]
 8000bfa:	f241 1211 	movw	r2, #4369	; 0x1111
 8000bfe:	4211      	tst	r1, r2
 8000c00:	d108      	bne.n	8000c14 <HAL_TIM_Base_Stop_IT+0x26>
 8000c02:	6a19      	ldr	r1, [r3, #32]
 8000c04:	f240 4244 	movw	r2, #1092	; 0x444
 8000c08:	4211      	tst	r1, r2
 8000c0a:	bf02      	ittt	eq
 8000c0c:	681a      	ldreq	r2, [r3, #0]
 8000c0e:	f022 0201 	biceq.w	r2, r2, #1
 8000c12:	601a      	streq	r2, [r3, #0]
    
  /* Return function status */
  return HAL_OK;
}
 8000c14:	2000      	movs	r0, #0
 8000c16:	4770      	bx	lr

08000c18 <HAL_TIM_PeriodElapsedCallback>:
 8000c18:	4770      	bx	lr

08000c1a <HAL_TIM_OC_DelayElapsedCallback>:
 8000c1a:	4770      	bx	lr

08000c1c <HAL_TIM_IC_CaptureCallback>:
 8000c1c:	4770      	bx	lr

08000c1e <HAL_TIM_PWM_PulseFinishedCallback>:
 8000c1e:	4770      	bx	lr

08000c20 <HAL_TIM_TriggerCallback>:
 8000c20:	4770      	bx	lr

08000c22 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000c22:	6803      	ldr	r3, [r0, #0]
 8000c24:	691a      	ldr	r2, [r3, #16]
 8000c26:	0791      	lsls	r1, r2, #30
{
 8000c28:	b510      	push	{r4, lr}
 8000c2a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000c2c:	d50f      	bpl.n	8000c4e <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000c2e:	68da      	ldr	r2, [r3, #12]
 8000c30:	0792      	lsls	r2, r2, #30
 8000c32:	d50c      	bpl.n	8000c4e <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8000c34:	f06f 0202 	mvn.w	r2, #2
 8000c38:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000c3a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000c3c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000c3e:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000c40:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000c42:	f000 8085 	beq.w	8000d50 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000c46:	f7ff ffe9 	bl	8000c1c <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000c4e:	6823      	ldr	r3, [r4, #0]
 8000c50:	691a      	ldr	r2, [r3, #16]
 8000c52:	0752      	lsls	r2, r2, #29
 8000c54:	d510      	bpl.n	8000c78 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000c56:	68da      	ldr	r2, [r3, #12]
 8000c58:	0750      	lsls	r0, r2, #29
 8000c5a:	d50d      	bpl.n	8000c78 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8000c5c:	f06f 0204 	mvn.w	r2, #4
 8000c60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000c62:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000c64:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000c66:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000c6a:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c6c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000c6e:	d075      	beq.n	8000d5c <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c70:	f7ff ffd4 	bl	8000c1c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c74:	2300      	movs	r3, #0
 8000c76:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000c78:	6823      	ldr	r3, [r4, #0]
 8000c7a:	691a      	ldr	r2, [r3, #16]
 8000c7c:	0711      	lsls	r1, r2, #28
 8000c7e:	d50f      	bpl.n	8000ca0 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	0712      	lsls	r2, r2, #28
 8000c84:	d50c      	bpl.n	8000ca0 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8000c86:	f06f 0208 	mvn.w	r2, #8
 8000c8a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c8c:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c8e:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c90:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c92:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c94:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c96:	d067      	beq.n	8000d68 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c98:	f7ff ffc0 	bl	8000c1c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000ca0:	6823      	ldr	r3, [r4, #0]
 8000ca2:	691a      	ldr	r2, [r3, #16]
 8000ca4:	06d0      	lsls	r0, r2, #27
 8000ca6:	d510      	bpl.n	8000cca <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000ca8:	68da      	ldr	r2, [r3, #12]
 8000caa:	06d1      	lsls	r1, r2, #27
 8000cac:	d50d      	bpl.n	8000cca <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8000cae:	f06f 0210 	mvn.w	r2, #16
 8000cb2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000cb4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000cb6:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000cb8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000cbc:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000cbe:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000cc0:	d058      	beq.n	8000d74 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8000cc2:	f7ff ffab 	bl	8000c1c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	691a      	ldr	r2, [r3, #16]
 8000cce:	07d2      	lsls	r2, r2, #31
 8000cd0:	d508      	bpl.n	8000ce4 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	07d0      	lsls	r0, r2, #31
 8000cd6:	d505      	bpl.n	8000ce4 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8000cd8:	f06f 0201 	mvn.w	r2, #1
 8000cdc:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000cde:	4620      	mov	r0, r4
 8000ce0:	f7ff ff9a 	bl	8000c18 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	691a      	ldr	r2, [r3, #16]
 8000ce8:	0611      	lsls	r1, r2, #24
 8000cea:	d508      	bpl.n	8000cfe <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000cec:	68da      	ldr	r2, [r3, #12]
 8000cee:	0612      	lsls	r2, r2, #24
 8000cf0:	d505      	bpl.n	8000cfe <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8000cf2:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000cf6:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	f000 f98a 	bl	8001012 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8000cfe:	6823      	ldr	r3, [r4, #0]
 8000d00:	691a      	ldr	r2, [r3, #16]
 8000d02:	05d0      	lsls	r0, r2, #23
 8000d04:	d508      	bpl.n	8000d18 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000d06:	68da      	ldr	r2, [r3, #12]
 8000d08:	0611      	lsls	r1, r2, #24
 8000d0a:	d505      	bpl.n	8000d18 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8000d0c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8000d10:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8000d12:	4620      	mov	r0, r4
 8000d14:	f000 f97e 	bl	8001014 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000d18:	6823      	ldr	r3, [r4, #0]
 8000d1a:	691a      	ldr	r2, [r3, #16]
 8000d1c:	0652      	lsls	r2, r2, #25
 8000d1e:	d508      	bpl.n	8000d32 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000d20:	68da      	ldr	r2, [r3, #12]
 8000d22:	0650      	lsls	r0, r2, #25
 8000d24:	d505      	bpl.n	8000d32 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8000d26:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000d2a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000d2c:	4620      	mov	r0, r4
 8000d2e:	f7ff ff77 	bl	8000c20 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000d32:	6823      	ldr	r3, [r4, #0]
 8000d34:	691a      	ldr	r2, [r3, #16]
 8000d36:	0691      	lsls	r1, r2, #26
 8000d38:	d522      	bpl.n	8000d80 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000d3a:	68da      	ldr	r2, [r3, #12]
 8000d3c:	0692      	lsls	r2, r2, #26
 8000d3e:	d51f      	bpl.n	8000d80 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000d40:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000d44:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000d46:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000d48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000d4c:	f000 b960 	b.w	8001010 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d50:	f7ff ff63 	bl	8000c1a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d54:	4620      	mov	r0, r4
 8000d56:	f7ff ff62 	bl	8000c1e <HAL_TIM_PWM_PulseFinishedCallback>
 8000d5a:	e776      	b.n	8000c4a <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d5c:	f7ff ff5d 	bl	8000c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d60:	4620      	mov	r0, r4
 8000d62:	f7ff ff5c 	bl	8000c1e <HAL_TIM_PWM_PulseFinishedCallback>
 8000d66:	e785      	b.n	8000c74 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d68:	f7ff ff57 	bl	8000c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000d6c:	4620      	mov	r0, r4
 8000d6e:	f7ff ff56 	bl	8000c1e <HAL_TIM_PWM_PulseFinishedCallback>
 8000d72:	e793      	b.n	8000c9c <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d74:	f7ff ff51 	bl	8000c1a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d78:	4620      	mov	r0, r4
 8000d7a:	f7ff ff50 	bl	8000c1e <HAL_TIM_PWM_PulseFinishedCallback>
 8000d7e:	e7a2      	b.n	8000cc6 <HAL_TIM_IRQHandler+0xa4>
 8000d80:	bd10      	pop	{r4, pc}
	...

08000d84 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d84:	4a21      	ldr	r2, [pc, #132]	; (8000e0c <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 8000d86:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d88:	4290      	cmp	r0, r2
{
 8000d8a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d8c:	d005      	beq.n	8000d9a <TIM_Base_SetConfig+0x16>
 8000d8e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d92:	d002      	beq.n	8000d9a <TIM_Base_SetConfig+0x16>
 8000d94:	4c1e      	ldr	r4, [pc, #120]	; (8000e10 <TIM_Base_SetConfig+0x8c>)
 8000d96:	42a0      	cmp	r0, r4
 8000d98:	d10c      	bne.n	8000db4 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000d9a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000da0:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8000da2:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000da6:	d010      	beq.n	8000dca <TIM_Base_SetConfig+0x46>
 8000da8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000dac:	d00d      	beq.n	8000dca <TIM_Base_SetConfig+0x46>
 8000dae:	4a18      	ldr	r2, [pc, #96]	; (8000e10 <TIM_Base_SetConfig+0x8c>)
 8000db0:	4290      	cmp	r0, r2
 8000db2:	d00a      	beq.n	8000dca <TIM_Base_SetConfig+0x46>
 8000db4:	4a17      	ldr	r2, [pc, #92]	; (8000e14 <TIM_Base_SetConfig+0x90>)
 8000db6:	4290      	cmp	r0, r2
 8000db8:	d007      	beq.n	8000dca <TIM_Base_SetConfig+0x46>
 8000dba:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dbe:	4290      	cmp	r0, r2
 8000dc0:	d003      	beq.n	8000dca <TIM_Base_SetConfig+0x46>
 8000dc2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000dc6:	4290      	cmp	r0, r2
 8000dc8:	d103      	bne.n	8000dd2 <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000dca:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000dcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000dd0:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000dd2:	694a      	ldr	r2, [r1, #20]
 8000dd4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000dd8:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000dda:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000ddc:	688b      	ldr	r3, [r1, #8]
 8000dde:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000de0:	680b      	ldr	r3, [r1, #0]
 8000de2:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8000de4:	4b09      	ldr	r3, [pc, #36]	; (8000e0c <TIM_Base_SetConfig+0x88>)
 8000de6:	4298      	cmp	r0, r3
 8000de8:	d00b      	beq.n	8000e02 <TIM_Base_SetConfig+0x7e>
 8000dea:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000dee:	4298      	cmp	r0, r3
 8000df0:	d007      	beq.n	8000e02 <TIM_Base_SetConfig+0x7e>
 8000df2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000df6:	4298      	cmp	r0, r3
 8000df8:	d003      	beq.n	8000e02 <TIM_Base_SetConfig+0x7e>
 8000dfa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dfe:	4298      	cmp	r0, r3
 8000e00:	d101      	bne.n	8000e06 <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000e02:	690b      	ldr	r3, [r1, #16]
 8000e04:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000e06:	2301      	movs	r3, #1
 8000e08:	6143      	str	r3, [r0, #20]
 8000e0a:	bd10      	pop	{r4, pc}
 8000e0c:	40012c00 	.word	0x40012c00
 8000e10:	40000400 	.word	0x40000400
 8000e14:	40014000 	.word	0x40014000

08000e18 <HAL_TIM_Base_Init>:
{ 
 8000e18:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000e1a:	4604      	mov	r4, r0
 8000e1c:	b1a0      	cbz	r0, 8000e48 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000e1e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000e22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000e26:	b91b      	cbnz	r3, 8000e30 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000e28:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000e2c:	f000 fb64 	bl	80014f8 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000e30:	2302      	movs	r3, #2
 8000e32:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000e36:	6820      	ldr	r0, [r4, #0]
 8000e38:	1d21      	adds	r1, r4, #4
 8000e3a:	f7ff ffa3 	bl	8000d84 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000e3e:	2301      	movs	r3, #1
 8000e40:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000e44:	2000      	movs	r0, #0
 8000e46:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000e48:	2001      	movs	r0, #1
}
 8000e4a:	bd10      	pop	{r4, pc}

08000e4c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000e4c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000e4e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e50:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e52:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e56:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000e5a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000e5c:	6083      	str	r3, [r0, #8]
 8000e5e:	bd10      	pop	{r4, pc}

08000e60 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000e60:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000e64:	2b01      	cmp	r3, #1
{
 8000e66:	b570      	push	{r4, r5, r6, lr}
 8000e68:	4604      	mov	r4, r0
 8000e6a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000e6e:	d01a      	beq.n	8000ea6 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8000e70:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000e74:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8000e76:	2301      	movs	r3, #1
 8000e78:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000e7c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e7e:	4b52      	ldr	r3, [pc, #328]	; (8000fc8 <HAL_TIM_ConfigClockSource+0x168>)
 8000e80:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8000e82:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8000e84:	680b      	ldr	r3, [r1, #0]
 8000e86:	2b40      	cmp	r3, #64	; 0x40
 8000e88:	d075      	beq.n	8000f76 <HAL_TIM_ConfigClockSource+0x116>
 8000e8a:	d818      	bhi.n	8000ebe <HAL_TIM_ConfigClockSource+0x5e>
 8000e8c:	2b10      	cmp	r3, #16
 8000e8e:	f000 808f 	beq.w	8000fb0 <HAL_TIM_ConfigClockSource+0x150>
 8000e92:	d809      	bhi.n	8000ea8 <HAL_TIM_ConfigClockSource+0x48>
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	f000 8085 	beq.w	8000fa4 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8000e9a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000e9c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000e9e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000ea2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000ea6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000ea8:	2b20      	cmp	r3, #32
 8000eaa:	f000 8087 	beq.w	8000fbc <HAL_TIM_ConfigClockSource+0x15c>
 8000eae:	2b30      	cmp	r3, #48	; 0x30
 8000eb0:	d1f3      	bne.n	8000e9a <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8000eb2:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000eb4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000eb8:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8000ebc:	e033      	b.n	8000f26 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8000ebe:	2b70      	cmp	r3, #112	; 0x70
 8000ec0:	d033      	beq.n	8000f2a <HAL_TIM_ConfigClockSource+0xca>
 8000ec2:	d81b      	bhi.n	8000efc <HAL_TIM_ConfigClockSource+0x9c>
 8000ec4:	2b50      	cmp	r3, #80	; 0x50
 8000ec6:	d03f      	beq.n	8000f48 <HAL_TIM_ConfigClockSource+0xe8>
 8000ec8:	2b60      	cmp	r3, #96	; 0x60
 8000eca:	d1e6      	bne.n	8000e9a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000ecc:	684d      	ldr	r5, [r1, #4]
 8000ece:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000ed0:	6a01      	ldr	r1, [r0, #32]
 8000ed2:	f021 0110 	bic.w	r1, r1, #16
 8000ed6:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000ed8:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8000eda:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000edc:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000ee0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000ee4:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000ee8:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000eec:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000eee:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000ef0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ef2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ef6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8000efa:	e014      	b.n	8000f26 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8000efc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f00:	d00c      	beq.n	8000f1c <HAL_TIM_ConfigClockSource+0xbc>
 8000f02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000f06:	d1c8      	bne.n	8000e9a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8000f08:	68cb      	ldr	r3, [r1, #12]
 8000f0a:	684a      	ldr	r2, [r1, #4]
 8000f0c:	6889      	ldr	r1, [r1, #8]
 8000f0e:	f7ff ff9d 	bl	8000e4c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f12:	6822      	ldr	r2, [r4, #0]
 8000f14:	6893      	ldr	r3, [r2, #8]
 8000f16:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f1a:	e013      	b.n	8000f44 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000f1c:	6883      	ldr	r3, [r0, #8]
 8000f1e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f22:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8000f26:	6083      	str	r3, [r0, #8]
 8000f28:	e7b7      	b.n	8000e9a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8000f2a:	68cb      	ldr	r3, [r1, #12]
 8000f2c:	684a      	ldr	r2, [r1, #4]
 8000f2e:	6889      	ldr	r1, [r1, #8]
 8000f30:	f7ff ff8c 	bl	8000e4c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8000f34:	6822      	ldr	r2, [r4, #0]
 8000f36:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8000f38:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f3c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000f40:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000f44:	6093      	str	r3, [r2, #8]
    break;
 8000f46:	e7a8      	b.n	8000e9a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000f48:	684a      	ldr	r2, [r1, #4]
 8000f4a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000f4c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f4e:	6a05      	ldr	r5, [r0, #32]
 8000f50:	f025 0501 	bic.w	r5, r5, #1
 8000f54:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000f56:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f58:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f5c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f60:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000f64:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000f66:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f68:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000f6a:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f70:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8000f74:	e7d7      	b.n	8000f26 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000f76:	684a      	ldr	r2, [r1, #4]
 8000f78:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000f7a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f7c:	6a05      	ldr	r5, [r0, #32]
 8000f7e:	f025 0501 	bic.w	r5, r5, #1
 8000f82:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000f84:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f86:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f8e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000f92:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000f94:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f96:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000f98:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f9a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f9e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8000fa2:	e7c0      	b.n	8000f26 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8000fa4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fa6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000faa:	f043 0307 	orr.w	r3, r3, #7
 8000fae:	e7ba      	b.n	8000f26 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8000fb0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fb6:	f043 0317 	orr.w	r3, r3, #23
 8000fba:	e7b4      	b.n	8000f26 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8000fbc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000fbe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000fc2:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8000fc6:	e7ae      	b.n	8000f26 <HAL_TIM_ConfigClockSource+0xc6>
 8000fc8:	fffe0088 	.word	0xfffe0088

08000fcc <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8000fcc:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000fd0:	2b01      	cmp	r3, #1
{
 8000fd2:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8000fd4:	d018      	beq.n	8001008 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000fd6:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8000fd8:	4d0c      	ldr	r5, [pc, #48]	; (800100c <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8000fda:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8000fdc:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8000fde:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8000fe0:	bf02      	ittt	eq
 8000fe2:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8000fe4:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8000fe8:	432b      	orreq	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000fea:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000fec:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000fee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000ff2:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8000ff4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000ff8:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000ffa:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8000ffc:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8000ffe:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001000:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8001004:	4618      	mov	r0, r3
 8001006:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001008:	2002      	movs	r0, #2
} 
 800100a:	bd30      	pop	{r4, r5, pc}
 800100c:	40012c00 	.word	0x40012c00

08001010 <HAL_TIMEx_CommutationCallback>:
 8001010:	4770      	bx	lr

08001012 <HAL_TIMEx_BreakCallback>:
 8001012:	4770      	bx	lr

08001014 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001014:	4770      	bx	lr
	...

08001018 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001018:	b538      	push	{r3, r4, r5, lr}
 800101a:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800101c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800101e:	6921      	ldr	r1, [r4, #16]
 8001020:	68a3      	ldr	r3, [r4, #8]
 8001022:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001024:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001026:	430b      	orrs	r3, r1
 8001028:	6961      	ldr	r1, [r4, #20]
 800102a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800102c:	4949      	ldr	r1, [pc, #292]	; (8001154 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800102e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001030:	4001      	ands	r1, r0
 8001032:	430b      	orrs	r3, r1
 8001034:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001036:	686b      	ldr	r3, [r5, #4]
 8001038:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800103a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800103c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001040:	430b      	orrs	r3, r1
 8001042:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001044:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001046:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001048:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800104c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800104e:	430b      	orrs	r3, r1
 8001050:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001052:	4b41      	ldr	r3, [pc, #260]	; (8001158 <UART_SetConfig+0x140>)
 8001054:	429d      	cmp	r5, r3
 8001056:	d112      	bne.n	800107e <UART_SetConfig+0x66>
 8001058:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800105c:	493f      	ldr	r1, [pc, #252]	; (800115c <UART_SetConfig+0x144>)
 800105e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001060:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001064:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001068:	5ccb      	ldrb	r3, [r1, r3]
 800106a:	d13b      	bne.n	80010e4 <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 800106c:	2b08      	cmp	r3, #8
 800106e:	d836      	bhi.n	80010de <UART_SetConfig+0xc6>
 8001070:	e8df f003 	tbb	[pc, r3]
 8001074:	3524210f 	.word	0x3524210f
 8001078:	3535352d 	.word	0x3535352d
 800107c:	30          	.byte	0x30
 800107d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800107e:	4b38      	ldr	r3, [pc, #224]	; (8001160 <UART_SetConfig+0x148>)
 8001080:	429d      	cmp	r5, r3
 8001082:	d003      	beq.n	800108c <UART_SetConfig+0x74>
 8001084:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001088:	429d      	cmp	r5, r3
 800108a:	d15e      	bne.n	800114a <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800108c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001090:	d131      	bne.n	80010f6 <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001092:	f7ff fd71 	bl	8000b78 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001096:	6861      	ldr	r1, [r4, #4]
 8001098:	084a      	lsrs	r2, r1, #1
 800109a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800109e:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80010a2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80010a4:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80010a6:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 80010aa:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80010ac:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80010b0:	4313      	orrs	r3, r2
 80010b2:	60cb      	str	r3, [r1, #12]
 80010b4:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80010b6:	f7ff fd77 	bl	8000ba8 <HAL_RCC_GetPCLK2Freq>
 80010ba:	e7ec      	b.n	8001096 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80010bc:	6860      	ldr	r0, [r4, #4]
 80010be:	0843      	lsrs	r3, r0, #1
 80010c0:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80010c4:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80010c8:	fbb3 f3f0 	udiv	r3, r3, r0
 80010cc:	e7e9      	b.n	80010a2 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80010ce:	f7ff fc77 	bl	80009c0 <HAL_RCC_GetSysClockFreq>
 80010d2:	e7e0      	b.n	8001096 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80010d4:	6860      	ldr	r0, [r4, #4]
 80010d6:	0843      	lsrs	r3, r0, #1
 80010d8:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80010dc:	e7f4      	b.n	80010c8 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 80010de:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80010e0:	2300      	movs	r3, #0
 80010e2:	e7e0      	b.n	80010a6 <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 80010e4:	2b08      	cmp	r3, #8
 80010e6:	d833      	bhi.n	8001150 <UART_SetConfig+0x138>
 80010e8:	e8df f003 	tbb	[pc, r3]
 80010ec:	321b1005 	.word	0x321b1005
 80010f0:	32323227 	.word	0x32323227
 80010f4:	2a          	.byte	0x2a
 80010f5:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80010f6:	f7ff fd3f 	bl	8000b78 <HAL_RCC_GetPCLK1Freq>
 80010fa:	6863      	ldr	r3, [r4, #4]
 80010fc:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001100:	fbb0 f0f3 	udiv	r0, r0, r3
 8001104:	b280      	uxth	r0, r0
 8001106:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001108:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 800110a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800110c:	f7ff fd4c 	bl	8000ba8 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001110:	6863      	ldr	r3, [r4, #4]
 8001112:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001116:	fbb0 f0f3 	udiv	r0, r0, r3
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <UART_SetConfig+0x140>)
 800111c:	b280      	uxth	r0, r0
 800111e:	60d8      	str	r0, [r3, #12]
 8001120:	e7f2      	b.n	8001108 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001122:	6862      	ldr	r2, [r4, #4]
 8001124:	0853      	lsrs	r3, r2, #1
 8001126:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800112a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800112e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001132:	4a09      	ldr	r2, [pc, #36]	; (8001158 <UART_SetConfig+0x140>)
 8001134:	b29b      	uxth	r3, r3
 8001136:	60d3      	str	r3, [r2, #12]
 8001138:	e7e6      	b.n	8001108 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800113a:	f7ff fc41 	bl	80009c0 <HAL_RCC_GetSysClockFreq>
 800113e:	e7e7      	b.n	8001110 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001140:	6862      	ldr	r2, [r4, #4]
 8001142:	0853      	lsrs	r3, r2, #1
 8001144:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001148:	e7f1      	b.n	800112e <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800114a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800114e:	d0c6      	beq.n	80010de <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001150:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001152:	bd38      	pop	{r3, r4, r5, pc}
 8001154:	efff69f3 	.word	0xefff69f3
 8001158:	40013800 	.word	0x40013800
 800115c:	08001728 	.word	0x08001728
 8001160:	40004400 	.word	0x40004400

08001164 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001164:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001166:	07da      	lsls	r2, r3, #31
{
 8001168:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800116a:	d506      	bpl.n	800117a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800116c:	6801      	ldr	r1, [r0, #0]
 800116e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001170:	684a      	ldr	r2, [r1, #4]
 8001172:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001176:	4322      	orrs	r2, r4
 8001178:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800117a:	079c      	lsls	r4, r3, #30
 800117c:	d506      	bpl.n	800118c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800117e:	6801      	ldr	r1, [r0, #0]
 8001180:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001182:	684a      	ldr	r2, [r1, #4]
 8001184:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001188:	4322      	orrs	r2, r4
 800118a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800118c:	0759      	lsls	r1, r3, #29
 800118e:	d506      	bpl.n	800119e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001190:	6801      	ldr	r1, [r0, #0]
 8001192:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001194:	684a      	ldr	r2, [r1, #4]
 8001196:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800119a:	4322      	orrs	r2, r4
 800119c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800119e:	071a      	lsls	r2, r3, #28
 80011a0:	d506      	bpl.n	80011b0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80011a2:	6801      	ldr	r1, [r0, #0]
 80011a4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80011a6:	684a      	ldr	r2, [r1, #4]
 80011a8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011ac:	4322      	orrs	r2, r4
 80011ae:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80011b0:	06dc      	lsls	r4, r3, #27
 80011b2:	d506      	bpl.n	80011c2 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80011b4:	6801      	ldr	r1, [r0, #0]
 80011b6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80011b8:	688a      	ldr	r2, [r1, #8]
 80011ba:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80011be:	4322      	orrs	r2, r4
 80011c0:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80011c2:	0699      	lsls	r1, r3, #26
 80011c4:	d506      	bpl.n	80011d4 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80011c6:	6801      	ldr	r1, [r0, #0]
 80011c8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80011ca:	688a      	ldr	r2, [r1, #8]
 80011cc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80011d0:	4322      	orrs	r2, r4
 80011d2:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80011d4:	065a      	lsls	r2, r3, #25
 80011d6:	d50f      	bpl.n	80011f8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80011d8:	6801      	ldr	r1, [r0, #0]
 80011da:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80011dc:	684a      	ldr	r2, [r1, #4]
 80011de:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80011e2:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80011e4:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80011e8:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80011ea:	d105      	bne.n	80011f8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80011ec:	684a      	ldr	r2, [r1, #4]
 80011ee:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80011f0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80011f4:	4322      	orrs	r2, r4
 80011f6:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80011f8:	061b      	lsls	r3, r3, #24
 80011fa:	d506      	bpl.n	800120a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80011fc:	6802      	ldr	r2, [r0, #0]
 80011fe:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001200:	6853      	ldr	r3, [r2, #4]
 8001202:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001206:	430b      	orrs	r3, r1
 8001208:	6053      	str	r3, [r2, #4]
 800120a:	bd10      	pop	{r4, pc}

0800120c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800120c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001210:	9d06      	ldr	r5, [sp, #24]
 8001212:	4604      	mov	r4, r0
 8001214:	460f      	mov	r7, r1
 8001216:	4616      	mov	r6, r2
 8001218:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800121a:	6821      	ldr	r1, [r4, #0]
 800121c:	69ca      	ldr	r2, [r1, #28]
 800121e:	ea37 0302 	bics.w	r3, r7, r2
 8001222:	bf0c      	ite	eq
 8001224:	2201      	moveq	r2, #1
 8001226:	2200      	movne	r2, #0
 8001228:	42b2      	cmp	r2, r6
 800122a:	d002      	beq.n	8001232 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800122c:	2000      	movs	r0, #0
}
 800122e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001232:	1c6b      	adds	r3, r5, #1
 8001234:	d0f2      	beq.n	800121c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001236:	b99d      	cbnz	r5, 8001260 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001238:	6823      	ldr	r3, [r4, #0]
 800123a:	681a      	ldr	r2, [r3, #0]
 800123c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001240:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001242:	689a      	ldr	r2, [r3, #8]
 8001244:	f022 0201 	bic.w	r2, r2, #1
 8001248:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800124a:	2320      	movs	r3, #32
 800124c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001250:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001254:	2300      	movs	r3, #0
 8001256:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800125a:	2003      	movs	r0, #3
 800125c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001260:	f7fe fff4 	bl	800024c <HAL_GetTick>
 8001264:	eba0 0008 	sub.w	r0, r0, r8
 8001268:	4285      	cmp	r5, r0
 800126a:	d2d6      	bcs.n	800121a <UART_WaitOnFlagUntilTimeout+0xe>
 800126c:	e7e4      	b.n	8001238 <UART_WaitOnFlagUntilTimeout+0x2c>

0800126e <UART_CheckIdleState>:
{
 800126e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001270:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001272:	2600      	movs	r6, #0
 8001274:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001276:	f7fe ffe9 	bl	800024c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800127a:	6823      	ldr	r3, [r4, #0]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001280:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001282:	d417      	bmi.n	80012b4 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001284:	6823      	ldr	r3, [r4, #0]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	075b      	lsls	r3, r3, #29
 800128a:	d50a      	bpl.n	80012a2 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800128c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001290:	9300      	str	r3, [sp, #0]
 8001292:	2200      	movs	r2, #0
 8001294:	462b      	mov	r3, r5
 8001296:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800129a:	4620      	mov	r0, r4
 800129c:	f7ff ffb6 	bl	800120c <UART_WaitOnFlagUntilTimeout>
 80012a0:	b9a0      	cbnz	r0, 80012cc <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 80012a2:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 80012a4:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 80012a6:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 80012aa:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80012ae:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80012b2:	e00c      	b.n	80012ce <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80012b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80012b8:	9300      	str	r3, [sp, #0]
 80012ba:	4632      	mov	r2, r6
 80012bc:	4603      	mov	r3, r0
 80012be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80012c2:	4620      	mov	r0, r4
 80012c4:	f7ff ffa2 	bl	800120c <UART_WaitOnFlagUntilTimeout>
 80012c8:	2800      	cmp	r0, #0
 80012ca:	d0db      	beq.n	8001284 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80012cc:	2003      	movs	r0, #3
}
 80012ce:	b002      	add	sp, #8
 80012d0:	bd70      	pop	{r4, r5, r6, pc}

080012d2 <HAL_UART_Init>:
{
 80012d2:	b510      	push	{r4, lr}
  if(huart == NULL)
 80012d4:	4604      	mov	r4, r0
 80012d6:	b360      	cbz	r0, 8001332 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80012d8:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80012dc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012e0:	b91b      	cbnz	r3, 80012ea <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80012e2:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80012e6:	f000 f923 	bl	8001530 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80012ea:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80012ec:	2324      	movs	r3, #36	; 0x24
 80012ee:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80012f2:	6813      	ldr	r3, [r2, #0]
 80012f4:	f023 0301 	bic.w	r3, r3, #1
 80012f8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80012fa:	4620      	mov	r0, r4
 80012fc:	f7ff fe8c 	bl	8001018 <UART_SetConfig>
 8001300:	2801      	cmp	r0, #1
 8001302:	d016      	beq.n	8001332 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001304:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001306:	b113      	cbz	r3, 800130e <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001308:	4620      	mov	r0, r4
 800130a:	f7ff ff2b 	bl	8001164 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800130e:	6823      	ldr	r3, [r4, #0]
 8001310:	685a      	ldr	r2, [r3, #4]
 8001312:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001316:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001318:	689a      	ldr	r2, [r3, #8]
 800131a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800131e:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001320:	681a      	ldr	r2, [r3, #0]
 8001322:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001326:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001328:	601a      	str	r2, [r3, #0]
}
 800132a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 800132e:	f7ff bf9e 	b.w	800126e <UART_CheckIdleState>
}
 8001332:	2001      	movs	r0, #1
 8001334:	bd10      	pop	{r4, pc}

08001336 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001336:	b510      	push	{r4, lr}
 8001338:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	2228      	movs	r2, #40	; 0x28
 800133c:	2100      	movs	r1, #0
 800133e:	a806      	add	r0, sp, #24
 8001340:	f000 f9ce 	bl	80016e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001344:	2214      	movs	r2, #20
 8001346:	2100      	movs	r1, #0
 8001348:	a801      	add	r0, sp, #4
 800134a:	f000 f9c9 	bl	80016e0 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800134e:	2301      	movs	r3, #1
 8001350:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001352:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001354:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001356:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001358:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800135a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800135e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001360:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001362:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001364:	f7ff f8b6 	bl	80004d4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001368:	230f      	movs	r3, #15
 800136a:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800136c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001370:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001372:	4621      	mov	r1, r4
 8001374:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001376:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001378:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800137a:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800137c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800137e:	f7ff fb51 	bl	8000a24 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001382:	b010      	add	sp, #64	; 0x40
 8001384:	bd10      	pop	{r4, pc}
	...

08001388 <main>:
{
 8001388:	b500      	push	{lr}
 800138a:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 800138c:	f7fe ff40 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 8001390:	f7ff ffd1 	bl	8001336 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001394:	2214      	movs	r2, #20
 8001396:	2100      	movs	r1, #0
 8001398:	a807      	add	r0, sp, #28
 800139a:	f000 f9a1 	bl	80016e0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800139e:	4b39      	ldr	r3, [pc, #228]	; (8001484 <main+0xfc>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80013a0:	4839      	ldr	r0, [pc, #228]	; (8001488 <main+0x100>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013a2:	695a      	ldr	r2, [r3, #20]
  htim2.Instance = TIM2;
 80013a4:	4d39      	ldr	r5, [pc, #228]	; (800148c <main+0x104>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013a6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80013aa:	615a      	str	r2, [r3, #20]
 80013ac:	695a      	ldr	r2, [r3, #20]
 80013ae:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80013b2:	9201      	str	r2, [sp, #4]
 80013b4:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013b6:	695a      	ldr	r2, [r3, #20]
 80013b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80013bc:	615a      	str	r2, [r3, #20]
 80013be:	695a      	ldr	r2, [r3, #20]
 80013c0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80013c4:	9202      	str	r2, [sp, #8]
 80013c6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c8:	695a      	ldr	r2, [r3, #20]
 80013ca:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80013ce:	615a      	str	r2, [r3, #20]
 80013d0:	695b      	ldr	r3, [r3, #20]
 80013d2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80013d6:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013d8:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80013da:	2108      	movs	r1, #8

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013dc:	2401      	movs	r4, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013de:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80013e0:	f7ff f862 	bl	80004a8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013e4:	4b2a      	ldr	r3, [pc, #168]	; (8001490 <main+0x108>)
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80013e6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013e8:	a907      	add	r1, sp, #28
 80013ea:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ee:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80013f0:	9409      	str	r4, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013f2:	f7fe ff99 	bl	8000328 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80013f6:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013f8:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80013fa:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013fc:	2400      	movs	r4, #0
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80013fe:	4822      	ldr	r0, [pc, #136]	; (8001488 <main+0x100>)
  GPIO_InitStruct.Pin = LD3_Pin;
 8001400:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001402:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001404:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001406:	f7fe ff8f 	bl	8000328 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800140a:	4621      	mov	r1, r4
 800140c:	4622      	mov	r2, r4
 800140e:	2006      	movs	r0, #6
 8001410:	f7fe ff34 	bl	800027c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001414:	2006      	movs	r0, #6
 8001416:	f7fe ff65 	bl	80002e4 <HAL_NVIC_EnableIRQ>
  huart2.Instance = USART2;
 800141a:	481e      	ldr	r0, [pc, #120]	; (8001494 <main+0x10c>)
  huart2.Init.BaudRate = 38400;
 800141c:	4a1e      	ldr	r2, [pc, #120]	; (8001498 <main+0x110>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800141e:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 8001420:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001424:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001428:	230c      	movs	r3, #12
 800142a:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800142c:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800142e:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001430:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001432:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001434:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001436:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001438:	f7ff ff4b 	bl	80012d2 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800143c:	2210      	movs	r2, #16
 800143e:	4621      	mov	r1, r4
 8001440:	a807      	add	r0, sp, #28
 8001442:	f000 f94d 	bl	80016e0 <memset>
  htim2.Init.Prescaler = 31999;
 8001446:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800144a:	f647 43ff 	movw	r3, #31999	; 0x7cff
 800144e:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001452:	4628      	mov	r0, r5
  htim2.Init.Period = 60;
 8001454:	233c      	movs	r3, #60	; 0x3c
 8001456:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001458:	9404      	str	r4, [sp, #16]
 800145a:	9405      	str	r4, [sp, #20]
 800145c:	9406      	str	r4, [sp, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145e:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001460:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001462:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001464:	f7ff fcd8 	bl	8000e18 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001468:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800146c:	a907      	add	r1, sp, #28
 800146e:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001470:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001472:	f7ff fcf5 	bl	8000e60 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001476:	a904      	add	r1, sp, #16
 8001478:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147a:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147c:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800147e:	f7ff fda5 	bl	8000fcc <HAL_TIMEx_MasterConfigSynchronization>
 8001482:	e7fe      	b.n	8001482 <main+0xfa>
 8001484:	40021000 	.word	0x40021000
 8001488:	48000400 	.word	0x48000400
 800148c:	20000030 	.word	0x20000030
 8001490:	10110000 	.word	0x10110000
 8001494:	20000070 	.word	0x20000070
 8001498:	40004400 	.word	0x40004400

0800149c <blink>:

}

/* USER CODE BEGIN 4 */
void blink(void)
{
 800149c:	b510      	push	{r4, lr}
	static uint8_t tim2_ready = 0;
	if (tim2_ready) {
 800149e:	4c08      	ldr	r4, [pc, #32]	; (80014c0 <blink+0x24>)
 80014a0:	7822      	ldrb	r2, [r4, #0]
 80014a2:	b14a      	cbz	r2, 80014b8 <blink+0x1c>
		if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
 80014a4:	2101      	movs	r1, #1
 80014a6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014aa:	f7fe fff7 	bl	800049c <HAL_GPIO_ReadPin>
 80014ae:	b118      	cbz	r0, 80014b8 <blink+0x1c>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80014b0:	2108      	movs	r1, #8
 80014b2:	4804      	ldr	r0, [pc, #16]	; (80014c4 <blink+0x28>)
 80014b4:	f7fe fffd 	bl	80004b2 <HAL_GPIO_TogglePin>
		}
	}
	tim2_ready = 1;
 80014b8:	2301      	movs	r3, #1
 80014ba:	7023      	strb	r3, [r4, #0]
 80014bc:	bd10      	pop	{r4, pc}
 80014be:	bf00      	nop
 80014c0:	20000028 	.word	0x20000028
 80014c4:	48000400 	.word	0x48000400

080014c8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014c8:	4b0a      	ldr	r3, [pc, #40]	; (80014f4 <HAL_MspInit+0x2c>)
 80014ca:	699a      	ldr	r2, [r3, #24]
 80014cc:	f042 0201 	orr.w	r2, r2, #1
 80014d0:	619a      	str	r2, [r3, #24]
 80014d2:	699a      	ldr	r2, [r3, #24]
{
 80014d4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014d6:	f002 0201 	and.w	r2, r2, #1
 80014da:	9200      	str	r2, [sp, #0]
 80014dc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014de:	69da      	ldr	r2, [r3, #28]
 80014e0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80014e4:	61da      	str	r2, [r3, #28]
 80014e6:	69db      	ldr	r3, [r3, #28]
 80014e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014ec:	9301      	str	r3, [sp, #4]
 80014ee:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014f0:	b002      	add	sp, #8
 80014f2:	4770      	bx	lr
 80014f4:	40021000 	.word	0x40021000

080014f8 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 80014f8:	6803      	ldr	r3, [r0, #0]
 80014fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 80014fe:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8001500:	d112      	bne.n	8001528 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001502:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001506:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001508:	69da      	ldr	r2, [r3, #28]
 800150a:	f042 0201 	orr.w	r2, r2, #1
 800150e:	61da      	str	r2, [r3, #28]
 8001510:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001512:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001514:	f003 0301 	and.w	r3, r3, #1
 8001518:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800151a:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 800151c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800151e:	f7fe fead 	bl	800027c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001522:	201c      	movs	r0, #28
 8001524:	f7fe fede 	bl	80002e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001528:	b003      	add	sp, #12
 800152a:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001530:	b510      	push	{r4, lr}
 8001532:	4604      	mov	r4, r0
 8001534:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001536:	2214      	movs	r2, #20
 8001538:	2100      	movs	r1, #0
 800153a:	a803      	add	r0, sp, #12
 800153c:	f000 f8d0 	bl	80016e0 <memset>
  if(huart->Instance==USART2)
 8001540:	6822      	ldr	r2, [r4, #0]
 8001542:	4b13      	ldr	r3, [pc, #76]	; (8001590 <HAL_UART_MspInit+0x60>)
 8001544:	429a      	cmp	r2, r3
 8001546:	d121      	bne.n	800158c <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001548:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800154c:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800154e:	69da      	ldr	r2, [r3, #28]
 8001550:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001554:	61da      	str	r2, [r3, #28]
 8001556:	69da      	ldr	r2, [r3, #28]
 8001558:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800155c:	9201      	str	r2, [sp, #4]
 800155e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	695a      	ldr	r2, [r3, #20]
 8001562:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	695b      	ldr	r3, [r3, #20]
 800156a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156e:	9302      	str	r3, [sp, #8]
 8001570:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001572:	f248 0304 	movw	r3, #32772	; 0x8004
 8001576:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800157c:	2303      	movs	r3, #3
 800157e:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001584:	2307      	movs	r3, #7
 8001586:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f7fe fece 	bl	8000328 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800158c:	b008      	add	sp, #32
 800158e:	bd10      	pop	{r4, pc}
 8001590:	40004400 	.word	0x40004400

08001594 <NMI_Handler>:
 8001594:	4770      	bx	lr

08001596 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001596:	e7fe      	b.n	8001596 <HardFault_Handler>

08001598 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001598:	e7fe      	b.n	8001598 <MemManage_Handler>

0800159a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800159a:	e7fe      	b.n	800159a <BusFault_Handler>

0800159c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800159c:	e7fe      	b.n	800159c <UsageFault_Handler>

0800159e <SVC_Handler>:
 800159e:	4770      	bx	lr

080015a0 <DebugMon_Handler>:
 80015a0:	4770      	bx	lr

080015a2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015a2:	4770      	bx	lr

080015a4 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015a4:	f7fe be46 	b.w	8000234 <HAL_IncTick>

080015a8 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line 0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80015a8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI0_IRQn 0 */
	HAL_TIM_Base_Start_IT(&htim2);
 80015aa:	4804      	ldr	r0, [pc, #16]	; (80015bc <EXTI0_IRQHandler+0x14>)
 80015ac:	f7ff fb14 	bl	8000bd8 <HAL_TIM_Base_Start_IT>
  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80015b0:	2001      	movs	r0, #1
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 80015b2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 80015b6:	f7fe bf81 	b.w	80004bc <HAL_GPIO_EXTI_IRQHandler>
 80015ba:	bf00      	nop
 80015bc:	20000030 	.word	0x20000030

080015c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80015c0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
	blink();
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80015c2:	4c05      	ldr	r4, [pc, #20]	; (80015d8 <TIM2_IRQHandler+0x18>)
	blink();
 80015c4:	f7ff ff6a 	bl	800149c <blink>
  HAL_TIM_IRQHandler(&htim2);
 80015c8:	4620      	mov	r0, r4
 80015ca:	f7ff fb2a 	bl	8000c22 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  HAL_TIM_Base_Stop_IT(&htim2);
 80015ce:	4620      	mov	r0, r4
  /* USER CODE END TIM2_IRQn 1 */
}
 80015d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_TIM_Base_Stop_IT(&htim2);
 80015d4:	f7ff bb0b 	b.w	8000bee <HAL_TIM_Base_Stop_IT>
 80015d8:	20000030 	.word	0x20000030

080015dc <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015dc:	4915      	ldr	r1, [pc, #84]	; (8001634 <SystemInit+0x58>)
 80015de:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80015e2:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80015ea:	4b13      	ldr	r3, [pc, #76]	; (8001638 <SystemInit+0x5c>)
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	f042 0201 	orr.w	r2, r2, #1
 80015f2:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80015f4:	6858      	ldr	r0, [r3, #4]
 80015f6:	4a11      	ldr	r2, [pc, #68]	; (800163c <SystemInit+0x60>)
 80015f8:	4002      	ands	r2, r0
 80015fa:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80015fc:	681a      	ldr	r2, [r3, #0]
 80015fe:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001602:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001606:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800160e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001610:	685a      	ldr	r2, [r3, #4]
 8001612:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001616:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001618:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800161a:	f022 020f 	bic.w	r2, r2, #15
 800161e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001620:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001622:	4a07      	ldr	r2, [pc, #28]	; (8001640 <SystemInit+0x64>)
 8001624:	4002      	ands	r2, r0
 8001626:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001628:	2200      	movs	r2, #0
 800162a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800162c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001630:	608b      	str	r3, [r1, #8]
 8001632:	4770      	bx	lr
 8001634:	e000ed00 	.word	0xe000ed00
 8001638:	40021000 	.word	0x40021000
 800163c:	f87fc00c 	.word	0xf87fc00c
 8001640:	ff00fccc 	.word	0xff00fccc

08001644 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001644:	f8df d034 	ldr.w	sp, [pc, #52]	; 800167c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001648:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800164a:	e003      	b.n	8001654 <LoopCopyDataInit>

0800164c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800164c:	4b0c      	ldr	r3, [pc, #48]	; (8001680 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800164e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001650:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001652:	3104      	adds	r1, #4

08001654 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001654:	480b      	ldr	r0, [pc, #44]	; (8001684 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001656:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001658:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800165a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800165c:	d3f6      	bcc.n	800164c <CopyDataInit>
	ldr	r2, =_sbss
 800165e:	4a0b      	ldr	r2, [pc, #44]	; (800168c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001660:	e002      	b.n	8001668 <LoopFillZerobss>

08001662 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001662:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001664:	f842 3b04 	str.w	r3, [r2], #4

08001668 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <LoopForever+0x16>)
	cmp	r2, r3
 800166a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800166c:	d3f9      	bcc.n	8001662 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800166e:	f7ff ffb5 	bl	80015dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001672:	f000 f811 	bl	8001698 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001676:	f7ff fe87 	bl	8001388 <main>

0800167a <LoopForever>:

LoopForever:
    b LoopForever
 800167a:	e7fe      	b.n	800167a <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800167c:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001680:	0800174c 	.word	0x0800174c
	ldr	r0, =_sdata
 8001684:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001688:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800168c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001690:	200000e0 	.word	0x200000e0

08001694 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001694:	e7fe      	b.n	8001694 <ADC1_2_IRQHandler>
	...

08001698 <__libc_init_array>:
 8001698:	b570      	push	{r4, r5, r6, lr}
 800169a:	4e0d      	ldr	r6, [pc, #52]	; (80016d0 <__libc_init_array+0x38>)
 800169c:	4c0d      	ldr	r4, [pc, #52]	; (80016d4 <__libc_init_array+0x3c>)
 800169e:	1ba4      	subs	r4, r4, r6
 80016a0:	10a4      	asrs	r4, r4, #2
 80016a2:	2500      	movs	r5, #0
 80016a4:	42a5      	cmp	r5, r4
 80016a6:	d109      	bne.n	80016bc <__libc_init_array+0x24>
 80016a8:	4e0b      	ldr	r6, [pc, #44]	; (80016d8 <__libc_init_array+0x40>)
 80016aa:	4c0c      	ldr	r4, [pc, #48]	; (80016dc <__libc_init_array+0x44>)
 80016ac:	f000 f820 	bl	80016f0 <_init>
 80016b0:	1ba4      	subs	r4, r4, r6
 80016b2:	10a4      	asrs	r4, r4, #2
 80016b4:	2500      	movs	r5, #0
 80016b6:	42a5      	cmp	r5, r4
 80016b8:	d105      	bne.n	80016c6 <__libc_init_array+0x2e>
 80016ba:	bd70      	pop	{r4, r5, r6, pc}
 80016bc:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016c0:	4798      	blx	r3
 80016c2:	3501      	adds	r5, #1
 80016c4:	e7ee      	b.n	80016a4 <__libc_init_array+0xc>
 80016c6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80016ca:	4798      	blx	r3
 80016cc:	3501      	adds	r5, #1
 80016ce:	e7f2      	b.n	80016b6 <__libc_init_array+0x1e>
 80016d0:	08001744 	.word	0x08001744
 80016d4:	08001744 	.word	0x08001744
 80016d8:	08001744 	.word	0x08001744
 80016dc:	08001748 	.word	0x08001748

080016e0 <memset>:
 80016e0:	4402      	add	r2, r0
 80016e2:	4603      	mov	r3, r0
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d100      	bne.n	80016ea <memset+0xa>
 80016e8:	4770      	bx	lr
 80016ea:	f803 1b01 	strb.w	r1, [r3], #1
 80016ee:	e7f9      	b.n	80016e4 <memset+0x4>

080016f0 <_init>:
 80016f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016f2:	bf00      	nop
 80016f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016f6:	bc08      	pop	{r3}
 80016f8:	469e      	mov	lr, r3
 80016fa:	4770      	bx	lr

080016fc <_fini>:
 80016fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016fe:	bf00      	nop
 8001700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001702:	bc08      	pop	{r3}
 8001704:	469e      	mov	lr, r3
 8001706:	4770      	bx	lr
