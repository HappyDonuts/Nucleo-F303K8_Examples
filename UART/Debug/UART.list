
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001cf4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08001e84  08001e84  00011e84  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001efc  08001efc  00011efc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001f00  08001f00  00011f00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08001f04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  7 .bss          000000a0  20000070  20000070  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000110  20000110  00020070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000db3f  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e52  00000000  00000000  0002dbdf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000337d  00000000  00000000  0002fa31  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000005c0  00000000  00000000  00032db0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000858  00000000  00000000  00033370  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000039d2  00000000  00000000  00033bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000024a5  00000000  00000000  0003759a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00039a3f  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001204  00000000  00000000  00039abc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08001e6c 	.word	0x08001e6c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	08001e6c 	.word	0x08001e6c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000270:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000272:	4a0e      	ldr	r2, [pc, #56]	; (80002ac <HAL_InitTick+0x3c>)
 8000274:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <HAL_InitTick+0x40>)
{
 8000276:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000278:	7818      	ldrb	r0, [r3, #0]
 800027a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000282:	6810      	ldr	r0, [r2, #0]
 8000284:	fbb0 f0f3 	udiv	r0, r0, r3
 8000288:	f000 f8a0 	bl	80003cc <HAL_SYSTICK_Config>
 800028c:	4604      	mov	r4, r0
 800028e:	b958      	cbnz	r0, 80002a8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000290:	2d0f      	cmp	r5, #15
 8000292:	d809      	bhi.n	80002a8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000294:	4602      	mov	r2, r0
 8000296:	4629      	mov	r1, r5
 8000298:	f04f 30ff 	mov.w	r0, #4294967295
 800029c:	f000 f856 	bl	800034c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <HAL_InitTick+0x44>)
 80002a2:	4620      	mov	r0, r4
 80002a4:	601d      	str	r5, [r3, #0]
 80002a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80002a8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80002aa:	bd38      	pop	{r3, r4, r5, pc}
 80002ac:	20000008 	.word	0x20000008
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000004 	.word	0x20000004

080002b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002b8:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <HAL_Init+0x20>)
{
 80002ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002bc:	6813      	ldr	r3, [r2, #0]
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002c4:	2003      	movs	r0, #3
 80002c6:	f000 f82f 	bl	8000328 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ca:	2000      	movs	r0, #0
 80002cc:	f7ff ffd0 	bl	8000270 <HAL_InitTick>
  HAL_MspInit();
 80002d0:	f001 f8b4 	bl	800143c <HAL_MspInit>
}
 80002d4:	2000      	movs	r0, #0
 80002d6:	bd08      	pop	{r3, pc}
 80002d8:	40022000 	.word	0x40022000

080002dc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002dc:	4a03      	ldr	r2, [pc, #12]	; (80002ec <HAL_IncTick+0x10>)
 80002de:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <HAL_IncTick+0x14>)
 80002e0:	6811      	ldr	r1, [r2, #0]
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	440b      	add	r3, r1
 80002e6:	6013      	str	r3, [r2, #0]
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	20000098 	.word	0x20000098
 80002f0:	20000000 	.word	0x20000000

080002f4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80002f4:	4b01      	ldr	r3, [pc, #4]	; (80002fc <HAL_GetTick+0x8>)
 80002f6:	6818      	ldr	r0, [r3, #0]
}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000098 	.word	0x20000098

08000300 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000300:	b538      	push	{r3, r4, r5, lr}
 8000302:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000304:	f7ff fff6 	bl	80002f4 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000308:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 800030a:	bf1c      	itt	ne
 800030c:	4b05      	ldrne	r3, [pc, #20]	; (8000324 <HAL_Delay+0x24>)
 800030e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000310:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000312:	bf18      	it	ne
 8000314:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000316:	f7ff ffed 	bl	80002f4 <HAL_GetTick>
 800031a:	1b40      	subs	r0, r0, r5
 800031c:	4284      	cmp	r4, r0
 800031e:	d8fa      	bhi.n	8000316 <HAL_Delay+0x16>
  {
  }
}
 8000320:	bd38      	pop	{r3, r4, r5, pc}
 8000322:	bf00      	nop
 8000324:	20000000 	.word	0x20000000

08000328 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000328:	4a07      	ldr	r2, [pc, #28]	; (8000348 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800032a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800032c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000330:	041b      	lsls	r3, r3, #16
 8000332:	0c1b      	lsrs	r3, r3, #16
 8000334:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000338:	0200      	lsls	r0, r0, #8
 800033a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800033e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000342:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000344:	60d3      	str	r3, [r2, #12]
 8000346:	4770      	bx	lr
 8000348:	e000ed00 	.word	0xe000ed00

0800034c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800034c:	4b17      	ldr	r3, [pc, #92]	; (80003ac <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800034e:	b530      	push	{r4, r5, lr}
 8000350:	68dc      	ldr	r4, [r3, #12]
 8000352:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000356:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800035a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800035c:	2b04      	cmp	r3, #4
 800035e:	bf28      	it	cs
 8000360:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000362:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000364:	f04f 0501 	mov.w	r5, #1
 8000368:	fa05 f303 	lsl.w	r3, r5, r3
 800036c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000370:	bf8c      	ite	hi
 8000372:	3c03      	subhi	r4, #3
 8000374:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000376:	4019      	ands	r1, r3
 8000378:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800037a:	fa05 f404 	lsl.w	r4, r5, r4
 800037e:	3c01      	subs	r4, #1
 8000380:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000382:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000384:	ea42 0201 	orr.w	r2, r2, r1
 8000388:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800038c:	bfaf      	iteee	ge
 800038e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000392:	f000 000f 	andlt.w	r0, r0, #15
 8000396:	4b06      	ldrlt	r3, [pc, #24]	; (80003b0 <HAL_NVIC_SetPriority+0x64>)
 8000398:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800039a:	bfa5      	ittet	ge
 800039c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80003a0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003a4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	bf00      	nop
 80003ac:	e000ed00 	.word	0xe000ed00
 80003b0:	e000ed14 	.word	0xe000ed14

080003b4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80003b4:	0942      	lsrs	r2, r0, #5
 80003b6:	2301      	movs	r3, #1
 80003b8:	f000 001f 	and.w	r0, r0, #31
 80003bc:	fa03 f000 	lsl.w	r0, r3, r0
 80003c0:	4b01      	ldr	r3, [pc, #4]	; (80003c8 <HAL_NVIC_EnableIRQ+0x14>)
 80003c2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80003c6:	4770      	bx	lr
 80003c8:	e000e100 	.word	0xe000e100

080003cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003cc:	3801      	subs	r0, #1
 80003ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003d2:	d20a      	bcs.n	80003ea <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003d4:	4b06      	ldr	r3, [pc, #24]	; (80003f0 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003d6:	4a07      	ldr	r2, [pc, #28]	; (80003f4 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003d8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003da:	21f0      	movs	r1, #240	; 0xf0
 80003dc:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003e0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003e4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003e6:	601a      	str	r2, [r3, #0]
 80003e8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003ea:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003ec:	4770      	bx	lr
 80003ee:	bf00      	nop
 80003f0:	e000e010 	.word	0xe000e010
 80003f4:	e000ed00 	.word	0xe000ed00

080003f8 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80003f8:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 80003fc:	2a02      	cmp	r2, #2
{  
 80003fe:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000400:	d003      	beq.n	800040a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000402:	2204      	movs	r2, #4
 8000404:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000406:	2001      	movs	r0, #1
 8000408:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800040a:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 800040c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 800040e:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000410:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000412:	f021 010e 	bic.w	r1, r1, #14
 8000416:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000418:	6811      	ldr	r1, [r2, #0]
 800041a:	f021 0101 	bic.w	r1, r1, #1
 800041e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000420:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000422:	2101      	movs	r1, #1
 8000424:	fa01 f202 	lsl.w	r2, r1, r2
 8000428:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 800042a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 800042c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000430:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000434:	b113      	cbz	r3, 800043c <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000436:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000438:	4620      	mov	r0, r4
 800043a:	bd10      	pop	{r4, pc}
 800043c:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 800043e:	bd10      	pop	{r4, pc}

08000440 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000440:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000444:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000446:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000448:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80005b0 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800044c:	4a56      	ldr	r2, [pc, #344]	; (80005a8 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800044e:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000450:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000454:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000456:	9c01      	ldr	r4, [sp, #4]
 8000458:	40dc      	lsrs	r4, r3
 800045a:	d102      	bne.n	8000462 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 800045c:	b005      	add	sp, #20
 800045e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000462:	2401      	movs	r4, #1
 8000464:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000468:	9c01      	ldr	r4, [sp, #4]
 800046a:	ea14 050a 	ands.w	r5, r4, sl
 800046e:	f000 8093 	beq.w	8000598 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000472:	684c      	ldr	r4, [r1, #4]
 8000474:	f024 0b10 	bic.w	fp, r4, #16
 8000478:	f1bb 0f02 	cmp.w	fp, #2
 800047c:	d111      	bne.n	80004a2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800047e:	08df      	lsrs	r7, r3, #3
 8000480:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000484:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000488:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800048a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800048e:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000492:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000496:	690e      	ldr	r6, [r1, #16]
 8000498:	fa06 f60e 	lsl.w	r6, r6, lr
 800049c:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 80004a0:	623e      	str	r6, [r7, #32]
 80004a2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004a6:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80004a8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004aa:	fa07 f70c 	lsl.w	r7, r7, ip
 80004ae:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004b0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004b4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004b6:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004ba:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004be:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004c2:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80004c6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004c8:	d811      	bhi.n	80004ee <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80004ca:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004cc:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004d0:	68ce      	ldr	r6, [r1, #12]
 80004d2:	fa06 fe0c 	lsl.w	lr, r6, ip
 80004d6:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80004da:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80004dc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004de:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004e2:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80004e6:	409e      	lsls	r6, r3
 80004e8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80004ec:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80004ee:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004f0:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80004f2:	688e      	ldr	r6, [r1, #8]
 80004f4:	fa06 f60c 	lsl.w	r6, r6, ip
 80004f8:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004fa:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80004fc:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004fe:	d54b      	bpl.n	8000598 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000500:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000504:	f046 0601 	orr.w	r6, r6, #1
 8000508:	f8c8 6018 	str.w	r6, [r8, #24]
 800050c:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000510:	f023 0703 	bic.w	r7, r3, #3
 8000514:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000518:	f006 0601 	and.w	r6, r6, #1
 800051c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000520:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000522:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000526:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000528:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800052a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800052e:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000532:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000536:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800053a:	d02f      	beq.n	800059c <HAL_GPIO_Init+0x15c>
 800053c:	4e1b      	ldr	r6, [pc, #108]	; (80005ac <HAL_GPIO_Init+0x16c>)
 800053e:	42b0      	cmp	r0, r6
 8000540:	d02e      	beq.n	80005a0 <HAL_GPIO_Init+0x160>
 8000542:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000546:	42b0      	cmp	r0, r6
 8000548:	d02c      	beq.n	80005a4 <HAL_GPIO_Init+0x164>
 800054a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800054e:	42b0      	cmp	r0, r6
 8000550:	bf14      	ite	ne
 8000552:	2605      	movne	r6, #5
 8000554:	2603      	moveq	r6, #3
 8000556:	fa06 f60e 	lsl.w	r6, r6, lr
 800055a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800055e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000560:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000562:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000564:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000568:	bf0c      	ite	eq
 800056a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800056c:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 800056e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000570:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000572:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000576:	bf0c      	ite	eq
 8000578:	403e      	andeq	r6, r7
          temp |= iocurrent;
 800057a:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 800057c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800057e:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000580:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000584:	bf0c      	ite	eq
 8000586:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000588:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 800058a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 800058c:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800058e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000590:	bf54      	ite	pl
 8000592:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000594:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000596:	60d6      	str	r6, [r2, #12]
    position++;
 8000598:	3301      	adds	r3, #1
 800059a:	e75c      	b.n	8000456 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800059c:	2600      	movs	r6, #0
 800059e:	e7da      	b.n	8000556 <HAL_GPIO_Init+0x116>
 80005a0:	2601      	movs	r6, #1
 80005a2:	e7d8      	b.n	8000556 <HAL_GPIO_Init+0x116>
 80005a4:	2602      	movs	r6, #2
 80005a6:	e7d6      	b.n	8000556 <HAL_GPIO_Init+0x116>
 80005a8:	40010400 	.word	0x40010400
 80005ac:	48000400 	.word	0x48000400
 80005b0:	40021000 	.word	0x40021000

080005b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005b4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80005b8:	4605      	mov	r5, r0
 80005ba:	b918      	cbnz	r0, 80005c4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80005bc:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80005be:	b002      	add	sp, #8
 80005c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005c4:	6803      	ldr	r3, [r0, #0]
 80005c6:	07da      	lsls	r2, r3, #31
 80005c8:	d411      	bmi.n	80005ee <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005ca:	682b      	ldr	r3, [r5, #0]
 80005cc:	079b      	lsls	r3, r3, #30
 80005ce:	f100 8085 	bmi.w	80006dc <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005d2:	682b      	ldr	r3, [r5, #0]
 80005d4:	071c      	lsls	r4, r3, #28
 80005d6:	f100 80f6 	bmi.w	80007c6 <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005da:	682b      	ldr	r3, [r5, #0]
 80005dc:	0758      	lsls	r0, r3, #29
 80005de:	f100 813f 	bmi.w	8000860 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005e2:	69ea      	ldr	r2, [r5, #28]
 80005e4:	2a00      	cmp	r2, #0
 80005e6:	f040 81d6 	bne.w	8000996 <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 80005ea:	2000      	movs	r0, #0
 80005ec:	e7e7      	b.n	80005be <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005ee:	4cba      	ldr	r4, [pc, #744]	; (80008d8 <HAL_RCC_OscConfig+0x324>)
 80005f0:	6863      	ldr	r3, [r4, #4]
 80005f2:	f003 030c 	and.w	r3, r3, #12
 80005f6:	2b04      	cmp	r3, #4
 80005f8:	d007      	beq.n	800060a <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005fa:	6863      	ldr	r3, [r4, #4]
 80005fc:	f003 030c 	and.w	r3, r3, #12
 8000600:	2b08      	cmp	r3, #8
 8000602:	d116      	bne.n	8000632 <HAL_RCC_OscConfig+0x7e>
 8000604:	6863      	ldr	r3, [r4, #4]
 8000606:	03df      	lsls	r7, r3, #15
 8000608:	d513      	bpl.n	8000632 <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800060a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800060e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000612:	6821      	ldr	r1, [r4, #0]
 8000614:	fa93 f3a3 	rbit	r3, r3
 8000618:	fab3 f383 	clz	r3, r3
 800061c:	f003 031f 	and.w	r3, r3, #31
 8000620:	2201      	movs	r2, #1
 8000622:	fa02 f303 	lsl.w	r3, r2, r3
 8000626:	420b      	tst	r3, r1
 8000628:	d0cf      	beq.n	80005ca <HAL_RCC_OscConfig+0x16>
 800062a:	686b      	ldr	r3, [r5, #4]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d1cc      	bne.n	80005ca <HAL_RCC_OscConfig+0x16>
 8000630:	e7c4      	b.n	80005bc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000632:	686a      	ldr	r2, [r5, #4]
 8000634:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000638:	d125      	bne.n	8000686 <HAL_RCC_OscConfig+0xd2>
 800063a:	6823      	ldr	r3, [r4, #0]
 800063c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000640:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000642:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000644:	68a9      	ldr	r1, [r5, #8]
 8000646:	f023 030f 	bic.w	r3, r3, #15
 800064a:	430b      	orrs	r3, r1
 800064c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800064e:	b352      	cbz	r2, 80006a6 <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000650:	f7ff fe50 	bl	80002f4 <HAL_GetTick>
 8000654:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000658:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800065a:	2701      	movs	r7, #1
 800065c:	fa96 f3a6 	rbit	r3, r6
 8000660:	6822      	ldr	r2, [r4, #0]
 8000662:	fa96 f3a6 	rbit	r3, r6
 8000666:	fab3 f383 	clz	r3, r3
 800066a:	f003 031f 	and.w	r3, r3, #31
 800066e:	fa07 f303 	lsl.w	r3, r7, r3
 8000672:	4213      	tst	r3, r2
 8000674:	d1a9      	bne.n	80005ca <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000676:	f7ff fe3d 	bl	80002f4 <HAL_GetTick>
 800067a:	eba0 0008 	sub.w	r0, r0, r8
 800067e:	2864      	cmp	r0, #100	; 0x64
 8000680:	d9ec      	bls.n	800065c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 8000682:	2003      	movs	r0, #3
 8000684:	e79b      	b.n	80005be <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000686:	6823      	ldr	r3, [r4, #0]
 8000688:	b932      	cbnz	r2, 8000698 <HAL_RCC_OscConfig+0xe4>
 800068a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800068e:	6023      	str	r3, [r4, #0]
 8000690:	6823      	ldr	r3, [r4, #0]
 8000692:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000696:	e7d3      	b.n	8000640 <HAL_RCC_OscConfig+0x8c>
 8000698:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 800069c:	d1f5      	bne.n	800068a <HAL_RCC_OscConfig+0xd6>
 800069e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006a2:	6023      	str	r3, [r4, #0]
 80006a4:	e7c9      	b.n	800063a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80006a6:	f7ff fe25 	bl	80002f4 <HAL_GetTick>
 80006aa:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80006ae:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006b0:	2701      	movs	r7, #1
 80006b2:	fa96 f3a6 	rbit	r3, r6
 80006b6:	6822      	ldr	r2, [r4, #0]
 80006b8:	fa96 f3a6 	rbit	r3, r6
 80006bc:	fab3 f383 	clz	r3, r3
 80006c0:	f003 031f 	and.w	r3, r3, #31
 80006c4:	fa07 f303 	lsl.w	r3, r7, r3
 80006c8:	4213      	tst	r3, r2
 80006ca:	f43f af7e 	beq.w	80005ca <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006ce:	f7ff fe11 	bl	80002f4 <HAL_GetTick>
 80006d2:	eba0 0008 	sub.w	r0, r0, r8
 80006d6:	2864      	cmp	r0, #100	; 0x64
 80006d8:	d9eb      	bls.n	80006b2 <HAL_RCC_OscConfig+0xfe>
 80006da:	e7d2      	b.n	8000682 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006dc:	4c7e      	ldr	r4, [pc, #504]	; (80008d8 <HAL_RCC_OscConfig+0x324>)
 80006de:	6863      	ldr	r3, [r4, #4]
 80006e0:	f013 0f0c 	tst.w	r3, #12
 80006e4:	d007      	beq.n	80006f6 <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006e6:	6863      	ldr	r3, [r4, #4]
 80006e8:	f003 030c 	and.w	r3, r3, #12
 80006ec:	2b08      	cmp	r3, #8
 80006ee:	d122      	bne.n	8000736 <HAL_RCC_OscConfig+0x182>
 80006f0:	6863      	ldr	r3, [r4, #4]
 80006f2:	03de      	lsls	r6, r3, #15
 80006f4:	d41f      	bmi.n	8000736 <HAL_RCC_OscConfig+0x182>
 80006f6:	2302      	movs	r3, #2
 80006f8:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006fc:	6821      	ldr	r1, [r4, #0]
 80006fe:	fa93 f3a3 	rbit	r3, r3
 8000702:	fab3 f383 	clz	r3, r3
 8000706:	f003 031f 	and.w	r3, r3, #31
 800070a:	2201      	movs	r2, #1
 800070c:	fa02 f303 	lsl.w	r3, r2, r3
 8000710:	420b      	tst	r3, r1
 8000712:	d003      	beq.n	800071c <HAL_RCC_OscConfig+0x168>
 8000714:	692b      	ldr	r3, [r5, #16]
 8000716:	4293      	cmp	r3, r2
 8000718:	f47f af50 	bne.w	80005bc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800071c:	6821      	ldr	r1, [r4, #0]
 800071e:	23f8      	movs	r3, #248	; 0xf8
 8000720:	fa93 f3a3 	rbit	r3, r3
 8000724:	fab3 f283 	clz	r2, r3
 8000728:	696b      	ldr	r3, [r5, #20]
 800072a:	4093      	lsls	r3, r2
 800072c:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000730:	4313      	orrs	r3, r2
 8000732:	6023      	str	r3, [r4, #0]
 8000734:	e74d      	b.n	80005d2 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000736:	692a      	ldr	r2, [r5, #16]
 8000738:	2601      	movs	r6, #1
 800073a:	b30a      	cbz	r2, 8000780 <HAL_RCC_OscConfig+0x1cc>
 800073c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000740:	fab3 f383 	clz	r3, r3
 8000744:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000748:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800074c:	009b      	lsls	r3, r3, #2
 800074e:	2702      	movs	r7, #2
 8000750:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000752:	f7ff fdcf 	bl	80002f4 <HAL_GetTick>
 8000756:	4680      	mov	r8, r0
 8000758:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800075c:	6822      	ldr	r2, [r4, #0]
 800075e:	fa97 f3a7 	rbit	r3, r7
 8000762:	fab3 f383 	clz	r3, r3
 8000766:	f003 031f 	and.w	r3, r3, #31
 800076a:	fa06 f303 	lsl.w	r3, r6, r3
 800076e:	4213      	tst	r3, r2
 8000770:	d1d4      	bne.n	800071c <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000772:	f7ff fdbf 	bl	80002f4 <HAL_GetTick>
 8000776:	eba0 0008 	sub.w	r0, r0, r8
 800077a:	2802      	cmp	r0, #2
 800077c:	d9ec      	bls.n	8000758 <HAL_RCC_OscConfig+0x1a4>
 800077e:	e780      	b.n	8000682 <HAL_RCC_OscConfig+0xce>
 8000780:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000784:	fab3 f383 	clz	r3, r3
 8000788:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800078c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	2702      	movs	r7, #2
 8000794:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000796:	f7ff fdad 	bl	80002f4 <HAL_GetTick>
 800079a:	4680      	mov	r8, r0
 800079c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007a0:	6822      	ldr	r2, [r4, #0]
 80007a2:	fa97 f3a7 	rbit	r3, r7
 80007a6:	fab3 f383 	clz	r3, r3
 80007aa:	f003 031f 	and.w	r3, r3, #31
 80007ae:	fa06 f303 	lsl.w	r3, r6, r3
 80007b2:	4213      	tst	r3, r2
 80007b4:	f43f af0d 	beq.w	80005d2 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007b8:	f7ff fd9c 	bl	80002f4 <HAL_GetTick>
 80007bc:	eba0 0008 	sub.w	r0, r0, r8
 80007c0:	2802      	cmp	r0, #2
 80007c2:	d9eb      	bls.n	800079c <HAL_RCC_OscConfig+0x1e8>
 80007c4:	e75d      	b.n	8000682 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80007c6:	69aa      	ldr	r2, [r5, #24]
 80007c8:	4e43      	ldr	r6, [pc, #268]	; (80008d8 <HAL_RCC_OscConfig+0x324>)
 80007ca:	4944      	ldr	r1, [pc, #272]	; (80008dc <HAL_RCC_OscConfig+0x328>)
 80007cc:	2401      	movs	r4, #1
 80007ce:	b31a      	cbz	r2, 8000818 <HAL_RCC_OscConfig+0x264>
 80007d0:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80007d4:	fab3 f383 	clz	r3, r3
 80007d8:	440b      	add	r3, r1
 80007da:	009b      	lsls	r3, r3, #2
 80007dc:	2702      	movs	r7, #2
 80007de:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80007e0:	f7ff fd88 	bl	80002f4 <HAL_GetTick>
 80007e4:	4680      	mov	r8, r0
 80007e6:	fa97 f3a7 	rbit	r3, r7
 80007ea:	fa97 f3a7 	rbit	r3, r7
 80007ee:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007f2:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80007f4:	fa97 f3a7 	rbit	r3, r7
 80007f8:	fab3 f383 	clz	r3, r3
 80007fc:	f003 031f 	and.w	r3, r3, #31
 8000800:	fa04 f303 	lsl.w	r3, r4, r3
 8000804:	4213      	tst	r3, r2
 8000806:	f47f aee8 	bne.w	80005da <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800080a:	f7ff fd73 	bl	80002f4 <HAL_GetTick>
 800080e:	eba0 0008 	sub.w	r0, r0, r8
 8000812:	2802      	cmp	r0, #2
 8000814:	d9e7      	bls.n	80007e6 <HAL_RCC_OscConfig+0x232>
 8000816:	e734      	b.n	8000682 <HAL_RCC_OscConfig+0xce>
 8000818:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800081c:	fab3 f383 	clz	r3, r3
 8000820:	440b      	add	r3, r1
 8000822:	009b      	lsls	r3, r3, #2
 8000824:	2702      	movs	r7, #2
 8000826:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000828:	f7ff fd64 	bl	80002f4 <HAL_GetTick>
 800082c:	4680      	mov	r8, r0
 800082e:	fa97 f3a7 	rbit	r3, r7
 8000832:	fa97 f3a7 	rbit	r3, r7
 8000836:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800083a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800083c:	fa97 f3a7 	rbit	r3, r7
 8000840:	fab3 f383 	clz	r3, r3
 8000844:	f003 031f 	and.w	r3, r3, #31
 8000848:	fa04 f303 	lsl.w	r3, r4, r3
 800084c:	4213      	tst	r3, r2
 800084e:	f43f aec4 	beq.w	80005da <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000852:	f7ff fd4f 	bl	80002f4 <HAL_GetTick>
 8000856:	eba0 0008 	sub.w	r0, r0, r8
 800085a:	2802      	cmp	r0, #2
 800085c:	d9e7      	bls.n	800082e <HAL_RCC_OscConfig+0x27a>
 800085e:	e710      	b.n	8000682 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000860:	4c1d      	ldr	r4, [pc, #116]	; (80008d8 <HAL_RCC_OscConfig+0x324>)
 8000862:	69e3      	ldr	r3, [r4, #28]
 8000864:	00d9      	lsls	r1, r3, #3
 8000866:	d434      	bmi.n	80008d2 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000868:	69e3      	ldr	r3, [r4, #28]
 800086a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800086e:	61e3      	str	r3, [r4, #28]
 8000870:	69e3      	ldr	r3, [r4, #28]
 8000872:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000876:	9301      	str	r3, [sp, #4]
 8000878:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800087a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800087c:	4f18      	ldr	r7, [pc, #96]	; (80008e0 <HAL_RCC_OscConfig+0x32c>)
 800087e:	683b      	ldr	r3, [r7, #0]
 8000880:	05da      	lsls	r2, r3, #23
 8000882:	d52f      	bpl.n	80008e4 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000884:	68eb      	ldr	r3, [r5, #12]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d13d      	bne.n	8000906 <HAL_RCC_OscConfig+0x352>
 800088a:	6a23      	ldr	r3, [r4, #32]
 800088c:	f043 0301 	orr.w	r3, r3, #1
 8000890:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000892:	f7ff fd2f 	bl	80002f4 <HAL_GetTick>
 8000896:	2702      	movs	r7, #2
 8000898:	4682      	mov	sl, r0
 800089a:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800089c:	f04f 0801 	mov.w	r8, #1
 80008a0:	fa97 f3a7 	rbit	r3, r7
 80008a4:	fa97 f3a7 	rbit	r3, r7
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	d06c      	beq.n	8000986 <HAL_RCC_OscConfig+0x3d2>
 80008ac:	6a22      	ldr	r2, [r4, #32]
 80008ae:	fa99 f3a9 	rbit	r3, r9
 80008b2:	fab3 f383 	clz	r3, r3
 80008b6:	f003 031f 	and.w	r3, r3, #31
 80008ba:	fa08 f303 	lsl.w	r3, r8, r3
 80008be:	4213      	tst	r3, r2
 80008c0:	d058      	beq.n	8000974 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 80008c2:	2e00      	cmp	r6, #0
 80008c4:	f43f ae8d 	beq.w	80005e2 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008c8:	69e3      	ldr	r3, [r4, #28]
 80008ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008ce:	61e3      	str	r3, [r4, #28]
 80008d0:	e687      	b.n	80005e2 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80008d2:	2600      	movs	r6, #0
 80008d4:	e7d2      	b.n	800087c <HAL_RCC_OscConfig+0x2c8>
 80008d6:	bf00      	nop
 80008d8:	40021000 	.word	0x40021000
 80008dc:	10908120 	.word	0x10908120
 80008e0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008e4:	683b      	ldr	r3, [r7, #0]
 80008e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008ea:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80008ec:	f7ff fd02 	bl	80002f4 <HAL_GetTick>
 80008f0:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008f2:	683b      	ldr	r3, [r7, #0]
 80008f4:	05db      	lsls	r3, r3, #23
 80008f6:	d4c5      	bmi.n	8000884 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008f8:	f7ff fcfc 	bl	80002f4 <HAL_GetTick>
 80008fc:	eba0 0008 	sub.w	r0, r0, r8
 8000900:	2864      	cmp	r0, #100	; 0x64
 8000902:	d9f6      	bls.n	80008f2 <HAL_RCC_OscConfig+0x33e>
 8000904:	e6bd      	b.n	8000682 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000906:	bb3b      	cbnz	r3, 8000958 <HAL_RCC_OscConfig+0x3a4>
 8000908:	6a23      	ldr	r3, [r4, #32]
 800090a:	f023 0301 	bic.w	r3, r3, #1
 800090e:	6223      	str	r3, [r4, #32]
 8000910:	6a23      	ldr	r3, [r4, #32]
 8000912:	f023 0304 	bic.w	r3, r3, #4
 8000916:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000918:	f7ff fcec 	bl	80002f4 <HAL_GetTick>
 800091c:	2702      	movs	r7, #2
 800091e:	4682      	mov	sl, r0
 8000920:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000922:	f04f 0801 	mov.w	r8, #1
 8000926:	fa97 f3a7 	rbit	r3, r7
 800092a:	fa97 f3a7 	rbit	r3, r7
 800092e:	b373      	cbz	r3, 800098e <HAL_RCC_OscConfig+0x3da>
 8000930:	6a22      	ldr	r2, [r4, #32]
 8000932:	fa99 f3a9 	rbit	r3, r9
 8000936:	fab3 f383 	clz	r3, r3
 800093a:	f003 031f 	and.w	r3, r3, #31
 800093e:	fa08 f303 	lsl.w	r3, r8, r3
 8000942:	4213      	tst	r3, r2
 8000944:	d0bd      	beq.n	80008c2 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000946:	f7ff fcd5 	bl	80002f4 <HAL_GetTick>
 800094a:	f241 3388 	movw	r3, #5000	; 0x1388
 800094e:	eba0 000a 	sub.w	r0, r0, sl
 8000952:	4298      	cmp	r0, r3
 8000954:	d9e7      	bls.n	8000926 <HAL_RCC_OscConfig+0x372>
 8000956:	e694      	b.n	8000682 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000958:	2b05      	cmp	r3, #5
 800095a:	6a23      	ldr	r3, [r4, #32]
 800095c:	d103      	bne.n	8000966 <HAL_RCC_OscConfig+0x3b2>
 800095e:	f043 0304 	orr.w	r3, r3, #4
 8000962:	6223      	str	r3, [r4, #32]
 8000964:	e791      	b.n	800088a <HAL_RCC_OscConfig+0x2d6>
 8000966:	f023 0301 	bic.w	r3, r3, #1
 800096a:	6223      	str	r3, [r4, #32]
 800096c:	6a23      	ldr	r3, [r4, #32]
 800096e:	f023 0304 	bic.w	r3, r3, #4
 8000972:	e78d      	b.n	8000890 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000974:	f7ff fcbe 	bl	80002f4 <HAL_GetTick>
 8000978:	f241 3388 	movw	r3, #5000	; 0x1388
 800097c:	eba0 000a 	sub.w	r0, r0, sl
 8000980:	4298      	cmp	r0, r3
 8000982:	d98d      	bls.n	80008a0 <HAL_RCC_OscConfig+0x2ec>
 8000984:	e67d      	b.n	8000682 <HAL_RCC_OscConfig+0xce>
 8000986:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800098a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800098c:	e78f      	b.n	80008ae <HAL_RCC_OscConfig+0x2fa>
 800098e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000992:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000994:	e7cd      	b.n	8000932 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000996:	4c41      	ldr	r4, [pc, #260]	; (8000a9c <HAL_RCC_OscConfig+0x4e8>)
 8000998:	6863      	ldr	r3, [r4, #4]
 800099a:	f003 030c 	and.w	r3, r3, #12
 800099e:	2b08      	cmp	r3, #8
 80009a0:	f43f ae0c 	beq.w	80005bc <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009a4:	2a02      	cmp	r2, #2
 80009a6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009aa:	d152      	bne.n	8000a52 <HAL_RCC_OscConfig+0x49e>
 80009ac:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80009b0:	fab3 f383 	clz	r3, r3
 80009b4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009b8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009bc:	009b      	lsls	r3, r3, #2
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009c2:	f7ff fc97 	bl	80002f4 <HAL_GetTick>
 80009c6:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80009ca:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009cc:	2601      	movs	r6, #1
 80009ce:	fa97 f3a7 	rbit	r3, r7
 80009d2:	6822      	ldr	r2, [r4, #0]
 80009d4:	fa97 f3a7 	rbit	r3, r7
 80009d8:	fab3 f383 	clz	r3, r3
 80009dc:	f003 031f 	and.w	r3, r3, #31
 80009e0:	fa06 f303 	lsl.w	r3, r6, r3
 80009e4:	4213      	tst	r3, r2
 80009e6:	d12d      	bne.n	8000a44 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009e8:	6862      	ldr	r2, [r4, #4]
 80009ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80009ec:	6a29      	ldr	r1, [r5, #32]
 80009ee:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80009f2:	430b      	orrs	r3, r1
 80009f4:	4313      	orrs	r3, r2
 80009f6:	6063      	str	r3, [r4, #4]
 80009f8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009fc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000a00:	fab3 f383 	clz	r3, r3
 8000a04:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a08:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a0c:	009b      	lsls	r3, r3, #2
 8000a0e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a12:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000a14:	f7ff fc6e 	bl	80002f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a18:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000a1a:	4607      	mov	r7, r0
 8000a1c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a20:	6822      	ldr	r2, [r4, #0]
 8000a22:	fa95 f3a5 	rbit	r3, r5
 8000a26:	fab3 f383 	clz	r3, r3
 8000a2a:	f003 031f 	and.w	r3, r3, #31
 8000a2e:	fa06 f303 	lsl.w	r3, r6, r3
 8000a32:	4213      	tst	r3, r2
 8000a34:	f47f add9 	bne.w	80005ea <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a38:	f7ff fc5c 	bl	80002f4 <HAL_GetTick>
 8000a3c:	1bc0      	subs	r0, r0, r7
 8000a3e:	2802      	cmp	r0, #2
 8000a40:	d9ec      	bls.n	8000a1c <HAL_RCC_OscConfig+0x468>
 8000a42:	e61e      	b.n	8000682 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a44:	f7ff fc56 	bl	80002f4 <HAL_GetTick>
 8000a48:	eba0 0008 	sub.w	r0, r0, r8
 8000a4c:	2802      	cmp	r0, #2
 8000a4e:	d9be      	bls.n	80009ce <HAL_RCC_OscConfig+0x41a>
 8000a50:	e617      	b.n	8000682 <HAL_RCC_OscConfig+0xce>
 8000a52:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a56:	fab3 f383 	clz	r3, r3
 8000a5a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a5e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	2200      	movs	r2, #0
 8000a66:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a68:	f7ff fc44 	bl	80002f4 <HAL_GetTick>
 8000a6c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a70:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a72:	2601      	movs	r6, #1
 8000a74:	fa95 f3a5 	rbit	r3, r5
 8000a78:	6822      	ldr	r2, [r4, #0]
 8000a7a:	fa95 f3a5 	rbit	r3, r5
 8000a7e:	fab3 f383 	clz	r3, r3
 8000a82:	f003 031f 	and.w	r3, r3, #31
 8000a86:	fa06 f303 	lsl.w	r3, r6, r3
 8000a8a:	4213      	tst	r3, r2
 8000a8c:	f43f adad 	beq.w	80005ea <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a90:	f7ff fc30 	bl	80002f4 <HAL_GetTick>
 8000a94:	1bc0      	subs	r0, r0, r7
 8000a96:	2802      	cmp	r0, #2
 8000a98:	d9ec      	bls.n	8000a74 <HAL_RCC_OscConfig+0x4c0>
 8000a9a:	e5f2      	b.n	8000682 <HAL_RCC_OscConfig+0xce>
 8000a9c:	40021000 	.word	0x40021000

08000aa0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000aa0:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000aa2:	4c13      	ldr	r4, [pc, #76]	; (8000af0 <HAL_RCC_GetSysClockFreq+0x50>)
 8000aa4:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000aa6:	f001 030c 	and.w	r3, r1, #12
 8000aaa:	2b08      	cmp	r3, #8
 8000aac:	d11e      	bne.n	8000aec <HAL_RCC_GetSysClockFreq+0x4c>
 8000aae:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000ab2:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000ab6:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8000aba:	fab3 f383 	clz	r3, r3
 8000abe:	fa22 f303 	lsr.w	r3, r2, r3
 8000ac2:	4a0c      	ldr	r2, [pc, #48]	; (8000af4 <HAL_RCC_GetSysClockFreq+0x54>)
 8000ac4:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000ac6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ac8:	220f      	movs	r2, #15
 8000aca:	fa92 f2a2 	rbit	r2, r2
 8000ace:	fab2 f282 	clz	r2, r2
 8000ad2:	f003 030f 	and.w	r3, r3, #15
 8000ad6:	40d3      	lsrs	r3, r2
 8000ad8:	4a07      	ldr	r2, [pc, #28]	; (8000af8 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ada:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000adc:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000ade:	bf4a      	itet	mi
 8000ae0:	4b06      	ldrmi	r3, [pc, #24]	; (8000afc <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000ae2:	4b07      	ldrpl	r3, [pc, #28]	; (8000b00 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000ae4:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000ae8:	4358      	muls	r0, r3
 8000aea:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000aec:	4803      	ldr	r0, [pc, #12]	; (8000afc <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000aee:	bd10      	pop	{r4, pc}
 8000af0:	40021000 	.word	0x40021000
 8000af4:	08001e84 	.word	0x08001e84
 8000af8:	08001e94 	.word	0x08001e94
 8000afc:	007a1200 	.word	0x007a1200
 8000b00:	003d0900 	.word	0x003d0900

08000b04 <HAL_RCC_ClockConfig>:
{
 8000b04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b08:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b0a:	4604      	mov	r4, r0
 8000b0c:	b910      	cbnz	r0, 8000b14 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b0e:	2001      	movs	r0, #1
 8000b10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b14:	4a4c      	ldr	r2, [pc, #304]	; (8000c48 <HAL_RCC_ClockConfig+0x144>)
 8000b16:	6813      	ldr	r3, [r2, #0]
 8000b18:	f003 0307 	and.w	r3, r3, #7
 8000b1c:	428b      	cmp	r3, r1
 8000b1e:	d32e      	bcc.n	8000b7e <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b20:	6822      	ldr	r2, [r4, #0]
 8000b22:	0791      	lsls	r1, r2, #30
 8000b24:	d436      	bmi.n	8000b94 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b26:	07d2      	lsls	r2, r2, #31
 8000b28:	d43c      	bmi.n	8000ba4 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b2a:	4a47      	ldr	r2, [pc, #284]	; (8000c48 <HAL_RCC_ClockConfig+0x144>)
 8000b2c:	6813      	ldr	r3, [r2, #0]
 8000b2e:	f003 0307 	and.w	r3, r3, #7
 8000b32:	429d      	cmp	r5, r3
 8000b34:	d375      	bcc.n	8000c22 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b36:	6822      	ldr	r2, [r4, #0]
 8000b38:	4d44      	ldr	r5, [pc, #272]	; (8000c4c <HAL_RCC_ClockConfig+0x148>)
 8000b3a:	f012 0f04 	tst.w	r2, #4
 8000b3e:	d17c      	bne.n	8000c3a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b40:	0713      	lsls	r3, r2, #28
 8000b42:	d506      	bpl.n	8000b52 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b44:	686b      	ldr	r3, [r5, #4]
 8000b46:	6922      	ldr	r2, [r4, #16]
 8000b48:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b4c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b50:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b52:	f7ff ffa5 	bl	8000aa0 <HAL_RCC_GetSysClockFreq>
 8000b56:	686b      	ldr	r3, [r5, #4]
 8000b58:	22f0      	movs	r2, #240	; 0xf0
 8000b5a:	fa92 f2a2 	rbit	r2, r2
 8000b5e:	fab2 f282 	clz	r2, r2
 8000b62:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b66:	40d3      	lsrs	r3, r2
 8000b68:	4a39      	ldr	r2, [pc, #228]	; (8000c50 <HAL_RCC_ClockConfig+0x14c>)
 8000b6a:	5cd3      	ldrb	r3, [r2, r3]
 8000b6c:	40d8      	lsrs	r0, r3
 8000b6e:	4b39      	ldr	r3, [pc, #228]	; (8000c54 <HAL_RCC_ClockConfig+0x150>)
 8000b70:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b72:	2000      	movs	r0, #0
 8000b74:	f7ff fb7c 	bl	8000270 <HAL_InitTick>
  return HAL_OK;
 8000b78:	2000      	movs	r0, #0
 8000b7a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b7e:	6813      	ldr	r3, [r2, #0]
 8000b80:	f023 0307 	bic.w	r3, r3, #7
 8000b84:	430b      	orrs	r3, r1
 8000b86:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b88:	6813      	ldr	r3, [r2, #0]
 8000b8a:	f003 0307 	and.w	r3, r3, #7
 8000b8e:	4299      	cmp	r1, r3
 8000b90:	d1bd      	bne.n	8000b0e <HAL_RCC_ClockConfig+0xa>
 8000b92:	e7c5      	b.n	8000b20 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b94:	492d      	ldr	r1, [pc, #180]	; (8000c4c <HAL_RCC_ClockConfig+0x148>)
 8000b96:	68a0      	ldr	r0, [r4, #8]
 8000b98:	684b      	ldr	r3, [r1, #4]
 8000b9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b9e:	4303      	orrs	r3, r0
 8000ba0:	604b      	str	r3, [r1, #4]
 8000ba2:	e7c0      	b.n	8000b26 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000ba4:	6862      	ldr	r2, [r4, #4]
 8000ba6:	4e29      	ldr	r6, [pc, #164]	; (8000c4c <HAL_RCC_ClockConfig+0x148>)
 8000ba8:	2a01      	cmp	r2, #1
 8000baa:	d127      	bne.n	8000bfc <HAL_RCC_ClockConfig+0xf8>
 8000bac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bb0:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bb4:	6831      	ldr	r1, [r6, #0]
 8000bb6:	fa93 f3a3 	rbit	r3, r3
 8000bba:	fab3 f383 	clz	r3, r3
 8000bbe:	f003 031f 	and.w	r3, r3, #31
 8000bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bc6:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bc8:	d0a1      	beq.n	8000b0e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bca:	6873      	ldr	r3, [r6, #4]
 8000bcc:	f023 0303 	bic.w	r3, r3, #3
 8000bd0:	431a      	orrs	r2, r3
 8000bd2:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000bd4:	f7ff fb8e 	bl	80002f4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bd8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000bdc:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bde:	6873      	ldr	r3, [r6, #4]
 8000be0:	6862      	ldr	r2, [r4, #4]
 8000be2:	f003 030c 	and.w	r3, r3, #12
 8000be6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000bea:	d09e      	beq.n	8000b2a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bec:	f7ff fb82 	bl	80002f4 <HAL_GetTick>
 8000bf0:	1bc0      	subs	r0, r0, r7
 8000bf2:	4540      	cmp	r0, r8
 8000bf4:	d9f3      	bls.n	8000bde <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000bf6:	2003      	movs	r0, #3
}
 8000bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000bfc:	2a02      	cmp	r2, #2
 8000bfe:	bf0c      	ite	eq
 8000c00:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000c04:	2302      	movne	r3, #2
 8000c06:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0a:	6830      	ldr	r0, [r6, #0]
 8000c0c:	fa93 f3a3 	rbit	r3, r3
 8000c10:	fab3 f383 	clz	r3, r3
 8000c14:	f003 031f 	and.w	r3, r3, #31
 8000c18:	2101      	movs	r1, #1
 8000c1a:	fa01 f303 	lsl.w	r3, r1, r3
 8000c1e:	4203      	tst	r3, r0
 8000c20:	e7d2      	b.n	8000bc8 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c22:	6813      	ldr	r3, [r2, #0]
 8000c24:	f023 0307 	bic.w	r3, r3, #7
 8000c28:	432b      	orrs	r3, r5
 8000c2a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c2c:	6813      	ldr	r3, [r2, #0]
 8000c2e:	f003 0307 	and.w	r3, r3, #7
 8000c32:	429d      	cmp	r5, r3
 8000c34:	f47f af6b 	bne.w	8000b0e <HAL_RCC_ClockConfig+0xa>
 8000c38:	e77d      	b.n	8000b36 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c3a:	686b      	ldr	r3, [r5, #4]
 8000c3c:	68e1      	ldr	r1, [r4, #12]
 8000c3e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c42:	430b      	orrs	r3, r1
 8000c44:	606b      	str	r3, [r5, #4]
 8000c46:	e77b      	b.n	8000b40 <HAL_RCC_ClockConfig+0x3c>
 8000c48:	40022000 	.word	0x40022000
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	08001eae 	.word	0x08001eae
 8000c54:	20000008 	.word	0x20000008

08000c58 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000c58:	4b08      	ldr	r3, [pc, #32]	; (8000c7c <HAL_RCC_GetPCLK1Freq+0x24>)
 8000c5a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c5e:	685b      	ldr	r3, [r3, #4]
 8000c60:	fa92 f2a2 	rbit	r2, r2
 8000c64:	fab2 f282 	clz	r2, r2
 8000c68:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000c6c:	40d3      	lsrs	r3, r2
 8000c6e:	4a04      	ldr	r2, [pc, #16]	; (8000c80 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000c70:	5cd3      	ldrb	r3, [r2, r3]
 8000c72:	4a04      	ldr	r2, [pc, #16]	; (8000c84 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000c74:	6810      	ldr	r0, [r2, #0]
}    
 8000c76:	40d8      	lsrs	r0, r3
 8000c78:	4770      	bx	lr
 8000c7a:	bf00      	nop
 8000c7c:	40021000 	.word	0x40021000
 8000c80:	08001ebe 	.word	0x08001ebe
 8000c84:	20000008 	.word	0x20000008

08000c88 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000c88:	4b08      	ldr	r3, [pc, #32]	; (8000cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8000c8a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	fa92 f2a2 	rbit	r2, r2
 8000c94:	fab2 f282 	clz	r2, r2
 8000c98:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000c9c:	40d3      	lsrs	r3, r2
 8000c9e:	4a04      	ldr	r2, [pc, #16]	; (8000cb0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000ca0:	5cd3      	ldrb	r3, [r2, r3]
 8000ca2:	4a04      	ldr	r2, [pc, #16]	; (8000cb4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000ca4:	6810      	ldr	r0, [r2, #0]
} 
 8000ca6:	40d8      	lsrs	r0, r3
 8000ca8:	4770      	bx	lr
 8000caa:	bf00      	nop
 8000cac:	40021000 	.word	0x40021000
 8000cb0:	08001ebe 	.word	0x08001ebe
 8000cb4:	20000008 	.word	0x20000008

08000cb8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8000cb8:	6803      	ldr	r3, [r0, #0]
 8000cba:	681a      	ldr	r2, [r3, #0]
 8000cbc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8000cc0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000cc2:	689a      	ldr	r2, [r3, #8]
 8000cc4:	f022 0201 	bic.w	r2, r2, #1
 8000cc8:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8000cca:	2320      	movs	r3, #32
 8000ccc:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 8000cd0:	4770      	bx	lr

08000cd2 <HAL_UART_TxCpltCallback>:
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_UART_RxCpltCallback>:
 8000cd4:	4770      	bx	lr

08000cd6 <HAL_UART_ErrorCallback>:
 8000cd6:	4770      	bx	lr

08000cd8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8000cd8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8000cda:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8000ce2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 8000ce6:	f7ff fff6 	bl	8000cd6 <HAL_UART_ErrorCallback>
 8000cea:	bd08      	pop	{r3, pc}

08000cec <UART_SetConfig>:
{
 8000cec:	b538      	push	{r3, r4, r5, lr}
 8000cee:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000cf0:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000cf2:	6921      	ldr	r1, [r4, #16]
 8000cf4:	68a3      	ldr	r3, [r4, #8]
 8000cf6:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000cf8:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000cfa:	430b      	orrs	r3, r1
 8000cfc:	6961      	ldr	r1, [r4, #20]
 8000cfe:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d00:	4949      	ldr	r1, [pc, #292]	; (8000e28 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000d02:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000d04:	4001      	ands	r1, r0
 8000d06:	430b      	orrs	r3, r1
 8000d08:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d0a:	686b      	ldr	r3, [r5, #4]
 8000d0c:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d0e:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000d10:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000d14:	430b      	orrs	r3, r1
 8000d16:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d18:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d1a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d1c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000d20:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000d22:	430b      	orrs	r3, r1
 8000d24:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d26:	4b41      	ldr	r3, [pc, #260]	; (8000e2c <UART_SetConfig+0x140>)
 8000d28:	429d      	cmp	r5, r3
 8000d2a:	d112      	bne.n	8000d52 <UART_SetConfig+0x66>
 8000d2c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000d30:	493f      	ldr	r1, [pc, #252]	; (8000e30 <UART_SetConfig+0x144>)
 8000d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d34:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d38:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000d3c:	5ccb      	ldrb	r3, [r1, r3]
 8000d3e:	d13b      	bne.n	8000db8 <UART_SetConfig+0xcc>
    switch (clocksource)
 8000d40:	2b08      	cmp	r3, #8
 8000d42:	d836      	bhi.n	8000db2 <UART_SetConfig+0xc6>
 8000d44:	e8df f003 	tbb	[pc, r3]
 8000d48:	3524210f 	.word	0x3524210f
 8000d4c:	3535352d 	.word	0x3535352d
 8000d50:	30          	.byte	0x30
 8000d51:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d52:	4b38      	ldr	r3, [pc, #224]	; (8000e34 <UART_SetConfig+0x148>)
 8000d54:	429d      	cmp	r5, r3
 8000d56:	d003      	beq.n	8000d60 <UART_SetConfig+0x74>
 8000d58:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d5c:	429d      	cmp	r5, r3
 8000d5e:	d15e      	bne.n	8000e1e <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d60:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000d64:	d131      	bne.n	8000dca <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000d66:	f7ff ff77 	bl	8000c58 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000d6a:	6861      	ldr	r1, [r4, #4]
 8000d6c:	084a      	lsrs	r2, r1, #1
 8000d6e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8000d72:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000d76:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8000d78:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 8000d7a:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 8000d7e:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000d80:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8000d84:	4313      	orrs	r3, r2
 8000d86:	60cb      	str	r3, [r1, #12]
 8000d88:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8000d8a:	f7ff ff7d 	bl	8000c88 <HAL_RCC_GetPCLK2Freq>
 8000d8e:	e7ec      	b.n	8000d6a <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000d90:	6860      	ldr	r0, [r4, #4]
 8000d92:	0843      	lsrs	r3, r0, #1
 8000d94:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8000d98:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000d9c:	fbb3 f3f0 	udiv	r3, r3, r0
 8000da0:	e7e9      	b.n	8000d76 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000da2:	f7ff fe7d 	bl	8000aa0 <HAL_RCC_GetSysClockFreq>
 8000da6:	e7e0      	b.n	8000d6a <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000da8:	6860      	ldr	r0, [r4, #4]
 8000daa:	0843      	lsrs	r3, r0, #1
 8000dac:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000db0:	e7f4      	b.n	8000d9c <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8000db2:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000db4:	2300      	movs	r3, #0
 8000db6:	e7e0      	b.n	8000d7a <UART_SetConfig+0x8e>
    switch (clocksource)
 8000db8:	2b08      	cmp	r3, #8
 8000dba:	d833      	bhi.n	8000e24 <UART_SetConfig+0x138>
 8000dbc:	e8df f003 	tbb	[pc, r3]
 8000dc0:	321b1005 	.word	0x321b1005
 8000dc4:	32323227 	.word	0x32323227
 8000dc8:	2a          	.byte	0x2a
 8000dc9:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000dca:	f7ff ff45 	bl	8000c58 <HAL_RCC_GetPCLK1Freq>
 8000dce:	6863      	ldr	r3, [r4, #4]
 8000dd0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8000dd4:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dd8:	b280      	uxth	r0, r0
 8000dda:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000ddc:	2000      	movs	r0, #0
        break;
 8000dde:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8000de0:	f7ff ff52 	bl	8000c88 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000de4:	6863      	ldr	r3, [r4, #4]
 8000de6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8000dea:	fbb0 f0f3 	udiv	r0, r0, r3
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <UART_SetConfig+0x140>)
 8000df0:	b280      	uxth	r0, r0
 8000df2:	60d8      	str	r0, [r3, #12]
 8000df4:	e7f2      	b.n	8000ddc <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000df6:	6862      	ldr	r2, [r4, #4]
 8000df8:	0853      	lsrs	r3, r2, #1
 8000dfa:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8000dfe:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000e02:	fbb3 f3f2 	udiv	r3, r3, r2
 8000e06:	4a09      	ldr	r2, [pc, #36]	; (8000e2c <UART_SetConfig+0x140>)
 8000e08:	b29b      	uxth	r3, r3
 8000e0a:	60d3      	str	r3, [r2, #12]
 8000e0c:	e7e6      	b.n	8000ddc <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000e0e:	f7ff fe47 	bl	8000aa0 <HAL_RCC_GetSysClockFreq>
 8000e12:	e7e7      	b.n	8000de4 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000e14:	6862      	ldr	r2, [r4, #4]
 8000e16:	0853      	lsrs	r3, r2, #1
 8000e18:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000e1c:	e7f1      	b.n	8000e02 <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000e1e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000e22:	d0c6      	beq.n	8000db2 <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8000e24:	2001      	movs	r0, #1
  return ret;
 8000e26:	bd38      	pop	{r3, r4, r5, pc}
 8000e28:	efff69f3 	.word	0xefff69f3
 8000e2c:	40013800 	.word	0x40013800
 8000e30:	08001ea4 	.word	0x08001ea4
 8000e34:	40004400 	.word	0x40004400

08000e38 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000e38:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000e3a:	07da      	lsls	r2, r3, #31
{
 8000e3c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000e3e:	d506      	bpl.n	8000e4e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8000e40:	6801      	ldr	r1, [r0, #0]
 8000e42:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8000e44:	684a      	ldr	r2, [r1, #4]
 8000e46:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000e4a:	4322      	orrs	r2, r4
 8000e4c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8000e4e:	079c      	lsls	r4, r3, #30
 8000e50:	d506      	bpl.n	8000e60 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8000e52:	6801      	ldr	r1, [r0, #0]
 8000e54:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000e56:	684a      	ldr	r2, [r1, #4]
 8000e58:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e5c:	4322      	orrs	r2, r4
 8000e5e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8000e60:	0759      	lsls	r1, r3, #29
 8000e62:	d506      	bpl.n	8000e72 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8000e64:	6801      	ldr	r1, [r0, #0]
 8000e66:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000e68:	684a      	ldr	r2, [r1, #4]
 8000e6a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e6e:	4322      	orrs	r2, r4
 8000e70:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8000e72:	071a      	lsls	r2, r3, #28
 8000e74:	d506      	bpl.n	8000e84 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8000e76:	6801      	ldr	r1, [r0, #0]
 8000e78:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000e7a:	684a      	ldr	r2, [r1, #4]
 8000e7c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e80:	4322      	orrs	r2, r4
 8000e82:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8000e84:	06dc      	lsls	r4, r3, #27
 8000e86:	d506      	bpl.n	8000e96 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8000e88:	6801      	ldr	r1, [r0, #0]
 8000e8a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000e8c:	688a      	ldr	r2, [r1, #8]
 8000e8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e92:	4322      	orrs	r2, r4
 8000e94:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8000e96:	0699      	lsls	r1, r3, #26
 8000e98:	d506      	bpl.n	8000ea8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8000e9a:	6801      	ldr	r1, [r0, #0]
 8000e9c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000e9e:	688a      	ldr	r2, [r1, #8]
 8000ea0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000ea4:	4322      	orrs	r2, r4
 8000ea6:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8000ea8:	065a      	lsls	r2, r3, #25
 8000eaa:	d50f      	bpl.n	8000ecc <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8000eac:	6801      	ldr	r1, [r0, #0]
 8000eae:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000eb0:	684a      	ldr	r2, [r1, #4]
 8000eb2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000eb6:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8000eb8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8000ebc:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8000ebe:	d105      	bne.n	8000ecc <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8000ec0:	684a      	ldr	r2, [r1, #4]
 8000ec2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000ec4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8000ec8:	4322      	orrs	r2, r4
 8000eca:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8000ecc:	061b      	lsls	r3, r3, #24
 8000ece:	d506      	bpl.n	8000ede <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8000ed0:	6802      	ldr	r2, [r0, #0]
 8000ed2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000ed4:	6853      	ldr	r3, [r2, #4]
 8000ed6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000eda:	430b      	orrs	r3, r1
 8000edc:	6053      	str	r3, [r2, #4]
 8000ede:	bd10      	pop	{r4, pc}

08000ee0 <UART_WaitOnFlagUntilTimeout>:
{
 8000ee0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ee4:	9d06      	ldr	r5, [sp, #24]
 8000ee6:	4604      	mov	r4, r0
 8000ee8:	460f      	mov	r7, r1
 8000eea:	4616      	mov	r6, r2
 8000eec:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000eee:	6821      	ldr	r1, [r4, #0]
 8000ef0:	69ca      	ldr	r2, [r1, #28]
 8000ef2:	ea37 0302 	bics.w	r3, r7, r2
 8000ef6:	bf0c      	ite	eq
 8000ef8:	2201      	moveq	r2, #1
 8000efa:	2200      	movne	r2, #0
 8000efc:	42b2      	cmp	r2, r6
 8000efe:	d002      	beq.n	8000f06 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8000f00:	2000      	movs	r0, #0
}
 8000f02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000f06:	1c6b      	adds	r3, r5, #1
 8000f08:	d0f2      	beq.n	8000ef0 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f0a:	b99d      	cbnz	r5, 8000f34 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000f0c:	6823      	ldr	r3, [r4, #0]
 8000f0e:	681a      	ldr	r2, [r3, #0]
 8000f10:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000f14:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000f16:	689a      	ldr	r2, [r3, #8]
 8000f18:	f022 0201 	bic.w	r2, r2, #1
 8000f1c:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8000f1e:	2320      	movs	r3, #32
 8000f20:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8000f24:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8000f28:	2300      	movs	r3, #0
 8000f2a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8000f2e:	2003      	movs	r0, #3
 8000f30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000f34:	f7ff f9de 	bl	80002f4 <HAL_GetTick>
 8000f38:	eba0 0008 	sub.w	r0, r0, r8
 8000f3c:	4285      	cmp	r5, r0
 8000f3e:	d2d6      	bcs.n	8000eee <UART_WaitOnFlagUntilTimeout+0xe>
 8000f40:	e7e4      	b.n	8000f0c <UART_WaitOnFlagUntilTimeout+0x2c>

08000f42 <HAL_UART_Transmit>:
{
 8000f42:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8000f46:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8000f48:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8000f4c:	2b20      	cmp	r3, #32
{
 8000f4e:	4604      	mov	r4, r0
 8000f50:	460d      	mov	r5, r1
 8000f52:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8000f54:	d14c      	bne.n	8000ff0 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8000f56:	2900      	cmp	r1, #0
 8000f58:	d048      	beq.n	8000fec <HAL_UART_Transmit+0xaa>
 8000f5a:	2a00      	cmp	r2, #0
 8000f5c:	d046      	beq.n	8000fec <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 8000f5e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8000f62:	2b01      	cmp	r3, #1
 8000f64:	d044      	beq.n	8000ff0 <HAL_UART_Transmit+0xae>
 8000f66:	2301      	movs	r3, #1
 8000f68:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000f6c:	2300      	movs	r3, #0
 8000f6e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8000f70:	2321      	movs	r3, #33	; 0x21
 8000f72:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8000f76:	f7ff f9bd 	bl	80002f4 <HAL_GetTick>
    huart->TxXferSize = Size;
 8000f7a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 8000f7e:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8000f80:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8000f84:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8000f88:	b292      	uxth	r2, r2
 8000f8a:	b962      	cbnz	r2, 8000fa6 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8000f8c:	9700      	str	r7, [sp, #0]
 8000f8e:	4633      	mov	r3, r6
 8000f90:	2140      	movs	r1, #64	; 0x40
 8000f92:	4620      	mov	r0, r4
 8000f94:	f7ff ffa4 	bl	8000ee0 <UART_WaitOnFlagUntilTimeout>
 8000f98:	b998      	cbnz	r0, 8000fc2 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8000f9a:	2320      	movs	r3, #32
 8000f9c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 8000fa0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8000fa4:	e00e      	b.n	8000fc4 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8000fa6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000faa:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8000fac:	3b01      	subs	r3, #1
 8000fae:	b29b      	uxth	r3, r3
 8000fb0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8000fb4:	2200      	movs	r2, #0
 8000fb6:	4633      	mov	r3, r6
 8000fb8:	2180      	movs	r1, #128	; 0x80
 8000fba:	4620      	mov	r0, r4
 8000fbc:	f7ff ff90 	bl	8000ee0 <UART_WaitOnFlagUntilTimeout>
 8000fc0:	b118      	cbz	r0, 8000fca <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 8000fc2:	2003      	movs	r0, #3
}
 8000fc4:	b002      	add	sp, #8
 8000fc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8000fca:	68a3      	ldr	r3, [r4, #8]
 8000fcc:	6822      	ldr	r2, [r4, #0]
 8000fce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000fd2:	d107      	bne.n	8000fe4 <HAL_UART_Transmit+0xa2>
 8000fd4:	6923      	ldr	r3, [r4, #16]
 8000fd6:	b92b      	cbnz	r3, 8000fe4 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8000fd8:	f835 3b02 	ldrh.w	r3, [r5], #2
 8000fdc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000fe0:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 8000fe2:	e7cf      	b.n	8000f84 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8000fe4:	782b      	ldrb	r3, [r5, #0]
 8000fe6:	8513      	strh	r3, [r2, #40]	; 0x28
 8000fe8:	3501      	adds	r5, #1
 8000fea:	e7cb      	b.n	8000f84 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8000fec:	2001      	movs	r0, #1
 8000fee:	e7e9      	b.n	8000fc4 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8000ff0:	2002      	movs	r0, #2
 8000ff2:	e7e7      	b.n	8000fc4 <HAL_UART_Transmit+0x82>

08000ff4 <UART_CheckIdleState>:
{
 8000ff4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000ff6:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000ff8:	2600      	movs	r6, #0
 8000ffa:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8000ffc:	f7ff f97a 	bl	80002f4 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001000:	6823      	ldr	r3, [r4, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001006:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001008:	d417      	bmi.n	800103a <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800100a:	6823      	ldr	r3, [r4, #0]
 800100c:	681b      	ldr	r3, [r3, #0]
 800100e:	075b      	lsls	r3, r3, #29
 8001010:	d50a      	bpl.n	8001028 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001012:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001016:	9300      	str	r3, [sp, #0]
 8001018:	2200      	movs	r2, #0
 800101a:	462b      	mov	r3, r5
 800101c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001020:	4620      	mov	r0, r4
 8001022:	f7ff ff5d 	bl	8000ee0 <UART_WaitOnFlagUntilTimeout>
 8001026:	b9a0      	cbnz	r0, 8001052 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001028:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800102a:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800102c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001030:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001034:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001038:	e00c      	b.n	8001054 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800103a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800103e:	9300      	str	r3, [sp, #0]
 8001040:	4632      	mov	r2, r6
 8001042:	4603      	mov	r3, r0
 8001044:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001048:	4620      	mov	r0, r4
 800104a:	f7ff ff49 	bl	8000ee0 <UART_WaitOnFlagUntilTimeout>
 800104e:	2800      	cmp	r0, #0
 8001050:	d0db      	beq.n	800100a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001052:	2003      	movs	r0, #3
}
 8001054:	b002      	add	sp, #8
 8001056:	bd70      	pop	{r4, r5, r6, pc}

08001058 <HAL_UART_Init>:
{
 8001058:	b510      	push	{r4, lr}
  if(huart == NULL)
 800105a:	4604      	mov	r4, r0
 800105c:	b360      	cbz	r0, 80010b8 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800105e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001062:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001066:	b91b      	cbnz	r3, 8001070 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001068:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800106c:	f000 f9fe 	bl	800146c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001070:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001072:	2324      	movs	r3, #36	; 0x24
 8001074:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001078:	6813      	ldr	r3, [r2, #0]
 800107a:	f023 0301 	bic.w	r3, r3, #1
 800107e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001080:	4620      	mov	r0, r4
 8001082:	f7ff fe33 	bl	8000cec <UART_SetConfig>
 8001086:	2801      	cmp	r0, #1
 8001088:	d016      	beq.n	80010b8 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800108a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800108c:	b113      	cbz	r3, 8001094 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800108e:	4620      	mov	r0, r4
 8001090:	f7ff fed2 	bl	8000e38 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001094:	6823      	ldr	r3, [r4, #0]
 8001096:	685a      	ldr	r2, [r3, #4]
 8001098:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800109c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800109e:	689a      	ldr	r2, [r3, #8]
 80010a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80010a4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80010ac:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80010ae:	601a      	str	r2, [r3, #0]
}
 80010b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80010b4:	f7ff bf9e 	b.w	8000ff4 <UART_CheckIdleState>
}
 80010b8:	2001      	movs	r0, #1
 80010ba:	bd10      	pop	{r4, pc}

080010bc <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80010bc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80010c0:	2b21      	cmp	r3, #33	; 0x21
 80010c2:	d127      	bne.n	8001114 <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 80010c4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80010c8:	6802      	ldr	r2, [r0, #0]
 80010ca:	b29b      	uxth	r3, r3
 80010cc:	b94b      	cbnz	r3, 80010e2 <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80010ce:	6811      	ldr	r1, [r2, #0]
 80010d0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80010d4:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80010d6:	6811      	ldr	r1, [r2, #0]
 80010d8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80010dc:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 80010de:	2000      	movs	r0, #0
 80010e0:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80010e2:	6883      	ldr	r3, [r0, #8]
 80010e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80010e8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80010ea:	d10e      	bne.n	800110a <UART_Transmit_IT+0x4e>
 80010ec:	6901      	ldr	r1, [r0, #16]
 80010ee:	b961      	cbnz	r1, 800110a <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80010f0:	f833 1b02 	ldrh.w	r1, [r3], #2
 80010f4:	f3c1 0108 	ubfx	r1, r1, #0, #9
 80010f8:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 80010fa:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 80010fc:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001100:	3b01      	subs	r3, #1
 8001102:	b29b      	uxth	r3, r3
 8001104:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8001108:	e7e9      	b.n	80010de <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 800110a:	1c59      	adds	r1, r3, #1
 800110c:	64c1      	str	r1, [r0, #76]	; 0x4c
 800110e:	781b      	ldrb	r3, [r3, #0]
 8001110:	8513      	strh	r3, [r2, #40]	; 0x28
 8001112:	e7f3      	b.n	80010fc <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8001114:	2002      	movs	r0, #2
  }
}
 8001116:	4770      	bx	lr

08001118 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001118:	6801      	ldr	r1, [r0, #0]
{
 800111a:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800111c:	680b      	ldr	r3, [r1, #0]
 800111e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001122:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001124:	2320      	movs	r3, #32
 8001126:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 800112a:	f7ff fdd2 	bl	8000cd2 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 800112e:	2000      	movs	r0, #0
 8001130:	bd08      	pop	{r3, pc}

08001132 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001132:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001136:	2b22      	cmp	r3, #34	; 0x22
{
 8001138:	b510      	push	{r4, lr}
 800113a:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 800113c:	d129      	bne.n	8001192 <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800113e:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001140:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 8001142:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001146:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800114a:	ea02 0201 	and.w	r2, r2, r1
 800114e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001150:	d11b      	bne.n	800118a <UART_Receive_IT+0x58>
 8001152:	6901      	ldr	r1, [r0, #16]
 8001154:	b9c9      	cbnz	r1, 800118a <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8001156:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 800115a:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 800115c:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8001160:	3c01      	subs	r4, #1
 8001162:	b2a4      	uxth	r4, r4
 8001164:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8001168:	b96c      	cbnz	r4, 8001186 <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800116a:	6803      	ldr	r3, [r0, #0]
 800116c:	681a      	ldr	r2, [r3, #0]
 800116e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001172:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001174:	689a      	ldr	r2, [r3, #8]
 8001176:	f022 0201 	bic.w	r2, r2, #1
 800117a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800117c:	2320      	movs	r3, #32
 800117e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8001182:	f7ff fda7 	bl	8000cd4 <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 8001186:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8001188:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800118a:	1c59      	adds	r1, r3, #1
 800118c:	6541      	str	r1, [r0, #84]	; 0x54
 800118e:	701a      	strb	r2, [r3, #0]
 8001190:	e7e4      	b.n	800115c <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001192:	699a      	ldr	r2, [r3, #24]
 8001194:	f042 0208 	orr.w	r2, r2, #8
 8001198:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 800119a:	2002      	movs	r0, #2
 800119c:	bd10      	pop	{r4, pc}
	...

080011a0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80011a0:	6802      	ldr	r2, [r0, #0]
 80011a2:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80011a4:	6811      	ldr	r1, [r2, #0]
{
 80011a6:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 80011a8:	f013 050f 	ands.w	r5, r3, #15
{
 80011ac:	4604      	mov	r4, r0
  if (errorflags == RESET)
 80011ae:	d107      	bne.n	80011c0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80011b0:	069e      	lsls	r6, r3, #26
 80011b2:	d505      	bpl.n	80011c0 <HAL_UART_IRQHandler+0x20>
 80011b4:	068e      	lsls	r6, r1, #26
 80011b6:	d503      	bpl.n	80011c0 <HAL_UART_IRQHandler+0x20>
}
 80011b8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 80011bc:	f7ff bfb9 	b.w	8001132 <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 80011c0:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 80011c2:	2d00      	cmp	r5, #0
 80011c4:	d05c      	beq.n	8001280 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 80011c6:	f010 0501 	ands.w	r5, r0, #1
 80011ca:	d102      	bne.n	80011d2 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80011cc:	f411 7f90 	tst.w	r1, #288	; 0x120
 80011d0:	d056      	beq.n	8001280 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80011d2:	07d8      	lsls	r0, r3, #31
 80011d4:	d507      	bpl.n	80011e6 <HAL_UART_IRQHandler+0x46>
 80011d6:	05ce      	lsls	r6, r1, #23
 80011d8:	d505      	bpl.n	80011e6 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 80011da:	2001      	movs	r0, #1
 80011dc:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80011de:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80011e0:	f040 0001 	orr.w	r0, r0, #1
 80011e4:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011e6:	0798      	lsls	r0, r3, #30
 80011e8:	d506      	bpl.n	80011f8 <HAL_UART_IRQHandler+0x58>
 80011ea:	b12d      	cbz	r5, 80011f8 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 80011ec:	2002      	movs	r0, #2
 80011ee:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80011f0:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 80011f2:	f040 0004 	orr.w	r0, r0, #4
 80011f6:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80011f8:	075e      	lsls	r6, r3, #29
 80011fa:	d506      	bpl.n	800120a <HAL_UART_IRQHandler+0x6a>
 80011fc:	b12d      	cbz	r5, 800120a <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 80011fe:	2004      	movs	r0, #4
 8001200:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001202:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001204:	f040 0002 	orr.w	r0, r0, #2
 8001208:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 800120a:	0718      	lsls	r0, r3, #28
 800120c:	d507      	bpl.n	800121e <HAL_UART_IRQHandler+0x7e>
 800120e:	068e      	lsls	r6, r1, #26
 8001210:	d400      	bmi.n	8001214 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001212:	b125      	cbz	r5, 800121e <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8001214:	2008      	movs	r0, #8
 8001216:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001218:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 800121a:	4302      	orrs	r2, r0
 800121c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 800121e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001220:	2a00      	cmp	r2, #0
 8001222:	d050      	beq.n	80012c6 <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001224:	0698      	lsls	r0, r3, #26
 8001226:	d504      	bpl.n	8001232 <HAL_UART_IRQHandler+0x92>
 8001228:	068a      	lsls	r2, r1, #26
 800122a:	d502      	bpl.n	8001232 <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 800122c:	4620      	mov	r0, r4
 800122e:	f7ff ff80 	bl	8001132 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001232:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001234:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 8001236:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001238:	d404      	bmi.n	8001244 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 800123a:	6823      	ldr	r3, [r4, #0]
 800123c:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800123e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001242:	d019      	beq.n	8001278 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 8001244:	f7ff fd38 	bl	8000cb8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001248:	6823      	ldr	r3, [r4, #0]
 800124a:	689a      	ldr	r2, [r3, #8]
 800124c:	0656      	lsls	r6, r2, #25
 800124e:	d50f      	bpl.n	8001270 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001250:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001252:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001254:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001258:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800125a:	b148      	cbz	r0, 8001270 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800125c:	4b1a      	ldr	r3, [pc, #104]	; (80012c8 <HAL_UART_IRQHandler+0x128>)
 800125e:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001260:	f7ff f8ca 	bl	80003f8 <HAL_DMA_Abort_IT>
 8001264:	b378      	cbz	r0, 80012c6 <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001266:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8001268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800126c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800126e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001270:	4620      	mov	r0, r4
 8001272:	f7ff fd30 	bl	8000cd6 <HAL_UART_ErrorCallback>
 8001276:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001278:	f7ff fd2d 	bl	8000cd6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800127c:	66e5      	str	r5, [r4, #108]	; 0x6c
 800127e:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8001280:	02dd      	lsls	r5, r3, #11
 8001282:	d50e      	bpl.n	80012a2 <HAL_UART_IRQHandler+0x102>
 8001284:	0246      	lsls	r6, r0, #9
 8001286:	d50c      	bpl.n	80012a2 <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8001288:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800128c:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 800128e:	2320      	movs	r3, #32
 8001290:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 8001294:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8001296:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 800129a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800129e:	f000 b815 	b.w	80012cc <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80012a2:	061d      	lsls	r5, r3, #24
 80012a4:	d506      	bpl.n	80012b4 <HAL_UART_IRQHandler+0x114>
 80012a6:	0608      	lsls	r0, r1, #24
 80012a8:	d504      	bpl.n	80012b4 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 80012aa:	4620      	mov	r0, r4
}
 80012ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 80012b0:	f7ff bf04 	b.w	80010bc <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80012b4:	065a      	lsls	r2, r3, #25
 80012b6:	d506      	bpl.n	80012c6 <HAL_UART_IRQHandler+0x126>
 80012b8:	064b      	lsls	r3, r1, #25
 80012ba:	d504      	bpl.n	80012c6 <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 80012bc:	4620      	mov	r0, r4
}
 80012be:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 80012c2:	f7ff bf29 	b.w	8001118 <UART_EndTransmit_IT>
 80012c6:	bd70      	pop	{r4, r5, r6, pc}
 80012c8:	08000cd9 	.word	0x08000cd9

080012cc <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80012cc:	4770      	bx	lr

080012ce <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012ce:	b510      	push	{r4, lr}
 80012d0:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012d2:	2228      	movs	r2, #40	; 0x28
 80012d4:	2100      	movs	r1, #0
 80012d6:	a806      	add	r0, sp, #24
 80012d8:	f000 f994 	bl	8001604 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012dc:	2214      	movs	r2, #20
 80012de:	2100      	movs	r1, #0
 80012e0:	a801      	add	r0, sp, #4
 80012e2:	f000 f98f 	bl	8001604 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e6:	2301      	movs	r3, #1
 80012e8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ea:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012ec:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ee:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012f0:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80012f2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80012f6:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012f8:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012fa:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f7ff f95a 	bl	80005b4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001300:	230f      	movs	r3, #15
 8001302:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001304:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001308:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800130a:	4621      	mov	r1, r4
 800130c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800130e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001310:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001312:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001314:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001316:	f7ff fbf5 	bl	8000b04 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800131a:	b010      	add	sp, #64	; 0x40
 800131c:	bd10      	pop	{r4, pc}
	...

08001320 <tx_UART_int>:

}

/* USER CODE BEGIN 4 */
void tx_UART_int(UART_HandleTypeDef *huart, int data, uint32_t Timeout)
{
 8001320:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	int size = 1;
	uint8_t negativo = 0;

	if (data < 0) {	// Si los pulsos
 8001324:	1e0a      	subs	r2, r1, #0
{
 8001326:	b083      	sub	sp, #12
		data = -data;
 8001328:	bfb8      	it	lt
 800132a:	4252      	neglt	r2, r2
{
 800132c:	4605      	mov	r5, r0
 800132e:	af00      	add	r7, sp, #0
		negativo = 1;
 8001330:	bfb4      	ite	lt
 8001332:	f04f 0801 	movlt.w	r8, #1
	uint8_t negativo = 0;
 8001336:	f04f 0800 	movge.w	r8, #0
	}

	int numero = data;
 800133a:	4613      	mov	r3, r2
	int size = 1;
 800133c:	2401      	movs	r4, #1

	while(numero > 9) {
	  numero =  numero/10;
 800133e:	210a      	movs	r1, #10
	while(numero > 9) {
 8001340:	2b09      	cmp	r3, #9
 8001342:	dc32      	bgt.n	80013aa <tx_UART_int+0x8a>
	  size++;
	}

	char data_char[size];		// String de chars
 8001344:	1de3      	adds	r3, r4, #7
 8001346:	f023 0307 	bic.w	r3, r3, #7
 800134a:	ebad 0d03 	sub.w	sp, sp, r3
 800134e:	46e9      	mov	r9, sp
	uint8_t data_tx[size];	// String de uint8_t

	sprintf(data_char,"%d", data);	// Cada numero del int en un char
 8001350:	491a      	ldr	r1, [pc, #104]	; (80013bc <tx_UART_int+0x9c>)
	uint8_t data_tx[size];	// String de uint8_t
 8001352:	ebad 0d03 	sub.w	sp, sp, r3
	sprintf(data_char,"%d", data);	// Cada numero del int en un char
 8001356:	4648      	mov	r0, r9
 8001358:	f000 f95c 	bl	8001614 <siprintf>
	uint8_t data_tx[size];	// String de uint8_t
 800135c:	466e      	mov	r6, sp

	for(uint8_t i=0; i<size; i++ ) {			// Casting de char a uint8_t
 800135e:	2200      	movs	r2, #0
 8001360:	b2d3      	uxtb	r3, r2
 8001362:	429c      	cmp	r4, r3
 8001364:	f102 0201 	add.w	r2, r2, #1
 8001368:	dc23      	bgt.n	80013b2 <tx_UART_int+0x92>
		data_tx[i] = (uint8_t) data_char[i];
	}

	if (negativo) {		// Si el numero es negativo, transmite un "-" antes
 800136a:	f1b8 0f00 	cmp.w	r8, #0
 800136e:	d007      	beq.n	8001380 <tx_UART_int+0x60>
		uint8_t menos[] = "-";
 8001370:	232d      	movs	r3, #45	; 0x2d
 8001372:	80bb      	strh	r3, [r7, #4]
		HAL_UART_Transmit(huart, menos, 1, 10);
 8001374:	2201      	movs	r2, #1
 8001376:	230a      	movs	r3, #10
 8001378:	1d39      	adds	r1, r7, #4
 800137a:	4628      	mov	r0, r5
 800137c:	f7ff fde1 	bl	8000f42 <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(huart,data_tx,sizeof(data_tx), 10);	// TX por UART del array de uint8_t
 8001380:	b2a2      	uxth	r2, r4
 8001382:	4631      	mov	r1, r6
 8001384:	230a      	movs	r3, #10
 8001386:	4628      	mov	r0, r5
 8001388:	f7ff fddb 	bl	8000f42 <HAL_UART_Transmit>

	uint8_t salto[] = "\r\n";
 800138c:	4b0c      	ldr	r3, [pc, #48]	; (80013c0 <tx_UART_int+0xa0>)
 800138e:	881a      	ldrh	r2, [r3, #0]
 8001390:	789b      	ldrb	r3, [r3, #2]
 8001392:	80ba      	strh	r2, [r7, #4]
 8001394:	71bb      	strb	r3, [r7, #6]
	HAL_UART_Transmit(huart, salto, 2, 10);
 8001396:	1d39      	adds	r1, r7, #4
 8001398:	230a      	movs	r3, #10
 800139a:	2202      	movs	r2, #2
 800139c:	4628      	mov	r0, r5
 800139e:	f7ff fdd0 	bl	8000f42 <HAL_UART_Transmit>
}
 80013a2:	370c      	adds	r7, #12
 80013a4:	46bd      	mov	sp, r7
 80013a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  numero =  numero/10;
 80013aa:	fb93 f3f1 	sdiv	r3, r3, r1
	  size++;
 80013ae:	3401      	adds	r4, #1
 80013b0:	e7c6      	b.n	8001340 <tx_UART_int+0x20>
		data_tx[i] = (uint8_t) data_char[i];
 80013b2:	f819 1003 	ldrb.w	r1, [r9, r3]
 80013b6:	54f1      	strb	r1, [r6, r3]
 80013b8:	e7d2      	b.n	8001360 <tx_UART_int+0x40>
 80013ba:	bf00      	nop
 80013bc:	08001ea8 	.word	0x08001ea8
 80013c0:	08001eab 	.word	0x08001eab

080013c4 <main>:
{
 80013c4:	b513      	push	{r0, r1, r4, lr}
  HAL_Init();
 80013c6:	f7fe ff77 	bl	80002b8 <HAL_Init>
  SystemClock_Config();
 80013ca:	f7ff ff80 	bl	80012ce <SystemClock_Config>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013ce:	4b18      	ldr	r3, [pc, #96]	; (8001430 <main+0x6c>)
  huart2.Instance = USART2;
 80013d0:	4c18      	ldr	r4, [pc, #96]	; (8001434 <main+0x70>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013d2:	695a      	ldr	r2, [r3, #20]
  huart2.Init.BaudRate = 38400;
 80013d4:	4818      	ldr	r0, [pc, #96]	; (8001438 <main+0x74>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013d6:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 80013da:	615a      	str	r2, [r3, #20]
 80013dc:	695a      	ldr	r2, [r3, #20]
 80013de:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80013e2:	9200      	str	r2, [sp, #0]
 80013e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e6:	695a      	ldr	r2, [r3, #20]
 80013e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80013ec:	615a      	str	r2, [r3, #20]
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013f4:	9301      	str	r3, [sp, #4]
 80013f6:	9b01      	ldr	r3, [sp, #4]
  huart2.Init.BaudRate = 38400;
 80013f8:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80013fc:	e884 0009 	stmia.w	r4, {r0, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001400:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001402:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001404:	4620      	mov	r0, r4
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001406:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001408:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800140a:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800140c:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800140e:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001410:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001412:	6223      	str	r3, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001414:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001416:	f7ff fe1f 	bl	8001058 <HAL_UART_Init>
	  tx_UART_int(&huart2, data, 10);
 800141a:	4620      	mov	r0, r4
 800141c:	220a      	movs	r2, #10
 800141e:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001422:	f7ff ff7d 	bl	8001320 <tx_UART_int>
	  HAL_Delay(1000);
 8001426:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800142a:	f7fe ff69 	bl	8000300 <HAL_Delay>
 800142e:	e7f4      	b.n	800141a <main+0x56>
 8001430:	40021000 	.word	0x40021000
 8001434:	2000009c 	.word	0x2000009c
 8001438:	40004400 	.word	0x40004400

0800143c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143c:	4b0a      	ldr	r3, [pc, #40]	; (8001468 <HAL_MspInit+0x2c>)
 800143e:	699a      	ldr	r2, [r3, #24]
 8001440:	f042 0201 	orr.w	r2, r2, #1
 8001444:	619a      	str	r2, [r3, #24]
 8001446:	699a      	ldr	r2, [r3, #24]
{
 8001448:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800144a:	f002 0201 	and.w	r2, r2, #1
 800144e:	9200      	str	r2, [sp, #0]
 8001450:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001452:	69da      	ldr	r2, [r3, #28]
 8001454:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001458:	61da      	str	r2, [r3, #28]
 800145a:	69db      	ldr	r3, [r3, #28]
 800145c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001460:	9301      	str	r3, [sp, #4]
 8001462:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001464:	b002      	add	sp, #8
 8001466:	4770      	bx	lr
 8001468:	40021000 	.word	0x40021000

0800146c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800146c:	b510      	push	{r4, lr}
 800146e:	4604      	mov	r4, r0
 8001470:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001472:	2214      	movs	r2, #20
 8001474:	2100      	movs	r1, #0
 8001476:	a803      	add	r0, sp, #12
 8001478:	f000 f8c4 	bl	8001604 <memset>
  if(huart->Instance==USART2)
 800147c:	6822      	ldr	r2, [r4, #0]
 800147e:	4b17      	ldr	r3, [pc, #92]	; (80014dc <HAL_UART_MspInit+0x70>)
 8001480:	429a      	cmp	r2, r3
 8001482:	d129      	bne.n	80014d8 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001484:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001488:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800148a:	69da      	ldr	r2, [r3, #28]
 800148c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001490:	61da      	str	r2, [r3, #28]
 8001492:	69da      	ldr	r2, [r3, #28]
 8001494:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001498:	9201      	str	r2, [sp, #4]
 800149a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800149c:	695a      	ldr	r2, [r3, #20]
 800149e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014a2:	615a      	str	r2, [r3, #20]
 80014a4:	695b      	ldr	r3, [r3, #20]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	9302      	str	r3, [sp, #8]
 80014ac:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80014ae:	f248 0304 	movw	r3, #32772	; 0x8004
 80014b2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b4:	2302      	movs	r3, #2
 80014b6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014b8:	2303      	movs	r3, #3
 80014ba:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014c0:	2307      	movs	r3, #7
 80014c2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014c4:	f7fe ffbc 	bl	8000440 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80014c8:	2200      	movs	r2, #0
 80014ca:	2026      	movs	r0, #38	; 0x26
 80014cc:	4611      	mov	r1, r2
 80014ce:	f7fe ff3d 	bl	800034c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80014d2:	2026      	movs	r0, #38	; 0x26
 80014d4:	f7fe ff6e 	bl	80003b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014d8:	b008      	add	sp, #32
 80014da:	bd10      	pop	{r4, pc}
 80014dc:	40004400 	.word	0x40004400

080014e0 <NMI_Handler>:
 80014e0:	4770      	bx	lr

080014e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014e2:	e7fe      	b.n	80014e2 <HardFault_Handler>

080014e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80014e4:	e7fe      	b.n	80014e4 <MemManage_Handler>

080014e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80014e6:	e7fe      	b.n	80014e6 <BusFault_Handler>

080014e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80014e8:	e7fe      	b.n	80014e8 <UsageFault_Handler>

080014ea <SVC_Handler>:
 80014ea:	4770      	bx	lr

080014ec <DebugMon_Handler>:
 80014ec:	4770      	bx	lr

080014ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80014ee:	4770      	bx	lr

080014f0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80014f0:	f7fe bef4 	b.w	80002dc <HAL_IncTick>

080014f4 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80014f4:	4801      	ldr	r0, [pc, #4]	; (80014fc <USART2_IRQHandler+0x8>)
 80014f6:	f7ff be53 	b.w	80011a0 <HAL_UART_IRQHandler>
 80014fa:	bf00      	nop
 80014fc:	2000009c 	.word	0x2000009c

08001500 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001500:	4915      	ldr	r1, [pc, #84]	; (8001558 <SystemInit+0x58>)
 8001502:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001506:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800150a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800150e:	4b13      	ldr	r3, [pc, #76]	; (800155c <SystemInit+0x5c>)
 8001510:	681a      	ldr	r2, [r3, #0]
 8001512:	f042 0201 	orr.w	r2, r2, #1
 8001516:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001518:	6858      	ldr	r0, [r3, #4]
 800151a:	4a11      	ldr	r2, [pc, #68]	; (8001560 <SystemInit+0x60>)
 800151c:	4002      	ands	r2, r0
 800151e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001526:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800152a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800152c:	681a      	ldr	r2, [r3, #0]
 800152e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001532:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001534:	685a      	ldr	r2, [r3, #4]
 8001536:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800153a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800153c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800153e:	f022 020f 	bic.w	r2, r2, #15
 8001542:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001544:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001546:	4a07      	ldr	r2, [pc, #28]	; (8001564 <SystemInit+0x64>)
 8001548:	4002      	ands	r2, r0
 800154a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 800154c:	2200      	movs	r2, #0
 800154e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001550:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001554:	608b      	str	r3, [r1, #8]
 8001556:	4770      	bx	lr
 8001558:	e000ed00 	.word	0xe000ed00
 800155c:	40021000 	.word	0x40021000
 8001560:	f87fc00c 	.word	0xf87fc00c
 8001564:	ff00fccc 	.word	0xff00fccc

08001568 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001568:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015a0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 800156c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800156e:	e003      	b.n	8001578 <LoopCopyDataInit>

08001570 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001570:	4b0c      	ldr	r3, [pc, #48]	; (80015a4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001572:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001574:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001576:	3104      	adds	r1, #4

08001578 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001578:	480b      	ldr	r0, [pc, #44]	; (80015a8 <LoopForever+0xa>)
	ldr	r3, =_edata
 800157a:	4b0c      	ldr	r3, [pc, #48]	; (80015ac <LoopForever+0xe>)
	adds	r2, r0, r1
 800157c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800157e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001580:	d3f6      	bcc.n	8001570 <CopyDataInit>
	ldr	r2, =_sbss
 8001582:	4a0b      	ldr	r2, [pc, #44]	; (80015b0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001584:	e002      	b.n	800158c <LoopFillZerobss>

08001586 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001586:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001588:	f842 3b04 	str.w	r3, [r2], #4

0800158c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800158c:	4b09      	ldr	r3, [pc, #36]	; (80015b4 <LoopForever+0x16>)
	cmp	r2, r3
 800158e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001590:	d3f9      	bcc.n	8001586 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001592:	f7ff ffb5 	bl	8001500 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001596:	f000 f811 	bl	80015bc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800159a:	f7ff ff13 	bl	80013c4 <main>

0800159e <LoopForever>:

LoopForever:
    b LoopForever
 800159e:	e7fe      	b.n	800159e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015a0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80015a4:	08001f04 	.word	0x08001f04
	ldr	r0, =_sdata
 80015a8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015ac:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 80015b0:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 80015b4:	20000110 	.word	0x20000110

080015b8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015b8:	e7fe      	b.n	80015b8 <ADC1_2_IRQHandler>
	...

080015bc <__libc_init_array>:
 80015bc:	b570      	push	{r4, r5, r6, lr}
 80015be:	4e0d      	ldr	r6, [pc, #52]	; (80015f4 <__libc_init_array+0x38>)
 80015c0:	4c0d      	ldr	r4, [pc, #52]	; (80015f8 <__libc_init_array+0x3c>)
 80015c2:	1ba4      	subs	r4, r4, r6
 80015c4:	10a4      	asrs	r4, r4, #2
 80015c6:	2500      	movs	r5, #0
 80015c8:	42a5      	cmp	r5, r4
 80015ca:	d109      	bne.n	80015e0 <__libc_init_array+0x24>
 80015cc:	4e0b      	ldr	r6, [pc, #44]	; (80015fc <__libc_init_array+0x40>)
 80015ce:	4c0c      	ldr	r4, [pc, #48]	; (8001600 <__libc_init_array+0x44>)
 80015d0:	f000 fc4c 	bl	8001e6c <_init>
 80015d4:	1ba4      	subs	r4, r4, r6
 80015d6:	10a4      	asrs	r4, r4, #2
 80015d8:	2500      	movs	r5, #0
 80015da:	42a5      	cmp	r5, r4
 80015dc:	d105      	bne.n	80015ea <__libc_init_array+0x2e>
 80015de:	bd70      	pop	{r4, r5, r6, pc}
 80015e0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015e4:	4798      	blx	r3
 80015e6:	3501      	adds	r5, #1
 80015e8:	e7ee      	b.n	80015c8 <__libc_init_array+0xc>
 80015ea:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80015ee:	4798      	blx	r3
 80015f0:	3501      	adds	r5, #1
 80015f2:	e7f2      	b.n	80015da <__libc_init_array+0x1e>
 80015f4:	08001efc 	.word	0x08001efc
 80015f8:	08001efc 	.word	0x08001efc
 80015fc:	08001efc 	.word	0x08001efc
 8001600:	08001f00 	.word	0x08001f00

08001604 <memset>:
 8001604:	4402      	add	r2, r0
 8001606:	4603      	mov	r3, r0
 8001608:	4293      	cmp	r3, r2
 800160a:	d100      	bne.n	800160e <memset+0xa>
 800160c:	4770      	bx	lr
 800160e:	f803 1b01 	strb.w	r1, [r3], #1
 8001612:	e7f9      	b.n	8001608 <memset+0x4>

08001614 <siprintf>:
 8001614:	b40e      	push	{r1, r2, r3}
 8001616:	b500      	push	{lr}
 8001618:	b09c      	sub	sp, #112	; 0x70
 800161a:	f44f 7102 	mov.w	r1, #520	; 0x208
 800161e:	ab1d      	add	r3, sp, #116	; 0x74
 8001620:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001624:	9002      	str	r0, [sp, #8]
 8001626:	9006      	str	r0, [sp, #24]
 8001628:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800162c:	480a      	ldr	r0, [pc, #40]	; (8001658 <siprintf+0x44>)
 800162e:	9104      	str	r1, [sp, #16]
 8001630:	9107      	str	r1, [sp, #28]
 8001632:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001636:	f853 2b04 	ldr.w	r2, [r3], #4
 800163a:	f8ad 1016 	strh.w	r1, [sp, #22]
 800163e:	6800      	ldr	r0, [r0, #0]
 8001640:	9301      	str	r3, [sp, #4]
 8001642:	a902      	add	r1, sp, #8
 8001644:	f000 f866 	bl	8001714 <_svfiprintf_r>
 8001648:	9b02      	ldr	r3, [sp, #8]
 800164a:	2200      	movs	r2, #0
 800164c:	701a      	strb	r2, [r3, #0]
 800164e:	b01c      	add	sp, #112	; 0x70
 8001650:	f85d eb04 	ldr.w	lr, [sp], #4
 8001654:	b003      	add	sp, #12
 8001656:	4770      	bx	lr
 8001658:	2000000c 	.word	0x2000000c

0800165c <__ssputs_r>:
 800165c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001660:	688e      	ldr	r6, [r1, #8]
 8001662:	429e      	cmp	r6, r3
 8001664:	4682      	mov	sl, r0
 8001666:	460c      	mov	r4, r1
 8001668:	4691      	mov	r9, r2
 800166a:	4698      	mov	r8, r3
 800166c:	d835      	bhi.n	80016da <__ssputs_r+0x7e>
 800166e:	898a      	ldrh	r2, [r1, #12]
 8001670:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001674:	d031      	beq.n	80016da <__ssputs_r+0x7e>
 8001676:	6825      	ldr	r5, [r4, #0]
 8001678:	6909      	ldr	r1, [r1, #16]
 800167a:	1a6f      	subs	r7, r5, r1
 800167c:	6965      	ldr	r5, [r4, #20]
 800167e:	2302      	movs	r3, #2
 8001680:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001684:	fb95 f5f3 	sdiv	r5, r5, r3
 8001688:	f108 0301 	add.w	r3, r8, #1
 800168c:	443b      	add	r3, r7
 800168e:	429d      	cmp	r5, r3
 8001690:	bf38      	it	cc
 8001692:	461d      	movcc	r5, r3
 8001694:	0553      	lsls	r3, r2, #21
 8001696:	d531      	bpl.n	80016fc <__ssputs_r+0xa0>
 8001698:	4629      	mov	r1, r5
 800169a:	f000 fb39 	bl	8001d10 <_malloc_r>
 800169e:	4606      	mov	r6, r0
 80016a0:	b950      	cbnz	r0, 80016b8 <__ssputs_r+0x5c>
 80016a2:	230c      	movs	r3, #12
 80016a4:	f8ca 3000 	str.w	r3, [sl]
 80016a8:	89a3      	ldrh	r3, [r4, #12]
 80016aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80016ae:	81a3      	strh	r3, [r4, #12]
 80016b0:	f04f 30ff 	mov.w	r0, #4294967295
 80016b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016b8:	463a      	mov	r2, r7
 80016ba:	6921      	ldr	r1, [r4, #16]
 80016bc:	f000 fab4 	bl	8001c28 <memcpy>
 80016c0:	89a3      	ldrh	r3, [r4, #12]
 80016c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80016c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016ca:	81a3      	strh	r3, [r4, #12]
 80016cc:	6126      	str	r6, [r4, #16]
 80016ce:	6165      	str	r5, [r4, #20]
 80016d0:	443e      	add	r6, r7
 80016d2:	1bed      	subs	r5, r5, r7
 80016d4:	6026      	str	r6, [r4, #0]
 80016d6:	60a5      	str	r5, [r4, #8]
 80016d8:	4646      	mov	r6, r8
 80016da:	4546      	cmp	r6, r8
 80016dc:	bf28      	it	cs
 80016de:	4646      	movcs	r6, r8
 80016e0:	4632      	mov	r2, r6
 80016e2:	4649      	mov	r1, r9
 80016e4:	6820      	ldr	r0, [r4, #0]
 80016e6:	f000 faaa 	bl	8001c3e <memmove>
 80016ea:	68a3      	ldr	r3, [r4, #8]
 80016ec:	1b9b      	subs	r3, r3, r6
 80016ee:	60a3      	str	r3, [r4, #8]
 80016f0:	6823      	ldr	r3, [r4, #0]
 80016f2:	441e      	add	r6, r3
 80016f4:	6026      	str	r6, [r4, #0]
 80016f6:	2000      	movs	r0, #0
 80016f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80016fc:	462a      	mov	r2, r5
 80016fe:	f000 fb65 	bl	8001dcc <_realloc_r>
 8001702:	4606      	mov	r6, r0
 8001704:	2800      	cmp	r0, #0
 8001706:	d1e1      	bne.n	80016cc <__ssputs_r+0x70>
 8001708:	6921      	ldr	r1, [r4, #16]
 800170a:	4650      	mov	r0, sl
 800170c:	f000 fab2 	bl	8001c74 <_free_r>
 8001710:	e7c7      	b.n	80016a2 <__ssputs_r+0x46>
	...

08001714 <_svfiprintf_r>:
 8001714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001718:	b09d      	sub	sp, #116	; 0x74
 800171a:	4680      	mov	r8, r0
 800171c:	9303      	str	r3, [sp, #12]
 800171e:	898b      	ldrh	r3, [r1, #12]
 8001720:	061c      	lsls	r4, r3, #24
 8001722:	460d      	mov	r5, r1
 8001724:	4616      	mov	r6, r2
 8001726:	d50f      	bpl.n	8001748 <_svfiprintf_r+0x34>
 8001728:	690b      	ldr	r3, [r1, #16]
 800172a:	b96b      	cbnz	r3, 8001748 <_svfiprintf_r+0x34>
 800172c:	2140      	movs	r1, #64	; 0x40
 800172e:	f000 faef 	bl	8001d10 <_malloc_r>
 8001732:	6028      	str	r0, [r5, #0]
 8001734:	6128      	str	r0, [r5, #16]
 8001736:	b928      	cbnz	r0, 8001744 <_svfiprintf_r+0x30>
 8001738:	230c      	movs	r3, #12
 800173a:	f8c8 3000 	str.w	r3, [r8]
 800173e:	f04f 30ff 	mov.w	r0, #4294967295
 8001742:	e0c5      	b.n	80018d0 <_svfiprintf_r+0x1bc>
 8001744:	2340      	movs	r3, #64	; 0x40
 8001746:	616b      	str	r3, [r5, #20]
 8001748:	2300      	movs	r3, #0
 800174a:	9309      	str	r3, [sp, #36]	; 0x24
 800174c:	2320      	movs	r3, #32
 800174e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001752:	2330      	movs	r3, #48	; 0x30
 8001754:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001758:	f04f 0b01 	mov.w	fp, #1
 800175c:	4637      	mov	r7, r6
 800175e:	463c      	mov	r4, r7
 8001760:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001764:	2b00      	cmp	r3, #0
 8001766:	d13c      	bne.n	80017e2 <_svfiprintf_r+0xce>
 8001768:	ebb7 0a06 	subs.w	sl, r7, r6
 800176c:	d00b      	beq.n	8001786 <_svfiprintf_r+0x72>
 800176e:	4653      	mov	r3, sl
 8001770:	4632      	mov	r2, r6
 8001772:	4629      	mov	r1, r5
 8001774:	4640      	mov	r0, r8
 8001776:	f7ff ff71 	bl	800165c <__ssputs_r>
 800177a:	3001      	adds	r0, #1
 800177c:	f000 80a3 	beq.w	80018c6 <_svfiprintf_r+0x1b2>
 8001780:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001782:	4453      	add	r3, sl
 8001784:	9309      	str	r3, [sp, #36]	; 0x24
 8001786:	783b      	ldrb	r3, [r7, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	f000 809c 	beq.w	80018c6 <_svfiprintf_r+0x1b2>
 800178e:	2300      	movs	r3, #0
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	9304      	str	r3, [sp, #16]
 8001796:	9307      	str	r3, [sp, #28]
 8001798:	9205      	str	r2, [sp, #20]
 800179a:	9306      	str	r3, [sp, #24]
 800179c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80017a0:	931a      	str	r3, [sp, #104]	; 0x68
 80017a2:	2205      	movs	r2, #5
 80017a4:	7821      	ldrb	r1, [r4, #0]
 80017a6:	4850      	ldr	r0, [pc, #320]	; (80018e8 <_svfiprintf_r+0x1d4>)
 80017a8:	f7fe fd12 	bl	80001d0 <memchr>
 80017ac:	1c67      	adds	r7, r4, #1
 80017ae:	9b04      	ldr	r3, [sp, #16]
 80017b0:	b9d8      	cbnz	r0, 80017ea <_svfiprintf_r+0xd6>
 80017b2:	06d9      	lsls	r1, r3, #27
 80017b4:	bf44      	itt	mi
 80017b6:	2220      	movmi	r2, #32
 80017b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80017bc:	071a      	lsls	r2, r3, #28
 80017be:	bf44      	itt	mi
 80017c0:	222b      	movmi	r2, #43	; 0x2b
 80017c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80017c6:	7822      	ldrb	r2, [r4, #0]
 80017c8:	2a2a      	cmp	r2, #42	; 0x2a
 80017ca:	d016      	beq.n	80017fa <_svfiprintf_r+0xe6>
 80017cc:	9a07      	ldr	r2, [sp, #28]
 80017ce:	2100      	movs	r1, #0
 80017d0:	200a      	movs	r0, #10
 80017d2:	4627      	mov	r7, r4
 80017d4:	3401      	adds	r4, #1
 80017d6:	783b      	ldrb	r3, [r7, #0]
 80017d8:	3b30      	subs	r3, #48	; 0x30
 80017da:	2b09      	cmp	r3, #9
 80017dc:	d951      	bls.n	8001882 <_svfiprintf_r+0x16e>
 80017de:	b1c9      	cbz	r1, 8001814 <_svfiprintf_r+0x100>
 80017e0:	e011      	b.n	8001806 <_svfiprintf_r+0xf2>
 80017e2:	2b25      	cmp	r3, #37	; 0x25
 80017e4:	d0c0      	beq.n	8001768 <_svfiprintf_r+0x54>
 80017e6:	4627      	mov	r7, r4
 80017e8:	e7b9      	b.n	800175e <_svfiprintf_r+0x4a>
 80017ea:	4a3f      	ldr	r2, [pc, #252]	; (80018e8 <_svfiprintf_r+0x1d4>)
 80017ec:	1a80      	subs	r0, r0, r2
 80017ee:	fa0b f000 	lsl.w	r0, fp, r0
 80017f2:	4318      	orrs	r0, r3
 80017f4:	9004      	str	r0, [sp, #16]
 80017f6:	463c      	mov	r4, r7
 80017f8:	e7d3      	b.n	80017a2 <_svfiprintf_r+0x8e>
 80017fa:	9a03      	ldr	r2, [sp, #12]
 80017fc:	1d11      	adds	r1, r2, #4
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	9103      	str	r1, [sp, #12]
 8001802:	2a00      	cmp	r2, #0
 8001804:	db01      	blt.n	800180a <_svfiprintf_r+0xf6>
 8001806:	9207      	str	r2, [sp, #28]
 8001808:	e004      	b.n	8001814 <_svfiprintf_r+0x100>
 800180a:	4252      	negs	r2, r2
 800180c:	f043 0302 	orr.w	r3, r3, #2
 8001810:	9207      	str	r2, [sp, #28]
 8001812:	9304      	str	r3, [sp, #16]
 8001814:	783b      	ldrb	r3, [r7, #0]
 8001816:	2b2e      	cmp	r3, #46	; 0x2e
 8001818:	d10e      	bne.n	8001838 <_svfiprintf_r+0x124>
 800181a:	787b      	ldrb	r3, [r7, #1]
 800181c:	2b2a      	cmp	r3, #42	; 0x2a
 800181e:	f107 0101 	add.w	r1, r7, #1
 8001822:	d132      	bne.n	800188a <_svfiprintf_r+0x176>
 8001824:	9b03      	ldr	r3, [sp, #12]
 8001826:	1d1a      	adds	r2, r3, #4
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	9203      	str	r2, [sp, #12]
 800182c:	2b00      	cmp	r3, #0
 800182e:	bfb8      	it	lt
 8001830:	f04f 33ff 	movlt.w	r3, #4294967295
 8001834:	3702      	adds	r7, #2
 8001836:	9305      	str	r3, [sp, #20]
 8001838:	4c2c      	ldr	r4, [pc, #176]	; (80018ec <_svfiprintf_r+0x1d8>)
 800183a:	7839      	ldrb	r1, [r7, #0]
 800183c:	2203      	movs	r2, #3
 800183e:	4620      	mov	r0, r4
 8001840:	f7fe fcc6 	bl	80001d0 <memchr>
 8001844:	b138      	cbz	r0, 8001856 <_svfiprintf_r+0x142>
 8001846:	2340      	movs	r3, #64	; 0x40
 8001848:	1b00      	subs	r0, r0, r4
 800184a:	fa03 f000 	lsl.w	r0, r3, r0
 800184e:	9b04      	ldr	r3, [sp, #16]
 8001850:	4303      	orrs	r3, r0
 8001852:	9304      	str	r3, [sp, #16]
 8001854:	3701      	adds	r7, #1
 8001856:	7839      	ldrb	r1, [r7, #0]
 8001858:	4825      	ldr	r0, [pc, #148]	; (80018f0 <_svfiprintf_r+0x1dc>)
 800185a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800185e:	2206      	movs	r2, #6
 8001860:	1c7e      	adds	r6, r7, #1
 8001862:	f7fe fcb5 	bl	80001d0 <memchr>
 8001866:	2800      	cmp	r0, #0
 8001868:	d035      	beq.n	80018d6 <_svfiprintf_r+0x1c2>
 800186a:	4b22      	ldr	r3, [pc, #136]	; (80018f4 <_svfiprintf_r+0x1e0>)
 800186c:	b9fb      	cbnz	r3, 80018ae <_svfiprintf_r+0x19a>
 800186e:	9b03      	ldr	r3, [sp, #12]
 8001870:	3307      	adds	r3, #7
 8001872:	f023 0307 	bic.w	r3, r3, #7
 8001876:	3308      	adds	r3, #8
 8001878:	9303      	str	r3, [sp, #12]
 800187a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800187c:	444b      	add	r3, r9
 800187e:	9309      	str	r3, [sp, #36]	; 0x24
 8001880:	e76c      	b.n	800175c <_svfiprintf_r+0x48>
 8001882:	fb00 3202 	mla	r2, r0, r2, r3
 8001886:	2101      	movs	r1, #1
 8001888:	e7a3      	b.n	80017d2 <_svfiprintf_r+0xbe>
 800188a:	2300      	movs	r3, #0
 800188c:	9305      	str	r3, [sp, #20]
 800188e:	4618      	mov	r0, r3
 8001890:	240a      	movs	r4, #10
 8001892:	460f      	mov	r7, r1
 8001894:	3101      	adds	r1, #1
 8001896:	783a      	ldrb	r2, [r7, #0]
 8001898:	3a30      	subs	r2, #48	; 0x30
 800189a:	2a09      	cmp	r2, #9
 800189c:	d903      	bls.n	80018a6 <_svfiprintf_r+0x192>
 800189e:	2b00      	cmp	r3, #0
 80018a0:	d0ca      	beq.n	8001838 <_svfiprintf_r+0x124>
 80018a2:	9005      	str	r0, [sp, #20]
 80018a4:	e7c8      	b.n	8001838 <_svfiprintf_r+0x124>
 80018a6:	fb04 2000 	mla	r0, r4, r0, r2
 80018aa:	2301      	movs	r3, #1
 80018ac:	e7f1      	b.n	8001892 <_svfiprintf_r+0x17e>
 80018ae:	ab03      	add	r3, sp, #12
 80018b0:	9300      	str	r3, [sp, #0]
 80018b2:	462a      	mov	r2, r5
 80018b4:	4b10      	ldr	r3, [pc, #64]	; (80018f8 <_svfiprintf_r+0x1e4>)
 80018b6:	a904      	add	r1, sp, #16
 80018b8:	4640      	mov	r0, r8
 80018ba:	f3af 8000 	nop.w
 80018be:	f1b0 3fff 	cmp.w	r0, #4294967295
 80018c2:	4681      	mov	r9, r0
 80018c4:	d1d9      	bne.n	800187a <_svfiprintf_r+0x166>
 80018c6:	89ab      	ldrh	r3, [r5, #12]
 80018c8:	065b      	lsls	r3, r3, #25
 80018ca:	f53f af38 	bmi.w	800173e <_svfiprintf_r+0x2a>
 80018ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80018d0:	b01d      	add	sp, #116	; 0x74
 80018d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018d6:	ab03      	add	r3, sp, #12
 80018d8:	9300      	str	r3, [sp, #0]
 80018da:	462a      	mov	r2, r5
 80018dc:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <_svfiprintf_r+0x1e4>)
 80018de:	a904      	add	r1, sp, #16
 80018e0:	4640      	mov	r0, r8
 80018e2:	f000 f881 	bl	80019e8 <_printf_i>
 80018e6:	e7ea      	b.n	80018be <_svfiprintf_r+0x1aa>
 80018e8:	08001ec6 	.word	0x08001ec6
 80018ec:	08001ecc 	.word	0x08001ecc
 80018f0:	08001ed0 	.word	0x08001ed0
 80018f4:	00000000 	.word	0x00000000
 80018f8:	0800165d 	.word	0x0800165d

080018fc <_printf_common>:
 80018fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001900:	4691      	mov	r9, r2
 8001902:	461f      	mov	r7, r3
 8001904:	688a      	ldr	r2, [r1, #8]
 8001906:	690b      	ldr	r3, [r1, #16]
 8001908:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800190c:	4293      	cmp	r3, r2
 800190e:	bfb8      	it	lt
 8001910:	4613      	movlt	r3, r2
 8001912:	f8c9 3000 	str.w	r3, [r9]
 8001916:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800191a:	4606      	mov	r6, r0
 800191c:	460c      	mov	r4, r1
 800191e:	b112      	cbz	r2, 8001926 <_printf_common+0x2a>
 8001920:	3301      	adds	r3, #1
 8001922:	f8c9 3000 	str.w	r3, [r9]
 8001926:	6823      	ldr	r3, [r4, #0]
 8001928:	0699      	lsls	r1, r3, #26
 800192a:	bf42      	ittt	mi
 800192c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001930:	3302      	addmi	r3, #2
 8001932:	f8c9 3000 	strmi.w	r3, [r9]
 8001936:	6825      	ldr	r5, [r4, #0]
 8001938:	f015 0506 	ands.w	r5, r5, #6
 800193c:	d107      	bne.n	800194e <_printf_common+0x52>
 800193e:	f104 0a19 	add.w	sl, r4, #25
 8001942:	68e3      	ldr	r3, [r4, #12]
 8001944:	f8d9 2000 	ldr.w	r2, [r9]
 8001948:	1a9b      	subs	r3, r3, r2
 800194a:	429d      	cmp	r5, r3
 800194c:	db29      	blt.n	80019a2 <_printf_common+0xa6>
 800194e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001952:	6822      	ldr	r2, [r4, #0]
 8001954:	3300      	adds	r3, #0
 8001956:	bf18      	it	ne
 8001958:	2301      	movne	r3, #1
 800195a:	0692      	lsls	r2, r2, #26
 800195c:	d42e      	bmi.n	80019bc <_printf_common+0xc0>
 800195e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001962:	4639      	mov	r1, r7
 8001964:	4630      	mov	r0, r6
 8001966:	47c0      	blx	r8
 8001968:	3001      	adds	r0, #1
 800196a:	d021      	beq.n	80019b0 <_printf_common+0xb4>
 800196c:	6823      	ldr	r3, [r4, #0]
 800196e:	68e5      	ldr	r5, [r4, #12]
 8001970:	f8d9 2000 	ldr.w	r2, [r9]
 8001974:	f003 0306 	and.w	r3, r3, #6
 8001978:	2b04      	cmp	r3, #4
 800197a:	bf08      	it	eq
 800197c:	1aad      	subeq	r5, r5, r2
 800197e:	68a3      	ldr	r3, [r4, #8]
 8001980:	6922      	ldr	r2, [r4, #16]
 8001982:	bf0c      	ite	eq
 8001984:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001988:	2500      	movne	r5, #0
 800198a:	4293      	cmp	r3, r2
 800198c:	bfc4      	itt	gt
 800198e:	1a9b      	subgt	r3, r3, r2
 8001990:	18ed      	addgt	r5, r5, r3
 8001992:	f04f 0900 	mov.w	r9, #0
 8001996:	341a      	adds	r4, #26
 8001998:	454d      	cmp	r5, r9
 800199a:	d11b      	bne.n	80019d4 <_printf_common+0xd8>
 800199c:	2000      	movs	r0, #0
 800199e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019a2:	2301      	movs	r3, #1
 80019a4:	4652      	mov	r2, sl
 80019a6:	4639      	mov	r1, r7
 80019a8:	4630      	mov	r0, r6
 80019aa:	47c0      	blx	r8
 80019ac:	3001      	adds	r0, #1
 80019ae:	d103      	bne.n	80019b8 <_printf_common+0xbc>
 80019b0:	f04f 30ff 	mov.w	r0, #4294967295
 80019b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80019b8:	3501      	adds	r5, #1
 80019ba:	e7c2      	b.n	8001942 <_printf_common+0x46>
 80019bc:	18e1      	adds	r1, r4, r3
 80019be:	1c5a      	adds	r2, r3, #1
 80019c0:	2030      	movs	r0, #48	; 0x30
 80019c2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80019c6:	4422      	add	r2, r4
 80019c8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80019cc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80019d0:	3302      	adds	r3, #2
 80019d2:	e7c4      	b.n	800195e <_printf_common+0x62>
 80019d4:	2301      	movs	r3, #1
 80019d6:	4622      	mov	r2, r4
 80019d8:	4639      	mov	r1, r7
 80019da:	4630      	mov	r0, r6
 80019dc:	47c0      	blx	r8
 80019de:	3001      	adds	r0, #1
 80019e0:	d0e6      	beq.n	80019b0 <_printf_common+0xb4>
 80019e2:	f109 0901 	add.w	r9, r9, #1
 80019e6:	e7d7      	b.n	8001998 <_printf_common+0x9c>

080019e8 <_printf_i>:
 80019e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019ec:	4617      	mov	r7, r2
 80019ee:	7e0a      	ldrb	r2, [r1, #24]
 80019f0:	b085      	sub	sp, #20
 80019f2:	2a6e      	cmp	r2, #110	; 0x6e
 80019f4:	4698      	mov	r8, r3
 80019f6:	4606      	mov	r6, r0
 80019f8:	460c      	mov	r4, r1
 80019fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80019fc:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001a00:	f000 80bc 	beq.w	8001b7c <_printf_i+0x194>
 8001a04:	d81a      	bhi.n	8001a3c <_printf_i+0x54>
 8001a06:	2a63      	cmp	r2, #99	; 0x63
 8001a08:	d02e      	beq.n	8001a68 <_printf_i+0x80>
 8001a0a:	d80a      	bhi.n	8001a22 <_printf_i+0x3a>
 8001a0c:	2a00      	cmp	r2, #0
 8001a0e:	f000 80c8 	beq.w	8001ba2 <_printf_i+0x1ba>
 8001a12:	2a58      	cmp	r2, #88	; 0x58
 8001a14:	f000 808a 	beq.w	8001b2c <_printf_i+0x144>
 8001a18:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001a1c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001a20:	e02a      	b.n	8001a78 <_printf_i+0x90>
 8001a22:	2a64      	cmp	r2, #100	; 0x64
 8001a24:	d001      	beq.n	8001a2a <_printf_i+0x42>
 8001a26:	2a69      	cmp	r2, #105	; 0x69
 8001a28:	d1f6      	bne.n	8001a18 <_printf_i+0x30>
 8001a2a:	6821      	ldr	r1, [r4, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001a32:	d023      	beq.n	8001a7c <_printf_i+0x94>
 8001a34:	1d11      	adds	r1, r2, #4
 8001a36:	6019      	str	r1, [r3, #0]
 8001a38:	6813      	ldr	r3, [r2, #0]
 8001a3a:	e027      	b.n	8001a8c <_printf_i+0xa4>
 8001a3c:	2a73      	cmp	r2, #115	; 0x73
 8001a3e:	f000 80b4 	beq.w	8001baa <_printf_i+0x1c2>
 8001a42:	d808      	bhi.n	8001a56 <_printf_i+0x6e>
 8001a44:	2a6f      	cmp	r2, #111	; 0x6f
 8001a46:	d02a      	beq.n	8001a9e <_printf_i+0xb6>
 8001a48:	2a70      	cmp	r2, #112	; 0x70
 8001a4a:	d1e5      	bne.n	8001a18 <_printf_i+0x30>
 8001a4c:	680a      	ldr	r2, [r1, #0]
 8001a4e:	f042 0220 	orr.w	r2, r2, #32
 8001a52:	600a      	str	r2, [r1, #0]
 8001a54:	e003      	b.n	8001a5e <_printf_i+0x76>
 8001a56:	2a75      	cmp	r2, #117	; 0x75
 8001a58:	d021      	beq.n	8001a9e <_printf_i+0xb6>
 8001a5a:	2a78      	cmp	r2, #120	; 0x78
 8001a5c:	d1dc      	bne.n	8001a18 <_printf_i+0x30>
 8001a5e:	2278      	movs	r2, #120	; 0x78
 8001a60:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001a64:	496e      	ldr	r1, [pc, #440]	; (8001c20 <_printf_i+0x238>)
 8001a66:	e064      	b.n	8001b32 <_printf_i+0x14a>
 8001a68:	681a      	ldr	r2, [r3, #0]
 8001a6a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001a6e:	1d11      	adds	r1, r2, #4
 8001a70:	6019      	str	r1, [r3, #0]
 8001a72:	6813      	ldr	r3, [r2, #0]
 8001a74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001a78:	2301      	movs	r3, #1
 8001a7a:	e0a3      	b.n	8001bc4 <_printf_i+0x1dc>
 8001a7c:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001a80:	f102 0104 	add.w	r1, r2, #4
 8001a84:	6019      	str	r1, [r3, #0]
 8001a86:	d0d7      	beq.n	8001a38 <_printf_i+0x50>
 8001a88:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	da03      	bge.n	8001a98 <_printf_i+0xb0>
 8001a90:	222d      	movs	r2, #45	; 0x2d
 8001a92:	425b      	negs	r3, r3
 8001a94:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001a98:	4962      	ldr	r1, [pc, #392]	; (8001c24 <_printf_i+0x23c>)
 8001a9a:	220a      	movs	r2, #10
 8001a9c:	e017      	b.n	8001ace <_printf_i+0xe6>
 8001a9e:	6820      	ldr	r0, [r4, #0]
 8001aa0:	6819      	ldr	r1, [r3, #0]
 8001aa2:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001aa6:	d003      	beq.n	8001ab0 <_printf_i+0xc8>
 8001aa8:	1d08      	adds	r0, r1, #4
 8001aaa:	6018      	str	r0, [r3, #0]
 8001aac:	680b      	ldr	r3, [r1, #0]
 8001aae:	e006      	b.n	8001abe <_printf_i+0xd6>
 8001ab0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001ab4:	f101 0004 	add.w	r0, r1, #4
 8001ab8:	6018      	str	r0, [r3, #0]
 8001aba:	d0f7      	beq.n	8001aac <_printf_i+0xc4>
 8001abc:	880b      	ldrh	r3, [r1, #0]
 8001abe:	4959      	ldr	r1, [pc, #356]	; (8001c24 <_printf_i+0x23c>)
 8001ac0:	2a6f      	cmp	r2, #111	; 0x6f
 8001ac2:	bf14      	ite	ne
 8001ac4:	220a      	movne	r2, #10
 8001ac6:	2208      	moveq	r2, #8
 8001ac8:	2000      	movs	r0, #0
 8001aca:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8001ace:	6865      	ldr	r5, [r4, #4]
 8001ad0:	60a5      	str	r5, [r4, #8]
 8001ad2:	2d00      	cmp	r5, #0
 8001ad4:	f2c0 809c 	blt.w	8001c10 <_printf_i+0x228>
 8001ad8:	6820      	ldr	r0, [r4, #0]
 8001ada:	f020 0004 	bic.w	r0, r0, #4
 8001ade:	6020      	str	r0, [r4, #0]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d13f      	bne.n	8001b64 <_printf_i+0x17c>
 8001ae4:	2d00      	cmp	r5, #0
 8001ae6:	f040 8095 	bne.w	8001c14 <_printf_i+0x22c>
 8001aea:	4675      	mov	r5, lr
 8001aec:	2a08      	cmp	r2, #8
 8001aee:	d10b      	bne.n	8001b08 <_printf_i+0x120>
 8001af0:	6823      	ldr	r3, [r4, #0]
 8001af2:	07da      	lsls	r2, r3, #31
 8001af4:	d508      	bpl.n	8001b08 <_printf_i+0x120>
 8001af6:	6923      	ldr	r3, [r4, #16]
 8001af8:	6862      	ldr	r2, [r4, #4]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	bfde      	ittt	le
 8001afe:	2330      	movle	r3, #48	; 0x30
 8001b00:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001b04:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001b08:	ebae 0305 	sub.w	r3, lr, r5
 8001b0c:	6123      	str	r3, [r4, #16]
 8001b0e:	f8cd 8000 	str.w	r8, [sp]
 8001b12:	463b      	mov	r3, r7
 8001b14:	aa03      	add	r2, sp, #12
 8001b16:	4621      	mov	r1, r4
 8001b18:	4630      	mov	r0, r6
 8001b1a:	f7ff feef 	bl	80018fc <_printf_common>
 8001b1e:	3001      	adds	r0, #1
 8001b20:	d155      	bne.n	8001bce <_printf_i+0x1e6>
 8001b22:	f04f 30ff 	mov.w	r0, #4294967295
 8001b26:	b005      	add	sp, #20
 8001b28:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001b2c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8001b30:	493c      	ldr	r1, [pc, #240]	; (8001c24 <_printf_i+0x23c>)
 8001b32:	6822      	ldr	r2, [r4, #0]
 8001b34:	6818      	ldr	r0, [r3, #0]
 8001b36:	f012 0f80 	tst.w	r2, #128	; 0x80
 8001b3a:	f100 0504 	add.w	r5, r0, #4
 8001b3e:	601d      	str	r5, [r3, #0]
 8001b40:	d001      	beq.n	8001b46 <_printf_i+0x15e>
 8001b42:	6803      	ldr	r3, [r0, #0]
 8001b44:	e002      	b.n	8001b4c <_printf_i+0x164>
 8001b46:	0655      	lsls	r5, r2, #25
 8001b48:	d5fb      	bpl.n	8001b42 <_printf_i+0x15a>
 8001b4a:	8803      	ldrh	r3, [r0, #0]
 8001b4c:	07d0      	lsls	r0, r2, #31
 8001b4e:	bf44      	itt	mi
 8001b50:	f042 0220 	orrmi.w	r2, r2, #32
 8001b54:	6022      	strmi	r2, [r4, #0]
 8001b56:	b91b      	cbnz	r3, 8001b60 <_printf_i+0x178>
 8001b58:	6822      	ldr	r2, [r4, #0]
 8001b5a:	f022 0220 	bic.w	r2, r2, #32
 8001b5e:	6022      	str	r2, [r4, #0]
 8001b60:	2210      	movs	r2, #16
 8001b62:	e7b1      	b.n	8001ac8 <_printf_i+0xe0>
 8001b64:	4675      	mov	r5, lr
 8001b66:	fbb3 f0f2 	udiv	r0, r3, r2
 8001b6a:	fb02 3310 	mls	r3, r2, r0, r3
 8001b6e:	5ccb      	ldrb	r3, [r1, r3]
 8001b70:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8001b74:	4603      	mov	r3, r0
 8001b76:	2800      	cmp	r0, #0
 8001b78:	d1f5      	bne.n	8001b66 <_printf_i+0x17e>
 8001b7a:	e7b7      	b.n	8001aec <_printf_i+0x104>
 8001b7c:	6808      	ldr	r0, [r1, #0]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	6949      	ldr	r1, [r1, #20]
 8001b82:	f010 0f80 	tst.w	r0, #128	; 0x80
 8001b86:	d004      	beq.n	8001b92 <_printf_i+0x1aa>
 8001b88:	1d10      	adds	r0, r2, #4
 8001b8a:	6018      	str	r0, [r3, #0]
 8001b8c:	6813      	ldr	r3, [r2, #0]
 8001b8e:	6019      	str	r1, [r3, #0]
 8001b90:	e007      	b.n	8001ba2 <_printf_i+0x1ba>
 8001b92:	f010 0f40 	tst.w	r0, #64	; 0x40
 8001b96:	f102 0004 	add.w	r0, r2, #4
 8001b9a:	6018      	str	r0, [r3, #0]
 8001b9c:	6813      	ldr	r3, [r2, #0]
 8001b9e:	d0f6      	beq.n	8001b8e <_printf_i+0x1a6>
 8001ba0:	8019      	strh	r1, [r3, #0]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	6123      	str	r3, [r4, #16]
 8001ba6:	4675      	mov	r5, lr
 8001ba8:	e7b1      	b.n	8001b0e <_printf_i+0x126>
 8001baa:	681a      	ldr	r2, [r3, #0]
 8001bac:	1d11      	adds	r1, r2, #4
 8001bae:	6019      	str	r1, [r3, #0]
 8001bb0:	6815      	ldr	r5, [r2, #0]
 8001bb2:	6862      	ldr	r2, [r4, #4]
 8001bb4:	2100      	movs	r1, #0
 8001bb6:	4628      	mov	r0, r5
 8001bb8:	f7fe fb0a 	bl	80001d0 <memchr>
 8001bbc:	b108      	cbz	r0, 8001bc2 <_printf_i+0x1da>
 8001bbe:	1b40      	subs	r0, r0, r5
 8001bc0:	6060      	str	r0, [r4, #4]
 8001bc2:	6863      	ldr	r3, [r4, #4]
 8001bc4:	6123      	str	r3, [r4, #16]
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001bcc:	e79f      	b.n	8001b0e <_printf_i+0x126>
 8001bce:	6923      	ldr	r3, [r4, #16]
 8001bd0:	462a      	mov	r2, r5
 8001bd2:	4639      	mov	r1, r7
 8001bd4:	4630      	mov	r0, r6
 8001bd6:	47c0      	blx	r8
 8001bd8:	3001      	adds	r0, #1
 8001bda:	d0a2      	beq.n	8001b22 <_printf_i+0x13a>
 8001bdc:	6823      	ldr	r3, [r4, #0]
 8001bde:	079b      	lsls	r3, r3, #30
 8001be0:	d507      	bpl.n	8001bf2 <_printf_i+0x20a>
 8001be2:	2500      	movs	r5, #0
 8001be4:	f104 0919 	add.w	r9, r4, #25
 8001be8:	68e3      	ldr	r3, [r4, #12]
 8001bea:	9a03      	ldr	r2, [sp, #12]
 8001bec:	1a9b      	subs	r3, r3, r2
 8001bee:	429d      	cmp	r5, r3
 8001bf0:	db05      	blt.n	8001bfe <_printf_i+0x216>
 8001bf2:	68e0      	ldr	r0, [r4, #12]
 8001bf4:	9b03      	ldr	r3, [sp, #12]
 8001bf6:	4298      	cmp	r0, r3
 8001bf8:	bfb8      	it	lt
 8001bfa:	4618      	movlt	r0, r3
 8001bfc:	e793      	b.n	8001b26 <_printf_i+0x13e>
 8001bfe:	2301      	movs	r3, #1
 8001c00:	464a      	mov	r2, r9
 8001c02:	4639      	mov	r1, r7
 8001c04:	4630      	mov	r0, r6
 8001c06:	47c0      	blx	r8
 8001c08:	3001      	adds	r0, #1
 8001c0a:	d08a      	beq.n	8001b22 <_printf_i+0x13a>
 8001c0c:	3501      	adds	r5, #1
 8001c0e:	e7eb      	b.n	8001be8 <_printf_i+0x200>
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1a7      	bne.n	8001b64 <_printf_i+0x17c>
 8001c14:	780b      	ldrb	r3, [r1, #0]
 8001c16:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001c1a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001c1e:	e765      	b.n	8001aec <_printf_i+0x104>
 8001c20:	08001ee8 	.word	0x08001ee8
 8001c24:	08001ed7 	.word	0x08001ed7

08001c28 <memcpy>:
 8001c28:	b510      	push	{r4, lr}
 8001c2a:	1e43      	subs	r3, r0, #1
 8001c2c:	440a      	add	r2, r1
 8001c2e:	4291      	cmp	r1, r2
 8001c30:	d100      	bne.n	8001c34 <memcpy+0xc>
 8001c32:	bd10      	pop	{r4, pc}
 8001c34:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c38:	f803 4f01 	strb.w	r4, [r3, #1]!
 8001c3c:	e7f7      	b.n	8001c2e <memcpy+0x6>

08001c3e <memmove>:
 8001c3e:	4288      	cmp	r0, r1
 8001c40:	b510      	push	{r4, lr}
 8001c42:	eb01 0302 	add.w	r3, r1, r2
 8001c46:	d803      	bhi.n	8001c50 <memmove+0x12>
 8001c48:	1e42      	subs	r2, r0, #1
 8001c4a:	4299      	cmp	r1, r3
 8001c4c:	d10c      	bne.n	8001c68 <memmove+0x2a>
 8001c4e:	bd10      	pop	{r4, pc}
 8001c50:	4298      	cmp	r0, r3
 8001c52:	d2f9      	bcs.n	8001c48 <memmove+0xa>
 8001c54:	1881      	adds	r1, r0, r2
 8001c56:	1ad2      	subs	r2, r2, r3
 8001c58:	42d3      	cmn	r3, r2
 8001c5a:	d100      	bne.n	8001c5e <memmove+0x20>
 8001c5c:	bd10      	pop	{r4, pc}
 8001c5e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8001c62:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8001c66:	e7f7      	b.n	8001c58 <memmove+0x1a>
 8001c68:	f811 4b01 	ldrb.w	r4, [r1], #1
 8001c6c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8001c70:	e7eb      	b.n	8001c4a <memmove+0xc>
	...

08001c74 <_free_r>:
 8001c74:	b538      	push	{r3, r4, r5, lr}
 8001c76:	4605      	mov	r5, r0
 8001c78:	2900      	cmp	r1, #0
 8001c7a:	d045      	beq.n	8001d08 <_free_r+0x94>
 8001c7c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001c80:	1f0c      	subs	r4, r1, #4
 8001c82:	2b00      	cmp	r3, #0
 8001c84:	bfb8      	it	lt
 8001c86:	18e4      	addlt	r4, r4, r3
 8001c88:	f000 f8d6 	bl	8001e38 <__malloc_lock>
 8001c8c:	4a1f      	ldr	r2, [pc, #124]	; (8001d0c <_free_r+0x98>)
 8001c8e:	6813      	ldr	r3, [r2, #0]
 8001c90:	4610      	mov	r0, r2
 8001c92:	b933      	cbnz	r3, 8001ca2 <_free_r+0x2e>
 8001c94:	6063      	str	r3, [r4, #4]
 8001c96:	6014      	str	r4, [r2, #0]
 8001c98:	4628      	mov	r0, r5
 8001c9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001c9e:	f000 b8cc 	b.w	8001e3a <__malloc_unlock>
 8001ca2:	42a3      	cmp	r3, r4
 8001ca4:	d90c      	bls.n	8001cc0 <_free_r+0x4c>
 8001ca6:	6821      	ldr	r1, [r4, #0]
 8001ca8:	1862      	adds	r2, r4, r1
 8001caa:	4293      	cmp	r3, r2
 8001cac:	bf04      	itt	eq
 8001cae:	681a      	ldreq	r2, [r3, #0]
 8001cb0:	685b      	ldreq	r3, [r3, #4]
 8001cb2:	6063      	str	r3, [r4, #4]
 8001cb4:	bf04      	itt	eq
 8001cb6:	1852      	addeq	r2, r2, r1
 8001cb8:	6022      	streq	r2, [r4, #0]
 8001cba:	6004      	str	r4, [r0, #0]
 8001cbc:	e7ec      	b.n	8001c98 <_free_r+0x24>
 8001cbe:	4613      	mov	r3, r2
 8001cc0:	685a      	ldr	r2, [r3, #4]
 8001cc2:	b10a      	cbz	r2, 8001cc8 <_free_r+0x54>
 8001cc4:	42a2      	cmp	r2, r4
 8001cc6:	d9fa      	bls.n	8001cbe <_free_r+0x4a>
 8001cc8:	6819      	ldr	r1, [r3, #0]
 8001cca:	1858      	adds	r0, r3, r1
 8001ccc:	42a0      	cmp	r0, r4
 8001cce:	d10b      	bne.n	8001ce8 <_free_r+0x74>
 8001cd0:	6820      	ldr	r0, [r4, #0]
 8001cd2:	4401      	add	r1, r0
 8001cd4:	1858      	adds	r0, r3, r1
 8001cd6:	4282      	cmp	r2, r0
 8001cd8:	6019      	str	r1, [r3, #0]
 8001cda:	d1dd      	bne.n	8001c98 <_free_r+0x24>
 8001cdc:	6810      	ldr	r0, [r2, #0]
 8001cde:	6852      	ldr	r2, [r2, #4]
 8001ce0:	605a      	str	r2, [r3, #4]
 8001ce2:	4401      	add	r1, r0
 8001ce4:	6019      	str	r1, [r3, #0]
 8001ce6:	e7d7      	b.n	8001c98 <_free_r+0x24>
 8001ce8:	d902      	bls.n	8001cf0 <_free_r+0x7c>
 8001cea:	230c      	movs	r3, #12
 8001cec:	602b      	str	r3, [r5, #0]
 8001cee:	e7d3      	b.n	8001c98 <_free_r+0x24>
 8001cf0:	6820      	ldr	r0, [r4, #0]
 8001cf2:	1821      	adds	r1, r4, r0
 8001cf4:	428a      	cmp	r2, r1
 8001cf6:	bf04      	itt	eq
 8001cf8:	6811      	ldreq	r1, [r2, #0]
 8001cfa:	6852      	ldreq	r2, [r2, #4]
 8001cfc:	6062      	str	r2, [r4, #4]
 8001cfe:	bf04      	itt	eq
 8001d00:	1809      	addeq	r1, r1, r0
 8001d02:	6021      	streq	r1, [r4, #0]
 8001d04:	605c      	str	r4, [r3, #4]
 8001d06:	e7c7      	b.n	8001c98 <_free_r+0x24>
 8001d08:	bd38      	pop	{r3, r4, r5, pc}
 8001d0a:	bf00      	nop
 8001d0c:	2000008c 	.word	0x2000008c

08001d10 <_malloc_r>:
 8001d10:	b570      	push	{r4, r5, r6, lr}
 8001d12:	1ccd      	adds	r5, r1, #3
 8001d14:	f025 0503 	bic.w	r5, r5, #3
 8001d18:	3508      	adds	r5, #8
 8001d1a:	2d0c      	cmp	r5, #12
 8001d1c:	bf38      	it	cc
 8001d1e:	250c      	movcc	r5, #12
 8001d20:	2d00      	cmp	r5, #0
 8001d22:	4606      	mov	r6, r0
 8001d24:	db01      	blt.n	8001d2a <_malloc_r+0x1a>
 8001d26:	42a9      	cmp	r1, r5
 8001d28:	d903      	bls.n	8001d32 <_malloc_r+0x22>
 8001d2a:	230c      	movs	r3, #12
 8001d2c:	6033      	str	r3, [r6, #0]
 8001d2e:	2000      	movs	r0, #0
 8001d30:	bd70      	pop	{r4, r5, r6, pc}
 8001d32:	f000 f881 	bl	8001e38 <__malloc_lock>
 8001d36:	4a23      	ldr	r2, [pc, #140]	; (8001dc4 <_malloc_r+0xb4>)
 8001d38:	6814      	ldr	r4, [r2, #0]
 8001d3a:	4621      	mov	r1, r4
 8001d3c:	b991      	cbnz	r1, 8001d64 <_malloc_r+0x54>
 8001d3e:	4c22      	ldr	r4, [pc, #136]	; (8001dc8 <_malloc_r+0xb8>)
 8001d40:	6823      	ldr	r3, [r4, #0]
 8001d42:	b91b      	cbnz	r3, 8001d4c <_malloc_r+0x3c>
 8001d44:	4630      	mov	r0, r6
 8001d46:	f000 f867 	bl	8001e18 <_sbrk_r>
 8001d4a:	6020      	str	r0, [r4, #0]
 8001d4c:	4629      	mov	r1, r5
 8001d4e:	4630      	mov	r0, r6
 8001d50:	f000 f862 	bl	8001e18 <_sbrk_r>
 8001d54:	1c43      	adds	r3, r0, #1
 8001d56:	d126      	bne.n	8001da6 <_malloc_r+0x96>
 8001d58:	230c      	movs	r3, #12
 8001d5a:	6033      	str	r3, [r6, #0]
 8001d5c:	4630      	mov	r0, r6
 8001d5e:	f000 f86c 	bl	8001e3a <__malloc_unlock>
 8001d62:	e7e4      	b.n	8001d2e <_malloc_r+0x1e>
 8001d64:	680b      	ldr	r3, [r1, #0]
 8001d66:	1b5b      	subs	r3, r3, r5
 8001d68:	d41a      	bmi.n	8001da0 <_malloc_r+0x90>
 8001d6a:	2b0b      	cmp	r3, #11
 8001d6c:	d90f      	bls.n	8001d8e <_malloc_r+0x7e>
 8001d6e:	600b      	str	r3, [r1, #0]
 8001d70:	50cd      	str	r5, [r1, r3]
 8001d72:	18cc      	adds	r4, r1, r3
 8001d74:	4630      	mov	r0, r6
 8001d76:	f000 f860 	bl	8001e3a <__malloc_unlock>
 8001d7a:	f104 000b 	add.w	r0, r4, #11
 8001d7e:	1d23      	adds	r3, r4, #4
 8001d80:	f020 0007 	bic.w	r0, r0, #7
 8001d84:	1ac3      	subs	r3, r0, r3
 8001d86:	d01b      	beq.n	8001dc0 <_malloc_r+0xb0>
 8001d88:	425a      	negs	r2, r3
 8001d8a:	50e2      	str	r2, [r4, r3]
 8001d8c:	bd70      	pop	{r4, r5, r6, pc}
 8001d8e:	428c      	cmp	r4, r1
 8001d90:	bf0d      	iteet	eq
 8001d92:	6863      	ldreq	r3, [r4, #4]
 8001d94:	684b      	ldrne	r3, [r1, #4]
 8001d96:	6063      	strne	r3, [r4, #4]
 8001d98:	6013      	streq	r3, [r2, #0]
 8001d9a:	bf18      	it	ne
 8001d9c:	460c      	movne	r4, r1
 8001d9e:	e7e9      	b.n	8001d74 <_malloc_r+0x64>
 8001da0:	460c      	mov	r4, r1
 8001da2:	6849      	ldr	r1, [r1, #4]
 8001da4:	e7ca      	b.n	8001d3c <_malloc_r+0x2c>
 8001da6:	1cc4      	adds	r4, r0, #3
 8001da8:	f024 0403 	bic.w	r4, r4, #3
 8001dac:	42a0      	cmp	r0, r4
 8001dae:	d005      	beq.n	8001dbc <_malloc_r+0xac>
 8001db0:	1a21      	subs	r1, r4, r0
 8001db2:	4630      	mov	r0, r6
 8001db4:	f000 f830 	bl	8001e18 <_sbrk_r>
 8001db8:	3001      	adds	r0, #1
 8001dba:	d0cd      	beq.n	8001d58 <_malloc_r+0x48>
 8001dbc:	6025      	str	r5, [r4, #0]
 8001dbe:	e7d9      	b.n	8001d74 <_malloc_r+0x64>
 8001dc0:	bd70      	pop	{r4, r5, r6, pc}
 8001dc2:	bf00      	nop
 8001dc4:	2000008c 	.word	0x2000008c
 8001dc8:	20000090 	.word	0x20000090

08001dcc <_realloc_r>:
 8001dcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001dce:	4607      	mov	r7, r0
 8001dd0:	4614      	mov	r4, r2
 8001dd2:	460e      	mov	r6, r1
 8001dd4:	b921      	cbnz	r1, 8001de0 <_realloc_r+0x14>
 8001dd6:	4611      	mov	r1, r2
 8001dd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8001ddc:	f7ff bf98 	b.w	8001d10 <_malloc_r>
 8001de0:	b922      	cbnz	r2, 8001dec <_realloc_r+0x20>
 8001de2:	f7ff ff47 	bl	8001c74 <_free_r>
 8001de6:	4625      	mov	r5, r4
 8001de8:	4628      	mov	r0, r5
 8001dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dec:	f000 f826 	bl	8001e3c <_malloc_usable_size_r>
 8001df0:	4284      	cmp	r4, r0
 8001df2:	d90f      	bls.n	8001e14 <_realloc_r+0x48>
 8001df4:	4621      	mov	r1, r4
 8001df6:	4638      	mov	r0, r7
 8001df8:	f7ff ff8a 	bl	8001d10 <_malloc_r>
 8001dfc:	4605      	mov	r5, r0
 8001dfe:	2800      	cmp	r0, #0
 8001e00:	d0f2      	beq.n	8001de8 <_realloc_r+0x1c>
 8001e02:	4631      	mov	r1, r6
 8001e04:	4622      	mov	r2, r4
 8001e06:	f7ff ff0f 	bl	8001c28 <memcpy>
 8001e0a:	4631      	mov	r1, r6
 8001e0c:	4638      	mov	r0, r7
 8001e0e:	f7ff ff31 	bl	8001c74 <_free_r>
 8001e12:	e7e9      	b.n	8001de8 <_realloc_r+0x1c>
 8001e14:	4635      	mov	r5, r6
 8001e16:	e7e7      	b.n	8001de8 <_realloc_r+0x1c>

08001e18 <_sbrk_r>:
 8001e18:	b538      	push	{r3, r4, r5, lr}
 8001e1a:	4c06      	ldr	r4, [pc, #24]	; (8001e34 <_sbrk_r+0x1c>)
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	4605      	mov	r5, r0
 8001e20:	4608      	mov	r0, r1
 8001e22:	6023      	str	r3, [r4, #0]
 8001e24:	f000 f814 	bl	8001e50 <_sbrk>
 8001e28:	1c43      	adds	r3, r0, #1
 8001e2a:	d102      	bne.n	8001e32 <_sbrk_r+0x1a>
 8001e2c:	6823      	ldr	r3, [r4, #0]
 8001e2e:	b103      	cbz	r3, 8001e32 <_sbrk_r+0x1a>
 8001e30:	602b      	str	r3, [r5, #0]
 8001e32:	bd38      	pop	{r3, r4, r5, pc}
 8001e34:	2000010c 	.word	0x2000010c

08001e38 <__malloc_lock>:
 8001e38:	4770      	bx	lr

08001e3a <__malloc_unlock>:
 8001e3a:	4770      	bx	lr

08001e3c <_malloc_usable_size_r>:
 8001e3c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8001e40:	2800      	cmp	r0, #0
 8001e42:	f1a0 0004 	sub.w	r0, r0, #4
 8001e46:	bfbc      	itt	lt
 8001e48:	580b      	ldrlt	r3, [r1, r0]
 8001e4a:	18c0      	addlt	r0, r0, r3
 8001e4c:	4770      	bx	lr
	...

08001e50 <_sbrk>:
 8001e50:	4b04      	ldr	r3, [pc, #16]	; (8001e64 <_sbrk+0x14>)
 8001e52:	6819      	ldr	r1, [r3, #0]
 8001e54:	4602      	mov	r2, r0
 8001e56:	b909      	cbnz	r1, 8001e5c <_sbrk+0xc>
 8001e58:	4903      	ldr	r1, [pc, #12]	; (8001e68 <_sbrk+0x18>)
 8001e5a:	6019      	str	r1, [r3, #0]
 8001e5c:	6818      	ldr	r0, [r3, #0]
 8001e5e:	4402      	add	r2, r0
 8001e60:	601a      	str	r2, [r3, #0]
 8001e62:	4770      	bx	lr
 8001e64:	20000094 	.word	0x20000094
 8001e68:	20000110 	.word	0x20000110

08001e6c <_init>:
 8001e6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e6e:	bf00      	nop
 8001e70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e72:	bc08      	pop	{r3}
 8001e74:	469e      	mov	lr, r3
 8001e76:	4770      	bx	lr

08001e78 <_fini>:
 8001e78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001e7a:	bf00      	nop
 8001e7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001e7e:	bc08      	pop	{r3}
 8001e80:	469e      	mov	lr, r3
 8001e82:	4770      	bx	lr
