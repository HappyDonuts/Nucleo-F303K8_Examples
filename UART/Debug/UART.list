
UART.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002d08  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08002e98  08002e98  00012e98  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08002f10  08002f10  00012f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002f14  08002f14  00012f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  20000000  08002f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
  7 .bss          000000a0  20000074  20000074  00020074  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20000114  20000114  00020074  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000eb36  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000020b7  00000000  00000000  0002ebda  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000368c  00000000  00000000  00030c91  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000005e0  00000000  00000000  00034320  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000898  00000000  00000000  00034900  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00003cd4  00000000  00000000  00035198  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000258b  00000000  00000000  00038e6c  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0003b3f7  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001594  00000000  00000000  0003b474  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08002e80 	.word	0x08002e80

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08002e80 	.word	0x08002e80

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f092 0f00 	teq	r2, #0
 800055a:	bf14      	ite	ne
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	4770      	bxeq	lr
 8000562:	b530      	push	{r4, r5, lr}
 8000564:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000568:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800056c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000570:	e720      	b.n	80003b4 <__adddf3+0x138>
 8000572:	bf00      	nop

08000574 <__aeabi_ul2d>:
 8000574:	ea50 0201 	orrs.w	r2, r0, r1
 8000578:	bf08      	it	eq
 800057a:	4770      	bxeq	lr
 800057c:	b530      	push	{r4, r5, lr}
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	e00a      	b.n	800059a <__aeabi_l2d+0x16>

08000584 <__aeabi_l2d>:
 8000584:	ea50 0201 	orrs.w	r2, r0, r1
 8000588:	bf08      	it	eq
 800058a:	4770      	bxeq	lr
 800058c:	b530      	push	{r4, r5, lr}
 800058e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000592:	d502      	bpl.n	800059a <__aeabi_l2d+0x16>
 8000594:	4240      	negs	r0, r0
 8000596:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800059a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800059e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005a6:	f43f aedc 	beq.w	8000362 <__adddf3+0xe6>
 80005aa:	f04f 0203 	mov.w	r2, #3
 80005ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005b2:	bf18      	it	ne
 80005b4:	3203      	addne	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005c2:	f1c2 0320 	rsb	r3, r2, #32
 80005c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80005ca:	fa20 f002 	lsr.w	r0, r0, r2
 80005ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80005d2:	ea40 000e 	orr.w	r0, r0, lr
 80005d6:	fa21 f102 	lsr.w	r1, r1, r2
 80005da:	4414      	add	r4, r2
 80005dc:	e6c1      	b.n	8000362 <__adddf3+0xe6>
 80005de:	bf00      	nop

080005e0 <__aeabi_dmul>:
 80005e0:	b570      	push	{r4, r5, r6, lr}
 80005e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005ee:	bf1d      	ittte	ne
 80005f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005f4:	ea94 0f0c 	teqne	r4, ip
 80005f8:	ea95 0f0c 	teqne	r5, ip
 80005fc:	f000 f8de 	bleq	80007bc <__aeabi_dmul+0x1dc>
 8000600:	442c      	add	r4, r5
 8000602:	ea81 0603 	eor.w	r6, r1, r3
 8000606:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800060a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800060e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000612:	bf18      	it	ne
 8000614:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000618:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800061c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000620:	d038      	beq.n	8000694 <__aeabi_dmul+0xb4>
 8000622:	fba0 ce02 	umull	ip, lr, r0, r2
 8000626:	f04f 0500 	mov.w	r5, #0
 800062a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800062e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000632:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000636:	f04f 0600 	mov.w	r6, #0
 800063a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800063e:	f09c 0f00 	teq	ip, #0
 8000642:	bf18      	it	ne
 8000644:	f04e 0e01 	orrne.w	lr, lr, #1
 8000648:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800064c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000650:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000654:	d204      	bcs.n	8000660 <__aeabi_dmul+0x80>
 8000656:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800065a:	416d      	adcs	r5, r5
 800065c:	eb46 0606 	adc.w	r6, r6, r6
 8000660:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000664:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000668:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800066c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000670:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000674:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000678:	bf88      	it	hi
 800067a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800067e:	d81e      	bhi.n	80006be <__aeabi_dmul+0xde>
 8000680:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000684:	bf08      	it	eq
 8000686:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800068a:	f150 0000 	adcs.w	r0, r0, #0
 800068e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000692:	bd70      	pop	{r4, r5, r6, pc}
 8000694:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000698:	ea46 0101 	orr.w	r1, r6, r1
 800069c:	ea40 0002 	orr.w	r0, r0, r2
 80006a0:	ea81 0103 	eor.w	r1, r1, r3
 80006a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006a8:	bfc2      	ittt	gt
 80006aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006b2:	bd70      	popgt	{r4, r5, r6, pc}
 80006b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006b8:	f04f 0e00 	mov.w	lr, #0
 80006bc:	3c01      	subs	r4, #1
 80006be:	f300 80ab 	bgt.w	8000818 <__aeabi_dmul+0x238>
 80006c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006c6:	bfde      	ittt	le
 80006c8:	2000      	movle	r0, #0
 80006ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006ce:	bd70      	pople	{r4, r5, r6, pc}
 80006d0:	f1c4 0400 	rsb	r4, r4, #0
 80006d4:	3c20      	subs	r4, #32
 80006d6:	da35      	bge.n	8000744 <__aeabi_dmul+0x164>
 80006d8:	340c      	adds	r4, #12
 80006da:	dc1b      	bgt.n	8000714 <__aeabi_dmul+0x134>
 80006dc:	f104 0414 	add.w	r4, r4, #20
 80006e0:	f1c4 0520 	rsb	r5, r4, #32
 80006e4:	fa00 f305 	lsl.w	r3, r0, r5
 80006e8:	fa20 f004 	lsr.w	r0, r0, r4
 80006ec:	fa01 f205 	lsl.w	r2, r1, r5
 80006f0:	ea40 0002 	orr.w	r0, r0, r2
 80006f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000700:	fa21 f604 	lsr.w	r6, r1, r4
 8000704:	eb42 0106 	adc.w	r1, r2, r6
 8000708:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800070c:	bf08      	it	eq
 800070e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000712:	bd70      	pop	{r4, r5, r6, pc}
 8000714:	f1c4 040c 	rsb	r4, r4, #12
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f304 	lsl.w	r3, r0, r4
 8000720:	fa20 f005 	lsr.w	r0, r0, r5
 8000724:	fa01 f204 	lsl.w	r2, r1, r4
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000730:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000734:	f141 0100 	adc.w	r1, r1, #0
 8000738:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800073c:	bf08      	it	eq
 800073e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000742:	bd70      	pop	{r4, r5, r6, pc}
 8000744:	f1c4 0520 	rsb	r5, r4, #32
 8000748:	fa00 f205 	lsl.w	r2, r0, r5
 800074c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000750:	fa20 f304 	lsr.w	r3, r0, r4
 8000754:	fa01 f205 	lsl.w	r2, r1, r5
 8000758:	ea43 0302 	orr.w	r3, r3, r2
 800075c:	fa21 f004 	lsr.w	r0, r1, r4
 8000760:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000764:	fa21 f204 	lsr.w	r2, r1, r4
 8000768:	ea20 0002 	bic.w	r0, r0, r2
 800076c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f094 0f00 	teq	r4, #0
 8000780:	d10f      	bne.n	80007a2 <__aeabi_dmul+0x1c2>
 8000782:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000786:	0040      	lsls	r0, r0, #1
 8000788:	eb41 0101 	adc.w	r1, r1, r1
 800078c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000790:	bf08      	it	eq
 8000792:	3c01      	subeq	r4, #1
 8000794:	d0f7      	beq.n	8000786 <__aeabi_dmul+0x1a6>
 8000796:	ea41 0106 	orr.w	r1, r1, r6
 800079a:	f095 0f00 	teq	r5, #0
 800079e:	bf18      	it	ne
 80007a0:	4770      	bxne	lr
 80007a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007a6:	0052      	lsls	r2, r2, #1
 80007a8:	eb43 0303 	adc.w	r3, r3, r3
 80007ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b0:	bf08      	it	eq
 80007b2:	3d01      	subeq	r5, #1
 80007b4:	d0f7      	beq.n	80007a6 <__aeabi_dmul+0x1c6>
 80007b6:	ea43 0306 	orr.w	r3, r3, r6
 80007ba:	4770      	bx	lr
 80007bc:	ea94 0f0c 	teq	r4, ip
 80007c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007c4:	bf18      	it	ne
 80007c6:	ea95 0f0c 	teqne	r5, ip
 80007ca:	d00c      	beq.n	80007e6 <__aeabi_dmul+0x206>
 80007cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d0:	bf18      	it	ne
 80007d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007d6:	d1d1      	bne.n	800077c <__aeabi_dmul+0x19c>
 80007d8:	ea81 0103 	eor.w	r1, r1, r3
 80007dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e0:	f04f 0000 	mov.w	r0, #0
 80007e4:	bd70      	pop	{r4, r5, r6, pc}
 80007e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007ea:	bf06      	itte	eq
 80007ec:	4610      	moveq	r0, r2
 80007ee:	4619      	moveq	r1, r3
 80007f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007f4:	d019      	beq.n	800082a <__aeabi_dmul+0x24a>
 80007f6:	ea94 0f0c 	teq	r4, ip
 80007fa:	d102      	bne.n	8000802 <__aeabi_dmul+0x222>
 80007fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000800:	d113      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000802:	ea95 0f0c 	teq	r5, ip
 8000806:	d105      	bne.n	8000814 <__aeabi_dmul+0x234>
 8000808:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800080c:	bf1c      	itt	ne
 800080e:	4610      	movne	r0, r2
 8000810:	4619      	movne	r1, r3
 8000812:	d10a      	bne.n	800082a <__aeabi_dmul+0x24a>
 8000814:	ea81 0103 	eor.w	r1, r1, r3
 8000818:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800081c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000820:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000824:	f04f 0000 	mov.w	r0, #0
 8000828:	bd70      	pop	{r4, r5, r6, pc}
 800082a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800082e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000832:	bd70      	pop	{r4, r5, r6, pc}

08000834 <__aeabi_ddiv>:
 8000834:	b570      	push	{r4, r5, r6, lr}
 8000836:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800083a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800083e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000842:	bf1d      	ittte	ne
 8000844:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000848:	ea94 0f0c 	teqne	r4, ip
 800084c:	ea95 0f0c 	teqne	r5, ip
 8000850:	f000 f8a7 	bleq	80009a2 <__aeabi_ddiv+0x16e>
 8000854:	eba4 0405 	sub.w	r4, r4, r5
 8000858:	ea81 0e03 	eor.w	lr, r1, r3
 800085c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000860:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000864:	f000 8088 	beq.w	8000978 <__aeabi_ddiv+0x144>
 8000868:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800086c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000870:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000874:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000878:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800087c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000880:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000884:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000888:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800088c:	429d      	cmp	r5, r3
 800088e:	bf08      	it	eq
 8000890:	4296      	cmpeq	r6, r2
 8000892:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000896:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800089a:	d202      	bcs.n	80008a2 <__aeabi_ddiv+0x6e>
 800089c:	085b      	lsrs	r3, r3, #1
 800089e:	ea4f 0232 	mov.w	r2, r2, rrx
 80008a2:	1ab6      	subs	r6, r6, r2
 80008a4:	eb65 0503 	sbc.w	r5, r5, r3
 80008a8:	085b      	lsrs	r3, r3, #1
 80008aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80008c8:	085b      	lsrs	r3, r3, #1
 80008ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000910:	ea55 0e06 	orrs.w	lr, r5, r6
 8000914:	d018      	beq.n	8000948 <__aeabi_ddiv+0x114>
 8000916:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800091a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800091e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000922:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000926:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800092a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800092e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000932:	d1c0      	bne.n	80008b6 <__aeabi_ddiv+0x82>
 8000934:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000938:	d10b      	bne.n	8000952 <__aeabi_ddiv+0x11e>
 800093a:	ea41 0100 	orr.w	r1, r1, r0
 800093e:	f04f 0000 	mov.w	r0, #0
 8000942:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8000946:	e7b6      	b.n	80008b6 <__aeabi_ddiv+0x82>
 8000948:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800094c:	bf04      	itt	eq
 800094e:	4301      	orreq	r1, r0
 8000950:	2000      	moveq	r0, #0
 8000952:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000956:	bf88      	it	hi
 8000958:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800095c:	f63f aeaf 	bhi.w	80006be <__aeabi_dmul+0xde>
 8000960:	ebb5 0c03 	subs.w	ip, r5, r3
 8000964:	bf04      	itt	eq
 8000966:	ebb6 0c02 	subseq.w	ip, r6, r2
 800096a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800096e:	f150 0000 	adcs.w	r0, r0, #0
 8000972:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000976:	bd70      	pop	{r4, r5, r6, pc}
 8000978:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800097c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000980:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000984:	bfc2      	ittt	gt
 8000986:	ebd4 050c 	rsbsgt	r5, r4, ip
 800098a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800098e:	bd70      	popgt	{r4, r5, r6, pc}
 8000990:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000994:	f04f 0e00 	mov.w	lr, #0
 8000998:	3c01      	subs	r4, #1
 800099a:	e690      	b.n	80006be <__aeabi_dmul+0xde>
 800099c:	ea45 0e06 	orr.w	lr, r5, r6
 80009a0:	e68d      	b.n	80006be <__aeabi_dmul+0xde>
 80009a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009a6:	ea94 0f0c 	teq	r4, ip
 80009aa:	bf08      	it	eq
 80009ac:	ea95 0f0c 	teqeq	r5, ip
 80009b0:	f43f af3b 	beq.w	800082a <__aeabi_dmul+0x24a>
 80009b4:	ea94 0f0c 	teq	r4, ip
 80009b8:	d10a      	bne.n	80009d0 <__aeabi_ddiv+0x19c>
 80009ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009be:	f47f af34 	bne.w	800082a <__aeabi_dmul+0x24a>
 80009c2:	ea95 0f0c 	teq	r5, ip
 80009c6:	f47f af25 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009ca:	4610      	mov	r0, r2
 80009cc:	4619      	mov	r1, r3
 80009ce:	e72c      	b.n	800082a <__aeabi_dmul+0x24a>
 80009d0:	ea95 0f0c 	teq	r5, ip
 80009d4:	d106      	bne.n	80009e4 <__aeabi_ddiv+0x1b0>
 80009d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009da:	f43f aefd 	beq.w	80007d8 <__aeabi_dmul+0x1f8>
 80009de:	4610      	mov	r0, r2
 80009e0:	4619      	mov	r1, r3
 80009e2:	e722      	b.n	800082a <__aeabi_dmul+0x24a>
 80009e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009e8:	bf18      	it	ne
 80009ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009ee:	f47f aec5 	bne.w	800077c <__aeabi_dmul+0x19c>
 80009f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009f6:	f47f af0d 	bne.w	8000814 <__aeabi_dmul+0x234>
 80009fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009fe:	f47f aeeb 	bne.w	80007d8 <__aeabi_dmul+0x1f8>
 8000a02:	e712      	b.n	800082a <__aeabi_dmul+0x24a>

08000a04 <__gedf2>:
 8000a04:	f04f 3cff 	mov.w	ip, #4294967295
 8000a08:	e006      	b.n	8000a18 <__cmpdf2+0x4>
 8000a0a:	bf00      	nop

08000a0c <__ledf2>:
 8000a0c:	f04f 0c01 	mov.w	ip, #1
 8000a10:	e002      	b.n	8000a18 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__cmpdf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a28:	bf18      	it	ne
 8000a2a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a2e:	d01b      	beq.n	8000a68 <__cmpdf2+0x54>
 8000a30:	b001      	add	sp, #4
 8000a32:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a36:	bf0c      	ite	eq
 8000a38:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a3c:	ea91 0f03 	teqne	r1, r3
 8000a40:	bf02      	ittt	eq
 8000a42:	ea90 0f02 	teqeq	r0, r2
 8000a46:	2000      	moveq	r0, #0
 8000a48:	4770      	bxeq	lr
 8000a4a:	f110 0f00 	cmn.w	r0, #0
 8000a4e:	ea91 0f03 	teq	r1, r3
 8000a52:	bf58      	it	pl
 8000a54:	4299      	cmppl	r1, r3
 8000a56:	bf08      	it	eq
 8000a58:	4290      	cmpeq	r0, r2
 8000a5a:	bf2c      	ite	cs
 8000a5c:	17d8      	asrcs	r0, r3, #31
 8000a5e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a62:	f040 0001 	orr.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a6c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a70:	d102      	bne.n	8000a78 <__cmpdf2+0x64>
 8000a72:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a76:	d107      	bne.n	8000a88 <__cmpdf2+0x74>
 8000a78:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a7c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a80:	d1d6      	bne.n	8000a30 <__cmpdf2+0x1c>
 8000a82:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a86:	d0d3      	beq.n	8000a30 <__cmpdf2+0x1c>
 8000a88:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a8c:	4770      	bx	lr
 8000a8e:	bf00      	nop

08000a90 <__aeabi_cdrcmple>:
 8000a90:	4684      	mov	ip, r0
 8000a92:	4610      	mov	r0, r2
 8000a94:	4662      	mov	r2, ip
 8000a96:	468c      	mov	ip, r1
 8000a98:	4619      	mov	r1, r3
 8000a9a:	4663      	mov	r3, ip
 8000a9c:	e000      	b.n	8000aa0 <__aeabi_cdcmpeq>
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_cdcmpeq>:
 8000aa0:	b501      	push	{r0, lr}
 8000aa2:	f7ff ffb7 	bl	8000a14 <__cmpdf2>
 8000aa6:	2800      	cmp	r0, #0
 8000aa8:	bf48      	it	mi
 8000aaa:	f110 0f00 	cmnmi.w	r0, #0
 8000aae:	bd01      	pop	{r0, pc}

08000ab0 <__aeabi_dcmpeq>:
 8000ab0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ab4:	f7ff fff4 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ab8:	bf0c      	ite	eq
 8000aba:	2001      	moveq	r0, #1
 8000abc:	2000      	movne	r0, #0
 8000abe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_dcmplt>:
 8000ac4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ac8:	f7ff ffea 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000acc:	bf34      	ite	cc
 8000ace:	2001      	movcc	r0, #1
 8000ad0:	2000      	movcs	r0, #0
 8000ad2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_dcmple>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff ffe0 	bl	8000aa0 <__aeabi_cdcmpeq>
 8000ae0:	bf94      	ite	ls
 8000ae2:	2001      	movls	r0, #1
 8000ae4:	2000      	movhi	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmpge>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffce 	bl	8000a90 <__aeabi_cdrcmple>
 8000af4:	bf94      	ite	ls
 8000af6:	2001      	movls	r0, #1
 8000af8:	2000      	movhi	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmpgt>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffc4 	bl	8000a90 <__aeabi_cdrcmple>
 8000b08:	bf34      	ite	cc
 8000b0a:	2001      	movcc	r0, #1
 8000b0c:	2000      	movcs	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpun>:
 8000b14:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b18:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b1c:	d102      	bne.n	8000b24 <__aeabi_dcmpun+0x10>
 8000b1e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b22:	d10a      	bne.n	8000b3a <__aeabi_dcmpun+0x26>
 8000b24:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b2c:	d102      	bne.n	8000b34 <__aeabi_dcmpun+0x20>
 8000b2e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b32:	d102      	bne.n	8000b3a <__aeabi_dcmpun+0x26>
 8000b34:	f04f 0000 	mov.w	r0, #0
 8000b38:	4770      	bx	lr
 8000b3a:	f04f 0001 	mov.w	r0, #1
 8000b3e:	4770      	bx	lr

08000b40 <__aeabi_d2uiz>:
 8000b40:	004a      	lsls	r2, r1, #1
 8000b42:	d211      	bcs.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b44:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b48:	d211      	bcs.n	8000b6e <__aeabi_d2uiz+0x2e>
 8000b4a:	d50d      	bpl.n	8000b68 <__aeabi_d2uiz+0x28>
 8000b4c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b50:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b54:	d40e      	bmi.n	8000b74 <__aeabi_d2uiz+0x34>
 8000b56:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b5e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b62:	fa23 f002 	lsr.w	r0, r3, r2
 8000b66:	4770      	bx	lr
 8000b68:	f04f 0000 	mov.w	r0, #0
 8000b6c:	4770      	bx	lr
 8000b6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b72:	d102      	bne.n	8000b7a <__aeabi_d2uiz+0x3a>
 8000b74:	f04f 30ff 	mov.w	r0, #4294967295
 8000b78:	4770      	bx	lr
 8000b7a:	f04f 0000 	mov.w	r0, #0
 8000b7e:	4770      	bx	lr

08000b80 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b80:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b82:	4a0e      	ldr	r2, [pc, #56]	; (8000bbc <HAL_InitTick+0x3c>)
 8000b84:	4b0e      	ldr	r3, [pc, #56]	; (8000bc0 <HAL_InitTick+0x40>)
{
 8000b86:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b88:	7818      	ldrb	r0, [r3, #0]
 8000b8a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b8e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b92:	6810      	ldr	r0, [r2, #0]
 8000b94:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b98:	f000 f8a0 	bl	8000cdc <HAL_SYSTICK_Config>
 8000b9c:	4604      	mov	r4, r0
 8000b9e:	b958      	cbnz	r0, 8000bb8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ba0:	2d0f      	cmp	r5, #15
 8000ba2:	d809      	bhi.n	8000bb8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	4629      	mov	r1, r5
 8000ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bac:	f000 f856 	bl	8000c5c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bb0:	4b04      	ldr	r3, [pc, #16]	; (8000bc4 <HAL_InitTick+0x44>)
 8000bb2:	4620      	mov	r0, r4
 8000bb4:	601d      	str	r5, [r3, #0]
 8000bb6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000bb8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000bba:	bd38      	pop	{r3, r4, r5, pc}
 8000bbc:	20000008 	.word	0x20000008
 8000bc0:	20000000 	.word	0x20000000
 8000bc4:	20000004 	.word	0x20000004

08000bc8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc8:	4a07      	ldr	r2, [pc, #28]	; (8000be8 <HAL_Init+0x20>)
{
 8000bca:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bcc:	6813      	ldr	r3, [r2, #0]
 8000bce:	f043 0310 	orr.w	r3, r3, #16
 8000bd2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd4:	2003      	movs	r0, #3
 8000bd6:	f000 f82f 	bl	8000c38 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bda:	2000      	movs	r0, #0
 8000bdc:	f7ff ffd0 	bl	8000b80 <HAL_InitTick>
  HAL_MspInit();
 8000be0:	f001 f8bc 	bl	8001d5c <HAL_MspInit>
}
 8000be4:	2000      	movs	r0, #0
 8000be6:	bd08      	pop	{r3, pc}
 8000be8:	40022000 	.word	0x40022000

08000bec <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000bec:	4a03      	ldr	r2, [pc, #12]	; (8000bfc <HAL_IncTick+0x10>)
 8000bee:	4b04      	ldr	r3, [pc, #16]	; (8000c00 <HAL_IncTick+0x14>)
 8000bf0:	6811      	ldr	r1, [r2, #0]
 8000bf2:	781b      	ldrb	r3, [r3, #0]
 8000bf4:	440b      	add	r3, r1
 8000bf6:	6013      	str	r3, [r2, #0]
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop
 8000bfc:	2000009c 	.word	0x2000009c
 8000c00:	20000000 	.word	0x20000000

08000c04 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000c04:	4b01      	ldr	r3, [pc, #4]	; (8000c0c <HAL_GetTick+0x8>)
 8000c06:	6818      	ldr	r0, [r3, #0]
}
 8000c08:	4770      	bx	lr
 8000c0a:	bf00      	nop
 8000c0c:	2000009c 	.word	0x2000009c

08000c10 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c10:	b538      	push	{r3, r4, r5, lr}
 8000c12:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8000c14:	f7ff fff6 	bl	8000c04 <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c18:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000c1a:	bf1c      	itt	ne
 8000c1c:	4b05      	ldrne	r3, [pc, #20]	; (8000c34 <HAL_Delay+0x24>)
 8000c1e:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000c20:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8000c22:	bf18      	it	ne
 8000c24:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c26:	f7ff ffed 	bl	8000c04 <HAL_GetTick>
 8000c2a:	1b40      	subs	r0, r0, r5
 8000c2c:	4284      	cmp	r4, r0
 8000c2e:	d8fa      	bhi.n	8000c26 <HAL_Delay+0x16>
  {
  }
}
 8000c30:	bd38      	pop	{r3, r4, r5, pc}
 8000c32:	bf00      	nop
 8000c34:	20000000 	.word	0x20000000

08000c38 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c38:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000c3a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c3c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c40:	041b      	lsls	r3, r3, #16
 8000c42:	0c1b      	lsrs	r3, r3, #16
 8000c44:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000c48:	0200      	lsls	r0, r0, #8
 8000c4a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c4e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000c52:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000c54:	60d3      	str	r3, [r2, #12]
 8000c56:	4770      	bx	lr
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c5c:	4b17      	ldr	r3, [pc, #92]	; (8000cbc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c5e:	b530      	push	{r4, r5, lr}
 8000c60:	68dc      	ldr	r4, [r3, #12]
 8000c62:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c66:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c6a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c6c:	2b04      	cmp	r3, #4
 8000c6e:	bf28      	it	cs
 8000c70:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c72:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c74:	f04f 0501 	mov.w	r5, #1
 8000c78:	fa05 f303 	lsl.w	r3, r5, r3
 8000c7c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c80:	bf8c      	ite	hi
 8000c82:	3c03      	subhi	r4, #3
 8000c84:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c86:	4019      	ands	r1, r3
 8000c88:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c8a:	fa05 f404 	lsl.w	r4, r5, r4
 8000c8e:	3c01      	subs	r4, #1
 8000c90:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000c92:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c94:	ea42 0201 	orr.w	r2, r2, r1
 8000c98:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9c:	bfaf      	iteee	ge
 8000c9e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ca2:	f000 000f 	andlt.w	r0, r0, #15
 8000ca6:	4b06      	ldrlt	r3, [pc, #24]	; (8000cc0 <HAL_NVIC_SetPriority+0x64>)
 8000ca8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000caa:	bfa5      	ittet	ge
 8000cac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000cb0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cb4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000cb8:	bd30      	pop	{r4, r5, pc}
 8000cba:	bf00      	nop
 8000cbc:	e000ed00 	.word	0xe000ed00
 8000cc0:	e000ed14 	.word	0xe000ed14

08000cc4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000cc4:	0942      	lsrs	r2, r0, #5
 8000cc6:	2301      	movs	r3, #1
 8000cc8:	f000 001f 	and.w	r0, r0, #31
 8000ccc:	fa03 f000 	lsl.w	r0, r3, r0
 8000cd0:	4b01      	ldr	r3, [pc, #4]	; (8000cd8 <HAL_NVIC_EnableIRQ+0x14>)
 8000cd2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000cd6:	4770      	bx	lr
 8000cd8:	e000e100 	.word	0xe000e100

08000cdc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000cdc:	3801      	subs	r0, #1
 8000cde:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000ce2:	d20a      	bcs.n	8000cfa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce4:	4b06      	ldr	r3, [pc, #24]	; (8000d00 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ce6:	4a07      	ldr	r2, [pc, #28]	; (8000d04 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ce8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cea:	21f0      	movs	r1, #240	; 0xf0
 8000cec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000cf4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000cfa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	e000e010 	.word	0xe000e010
 8000d04:	e000ed00 	.word	0xe000ed00

08000d08 <HAL_DMA_Abort_IT>:
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d08:	f890 2021 	ldrb.w	r2, [r0, #33]	; 0x21
 8000d0c:	2a02      	cmp	r2, #2
{  
 8000d0e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d10:	d003      	beq.n	8000d1a <HAL_DMA_Abort_IT+0x12>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d12:	2204      	movs	r2, #4
 8000d14:	6382      	str	r2, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8000d16:	2001      	movs	r0, #1
 8000d18:	bd10      	pop	{r4, pc}
  }
  else
  { 
  
    /* Disable DMA IT */
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d1a:	6802      	ldr	r2, [r0, #0]
    
    /* Disable the channel */
    hdma->Instance->CCR &= ~DMA_CCR_EN;
    
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d1c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d1e:	6811      	ldr	r1, [r2, #0]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
    
    /* Call User Abort callback */ 
    if(hdma->XferAbortCallback != NULL)
 8000d20:	6b43      	ldr	r3, [r0, #52]	; 0x34
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8000d22:	f021 010e 	bic.w	r1, r1, #14
 8000d26:	6011      	str	r1, [r2, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8000d28:	6811      	ldr	r1, [r2, #0]
 8000d2a:	f021 0101 	bic.w	r1, r1, #1
 8000d2e:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8000d30:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000d32:	2101      	movs	r1, #1
 8000d34:	fa01 f202 	lsl.w	r2, r1, r2
 8000d38:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 8000d3a:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 8000d3c:	f880 1021 	strb.w	r1, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8000d40:	f880 4020 	strb.w	r4, [r0, #32]
    if(hdma->XferAbortCallback != NULL)
 8000d44:	b113      	cbz	r3, 8000d4c <HAL_DMA_Abort_IT+0x44>
    {
      hdma->XferAbortCallback(hdma);
 8000d46:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 8000d48:	4620      	mov	r0, r4
 8000d4a:	bd10      	pop	{r4, pc}
 8000d4c:	4618      	mov	r0, r3
    } 
  }
  return status;
}
 8000d4e:	bd10      	pop	{r4, pc}

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d54:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d56:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d58:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000ec0 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d5c:	4a56      	ldr	r2, [pc, #344]	; (8000eb8 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d5e:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d60:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000d64:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d66:	9c01      	ldr	r4, [sp, #4]
 8000d68:	40dc      	lsrs	r4, r3
 8000d6a:	d102      	bne.n	8000d72 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000d6c:	b005      	add	sp, #20
 8000d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d72:	2401      	movs	r4, #1
 8000d74:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000d78:	9c01      	ldr	r4, [sp, #4]
 8000d7a:	ea14 050a 	ands.w	r5, r4, sl
 8000d7e:	f000 8093 	beq.w	8000ea8 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d82:	684c      	ldr	r4, [r1, #4]
 8000d84:	f024 0b10 	bic.w	fp, r4, #16
 8000d88:	f1bb 0f02 	cmp.w	fp, #2
 8000d8c:	d111      	bne.n	8000db2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000d8e:	08df      	lsrs	r7, r3, #3
 8000d90:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d94:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000d98:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d9a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000d9e:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000da2:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000da6:	690e      	ldr	r6, [r1, #16]
 8000da8:	fa06 f60e 	lsl.w	r6, r6, lr
 8000dac:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000db0:	623e      	str	r6, [r7, #32]
 8000db2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000db6:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000db8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dba:	fa07 f70c 	lsl.w	r7, r7, ip
 8000dbe:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dc4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc6:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dca:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dce:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd2:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000dd6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd8:	d811      	bhi.n	8000dfe <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000dda:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ddc:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de0:	68ce      	ldr	r6, [r1, #12]
 8000de2:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000de6:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000dea:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000dec:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dee:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000df2:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000df6:	409e      	lsls	r6, r3
 8000df8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000dfc:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000dfe:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e00:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e02:	688e      	ldr	r6, [r1, #8]
 8000e04:	fa06 f60c 	lsl.w	r6, r6, ip
 8000e08:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e0a:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000e0c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e0e:	d54b      	bpl.n	8000ea8 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e10:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000e14:	f046 0601 	orr.w	r6, r6, #1
 8000e18:	f8c8 6018 	str.w	r6, [r8, #24]
 8000e1c:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000e20:	f023 0703 	bic.w	r7, r3, #3
 8000e24:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000e28:	f006 0601 	and.w	r6, r6, #1
 8000e2c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000e30:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e32:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000e38:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e3a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000e3e:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e42:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e46:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e4a:	d02f      	beq.n	8000eac <HAL_GPIO_Init+0x15c>
 8000e4c:	4e1b      	ldr	r6, [pc, #108]	; (8000ebc <HAL_GPIO_Init+0x16c>)
 8000e4e:	42b0      	cmp	r0, r6
 8000e50:	d02e      	beq.n	8000eb0 <HAL_GPIO_Init+0x160>
 8000e52:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e56:	42b0      	cmp	r0, r6
 8000e58:	d02c      	beq.n	8000eb4 <HAL_GPIO_Init+0x164>
 8000e5a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e5e:	42b0      	cmp	r0, r6
 8000e60:	bf14      	ite	ne
 8000e62:	2605      	movne	r6, #5
 8000e64:	2603      	moveq	r6, #3
 8000e66:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e6a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e6e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000e70:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e72:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e74:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e78:	bf0c      	ite	eq
 8000e7a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e7c:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000e7e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000e80:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e82:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e86:	bf0c      	ite	eq
 8000e88:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e8a:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000e8c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000e8e:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e90:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e94:	bf0c      	ite	eq
 8000e96:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e98:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000e9a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000e9c:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e9e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000ea0:	bf54      	ite	pl
 8000ea2:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000ea4:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000ea6:	60d6      	str	r6, [r2, #12]
    position++;
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	e75c      	b.n	8000d66 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000eac:	2600      	movs	r6, #0
 8000eae:	e7da      	b.n	8000e66 <HAL_GPIO_Init+0x116>
 8000eb0:	2601      	movs	r6, #1
 8000eb2:	e7d8      	b.n	8000e66 <HAL_GPIO_Init+0x116>
 8000eb4:	2602      	movs	r6, #2
 8000eb6:	e7d6      	b.n	8000e66 <HAL_GPIO_Init+0x116>
 8000eb8:	40010400 	.word	0x40010400
 8000ebc:	48000400 	.word	0x48000400
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ec8:	4605      	mov	r5, r0
 8000eca:	b918      	cbnz	r0, 8000ed4 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000ecc:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000ece:	b002      	add	sp, #8
 8000ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ed4:	6803      	ldr	r3, [r0, #0]
 8000ed6:	07da      	lsls	r2, r3, #31
 8000ed8:	d411      	bmi.n	8000efe <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000eda:	682b      	ldr	r3, [r5, #0]
 8000edc:	079b      	lsls	r3, r3, #30
 8000ede:	f100 8085 	bmi.w	8000fec <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000ee2:	682b      	ldr	r3, [r5, #0]
 8000ee4:	071c      	lsls	r4, r3, #28
 8000ee6:	f100 80f6 	bmi.w	80010d6 <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000eea:	682b      	ldr	r3, [r5, #0]
 8000eec:	0758      	lsls	r0, r3, #29
 8000eee:	f100 813f 	bmi.w	8001170 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000ef2:	69ea      	ldr	r2, [r5, #28]
 8000ef4:	2a00      	cmp	r2, #0
 8000ef6:	f040 81d6 	bne.w	80012a6 <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 8000efa:	2000      	movs	r0, #0
 8000efc:	e7e7      	b.n	8000ece <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000efe:	4cba      	ldr	r4, [pc, #744]	; (80011e8 <HAL_RCC_OscConfig+0x324>)
 8000f00:	6863      	ldr	r3, [r4, #4]
 8000f02:	f003 030c 	and.w	r3, r3, #12
 8000f06:	2b04      	cmp	r3, #4
 8000f08:	d007      	beq.n	8000f1a <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f0a:	6863      	ldr	r3, [r4, #4]
 8000f0c:	f003 030c 	and.w	r3, r3, #12
 8000f10:	2b08      	cmp	r3, #8
 8000f12:	d116      	bne.n	8000f42 <HAL_RCC_OscConfig+0x7e>
 8000f14:	6863      	ldr	r3, [r4, #4]
 8000f16:	03df      	lsls	r7, r3, #15
 8000f18:	d513      	bpl.n	8000f42 <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f1a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f1e:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f22:	6821      	ldr	r1, [r4, #0]
 8000f24:	fa93 f3a3 	rbit	r3, r3
 8000f28:	fab3 f383 	clz	r3, r3
 8000f2c:	f003 031f 	and.w	r3, r3, #31
 8000f30:	2201      	movs	r2, #1
 8000f32:	fa02 f303 	lsl.w	r3, r2, r3
 8000f36:	420b      	tst	r3, r1
 8000f38:	d0cf      	beq.n	8000eda <HAL_RCC_OscConfig+0x16>
 8000f3a:	686b      	ldr	r3, [r5, #4]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1cc      	bne.n	8000eda <HAL_RCC_OscConfig+0x16>
 8000f40:	e7c4      	b.n	8000ecc <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f42:	686a      	ldr	r2, [r5, #4]
 8000f44:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000f48:	d125      	bne.n	8000f96 <HAL_RCC_OscConfig+0xd2>
 8000f4a:	6823      	ldr	r3, [r4, #0]
 8000f4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f50:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f52:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f54:	68a9      	ldr	r1, [r5, #8]
 8000f56:	f023 030f 	bic.w	r3, r3, #15
 8000f5a:	430b      	orrs	r3, r1
 8000f5c:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f5e:	b352      	cbz	r2, 8000fb6 <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000f60:	f7ff fe50 	bl	8000c04 <HAL_GetTick>
 8000f64:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000f68:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6a:	2701      	movs	r7, #1
 8000f6c:	fa96 f3a6 	rbit	r3, r6
 8000f70:	6822      	ldr	r2, [r4, #0]
 8000f72:	fa96 f3a6 	rbit	r3, r6
 8000f76:	fab3 f383 	clz	r3, r3
 8000f7a:	f003 031f 	and.w	r3, r3, #31
 8000f7e:	fa07 f303 	lsl.w	r3, r7, r3
 8000f82:	4213      	tst	r3, r2
 8000f84:	d1a9      	bne.n	8000eda <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f86:	f7ff fe3d 	bl	8000c04 <HAL_GetTick>
 8000f8a:	eba0 0008 	sub.w	r0, r0, r8
 8000f8e:	2864      	cmp	r0, #100	; 0x64
 8000f90:	d9ec      	bls.n	8000f6c <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 8000f92:	2003      	movs	r0, #3
 8000f94:	e79b      	b.n	8000ece <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f96:	6823      	ldr	r3, [r4, #0]
 8000f98:	b932      	cbnz	r2, 8000fa8 <HAL_RCC_OscConfig+0xe4>
 8000f9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f9e:	6023      	str	r3, [r4, #0]
 8000fa0:	6823      	ldr	r3, [r4, #0]
 8000fa2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fa6:	e7d3      	b.n	8000f50 <HAL_RCC_OscConfig+0x8c>
 8000fa8:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000fac:	d1f5      	bne.n	8000f9a <HAL_RCC_OscConfig+0xd6>
 8000fae:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fb2:	6023      	str	r3, [r4, #0]
 8000fb4:	e7c9      	b.n	8000f4a <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000fb6:	f7ff fe25 	bl	8000c04 <HAL_GetTick>
 8000fba:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000fbe:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fc0:	2701      	movs	r7, #1
 8000fc2:	fa96 f3a6 	rbit	r3, r6
 8000fc6:	6822      	ldr	r2, [r4, #0]
 8000fc8:	fa96 f3a6 	rbit	r3, r6
 8000fcc:	fab3 f383 	clz	r3, r3
 8000fd0:	f003 031f 	and.w	r3, r3, #31
 8000fd4:	fa07 f303 	lsl.w	r3, r7, r3
 8000fd8:	4213      	tst	r3, r2
 8000fda:	f43f af7e 	beq.w	8000eda <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fde:	f7ff fe11 	bl	8000c04 <HAL_GetTick>
 8000fe2:	eba0 0008 	sub.w	r0, r0, r8
 8000fe6:	2864      	cmp	r0, #100	; 0x64
 8000fe8:	d9eb      	bls.n	8000fc2 <HAL_RCC_OscConfig+0xfe>
 8000fea:	e7d2      	b.n	8000f92 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fec:	4c7e      	ldr	r4, [pc, #504]	; (80011e8 <HAL_RCC_OscConfig+0x324>)
 8000fee:	6863      	ldr	r3, [r4, #4]
 8000ff0:	f013 0f0c 	tst.w	r3, #12
 8000ff4:	d007      	beq.n	8001006 <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000ff6:	6863      	ldr	r3, [r4, #4]
 8000ff8:	f003 030c 	and.w	r3, r3, #12
 8000ffc:	2b08      	cmp	r3, #8
 8000ffe:	d122      	bne.n	8001046 <HAL_RCC_OscConfig+0x182>
 8001000:	6863      	ldr	r3, [r4, #4]
 8001002:	03de      	lsls	r6, r3, #15
 8001004:	d41f      	bmi.n	8001046 <HAL_RCC_OscConfig+0x182>
 8001006:	2302      	movs	r3, #2
 8001008:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800100c:	6821      	ldr	r1, [r4, #0]
 800100e:	fa93 f3a3 	rbit	r3, r3
 8001012:	fab3 f383 	clz	r3, r3
 8001016:	f003 031f 	and.w	r3, r3, #31
 800101a:	2201      	movs	r2, #1
 800101c:	fa02 f303 	lsl.w	r3, r2, r3
 8001020:	420b      	tst	r3, r1
 8001022:	d003      	beq.n	800102c <HAL_RCC_OscConfig+0x168>
 8001024:	692b      	ldr	r3, [r5, #16]
 8001026:	4293      	cmp	r3, r2
 8001028:	f47f af50 	bne.w	8000ecc <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800102c:	6821      	ldr	r1, [r4, #0]
 800102e:	23f8      	movs	r3, #248	; 0xf8
 8001030:	fa93 f3a3 	rbit	r3, r3
 8001034:	fab3 f283 	clz	r2, r3
 8001038:	696b      	ldr	r3, [r5, #20]
 800103a:	4093      	lsls	r3, r2
 800103c:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8001040:	4313      	orrs	r3, r2
 8001042:	6023      	str	r3, [r4, #0]
 8001044:	e74d      	b.n	8000ee2 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001046:	692a      	ldr	r2, [r5, #16]
 8001048:	2601      	movs	r6, #1
 800104a:	b30a      	cbz	r2, 8001090 <HAL_RCC_OscConfig+0x1cc>
 800104c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8001050:	fab3 f383 	clz	r3, r3
 8001054:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001058:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800105c:	009b      	lsls	r3, r3, #2
 800105e:	2702      	movs	r7, #2
 8001060:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001062:	f7ff fdcf 	bl	8000c04 <HAL_GetTick>
 8001066:	4680      	mov	r8, r0
 8001068:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800106c:	6822      	ldr	r2, [r4, #0]
 800106e:	fa97 f3a7 	rbit	r3, r7
 8001072:	fab3 f383 	clz	r3, r3
 8001076:	f003 031f 	and.w	r3, r3, #31
 800107a:	fa06 f303 	lsl.w	r3, r6, r3
 800107e:	4213      	tst	r3, r2
 8001080:	d1d4      	bne.n	800102c <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001082:	f7ff fdbf 	bl	8000c04 <HAL_GetTick>
 8001086:	eba0 0008 	sub.w	r0, r0, r8
 800108a:	2802      	cmp	r0, #2
 800108c:	d9ec      	bls.n	8001068 <HAL_RCC_OscConfig+0x1a4>
 800108e:	e780      	b.n	8000f92 <HAL_RCC_OscConfig+0xce>
 8001090:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8001094:	fab3 f383 	clz	r3, r3
 8001098:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800109c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010a0:	009b      	lsls	r3, r3, #2
 80010a2:	2702      	movs	r7, #2
 80010a4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010a6:	f7ff fdad 	bl	8000c04 <HAL_GetTick>
 80010aa:	4680      	mov	r8, r0
 80010ac:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010b0:	6822      	ldr	r2, [r4, #0]
 80010b2:	fa97 f3a7 	rbit	r3, r7
 80010b6:	fab3 f383 	clz	r3, r3
 80010ba:	f003 031f 	and.w	r3, r3, #31
 80010be:	fa06 f303 	lsl.w	r3, r6, r3
 80010c2:	4213      	tst	r3, r2
 80010c4:	f43f af0d 	beq.w	8000ee2 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010c8:	f7ff fd9c 	bl	8000c04 <HAL_GetTick>
 80010cc:	eba0 0008 	sub.w	r0, r0, r8
 80010d0:	2802      	cmp	r0, #2
 80010d2:	d9eb      	bls.n	80010ac <HAL_RCC_OscConfig+0x1e8>
 80010d4:	e75d      	b.n	8000f92 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010d6:	69aa      	ldr	r2, [r5, #24]
 80010d8:	4e43      	ldr	r6, [pc, #268]	; (80011e8 <HAL_RCC_OscConfig+0x324>)
 80010da:	4944      	ldr	r1, [pc, #272]	; (80011ec <HAL_RCC_OscConfig+0x328>)
 80010dc:	2401      	movs	r4, #1
 80010de:	b31a      	cbz	r2, 8001128 <HAL_RCC_OscConfig+0x264>
 80010e0:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80010e4:	fab3 f383 	clz	r3, r3
 80010e8:	440b      	add	r3, r1
 80010ea:	009b      	lsls	r3, r3, #2
 80010ec:	2702      	movs	r7, #2
 80010ee:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80010f0:	f7ff fd88 	bl	8000c04 <HAL_GetTick>
 80010f4:	4680      	mov	r8, r0
 80010f6:	fa97 f3a7 	rbit	r3, r7
 80010fa:	fa97 f3a7 	rbit	r3, r7
 80010fe:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001102:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001104:	fa97 f3a7 	rbit	r3, r7
 8001108:	fab3 f383 	clz	r3, r3
 800110c:	f003 031f 	and.w	r3, r3, #31
 8001110:	fa04 f303 	lsl.w	r3, r4, r3
 8001114:	4213      	tst	r3, r2
 8001116:	f47f aee8 	bne.w	8000eea <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800111a:	f7ff fd73 	bl	8000c04 <HAL_GetTick>
 800111e:	eba0 0008 	sub.w	r0, r0, r8
 8001122:	2802      	cmp	r0, #2
 8001124:	d9e7      	bls.n	80010f6 <HAL_RCC_OscConfig+0x232>
 8001126:	e734      	b.n	8000f92 <HAL_RCC_OscConfig+0xce>
 8001128:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 800112c:	fab3 f383 	clz	r3, r3
 8001130:	440b      	add	r3, r1
 8001132:	009b      	lsls	r3, r3, #2
 8001134:	2702      	movs	r7, #2
 8001136:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001138:	f7ff fd64 	bl	8000c04 <HAL_GetTick>
 800113c:	4680      	mov	r8, r0
 800113e:	fa97 f3a7 	rbit	r3, r7
 8001142:	fa97 f3a7 	rbit	r3, r7
 8001146:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800114a:	6a72      	ldr	r2, [r6, #36]	; 0x24
 800114c:	fa97 f3a7 	rbit	r3, r7
 8001150:	fab3 f383 	clz	r3, r3
 8001154:	f003 031f 	and.w	r3, r3, #31
 8001158:	fa04 f303 	lsl.w	r3, r4, r3
 800115c:	4213      	tst	r3, r2
 800115e:	f43f aec4 	beq.w	8000eea <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001162:	f7ff fd4f 	bl	8000c04 <HAL_GetTick>
 8001166:	eba0 0008 	sub.w	r0, r0, r8
 800116a:	2802      	cmp	r0, #2
 800116c:	d9e7      	bls.n	800113e <HAL_RCC_OscConfig+0x27a>
 800116e:	e710      	b.n	8000f92 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001170:	4c1d      	ldr	r4, [pc, #116]	; (80011e8 <HAL_RCC_OscConfig+0x324>)
 8001172:	69e3      	ldr	r3, [r4, #28]
 8001174:	00d9      	lsls	r1, r3, #3
 8001176:	d434      	bmi.n	80011e2 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001178:	69e3      	ldr	r3, [r4, #28]
 800117a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800117e:	61e3      	str	r3, [r4, #28]
 8001180:	69e3      	ldr	r3, [r4, #28]
 8001182:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001186:	9301      	str	r3, [sp, #4]
 8001188:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800118a:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800118c:	4f18      	ldr	r7, [pc, #96]	; (80011f0 <HAL_RCC_OscConfig+0x32c>)
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	05da      	lsls	r2, r3, #23
 8001192:	d52f      	bpl.n	80011f4 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001194:	68eb      	ldr	r3, [r5, #12]
 8001196:	2b01      	cmp	r3, #1
 8001198:	d13d      	bne.n	8001216 <HAL_RCC_OscConfig+0x352>
 800119a:	6a23      	ldr	r3, [r4, #32]
 800119c:	f043 0301 	orr.w	r3, r3, #1
 80011a0:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80011a2:	f7ff fd2f 	bl	8000c04 <HAL_GetTick>
 80011a6:	2702      	movs	r7, #2
 80011a8:	4682      	mov	sl, r0
 80011aa:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011ac:	f04f 0801 	mov.w	r8, #1
 80011b0:	fa97 f3a7 	rbit	r3, r7
 80011b4:	fa97 f3a7 	rbit	r3, r7
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d06c      	beq.n	8001296 <HAL_RCC_OscConfig+0x3d2>
 80011bc:	6a22      	ldr	r2, [r4, #32]
 80011be:	fa99 f3a9 	rbit	r3, r9
 80011c2:	fab3 f383 	clz	r3, r3
 80011c6:	f003 031f 	and.w	r3, r3, #31
 80011ca:	fa08 f303 	lsl.w	r3, r8, r3
 80011ce:	4213      	tst	r3, r2
 80011d0:	d058      	beq.n	8001284 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 80011d2:	2e00      	cmp	r6, #0
 80011d4:	f43f ae8d 	beq.w	8000ef2 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011d8:	69e3      	ldr	r3, [r4, #28]
 80011da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011de:	61e3      	str	r3, [r4, #28]
 80011e0:	e687      	b.n	8000ef2 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80011e2:	2600      	movs	r6, #0
 80011e4:	e7d2      	b.n	800118c <HAL_RCC_OscConfig+0x2c8>
 80011e6:	bf00      	nop
 80011e8:	40021000 	.word	0x40021000
 80011ec:	10908120 	.word	0x10908120
 80011f0:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fa:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80011fc:	f7ff fd02 	bl	8000c04 <HAL_GetTick>
 8001200:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001202:	683b      	ldr	r3, [r7, #0]
 8001204:	05db      	lsls	r3, r3, #23
 8001206:	d4c5      	bmi.n	8001194 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001208:	f7ff fcfc 	bl	8000c04 <HAL_GetTick>
 800120c:	eba0 0008 	sub.w	r0, r0, r8
 8001210:	2864      	cmp	r0, #100	; 0x64
 8001212:	d9f6      	bls.n	8001202 <HAL_RCC_OscConfig+0x33e>
 8001214:	e6bd      	b.n	8000f92 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001216:	bb3b      	cbnz	r3, 8001268 <HAL_RCC_OscConfig+0x3a4>
 8001218:	6a23      	ldr	r3, [r4, #32]
 800121a:	f023 0301 	bic.w	r3, r3, #1
 800121e:	6223      	str	r3, [r4, #32]
 8001220:	6a23      	ldr	r3, [r4, #32]
 8001222:	f023 0304 	bic.w	r3, r3, #4
 8001226:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001228:	f7ff fcec 	bl	8000c04 <HAL_GetTick>
 800122c:	2702      	movs	r7, #2
 800122e:	4682      	mov	sl, r0
 8001230:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001232:	f04f 0801 	mov.w	r8, #1
 8001236:	fa97 f3a7 	rbit	r3, r7
 800123a:	fa97 f3a7 	rbit	r3, r7
 800123e:	b373      	cbz	r3, 800129e <HAL_RCC_OscConfig+0x3da>
 8001240:	6a22      	ldr	r2, [r4, #32]
 8001242:	fa99 f3a9 	rbit	r3, r9
 8001246:	fab3 f383 	clz	r3, r3
 800124a:	f003 031f 	and.w	r3, r3, #31
 800124e:	fa08 f303 	lsl.w	r3, r8, r3
 8001252:	4213      	tst	r3, r2
 8001254:	d0bd      	beq.n	80011d2 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001256:	f7ff fcd5 	bl	8000c04 <HAL_GetTick>
 800125a:	f241 3388 	movw	r3, #5000	; 0x1388
 800125e:	eba0 000a 	sub.w	r0, r0, sl
 8001262:	4298      	cmp	r0, r3
 8001264:	d9e7      	bls.n	8001236 <HAL_RCC_OscConfig+0x372>
 8001266:	e694      	b.n	8000f92 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001268:	2b05      	cmp	r3, #5
 800126a:	6a23      	ldr	r3, [r4, #32]
 800126c:	d103      	bne.n	8001276 <HAL_RCC_OscConfig+0x3b2>
 800126e:	f043 0304 	orr.w	r3, r3, #4
 8001272:	6223      	str	r3, [r4, #32]
 8001274:	e791      	b.n	800119a <HAL_RCC_OscConfig+0x2d6>
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	6223      	str	r3, [r4, #32]
 800127c:	6a23      	ldr	r3, [r4, #32]
 800127e:	f023 0304 	bic.w	r3, r3, #4
 8001282:	e78d      	b.n	80011a0 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001284:	f7ff fcbe 	bl	8000c04 <HAL_GetTick>
 8001288:	f241 3388 	movw	r3, #5000	; 0x1388
 800128c:	eba0 000a 	sub.w	r0, r0, sl
 8001290:	4298      	cmp	r0, r3
 8001292:	d98d      	bls.n	80011b0 <HAL_RCC_OscConfig+0x2ec>
 8001294:	e67d      	b.n	8000f92 <HAL_RCC_OscConfig+0xce>
 8001296:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800129a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800129c:	e78f      	b.n	80011be <HAL_RCC_OscConfig+0x2fa>
 800129e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012a2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012a4:	e7cd      	b.n	8001242 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012a6:	4c41      	ldr	r4, [pc, #260]	; (80013ac <HAL_RCC_OscConfig+0x4e8>)
 80012a8:	6863      	ldr	r3, [r4, #4]
 80012aa:	f003 030c 	and.w	r3, r3, #12
 80012ae:	2b08      	cmp	r3, #8
 80012b0:	f43f ae0c 	beq.w	8000ecc <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012b4:	2a02      	cmp	r2, #2
 80012b6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012ba:	d152      	bne.n	8001362 <HAL_RCC_OscConfig+0x49e>
 80012bc:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80012c0:	fab3 f383 	clz	r3, r3
 80012c4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012c8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	2200      	movs	r2, #0
 80012d0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012d2:	f7ff fc97 	bl	8000c04 <HAL_GetTick>
 80012d6:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80012da:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012dc:	2601      	movs	r6, #1
 80012de:	fa97 f3a7 	rbit	r3, r7
 80012e2:	6822      	ldr	r2, [r4, #0]
 80012e4:	fa97 f3a7 	rbit	r3, r7
 80012e8:	fab3 f383 	clz	r3, r3
 80012ec:	f003 031f 	and.w	r3, r3, #31
 80012f0:	fa06 f303 	lsl.w	r3, r6, r3
 80012f4:	4213      	tst	r3, r2
 80012f6:	d12d      	bne.n	8001354 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80012f8:	6862      	ldr	r2, [r4, #4]
 80012fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80012fc:	6a29      	ldr	r1, [r5, #32]
 80012fe:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8001302:	430b      	orrs	r3, r1
 8001304:	4313      	orrs	r3, r2
 8001306:	6063      	str	r3, [r4, #4]
 8001308:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800130c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8001310:	fab3 f383 	clz	r3, r3
 8001314:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001318:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800131c:	009b      	lsls	r3, r3, #2
 800131e:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001322:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001324:	f7ff fc6e 	bl	8000c04 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001328:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 800132a:	4607      	mov	r7, r0
 800132c:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001330:	6822      	ldr	r2, [r4, #0]
 8001332:	fa95 f3a5 	rbit	r3, r5
 8001336:	fab3 f383 	clz	r3, r3
 800133a:	f003 031f 	and.w	r3, r3, #31
 800133e:	fa06 f303 	lsl.w	r3, r6, r3
 8001342:	4213      	tst	r3, r2
 8001344:	f47f add9 	bne.w	8000efa <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001348:	f7ff fc5c 	bl	8000c04 <HAL_GetTick>
 800134c:	1bc0      	subs	r0, r0, r7
 800134e:	2802      	cmp	r0, #2
 8001350:	d9ec      	bls.n	800132c <HAL_RCC_OscConfig+0x468>
 8001352:	e61e      	b.n	8000f92 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001354:	f7ff fc56 	bl	8000c04 <HAL_GetTick>
 8001358:	eba0 0008 	sub.w	r0, r0, r8
 800135c:	2802      	cmp	r0, #2
 800135e:	d9be      	bls.n	80012de <HAL_RCC_OscConfig+0x41a>
 8001360:	e617      	b.n	8000f92 <HAL_RCC_OscConfig+0xce>
 8001362:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001366:	fab3 f383 	clz	r3, r3
 800136a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800136e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001372:	009b      	lsls	r3, r3, #2
 8001374:	2200      	movs	r2, #0
 8001376:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001378:	f7ff fc44 	bl	8000c04 <HAL_GetTick>
 800137c:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8001380:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001382:	2601      	movs	r6, #1
 8001384:	fa95 f3a5 	rbit	r3, r5
 8001388:	6822      	ldr	r2, [r4, #0]
 800138a:	fa95 f3a5 	rbit	r3, r5
 800138e:	fab3 f383 	clz	r3, r3
 8001392:	f003 031f 	and.w	r3, r3, #31
 8001396:	fa06 f303 	lsl.w	r3, r6, r3
 800139a:	4213      	tst	r3, r2
 800139c:	f43f adad 	beq.w	8000efa <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a0:	f7ff fc30 	bl	8000c04 <HAL_GetTick>
 80013a4:	1bc0      	subs	r0, r0, r7
 80013a6:	2802      	cmp	r0, #2
 80013a8:	d9ec      	bls.n	8001384 <HAL_RCC_OscConfig+0x4c0>
 80013aa:	e5f2      	b.n	8000f92 <HAL_RCC_OscConfig+0xce>
 80013ac:	40021000 	.word	0x40021000

080013b0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013b0:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80013b2:	4c13      	ldr	r4, [pc, #76]	; (8001400 <HAL_RCC_GetSysClockFreq+0x50>)
 80013b4:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013b6:	f001 030c 	and.w	r3, r1, #12
 80013ba:	2b08      	cmp	r3, #8
 80013bc:	d11e      	bne.n	80013fc <HAL_RCC_GetSysClockFreq+0x4c>
 80013be:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80013c2:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80013c6:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80013ca:	fab3 f383 	clz	r3, r3
 80013ce:	fa22 f303 	lsr.w	r3, r2, r3
 80013d2:	4a0c      	ldr	r2, [pc, #48]	; (8001404 <HAL_RCC_GetSysClockFreq+0x54>)
 80013d4:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80013d6:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013d8:	220f      	movs	r2, #15
 80013da:	fa92 f2a2 	rbit	r2, r2
 80013de:	fab2 f282 	clz	r2, r2
 80013e2:	f003 030f 	and.w	r3, r3, #15
 80013e6:	40d3      	lsrs	r3, r2
 80013e8:	4a07      	ldr	r2, [pc, #28]	; (8001408 <HAL_RCC_GetSysClockFreq+0x58>)
 80013ea:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80013ec:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80013ee:	bf4a      	itet	mi
 80013f0:	4b06      	ldrmi	r3, [pc, #24]	; (800140c <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80013f2:	4b07      	ldrpl	r3, [pc, #28]	; (8001410 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80013f4:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80013f8:	4358      	muls	r0, r3
 80013fa:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80013fc:	4803      	ldr	r0, [pc, #12]	; (800140c <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80013fe:	bd10      	pop	{r4, pc}
 8001400:	40021000 	.word	0x40021000
 8001404:	08002e98 	.word	0x08002e98
 8001408:	08002ea8 	.word	0x08002ea8
 800140c:	007a1200 	.word	0x007a1200
 8001410:	003d0900 	.word	0x003d0900

08001414 <HAL_RCC_ClockConfig>:
{
 8001414:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001418:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 800141a:	4604      	mov	r4, r0
 800141c:	b910      	cbnz	r0, 8001424 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800141e:	2001      	movs	r0, #1
 8001420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001424:	4a4c      	ldr	r2, [pc, #304]	; (8001558 <HAL_RCC_ClockConfig+0x144>)
 8001426:	6813      	ldr	r3, [r2, #0]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	428b      	cmp	r3, r1
 800142e:	d32e      	bcc.n	800148e <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001430:	6822      	ldr	r2, [r4, #0]
 8001432:	0791      	lsls	r1, r2, #30
 8001434:	d436      	bmi.n	80014a4 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001436:	07d2      	lsls	r2, r2, #31
 8001438:	d43c      	bmi.n	80014b4 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800143a:	4a47      	ldr	r2, [pc, #284]	; (8001558 <HAL_RCC_ClockConfig+0x144>)
 800143c:	6813      	ldr	r3, [r2, #0]
 800143e:	f003 0307 	and.w	r3, r3, #7
 8001442:	429d      	cmp	r5, r3
 8001444:	d375      	bcc.n	8001532 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001446:	6822      	ldr	r2, [r4, #0]
 8001448:	4d44      	ldr	r5, [pc, #272]	; (800155c <HAL_RCC_ClockConfig+0x148>)
 800144a:	f012 0f04 	tst.w	r2, #4
 800144e:	d17c      	bne.n	800154a <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001450:	0713      	lsls	r3, r2, #28
 8001452:	d506      	bpl.n	8001462 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001454:	686b      	ldr	r3, [r5, #4]
 8001456:	6922      	ldr	r2, [r4, #16]
 8001458:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 800145c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8001460:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001462:	f7ff ffa5 	bl	80013b0 <HAL_RCC_GetSysClockFreq>
 8001466:	686b      	ldr	r3, [r5, #4]
 8001468:	22f0      	movs	r2, #240	; 0xf0
 800146a:	fa92 f2a2 	rbit	r2, r2
 800146e:	fab2 f282 	clz	r2, r2
 8001472:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001476:	40d3      	lsrs	r3, r2
 8001478:	4a39      	ldr	r2, [pc, #228]	; (8001560 <HAL_RCC_ClockConfig+0x14c>)
 800147a:	5cd3      	ldrb	r3, [r2, r3]
 800147c:	40d8      	lsrs	r0, r3
 800147e:	4b39      	ldr	r3, [pc, #228]	; (8001564 <HAL_RCC_ClockConfig+0x150>)
 8001480:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8001482:	2000      	movs	r0, #0
 8001484:	f7ff fb7c 	bl	8000b80 <HAL_InitTick>
  return HAL_OK;
 8001488:	2000      	movs	r0, #0
 800148a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148e:	6813      	ldr	r3, [r2, #0]
 8001490:	f023 0307 	bic.w	r3, r3, #7
 8001494:	430b      	orrs	r3, r1
 8001496:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001498:	6813      	ldr	r3, [r2, #0]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	4299      	cmp	r1, r3
 80014a0:	d1bd      	bne.n	800141e <HAL_RCC_ClockConfig+0xa>
 80014a2:	e7c5      	b.n	8001430 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014a4:	492d      	ldr	r1, [pc, #180]	; (800155c <HAL_RCC_ClockConfig+0x148>)
 80014a6:	68a0      	ldr	r0, [r4, #8]
 80014a8:	684b      	ldr	r3, [r1, #4]
 80014aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014ae:	4303      	orrs	r3, r0
 80014b0:	604b      	str	r3, [r1, #4]
 80014b2:	e7c0      	b.n	8001436 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014b4:	6862      	ldr	r2, [r4, #4]
 80014b6:	4e29      	ldr	r6, [pc, #164]	; (800155c <HAL_RCC_ClockConfig+0x148>)
 80014b8:	2a01      	cmp	r2, #1
 80014ba:	d127      	bne.n	800150c <HAL_RCC_ClockConfig+0xf8>
 80014bc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014c0:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014c4:	6831      	ldr	r1, [r6, #0]
 80014c6:	fa93 f3a3 	rbit	r3, r3
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	f003 031f 	and.w	r3, r3, #31
 80014d2:	fa02 f303 	lsl.w	r3, r2, r3
 80014d6:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d8:	d0a1      	beq.n	800141e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014da:	6873      	ldr	r3, [r6, #4]
 80014dc:	f023 0303 	bic.w	r3, r3, #3
 80014e0:	431a      	orrs	r2, r3
 80014e2:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 80014e4:	f7ff fb8e 	bl	8000c04 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014e8:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80014ec:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014ee:	6873      	ldr	r3, [r6, #4]
 80014f0:	6862      	ldr	r2, [r4, #4]
 80014f2:	f003 030c 	and.w	r3, r3, #12
 80014f6:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80014fa:	d09e      	beq.n	800143a <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014fc:	f7ff fb82 	bl	8000c04 <HAL_GetTick>
 8001500:	1bc0      	subs	r0, r0, r7
 8001502:	4540      	cmp	r0, r8
 8001504:	d9f3      	bls.n	80014ee <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001506:	2003      	movs	r0, #3
}
 8001508:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800150c:	2a02      	cmp	r2, #2
 800150e:	bf0c      	ite	eq
 8001510:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001514:	2302      	movne	r3, #2
 8001516:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800151a:	6830      	ldr	r0, [r6, #0]
 800151c:	fa93 f3a3 	rbit	r3, r3
 8001520:	fab3 f383 	clz	r3, r3
 8001524:	f003 031f 	and.w	r3, r3, #31
 8001528:	2101      	movs	r1, #1
 800152a:	fa01 f303 	lsl.w	r3, r1, r3
 800152e:	4203      	tst	r3, r0
 8001530:	e7d2      	b.n	80014d8 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001532:	6813      	ldr	r3, [r2, #0]
 8001534:	f023 0307 	bic.w	r3, r3, #7
 8001538:	432b      	orrs	r3, r5
 800153a:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800153c:	6813      	ldr	r3, [r2, #0]
 800153e:	f003 0307 	and.w	r3, r3, #7
 8001542:	429d      	cmp	r5, r3
 8001544:	f47f af6b 	bne.w	800141e <HAL_RCC_ClockConfig+0xa>
 8001548:	e77d      	b.n	8001446 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800154a:	686b      	ldr	r3, [r5, #4]
 800154c:	68e1      	ldr	r1, [r4, #12]
 800154e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001552:	430b      	orrs	r3, r1
 8001554:	606b      	str	r3, [r5, #4]
 8001556:	e77b      	b.n	8001450 <HAL_RCC_ClockConfig+0x3c>
 8001558:	40022000 	.word	0x40022000
 800155c:	40021000 	.word	0x40021000
 8001560:	08002ebf 	.word	0x08002ebf
 8001564:	20000008 	.word	0x20000008

08001568 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001568:	4b08      	ldr	r3, [pc, #32]	; (800158c <HAL_RCC_GetPCLK1Freq+0x24>)
 800156a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800156e:	685b      	ldr	r3, [r3, #4]
 8001570:	fa92 f2a2 	rbit	r2, r2
 8001574:	fab2 f282 	clz	r2, r2
 8001578:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800157c:	40d3      	lsrs	r3, r2
 800157e:	4a04      	ldr	r2, [pc, #16]	; (8001590 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001580:	5cd3      	ldrb	r3, [r2, r3]
 8001582:	4a04      	ldr	r2, [pc, #16]	; (8001594 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001584:	6810      	ldr	r0, [r2, #0]
}    
 8001586:	40d8      	lsrs	r0, r3
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40021000 	.word	0x40021000
 8001590:	08002ecf 	.word	0x08002ecf
 8001594:	20000008 	.word	0x20000008

08001598 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8001598:	4b08      	ldr	r3, [pc, #32]	; (80015bc <HAL_RCC_GetPCLK2Freq+0x24>)
 800159a:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	fa92 f2a2 	rbit	r2, r2
 80015a4:	fab2 f282 	clz	r2, r2
 80015a8:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80015ac:	40d3      	lsrs	r3, r2
 80015ae:	4a04      	ldr	r2, [pc, #16]	; (80015c0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80015b0:	5cd3      	ldrb	r3, [r2, r3]
 80015b2:	4a04      	ldr	r2, [pc, #16]	; (80015c4 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80015b4:	6810      	ldr	r0, [r2, #0]
} 
 80015b6:	40d8      	lsrs	r0, r3
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40021000 	.word	0x40021000
 80015c0:	08002ecf 	.word	0x08002ecf
 80015c4:	20000008 	.word	0x20000008

080015c8 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80015c8:	6803      	ldr	r3, [r0, #0]
 80015ca:	681a      	ldr	r2, [r3, #0]
 80015cc:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80015d0:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80015d2:	689a      	ldr	r2, [r3, #8]
 80015d4:	f022 0201 	bic.w	r2, r2, #1
 80015d8:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80015da:	2320      	movs	r3, #32
 80015dc:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a
 80015e0:	4770      	bx	lr

080015e2 <HAL_UART_TxCpltCallback>:
 80015e2:	4770      	bx	lr

080015e4 <HAL_UART_RxCpltCallback>:
 80015e4:	4770      	bx	lr

080015e6 <HAL_UART_ErrorCallback>:
 80015e6:	4770      	bx	lr

080015e8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80015e8:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80015ea:	6a40      	ldr	r0, [r0, #36]	; 0x24
  huart->RxXferCount = 0U;
 80015ec:	2300      	movs	r3, #0
 80015ee:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80015f2:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52

  HAL_UART_ErrorCallback(huart);
 80015f6:	f7ff fff6 	bl	80015e6 <HAL_UART_ErrorCallback>
 80015fa:	bd08      	pop	{r3, pc}

080015fc <UART_SetConfig>:
{
 80015fc:	b538      	push	{r3, r4, r5, lr}
 80015fe:	4604      	mov	r4, r0
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001600:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001602:	6921      	ldr	r1, [r4, #16]
 8001604:	68a3      	ldr	r3, [r4, #8]
 8001606:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001608:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800160a:	430b      	orrs	r3, r1
 800160c:	6961      	ldr	r1, [r4, #20]
 800160e:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001610:	4949      	ldr	r1, [pc, #292]	; (8001738 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001612:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001614:	4001      	ands	r1, r0
 8001616:	430b      	orrs	r3, r1
 8001618:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800161a:	686b      	ldr	r3, [r5, #4]
 800161c:	68e1      	ldr	r1, [r4, #12]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800161e:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001620:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001624:	430b      	orrs	r3, r1
 8001626:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001628:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800162a:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800162c:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001630:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001632:	430b      	orrs	r3, r1
 8001634:	60ab      	str	r3, [r5, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001636:	4b41      	ldr	r3, [pc, #260]	; (800173c <UART_SetConfig+0x140>)
 8001638:	429d      	cmp	r5, r3
 800163a:	d112      	bne.n	8001662 <UART_SetConfig+0x66>
 800163c:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001640:	493f      	ldr	r1, [pc, #252]	; (8001740 <UART_SetConfig+0x144>)
 8001642:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001644:	f003 0303 	and.w	r3, r3, #3
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001648:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800164c:	5ccb      	ldrb	r3, [r1, r3]
 800164e:	d13b      	bne.n	80016c8 <UART_SetConfig+0xcc>
    switch (clocksource)
 8001650:	2b08      	cmp	r3, #8
 8001652:	d836      	bhi.n	80016c2 <UART_SetConfig+0xc6>
 8001654:	e8df f003 	tbb	[pc, r3]
 8001658:	3524210f 	.word	0x3524210f
 800165c:	3535352d 	.word	0x3535352d
 8001660:	30          	.byte	0x30
 8001661:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001662:	4b38      	ldr	r3, [pc, #224]	; (8001744 <UART_SetConfig+0x148>)
 8001664:	429d      	cmp	r5, r3
 8001666:	d003      	beq.n	8001670 <UART_SetConfig+0x74>
 8001668:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800166c:	429d      	cmp	r5, r3
 800166e:	d15e      	bne.n	800172e <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001670:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001674:	d131      	bne.n	80016da <UART_SetConfig+0xde>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001676:	f7ff ff77 	bl	8001568 <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800167a:	6861      	ldr	r1, [r4, #4]
 800167c:	084a      	lsrs	r2, r1, #1
 800167e:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001682:	fbb3 f3f1 	udiv	r3, r3, r1
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001686:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001688:	2000      	movs	r0, #0
    brrtemp = usartdiv & 0xFFF0U;
 800168a:	f023 020f 	bic.w	r2, r3, #15
    huart->Instance->BRR = brrtemp;
 800168e:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001690:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001694:	4313      	orrs	r3, r2
 8001696:	60cb      	str	r3, [r1, #12]
 8001698:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800169a:	f7ff ff7d 	bl	8001598 <HAL_RCC_GetPCLK2Freq>
 800169e:	e7ec      	b.n	800167a <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80016a0:	6860      	ldr	r0, [r4, #4]
 80016a2:	0843      	lsrs	r3, r0, #1
 80016a4:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80016a8:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80016ac:	fbb3 f3f0 	udiv	r3, r3, r0
 80016b0:	e7e9      	b.n	8001686 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80016b2:	f7ff fe7d 	bl	80013b0 <HAL_RCC_GetSysClockFreq>
 80016b6:	e7e0      	b.n	800167a <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80016b8:	6860      	ldr	r0, [r4, #4]
 80016ba:	0843      	lsrs	r3, r0, #1
 80016bc:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 80016c0:	e7f4      	b.n	80016ac <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 80016c2:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	e7e0      	b.n	800168a <UART_SetConfig+0x8e>
    switch (clocksource)
 80016c8:	2b08      	cmp	r3, #8
 80016ca:	d833      	bhi.n	8001734 <UART_SetConfig+0x138>
 80016cc:	e8df f003 	tbb	[pc, r3]
 80016d0:	321b1005 	.word	0x321b1005
 80016d4:	32323227 	.word	0x32323227
 80016d8:	2a          	.byte	0x2a
 80016d9:	00          	.byte	0x00
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80016da:	f7ff ff45 	bl	8001568 <HAL_RCC_GetPCLK1Freq>
 80016de:	6863      	ldr	r3, [r4, #4]
 80016e0:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80016e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80016e8:	b280      	uxth	r0, r0
 80016ea:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80016ec:	2000      	movs	r0, #0
        break;
 80016ee:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80016f0:	f7ff ff52 	bl	8001598 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80016f4:	6863      	ldr	r3, [r4, #4]
 80016f6:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80016fa:	fbb0 f0f3 	udiv	r0, r0, r3
 80016fe:	4b0f      	ldr	r3, [pc, #60]	; (800173c <UART_SetConfig+0x140>)
 8001700:	b280      	uxth	r0, r0
 8001702:	60d8      	str	r0, [r3, #12]
 8001704:	e7f2      	b.n	80016ec <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001706:	6862      	ldr	r2, [r4, #4]
 8001708:	0853      	lsrs	r3, r2, #1
 800170a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800170e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001712:	fbb3 f3f2 	udiv	r3, r3, r2
 8001716:	4a09      	ldr	r2, [pc, #36]	; (800173c <UART_SetConfig+0x140>)
 8001718:	b29b      	uxth	r3, r3
 800171a:	60d3      	str	r3, [r2, #12]
 800171c:	e7e6      	b.n	80016ec <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800171e:	f7ff fe47 	bl	80013b0 <HAL_RCC_GetSysClockFreq>
 8001722:	e7e7      	b.n	80016f4 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001724:	6862      	ldr	r2, [r4, #4]
 8001726:	0853      	lsrs	r3, r2, #1
 8001728:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 800172c:	e7f1      	b.n	8001712 <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800172e:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001732:	d0c6      	beq.n	80016c2 <UART_SetConfig+0xc6>
        ret = HAL_ERROR;
 8001734:	2001      	movs	r0, #1
  return ret;
 8001736:	bd38      	pop	{r3, r4, r5, pc}
 8001738:	efff69f3 	.word	0xefff69f3
 800173c:	40013800 	.word	0x40013800
 8001740:	08002eb8 	.word	0x08002eb8
 8001744:	40004400 	.word	0x40004400

08001748 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001748:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800174a:	07da      	lsls	r2, r3, #31
{
 800174c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800174e:	d506      	bpl.n	800175e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001750:	6801      	ldr	r1, [r0, #0]
 8001752:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001754:	684a      	ldr	r2, [r1, #4]
 8001756:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800175a:	4322      	orrs	r2, r4
 800175c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800175e:	079c      	lsls	r4, r3, #30
 8001760:	d506      	bpl.n	8001770 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001762:	6801      	ldr	r1, [r0, #0]
 8001764:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001766:	684a      	ldr	r2, [r1, #4]
 8001768:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800176c:	4322      	orrs	r2, r4
 800176e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001770:	0759      	lsls	r1, r3, #29
 8001772:	d506      	bpl.n	8001782 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001774:	6801      	ldr	r1, [r0, #0]
 8001776:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001778:	684a      	ldr	r2, [r1, #4]
 800177a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800177e:	4322      	orrs	r2, r4
 8001780:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001782:	071a      	lsls	r2, r3, #28
 8001784:	d506      	bpl.n	8001794 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001786:	6801      	ldr	r1, [r0, #0]
 8001788:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800178a:	684a      	ldr	r2, [r1, #4]
 800178c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001790:	4322      	orrs	r2, r4
 8001792:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001794:	06dc      	lsls	r4, r3, #27
 8001796:	d506      	bpl.n	80017a6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001798:	6801      	ldr	r1, [r0, #0]
 800179a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800179c:	688a      	ldr	r2, [r1, #8]
 800179e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80017a2:	4322      	orrs	r2, r4
 80017a4:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80017a6:	0699      	lsls	r1, r3, #26
 80017a8:	d506      	bpl.n	80017b8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80017aa:	6801      	ldr	r1, [r0, #0]
 80017ac:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 80017ae:	688a      	ldr	r2, [r1, #8]
 80017b0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80017b4:	4322      	orrs	r2, r4
 80017b6:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80017b8:	065a      	lsls	r2, r3, #25
 80017ba:	d50f      	bpl.n	80017dc <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80017bc:	6801      	ldr	r1, [r0, #0]
 80017be:	6c04      	ldr	r4, [r0, #64]	; 0x40
 80017c0:	684a      	ldr	r2, [r1, #4]
 80017c2:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 80017c6:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80017c8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80017cc:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80017ce:	d105      	bne.n	80017dc <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80017d0:	684a      	ldr	r2, [r1, #4]
 80017d2:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80017d4:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80017d8:	4322      	orrs	r2, r4
 80017da:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80017dc:	061b      	lsls	r3, r3, #24
 80017de:	d506      	bpl.n	80017ee <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80017e0:	6802      	ldr	r2, [r0, #0]
 80017e2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80017e4:	6853      	ldr	r3, [r2, #4]
 80017e6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80017ea:	430b      	orrs	r3, r1
 80017ec:	6053      	str	r3, [r2, #4]
 80017ee:	bd10      	pop	{r4, pc}

080017f0 <UART_WaitOnFlagUntilTimeout>:
{
 80017f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017f4:	9d06      	ldr	r5, [sp, #24]
 80017f6:	4604      	mov	r4, r0
 80017f8:	460f      	mov	r7, r1
 80017fa:	4616      	mov	r6, r2
 80017fc:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80017fe:	6821      	ldr	r1, [r4, #0]
 8001800:	69ca      	ldr	r2, [r1, #28]
 8001802:	ea37 0302 	bics.w	r3, r7, r2
 8001806:	bf0c      	ite	eq
 8001808:	2201      	moveq	r2, #1
 800180a:	2200      	movne	r2, #0
 800180c:	42b2      	cmp	r2, r6
 800180e:	d002      	beq.n	8001816 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8001810:	2000      	movs	r0, #0
}
 8001812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001816:	1c6b      	adds	r3, r5, #1
 8001818:	d0f2      	beq.n	8001800 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800181a:	b99d      	cbnz	r5, 8001844 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800181c:	6823      	ldr	r3, [r4, #0]
 800181e:	681a      	ldr	r2, [r3, #0]
 8001820:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001824:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001826:	689a      	ldr	r2, [r3, #8]
 8001828:	f022 0201 	bic.w	r2, r2, #1
 800182c:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800182e:	2320      	movs	r3, #32
 8001830:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001834:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001838:	2300      	movs	r3, #0
 800183a:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800183e:	2003      	movs	r0, #3
 8001840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001844:	f7ff f9de 	bl	8000c04 <HAL_GetTick>
 8001848:	eba0 0008 	sub.w	r0, r0, r8
 800184c:	4285      	cmp	r5, r0
 800184e:	d2d6      	bcs.n	80017fe <UART_WaitOnFlagUntilTimeout+0xe>
 8001850:	e7e4      	b.n	800181c <UART_WaitOnFlagUntilTimeout+0x2c>

08001852 <HAL_UART_Transmit>:
{
 8001852:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8001856:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 8001858:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800185c:	2b20      	cmp	r3, #32
{
 800185e:	4604      	mov	r4, r0
 8001860:	460d      	mov	r5, r1
 8001862:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 8001864:	d14c      	bne.n	8001900 <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 8001866:	2900      	cmp	r1, #0
 8001868:	d048      	beq.n	80018fc <HAL_UART_Transmit+0xaa>
 800186a:	2a00      	cmp	r2, #0
 800186c:	d046      	beq.n	80018fc <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 800186e:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 8001872:	2b01      	cmp	r3, #1
 8001874:	d044      	beq.n	8001900 <HAL_UART_Transmit+0xae>
 8001876:	2301      	movs	r3, #1
 8001878:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800187c:	2300      	movs	r3, #0
 800187e:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001880:	2321      	movs	r3, #33	; 0x21
 8001882:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 8001886:	f7ff f9bd 	bl	8000c04 <HAL_GetTick>
    huart->TxXferSize = Size;
 800188a:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 800188e:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 8001890:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8001894:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 8001898:	b292      	uxth	r2, r2
 800189a:	b962      	cbnz	r2, 80018b6 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800189c:	9700      	str	r7, [sp, #0]
 800189e:	4633      	mov	r3, r6
 80018a0:	2140      	movs	r1, #64	; 0x40
 80018a2:	4620      	mov	r0, r4
 80018a4:	f7ff ffa4 	bl	80017f0 <UART_WaitOnFlagUntilTimeout>
 80018a8:	b998      	cbnz	r0, 80018d2 <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 80018aa:	2320      	movs	r3, #32
 80018ac:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 80018b0:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 80018b4:	e00e      	b.n	80018d4 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 80018b6:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018ba:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 80018bc:	3b01      	subs	r3, #1
 80018be:	b29b      	uxth	r3, r3
 80018c0:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80018c4:	2200      	movs	r2, #0
 80018c6:	4633      	mov	r3, r6
 80018c8:	2180      	movs	r1, #128	; 0x80
 80018ca:	4620      	mov	r0, r4
 80018cc:	f7ff ff90 	bl	80017f0 <UART_WaitOnFlagUntilTimeout>
 80018d0:	b118      	cbz	r0, 80018da <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 80018d2:	2003      	movs	r0, #3
}
 80018d4:	b002      	add	sp, #8
 80018d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80018da:	68a3      	ldr	r3, [r4, #8]
 80018dc:	6822      	ldr	r2, [r4, #0]
 80018de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80018e2:	d107      	bne.n	80018f4 <HAL_UART_Transmit+0xa2>
 80018e4:	6923      	ldr	r3, [r4, #16]
 80018e6:	b92b      	cbnz	r3, 80018f4 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80018e8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80018ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018f0:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 80018f2:	e7cf      	b.n	8001894 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80018f4:	782b      	ldrb	r3, [r5, #0]
 80018f6:	8513      	strh	r3, [r2, #40]	; 0x28
 80018f8:	3501      	adds	r5, #1
 80018fa:	e7cb      	b.n	8001894 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80018fc:	2001      	movs	r0, #1
 80018fe:	e7e9      	b.n	80018d4 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 8001900:	2002      	movs	r0, #2
 8001902:	e7e7      	b.n	80018d4 <HAL_UART_Transmit+0x82>

08001904 <UART_CheckIdleState>:
{
 8001904:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001906:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001908:	2600      	movs	r6, #0
 800190a:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 800190c:	f7ff f97a 	bl	8000c04 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001910:	6823      	ldr	r3, [r4, #0]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001916:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001918:	d417      	bmi.n	800194a <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800191a:	6823      	ldr	r3, [r4, #0]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	075b      	lsls	r3, r3, #29
 8001920:	d50a      	bpl.n	8001938 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001922:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001926:	9300      	str	r3, [sp, #0]
 8001928:	2200      	movs	r2, #0
 800192a:	462b      	mov	r3, r5
 800192c:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001930:	4620      	mov	r0, r4
 8001932:	f7ff ff5d 	bl	80017f0 <UART_WaitOnFlagUntilTimeout>
 8001936:	b9a0      	cbnz	r0, 8001962 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001938:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 800193a:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 800193c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001940:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001944:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001948:	e00c      	b.n	8001964 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800194a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800194e:	9300      	str	r3, [sp, #0]
 8001950:	4632      	mov	r2, r6
 8001952:	4603      	mov	r3, r0
 8001954:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001958:	4620      	mov	r0, r4
 800195a:	f7ff ff49 	bl	80017f0 <UART_WaitOnFlagUntilTimeout>
 800195e:	2800      	cmp	r0, #0
 8001960:	d0db      	beq.n	800191a <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001962:	2003      	movs	r0, #3
}
 8001964:	b002      	add	sp, #8
 8001966:	bd70      	pop	{r4, r5, r6, pc}

08001968 <HAL_UART_Init>:
{
 8001968:	b510      	push	{r4, lr}
  if(huart == NULL)
 800196a:	4604      	mov	r4, r0
 800196c:	b360      	cbz	r0, 80019c8 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800196e:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001972:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001976:	b91b      	cbnz	r3, 8001980 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001978:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 800197c:	f000 fa06 	bl	8001d8c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001980:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001982:	2324      	movs	r3, #36	; 0x24
 8001984:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001988:	6813      	ldr	r3, [r2, #0]
 800198a:	f023 0301 	bic.w	r3, r3, #1
 800198e:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001990:	4620      	mov	r0, r4
 8001992:	f7ff fe33 	bl	80015fc <UART_SetConfig>
 8001996:	2801      	cmp	r0, #1
 8001998:	d016      	beq.n	80019c8 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800199a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800199c:	b113      	cbz	r3, 80019a4 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 800199e:	4620      	mov	r0, r4
 80019a0:	f7ff fed2 	bl	8001748 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80019a4:	6823      	ldr	r3, [r4, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80019ac:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80019b4:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80019bc:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80019be:	601a      	str	r2, [r3, #0]
}
 80019c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80019c4:	f7ff bf9e 	b.w	8001904 <UART_CheckIdleState>
}
 80019c8:	2001      	movs	r0, #1
 80019ca:	bd10      	pop	{r4, pc}

080019cc <UART_Transmit_IT>:
HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
  uint16_t* tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80019cc:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80019d0:	2b21      	cmp	r3, #33	; 0x21
 80019d2:	d127      	bne.n	8001a24 <UART_Transmit_IT+0x58>
  {
    if(huart->TxXferCount == 0U)
 80019d4:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80019d8:	6802      	ldr	r2, [r0, #0]
 80019da:	b29b      	uxth	r3, r3
 80019dc:	b94b      	cbnz	r3, 80019f2 <UART_Transmit_IT+0x26>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80019de:	6811      	ldr	r1, [r2, #0]
 80019e0:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80019e4:	6011      	str	r1, [r2, #0]

      /* Enable the UART Transmit Complete Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80019e6:	6811      	ldr	r1, [r2, #0]
 80019e8:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 80019ec:	6011      	str	r1, [r2, #0]
      {
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
      }
      huart->TxXferCount--;

      return HAL_OK;
 80019ee:	2000      	movs	r0, #0
 80019f0:	4770      	bx	lr
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80019f2:	6883      	ldr	r3, [r0, #8]
 80019f4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80019f8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80019fa:	d10e      	bne.n	8001a1a <UART_Transmit_IT+0x4e>
 80019fc:	6901      	ldr	r1, [r0, #16]
 80019fe:	b961      	cbnz	r1, 8001a1a <UART_Transmit_IT+0x4e>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001a00:	f833 1b02 	ldrh.w	r1, [r3], #2
 8001a04:	f3c1 0108 	ubfx	r1, r1, #0, #9
 8001a08:	8511      	strh	r1, [r2, #40]	; 0x28
        huart->pTxBuffPtr += 2U;
 8001a0a:	64c3      	str	r3, [r0, #76]	; 0x4c
      huart->TxXferCount--;
 8001a0c:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8001a10:	3b01      	subs	r3, #1
 8001a12:	b29b      	uxth	r3, r3
 8001a14:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
 8001a18:	e7e9      	b.n	80019ee <UART_Transmit_IT+0x22>
        huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0xFFU);
 8001a1a:	1c59      	adds	r1, r3, #1
 8001a1c:	64c1      	str	r1, [r0, #76]	; 0x4c
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	8513      	strh	r3, [r2, #40]	; 0x28
 8001a22:	e7f3      	b.n	8001a0c <UART_Transmit_IT+0x40>
    }
  }
  else
  {
    return HAL_BUSY;
 8001a24:	2002      	movs	r0, #2
  }
}
 8001a26:	4770      	bx	lr

08001a28 <UART_EndTransmit_IT>:
  * @retval HAL status
  */
HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001a28:	6801      	ldr	r1, [r0, #0]
{
 8001a2a:	b508      	push	{r3, lr}
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8001a2c:	680b      	ldr	r3, [r1, #0]
 8001a2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8001a32:	600b      	str	r3, [r1, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8001a34:	2320      	movs	r3, #32
 8001a36:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69

  HAL_UART_TxCpltCallback(huart);
 8001a3a:	f7ff fdd2 	bl	80015e2 <HAL_UART_TxCpltCallback>

  return HAL_OK;
}
 8001a3e:	2000      	movs	r0, #0
 8001a40:	bd08      	pop	{r3, pc}

08001a42 <UART_Receive_IT>:
  uint16_t* tmp;
  uint16_t  uhMask = huart->Mask;
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a42:	f890 306a 	ldrb.w	r3, [r0, #106]	; 0x6a
 8001a46:	2b22      	cmp	r3, #34	; 0x22
{
 8001a48:	b510      	push	{r4, lr}
 8001a4a:	6803      	ldr	r3, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8001a4c:	d129      	bne.n	8001aa2 <UART_Receive_IT+0x60>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8001a4e:	8c99      	ldrh	r1, [r3, #36]	; 0x24
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a50:	6883      	ldr	r3, [r0, #8]
  uint16_t  uhMask = huart->Mask;
 8001a52:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001a56:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a5a:	ea02 0201 	and.w	r2, r2, r1
 8001a5e:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8001a60:	d11b      	bne.n	8001a9a <UART_Receive_IT+0x58>
 8001a62:	6901      	ldr	r1, [r0, #16]
 8001a64:	b9c9      	cbnz	r1, 8001a9a <UART_Receive_IT+0x58>
    {
      tmp = (uint16_t*) huart->pRxBuffPtr ;
      *tmp = (uint16_t)(uhdata & uhMask);
 8001a66:	f823 2b02 	strh.w	r2, [r3], #2
      huart->pRxBuffPtr +=2U;
 8001a6a:	6543      	str	r3, [r0, #84]	; 0x54
    else
    {
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
    }

    if(--huart->RxXferCount == 0U)
 8001a6c:	f8b0 405a 	ldrh.w	r4, [r0, #90]	; 0x5a
 8001a70:	3c01      	subs	r4, #1
 8001a72:	b2a4      	uxth	r4, r4
 8001a74:	f8a0 405a 	strh.w	r4, [r0, #90]	; 0x5a
 8001a78:	b96c      	cbnz	r4, 8001a96 <UART_Receive_IT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8001a7a:	6803      	ldr	r3, [r0, #0]
 8001a7c:	681a      	ldr	r2, [r3, #0]
 8001a7e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8001a82:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8001a8c:	2320      	movs	r3, #32
 8001a8e:	f880 306a 	strb.w	r3, [r0, #106]	; 0x6a

      HAL_UART_RxCpltCallback(huart);
 8001a92:	f7ff fda7 	bl	80015e4 <HAL_UART_RxCpltCallback>

      return HAL_OK;
    }

    return HAL_OK;
 8001a96:	2000      	movs	r0, #0
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);

    return HAL_BUSY;
  }
}
 8001a98:	bd10      	pop	{r4, pc}
      *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8001a9a:	1c59      	adds	r1, r3, #1
 8001a9c:	6541      	str	r1, [r0, #84]	; 0x54
 8001a9e:	701a      	strb	r2, [r3, #0]
 8001aa0:	e7e4      	b.n	8001a6c <UART_Receive_IT+0x2a>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8001aa2:	699a      	ldr	r2, [r3, #24]
 8001aa4:	f042 0208 	orr.w	r2, r2, #8
 8001aa8:	619a      	str	r2, [r3, #24]
    return HAL_BUSY;
 8001aaa:	2002      	movs	r0, #2
 8001aac:	bd10      	pop	{r4, pc}
	...

08001ab0 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8001ab0:	6802      	ldr	r2, [r0, #0]
 8001ab2:	69d3      	ldr	r3, [r2, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001ab4:	6811      	ldr	r1, [r2, #0]
{
 8001ab6:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8001ab8:	f013 050f 	ands.w	r5, r3, #15
{
 8001abc:	4604      	mov	r4, r0
  if (errorflags == RESET)
 8001abe:	d107      	bne.n	8001ad0 <HAL_UART_IRQHandler+0x20>
    if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ac0:	069e      	lsls	r6, r3, #26
 8001ac2:	d505      	bpl.n	8001ad0 <HAL_UART_IRQHandler+0x20>
 8001ac4:	068e      	lsls	r6, r1, #26
 8001ac6:	d503      	bpl.n	8001ad0 <HAL_UART_IRQHandler+0x20>
}
 8001ac8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      UART_Receive_IT(huart);
 8001acc:	f7ff bfb9 	b.w	8001a42 <UART_Receive_IT>
  cr3its = READ_REG(huart->Instance->CR3);
 8001ad0:	6890      	ldr	r0, [r2, #8]
  if(   (errorflags != RESET)
 8001ad2:	2d00      	cmp	r5, #0
 8001ad4:	d05c      	beq.n	8001b90 <HAL_UART_IRQHandler+0xe0>
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 8001ad6:	f010 0501 	ands.w	r5, r0, #1
 8001ada:	d102      	bne.n	8001ae2 <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 8001adc:	f411 7f90 	tst.w	r1, #288	; 0x120
 8001ae0:	d056      	beq.n	8001b90 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001ae2:	07d8      	lsls	r0, r3, #31
 8001ae4:	d507      	bpl.n	8001af6 <HAL_UART_IRQHandler+0x46>
 8001ae6:	05ce      	lsls	r6, r1, #23
 8001ae8:	d505      	bpl.n	8001af6 <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_PEF);
 8001aea:	2001      	movs	r0, #1
 8001aec:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001aee:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001af0:	f040 0001 	orr.w	r0, r0, #1
 8001af4:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001af6:	0798      	lsls	r0, r3, #30
 8001af8:	d506      	bpl.n	8001b08 <HAL_UART_IRQHandler+0x58>
 8001afa:	b12d      	cbz	r5, 8001b08 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_FEF);
 8001afc:	2002      	movs	r0, #2
 8001afe:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001b00:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001b02:	f040 0004 	orr.w	r0, r0, #4
 8001b06:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001b08:	075e      	lsls	r6, r3, #29
 8001b0a:	d506      	bpl.n	8001b1a <HAL_UART_IRQHandler+0x6a>
 8001b0c:	b12d      	cbz	r5, 8001b1a <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_NEF);
 8001b0e:	2004      	movs	r0, #4
 8001b10:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001b12:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8001b14:	f040 0002 	orr.w	r0, r0, #2
 8001b18:	66e0      	str	r0, [r4, #108]	; 0x6c
    if(((isrflags & USART_ISR_ORE) != RESET) &&
 8001b1a:	0718      	lsls	r0, r3, #28
 8001b1c:	d507      	bpl.n	8001b2e <HAL_UART_IRQHandler+0x7e>
 8001b1e:	068e      	lsls	r6, r1, #26
 8001b20:	d400      	bmi.n	8001b24 <HAL_UART_IRQHandler+0x74>
       (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8001b22:	b125      	cbz	r5, 8001b2e <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_IT(huart, UART_CLEAR_OREF);
 8001b24:	2008      	movs	r0, #8
 8001b26:	6210      	str	r0, [r2, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001b28:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001b2a:	4302      	orrs	r2, r0
 8001b2c:	66e2      	str	r2, [r4, #108]	; 0x6c
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001b2e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
 8001b30:	2a00      	cmp	r2, #0
 8001b32:	d050      	beq.n	8001bd6 <HAL_UART_IRQHandler+0x126>
      if(((isrflags & USART_ISR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001b34:	0698      	lsls	r0, r3, #26
 8001b36:	d504      	bpl.n	8001b42 <HAL_UART_IRQHandler+0x92>
 8001b38:	068a      	lsls	r2, r1, #26
 8001b3a:	d502      	bpl.n	8001b42 <HAL_UART_IRQHandler+0x92>
        UART_Receive_IT(huart);
 8001b3c:	4620      	mov	r0, r4
 8001b3e:	f7ff ff80 	bl	8001a42 <UART_Receive_IT>
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001b42:	6ee3      	ldr	r3, [r4, #108]	; 0x6c
 8001b44:	071b      	lsls	r3, r3, #28
        UART_EndRxTransfer(huart);
 8001b46:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001b48:	d404      	bmi.n	8001b54 <HAL_UART_IRQHandler+0xa4>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8001b4a:	6823      	ldr	r3, [r4, #0]
 8001b4c:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8001b4e:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 8001b52:	d019      	beq.n	8001b88 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 8001b54:	f7ff fd38 	bl	80015c8 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8001b58:	6823      	ldr	r3, [r4, #0]
 8001b5a:	689a      	ldr	r2, [r3, #8]
 8001b5c:	0656      	lsls	r6, r2, #25
 8001b5e:	d50f      	bpl.n	8001b80 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b60:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001b62:	6e60      	ldr	r0, [r4, #100]	; 0x64
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8001b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b68:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8001b6a:	b148      	cbz	r0, 8001b80 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8001b6c:	4b1a      	ldr	r3, [pc, #104]	; (8001bd8 <HAL_UART_IRQHandler+0x128>)
 8001b6e:	6343      	str	r3, [r0, #52]	; 0x34
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8001b70:	f7ff f8ca 	bl	8000d08 <HAL_DMA_Abort_IT>
 8001b74:	b378      	cbz	r0, 8001bd6 <HAL_UART_IRQHandler+0x126>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b76:	6e60      	ldr	r0, [r4, #100]	; 0x64
}
 8001b78:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8001b7c:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8001b7e:	4718      	bx	r3
            HAL_UART_ErrorCallback(huart);
 8001b80:	4620      	mov	r0, r4
 8001b82:	f7ff fd30 	bl	80015e6 <HAL_UART_ErrorCallback>
 8001b86:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8001b88:	f7ff fd2d 	bl	80015e6 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001b8c:	66e5      	str	r5, [r4, #108]	; 0x6c
 8001b8e:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8001b90:	02dd      	lsls	r5, r3, #11
 8001b92:	d50e      	bpl.n	8001bb2 <HAL_UART_IRQHandler+0x102>
 8001b94:	0246      	lsls	r6, r0, #9
 8001b96:	d50c      	bpl.n	8001bb2 <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_IT(huart, UART_CLEAR_WUF);
 8001b98:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001b9c:	6213      	str	r3, [r2, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8001b9e:	2320      	movs	r3, #32
 8001ba0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    HAL_UARTEx_WakeupCallback(huart);
 8001ba4:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 8001ba6:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
}
 8001baa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8001bae:	f000 b815 	b.w	8001bdc <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001bb2:	061d      	lsls	r5, r3, #24
 8001bb4:	d506      	bpl.n	8001bc4 <HAL_UART_IRQHandler+0x114>
 8001bb6:	0608      	lsls	r0, r1, #24
 8001bb8:	d504      	bpl.n	8001bc4 <HAL_UART_IRQHandler+0x114>
    UART_Transmit_IT(huart);
 8001bba:	4620      	mov	r0, r4
}
 8001bbc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_Transmit_IT(huart);
 8001bc0:	f7ff bf04 	b.w	80019cc <UART_Transmit_IT>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8001bc4:	065a      	lsls	r2, r3, #25
 8001bc6:	d506      	bpl.n	8001bd6 <HAL_UART_IRQHandler+0x126>
 8001bc8:	064b      	lsls	r3, r1, #25
 8001bca:	d504      	bpl.n	8001bd6 <HAL_UART_IRQHandler+0x126>
    UART_EndTransmit_IT(huart);
 8001bcc:	4620      	mov	r0, r4
}
 8001bce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    UART_EndTransmit_IT(huart);
 8001bd2:	f7ff bf29 	b.w	8001a28 <UART_EndTransmit_IT>
 8001bd6:	bd70      	pop	{r4, r5, r6, pc}
 8001bd8:	080015e9 	.word	0x080015e9

08001bdc <HAL_UARTEx_WakeupCallback>:
  * @brief  UART wakeup from Stop mode callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8001bdc:	4770      	bx	lr

08001bde <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bde:	b510      	push	{r4, lr}
 8001be0:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001be2:	2228      	movs	r2, #40	; 0x28
 8001be4:	2100      	movs	r1, #0
 8001be6:	a806      	add	r0, sp, #24
 8001be8:	f000 f99c 	bl	8001f24 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bec:	2214      	movs	r2, #20
 8001bee:	2100      	movs	r1, #0
 8001bf0:	a801      	add	r0, sp, #4
 8001bf2:	f000 f997 	bl	8001f24 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001bf6:	2301      	movs	r3, #1
 8001bf8:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bfa:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001bfc:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001bfe:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c00:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001c02:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001c06:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001c08:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c0a:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001c0c:	f7ff f95a 	bl	8000ec4 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c10:	230f      	movs	r3, #15
 8001c12:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c14:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c18:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c1a:	4621      	mov	r1, r4
 8001c1c:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c1e:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c20:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c22:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c24:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c26:	f7ff fbf5 	bl	8001414 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001c2a:	b010      	add	sp, #64	; 0x40
 8001c2c:	bd10      	pop	{r4, pc}
	...

08001c30 <main>:
{
 8001c30:	b513      	push	{r0, r1, r4, lr}
  HAL_Init();
 8001c32:	f7fe ffc9 	bl	8000bc8 <HAL_Init>
  SystemClock_Config();
 8001c36:	f7ff ffd2 	bl	8001bde <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c3a:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <main+0x6c>)
  huart2.Instance = USART2;
 8001c3c:	4c18      	ldr	r4, [pc, #96]	; (8001ca0 <main+0x70>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c3e:	695a      	ldr	r2, [r3, #20]
  huart2.Init.BaudRate = 38400;
 8001c40:	4818      	ldr	r0, [pc, #96]	; (8001ca4 <main+0x74>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001c42:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001c46:	615a      	str	r2, [r3, #20]
 8001c48:	695a      	ldr	r2, [r3, #20]
 8001c4a:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001c4e:	9200      	str	r2, [sp, #0]
 8001c50:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c52:	695a      	ldr	r2, [r3, #20]
 8001c54:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001c58:	615a      	str	r2, [r3, #20]
 8001c5a:	695b      	ldr	r3, [r3, #20]
 8001c5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c60:	9301      	str	r3, [sp, #4]
 8001c62:	9b01      	ldr	r3, [sp, #4]
  huart2.Init.BaudRate = 38400;
 8001c64:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001c68:	e884 0009 	stmia.w	r4, {r0, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c6c:	220c      	movs	r2, #12
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c6e:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c70:	4620      	mov	r0, r4
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001c72:	60a3      	str	r3, [r4, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001c74:	60e3      	str	r3, [r4, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001c76:	6123      	str	r3, [r4, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001c78:	6162      	str	r2, [r4, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001c7a:	61a3      	str	r3, [r4, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001c7c:	61e3      	str	r3, [r4, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001c7e:	6223      	str	r3, [r4, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001c80:	6263      	str	r3, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001c82:	f7ff fe71 	bl	8001968 <HAL_UART_Init>
	  tx_UART_int(&huart2, data, 10);
 8001c86:	4620      	mov	r0, r4
 8001c88:	220a      	movs	r2, #10
 8001c8a:	f640 71ff 	movw	r1, #4095	; 0xfff
 8001c8e:	f000 f823 	bl	8001cd8 <tx_UART_int>
	  HAL_Delay(1000);
 8001c92:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c96:	f7fe ffbb 	bl	8000c10 <HAL_Delay>
 8001c9a:	e7f4      	b.n	8001c86 <main+0x56>
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	200000a0 	.word	0x200000a0
 8001ca4:	40004400 	.word	0x40004400

08001ca8 <size_int>:
	byte_str[8] = '\r';
	byte_str[9] = '\n';
	HAL_UART_Transmit(huart, byte_str, sizeof(byte_str), 10);
}

uint8_t size_int(int data){
 8001ca8:	b508      	push	{r3, lr}
	uint8_t size;
	if (data==0){
 8001caa:	b188      	cbz	r0, 8001cd0 <size_int+0x28>
		size = 1;
	}
	else {
		size = floor(log10(data))+1;
 8001cac:	f7fe fc32 	bl	8000514 <__aeabi_i2d>
 8001cb0:	ec41 0b10 	vmov	d0, r0, r1
 8001cb4:	f000 fde0 	bl	8002878 <log10>
 8001cb8:	f000 fd5a 	bl	8002770 <floor>
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	4b05      	ldr	r3, [pc, #20]	; (8001cd4 <size_int+0x2c>)
 8001cc0:	ec51 0b10 	vmov	r0, r1, d0
 8001cc4:	f7fe fada 	bl	800027c <__adddf3>
 8001cc8:	f7fe ff3a 	bl	8000b40 <__aeabi_d2uiz>
 8001ccc:	b2c0      	uxtb	r0, r0
 8001cce:	bd08      	pop	{r3, pc}
		size = 1;
 8001cd0:	2001      	movs	r0, #1
	}
	return size;
}
 8001cd2:	bd08      	pop	{r3, pc}
 8001cd4:	3ff00000 	.word	0x3ff00000

08001cd8 <tx_UART_int>:
void tx_UART_int(UART_HandleTypeDef *huart, int data, uint32_t Timeout) {
 8001cd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	if (data < 0) {	// Si es negativo se pasa a positivo y activamos el flag
 8001cdc:	f1b1 0900 	subs.w	r9, r1, #0
		data = -data;
 8001ce0:	bfb8      	it	lt
 8001ce2:	f1c9 0900 	rsblt	r9, r9, #0
void tx_UART_int(UART_HandleTypeDef *huart, int data, uint32_t Timeout) {
 8001ce6:	af00      	add	r7, sp, #0
 8001ce8:	4606      	mov	r6, r0
	uint8_t size = size_int(data);
 8001cea:	4648      	mov	r0, r9
		negativo = 1;
 8001cec:	bfb4      	ite	lt
 8001cee:	2501      	movlt	r5, #1
	uint8_t negativo = 0;
 8001cf0:	2500      	movge	r5, #0
	uint8_t size = size_int(data);
 8001cf2:	f7ff ffd9 	bl	8001ca8 <size_int>
	char data_char[size];		// String de chars
 8001cf6:	1dc3      	adds	r3, r0, #7
 8001cf8:	f023 0307 	bic.w	r3, r3, #7
 8001cfc:	ebad 0d03 	sub.w	sp, sp, r3
	uint8_t size = size_int(data);
 8001d00:	4604      	mov	r4, r0
	sprintf(data_char,"%d", data);	// Cada numero del int en un char
 8001d02:	464a      	mov	r2, r9
 8001d04:	4914      	ldr	r1, [pc, #80]	; (8001d58 <tx_UART_int+0x80>)
 8001d06:	4668      	mov	r0, sp
 8001d08:	f000 f914 	bl	8001f34 <siprintf>
	size = size+negativo+2;
 8001d0c:	192b      	adds	r3, r5, r4
 8001d0e:	b2db      	uxtb	r3, r3
 8001d10:	1c9a      	adds	r2, r3, #2
 8001d12:	b2d2      	uxtb	r2, r2
	uint8_t int_str[size];
 8001d14:	1dd1      	adds	r1, r2, #7
 8001d16:	f021 0107 	bic.w	r1, r1, #7
	char data_char[size];		// String de chars
 8001d1a:	46e8      	mov	r8, sp
	uint8_t int_str[size];
 8001d1c:	ebad 0d01 	sub.w	sp, sp, r1
	int_str[size-1] = '\r';
 8001d20:	eb0d 0002 	add.w	r0, sp, r2
 8001d24:	240d      	movs	r4, #13
 8001d26:	f800 4c01 	strb.w	r4, [r0, #-1]
	int_str[size-2] = '\n';
 8001d2a:	240a      	movs	r4, #10
	uint8_t int_str[size];
 8001d2c:	4669      	mov	r1, sp
	int_str[size-2] = '\n';
 8001d2e:	f800 4c02 	strb.w	r4, [r0, #-2]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	b25b      	sxtb	r3, r3
	for(int8_t i=(size-3); i>=0; i--){
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	da09      	bge.n	8001d4e <tx_UART_int+0x76>
	if (negativo == 1) {
 8001d3a:	b10d      	cbz	r5, 8001d40 <tx_UART_int+0x68>
		int_str[0] = '-';
 8001d3c:	232d      	movs	r3, #45	; 0x2d
 8001d3e:	700b      	strb	r3, [r1, #0]
	HAL_UART_Transmit(huart,int_str,sizeof(int_str), 10);	// TX por UART del array de uint8_t
 8001d40:	230a      	movs	r3, #10
 8001d42:	4630      	mov	r0, r6
 8001d44:	f7ff fd85 	bl	8001852 <HAL_UART_Transmit>
}
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		int_str[i] = (uint8_t) data_char[i-negativo];
 8001d4e:	1b58      	subs	r0, r3, r5
 8001d50:	f818 0000 	ldrb.w	r0, [r8, r0]
 8001d54:	54c8      	strb	r0, [r1, r3]
 8001d56:	e7ec      	b.n	8001d32 <tx_UART_int+0x5a>
 8001d58:	08002ebc 	.word	0x08002ebc

08001d5c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5c:	4b0a      	ldr	r3, [pc, #40]	; (8001d88 <HAL_MspInit+0x2c>)
 8001d5e:	699a      	ldr	r2, [r3, #24]
 8001d60:	f042 0201 	orr.w	r2, r2, #1
 8001d64:	619a      	str	r2, [r3, #24]
 8001d66:	699a      	ldr	r2, [r3, #24]
{
 8001d68:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d6a:	f002 0201 	and.w	r2, r2, #1
 8001d6e:	9200      	str	r2, [sp, #0]
 8001d70:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d72:	69da      	ldr	r2, [r3, #28]
 8001d74:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001d78:	61da      	str	r2, [r3, #28]
 8001d7a:	69db      	ldr	r3, [r3, #28]
 8001d7c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d80:	9301      	str	r3, [sp, #4]
 8001d82:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d84:	b002      	add	sp, #8
 8001d86:	4770      	bx	lr
 8001d88:	40021000 	.word	0x40021000

08001d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d8c:	b510      	push	{r4, lr}
 8001d8e:	4604      	mov	r4, r0
 8001d90:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d92:	2214      	movs	r2, #20
 8001d94:	2100      	movs	r1, #0
 8001d96:	a803      	add	r0, sp, #12
 8001d98:	f000 f8c4 	bl	8001f24 <memset>
  if(huart->Instance==USART2)
 8001d9c:	6822      	ldr	r2, [r4, #0]
 8001d9e:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <HAL_UART_MspInit+0x70>)
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d129      	bne.n	8001df8 <HAL_UART_MspInit+0x6c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001da4:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001da8:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 8001daa:	69da      	ldr	r2, [r3, #28]
 8001dac:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001db0:	61da      	str	r2, [r3, #28]
 8001db2:	69da      	ldr	r2, [r3, #28]
 8001db4:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001db8:	9201      	str	r2, [sp, #4]
 8001dba:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dbc:	695a      	ldr	r2, [r3, #20]
 8001dbe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001dc2:	615a      	str	r2, [r3, #20]
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dca:	9302      	str	r3, [sp, #8]
 8001dcc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001dce:	f248 0304 	movw	r3, #32772	; 0x8004
 8001dd2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dd4:	2302      	movs	r3, #2
 8001dd6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dd8:	2303      	movs	r3, #3
 8001dda:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001de0:	2307      	movs	r3, #7
 8001de2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001de4:	f7fe ffb4 	bl	8000d50 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001de8:	2200      	movs	r2, #0
 8001dea:	2026      	movs	r0, #38	; 0x26
 8001dec:	4611      	mov	r1, r2
 8001dee:	f7fe ff35 	bl	8000c5c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001df2:	2026      	movs	r0, #38	; 0x26
 8001df4:	f7fe ff66 	bl	8000cc4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001df8:	b008      	add	sp, #32
 8001dfa:	bd10      	pop	{r4, pc}
 8001dfc:	40004400 	.word	0x40004400

08001e00 <NMI_Handler>:
 8001e00:	4770      	bx	lr

08001e02 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e02:	e7fe      	b.n	8001e02 <HardFault_Handler>

08001e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e04:	e7fe      	b.n	8001e04 <MemManage_Handler>

08001e06 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e06:	e7fe      	b.n	8001e06 <BusFault_Handler>

08001e08 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e08:	e7fe      	b.n	8001e08 <UsageFault_Handler>

08001e0a <SVC_Handler>:
 8001e0a:	4770      	bx	lr

08001e0c <DebugMon_Handler>:
 8001e0c:	4770      	bx	lr

08001e0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e0e:	4770      	bx	lr

08001e10 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e10:	f7fe beec 	b.w	8000bec <HAL_IncTick>

08001e14 <USART2_IRQHandler>:
void USART2_IRQHandler(void)
{
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e14:	4801      	ldr	r0, [pc, #4]	; (8001e1c <USART2_IRQHandler+0x8>)
 8001e16:	f7ff be4b 	b.w	8001ab0 <HAL_UART_IRQHandler>
 8001e1a:	bf00      	nop
 8001e1c:	200000a0 	.word	0x200000a0

08001e20 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001e20:	4915      	ldr	r1, [pc, #84]	; (8001e78 <SystemInit+0x58>)
 8001e22:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e26:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001e2e:	4b13      	ldr	r3, [pc, #76]	; (8001e7c <SystemInit+0x5c>)
 8001e30:	681a      	ldr	r2, [r3, #0]
 8001e32:	f042 0201 	orr.w	r2, r2, #1
 8001e36:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001e38:	6858      	ldr	r0, [r3, #4]
 8001e3a:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <SystemInit+0x60>)
 8001e3c:	4002      	ands	r2, r0
 8001e3e:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001e46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001e4a:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001e52:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001e5a:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001e5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e5e:	f022 020f 	bic.w	r2, r2, #15
 8001e62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001e64:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001e66:	4a07      	ldr	r2, [pc, #28]	; (8001e84 <SystemInit+0x64>)
 8001e68:	4002      	ands	r2, r0
 8001e6a:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001e70:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001e74:	608b      	str	r3, [r1, #8]
 8001e76:	4770      	bx	lr
 8001e78:	e000ed00 	.word	0xe000ed00
 8001e7c:	40021000 	.word	0x40021000
 8001e80:	f87fc00c 	.word	0xf87fc00c
 8001e84:	ff00fccc 	.word	0xff00fccc

08001e88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001ec0 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001e8c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001e8e:	e003      	b.n	8001e98 <LoopCopyDataInit>

08001e90 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001e90:	4b0c      	ldr	r3, [pc, #48]	; (8001ec4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001e92:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001e94:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001e96:	3104      	adds	r1, #4

08001e98 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001e98:	480b      	ldr	r0, [pc, #44]	; (8001ec8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001e9a:	4b0c      	ldr	r3, [pc, #48]	; (8001ecc <LoopForever+0xe>)
	adds	r2, r0, r1
 8001e9c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001e9e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ea0:	d3f6      	bcc.n	8001e90 <CopyDataInit>
	ldr	r2, =_sbss
 8001ea2:	4a0b      	ldr	r2, [pc, #44]	; (8001ed0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ea4:	e002      	b.n	8001eac <LoopFillZerobss>

08001ea6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001ea6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001ea8:	f842 3b04 	str.w	r3, [r2], #4

08001eac <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001eac:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <LoopForever+0x16>)
	cmp	r2, r3
 8001eae:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001eb0:	d3f9      	bcc.n	8001ea6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001eb2:	f7ff ffb5 	bl	8001e20 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001eb6:	f000 f811 	bl	8001edc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001eba:	f7ff feb9 	bl	8001c30 <main>

08001ebe <LoopForever>:

LoopForever:
    b LoopForever
 8001ebe:	e7fe      	b.n	8001ebe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001ec0:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001ec4:	08002f18 	.word	0x08002f18
	ldr	r0, =_sdata
 8001ec8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001ecc:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8001ed0:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8001ed4:	20000114 	.word	0x20000114

08001ed8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001ed8:	e7fe      	b.n	8001ed8 <ADC1_2_IRQHandler>
	...

08001edc <__libc_init_array>:
 8001edc:	b570      	push	{r4, r5, r6, lr}
 8001ede:	4e0d      	ldr	r6, [pc, #52]	; (8001f14 <__libc_init_array+0x38>)
 8001ee0:	4c0d      	ldr	r4, [pc, #52]	; (8001f18 <__libc_init_array+0x3c>)
 8001ee2:	1ba4      	subs	r4, r4, r6
 8001ee4:	10a4      	asrs	r4, r4, #2
 8001ee6:	2500      	movs	r5, #0
 8001ee8:	42a5      	cmp	r5, r4
 8001eea:	d109      	bne.n	8001f00 <__libc_init_array+0x24>
 8001eec:	4e0b      	ldr	r6, [pc, #44]	; (8001f1c <__libc_init_array+0x40>)
 8001eee:	4c0c      	ldr	r4, [pc, #48]	; (8001f20 <__libc_init_array+0x44>)
 8001ef0:	f000 ffc6 	bl	8002e80 <_init>
 8001ef4:	1ba4      	subs	r4, r4, r6
 8001ef6:	10a4      	asrs	r4, r4, #2
 8001ef8:	2500      	movs	r5, #0
 8001efa:	42a5      	cmp	r5, r4
 8001efc:	d105      	bne.n	8001f0a <__libc_init_array+0x2e>
 8001efe:	bd70      	pop	{r4, r5, r6, pc}
 8001f00:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f04:	4798      	blx	r3
 8001f06:	3501      	adds	r5, #1
 8001f08:	e7ee      	b.n	8001ee8 <__libc_init_array+0xc>
 8001f0a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001f0e:	4798      	blx	r3
 8001f10:	3501      	adds	r5, #1
 8001f12:	e7f2      	b.n	8001efa <__libc_init_array+0x1e>
 8001f14:	08002f10 	.word	0x08002f10
 8001f18:	08002f10 	.word	0x08002f10
 8001f1c:	08002f10 	.word	0x08002f10
 8001f20:	08002f14 	.word	0x08002f14

08001f24 <memset>:
 8001f24:	4402      	add	r2, r0
 8001f26:	4603      	mov	r3, r0
 8001f28:	4293      	cmp	r3, r2
 8001f2a:	d100      	bne.n	8001f2e <memset+0xa>
 8001f2c:	4770      	bx	lr
 8001f2e:	f803 1b01 	strb.w	r1, [r3], #1
 8001f32:	e7f9      	b.n	8001f28 <memset+0x4>

08001f34 <siprintf>:
 8001f34:	b40e      	push	{r1, r2, r3}
 8001f36:	b500      	push	{lr}
 8001f38:	b09c      	sub	sp, #112	; 0x70
 8001f3a:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001f3e:	ab1d      	add	r3, sp, #116	; 0x74
 8001f40:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001f44:	9002      	str	r0, [sp, #8]
 8001f46:	9006      	str	r0, [sp, #24]
 8001f48:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001f4c:	480a      	ldr	r0, [pc, #40]	; (8001f78 <siprintf+0x44>)
 8001f4e:	9104      	str	r1, [sp, #16]
 8001f50:	9107      	str	r1, [sp, #28]
 8001f52:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001f56:	f853 2b04 	ldr.w	r2, [r3], #4
 8001f5a:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001f5e:	6800      	ldr	r0, [r0, #0]
 8001f60:	9301      	str	r3, [sp, #4]
 8001f62:	a902      	add	r1, sp, #8
 8001f64:	f000 f866 	bl	8002034 <_svfiprintf_r>
 8001f68:	9b02      	ldr	r3, [sp, #8]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
 8001f6e:	b01c      	add	sp, #112	; 0x70
 8001f70:	f85d eb04 	ldr.w	lr, [sp], #4
 8001f74:	b003      	add	sp, #12
 8001f76:	4770      	bx	lr
 8001f78:	2000000c 	.word	0x2000000c

08001f7c <__ssputs_r>:
 8001f7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001f80:	688e      	ldr	r6, [r1, #8]
 8001f82:	429e      	cmp	r6, r3
 8001f84:	4682      	mov	sl, r0
 8001f86:	460c      	mov	r4, r1
 8001f88:	4691      	mov	r9, r2
 8001f8a:	4698      	mov	r8, r3
 8001f8c:	d835      	bhi.n	8001ffa <__ssputs_r+0x7e>
 8001f8e:	898a      	ldrh	r2, [r1, #12]
 8001f90:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001f94:	d031      	beq.n	8001ffa <__ssputs_r+0x7e>
 8001f96:	6825      	ldr	r5, [r4, #0]
 8001f98:	6909      	ldr	r1, [r1, #16]
 8001f9a:	1a6f      	subs	r7, r5, r1
 8001f9c:	6965      	ldr	r5, [r4, #20]
 8001f9e:	2302      	movs	r3, #2
 8001fa0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001fa4:	fb95 f5f3 	sdiv	r5, r5, r3
 8001fa8:	f108 0301 	add.w	r3, r8, #1
 8001fac:	443b      	add	r3, r7
 8001fae:	429d      	cmp	r5, r3
 8001fb0:	bf38      	it	cc
 8001fb2:	461d      	movcc	r5, r3
 8001fb4:	0553      	lsls	r3, r2, #21
 8001fb6:	d531      	bpl.n	800201c <__ssputs_r+0xa0>
 8001fb8:	4629      	mov	r1, r5
 8001fba:	f000 fb39 	bl	8002630 <_malloc_r>
 8001fbe:	4606      	mov	r6, r0
 8001fc0:	b950      	cbnz	r0, 8001fd8 <__ssputs_r+0x5c>
 8001fc2:	230c      	movs	r3, #12
 8001fc4:	f8ca 3000 	str.w	r3, [sl]
 8001fc8:	89a3      	ldrh	r3, [r4, #12]
 8001fca:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001fce:	81a3      	strh	r3, [r4, #12]
 8001fd0:	f04f 30ff 	mov.w	r0, #4294967295
 8001fd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001fd8:	463a      	mov	r2, r7
 8001fda:	6921      	ldr	r1, [r4, #16]
 8001fdc:	f000 fab4 	bl	8002548 <memcpy>
 8001fe0:	89a3      	ldrh	r3, [r4, #12]
 8001fe2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001fe6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001fea:	81a3      	strh	r3, [r4, #12]
 8001fec:	6126      	str	r6, [r4, #16]
 8001fee:	6165      	str	r5, [r4, #20]
 8001ff0:	443e      	add	r6, r7
 8001ff2:	1bed      	subs	r5, r5, r7
 8001ff4:	6026      	str	r6, [r4, #0]
 8001ff6:	60a5      	str	r5, [r4, #8]
 8001ff8:	4646      	mov	r6, r8
 8001ffa:	4546      	cmp	r6, r8
 8001ffc:	bf28      	it	cs
 8001ffe:	4646      	movcs	r6, r8
 8002000:	4632      	mov	r2, r6
 8002002:	4649      	mov	r1, r9
 8002004:	6820      	ldr	r0, [r4, #0]
 8002006:	f000 faaa 	bl	800255e <memmove>
 800200a:	68a3      	ldr	r3, [r4, #8]
 800200c:	1b9b      	subs	r3, r3, r6
 800200e:	60a3      	str	r3, [r4, #8]
 8002010:	6823      	ldr	r3, [r4, #0]
 8002012:	441e      	add	r6, r3
 8002014:	6026      	str	r6, [r4, #0]
 8002016:	2000      	movs	r0, #0
 8002018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800201c:	462a      	mov	r2, r5
 800201e:	f000 fb65 	bl	80026ec <_realloc_r>
 8002022:	4606      	mov	r6, r0
 8002024:	2800      	cmp	r0, #0
 8002026:	d1e1      	bne.n	8001fec <__ssputs_r+0x70>
 8002028:	6921      	ldr	r1, [r4, #16]
 800202a:	4650      	mov	r0, sl
 800202c:	f000 fab2 	bl	8002594 <_free_r>
 8002030:	e7c7      	b.n	8001fc2 <__ssputs_r+0x46>
	...

08002034 <_svfiprintf_r>:
 8002034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002038:	b09d      	sub	sp, #116	; 0x74
 800203a:	4680      	mov	r8, r0
 800203c:	9303      	str	r3, [sp, #12]
 800203e:	898b      	ldrh	r3, [r1, #12]
 8002040:	061c      	lsls	r4, r3, #24
 8002042:	460d      	mov	r5, r1
 8002044:	4616      	mov	r6, r2
 8002046:	d50f      	bpl.n	8002068 <_svfiprintf_r+0x34>
 8002048:	690b      	ldr	r3, [r1, #16]
 800204a:	b96b      	cbnz	r3, 8002068 <_svfiprintf_r+0x34>
 800204c:	2140      	movs	r1, #64	; 0x40
 800204e:	f000 faef 	bl	8002630 <_malloc_r>
 8002052:	6028      	str	r0, [r5, #0]
 8002054:	6128      	str	r0, [r5, #16]
 8002056:	b928      	cbnz	r0, 8002064 <_svfiprintf_r+0x30>
 8002058:	230c      	movs	r3, #12
 800205a:	f8c8 3000 	str.w	r3, [r8]
 800205e:	f04f 30ff 	mov.w	r0, #4294967295
 8002062:	e0c5      	b.n	80021f0 <_svfiprintf_r+0x1bc>
 8002064:	2340      	movs	r3, #64	; 0x40
 8002066:	616b      	str	r3, [r5, #20]
 8002068:	2300      	movs	r3, #0
 800206a:	9309      	str	r3, [sp, #36]	; 0x24
 800206c:	2320      	movs	r3, #32
 800206e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002072:	2330      	movs	r3, #48	; 0x30
 8002074:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002078:	f04f 0b01 	mov.w	fp, #1
 800207c:	4637      	mov	r7, r6
 800207e:	463c      	mov	r4, r7
 8002080:	f814 3b01 	ldrb.w	r3, [r4], #1
 8002084:	2b00      	cmp	r3, #0
 8002086:	d13c      	bne.n	8002102 <_svfiprintf_r+0xce>
 8002088:	ebb7 0a06 	subs.w	sl, r7, r6
 800208c:	d00b      	beq.n	80020a6 <_svfiprintf_r+0x72>
 800208e:	4653      	mov	r3, sl
 8002090:	4632      	mov	r2, r6
 8002092:	4629      	mov	r1, r5
 8002094:	4640      	mov	r0, r8
 8002096:	f7ff ff71 	bl	8001f7c <__ssputs_r>
 800209a:	3001      	adds	r0, #1
 800209c:	f000 80a3 	beq.w	80021e6 <_svfiprintf_r+0x1b2>
 80020a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80020a2:	4453      	add	r3, sl
 80020a4:	9309      	str	r3, [sp, #36]	; 0x24
 80020a6:	783b      	ldrb	r3, [r7, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 809c 	beq.w	80021e6 <_svfiprintf_r+0x1b2>
 80020ae:	2300      	movs	r3, #0
 80020b0:	f04f 32ff 	mov.w	r2, #4294967295
 80020b4:	9304      	str	r3, [sp, #16]
 80020b6:	9307      	str	r3, [sp, #28]
 80020b8:	9205      	str	r2, [sp, #20]
 80020ba:	9306      	str	r3, [sp, #24]
 80020bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80020c0:	931a      	str	r3, [sp, #104]	; 0x68
 80020c2:	2205      	movs	r2, #5
 80020c4:	7821      	ldrb	r1, [r4, #0]
 80020c6:	4850      	ldr	r0, [pc, #320]	; (8002208 <_svfiprintf_r+0x1d4>)
 80020c8:	f7fe f882 	bl	80001d0 <memchr>
 80020cc:	1c67      	adds	r7, r4, #1
 80020ce:	9b04      	ldr	r3, [sp, #16]
 80020d0:	b9d8      	cbnz	r0, 800210a <_svfiprintf_r+0xd6>
 80020d2:	06d9      	lsls	r1, r3, #27
 80020d4:	bf44      	itt	mi
 80020d6:	2220      	movmi	r2, #32
 80020d8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80020dc:	071a      	lsls	r2, r3, #28
 80020de:	bf44      	itt	mi
 80020e0:	222b      	movmi	r2, #43	; 0x2b
 80020e2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80020e6:	7822      	ldrb	r2, [r4, #0]
 80020e8:	2a2a      	cmp	r2, #42	; 0x2a
 80020ea:	d016      	beq.n	800211a <_svfiprintf_r+0xe6>
 80020ec:	9a07      	ldr	r2, [sp, #28]
 80020ee:	2100      	movs	r1, #0
 80020f0:	200a      	movs	r0, #10
 80020f2:	4627      	mov	r7, r4
 80020f4:	3401      	adds	r4, #1
 80020f6:	783b      	ldrb	r3, [r7, #0]
 80020f8:	3b30      	subs	r3, #48	; 0x30
 80020fa:	2b09      	cmp	r3, #9
 80020fc:	d951      	bls.n	80021a2 <_svfiprintf_r+0x16e>
 80020fe:	b1c9      	cbz	r1, 8002134 <_svfiprintf_r+0x100>
 8002100:	e011      	b.n	8002126 <_svfiprintf_r+0xf2>
 8002102:	2b25      	cmp	r3, #37	; 0x25
 8002104:	d0c0      	beq.n	8002088 <_svfiprintf_r+0x54>
 8002106:	4627      	mov	r7, r4
 8002108:	e7b9      	b.n	800207e <_svfiprintf_r+0x4a>
 800210a:	4a3f      	ldr	r2, [pc, #252]	; (8002208 <_svfiprintf_r+0x1d4>)
 800210c:	1a80      	subs	r0, r0, r2
 800210e:	fa0b f000 	lsl.w	r0, fp, r0
 8002112:	4318      	orrs	r0, r3
 8002114:	9004      	str	r0, [sp, #16]
 8002116:	463c      	mov	r4, r7
 8002118:	e7d3      	b.n	80020c2 <_svfiprintf_r+0x8e>
 800211a:	9a03      	ldr	r2, [sp, #12]
 800211c:	1d11      	adds	r1, r2, #4
 800211e:	6812      	ldr	r2, [r2, #0]
 8002120:	9103      	str	r1, [sp, #12]
 8002122:	2a00      	cmp	r2, #0
 8002124:	db01      	blt.n	800212a <_svfiprintf_r+0xf6>
 8002126:	9207      	str	r2, [sp, #28]
 8002128:	e004      	b.n	8002134 <_svfiprintf_r+0x100>
 800212a:	4252      	negs	r2, r2
 800212c:	f043 0302 	orr.w	r3, r3, #2
 8002130:	9207      	str	r2, [sp, #28]
 8002132:	9304      	str	r3, [sp, #16]
 8002134:	783b      	ldrb	r3, [r7, #0]
 8002136:	2b2e      	cmp	r3, #46	; 0x2e
 8002138:	d10e      	bne.n	8002158 <_svfiprintf_r+0x124>
 800213a:	787b      	ldrb	r3, [r7, #1]
 800213c:	2b2a      	cmp	r3, #42	; 0x2a
 800213e:	f107 0101 	add.w	r1, r7, #1
 8002142:	d132      	bne.n	80021aa <_svfiprintf_r+0x176>
 8002144:	9b03      	ldr	r3, [sp, #12]
 8002146:	1d1a      	adds	r2, r3, #4
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	9203      	str	r2, [sp, #12]
 800214c:	2b00      	cmp	r3, #0
 800214e:	bfb8      	it	lt
 8002150:	f04f 33ff 	movlt.w	r3, #4294967295
 8002154:	3702      	adds	r7, #2
 8002156:	9305      	str	r3, [sp, #20]
 8002158:	4c2c      	ldr	r4, [pc, #176]	; (800220c <_svfiprintf_r+0x1d8>)
 800215a:	7839      	ldrb	r1, [r7, #0]
 800215c:	2203      	movs	r2, #3
 800215e:	4620      	mov	r0, r4
 8002160:	f7fe f836 	bl	80001d0 <memchr>
 8002164:	b138      	cbz	r0, 8002176 <_svfiprintf_r+0x142>
 8002166:	2340      	movs	r3, #64	; 0x40
 8002168:	1b00      	subs	r0, r0, r4
 800216a:	fa03 f000 	lsl.w	r0, r3, r0
 800216e:	9b04      	ldr	r3, [sp, #16]
 8002170:	4303      	orrs	r3, r0
 8002172:	9304      	str	r3, [sp, #16]
 8002174:	3701      	adds	r7, #1
 8002176:	7839      	ldrb	r1, [r7, #0]
 8002178:	4825      	ldr	r0, [pc, #148]	; (8002210 <_svfiprintf_r+0x1dc>)
 800217a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800217e:	2206      	movs	r2, #6
 8002180:	1c7e      	adds	r6, r7, #1
 8002182:	f7fe f825 	bl	80001d0 <memchr>
 8002186:	2800      	cmp	r0, #0
 8002188:	d035      	beq.n	80021f6 <_svfiprintf_r+0x1c2>
 800218a:	4b22      	ldr	r3, [pc, #136]	; (8002214 <_svfiprintf_r+0x1e0>)
 800218c:	b9fb      	cbnz	r3, 80021ce <_svfiprintf_r+0x19a>
 800218e:	9b03      	ldr	r3, [sp, #12]
 8002190:	3307      	adds	r3, #7
 8002192:	f023 0307 	bic.w	r3, r3, #7
 8002196:	3308      	adds	r3, #8
 8002198:	9303      	str	r3, [sp, #12]
 800219a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800219c:	444b      	add	r3, r9
 800219e:	9309      	str	r3, [sp, #36]	; 0x24
 80021a0:	e76c      	b.n	800207c <_svfiprintf_r+0x48>
 80021a2:	fb00 3202 	mla	r2, r0, r2, r3
 80021a6:	2101      	movs	r1, #1
 80021a8:	e7a3      	b.n	80020f2 <_svfiprintf_r+0xbe>
 80021aa:	2300      	movs	r3, #0
 80021ac:	9305      	str	r3, [sp, #20]
 80021ae:	4618      	mov	r0, r3
 80021b0:	240a      	movs	r4, #10
 80021b2:	460f      	mov	r7, r1
 80021b4:	3101      	adds	r1, #1
 80021b6:	783a      	ldrb	r2, [r7, #0]
 80021b8:	3a30      	subs	r2, #48	; 0x30
 80021ba:	2a09      	cmp	r2, #9
 80021bc:	d903      	bls.n	80021c6 <_svfiprintf_r+0x192>
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d0ca      	beq.n	8002158 <_svfiprintf_r+0x124>
 80021c2:	9005      	str	r0, [sp, #20]
 80021c4:	e7c8      	b.n	8002158 <_svfiprintf_r+0x124>
 80021c6:	fb04 2000 	mla	r0, r4, r0, r2
 80021ca:	2301      	movs	r3, #1
 80021cc:	e7f1      	b.n	80021b2 <_svfiprintf_r+0x17e>
 80021ce:	ab03      	add	r3, sp, #12
 80021d0:	9300      	str	r3, [sp, #0]
 80021d2:	462a      	mov	r2, r5
 80021d4:	4b10      	ldr	r3, [pc, #64]	; (8002218 <_svfiprintf_r+0x1e4>)
 80021d6:	a904      	add	r1, sp, #16
 80021d8:	4640      	mov	r0, r8
 80021da:	f3af 8000 	nop.w
 80021de:	f1b0 3fff 	cmp.w	r0, #4294967295
 80021e2:	4681      	mov	r9, r0
 80021e4:	d1d9      	bne.n	800219a <_svfiprintf_r+0x166>
 80021e6:	89ab      	ldrh	r3, [r5, #12]
 80021e8:	065b      	lsls	r3, r3, #25
 80021ea:	f53f af38 	bmi.w	800205e <_svfiprintf_r+0x2a>
 80021ee:	9809      	ldr	r0, [sp, #36]	; 0x24
 80021f0:	b01d      	add	sp, #116	; 0x74
 80021f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021f6:	ab03      	add	r3, sp, #12
 80021f8:	9300      	str	r3, [sp, #0]
 80021fa:	462a      	mov	r2, r5
 80021fc:	4b06      	ldr	r3, [pc, #24]	; (8002218 <_svfiprintf_r+0x1e4>)
 80021fe:	a904      	add	r1, sp, #16
 8002200:	4640      	mov	r0, r8
 8002202:	f000 f881 	bl	8002308 <_printf_i>
 8002206:	e7ea      	b.n	80021de <_svfiprintf_r+0x1aa>
 8002208:	08002ed7 	.word	0x08002ed7
 800220c:	08002edd 	.word	0x08002edd
 8002210:	08002ee1 	.word	0x08002ee1
 8002214:	00000000 	.word	0x00000000
 8002218:	08001f7d 	.word	0x08001f7d

0800221c <_printf_common>:
 800221c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002220:	4691      	mov	r9, r2
 8002222:	461f      	mov	r7, r3
 8002224:	688a      	ldr	r2, [r1, #8]
 8002226:	690b      	ldr	r3, [r1, #16]
 8002228:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800222c:	4293      	cmp	r3, r2
 800222e:	bfb8      	it	lt
 8002230:	4613      	movlt	r3, r2
 8002232:	f8c9 3000 	str.w	r3, [r9]
 8002236:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800223a:	4606      	mov	r6, r0
 800223c:	460c      	mov	r4, r1
 800223e:	b112      	cbz	r2, 8002246 <_printf_common+0x2a>
 8002240:	3301      	adds	r3, #1
 8002242:	f8c9 3000 	str.w	r3, [r9]
 8002246:	6823      	ldr	r3, [r4, #0]
 8002248:	0699      	lsls	r1, r3, #26
 800224a:	bf42      	ittt	mi
 800224c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002250:	3302      	addmi	r3, #2
 8002252:	f8c9 3000 	strmi.w	r3, [r9]
 8002256:	6825      	ldr	r5, [r4, #0]
 8002258:	f015 0506 	ands.w	r5, r5, #6
 800225c:	d107      	bne.n	800226e <_printf_common+0x52>
 800225e:	f104 0a19 	add.w	sl, r4, #25
 8002262:	68e3      	ldr	r3, [r4, #12]
 8002264:	f8d9 2000 	ldr.w	r2, [r9]
 8002268:	1a9b      	subs	r3, r3, r2
 800226a:	429d      	cmp	r5, r3
 800226c:	db29      	blt.n	80022c2 <_printf_common+0xa6>
 800226e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002272:	6822      	ldr	r2, [r4, #0]
 8002274:	3300      	adds	r3, #0
 8002276:	bf18      	it	ne
 8002278:	2301      	movne	r3, #1
 800227a:	0692      	lsls	r2, r2, #26
 800227c:	d42e      	bmi.n	80022dc <_printf_common+0xc0>
 800227e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002282:	4639      	mov	r1, r7
 8002284:	4630      	mov	r0, r6
 8002286:	47c0      	blx	r8
 8002288:	3001      	adds	r0, #1
 800228a:	d021      	beq.n	80022d0 <_printf_common+0xb4>
 800228c:	6823      	ldr	r3, [r4, #0]
 800228e:	68e5      	ldr	r5, [r4, #12]
 8002290:	f8d9 2000 	ldr.w	r2, [r9]
 8002294:	f003 0306 	and.w	r3, r3, #6
 8002298:	2b04      	cmp	r3, #4
 800229a:	bf08      	it	eq
 800229c:	1aad      	subeq	r5, r5, r2
 800229e:	68a3      	ldr	r3, [r4, #8]
 80022a0:	6922      	ldr	r2, [r4, #16]
 80022a2:	bf0c      	ite	eq
 80022a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80022a8:	2500      	movne	r5, #0
 80022aa:	4293      	cmp	r3, r2
 80022ac:	bfc4      	itt	gt
 80022ae:	1a9b      	subgt	r3, r3, r2
 80022b0:	18ed      	addgt	r5, r5, r3
 80022b2:	f04f 0900 	mov.w	r9, #0
 80022b6:	341a      	adds	r4, #26
 80022b8:	454d      	cmp	r5, r9
 80022ba:	d11b      	bne.n	80022f4 <_printf_common+0xd8>
 80022bc:	2000      	movs	r0, #0
 80022be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022c2:	2301      	movs	r3, #1
 80022c4:	4652      	mov	r2, sl
 80022c6:	4639      	mov	r1, r7
 80022c8:	4630      	mov	r0, r6
 80022ca:	47c0      	blx	r8
 80022cc:	3001      	adds	r0, #1
 80022ce:	d103      	bne.n	80022d8 <_printf_common+0xbc>
 80022d0:	f04f 30ff 	mov.w	r0, #4294967295
 80022d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80022d8:	3501      	adds	r5, #1
 80022da:	e7c2      	b.n	8002262 <_printf_common+0x46>
 80022dc:	18e1      	adds	r1, r4, r3
 80022de:	1c5a      	adds	r2, r3, #1
 80022e0:	2030      	movs	r0, #48	; 0x30
 80022e2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80022e6:	4422      	add	r2, r4
 80022e8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80022ec:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80022f0:	3302      	adds	r3, #2
 80022f2:	e7c4      	b.n	800227e <_printf_common+0x62>
 80022f4:	2301      	movs	r3, #1
 80022f6:	4622      	mov	r2, r4
 80022f8:	4639      	mov	r1, r7
 80022fa:	4630      	mov	r0, r6
 80022fc:	47c0      	blx	r8
 80022fe:	3001      	adds	r0, #1
 8002300:	d0e6      	beq.n	80022d0 <_printf_common+0xb4>
 8002302:	f109 0901 	add.w	r9, r9, #1
 8002306:	e7d7      	b.n	80022b8 <_printf_common+0x9c>

08002308 <_printf_i>:
 8002308:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800230c:	4617      	mov	r7, r2
 800230e:	7e0a      	ldrb	r2, [r1, #24]
 8002310:	b085      	sub	sp, #20
 8002312:	2a6e      	cmp	r2, #110	; 0x6e
 8002314:	4698      	mov	r8, r3
 8002316:	4606      	mov	r6, r0
 8002318:	460c      	mov	r4, r1
 800231a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800231c:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8002320:	f000 80bc 	beq.w	800249c <_printf_i+0x194>
 8002324:	d81a      	bhi.n	800235c <_printf_i+0x54>
 8002326:	2a63      	cmp	r2, #99	; 0x63
 8002328:	d02e      	beq.n	8002388 <_printf_i+0x80>
 800232a:	d80a      	bhi.n	8002342 <_printf_i+0x3a>
 800232c:	2a00      	cmp	r2, #0
 800232e:	f000 80c8 	beq.w	80024c2 <_printf_i+0x1ba>
 8002332:	2a58      	cmp	r2, #88	; 0x58
 8002334:	f000 808a 	beq.w	800244c <_printf_i+0x144>
 8002338:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800233c:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8002340:	e02a      	b.n	8002398 <_printf_i+0x90>
 8002342:	2a64      	cmp	r2, #100	; 0x64
 8002344:	d001      	beq.n	800234a <_printf_i+0x42>
 8002346:	2a69      	cmp	r2, #105	; 0x69
 8002348:	d1f6      	bne.n	8002338 <_printf_i+0x30>
 800234a:	6821      	ldr	r1, [r4, #0]
 800234c:	681a      	ldr	r2, [r3, #0]
 800234e:	f011 0f80 	tst.w	r1, #128	; 0x80
 8002352:	d023      	beq.n	800239c <_printf_i+0x94>
 8002354:	1d11      	adds	r1, r2, #4
 8002356:	6019      	str	r1, [r3, #0]
 8002358:	6813      	ldr	r3, [r2, #0]
 800235a:	e027      	b.n	80023ac <_printf_i+0xa4>
 800235c:	2a73      	cmp	r2, #115	; 0x73
 800235e:	f000 80b4 	beq.w	80024ca <_printf_i+0x1c2>
 8002362:	d808      	bhi.n	8002376 <_printf_i+0x6e>
 8002364:	2a6f      	cmp	r2, #111	; 0x6f
 8002366:	d02a      	beq.n	80023be <_printf_i+0xb6>
 8002368:	2a70      	cmp	r2, #112	; 0x70
 800236a:	d1e5      	bne.n	8002338 <_printf_i+0x30>
 800236c:	680a      	ldr	r2, [r1, #0]
 800236e:	f042 0220 	orr.w	r2, r2, #32
 8002372:	600a      	str	r2, [r1, #0]
 8002374:	e003      	b.n	800237e <_printf_i+0x76>
 8002376:	2a75      	cmp	r2, #117	; 0x75
 8002378:	d021      	beq.n	80023be <_printf_i+0xb6>
 800237a:	2a78      	cmp	r2, #120	; 0x78
 800237c:	d1dc      	bne.n	8002338 <_printf_i+0x30>
 800237e:	2278      	movs	r2, #120	; 0x78
 8002380:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8002384:	496e      	ldr	r1, [pc, #440]	; (8002540 <_printf_i+0x238>)
 8002386:	e064      	b.n	8002452 <_printf_i+0x14a>
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	f101 0542 	add.w	r5, r1, #66	; 0x42
 800238e:	1d11      	adds	r1, r2, #4
 8002390:	6019      	str	r1, [r3, #0]
 8002392:	6813      	ldr	r3, [r2, #0]
 8002394:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8002398:	2301      	movs	r3, #1
 800239a:	e0a3      	b.n	80024e4 <_printf_i+0x1dc>
 800239c:	f011 0f40 	tst.w	r1, #64	; 0x40
 80023a0:	f102 0104 	add.w	r1, r2, #4
 80023a4:	6019      	str	r1, [r3, #0]
 80023a6:	d0d7      	beq.n	8002358 <_printf_i+0x50>
 80023a8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	da03      	bge.n	80023b8 <_printf_i+0xb0>
 80023b0:	222d      	movs	r2, #45	; 0x2d
 80023b2:	425b      	negs	r3, r3
 80023b4:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80023b8:	4962      	ldr	r1, [pc, #392]	; (8002544 <_printf_i+0x23c>)
 80023ba:	220a      	movs	r2, #10
 80023bc:	e017      	b.n	80023ee <_printf_i+0xe6>
 80023be:	6820      	ldr	r0, [r4, #0]
 80023c0:	6819      	ldr	r1, [r3, #0]
 80023c2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80023c6:	d003      	beq.n	80023d0 <_printf_i+0xc8>
 80023c8:	1d08      	adds	r0, r1, #4
 80023ca:	6018      	str	r0, [r3, #0]
 80023cc:	680b      	ldr	r3, [r1, #0]
 80023ce:	e006      	b.n	80023de <_printf_i+0xd6>
 80023d0:	f010 0f40 	tst.w	r0, #64	; 0x40
 80023d4:	f101 0004 	add.w	r0, r1, #4
 80023d8:	6018      	str	r0, [r3, #0]
 80023da:	d0f7      	beq.n	80023cc <_printf_i+0xc4>
 80023dc:	880b      	ldrh	r3, [r1, #0]
 80023de:	4959      	ldr	r1, [pc, #356]	; (8002544 <_printf_i+0x23c>)
 80023e0:	2a6f      	cmp	r2, #111	; 0x6f
 80023e2:	bf14      	ite	ne
 80023e4:	220a      	movne	r2, #10
 80023e6:	2208      	moveq	r2, #8
 80023e8:	2000      	movs	r0, #0
 80023ea:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 80023ee:	6865      	ldr	r5, [r4, #4]
 80023f0:	60a5      	str	r5, [r4, #8]
 80023f2:	2d00      	cmp	r5, #0
 80023f4:	f2c0 809c 	blt.w	8002530 <_printf_i+0x228>
 80023f8:	6820      	ldr	r0, [r4, #0]
 80023fa:	f020 0004 	bic.w	r0, r0, #4
 80023fe:	6020      	str	r0, [r4, #0]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d13f      	bne.n	8002484 <_printf_i+0x17c>
 8002404:	2d00      	cmp	r5, #0
 8002406:	f040 8095 	bne.w	8002534 <_printf_i+0x22c>
 800240a:	4675      	mov	r5, lr
 800240c:	2a08      	cmp	r2, #8
 800240e:	d10b      	bne.n	8002428 <_printf_i+0x120>
 8002410:	6823      	ldr	r3, [r4, #0]
 8002412:	07da      	lsls	r2, r3, #31
 8002414:	d508      	bpl.n	8002428 <_printf_i+0x120>
 8002416:	6923      	ldr	r3, [r4, #16]
 8002418:	6862      	ldr	r2, [r4, #4]
 800241a:	429a      	cmp	r2, r3
 800241c:	bfde      	ittt	le
 800241e:	2330      	movle	r3, #48	; 0x30
 8002420:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002424:	f105 35ff 	addle.w	r5, r5, #4294967295
 8002428:	ebae 0305 	sub.w	r3, lr, r5
 800242c:	6123      	str	r3, [r4, #16]
 800242e:	f8cd 8000 	str.w	r8, [sp]
 8002432:	463b      	mov	r3, r7
 8002434:	aa03      	add	r2, sp, #12
 8002436:	4621      	mov	r1, r4
 8002438:	4630      	mov	r0, r6
 800243a:	f7ff feef 	bl	800221c <_printf_common>
 800243e:	3001      	adds	r0, #1
 8002440:	d155      	bne.n	80024ee <_printf_i+0x1e6>
 8002442:	f04f 30ff 	mov.w	r0, #4294967295
 8002446:	b005      	add	sp, #20
 8002448:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800244c:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002450:	493c      	ldr	r1, [pc, #240]	; (8002544 <_printf_i+0x23c>)
 8002452:	6822      	ldr	r2, [r4, #0]
 8002454:	6818      	ldr	r0, [r3, #0]
 8002456:	f012 0f80 	tst.w	r2, #128	; 0x80
 800245a:	f100 0504 	add.w	r5, r0, #4
 800245e:	601d      	str	r5, [r3, #0]
 8002460:	d001      	beq.n	8002466 <_printf_i+0x15e>
 8002462:	6803      	ldr	r3, [r0, #0]
 8002464:	e002      	b.n	800246c <_printf_i+0x164>
 8002466:	0655      	lsls	r5, r2, #25
 8002468:	d5fb      	bpl.n	8002462 <_printf_i+0x15a>
 800246a:	8803      	ldrh	r3, [r0, #0]
 800246c:	07d0      	lsls	r0, r2, #31
 800246e:	bf44      	itt	mi
 8002470:	f042 0220 	orrmi.w	r2, r2, #32
 8002474:	6022      	strmi	r2, [r4, #0]
 8002476:	b91b      	cbnz	r3, 8002480 <_printf_i+0x178>
 8002478:	6822      	ldr	r2, [r4, #0]
 800247a:	f022 0220 	bic.w	r2, r2, #32
 800247e:	6022      	str	r2, [r4, #0]
 8002480:	2210      	movs	r2, #16
 8002482:	e7b1      	b.n	80023e8 <_printf_i+0xe0>
 8002484:	4675      	mov	r5, lr
 8002486:	fbb3 f0f2 	udiv	r0, r3, r2
 800248a:	fb02 3310 	mls	r3, r2, r0, r3
 800248e:	5ccb      	ldrb	r3, [r1, r3]
 8002490:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8002494:	4603      	mov	r3, r0
 8002496:	2800      	cmp	r0, #0
 8002498:	d1f5      	bne.n	8002486 <_printf_i+0x17e>
 800249a:	e7b7      	b.n	800240c <_printf_i+0x104>
 800249c:	6808      	ldr	r0, [r1, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	6949      	ldr	r1, [r1, #20]
 80024a2:	f010 0f80 	tst.w	r0, #128	; 0x80
 80024a6:	d004      	beq.n	80024b2 <_printf_i+0x1aa>
 80024a8:	1d10      	adds	r0, r2, #4
 80024aa:	6018      	str	r0, [r3, #0]
 80024ac:	6813      	ldr	r3, [r2, #0]
 80024ae:	6019      	str	r1, [r3, #0]
 80024b0:	e007      	b.n	80024c2 <_printf_i+0x1ba>
 80024b2:	f010 0f40 	tst.w	r0, #64	; 0x40
 80024b6:	f102 0004 	add.w	r0, r2, #4
 80024ba:	6018      	str	r0, [r3, #0]
 80024bc:	6813      	ldr	r3, [r2, #0]
 80024be:	d0f6      	beq.n	80024ae <_printf_i+0x1a6>
 80024c0:	8019      	strh	r1, [r3, #0]
 80024c2:	2300      	movs	r3, #0
 80024c4:	6123      	str	r3, [r4, #16]
 80024c6:	4675      	mov	r5, lr
 80024c8:	e7b1      	b.n	800242e <_printf_i+0x126>
 80024ca:	681a      	ldr	r2, [r3, #0]
 80024cc:	1d11      	adds	r1, r2, #4
 80024ce:	6019      	str	r1, [r3, #0]
 80024d0:	6815      	ldr	r5, [r2, #0]
 80024d2:	6862      	ldr	r2, [r4, #4]
 80024d4:	2100      	movs	r1, #0
 80024d6:	4628      	mov	r0, r5
 80024d8:	f7fd fe7a 	bl	80001d0 <memchr>
 80024dc:	b108      	cbz	r0, 80024e2 <_printf_i+0x1da>
 80024de:	1b40      	subs	r0, r0, r5
 80024e0:	6060      	str	r0, [r4, #4]
 80024e2:	6863      	ldr	r3, [r4, #4]
 80024e4:	6123      	str	r3, [r4, #16]
 80024e6:	2300      	movs	r3, #0
 80024e8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80024ec:	e79f      	b.n	800242e <_printf_i+0x126>
 80024ee:	6923      	ldr	r3, [r4, #16]
 80024f0:	462a      	mov	r2, r5
 80024f2:	4639      	mov	r1, r7
 80024f4:	4630      	mov	r0, r6
 80024f6:	47c0      	blx	r8
 80024f8:	3001      	adds	r0, #1
 80024fa:	d0a2      	beq.n	8002442 <_printf_i+0x13a>
 80024fc:	6823      	ldr	r3, [r4, #0]
 80024fe:	079b      	lsls	r3, r3, #30
 8002500:	d507      	bpl.n	8002512 <_printf_i+0x20a>
 8002502:	2500      	movs	r5, #0
 8002504:	f104 0919 	add.w	r9, r4, #25
 8002508:	68e3      	ldr	r3, [r4, #12]
 800250a:	9a03      	ldr	r2, [sp, #12]
 800250c:	1a9b      	subs	r3, r3, r2
 800250e:	429d      	cmp	r5, r3
 8002510:	db05      	blt.n	800251e <_printf_i+0x216>
 8002512:	68e0      	ldr	r0, [r4, #12]
 8002514:	9b03      	ldr	r3, [sp, #12]
 8002516:	4298      	cmp	r0, r3
 8002518:	bfb8      	it	lt
 800251a:	4618      	movlt	r0, r3
 800251c:	e793      	b.n	8002446 <_printf_i+0x13e>
 800251e:	2301      	movs	r3, #1
 8002520:	464a      	mov	r2, r9
 8002522:	4639      	mov	r1, r7
 8002524:	4630      	mov	r0, r6
 8002526:	47c0      	blx	r8
 8002528:	3001      	adds	r0, #1
 800252a:	d08a      	beq.n	8002442 <_printf_i+0x13a>
 800252c:	3501      	adds	r5, #1
 800252e:	e7eb      	b.n	8002508 <_printf_i+0x200>
 8002530:	2b00      	cmp	r3, #0
 8002532:	d1a7      	bne.n	8002484 <_printf_i+0x17c>
 8002534:	780b      	ldrb	r3, [r1, #0]
 8002536:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800253a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800253e:	e765      	b.n	800240c <_printf_i+0x104>
 8002540:	08002ef9 	.word	0x08002ef9
 8002544:	08002ee8 	.word	0x08002ee8

08002548 <memcpy>:
 8002548:	b510      	push	{r4, lr}
 800254a:	1e43      	subs	r3, r0, #1
 800254c:	440a      	add	r2, r1
 800254e:	4291      	cmp	r1, r2
 8002550:	d100      	bne.n	8002554 <memcpy+0xc>
 8002552:	bd10      	pop	{r4, pc}
 8002554:	f811 4b01 	ldrb.w	r4, [r1], #1
 8002558:	f803 4f01 	strb.w	r4, [r3, #1]!
 800255c:	e7f7      	b.n	800254e <memcpy+0x6>

0800255e <memmove>:
 800255e:	4288      	cmp	r0, r1
 8002560:	b510      	push	{r4, lr}
 8002562:	eb01 0302 	add.w	r3, r1, r2
 8002566:	d803      	bhi.n	8002570 <memmove+0x12>
 8002568:	1e42      	subs	r2, r0, #1
 800256a:	4299      	cmp	r1, r3
 800256c:	d10c      	bne.n	8002588 <memmove+0x2a>
 800256e:	bd10      	pop	{r4, pc}
 8002570:	4298      	cmp	r0, r3
 8002572:	d2f9      	bcs.n	8002568 <memmove+0xa>
 8002574:	1881      	adds	r1, r0, r2
 8002576:	1ad2      	subs	r2, r2, r3
 8002578:	42d3      	cmn	r3, r2
 800257a:	d100      	bne.n	800257e <memmove+0x20>
 800257c:	bd10      	pop	{r4, pc}
 800257e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8002582:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8002586:	e7f7      	b.n	8002578 <memmove+0x1a>
 8002588:	f811 4b01 	ldrb.w	r4, [r1], #1
 800258c:	f802 4f01 	strb.w	r4, [r2, #1]!
 8002590:	e7eb      	b.n	800256a <memmove+0xc>
	...

08002594 <_free_r>:
 8002594:	b538      	push	{r3, r4, r5, lr}
 8002596:	4605      	mov	r5, r0
 8002598:	2900      	cmp	r1, #0
 800259a:	d045      	beq.n	8002628 <_free_r+0x94>
 800259c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80025a0:	1f0c      	subs	r4, r1, #4
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	bfb8      	it	lt
 80025a6:	18e4      	addlt	r4, r4, r3
 80025a8:	f000 f8d6 	bl	8002758 <__malloc_lock>
 80025ac:	4a1f      	ldr	r2, [pc, #124]	; (800262c <_free_r+0x98>)
 80025ae:	6813      	ldr	r3, [r2, #0]
 80025b0:	4610      	mov	r0, r2
 80025b2:	b933      	cbnz	r3, 80025c2 <_free_r+0x2e>
 80025b4:	6063      	str	r3, [r4, #4]
 80025b6:	6014      	str	r4, [r2, #0]
 80025b8:	4628      	mov	r0, r5
 80025ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80025be:	f000 b8cc 	b.w	800275a <__malloc_unlock>
 80025c2:	42a3      	cmp	r3, r4
 80025c4:	d90c      	bls.n	80025e0 <_free_r+0x4c>
 80025c6:	6821      	ldr	r1, [r4, #0]
 80025c8:	1862      	adds	r2, r4, r1
 80025ca:	4293      	cmp	r3, r2
 80025cc:	bf04      	itt	eq
 80025ce:	681a      	ldreq	r2, [r3, #0]
 80025d0:	685b      	ldreq	r3, [r3, #4]
 80025d2:	6063      	str	r3, [r4, #4]
 80025d4:	bf04      	itt	eq
 80025d6:	1852      	addeq	r2, r2, r1
 80025d8:	6022      	streq	r2, [r4, #0]
 80025da:	6004      	str	r4, [r0, #0]
 80025dc:	e7ec      	b.n	80025b8 <_free_r+0x24>
 80025de:	4613      	mov	r3, r2
 80025e0:	685a      	ldr	r2, [r3, #4]
 80025e2:	b10a      	cbz	r2, 80025e8 <_free_r+0x54>
 80025e4:	42a2      	cmp	r2, r4
 80025e6:	d9fa      	bls.n	80025de <_free_r+0x4a>
 80025e8:	6819      	ldr	r1, [r3, #0]
 80025ea:	1858      	adds	r0, r3, r1
 80025ec:	42a0      	cmp	r0, r4
 80025ee:	d10b      	bne.n	8002608 <_free_r+0x74>
 80025f0:	6820      	ldr	r0, [r4, #0]
 80025f2:	4401      	add	r1, r0
 80025f4:	1858      	adds	r0, r3, r1
 80025f6:	4282      	cmp	r2, r0
 80025f8:	6019      	str	r1, [r3, #0]
 80025fa:	d1dd      	bne.n	80025b8 <_free_r+0x24>
 80025fc:	6810      	ldr	r0, [r2, #0]
 80025fe:	6852      	ldr	r2, [r2, #4]
 8002600:	605a      	str	r2, [r3, #4]
 8002602:	4401      	add	r1, r0
 8002604:	6019      	str	r1, [r3, #0]
 8002606:	e7d7      	b.n	80025b8 <_free_r+0x24>
 8002608:	d902      	bls.n	8002610 <_free_r+0x7c>
 800260a:	230c      	movs	r3, #12
 800260c:	602b      	str	r3, [r5, #0]
 800260e:	e7d3      	b.n	80025b8 <_free_r+0x24>
 8002610:	6820      	ldr	r0, [r4, #0]
 8002612:	1821      	adds	r1, r4, r0
 8002614:	428a      	cmp	r2, r1
 8002616:	bf04      	itt	eq
 8002618:	6811      	ldreq	r1, [r2, #0]
 800261a:	6852      	ldreq	r2, [r2, #4]
 800261c:	6062      	str	r2, [r4, #4]
 800261e:	bf04      	itt	eq
 8002620:	1809      	addeq	r1, r1, r0
 8002622:	6021      	streq	r1, [r4, #0]
 8002624:	605c      	str	r4, [r3, #4]
 8002626:	e7c7      	b.n	80025b8 <_free_r+0x24>
 8002628:	bd38      	pop	{r3, r4, r5, pc}
 800262a:	bf00      	nop
 800262c:	20000090 	.word	0x20000090

08002630 <_malloc_r>:
 8002630:	b570      	push	{r4, r5, r6, lr}
 8002632:	1ccd      	adds	r5, r1, #3
 8002634:	f025 0503 	bic.w	r5, r5, #3
 8002638:	3508      	adds	r5, #8
 800263a:	2d0c      	cmp	r5, #12
 800263c:	bf38      	it	cc
 800263e:	250c      	movcc	r5, #12
 8002640:	2d00      	cmp	r5, #0
 8002642:	4606      	mov	r6, r0
 8002644:	db01      	blt.n	800264a <_malloc_r+0x1a>
 8002646:	42a9      	cmp	r1, r5
 8002648:	d903      	bls.n	8002652 <_malloc_r+0x22>
 800264a:	230c      	movs	r3, #12
 800264c:	6033      	str	r3, [r6, #0]
 800264e:	2000      	movs	r0, #0
 8002650:	bd70      	pop	{r4, r5, r6, pc}
 8002652:	f000 f881 	bl	8002758 <__malloc_lock>
 8002656:	4a23      	ldr	r2, [pc, #140]	; (80026e4 <_malloc_r+0xb4>)
 8002658:	6814      	ldr	r4, [r2, #0]
 800265a:	4621      	mov	r1, r4
 800265c:	b991      	cbnz	r1, 8002684 <_malloc_r+0x54>
 800265e:	4c22      	ldr	r4, [pc, #136]	; (80026e8 <_malloc_r+0xb8>)
 8002660:	6823      	ldr	r3, [r4, #0]
 8002662:	b91b      	cbnz	r3, 800266c <_malloc_r+0x3c>
 8002664:	4630      	mov	r0, r6
 8002666:	f000 f867 	bl	8002738 <_sbrk_r>
 800266a:	6020      	str	r0, [r4, #0]
 800266c:	4629      	mov	r1, r5
 800266e:	4630      	mov	r0, r6
 8002670:	f000 f862 	bl	8002738 <_sbrk_r>
 8002674:	1c43      	adds	r3, r0, #1
 8002676:	d126      	bne.n	80026c6 <_malloc_r+0x96>
 8002678:	230c      	movs	r3, #12
 800267a:	6033      	str	r3, [r6, #0]
 800267c:	4630      	mov	r0, r6
 800267e:	f000 f86c 	bl	800275a <__malloc_unlock>
 8002682:	e7e4      	b.n	800264e <_malloc_r+0x1e>
 8002684:	680b      	ldr	r3, [r1, #0]
 8002686:	1b5b      	subs	r3, r3, r5
 8002688:	d41a      	bmi.n	80026c0 <_malloc_r+0x90>
 800268a:	2b0b      	cmp	r3, #11
 800268c:	d90f      	bls.n	80026ae <_malloc_r+0x7e>
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	50cd      	str	r5, [r1, r3]
 8002692:	18cc      	adds	r4, r1, r3
 8002694:	4630      	mov	r0, r6
 8002696:	f000 f860 	bl	800275a <__malloc_unlock>
 800269a:	f104 000b 	add.w	r0, r4, #11
 800269e:	1d23      	adds	r3, r4, #4
 80026a0:	f020 0007 	bic.w	r0, r0, #7
 80026a4:	1ac3      	subs	r3, r0, r3
 80026a6:	d01b      	beq.n	80026e0 <_malloc_r+0xb0>
 80026a8:	425a      	negs	r2, r3
 80026aa:	50e2      	str	r2, [r4, r3]
 80026ac:	bd70      	pop	{r4, r5, r6, pc}
 80026ae:	428c      	cmp	r4, r1
 80026b0:	bf0d      	iteet	eq
 80026b2:	6863      	ldreq	r3, [r4, #4]
 80026b4:	684b      	ldrne	r3, [r1, #4]
 80026b6:	6063      	strne	r3, [r4, #4]
 80026b8:	6013      	streq	r3, [r2, #0]
 80026ba:	bf18      	it	ne
 80026bc:	460c      	movne	r4, r1
 80026be:	e7e9      	b.n	8002694 <_malloc_r+0x64>
 80026c0:	460c      	mov	r4, r1
 80026c2:	6849      	ldr	r1, [r1, #4]
 80026c4:	e7ca      	b.n	800265c <_malloc_r+0x2c>
 80026c6:	1cc4      	adds	r4, r0, #3
 80026c8:	f024 0403 	bic.w	r4, r4, #3
 80026cc:	42a0      	cmp	r0, r4
 80026ce:	d005      	beq.n	80026dc <_malloc_r+0xac>
 80026d0:	1a21      	subs	r1, r4, r0
 80026d2:	4630      	mov	r0, r6
 80026d4:	f000 f830 	bl	8002738 <_sbrk_r>
 80026d8:	3001      	adds	r0, #1
 80026da:	d0cd      	beq.n	8002678 <_malloc_r+0x48>
 80026dc:	6025      	str	r5, [r4, #0]
 80026de:	e7d9      	b.n	8002694 <_malloc_r+0x64>
 80026e0:	bd70      	pop	{r4, r5, r6, pc}
 80026e2:	bf00      	nop
 80026e4:	20000090 	.word	0x20000090
 80026e8:	20000094 	.word	0x20000094

080026ec <_realloc_r>:
 80026ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80026ee:	4607      	mov	r7, r0
 80026f0:	4614      	mov	r4, r2
 80026f2:	460e      	mov	r6, r1
 80026f4:	b921      	cbnz	r1, 8002700 <_realloc_r+0x14>
 80026f6:	4611      	mov	r1, r2
 80026f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80026fc:	f7ff bf98 	b.w	8002630 <_malloc_r>
 8002700:	b922      	cbnz	r2, 800270c <_realloc_r+0x20>
 8002702:	f7ff ff47 	bl	8002594 <_free_r>
 8002706:	4625      	mov	r5, r4
 8002708:	4628      	mov	r0, r5
 800270a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800270c:	f000 f826 	bl	800275c <_malloc_usable_size_r>
 8002710:	4284      	cmp	r4, r0
 8002712:	d90f      	bls.n	8002734 <_realloc_r+0x48>
 8002714:	4621      	mov	r1, r4
 8002716:	4638      	mov	r0, r7
 8002718:	f7ff ff8a 	bl	8002630 <_malloc_r>
 800271c:	4605      	mov	r5, r0
 800271e:	2800      	cmp	r0, #0
 8002720:	d0f2      	beq.n	8002708 <_realloc_r+0x1c>
 8002722:	4631      	mov	r1, r6
 8002724:	4622      	mov	r2, r4
 8002726:	f7ff ff0f 	bl	8002548 <memcpy>
 800272a:	4631      	mov	r1, r6
 800272c:	4638      	mov	r0, r7
 800272e:	f7ff ff31 	bl	8002594 <_free_r>
 8002732:	e7e9      	b.n	8002708 <_realloc_r+0x1c>
 8002734:	4635      	mov	r5, r6
 8002736:	e7e7      	b.n	8002708 <_realloc_r+0x1c>

08002738 <_sbrk_r>:
 8002738:	b538      	push	{r3, r4, r5, lr}
 800273a:	4c06      	ldr	r4, [pc, #24]	; (8002754 <_sbrk_r+0x1c>)
 800273c:	2300      	movs	r3, #0
 800273e:	4605      	mov	r5, r0
 8002740:	4608      	mov	r0, r1
 8002742:	6023      	str	r3, [r4, #0]
 8002744:	f000 fb8e 	bl	8002e64 <_sbrk>
 8002748:	1c43      	adds	r3, r0, #1
 800274a:	d102      	bne.n	8002752 <_sbrk_r+0x1a>
 800274c:	6823      	ldr	r3, [r4, #0]
 800274e:	b103      	cbz	r3, 8002752 <_sbrk_r+0x1a>
 8002750:	602b      	str	r3, [r5, #0]
 8002752:	bd38      	pop	{r3, r4, r5, pc}
 8002754:	20000110 	.word	0x20000110

08002758 <__malloc_lock>:
 8002758:	4770      	bx	lr

0800275a <__malloc_unlock>:
 800275a:	4770      	bx	lr

0800275c <_malloc_usable_size_r>:
 800275c:	f851 0c04 	ldr.w	r0, [r1, #-4]
 8002760:	2800      	cmp	r0, #0
 8002762:	f1a0 0004 	sub.w	r0, r0, #4
 8002766:	bfbc      	itt	lt
 8002768:	580b      	ldrlt	r3, [r1, r0]
 800276a:	18c0      	addlt	r0, r0, r3
 800276c:	4770      	bx	lr
	...

08002770 <floor>:
 8002770:	ec51 0b10 	vmov	r0, r1, d0
 8002774:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002778:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800277c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8002780:	2e13      	cmp	r6, #19
 8002782:	ee10 8a10 	vmov	r8, s0
 8002786:	460c      	mov	r4, r1
 8002788:	ee10 5a10 	vmov	r5, s0
 800278c:	dc35      	bgt.n	80027fa <floor+0x8a>
 800278e:	2e00      	cmp	r6, #0
 8002790:	da17      	bge.n	80027c2 <floor+0x52>
 8002792:	a335      	add	r3, pc, #212	; (adr r3, 8002868 <floor+0xf8>)
 8002794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002798:	f7fd fd70 	bl	800027c <__adddf3>
 800279c:	2200      	movs	r2, #0
 800279e:	2300      	movs	r3, #0
 80027a0:	f7fe f9ae 	bl	8000b00 <__aeabi_dcmpgt>
 80027a4:	b150      	cbz	r0, 80027bc <floor+0x4c>
 80027a6:	2c00      	cmp	r4, #0
 80027a8:	da5a      	bge.n	8002860 <floor+0xf0>
 80027aa:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80027ae:	ea53 0308 	orrs.w	r3, r3, r8
 80027b2:	4b2f      	ldr	r3, [pc, #188]	; (8002870 <floor+0x100>)
 80027b4:	f04f 0500 	mov.w	r5, #0
 80027b8:	bf18      	it	ne
 80027ba:	461c      	movne	r4, r3
 80027bc:	4621      	mov	r1, r4
 80027be:	4628      	mov	r0, r5
 80027c0:	e025      	b.n	800280e <floor+0x9e>
 80027c2:	4f2c      	ldr	r7, [pc, #176]	; (8002874 <floor+0x104>)
 80027c4:	4137      	asrs	r7, r6
 80027c6:	ea01 0307 	and.w	r3, r1, r7
 80027ca:	4303      	orrs	r3, r0
 80027cc:	d01f      	beq.n	800280e <floor+0x9e>
 80027ce:	a326      	add	r3, pc, #152	; (adr r3, 8002868 <floor+0xf8>)
 80027d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027d4:	f7fd fd52 	bl	800027c <__adddf3>
 80027d8:	2200      	movs	r2, #0
 80027da:	2300      	movs	r3, #0
 80027dc:	f7fe f990 	bl	8000b00 <__aeabi_dcmpgt>
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d0eb      	beq.n	80027bc <floor+0x4c>
 80027e4:	2c00      	cmp	r4, #0
 80027e6:	bfbe      	ittt	lt
 80027e8:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80027ec:	fa43 f606 	asrlt.w	r6, r3, r6
 80027f0:	19a4      	addlt	r4, r4, r6
 80027f2:	ea24 0407 	bic.w	r4, r4, r7
 80027f6:	2500      	movs	r5, #0
 80027f8:	e7e0      	b.n	80027bc <floor+0x4c>
 80027fa:	2e33      	cmp	r6, #51	; 0x33
 80027fc:	dd0b      	ble.n	8002816 <floor+0xa6>
 80027fe:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8002802:	d104      	bne.n	800280e <floor+0x9e>
 8002804:	ee10 2a10 	vmov	r2, s0
 8002808:	460b      	mov	r3, r1
 800280a:	f7fd fd37 	bl	800027c <__adddf3>
 800280e:	ec41 0b10 	vmov	d0, r0, r1
 8002812:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002816:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
 800281e:	fa23 f707 	lsr.w	r7, r3, r7
 8002822:	4238      	tst	r0, r7
 8002824:	d0f3      	beq.n	800280e <floor+0x9e>
 8002826:	a310      	add	r3, pc, #64	; (adr r3, 8002868 <floor+0xf8>)
 8002828:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282c:	f7fd fd26 	bl	800027c <__adddf3>
 8002830:	2200      	movs	r2, #0
 8002832:	2300      	movs	r3, #0
 8002834:	f7fe f964 	bl	8000b00 <__aeabi_dcmpgt>
 8002838:	2800      	cmp	r0, #0
 800283a:	d0bf      	beq.n	80027bc <floor+0x4c>
 800283c:	2c00      	cmp	r4, #0
 800283e:	da02      	bge.n	8002846 <floor+0xd6>
 8002840:	2e14      	cmp	r6, #20
 8002842:	d103      	bne.n	800284c <floor+0xdc>
 8002844:	3401      	adds	r4, #1
 8002846:	ea25 0507 	bic.w	r5, r5, r7
 800284a:	e7b7      	b.n	80027bc <floor+0x4c>
 800284c:	2301      	movs	r3, #1
 800284e:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8002852:	fa03 f606 	lsl.w	r6, r3, r6
 8002856:	4435      	add	r5, r6
 8002858:	45a8      	cmp	r8, r5
 800285a:	bf88      	it	hi
 800285c:	18e4      	addhi	r4, r4, r3
 800285e:	e7f2      	b.n	8002846 <floor+0xd6>
 8002860:	2500      	movs	r5, #0
 8002862:	462c      	mov	r4, r5
 8002864:	e7aa      	b.n	80027bc <floor+0x4c>
 8002866:	bf00      	nop
 8002868:	8800759c 	.word	0x8800759c
 800286c:	7e37e43c 	.word	0x7e37e43c
 8002870:	bff00000 	.word	0xbff00000
 8002874:	000fffff 	.word	0x000fffff

08002878 <log10>:
 8002878:	b5f0      	push	{r4, r5, r6, r7, lr}
 800287a:	ed2d 8b02 	vpush	{d8}
 800287e:	b08b      	sub	sp, #44	; 0x2c
 8002880:	ec55 4b10 	vmov	r4, r5, d0
 8002884:	f000 f878 	bl	8002978 <__ieee754_log10>
 8002888:	4b36      	ldr	r3, [pc, #216]	; (8002964 <log10+0xec>)
 800288a:	eeb0 8a40 	vmov.f32	s16, s0
 800288e:	eef0 8a60 	vmov.f32	s17, s1
 8002892:	f993 6000 	ldrsb.w	r6, [r3]
 8002896:	1c73      	adds	r3, r6, #1
 8002898:	d05c      	beq.n	8002954 <log10+0xdc>
 800289a:	4622      	mov	r2, r4
 800289c:	462b      	mov	r3, r5
 800289e:	4620      	mov	r0, r4
 80028a0:	4629      	mov	r1, r5
 80028a2:	f7fe f937 	bl	8000b14 <__aeabi_dcmpun>
 80028a6:	4607      	mov	r7, r0
 80028a8:	2800      	cmp	r0, #0
 80028aa:	d153      	bne.n	8002954 <log10+0xdc>
 80028ac:	2200      	movs	r2, #0
 80028ae:	2300      	movs	r3, #0
 80028b0:	4620      	mov	r0, r4
 80028b2:	4629      	mov	r1, r5
 80028b4:	f7fe f910 	bl	8000ad8 <__aeabi_dcmple>
 80028b8:	2800      	cmp	r0, #0
 80028ba:	d04b      	beq.n	8002954 <log10+0xdc>
 80028bc:	4b2a      	ldr	r3, [pc, #168]	; (8002968 <log10+0xf0>)
 80028be:	9301      	str	r3, [sp, #4]
 80028c0:	9708      	str	r7, [sp, #32]
 80028c2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80028c6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80028ca:	b9a6      	cbnz	r6, 80028f6 <log10+0x7e>
 80028cc:	4b27      	ldr	r3, [pc, #156]	; (800296c <log10+0xf4>)
 80028ce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80028d2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80028d6:	4620      	mov	r0, r4
 80028d8:	2200      	movs	r2, #0
 80028da:	2300      	movs	r3, #0
 80028dc:	4629      	mov	r1, r5
 80028de:	f7fe f8e7 	bl	8000ab0 <__aeabi_dcmpeq>
 80028e2:	bb40      	cbnz	r0, 8002936 <log10+0xbe>
 80028e4:	2301      	movs	r3, #1
 80028e6:	2e02      	cmp	r6, #2
 80028e8:	9300      	str	r3, [sp, #0]
 80028ea:	d119      	bne.n	8002920 <log10+0xa8>
 80028ec:	f000 fab4 	bl	8002e58 <__errno>
 80028f0:	2321      	movs	r3, #33	; 0x21
 80028f2:	6003      	str	r3, [r0, #0]
 80028f4:	e019      	b.n	800292a <log10+0xb2>
 80028f6:	4b1e      	ldr	r3, [pc, #120]	; (8002970 <log10+0xf8>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80028fe:	4620      	mov	r0, r4
 8002900:	2200      	movs	r2, #0
 8002902:	2300      	movs	r3, #0
 8002904:	4629      	mov	r1, r5
 8002906:	f7fe f8d3 	bl	8000ab0 <__aeabi_dcmpeq>
 800290a:	2800      	cmp	r0, #0
 800290c:	d0ea      	beq.n	80028e4 <log10+0x6c>
 800290e:	2302      	movs	r3, #2
 8002910:	429e      	cmp	r6, r3
 8002912:	9300      	str	r3, [sp, #0]
 8002914:	d111      	bne.n	800293a <log10+0xc2>
 8002916:	f000 fa9f 	bl	8002e58 <__errno>
 800291a:	2322      	movs	r3, #34	; 0x22
 800291c:	6003      	str	r3, [r0, #0]
 800291e:	e011      	b.n	8002944 <log10+0xcc>
 8002920:	4668      	mov	r0, sp
 8002922:	f000 f8b7 	bl	8002a94 <matherr>
 8002926:	2800      	cmp	r0, #0
 8002928:	d0e0      	beq.n	80028ec <log10+0x74>
 800292a:	4812      	ldr	r0, [pc, #72]	; (8002974 <log10+0xfc>)
 800292c:	f000 f8b4 	bl	8002a98 <nan>
 8002930:	ed8d 0b06 	vstr	d0, [sp, #24]
 8002934:	e006      	b.n	8002944 <log10+0xcc>
 8002936:	2302      	movs	r3, #2
 8002938:	9300      	str	r3, [sp, #0]
 800293a:	4668      	mov	r0, sp
 800293c:	f000 f8aa 	bl	8002a94 <matherr>
 8002940:	2800      	cmp	r0, #0
 8002942:	d0e8      	beq.n	8002916 <log10+0x9e>
 8002944:	9b08      	ldr	r3, [sp, #32]
 8002946:	b11b      	cbz	r3, 8002950 <log10+0xd8>
 8002948:	f000 fa86 	bl	8002e58 <__errno>
 800294c:	9b08      	ldr	r3, [sp, #32]
 800294e:	6003      	str	r3, [r0, #0]
 8002950:	ed9d 8b06 	vldr	d8, [sp, #24]
 8002954:	eeb0 0a48 	vmov.f32	s0, s16
 8002958:	eef0 0a68 	vmov.f32	s1, s17
 800295c:	b00b      	add	sp, #44	; 0x2c
 800295e:	ecbd 8b02 	vpop	{d8}
 8002962:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002964:	20000070 	.word	0x20000070
 8002968:	08002f0a 	.word	0x08002f0a
 800296c:	c7efffff 	.word	0xc7efffff
 8002970:	fff00000 	.word	0xfff00000
 8002974:	08002edc 	.word	0x08002edc

08002978 <__ieee754_log10>:
 8002978:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800297c:	ec55 4b10 	vmov	r4, r5, d0
 8002980:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8002984:	ee10 2a10 	vmov	r2, s0
 8002988:	462b      	mov	r3, r5
 800298a:	da30      	bge.n	80029ee <__ieee754_log10+0x76>
 800298c:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
 8002990:	430a      	orrs	r2, r1
 8002992:	d10a      	bne.n	80029aa <__ieee754_log10+0x32>
 8002994:	493c      	ldr	r1, [pc, #240]	; (8002a88 <__ieee754_log10+0x110>)
 8002996:	2200      	movs	r2, #0
 8002998:	2300      	movs	r3, #0
 800299a:	2000      	movs	r0, #0
 800299c:	f7fd ff4a 	bl	8000834 <__aeabi_ddiv>
 80029a0:	ec41 0b10 	vmov	d0, r0, r1
 80029a4:	b003      	add	sp, #12
 80029a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80029aa:	2d00      	cmp	r5, #0
 80029ac:	da09      	bge.n	80029c2 <__ieee754_log10+0x4a>
 80029ae:	ee10 2a10 	vmov	r2, s0
 80029b2:	462b      	mov	r3, r5
 80029b4:	4620      	mov	r0, r4
 80029b6:	4629      	mov	r1, r5
 80029b8:	f7fd fc5e 	bl	8000278 <__aeabi_dsub>
 80029bc:	2200      	movs	r2, #0
 80029be:	2300      	movs	r3, #0
 80029c0:	e7ec      	b.n	800299c <__ieee754_log10+0x24>
 80029c2:	2200      	movs	r2, #0
 80029c4:	4b31      	ldr	r3, [pc, #196]	; (8002a8c <__ieee754_log10+0x114>)
 80029c6:	4629      	mov	r1, r5
 80029c8:	ee10 0a10 	vmov	r0, s0
 80029cc:	f7fd fe08 	bl	80005e0 <__aeabi_dmul>
 80029d0:	f06f 0235 	mvn.w	r2, #53	; 0x35
 80029d4:	4604      	mov	r4, r0
 80029d6:	460d      	mov	r5, r1
 80029d8:	460b      	mov	r3, r1
 80029da:	492d      	ldr	r1, [pc, #180]	; (8002a90 <__ieee754_log10+0x118>)
 80029dc:	428b      	cmp	r3, r1
 80029de:	dd08      	ble.n	80029f2 <__ieee754_log10+0x7a>
 80029e0:	4622      	mov	r2, r4
 80029e2:	462b      	mov	r3, r5
 80029e4:	4620      	mov	r0, r4
 80029e6:	4629      	mov	r1, r5
 80029e8:	f7fd fc48 	bl	800027c <__adddf3>
 80029ec:	e7d8      	b.n	80029a0 <__ieee754_log10+0x28>
 80029ee:	2200      	movs	r2, #0
 80029f0:	e7f3      	b.n	80029da <__ieee754_log10+0x62>
 80029f2:	1518      	asrs	r0, r3, #20
 80029f4:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80029f8:	4410      	add	r0, r2
 80029fa:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80029fe:	4448      	add	r0, r9
 8002a00:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8002a04:	f7fd fd86 	bl	8000514 <__aeabi_i2d>
 8002a08:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8002a0c:	3303      	adds	r3, #3
 8002a0e:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8002a12:	ec45 4b10 	vmov	d0, r4, r5
 8002a16:	4606      	mov	r6, r0
 8002a18:	460f      	mov	r7, r1
 8002a1a:	f000 f845 	bl	8002aa8 <__ieee754_log>
 8002a1e:	a314      	add	r3, pc, #80	; (adr r3, 8002a70 <__ieee754_log10+0xf8>)
 8002a20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a24:	4630      	mov	r0, r6
 8002a26:	4639      	mov	r1, r7
 8002a28:	ed8d 0b00 	vstr	d0, [sp]
 8002a2c:	f7fd fdd8 	bl	80005e0 <__aeabi_dmul>
 8002a30:	ed9d 0b00 	vldr	d0, [sp]
 8002a34:	4604      	mov	r4, r0
 8002a36:	460d      	mov	r5, r1
 8002a38:	a30f      	add	r3, pc, #60	; (adr r3, 8002a78 <__ieee754_log10+0x100>)
 8002a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a3e:	ec51 0b10 	vmov	r0, r1, d0
 8002a42:	f7fd fdcd 	bl	80005e0 <__aeabi_dmul>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4620      	mov	r0, r4
 8002a4c:	4629      	mov	r1, r5
 8002a4e:	f7fd fc15 	bl	800027c <__adddf3>
 8002a52:	a30b      	add	r3, pc, #44	; (adr r3, 8002a80 <__ieee754_log10+0x108>)
 8002a54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a58:	4604      	mov	r4, r0
 8002a5a:	460d      	mov	r5, r1
 8002a5c:	4630      	mov	r0, r6
 8002a5e:	4639      	mov	r1, r7
 8002a60:	f7fd fdbe 	bl	80005e0 <__aeabi_dmul>
 8002a64:	4602      	mov	r2, r0
 8002a66:	460b      	mov	r3, r1
 8002a68:	4620      	mov	r0, r4
 8002a6a:	4629      	mov	r1, r5
 8002a6c:	e7bc      	b.n	80029e8 <__ieee754_log10+0x70>
 8002a6e:	bf00      	nop
 8002a70:	11f12b36 	.word	0x11f12b36
 8002a74:	3d59fef3 	.word	0x3d59fef3
 8002a78:	1526e50e 	.word	0x1526e50e
 8002a7c:	3fdbcb7b 	.word	0x3fdbcb7b
 8002a80:	509f6000 	.word	0x509f6000
 8002a84:	3fd34413 	.word	0x3fd34413
 8002a88:	c3500000 	.word	0xc3500000
 8002a8c:	43500000 	.word	0x43500000
 8002a90:	7fefffff 	.word	0x7fefffff

08002a94 <matherr>:
 8002a94:	2000      	movs	r0, #0
 8002a96:	4770      	bx	lr

08002a98 <nan>:
 8002a98:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8002aa0 <nan+0x8>
 8002a9c:	4770      	bx	lr
 8002a9e:	bf00      	nop
 8002aa0:	00000000 	.word	0x00000000
 8002aa4:	7ff80000 	.word	0x7ff80000

08002aa8 <__ieee754_log>:
 8002aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002aac:	ec51 0b10 	vmov	r0, r1, d0
 8002ab0:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002ab4:	b087      	sub	sp, #28
 8002ab6:	ee10 3a10 	vmov	r3, s0
 8002aba:	460d      	mov	r5, r1
 8002abc:	da27      	bge.n	8002b0e <__ieee754_log+0x66>
 8002abe:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	d10a      	bne.n	8002adc <__ieee754_log+0x34>
 8002ac6:	49cc      	ldr	r1, [pc, #816]	; (8002df8 <__ieee754_log+0x350>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	2300      	movs	r3, #0
 8002acc:	2000      	movs	r0, #0
 8002ace:	f7fd feb1 	bl	8000834 <__aeabi_ddiv>
 8002ad2:	ec41 0b10 	vmov	d0, r0, r1
 8002ad6:	b007      	add	sp, #28
 8002ad8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002adc:	2900      	cmp	r1, #0
 8002ade:	da07      	bge.n	8002af0 <__ieee754_log+0x48>
 8002ae0:	ee10 2a10 	vmov	r2, s0
 8002ae4:	460b      	mov	r3, r1
 8002ae6:	f7fd fbc7 	bl	8000278 <__aeabi_dsub>
 8002aea:	2200      	movs	r2, #0
 8002aec:	2300      	movs	r3, #0
 8002aee:	e7ee      	b.n	8002ace <__ieee754_log+0x26>
 8002af0:	4bc2      	ldr	r3, [pc, #776]	; (8002dfc <__ieee754_log+0x354>)
 8002af2:	2200      	movs	r2, #0
 8002af4:	f7fd fd74 	bl	80005e0 <__aeabi_dmul>
 8002af8:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8002afc:	460d      	mov	r5, r1
 8002afe:	4ac0      	ldr	r2, [pc, #768]	; (8002e00 <__ieee754_log+0x358>)
 8002b00:	4295      	cmp	r5, r2
 8002b02:	dd06      	ble.n	8002b12 <__ieee754_log+0x6a>
 8002b04:	4602      	mov	r2, r0
 8002b06:	460b      	mov	r3, r1
 8002b08:	f7fd fbb8 	bl	800027c <__adddf3>
 8002b0c:	e7e1      	b.n	8002ad2 <__ieee754_log+0x2a>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	e7f5      	b.n	8002afe <__ieee754_log+0x56>
 8002b12:	152c      	asrs	r4, r5, #20
 8002b14:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8002b18:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8002b1c:	441c      	add	r4, r3
 8002b1e:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8002b22:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8002b26:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b2a:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8002b2e:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8002b32:	ea42 0105 	orr.w	r1, r2, r5
 8002b36:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	4bb1      	ldr	r3, [pc, #708]	; (8002e04 <__ieee754_log+0x35c>)
 8002b3e:	f7fd fb9b 	bl	8000278 <__aeabi_dsub>
 8002b42:	1cab      	adds	r3, r5, #2
 8002b44:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	4682      	mov	sl, r0
 8002b4c:	468b      	mov	fp, r1
 8002b4e:	f04f 0200 	mov.w	r2, #0
 8002b52:	dc5b      	bgt.n	8002c0c <__ieee754_log+0x164>
 8002b54:	2300      	movs	r3, #0
 8002b56:	f7fd ffab 	bl	8000ab0 <__aeabi_dcmpeq>
 8002b5a:	b1d0      	cbz	r0, 8002b92 <__ieee754_log+0xea>
 8002b5c:	2c00      	cmp	r4, #0
 8002b5e:	f000 8170 	beq.w	8002e42 <__ieee754_log+0x39a>
 8002b62:	4620      	mov	r0, r4
 8002b64:	f7fd fcd6 	bl	8000514 <__aeabi_i2d>
 8002b68:	a38f      	add	r3, pc, #572	; (adr r3, 8002da8 <__ieee754_log+0x300>)
 8002b6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b6e:	4606      	mov	r6, r0
 8002b70:	460f      	mov	r7, r1
 8002b72:	f7fd fd35 	bl	80005e0 <__aeabi_dmul>
 8002b76:	a38e      	add	r3, pc, #568	; (adr r3, 8002db0 <__ieee754_log+0x308>)
 8002b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b7c:	4604      	mov	r4, r0
 8002b7e:	460d      	mov	r5, r1
 8002b80:	4630      	mov	r0, r6
 8002b82:	4639      	mov	r1, r7
 8002b84:	f7fd fd2c 	bl	80005e0 <__aeabi_dmul>
 8002b88:	4602      	mov	r2, r0
 8002b8a:	460b      	mov	r3, r1
 8002b8c:	4620      	mov	r0, r4
 8002b8e:	4629      	mov	r1, r5
 8002b90:	e7ba      	b.n	8002b08 <__ieee754_log+0x60>
 8002b92:	a389      	add	r3, pc, #548	; (adr r3, 8002db8 <__ieee754_log+0x310>)
 8002b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b98:	4650      	mov	r0, sl
 8002b9a:	4659      	mov	r1, fp
 8002b9c:	f7fd fd20 	bl	80005e0 <__aeabi_dmul>
 8002ba0:	4602      	mov	r2, r0
 8002ba2:	460b      	mov	r3, r1
 8002ba4:	2000      	movs	r0, #0
 8002ba6:	4998      	ldr	r1, [pc, #608]	; (8002e08 <__ieee754_log+0x360>)
 8002ba8:	f7fd fb66 	bl	8000278 <__aeabi_dsub>
 8002bac:	4652      	mov	r2, sl
 8002bae:	4606      	mov	r6, r0
 8002bb0:	460f      	mov	r7, r1
 8002bb2:	465b      	mov	r3, fp
 8002bb4:	4650      	mov	r0, sl
 8002bb6:	4659      	mov	r1, fp
 8002bb8:	f7fd fd12 	bl	80005e0 <__aeabi_dmul>
 8002bbc:	4602      	mov	r2, r0
 8002bbe:	460b      	mov	r3, r1
 8002bc0:	4630      	mov	r0, r6
 8002bc2:	4639      	mov	r1, r7
 8002bc4:	f7fd fd0c 	bl	80005e0 <__aeabi_dmul>
 8002bc8:	4606      	mov	r6, r0
 8002bca:	460f      	mov	r7, r1
 8002bcc:	b934      	cbnz	r4, 8002bdc <__ieee754_log+0x134>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4650      	mov	r0, sl
 8002bd4:	4659      	mov	r1, fp
 8002bd6:	f7fd fb4f 	bl	8000278 <__aeabi_dsub>
 8002bda:	e77a      	b.n	8002ad2 <__ieee754_log+0x2a>
 8002bdc:	4620      	mov	r0, r4
 8002bde:	f7fd fc99 	bl	8000514 <__aeabi_i2d>
 8002be2:	a371      	add	r3, pc, #452	; (adr r3, 8002da8 <__ieee754_log+0x300>)
 8002be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002be8:	4680      	mov	r8, r0
 8002bea:	4689      	mov	r9, r1
 8002bec:	f7fd fcf8 	bl	80005e0 <__aeabi_dmul>
 8002bf0:	a36f      	add	r3, pc, #444	; (adr r3, 8002db0 <__ieee754_log+0x308>)
 8002bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	460d      	mov	r5, r1
 8002bfa:	4640      	mov	r0, r8
 8002bfc:	4649      	mov	r1, r9
 8002bfe:	f7fd fcef 	bl	80005e0 <__aeabi_dmul>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4630      	mov	r0, r6
 8002c08:	4639      	mov	r1, r7
 8002c0a:	e0b2      	b.n	8002d72 <__ieee754_log+0x2ca>
 8002c0c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002c10:	f7fd fb34 	bl	800027c <__adddf3>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4650      	mov	r0, sl
 8002c1a:	4659      	mov	r1, fp
 8002c1c:	f7fd fe0a 	bl	8000834 <__aeabi_ddiv>
 8002c20:	e9cd 0100 	strd	r0, r1, [sp]
 8002c24:	4620      	mov	r0, r4
 8002c26:	f7fd fc75 	bl	8000514 <__aeabi_i2d>
 8002c2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002c2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002c32:	4610      	mov	r0, r2
 8002c34:	4619      	mov	r1, r3
 8002c36:	f7fd fcd3 	bl	80005e0 <__aeabi_dmul>
 8002c3a:	4602      	mov	r2, r0
 8002c3c:	460b      	mov	r3, r1
 8002c3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c42:	f7fd fccd 	bl	80005e0 <__aeabi_dmul>
 8002c46:	a35e      	add	r3, pc, #376	; (adr r3, 8002dc0 <__ieee754_log+0x318>)
 8002c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c4c:	4606      	mov	r6, r0
 8002c4e:	460f      	mov	r7, r1
 8002c50:	f7fd fcc6 	bl	80005e0 <__aeabi_dmul>
 8002c54:	a35c      	add	r3, pc, #368	; (adr r3, 8002dc8 <__ieee754_log+0x320>)
 8002c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c5a:	f7fd fb0f 	bl	800027c <__adddf3>
 8002c5e:	4632      	mov	r2, r6
 8002c60:	463b      	mov	r3, r7
 8002c62:	f7fd fcbd 	bl	80005e0 <__aeabi_dmul>
 8002c66:	a35a      	add	r3, pc, #360	; (adr r3, 8002dd0 <__ieee754_log+0x328>)
 8002c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c6c:	f7fd fb06 	bl	800027c <__adddf3>
 8002c70:	4632      	mov	r2, r6
 8002c72:	463b      	mov	r3, r7
 8002c74:	f7fd fcb4 	bl	80005e0 <__aeabi_dmul>
 8002c78:	a357      	add	r3, pc, #348	; (adr r3, 8002dd8 <__ieee754_log+0x330>)
 8002c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c7e:	f7fd fafd 	bl	800027c <__adddf3>
 8002c82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8002c86:	f7fd fcab 	bl	80005e0 <__aeabi_dmul>
 8002c8a:	a355      	add	r3, pc, #340	; (adr r3, 8002de0 <__ieee754_log+0x338>)
 8002c8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002c94:	4630      	mov	r0, r6
 8002c96:	4639      	mov	r1, r7
 8002c98:	f7fd fca2 	bl	80005e0 <__aeabi_dmul>
 8002c9c:	a352      	add	r3, pc, #328	; (adr r3, 8002de8 <__ieee754_log+0x340>)
 8002c9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ca2:	f7fd faeb 	bl	800027c <__adddf3>
 8002ca6:	4632      	mov	r2, r6
 8002ca8:	463b      	mov	r3, r7
 8002caa:	f7fd fc99 	bl	80005e0 <__aeabi_dmul>
 8002cae:	a350      	add	r3, pc, #320	; (adr r3, 8002df0 <__ieee754_log+0x348>)
 8002cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cb4:	f7fd fae2 	bl	800027c <__adddf3>
 8002cb8:	4632      	mov	r2, r6
 8002cba:	463b      	mov	r3, r7
 8002cbc:	f7fd fc90 	bl	80005e0 <__aeabi_dmul>
 8002cc0:	f5a5 28c2 	sub.w	r8, r5, #397312	; 0x61000
 8002cc4:	4602      	mov	r2, r0
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8002ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8002cd0:	f7fd fad4 	bl	800027c <__adddf3>
 8002cd4:	f2a8 487a 	subw	r8, r8, #1146	; 0x47a
 8002cd8:	3551      	adds	r5, #81	; 0x51
 8002cda:	ea45 0508 	orr.w	r5, r5, r8
 8002cde:	2d00      	cmp	r5, #0
 8002ce0:	4606      	mov	r6, r0
 8002ce2:	460f      	mov	r7, r1
 8002ce4:	dd50      	ble.n	8002d88 <__ieee754_log+0x2e0>
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	4b47      	ldr	r3, [pc, #284]	; (8002e08 <__ieee754_log+0x360>)
 8002cea:	4650      	mov	r0, sl
 8002cec:	4659      	mov	r1, fp
 8002cee:	f7fd fc77 	bl	80005e0 <__aeabi_dmul>
 8002cf2:	4652      	mov	r2, sl
 8002cf4:	465b      	mov	r3, fp
 8002cf6:	f7fd fc73 	bl	80005e0 <__aeabi_dmul>
 8002cfa:	4680      	mov	r8, r0
 8002cfc:	4689      	mov	r9, r1
 8002cfe:	b994      	cbnz	r4, 8002d26 <__ieee754_log+0x27e>
 8002d00:	4602      	mov	r2, r0
 8002d02:	460b      	mov	r3, r1
 8002d04:	4630      	mov	r0, r6
 8002d06:	4639      	mov	r1, r7
 8002d08:	f7fd fab8 	bl	800027c <__adddf3>
 8002d0c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d10:	f7fd fc66 	bl	80005e0 <__aeabi_dmul>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4640      	mov	r0, r8
 8002d1a:	4649      	mov	r1, r9
 8002d1c:	f7fd faac 	bl	8000278 <__aeabi_dsub>
 8002d20:	4602      	mov	r2, r0
 8002d22:	460b      	mov	r3, r1
 8002d24:	e755      	b.n	8002bd2 <__ieee754_log+0x12a>
 8002d26:	a320      	add	r3, pc, #128	; (adr r3, 8002da8 <__ieee754_log+0x300>)
 8002d28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d30:	f7fd fc56 	bl	80005e0 <__aeabi_dmul>
 8002d34:	4642      	mov	r2, r8
 8002d36:	464b      	mov	r3, r9
 8002d38:	4604      	mov	r4, r0
 8002d3a:	460d      	mov	r5, r1
 8002d3c:	4630      	mov	r0, r6
 8002d3e:	4639      	mov	r1, r7
 8002d40:	f7fd fa9c 	bl	800027c <__adddf3>
 8002d44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d48:	f7fd fc4a 	bl	80005e0 <__aeabi_dmul>
 8002d4c:	a318      	add	r3, pc, #96	; (adr r3, 8002db0 <__ieee754_log+0x308>)
 8002d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d52:	4606      	mov	r6, r0
 8002d54:	460f      	mov	r7, r1
 8002d56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002d5a:	f7fd fc41 	bl	80005e0 <__aeabi_dmul>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4630      	mov	r0, r6
 8002d64:	4639      	mov	r1, r7
 8002d66:	f7fd fa89 	bl	800027c <__adddf3>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	460b      	mov	r3, r1
 8002d6e:	4640      	mov	r0, r8
 8002d70:	4649      	mov	r1, r9
 8002d72:	f7fd fa81 	bl	8000278 <__aeabi_dsub>
 8002d76:	4652      	mov	r2, sl
 8002d78:	465b      	mov	r3, fp
 8002d7a:	f7fd fa7d 	bl	8000278 <__aeabi_dsub>
 8002d7e:	4602      	mov	r2, r0
 8002d80:	460b      	mov	r3, r1
 8002d82:	4620      	mov	r0, r4
 8002d84:	4629      	mov	r1, r5
 8002d86:	e726      	b.n	8002bd6 <__ieee754_log+0x12e>
 8002d88:	2c00      	cmp	r4, #0
 8002d8a:	d13f      	bne.n	8002e0c <__ieee754_log+0x364>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4650      	mov	r0, sl
 8002d92:	4659      	mov	r1, fp
 8002d94:	f7fd fa70 	bl	8000278 <__aeabi_dsub>
 8002d98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002d9c:	f7fd fc20 	bl	80005e0 <__aeabi_dmul>
 8002da0:	e7be      	b.n	8002d20 <__ieee754_log+0x278>
 8002da2:	bf00      	nop
 8002da4:	f3af 8000 	nop.w
 8002da8:	fee00000 	.word	0xfee00000
 8002dac:	3fe62e42 	.word	0x3fe62e42
 8002db0:	35793c76 	.word	0x35793c76
 8002db4:	3dea39ef 	.word	0x3dea39ef
 8002db8:	55555555 	.word	0x55555555
 8002dbc:	3fd55555 	.word	0x3fd55555
 8002dc0:	df3e5244 	.word	0xdf3e5244
 8002dc4:	3fc2f112 	.word	0x3fc2f112
 8002dc8:	96cb03de 	.word	0x96cb03de
 8002dcc:	3fc74664 	.word	0x3fc74664
 8002dd0:	94229359 	.word	0x94229359
 8002dd4:	3fd24924 	.word	0x3fd24924
 8002dd8:	55555593 	.word	0x55555593
 8002ddc:	3fe55555 	.word	0x3fe55555
 8002de0:	d078c69f 	.word	0xd078c69f
 8002de4:	3fc39a09 	.word	0x3fc39a09
 8002de8:	1d8e78af 	.word	0x1d8e78af
 8002dec:	3fcc71c5 	.word	0x3fcc71c5
 8002df0:	9997fa04 	.word	0x9997fa04
 8002df4:	3fd99999 	.word	0x3fd99999
 8002df8:	c3500000 	.word	0xc3500000
 8002dfc:	43500000 	.word	0x43500000
 8002e00:	7fefffff 	.word	0x7fefffff
 8002e04:	3ff00000 	.word	0x3ff00000
 8002e08:	3fe00000 	.word	0x3fe00000
 8002e0c:	a30e      	add	r3, pc, #56	; (adr r3, 8002e48 <__ieee754_log+0x3a0>)
 8002e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e12:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e16:	f7fd fbe3 	bl	80005e0 <__aeabi_dmul>
 8002e1a:	4632      	mov	r2, r6
 8002e1c:	463b      	mov	r3, r7
 8002e1e:	4604      	mov	r4, r0
 8002e20:	460d      	mov	r5, r1
 8002e22:	4650      	mov	r0, sl
 8002e24:	4659      	mov	r1, fp
 8002e26:	f7fd fa27 	bl	8000278 <__aeabi_dsub>
 8002e2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002e2e:	f7fd fbd7 	bl	80005e0 <__aeabi_dmul>
 8002e32:	a307      	add	r3, pc, #28	; (adr r3, 8002e50 <__ieee754_log+0x3a8>)
 8002e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e38:	4606      	mov	r6, r0
 8002e3a:	460f      	mov	r7, r1
 8002e3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002e40:	e6dd      	b.n	8002bfe <__ieee754_log+0x156>
 8002e42:	2000      	movs	r0, #0
 8002e44:	2100      	movs	r1, #0
 8002e46:	e644      	b.n	8002ad2 <__ieee754_log+0x2a>
 8002e48:	fee00000 	.word	0xfee00000
 8002e4c:	3fe62e42 	.word	0x3fe62e42
 8002e50:	35793c76 	.word	0x35793c76
 8002e54:	3dea39ef 	.word	0x3dea39ef

08002e58 <__errno>:
 8002e58:	4b01      	ldr	r3, [pc, #4]	; (8002e60 <__errno+0x8>)
 8002e5a:	6818      	ldr	r0, [r3, #0]
 8002e5c:	4770      	bx	lr
 8002e5e:	bf00      	nop
 8002e60:	2000000c 	.word	0x2000000c

08002e64 <_sbrk>:
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <_sbrk+0x14>)
 8002e66:	6819      	ldr	r1, [r3, #0]
 8002e68:	4602      	mov	r2, r0
 8002e6a:	b909      	cbnz	r1, 8002e70 <_sbrk+0xc>
 8002e6c:	4903      	ldr	r1, [pc, #12]	; (8002e7c <_sbrk+0x18>)
 8002e6e:	6019      	str	r1, [r3, #0]
 8002e70:	6818      	ldr	r0, [r3, #0]
 8002e72:	4402      	add	r2, r0
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	4770      	bx	lr
 8002e78:	20000098 	.word	0x20000098
 8002e7c:	20000114 	.word	0x20000114

08002e80 <_init>:
 8002e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e82:	bf00      	nop
 8002e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e86:	bc08      	pop	{r3}
 8002e88:	469e      	mov	lr, r3
 8002e8a:	4770      	bx	lr

08002e8c <_fini>:
 8002e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002e8e:	bf00      	nop
 8002e90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002e92:	bc08      	pop	{r3}
 8002e94:	469e      	mov	lr, r3
 8002e96:	4770      	bx	lr
