
F303_I2C_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dbc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08004f4c  08004f4c  00014f4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fc4  08004fc4  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  08004fc4  08004fc4  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004fc4  08004fc4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fc4  08004fc4  00014fc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004fc8  08004fc8  00014fc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004fcc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000074  08005040  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000160  08005040  00020160  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011ff7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000231d  00000000  00000000  0003209b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000960  00000000  00000000  000343b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000868  00000000  00000000  00034d18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018802  00000000  00000000  00035580  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a610  00000000  00000000  0004dd82  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080b85  00000000  00000000  00058392  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d8f17  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002be4  00000000  00000000  000d8f94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004f34 	.word	0x08004f34

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004f34 	.word	0x08004f34

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_Init+0x28>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_Init+0x28>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f92f 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 f808 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f003 f8c0 	bl	8003d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40022000 	.word	0x40022000

08000bb4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x54>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x58>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f939 	bl	8000e4a <HAL_SYSTICK_Config>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00e      	b.n	8000c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d80a      	bhi.n	8000bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f000 f90f 	bl	8000e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf4:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <HAL_InitTick+0x5c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000008 	.word	0x20000008
 8000c0c:	20000004 	.word	0x20000004
 8000c10:	20000000 	.word	0x20000000

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x20>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x24>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_IncTick+0x24>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000004 	.word	0x20000004
 8000c38:	2000009c 	.word	0x2000009c

08000c3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	2000009c 	.word	0x2000009c

08000c54 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff ffee 	bl	8000c3c <HAL_GetTick>
 8000c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6c:	d005      	beq.n	8000c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_Delay+0x40>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c7a:	bf00      	nop
 8000c7c:	f7ff ffde 	bl	8000c3c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d8f7      	bhi.n	8000c7c <HAL_Delay+0x28>
  {
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000004 	.word	0x20000004

08000c98 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	da0b      	bge.n	8000d28 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <NVIC_SetPriority+0x4c>)
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 030f 	and.w	r3, r3, #15
 8000d1c:	3b04      	subs	r3, #4
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d26:	e009      	b.n	8000d3c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <NVIC_SetPriority+0x50>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f7ff ff8e 	bl	8000cfc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff47 	bl	8000c98 <NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e24:	f7ff ff5c 	bl	8000ce0 <NVIC_GetPriorityGrouping>
 8000e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	6978      	ldr	r0, [r7, #20]
 8000e30:	f7ff ff8e 	bl	8000d50 <NVIC_EncodePriority>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff5d 	bl	8000cfc <NVIC_SetPriority>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffb0 	bl	8000db8 <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e7a:	e14e      	b.n	800111a <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	2101      	movs	r1, #1
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8140 	beq.w	8001114 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x40>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b12      	cmp	r3, #18
 8000ea2:	d123      	bne.n	8000eec <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	6939      	ldr	r1, [r7, #16]
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0203 	and.w	r2, r3, #3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d00b      	beq.n	8000f40 <HAL_GPIO_Init+0xdc>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d007      	beq.n	8000f40 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f34:	2b11      	cmp	r3, #17
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b12      	cmp	r3, #18
 8000f3e:	d130      	bne.n	8000fa2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f76:	2201      	movs	r2, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	f003 0201 	and.w	r2, r3, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 809a 	beq.w	8001114 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe0:	4b55      	ldr	r3, [pc, #340]	; (8001138 <HAL_GPIO_Init+0x2d4>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a54      	ldr	r2, [pc, #336]	; (8001138 <HAL_GPIO_Init+0x2d4>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b52      	ldr	r3, [pc, #328]	; (8001138 <HAL_GPIO_Init+0x2d4>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ff8:	4a50      	ldr	r2, [pc, #320]	; (800113c <HAL_GPIO_Init+0x2d8>)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3302      	adds	r3, #2
 8001000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	220f      	movs	r2, #15
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001022:	d013      	beq.n	800104c <HAL_GPIO_Init+0x1e8>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a46      	ldr	r2, [pc, #280]	; (8001140 <HAL_GPIO_Init+0x2dc>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d00d      	beq.n	8001048 <HAL_GPIO_Init+0x1e4>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a45      	ldr	r2, [pc, #276]	; (8001144 <HAL_GPIO_Init+0x2e0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d007      	beq.n	8001044 <HAL_GPIO_Init+0x1e0>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a44      	ldr	r2, [pc, #272]	; (8001148 <HAL_GPIO_Init+0x2e4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d101      	bne.n	8001040 <HAL_GPIO_Init+0x1dc>
 800103c:	2303      	movs	r3, #3
 800103e:	e006      	b.n	800104e <HAL_GPIO_Init+0x1ea>
 8001040:	2305      	movs	r3, #5
 8001042:	e004      	b.n	800104e <HAL_GPIO_Init+0x1ea>
 8001044:	2302      	movs	r3, #2
 8001046:	e002      	b.n	800104e <HAL_GPIO_Init+0x1ea>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <HAL_GPIO_Init+0x1ea>
 800104c:	2300      	movs	r3, #0
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	f002 0203 	and.w	r2, r2, #3
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	4093      	lsls	r3, r2
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800105e:	4937      	ldr	r1, [pc, #220]	; (800113c <HAL_GPIO_Init+0x2d8>)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106c:	4b37      	ldr	r3, [pc, #220]	; (800114c <HAL_GPIO_Init+0x2e8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001090:	4a2e      	ldr	r2, [pc, #184]	; (800114c <HAL_GPIO_Init+0x2e8>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001096:	4b2d      	ldr	r3, [pc, #180]	; (800114c <HAL_GPIO_Init+0x2e8>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010ba:	4a24      	ldr	r2, [pc, #144]	; (800114c <HAL_GPIO_Init+0x2e8>)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <HAL_GPIO_Init+0x2e8>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010e4:	4a19      	ldr	r2, [pc, #100]	; (800114c <HAL_GPIO_Init+0x2e8>)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_GPIO_Init+0x2e8>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800110e:	4a0f      	ldr	r2, [pc, #60]	; (800114c <HAL_GPIO_Init+0x2e8>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3301      	adds	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	fa22 f303 	lsr.w	r3, r2, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	f47f aea9 	bne.w	8000e7c <HAL_GPIO_Init+0x18>
  }
}
 800112a:	bf00      	nop
 800112c:	371c      	adds	r7, #28
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	40010000 	.word	0x40010000
 8001140:	48000400 	.word	0x48000400
 8001144:	48000800 	.word	0x48000800
 8001148:	48000c00 	.word	0x48000c00
 800114c:	40010400 	.word	0x40010400

08001150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800116c:	e002      	b.n	8001174 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e081      	b.n	8001296 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d106      	bne.n	80011ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f002 fde2 	bl	8003d70 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2224      	movs	r2, #36	; 0x24
 80011b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0201 	bic.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d107      	bne.n	80011fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	e006      	b.n	8001208 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001206:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d104      	bne.n	800121a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001218:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800123c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	ea42 0103 	orr.w	r1, r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	021a      	lsls	r2, r3, #8
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69d9      	ldr	r1, [r3, #28]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1a      	ldr	r2, [r3, #32]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0201 	orr.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2220      	movs	r2, #32
 8001282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	461a      	mov	r2, r3
 80012ac:	460b      	mov	r3, r1
 80012ae:	817b      	strh	r3, [r7, #10]
 80012b0:	4613      	mov	r3, r2
 80012b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b20      	cmp	r3, #32
 80012c2:	f040 80e4 	bne.w	800148e <HAL_I2C_Master_Transmit+0x1ee>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <HAL_I2C_Master_Transmit+0x34>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e0dd      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012dc:	f7ff fcae 	bl	8000c3c <HAL_GetTick>
 80012e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2319      	movs	r3, #25
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f000 f9fc 	bl	80016ec <I2C_WaitOnFlagUntilTimeout>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e0c8      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2221      	movs	r2, #33	; 0x21
 8001302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2210      	movs	r2, #16
 800130a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	893a      	ldrh	r2, [r7, #8]
 800131e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132a:	b29b      	uxth	r3, r3
 800132c:	2bff      	cmp	r3, #255	; 0xff
 800132e:	d90e      	bls.n	800134e <HAL_I2C_Master_Transmit+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800133a:	b2da      	uxtb	r2, r3
 800133c:	8979      	ldrh	r1, [r7, #10]
 800133e:	4b56      	ldr	r3, [pc, #344]	; (8001498 <HAL_I2C_Master_Transmit+0x1f8>)
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f000 fb50 	bl	80019ec <I2C_TransferConfig>
 800134c:	e070      	b.n	8001430 <HAL_I2C_Master_Transmit+0x190>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001352:	b29a      	uxth	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135c:	b2da      	uxtb	r2, r3
 800135e:	8979      	ldrh	r1, [r7, #10]
 8001360:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <HAL_I2C_Master_Transmit+0x1f8>)
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f000 fb3f 	bl	80019ec <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800136e:	e05f      	b.n	8001430 <HAL_I2C_Master_Transmit+0x190>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	6a39      	ldr	r1, [r7, #32]
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f000 f9f3 	bl	8001760 <I2C_WaitOnTXISFlagUntilTimeout>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d007      	beq.n	8001390 <HAL_I2C_Master_Transmit+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	2b04      	cmp	r3, #4
 8001386:	d101      	bne.n	800138c <HAL_I2C_Master_Transmit+0xec>
        {
          return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e081      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
        }
        else
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e07f      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	1c59      	adds	r1, r3, #1
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	6251      	str	r1, [r2, #36]	; 0x24
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	3b01      	subs	r3, #1
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b4:	3b01      	subs	r3, #1
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d135      	bne.n	8001430 <HAL_I2C_Master_Transmit+0x190>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d030      	beq.n	8001430 <HAL_I2C_Master_Transmit+0x190>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	2200      	movs	r2, #0
 80013d6:	2180      	movs	r1, #128	; 0x80
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f000 f987 	bl	80016ec <I2C_WaitOnFlagUntilTimeout>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_I2C_Master_Transmit+0x148>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e053      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	2bff      	cmp	r3, #255	; 0xff
 80013f0:	d90e      	bls.n	8001410 <HAL_I2C_Master_Transmit+0x170>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	22ff      	movs	r2, #255	; 0xff
 80013f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	8979      	ldrh	r1, [r7, #10]
 8001400:	2300      	movs	r3, #0
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 faef 	bl	80019ec <I2C_TransferConfig>
 800140e:	e00f      	b.n	8001430 <HAL_I2C_Master_Transmit+0x190>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001414:	b29a      	uxth	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800141e:	b2da      	uxtb	r2, r3
 8001420:	8979      	ldrh	r1, [r7, #10]
 8001422:	2300      	movs	r3, #0
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 fade 	bl	80019ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001434:	b29b      	uxth	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d19a      	bne.n	8001370 <HAL_I2C_Master_Transmit+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	6a39      	ldr	r1, [r7, #32]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 f9ce 	bl	80017e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_I2C_Master_Transmit+0x1ba>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	2b04      	cmp	r3, #4
 8001450:	d101      	bne.n	8001456 <HAL_I2C_Master_Transmit+0x1b6>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e01c      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
      }
      else
      {
        return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e01a      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2220      	movs	r2, #32
 8001460:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_I2C_Master_Transmit+0x1fc>)
 800146e:	400b      	ands	r3, r1
 8001470:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2220      	movs	r2, #32
 8001476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
  }
  else
  {
    return HAL_BUSY;
 800148e:	2302      	movs	r3, #2
  }
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	80002000 	.word	0x80002000
 800149c:	fe00e800 	.word	0xfe00e800

080014a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	461a      	mov	r2, r3
 80014ac:	460b      	mov	r3, r1
 80014ae:	817b      	strh	r3, [r7, #10]
 80014b0:	4613      	mov	r3, r2
 80014b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b20      	cmp	r3, #32
 80014c2:	f040 80e5 	bne.w	8001690 <HAL_I2C_Master_Receive+0x1f0>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_I2C_Master_Receive+0x34>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e0de      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014dc:	f7ff fbae 	bl	8000c3c <HAL_GetTick>
 80014e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2319      	movs	r3, #25
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 f8fc 	bl	80016ec <I2C_WaitOnFlagUntilTimeout>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e0c9      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2222      	movs	r2, #34	; 0x22
 8001502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2210      	movs	r2, #16
 800150a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	893a      	ldrh	r2, [r7, #8]
 800151e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152a:	b29b      	uxth	r3, r3
 800152c:	2bff      	cmp	r3, #255	; 0xff
 800152e:	d90e      	bls.n	800154e <HAL_I2C_Master_Receive+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	22ff      	movs	r2, #255	; 0xff
 8001534:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153a:	b2da      	uxtb	r2, r3
 800153c:	8979      	ldrh	r1, [r7, #10]
 800153e:	4b57      	ldr	r3, [pc, #348]	; (800169c <HAL_I2C_Master_Receive+0x1fc>)
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 fa50 	bl	80019ec <I2C_TransferConfig>
 800154c:	e071      	b.n	8001632 <HAL_I2C_Master_Receive+0x192>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155c:	b2da      	uxtb	r2, r3
 800155e:	8979      	ldrh	r1, [r7, #10]
 8001560:	4b4e      	ldr	r3, [pc, #312]	; (800169c <HAL_I2C_Master_Receive+0x1fc>)
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 fa3f 	bl	80019ec <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800156e:	e060      	b.n	8001632 <HAL_I2C_Master_Receive+0x192>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	6a39      	ldr	r1, [r7, #32]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 f96f 	bl	8001858 <I2C_WaitOnRXNEFlagUntilTimeout>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d007      	beq.n	8001590 <HAL_I2C_Master_Receive+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	2b04      	cmp	r3, #4
 8001586:	d101      	bne.n	800158c <HAL_I2C_Master_Receive+0xec>
        {
          return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e082      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
        }
        else
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e080      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	1c59      	adds	r1, r3, #1
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	6251      	str	r1, [r2, #36]	; 0x24
 80015a0:	b2c2      	uxtb	r2, r0
 80015a2:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a8:	3b01      	subs	r3, #1
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d135      	bne.n	8001632 <HAL_I2C_Master_Receive+0x192>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d030      	beq.n	8001632 <HAL_I2C_Master_Receive+0x192>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	2200      	movs	r2, #0
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f000 f886 	bl	80016ec <I2C_WaitOnFlagUntilTimeout>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_I2C_Master_Receive+0x14a>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e053      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	2bff      	cmp	r3, #255	; 0xff
 80015f2:	d90e      	bls.n	8001612 <HAL_I2C_Master_Receive+0x172>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	22ff      	movs	r2, #255	; 0xff
 80015f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	8979      	ldrh	r1, [r7, #10]
 8001602:	2300      	movs	r3, #0
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 f9ee 	bl	80019ec <I2C_TransferConfig>
 8001610:	e00f      	b.n	8001632 <HAL_I2C_Master_Receive+0x192>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001616:	b29a      	uxth	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001620:	b2da      	uxtb	r2, r3
 8001622:	8979      	ldrh	r1, [r7, #10]
 8001624:	2300      	movs	r3, #0
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f000 f9dd 	bl	80019ec <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001636:	b29b      	uxth	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d199      	bne.n	8001570 <HAL_I2C_Master_Receive+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	6a39      	ldr	r1, [r7, #32]
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 f8cd 	bl	80017e0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d007      	beq.n	800165c <HAL_I2C_Master_Receive+0x1bc>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001650:	2b04      	cmp	r3, #4
 8001652:	d101      	bne.n	8001658 <HAL_I2C_Master_Receive+0x1b8>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e01c      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
      }
      else
      {
        return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e01a      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2220      	movs	r2, #32
 8001662:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6859      	ldr	r1, [r3, #4]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_I2C_Master_Receive+0x200>)
 8001670:	400b      	ands	r3, r1
 8001672:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2220      	movs	r2, #32
 8001678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	e000      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
  }
  else
  {
    return HAL_BUSY;
 8001690:	2302      	movs	r3, #2
  }
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	80002400 	.word	0x80002400
 80016a0:	fe00e800 	.word	0xfe00e800

080016a4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b083      	sub	sp, #12
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	699b      	ldr	r3, [r3, #24]
 80016b2:	f003 0302 	and.w	r3, r3, #2
 80016b6:	2b02      	cmp	r3, #2
 80016b8:	d103      	bne.n	80016c2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	2200      	movs	r2, #0
 80016c0:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	699b      	ldr	r3, [r3, #24]
 80016c8:	f003 0301 	and.w	r3, r3, #1
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d007      	beq.n	80016e0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	699a      	ldr	r2, [r3, #24]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	619a      	str	r2, [r3, #24]
  }
}
 80016e0:	bf00      	nop
 80016e2:	370c      	adds	r7, #12
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr

080016ec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
 80016f2:	60f8      	str	r0, [r7, #12]
 80016f4:	60b9      	str	r1, [r7, #8]
 80016f6:	603b      	str	r3, [r7, #0]
 80016f8:	4613      	mov	r3, r2
 80016fa:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80016fc:	e01c      	b.n	8001738 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001704:	d018      	beq.n	8001738 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	2b00      	cmp	r3, #0
 800170a:	d007      	beq.n	800171c <I2C_WaitOnFlagUntilTimeout+0x30>
 800170c:	f7ff fa96 	bl	8000c3c <HAL_GetTick>
 8001710:	4602      	mov	r2, r0
 8001712:	69bb      	ldr	r3, [r7, #24]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	683a      	ldr	r2, [r7, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d20d      	bcs.n	8001738 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	2220      	movs	r2, #32
 8001720:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	2200      	movs	r2, #0
 8001728:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	2200      	movs	r2, #0
 8001730:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8001734:	2303      	movs	r3, #3
 8001736:	e00f      	b.n	8001758 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	699a      	ldr	r2, [r3, #24]
 800173e:	68bb      	ldr	r3, [r7, #8]
 8001740:	4013      	ands	r3, r2
 8001742:	68ba      	ldr	r2, [r7, #8]
 8001744:	429a      	cmp	r2, r3
 8001746:	bf0c      	ite	eq
 8001748:	2301      	moveq	r3, #1
 800174a:	2300      	movne	r3, #0
 800174c:	b2db      	uxtb	r3, r3
 800174e:	461a      	mov	r2, r3
 8001750:	79fb      	ldrb	r3, [r7, #7]
 8001752:	429a      	cmp	r2, r3
 8001754:	d0d3      	beq.n	80016fe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001756:	2300      	movs	r3, #0
}
 8001758:	4618      	mov	r0, r3
 800175a:	3710      	adds	r7, #16
 800175c:	46bd      	mov	sp, r7
 800175e:	bd80      	pop	{r7, pc}

08001760 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b084      	sub	sp, #16
 8001764:	af00      	add	r7, sp, #0
 8001766:	60f8      	str	r0, [r7, #12]
 8001768:	60b9      	str	r1, [r7, #8]
 800176a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800176c:	e02c      	b.n	80017c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800176e:	687a      	ldr	r2, [r7, #4]
 8001770:	68b9      	ldr	r1, [r7, #8]
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f000 f8dc 	bl	8001930 <I2C_IsAcknowledgeFailed>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800177e:	2301      	movs	r3, #1
 8001780:	e02a      	b.n	80017d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001782:	68bb      	ldr	r3, [r7, #8]
 8001784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001788:	d01e      	beq.n	80017c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800178a:	68bb      	ldr	r3, [r7, #8]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d007      	beq.n	80017a0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001790:	f7ff fa54 	bl	8000c3c <HAL_GetTick>
 8001794:	4602      	mov	r2, r0
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	1ad3      	subs	r3, r2, r3
 800179a:	68ba      	ldr	r2, [r7, #8]
 800179c:	429a      	cmp	r2, r3
 800179e:	d213      	bcs.n	80017c8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017a4:	f043 0220 	orr.w	r2, r3, #32
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80017ac:	68fb      	ldr	r3, [r7, #12]
 80017ae:	2220      	movs	r2, #32
 80017b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2200      	movs	r2, #0
 80017c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 80017c4:	2303      	movs	r3, #3
 80017c6:	e007      	b.n	80017d8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	699b      	ldr	r3, [r3, #24]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d1cb      	bne.n	800176e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80017d6:	2300      	movs	r3, #0
}
 80017d8:	4618      	mov	r0, r3
 80017da:	3710      	adds	r7, #16
 80017dc:	46bd      	mov	sp, r7
 80017de:	bd80      	pop	{r7, pc}

080017e0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017e0:	b580      	push	{r7, lr}
 80017e2:	b084      	sub	sp, #16
 80017e4:	af00      	add	r7, sp, #0
 80017e6:	60f8      	str	r0, [r7, #12]
 80017e8:	60b9      	str	r1, [r7, #8]
 80017ea:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80017ec:	e028      	b.n	8001840 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017ee:	687a      	ldr	r2, [r7, #4]
 80017f0:	68b9      	ldr	r1, [r7, #8]
 80017f2:	68f8      	ldr	r0, [r7, #12]
 80017f4:	f000 f89c 	bl	8001930 <I2C_IsAcknowledgeFailed>
 80017f8:	4603      	mov	r3, r0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d001      	beq.n	8001802 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e026      	b.n	8001850 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d007      	beq.n	8001818 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001808:	f7ff fa18 	bl	8000c3c <HAL_GetTick>
 800180c:	4602      	mov	r2, r0
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	1ad3      	subs	r3, r2, r3
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	429a      	cmp	r2, r3
 8001816:	d213      	bcs.n	8001840 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800181c:	f043 0220 	orr.w	r2, r3, #32
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	2220      	movs	r2, #32
 8001828:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	2200      	movs	r2, #0
 8001830:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	2200      	movs	r2, #0
 8001838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 800183c:	2303      	movs	r3, #3
 800183e:	e007      	b.n	8001850 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001840:	68fb      	ldr	r3, [r7, #12]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	699b      	ldr	r3, [r3, #24]
 8001846:	f003 0320 	and.w	r3, r3, #32
 800184a:	2b20      	cmp	r3, #32
 800184c:	d1cf      	bne.n	80017ee <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800184e:	2300      	movs	r3, #0
}
 8001850:	4618      	mov	r0, r3
 8001852:	3710      	adds	r7, #16
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}

08001858 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b084      	sub	sp, #16
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001864:	e055      	b.n	8001912 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001866:	687a      	ldr	r2, [r7, #4]
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f000 f860 	bl	8001930 <I2C_IsAcknowledgeFailed>
 8001870:	4603      	mov	r3, r0
 8001872:	2b00      	cmp	r3, #0
 8001874:	d001      	beq.n	800187a <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e053      	b.n	8001922 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	699b      	ldr	r3, [r3, #24]
 8001880:	f003 0320 	and.w	r3, r3, #32
 8001884:	2b20      	cmp	r3, #32
 8001886:	d129      	bne.n	80018dc <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	699b      	ldr	r3, [r3, #24]
 800188e:	f003 0304 	and.w	r3, r3, #4
 8001892:	2b04      	cmp	r3, #4
 8001894:	d105      	bne.n	80018a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e03f      	b.n	8001922 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	681b      	ldr	r3, [r3, #0]
 80018a6:	2220      	movs	r2, #32
 80018a8:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	6859      	ldr	r1, [r3, #4]
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	4b1d      	ldr	r3, [pc, #116]	; (800192c <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 80018b6:	400b      	ands	r3, r1
 80018b8:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	2200      	movs	r2, #0
 80018be:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	2220      	movs	r2, #32
 80018c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	2200      	movs	r2, #0
 80018cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	2200      	movs	r2, #0
 80018d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80018d8:	2301      	movs	r3, #1
 80018da:	e022      	b.n	8001922 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d007      	beq.n	80018f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 80018e2:	f7ff f9ab 	bl	8000c3c <HAL_GetTick>
 80018e6:	4602      	mov	r2, r0
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	1ad3      	subs	r3, r2, r3
 80018ec:	68ba      	ldr	r2, [r7, #8]
 80018ee:	429a      	cmp	r2, r3
 80018f0:	d20f      	bcs.n	8001912 <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018f6:	f043 0220 	orr.w	r2, r3, #32
 80018fa:	68fb      	ldr	r3, [r7, #12]
 80018fc:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2220      	movs	r2, #32
 8001902:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e007      	b.n	8001922 <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0304 	and.w	r3, r3, #4
 800191c:	2b04      	cmp	r3, #4
 800191e:	d1a2      	bne.n	8001866 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001920:	2300      	movs	r3, #0
}
 8001922:	4618      	mov	r0, r3
 8001924:	3710      	adds	r7, #16
 8001926:	46bd      	mov	sp, r7
 8001928:	bd80      	pop	{r7, pc}
 800192a:	bf00      	nop
 800192c:	fe00e800 	.word	0xfe00e800

08001930 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	60b9      	str	r1, [r7, #8]
 800193a:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	699b      	ldr	r3, [r3, #24]
 8001942:	f003 0310 	and.w	r3, r3, #16
 8001946:	2b10      	cmp	r3, #16
 8001948:	d148      	bne.n	80019dc <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800194a:	e01c      	b.n	8001986 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001952:	d018      	beq.n	8001986 <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d007      	beq.n	800196a <I2C_IsAcknowledgeFailed+0x3a>
 800195a:	f7ff f96f 	bl	8000c3c <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	68ba      	ldr	r2, [r7, #8]
 8001966:	429a      	cmp	r2, r3
 8001968:	d20d      	bcs.n	8001986 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	2220      	movs	r2, #32
 800196e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	2200      	movs	r2, #0
 8001976:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	2200      	movs	r2, #0
 800197e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8001982:	2303      	movs	r3, #3
 8001984:	e02b      	b.n	80019de <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	699b      	ldr	r3, [r3, #24]
 800198c:	f003 0320 	and.w	r3, r3, #32
 8001990:	2b20      	cmp	r3, #32
 8001992:	d1db      	bne.n	800194c <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2210      	movs	r2, #16
 800199a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800199c:	68fb      	ldr	r3, [r7, #12]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	2220      	movs	r2, #32
 80019a2:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80019a4:	68f8      	ldr	r0, [r7, #12]
 80019a6:	f7ff fe7d 	bl	80016a4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	6859      	ldr	r1, [r3, #4]
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b0c      	ldr	r3, [pc, #48]	; (80019e8 <I2C_IsAcknowledgeFailed+0xb8>)
 80019b6:	400b      	ands	r3, r1
 80019b8:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	2204      	movs	r2, #4
 80019be:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	2220      	movs	r2, #32
 80019c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2200      	movs	r2, #0
 80019d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e000      	b.n	80019de <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 80019dc:	2300      	movs	r3, #0
}
 80019de:	4618      	mov	r0, r3
 80019e0:	3710      	adds	r7, #16
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}
 80019e6:	bf00      	nop
 80019e8:	fe00e800 	.word	0xfe00e800

080019ec <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b085      	sub	sp, #20
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	607b      	str	r3, [r7, #4]
 80019f6:	460b      	mov	r3, r1
 80019f8:	817b      	strh	r3, [r7, #10]
 80019fa:	4613      	mov	r3, r2
 80019fc:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	685a      	ldr	r2, [r3, #4]
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	0d5b      	lsrs	r3, r3, #21
 8001a08:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001a0c:	4b0d      	ldr	r3, [pc, #52]	; (8001a44 <I2C_TransferConfig+0x58>)
 8001a0e:	430b      	orrs	r3, r1
 8001a10:	43db      	mvns	r3, r3
 8001a12:	ea02 0103 	and.w	r1, r2, r3
 8001a16:	897b      	ldrh	r3, [r7, #10]
 8001a18:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001a1c:	7a7b      	ldrb	r3, [r7, #9]
 8001a1e:	041b      	lsls	r3, r3, #16
 8001a20:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001a24:	431a      	orrs	r2, r3
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	431a      	orrs	r2, r3
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	68fb      	ldr	r3, [r7, #12]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	430a      	orrs	r2, r1
 8001a34:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001a36:	bf00      	nop
 8001a38:	3714      	adds	r7, #20
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	03ff63ff 	.word	0x03ff63ff

08001a48 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a58:	b2db      	uxtb	r3, r3
 8001a5a:	2b20      	cmp	r3, #32
 8001a5c:	d138      	bne.n	8001ad0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001a68:	2302      	movs	r3, #2
 8001a6a:	e032      	b.n	8001ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	2201      	movs	r2, #1
 8001a70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	2224      	movs	r2, #36	; 0x24
 8001a78:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	681a      	ldr	r2, [r3, #0]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f022 0201 	bic.w	r2, r2, #1
 8001a8a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a9a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6819      	ldr	r1, [r3, #0]
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	683a      	ldr	r2, [r7, #0]
 8001aa8:	430a      	orrs	r2, r1
 8001aaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	681a      	ldr	r2, [r3, #0]
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f042 0201 	orr.w	r2, r2, #1
 8001aba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	2220      	movs	r2, #32
 8001ac0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001acc:	2300      	movs	r3, #0
 8001ace:	e000      	b.n	8001ad2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001ad0:	2302      	movs	r3, #2
  }
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	370c      	adds	r7, #12
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001adc:	4770      	bx	lr

08001ade <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001ade:	b480      	push	{r7}
 8001ae0:	b085      	sub	sp, #20
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b20      	cmp	r3, #32
 8001af6:	d139      	bne.n	8001b6c <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001afe:	2b01      	cmp	r3, #1
 8001b00:	d101      	bne.n	8001b06 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8001b02:	2302      	movs	r3, #2
 8001b04:	e033      	b.n	8001b6e <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2201      	movs	r2, #1
 8001b0a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2224      	movs	r2, #36	; 0x24
 8001b12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f022 0201 	bic.w	r2, r2, #1
 8001b24:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b34:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	021b      	lsls	r3, r3, #8
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	68fa      	ldr	r2, [r7, #12]
 8001b46:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	f042 0201 	orr.w	r2, r2, #1
 8001b56:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2200      	movs	r2, #0
 8001b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	e000      	b.n	8001b6e <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001b6c:	2302      	movs	r3, #2
  }
}
 8001b6e:	4618      	mov	r0, r3
 8001b70:	3714      	adds	r7, #20
 8001b72:	46bd      	mov	sp, r7
 8001b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b78:	4770      	bx	lr
	...

08001b7c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b82:	af00      	add	r7, sp, #0
 8001b84:	1d3b      	adds	r3, r7, #4
 8001b86:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b88:	1d3b      	adds	r3, r7, #4
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d102      	bne.n	8001b96 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b90:	2301      	movs	r3, #1
 8001b92:	f000 beda 	b.w	800294a <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b96:	1d3b      	adds	r3, r7, #4
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	f000 816e 	beq.w	8001e82 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001ba6:	4bb5      	ldr	r3, [pc, #724]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	2b04      	cmp	r3, #4
 8001bb0:	d00c      	beq.n	8001bcc <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001bb2:	4bb2      	ldr	r3, [pc, #712]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001bb4:	685b      	ldr	r3, [r3, #4]
 8001bb6:	f003 030c 	and.w	r3, r3, #12
 8001bba:	2b08      	cmp	r3, #8
 8001bbc:	d15a      	bne.n	8001c74 <HAL_RCC_OscConfig+0xf8>
 8001bbe:	4baf      	ldr	r3, [pc, #700]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001bc6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001bca:	d153      	bne.n	8001c74 <HAL_RCC_OscConfig+0xf8>
 8001bcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001bd0:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd4:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001bd8:	fa93 f3a3 	rbit	r3, r3
 8001bdc:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001be0:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001be4:	fab3 f383 	clz	r3, r3
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	095b      	lsrs	r3, r3, #5
 8001bec:	b2db      	uxtb	r3, r3
 8001bee:	f043 0301 	orr.w	r3, r3, #1
 8001bf2:	b2db      	uxtb	r3, r3
 8001bf4:	2b01      	cmp	r3, #1
 8001bf6:	d102      	bne.n	8001bfe <HAL_RCC_OscConfig+0x82>
 8001bf8:	4ba0      	ldr	r3, [pc, #640]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	e015      	b.n	8001c2a <HAL_RCC_OscConfig+0xae>
 8001bfe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c02:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c06:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001c0a:	fa93 f3a3 	rbit	r3, r3
 8001c0e:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001c12:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001c16:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001c1a:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001c1e:	fa93 f3a3 	rbit	r3, r3
 8001c22:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001c26:	4b95      	ldr	r3, [pc, #596]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c2a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001c2e:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001c32:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001c36:	fa92 f2a2 	rbit	r2, r2
 8001c3a:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001c3e:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001c42:	fab2 f282 	clz	r2, r2
 8001c46:	b252      	sxtb	r2, r2
 8001c48:	f042 0220 	orr.w	r2, r2, #32
 8001c4c:	b252      	sxtb	r2, r2
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	f002 021f 	and.w	r2, r2, #31
 8001c54:	2101      	movs	r1, #1
 8001c56:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f000 810f 	beq.w	8001e80 <HAL_RCC_OscConfig+0x304>
 8001c62:	1d3b      	adds	r3, r7, #4
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	f040 8109 	bne.w	8001e80 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f000 be6b 	b.w	800294a <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c74:	1d3b      	adds	r3, r7, #4
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	685b      	ldr	r3, [r3, #4]
 8001c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c7e:	d106      	bne.n	8001c8e <HAL_RCC_OscConfig+0x112>
 8001c80:	4b7e      	ldr	r3, [pc, #504]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4a7d      	ldr	r2, [pc, #500]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001c86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c8a:	6013      	str	r3, [r2, #0]
 8001c8c:	e030      	b.n	8001cf0 <HAL_RCC_OscConfig+0x174>
 8001c8e:	1d3b      	adds	r3, r7, #4
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	685b      	ldr	r3, [r3, #4]
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d10c      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x136>
 8001c98:	4b78      	ldr	r3, [pc, #480]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4a77      	ldr	r2, [pc, #476]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001c9e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ca2:	6013      	str	r3, [r2, #0]
 8001ca4:	4b75      	ldr	r3, [pc, #468]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a74      	ldr	r2, [pc, #464]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001caa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cae:	6013      	str	r3, [r2, #0]
 8001cb0:	e01e      	b.n	8001cf0 <HAL_RCC_OscConfig+0x174>
 8001cb2:	1d3b      	adds	r3, r7, #4
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	685b      	ldr	r3, [r3, #4]
 8001cb8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001cbc:	d10c      	bne.n	8001cd8 <HAL_RCC_OscConfig+0x15c>
 8001cbe:	4b6f      	ldr	r3, [pc, #444]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a6e      	ldr	r2, [pc, #440]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001cc4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001cc8:	6013      	str	r3, [r2, #0]
 8001cca:	4b6c      	ldr	r3, [pc, #432]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4a6b      	ldr	r2, [pc, #428]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001cd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001cd4:	6013      	str	r3, [r2, #0]
 8001cd6:	e00b      	b.n	8001cf0 <HAL_RCC_OscConfig+0x174>
 8001cd8:	4b68      	ldr	r3, [pc, #416]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4a67      	ldr	r2, [pc, #412]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001cde:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ce2:	6013      	str	r3, [r2, #0]
 8001ce4:	4b65      	ldr	r3, [pc, #404]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	4a64      	ldr	r2, [pc, #400]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001cea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001cee:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001cf0:	4b62      	ldr	r3, [pc, #392]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf4:	f023 020f 	bic.w	r2, r3, #15
 8001cf8:	1d3b      	adds	r3, r7, #4
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	689b      	ldr	r3, [r3, #8]
 8001cfe:	495f      	ldr	r1, [pc, #380]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d04:	1d3b      	adds	r3, r7, #4
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d05a      	beq.n	8001dc4 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d0e:	f7fe ff95 	bl	8000c3c <HAL_GetTick>
 8001d12:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d16:	e00a      	b.n	8001d2e <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d18:	f7fe ff90 	bl	8000c3c <HAL_GetTick>
 8001d1c:	4602      	mov	r2, r0
 8001d1e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d22:	1ad3      	subs	r3, r2, r3
 8001d24:	2b64      	cmp	r3, #100	; 0x64
 8001d26:	d902      	bls.n	8001d2e <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001d28:	2303      	movs	r3, #3
 8001d2a:	f000 be0e 	b.w	800294a <HAL_RCC_OscConfig+0xdce>
 8001d2e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d32:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001d3a:	fa93 f3a3 	rbit	r3, r3
 8001d3e:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8001d42:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d46:	fab3 f383 	clz	r3, r3
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	095b      	lsrs	r3, r3, #5
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	f043 0301 	orr.w	r3, r3, #1
 8001d54:	b2db      	uxtb	r3, r3
 8001d56:	2b01      	cmp	r3, #1
 8001d58:	d102      	bne.n	8001d60 <HAL_RCC_OscConfig+0x1e4>
 8001d5a:	4b48      	ldr	r3, [pc, #288]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	e015      	b.n	8001d8c <HAL_RCC_OscConfig+0x210>
 8001d60:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d64:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001d6c:	fa93 f3a3 	rbit	r3, r3
 8001d70:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001d74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d78:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d7c:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001d80:	fa93 f3a3 	rbit	r3, r3
 8001d84:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d88:	4b3c      	ldr	r3, [pc, #240]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001d8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d8c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d90:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001d94:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001d98:	fa92 f2a2 	rbit	r2, r2
 8001d9c:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001da0:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001da4:	fab2 f282 	clz	r2, r2
 8001da8:	b252      	sxtb	r2, r2
 8001daa:	f042 0220 	orr.w	r2, r2, #32
 8001dae:	b252      	sxtb	r2, r2
 8001db0:	b2d2      	uxtb	r2, r2
 8001db2:	f002 021f 	and.w	r2, r2, #31
 8001db6:	2101      	movs	r1, #1
 8001db8:	fa01 f202 	lsl.w	r2, r1, r2
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	d0aa      	beq.n	8001d18 <HAL_RCC_OscConfig+0x19c>
 8001dc2:	e05e      	b.n	8001e82 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc4:	f7fe ff3a 	bl	8000c3c <HAL_GetTick>
 8001dc8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dcc:	e00a      	b.n	8001de4 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dce:	f7fe ff35 	bl	8000c3c <HAL_GetTick>
 8001dd2:	4602      	mov	r2, r0
 8001dd4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d902      	bls.n	8001de4 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	f000 bdb3 	b.w	800294a <HAL_RCC_OscConfig+0xdce>
 8001de4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001de8:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001df0:	fa93 f3a3 	rbit	r3, r3
 8001df4:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001df8:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001dfc:	fab3 f383 	clz	r3, r3
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	095b      	lsrs	r3, r3, #5
 8001e04:	b2db      	uxtb	r3, r3
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	b2db      	uxtb	r3, r3
 8001e0c:	2b01      	cmp	r3, #1
 8001e0e:	d102      	bne.n	8001e16 <HAL_RCC_OscConfig+0x29a>
 8001e10:	4b1a      	ldr	r3, [pc, #104]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	e015      	b.n	8001e42 <HAL_RCC_OscConfig+0x2c6>
 8001e16:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e1a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001e22:	fa93 f3a3 	rbit	r3, r3
 8001e26:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001e2a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e2e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001e32:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001e36:	fa93 f3a3 	rbit	r3, r3
 8001e3a:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001e3e:	4b0f      	ldr	r3, [pc, #60]	; (8001e7c <HAL_RCC_OscConfig+0x300>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e46:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001e4a:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001e4e:	fa92 f2a2 	rbit	r2, r2
 8001e52:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001e56:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001e5a:	fab2 f282 	clz	r2, r2
 8001e5e:	b252      	sxtb	r2, r2
 8001e60:	f042 0220 	orr.w	r2, r2, #32
 8001e64:	b252      	sxtb	r2, r2
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	f002 021f 	and.w	r2, r2, #31
 8001e6c:	2101      	movs	r1, #1
 8001e6e:	fa01 f202 	lsl.w	r2, r1, r2
 8001e72:	4013      	ands	r3, r2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d1aa      	bne.n	8001dce <HAL_RCC_OscConfig+0x252>
 8001e78:	e003      	b.n	8001e82 <HAL_RCC_OscConfig+0x306>
 8001e7a:	bf00      	nop
 8001e7c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e80:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e82:	1d3b      	adds	r3, r7, #4
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	f003 0302 	and.w	r3, r3, #2
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	f000 8170 	beq.w	8002172 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e92:	4bd0      	ldr	r3, [pc, #832]	; (80021d4 <HAL_RCC_OscConfig+0x658>)
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	f003 030c 	and.w	r3, r3, #12
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d00b      	beq.n	8001eb6 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e9e:	4bcd      	ldr	r3, [pc, #820]	; (80021d4 <HAL_RCC_OscConfig+0x658>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f003 030c 	and.w	r3, r3, #12
 8001ea6:	2b08      	cmp	r3, #8
 8001ea8:	d16d      	bne.n	8001f86 <HAL_RCC_OscConfig+0x40a>
 8001eaa:	4bca      	ldr	r3, [pc, #808]	; (80021d4 <HAL_RCC_OscConfig+0x658>)
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d167      	bne.n	8001f86 <HAL_RCC_OscConfig+0x40a>
 8001eb6:	2302      	movs	r3, #2
 8001eb8:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ebc:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001ec0:	fa93 f3a3 	rbit	r3, r3
 8001ec4:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001ec8:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ecc:	fab3 f383 	clz	r3, r3
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	095b      	lsrs	r3, r3, #5
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	f043 0301 	orr.w	r3, r3, #1
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d102      	bne.n	8001ee6 <HAL_RCC_OscConfig+0x36a>
 8001ee0:	4bbc      	ldr	r3, [pc, #752]	; (80021d4 <HAL_RCC_OscConfig+0x658>)
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	e013      	b.n	8001f0e <HAL_RCC_OscConfig+0x392>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eec:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001ef0:	fa93 f3a3 	rbit	r3, r3
 8001ef4:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001ef8:	2302      	movs	r3, #2
 8001efa:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001efe:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001f0a:	4bb2      	ldr	r3, [pc, #712]	; (80021d4 <HAL_RCC_OscConfig+0x658>)
 8001f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0e:	2202      	movs	r2, #2
 8001f10:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001f14:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001f18:	fa92 f2a2 	rbit	r2, r2
 8001f1c:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001f20:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001f24:	fab2 f282 	clz	r2, r2
 8001f28:	b252      	sxtb	r2, r2
 8001f2a:	f042 0220 	orr.w	r2, r2, #32
 8001f2e:	b252      	sxtb	r2, r2
 8001f30:	b2d2      	uxtb	r2, r2
 8001f32:	f002 021f 	and.w	r2, r2, #31
 8001f36:	2101      	movs	r1, #1
 8001f38:	fa01 f202 	lsl.w	r2, r1, r2
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d007      	beq.n	8001f52 <HAL_RCC_OscConfig+0x3d6>
 8001f42:	1d3b      	adds	r3, r7, #4
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	691b      	ldr	r3, [r3, #16]
 8001f48:	2b01      	cmp	r3, #1
 8001f4a:	d002      	beq.n	8001f52 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	f000 bcfc 	b.w	800294a <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f52:	4ba0      	ldr	r3, [pc, #640]	; (80021d4 <HAL_RCC_OscConfig+0x658>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f5a:	1d3b      	adds	r3, r7, #4
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	6959      	ldr	r1, [r3, #20]
 8001f60:	23f8      	movs	r3, #248	; 0xf8
 8001f62:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f66:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001f6a:	fa93 f3a3 	rbit	r3, r3
 8001f6e:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001f72:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001f76:	fab3 f383 	clz	r3, r3
 8001f7a:	fa01 f303 	lsl.w	r3, r1, r3
 8001f7e:	4995      	ldr	r1, [pc, #596]	; (80021d4 <HAL_RCC_OscConfig+0x658>)
 8001f80:	4313      	orrs	r3, r2
 8001f82:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f84:	e0f5      	b.n	8002172 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f86:	1d3b      	adds	r3, r7, #4
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	f000 8085 	beq.w	800209c <HAL_RCC_OscConfig+0x520>
 8001f92:	2301      	movs	r3, #1
 8001f94:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f98:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001f9c:	fa93 f3a3 	rbit	r3, r3
 8001fa0:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001fa4:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001fa8:	fab3 f383 	clz	r3, r3
 8001fac:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001fb0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001fb4:	009b      	lsls	r3, r3, #2
 8001fb6:	461a      	mov	r2, r3
 8001fb8:	2301      	movs	r3, #1
 8001fba:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fbc:	f7fe fe3e 	bl	8000c3c <HAL_GetTick>
 8001fc0:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fc4:	e00a      	b.n	8001fdc <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001fc6:	f7fe fe39 	bl	8000c3c <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001fd0:	1ad3      	subs	r3, r2, r3
 8001fd2:	2b02      	cmp	r3, #2
 8001fd4:	d902      	bls.n	8001fdc <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8001fd6:	2303      	movs	r3, #3
 8001fd8:	f000 bcb7 	b.w	800294a <HAL_RCC_OscConfig+0xdce>
 8001fdc:	2302      	movs	r3, #2
 8001fde:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fe2:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001fe6:	fa93 f3a3 	rbit	r3, r3
 8001fea:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8001fee:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ff2:	fab3 f383 	clz	r3, r3
 8001ff6:	b2db      	uxtb	r3, r3
 8001ff8:	095b      	lsrs	r3, r3, #5
 8001ffa:	b2db      	uxtb	r3, r3
 8001ffc:	f043 0301 	orr.w	r3, r3, #1
 8002000:	b2db      	uxtb	r3, r3
 8002002:	2b01      	cmp	r3, #1
 8002004:	d102      	bne.n	800200c <HAL_RCC_OscConfig+0x490>
 8002006:	4b73      	ldr	r3, [pc, #460]	; (80021d4 <HAL_RCC_OscConfig+0x658>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	e013      	b.n	8002034 <HAL_RCC_OscConfig+0x4b8>
 800200c:	2302      	movs	r3, #2
 800200e:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002012:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002016:	fa93 f3a3 	rbit	r3, r3
 800201a:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800201e:	2302      	movs	r3, #2
 8002020:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002024:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002028:	fa93 f3a3 	rbit	r3, r3
 800202c:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8002030:	4b68      	ldr	r3, [pc, #416]	; (80021d4 <HAL_RCC_OscConfig+0x658>)
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	2202      	movs	r2, #2
 8002036:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800203a:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800203e:	fa92 f2a2 	rbit	r2, r2
 8002042:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8002046:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 800204a:	fab2 f282 	clz	r2, r2
 800204e:	b252      	sxtb	r2, r2
 8002050:	f042 0220 	orr.w	r2, r2, #32
 8002054:	b252      	sxtb	r2, r2
 8002056:	b2d2      	uxtb	r2, r2
 8002058:	f002 021f 	and.w	r2, r2, #31
 800205c:	2101      	movs	r1, #1
 800205e:	fa01 f202 	lsl.w	r2, r1, r2
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0ae      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002068:	4b5a      	ldr	r3, [pc, #360]	; (80021d4 <HAL_RCC_OscConfig+0x658>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002070:	1d3b      	adds	r3, r7, #4
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	6959      	ldr	r1, [r3, #20]
 8002076:	23f8      	movs	r3, #248	; 0xf8
 8002078:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207c:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8002080:	fa93 f3a3 	rbit	r3, r3
 8002084:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8002088:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 800208c:	fab3 f383 	clz	r3, r3
 8002090:	fa01 f303 	lsl.w	r3, r1, r3
 8002094:	494f      	ldr	r1, [pc, #316]	; (80021d4 <HAL_RCC_OscConfig+0x658>)
 8002096:	4313      	orrs	r3, r2
 8002098:	600b      	str	r3, [r1, #0]
 800209a:	e06a      	b.n	8002172 <HAL_RCC_OscConfig+0x5f6>
 800209c:	2301      	movs	r3, #1
 800209e:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a2:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80020a6:	fa93 f3a3 	rbit	r3, r3
 80020aa:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 80020ae:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80020ba:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	461a      	mov	r2, r3
 80020c2:	2300      	movs	r3, #0
 80020c4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c6:	f7fe fdb9 	bl	8000c3c <HAL_GetTick>
 80020ca:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020ce:	e00a      	b.n	80020e6 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020d0:	f7fe fdb4 	bl	8000c3c <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d902      	bls.n	80020e6 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	f000 bc32 	b.w	800294a <HAL_RCC_OscConfig+0xdce>
 80020e6:	2302      	movs	r3, #2
 80020e8:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ec:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80020f0:	fa93 f3a3 	rbit	r3, r3
 80020f4:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80020f8:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020fc:	fab3 f383 	clz	r3, r3
 8002100:	b2db      	uxtb	r3, r3
 8002102:	095b      	lsrs	r3, r3, #5
 8002104:	b2db      	uxtb	r3, r3
 8002106:	f043 0301 	orr.w	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b01      	cmp	r3, #1
 800210e:	d102      	bne.n	8002116 <HAL_RCC_OscConfig+0x59a>
 8002110:	4b30      	ldr	r3, [pc, #192]	; (80021d4 <HAL_RCC_OscConfig+0x658>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	e013      	b.n	800213e <HAL_RCC_OscConfig+0x5c2>
 8002116:	2302      	movs	r3, #2
 8002118:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211c:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8002120:	fa93 f3a3 	rbit	r3, r3
 8002124:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002128:	2302      	movs	r3, #2
 800212a:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800212e:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8002132:	fa93 f3a3 	rbit	r3, r3
 8002136:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800213a:	4b26      	ldr	r3, [pc, #152]	; (80021d4 <HAL_RCC_OscConfig+0x658>)
 800213c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800213e:	2202      	movs	r2, #2
 8002140:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002144:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002148:	fa92 f2a2 	rbit	r2, r2
 800214c:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 8002150:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002154:	fab2 f282 	clz	r2, r2
 8002158:	b252      	sxtb	r2, r2
 800215a:	f042 0220 	orr.w	r2, r2, #32
 800215e:	b252      	sxtb	r2, r2
 8002160:	b2d2      	uxtb	r2, r2
 8002162:	f002 021f 	and.w	r2, r2, #31
 8002166:	2101      	movs	r1, #1
 8002168:	fa01 f202 	lsl.w	r2, r1, r2
 800216c:	4013      	ands	r3, r2
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1ae      	bne.n	80020d0 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002172:	1d3b      	adds	r3, r7, #4
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	f003 0308 	and.w	r3, r3, #8
 800217c:	2b00      	cmp	r3, #0
 800217e:	f000 80d8 	beq.w	8002332 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002182:	1d3b      	adds	r3, r7, #4
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	699b      	ldr	r3, [r3, #24]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d067      	beq.n	800225c <HAL_RCC_OscConfig+0x6e0>
 800218c:	2301      	movs	r3, #1
 800218e:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002192:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002196:	fa93 f3a3 	rbit	r3, r3
 800219a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 800219e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021a2:	fab3 f383 	clz	r3, r3
 80021a6:	461a      	mov	r2, r3
 80021a8:	4b0b      	ldr	r3, [pc, #44]	; (80021d8 <HAL_RCC_OscConfig+0x65c>)
 80021aa:	4413      	add	r3, r2
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	461a      	mov	r2, r3
 80021b0:	2301      	movs	r3, #1
 80021b2:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021b4:	f7fe fd42 	bl	8000c3c <HAL_GetTick>
 80021b8:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021bc:	e00e      	b.n	80021dc <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80021be:	f7fe fd3d 	bl	8000c3c <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80021c8:	1ad3      	subs	r3, r2, r3
 80021ca:	2b02      	cmp	r3, #2
 80021cc:	d906      	bls.n	80021dc <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 80021ce:	2303      	movs	r3, #3
 80021d0:	e3bb      	b.n	800294a <HAL_RCC_OscConfig+0xdce>
 80021d2:	bf00      	nop
 80021d4:	40021000 	.word	0x40021000
 80021d8:	10908120 	.word	0x10908120
 80021dc:	2302      	movs	r3, #2
 80021de:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e2:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80021e6:	fa93 f3a3 	rbit	r3, r3
 80021ea:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80021ee:	2302      	movs	r3, #2
 80021f0:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80021f4:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80021f8:	fa93 f2a3 	rbit	r2, r3
 80021fc:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8002200:	601a      	str	r2, [r3, #0]
 8002202:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002206:	2202      	movs	r2, #2
 8002208:	601a      	str	r2, [r3, #0]
 800220a:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	fa93 f2a3 	rbit	r2, r3
 8002214:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002218:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800221a:	4ba5      	ldr	r3, [pc, #660]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 800221c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800221e:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002222:	2102      	movs	r1, #2
 8002224:	6019      	str	r1, [r3, #0]
 8002226:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	fa93 f1a3 	rbit	r1, r3
 8002230:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002234:	6019      	str	r1, [r3, #0]
  return(result);
 8002236:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	fab3 f383 	clz	r3, r3
 8002240:	b25b      	sxtb	r3, r3
 8002242:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002246:	b25b      	sxtb	r3, r3
 8002248:	b2db      	uxtb	r3, r3
 800224a:	f003 031f 	and.w	r3, r3, #31
 800224e:	2101      	movs	r1, #1
 8002250:	fa01 f303 	lsl.w	r3, r1, r3
 8002254:	4013      	ands	r3, r2
 8002256:	2b00      	cmp	r3, #0
 8002258:	d0b1      	beq.n	80021be <HAL_RCC_OscConfig+0x642>
 800225a:	e06a      	b.n	8002332 <HAL_RCC_OscConfig+0x7b6>
 800225c:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002260:	2201      	movs	r2, #1
 8002262:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	fa93 f2a3 	rbit	r2, r3
 800226e:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002272:	601a      	str	r2, [r3, #0]
  return(result);
 8002274:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002278:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800227a:	fab3 f383 	clz	r3, r3
 800227e:	461a      	mov	r2, r3
 8002280:	4b8c      	ldr	r3, [pc, #560]	; (80024b4 <HAL_RCC_OscConfig+0x938>)
 8002282:	4413      	add	r3, r2
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	461a      	mov	r2, r3
 8002288:	2300      	movs	r3, #0
 800228a:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800228c:	f7fe fcd6 	bl	8000c3c <HAL_GetTick>
 8002290:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002294:	e009      	b.n	80022aa <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002296:	f7fe fcd1 	bl	8000c3c <HAL_GetTick>
 800229a:	4602      	mov	r2, r0
 800229c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d901      	bls.n	80022aa <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 80022a6:	2303      	movs	r3, #3
 80022a8:	e34f      	b.n	800294a <HAL_RCC_OscConfig+0xdce>
 80022aa:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022ae:	2202      	movs	r2, #2
 80022b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	fa93 f2a3 	rbit	r2, r3
 80022bc:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 80022c0:	601a      	str	r2, [r3, #0]
 80022c2:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022c6:	2202      	movs	r2, #2
 80022c8:	601a      	str	r2, [r3, #0]
 80022ca:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	fa93 f2a3 	rbit	r2, r3
 80022d4:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 80022d8:	601a      	str	r2, [r3, #0]
 80022da:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022de:	2202      	movs	r2, #2
 80022e0:	601a      	str	r2, [r3, #0]
 80022e2:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	fa93 f2a3 	rbit	r2, r3
 80022ec:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80022f0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80022f2:	4b6f      	ldr	r3, [pc, #444]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 80022f4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022f6:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80022fa:	2102      	movs	r1, #2
 80022fc:	6019      	str	r1, [r3, #0]
 80022fe:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	fa93 f1a3 	rbit	r1, r3
 8002308:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800230c:	6019      	str	r1, [r3, #0]
  return(result);
 800230e:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	fab3 f383 	clz	r3, r3
 8002318:	b25b      	sxtb	r3, r3
 800231a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800231e:	b25b      	sxtb	r3, r3
 8002320:	b2db      	uxtb	r3, r3
 8002322:	f003 031f 	and.w	r3, r3, #31
 8002326:	2101      	movs	r1, #1
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	4013      	ands	r3, r2
 800232e:	2b00      	cmp	r3, #0
 8002330:	d1b1      	bne.n	8002296 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0304 	and.w	r3, r3, #4
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 8159 	beq.w	80025f4 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002342:	2300      	movs	r3, #0
 8002344:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002348:	4b59      	ldr	r3, [pc, #356]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 800234a:	69db      	ldr	r3, [r3, #28]
 800234c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d112      	bne.n	800237a <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002354:	4b56      	ldr	r3, [pc, #344]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 8002356:	69db      	ldr	r3, [r3, #28]
 8002358:	4a55      	ldr	r2, [pc, #340]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 800235a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800235e:	61d3      	str	r3, [r2, #28]
 8002360:	4b53      	ldr	r3, [pc, #332]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 8002362:	69db      	ldr	r3, [r3, #28]
 8002364:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002368:	f107 030c 	add.w	r3, r7, #12
 800236c:	601a      	str	r2, [r3, #0]
 800236e:	f107 030c 	add.w	r3, r7, #12
 8002372:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002374:	2301      	movs	r3, #1
 8002376:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800237a:	4b4f      	ldr	r3, [pc, #316]	; (80024b8 <HAL_RCC_OscConfig+0x93c>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002382:	2b00      	cmp	r3, #0
 8002384:	d11a      	bne.n	80023bc <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002386:	4b4c      	ldr	r3, [pc, #304]	; (80024b8 <HAL_RCC_OscConfig+0x93c>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4a4b      	ldr	r2, [pc, #300]	; (80024b8 <HAL_RCC_OscConfig+0x93c>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002392:	f7fe fc53 	bl	8000c3c <HAL_GetTick>
 8002396:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800239a:	e009      	b.n	80023b0 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800239c:	f7fe fc4e 	bl	8000c3c <HAL_GetTick>
 80023a0:	4602      	mov	r2, r0
 80023a2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023a6:	1ad3      	subs	r3, r2, r3
 80023a8:	2b64      	cmp	r3, #100	; 0x64
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e2cc      	b.n	800294a <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80023b0:	4b41      	ldr	r3, [pc, #260]	; (80024b8 <HAL_RCC_OscConfig+0x93c>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0ef      	beq.n	800239c <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80023bc:	1d3b      	adds	r3, r7, #4
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d106      	bne.n	80023d4 <HAL_RCC_OscConfig+0x858>
 80023c6:	4b3a      	ldr	r3, [pc, #232]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 80023c8:	6a1b      	ldr	r3, [r3, #32]
 80023ca:	4a39      	ldr	r2, [pc, #228]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6213      	str	r3, [r2, #32]
 80023d2:	e02f      	b.n	8002434 <HAL_RCC_OscConfig+0x8b8>
 80023d4:	1d3b      	adds	r3, r7, #4
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68db      	ldr	r3, [r3, #12]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d10c      	bne.n	80023f8 <HAL_RCC_OscConfig+0x87c>
 80023de:	4b34      	ldr	r3, [pc, #208]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 80023e0:	6a1b      	ldr	r3, [r3, #32]
 80023e2:	4a33      	ldr	r2, [pc, #204]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	6213      	str	r3, [r2, #32]
 80023ea:	4b31      	ldr	r3, [pc, #196]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 80023ec:	6a1b      	ldr	r3, [r3, #32]
 80023ee:	4a30      	ldr	r2, [pc, #192]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 80023f0:	f023 0304 	bic.w	r3, r3, #4
 80023f4:	6213      	str	r3, [r2, #32]
 80023f6:	e01d      	b.n	8002434 <HAL_RCC_OscConfig+0x8b8>
 80023f8:	1d3b      	adds	r3, r7, #4
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	68db      	ldr	r3, [r3, #12]
 80023fe:	2b05      	cmp	r3, #5
 8002400:	d10c      	bne.n	800241c <HAL_RCC_OscConfig+0x8a0>
 8002402:	4b2b      	ldr	r3, [pc, #172]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 8002404:	6a1b      	ldr	r3, [r3, #32]
 8002406:	4a2a      	ldr	r2, [pc, #168]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 8002408:	f043 0304 	orr.w	r3, r3, #4
 800240c:	6213      	str	r3, [r2, #32]
 800240e:	4b28      	ldr	r3, [pc, #160]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 8002410:	6a1b      	ldr	r3, [r3, #32]
 8002412:	4a27      	ldr	r2, [pc, #156]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 8002414:	f043 0301 	orr.w	r3, r3, #1
 8002418:	6213      	str	r3, [r2, #32]
 800241a:	e00b      	b.n	8002434 <HAL_RCC_OscConfig+0x8b8>
 800241c:	4b24      	ldr	r3, [pc, #144]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4a23      	ldr	r2, [pc, #140]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 8002422:	f023 0301 	bic.w	r3, r3, #1
 8002426:	6213      	str	r3, [r2, #32]
 8002428:	4b21      	ldr	r3, [pc, #132]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	4a20      	ldr	r2, [pc, #128]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 800242e:	f023 0304 	bic.w	r3, r3, #4
 8002432:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002434:	1d3b      	adds	r3, r7, #4
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	2b00      	cmp	r3, #0
 800243c:	d06b      	beq.n	8002516 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800243e:	f7fe fbfd 	bl	8000c3c <HAL_GetTick>
 8002442:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002446:	e00b      	b.n	8002460 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002448:	f7fe fbf8 	bl	8000c3c <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002452:	1ad3      	subs	r3, r2, r3
 8002454:	f241 3288 	movw	r2, #5000	; 0x1388
 8002458:	4293      	cmp	r3, r2
 800245a:	d901      	bls.n	8002460 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 800245c:	2303      	movs	r3, #3
 800245e:	e274      	b.n	800294a <HAL_RCC_OscConfig+0xdce>
 8002460:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002464:	2202      	movs	r2, #2
 8002466:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002468:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	fa93 f2a3 	rbit	r2, r3
 8002472:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002476:	601a      	str	r2, [r3, #0]
 8002478:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 800247c:	2202      	movs	r2, #2
 800247e:	601a      	str	r2, [r3, #0]
 8002480:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	fa93 f2a3 	rbit	r2, r3
 800248a:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800248e:	601a      	str	r2, [r3, #0]
  return(result);
 8002490:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002494:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002496:	fab3 f383 	clz	r3, r3
 800249a:	b2db      	uxtb	r3, r3
 800249c:	095b      	lsrs	r3, r3, #5
 800249e:	b2db      	uxtb	r3, r3
 80024a0:	f043 0302 	orr.w	r3, r3, #2
 80024a4:	b2db      	uxtb	r3, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d108      	bne.n	80024bc <HAL_RCC_OscConfig+0x940>
 80024aa:	4b01      	ldr	r3, [pc, #4]	; (80024b0 <HAL_RCC_OscConfig+0x934>)
 80024ac:	6a1b      	ldr	r3, [r3, #32]
 80024ae:	e013      	b.n	80024d8 <HAL_RCC_OscConfig+0x95c>
 80024b0:	40021000 	.word	0x40021000
 80024b4:	10908120 	.word	0x10908120
 80024b8:	40007000 	.word	0x40007000
 80024bc:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024c0:	2202      	movs	r2, #2
 80024c2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c4:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	fa93 f2a3 	rbit	r2, r3
 80024ce:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	4bbb      	ldr	r3, [pc, #748]	; (80027c4 <HAL_RCC_OscConfig+0xc48>)
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024dc:	2102      	movs	r1, #2
 80024de:	6011      	str	r1, [r2, #0]
 80024e0:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80024e4:	6812      	ldr	r2, [r2, #0]
 80024e6:	fa92 f1a2 	rbit	r1, r2
 80024ea:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024ee:	6011      	str	r1, [r2, #0]
  return(result);
 80024f0:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80024f4:	6812      	ldr	r2, [r2, #0]
 80024f6:	fab2 f282 	clz	r2, r2
 80024fa:	b252      	sxtb	r2, r2
 80024fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002500:	b252      	sxtb	r2, r2
 8002502:	b2d2      	uxtb	r2, r2
 8002504:	f002 021f 	and.w	r2, r2, #31
 8002508:	2101      	movs	r1, #1
 800250a:	fa01 f202 	lsl.w	r2, r1, r2
 800250e:	4013      	ands	r3, r2
 8002510:	2b00      	cmp	r3, #0
 8002512:	d099      	beq.n	8002448 <HAL_RCC_OscConfig+0x8cc>
 8002514:	e064      	b.n	80025e0 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002516:	f7fe fb91 	bl	8000c3c <HAL_GetTick>
 800251a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800251e:	e00b      	b.n	8002538 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002520:	f7fe fb8c 	bl	8000c3c <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002530:	4293      	cmp	r3, r2
 8002532:	d901      	bls.n	8002538 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8002534:	2303      	movs	r3, #3
 8002536:	e208      	b.n	800294a <HAL_RCC_OscConfig+0xdce>
 8002538:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 800253c:	2202      	movs	r2, #2
 800253e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	fa93 f2a3 	rbit	r2, r3
 800254a:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002554:	2202      	movs	r2, #2
 8002556:	601a      	str	r2, [r3, #0]
 8002558:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	fa93 f2a3 	rbit	r2, r3
 8002562:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002566:	601a      	str	r2, [r3, #0]
  return(result);
 8002568:	f107 0398 	add.w	r3, r7, #152	; 0x98
 800256c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256e:	fab3 f383 	clz	r3, r3
 8002572:	b2db      	uxtb	r3, r3
 8002574:	095b      	lsrs	r3, r3, #5
 8002576:	b2db      	uxtb	r3, r3
 8002578:	f043 0302 	orr.w	r3, r3, #2
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b02      	cmp	r3, #2
 8002580:	d102      	bne.n	8002588 <HAL_RCC_OscConfig+0xa0c>
 8002582:	4b90      	ldr	r3, [pc, #576]	; (80027c4 <HAL_RCC_OscConfig+0xc48>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	e00d      	b.n	80025a4 <HAL_RCC_OscConfig+0xa28>
 8002588:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800258c:	2202      	movs	r2, #2
 800258e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002590:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	fa93 f2a3 	rbit	r2, r3
 800259a:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	4b88      	ldr	r3, [pc, #544]	; (80027c4 <HAL_RCC_OscConfig+0xc48>)
 80025a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025a4:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80025a8:	2102      	movs	r1, #2
 80025aa:	6011      	str	r1, [r2, #0]
 80025ac:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 80025b0:	6812      	ldr	r2, [r2, #0]
 80025b2:	fa92 f1a2 	rbit	r1, r2
 80025b6:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025ba:	6011      	str	r1, [r2, #0]
  return(result);
 80025bc:	f107 0288 	add.w	r2, r7, #136	; 0x88
 80025c0:	6812      	ldr	r2, [r2, #0]
 80025c2:	fab2 f282 	clz	r2, r2
 80025c6:	b252      	sxtb	r2, r2
 80025c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80025cc:	b252      	sxtb	r2, r2
 80025ce:	b2d2      	uxtb	r2, r2
 80025d0:	f002 021f 	and.w	r2, r2, #31
 80025d4:	2101      	movs	r1, #1
 80025d6:	fa01 f202 	lsl.w	r2, r1, r2
 80025da:	4013      	ands	r3, r2
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d19f      	bne.n	8002520 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80025e0:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80025e4:	2b01      	cmp	r3, #1
 80025e6:	d105      	bne.n	80025f4 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e8:	4b76      	ldr	r3, [pc, #472]	; (80027c4 <HAL_RCC_OscConfig+0xc48>)
 80025ea:	69db      	ldr	r3, [r3, #28]
 80025ec:	4a75      	ldr	r2, [pc, #468]	; (80027c4 <HAL_RCC_OscConfig+0xc48>)
 80025ee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f2:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025f4:	1d3b      	adds	r3, r7, #4
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	69db      	ldr	r3, [r3, #28]
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	f000 81a4 	beq.w	8002948 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002600:	4b70      	ldr	r3, [pc, #448]	; (80027c4 <HAL_RCC_OscConfig+0xc48>)
 8002602:	685b      	ldr	r3, [r3, #4]
 8002604:	f003 030c 	and.w	r3, r3, #12
 8002608:	2b08      	cmp	r3, #8
 800260a:	f000 819b 	beq.w	8002944 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800260e:	1d3b      	adds	r3, r7, #4
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	69db      	ldr	r3, [r3, #28]
 8002614:	2b02      	cmp	r3, #2
 8002616:	f040 8113 	bne.w	8002840 <HAL_RCC_OscConfig+0xcc4>
 800261a:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800261e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	fa93 f2a3 	rbit	r2, r3
 800262e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002632:	601a      	str	r2, [r3, #0]
  return(result);
 8002634:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002638:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800263a:	fab3 f383 	clz	r3, r3
 800263e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002642:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002646:	009b      	lsls	r3, r3, #2
 8002648:	461a      	mov	r2, r3
 800264a:	2300      	movs	r3, #0
 800264c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800264e:	f7fe faf5 	bl	8000c3c <HAL_GetTick>
 8002652:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002656:	e009      	b.n	800266c <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002658:	f7fe faf0 	bl	8000c3c <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002662:	1ad3      	subs	r3, r2, r3
 8002664:	2b02      	cmp	r3, #2
 8002666:	d901      	bls.n	800266c <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8002668:	2303      	movs	r3, #3
 800266a:	e16e      	b.n	800294a <HAL_RCC_OscConfig+0xdce>
 800266c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002670:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002674:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002676:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	fa93 f2a3 	rbit	r2, r3
 8002680:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002684:	601a      	str	r2, [r3, #0]
  return(result);
 8002686:	f107 0378 	add.w	r3, r7, #120	; 0x78
 800268a:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800268c:	fab3 f383 	clz	r3, r3
 8002690:	b2db      	uxtb	r3, r3
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	b2db      	uxtb	r3, r3
 8002696:	f043 0301 	orr.w	r3, r3, #1
 800269a:	b2db      	uxtb	r3, r3
 800269c:	2b01      	cmp	r3, #1
 800269e:	d102      	bne.n	80026a6 <HAL_RCC_OscConfig+0xb2a>
 80026a0:	4b48      	ldr	r3, [pc, #288]	; (80027c4 <HAL_RCC_OscConfig+0xc48>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	e01b      	b.n	80026de <HAL_RCC_OscConfig+0xb62>
 80026a6:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026aa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b0:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	fa93 f2a3 	rbit	r2, r3
 80026ba:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80026be:	601a      	str	r2, [r3, #0]
 80026c0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026c4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80026c8:	601a      	str	r2, [r3, #0]
 80026ca:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	fa93 f2a3 	rbit	r2, r3
 80026d4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80026d8:	601a      	str	r2, [r3, #0]
 80026da:	4b3a      	ldr	r3, [pc, #232]	; (80027c4 <HAL_RCC_OscConfig+0xc48>)
 80026dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026de:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026e2:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80026e6:	6011      	str	r1, [r2, #0]
 80026e8:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80026ec:	6812      	ldr	r2, [r2, #0]
 80026ee:	fa92 f1a2 	rbit	r1, r2
 80026f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026f6:	6011      	str	r1, [r2, #0]
  return(result);
 80026f8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80026fc:	6812      	ldr	r2, [r2, #0]
 80026fe:	fab2 f282 	clz	r2, r2
 8002702:	b252      	sxtb	r2, r2
 8002704:	f042 0220 	orr.w	r2, r2, #32
 8002708:	b252      	sxtb	r2, r2
 800270a:	b2d2      	uxtb	r2, r2
 800270c:	f002 021f 	and.w	r2, r2, #31
 8002710:	2101      	movs	r1, #1
 8002712:	fa01 f202 	lsl.w	r2, r1, r2
 8002716:	4013      	ands	r3, r2
 8002718:	2b00      	cmp	r3, #0
 800271a:	d19d      	bne.n	8002658 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800271c:	4b29      	ldr	r3, [pc, #164]	; (80027c4 <HAL_RCC_OscConfig+0xc48>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002724:	1d3b      	adds	r3, r7, #4
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800272a:	1d3b      	adds	r3, r7, #4
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	6a1b      	ldr	r3, [r3, #32]
 8002730:	430b      	orrs	r3, r1
 8002732:	4924      	ldr	r1, [pc, #144]	; (80027c4 <HAL_RCC_OscConfig+0xc48>)
 8002734:	4313      	orrs	r3, r2
 8002736:	604b      	str	r3, [r1, #4]
 8002738:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800273c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002740:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002742:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	fa93 f2a3 	rbit	r2, r3
 800274c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002750:	601a      	str	r2, [r3, #0]
  return(result);
 8002752:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002756:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002758:	fab3 f383 	clz	r3, r3
 800275c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002760:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	461a      	mov	r2, r3
 8002768:	2301      	movs	r3, #1
 800276a:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800276c:	f7fe fa66 	bl	8000c3c <HAL_GetTick>
 8002770:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002774:	e009      	b.n	800278a <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002776:	f7fe fa61 	bl	8000c3c <HAL_GetTick>
 800277a:	4602      	mov	r2, r0
 800277c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002780:	1ad3      	subs	r3, r2, r3
 8002782:	2b02      	cmp	r3, #2
 8002784:	d901      	bls.n	800278a <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8002786:	2303      	movs	r3, #3
 8002788:	e0df      	b.n	800294a <HAL_RCC_OscConfig+0xdce>
 800278a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800278e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002792:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002794:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	fa93 f2a3 	rbit	r2, r3
 800279e:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027a2:	601a      	str	r2, [r3, #0]
  return(result);
 80027a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80027a8:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027aa:	fab3 f383 	clz	r3, r3
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	095b      	lsrs	r3, r3, #5
 80027b2:	b2db      	uxtb	r3, r3
 80027b4:	f043 0301 	orr.w	r3, r3, #1
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d104      	bne.n	80027c8 <HAL_RCC_OscConfig+0xc4c>
 80027be:	4b01      	ldr	r3, [pc, #4]	; (80027c4 <HAL_RCC_OscConfig+0xc48>)
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	e01d      	b.n	8002800 <HAL_RCC_OscConfig+0xc84>
 80027c4:	40021000 	.word	0x40021000
 80027c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027cc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027d0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d2:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	fa93 f2a3 	rbit	r2, r3
 80027dc:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80027e0:	601a      	str	r2, [r3, #0]
 80027e2:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027e6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80027ea:	601a      	str	r2, [r3, #0]
 80027ec:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	fa93 f2a3 	rbit	r2, r3
 80027f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80027fa:	601a      	str	r2, [r3, #0]
 80027fc:	4b55      	ldr	r3, [pc, #340]	; (8002954 <HAL_RCC_OscConfig+0xdd8>)
 80027fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002800:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002804:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002808:	6011      	str	r1, [r2, #0]
 800280a:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800280e:	6812      	ldr	r2, [r2, #0]
 8002810:	fa92 f1a2 	rbit	r1, r2
 8002814:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002818:	6011      	str	r1, [r2, #0]
  return(result);
 800281a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800281e:	6812      	ldr	r2, [r2, #0]
 8002820:	fab2 f282 	clz	r2, r2
 8002824:	b252      	sxtb	r2, r2
 8002826:	f042 0220 	orr.w	r2, r2, #32
 800282a:	b252      	sxtb	r2, r2
 800282c:	b2d2      	uxtb	r2, r2
 800282e:	f002 021f 	and.w	r2, r2, #31
 8002832:	2101      	movs	r1, #1
 8002834:	fa01 f202 	lsl.w	r2, r1, r2
 8002838:	4013      	ands	r3, r2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d09b      	beq.n	8002776 <HAL_RCC_OscConfig+0xbfa>
 800283e:	e083      	b.n	8002948 <HAL_RCC_OscConfig+0xdcc>
 8002840:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002844:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002848:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800284a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	fa93 f2a3 	rbit	r2, r3
 8002854:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002858:	601a      	str	r2, [r3, #0]
  return(result);
 800285a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800285e:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002860:	fab3 f383 	clz	r3, r3
 8002864:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002868:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800286c:	009b      	lsls	r3, r3, #2
 800286e:	461a      	mov	r2, r3
 8002870:	2300      	movs	r3, #0
 8002872:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002874:	f7fe f9e2 	bl	8000c3c <HAL_GetTick>
 8002878:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800287c:	e009      	b.n	8002892 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800287e:	f7fe f9dd 	bl	8000c3c <HAL_GetTick>
 8002882:	4602      	mov	r2, r0
 8002884:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	2b02      	cmp	r3, #2
 800288c:	d901      	bls.n	8002892 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800288e:	2303      	movs	r3, #3
 8002890:	e05b      	b.n	800294a <HAL_RCC_OscConfig+0xdce>
 8002892:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002896:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800289a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800289c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	fa93 f2a3 	rbit	r2, r3
 80028a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028aa:	601a      	str	r2, [r3, #0]
  return(result);
 80028ac:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80028b0:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028b2:	fab3 f383 	clz	r3, r3
 80028b6:	b2db      	uxtb	r3, r3
 80028b8:	095b      	lsrs	r3, r3, #5
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	f043 0301 	orr.w	r3, r3, #1
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	2b01      	cmp	r3, #1
 80028c4:	d102      	bne.n	80028cc <HAL_RCC_OscConfig+0xd50>
 80028c6:	4b23      	ldr	r3, [pc, #140]	; (8002954 <HAL_RCC_OscConfig+0xdd8>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	e01b      	b.n	8002904 <HAL_RCC_OscConfig+0xd88>
 80028cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028d0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	fa93 f2a3 	rbit	r2, r3
 80028e0:	f107 0320 	add.w	r3, r7, #32
 80028e4:	601a      	str	r2, [r3, #0]
 80028e6:	f107 031c 	add.w	r3, r7, #28
 80028ea:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80028ee:	601a      	str	r2, [r3, #0]
 80028f0:	f107 031c 	add.w	r3, r7, #28
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	fa93 f2a3 	rbit	r2, r3
 80028fa:	f107 0318 	add.w	r3, r7, #24
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	4b14      	ldr	r3, [pc, #80]	; (8002954 <HAL_RCC_OscConfig+0xdd8>)
 8002902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002904:	f107 0214 	add.w	r2, r7, #20
 8002908:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 800290c:	6011      	str	r1, [r2, #0]
 800290e:	f107 0214 	add.w	r2, r7, #20
 8002912:	6812      	ldr	r2, [r2, #0]
 8002914:	fa92 f1a2 	rbit	r1, r2
 8002918:	f107 0210 	add.w	r2, r7, #16
 800291c:	6011      	str	r1, [r2, #0]
  return(result);
 800291e:	f107 0210 	add.w	r2, r7, #16
 8002922:	6812      	ldr	r2, [r2, #0]
 8002924:	fab2 f282 	clz	r2, r2
 8002928:	b252      	sxtb	r2, r2
 800292a:	f042 0220 	orr.w	r2, r2, #32
 800292e:	b252      	sxtb	r2, r2
 8002930:	b2d2      	uxtb	r2, r2
 8002932:	f002 021f 	and.w	r2, r2, #31
 8002936:	2101      	movs	r1, #1
 8002938:	fa01 f202 	lsl.w	r2, r1, r2
 800293c:	4013      	ands	r3, r2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d19d      	bne.n	800287e <HAL_RCC_OscConfig+0xd02>
 8002942:	e001      	b.n	8002948 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002944:	2301      	movs	r3, #1
 8002946:	e000      	b.n	800294a <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002950:	46bd      	mov	sp, r7
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40021000 	.word	0x40021000

08002958 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b09e      	sub	sp, #120	; 0x78
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
 8002960:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002962:	2300      	movs	r3, #0
 8002964:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2b00      	cmp	r3, #0
 800296a:	d101      	bne.n	8002970 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e164      	b.n	8002c3a <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002970:	4b92      	ldr	r3, [pc, #584]	; (8002bbc <HAL_RCC_ClockConfig+0x264>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	f003 0307 	and.w	r3, r3, #7
 8002978:	683a      	ldr	r2, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d910      	bls.n	80029a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800297e:	4b8f      	ldr	r3, [pc, #572]	; (8002bbc <HAL_RCC_ClockConfig+0x264>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f023 0207 	bic.w	r2, r3, #7
 8002986:	498d      	ldr	r1, [pc, #564]	; (8002bbc <HAL_RCC_ClockConfig+0x264>)
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	4313      	orrs	r3, r2
 800298c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800298e:	4b8b      	ldr	r3, [pc, #556]	; (8002bbc <HAL_RCC_ClockConfig+0x264>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f003 0307 	and.w	r3, r3, #7
 8002996:	683a      	ldr	r2, [r7, #0]
 8002998:	429a      	cmp	r2, r3
 800299a:	d001      	beq.n	80029a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e14c      	b.n	8002c3a <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0302 	and.w	r3, r3, #2
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d008      	beq.n	80029be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029ac:	4b84      	ldr	r3, [pc, #528]	; (8002bc0 <HAL_RCC_ClockConfig+0x268>)
 80029ae:	685b      	ldr	r3, [r3, #4]
 80029b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	4981      	ldr	r1, [pc, #516]	; (8002bc0 <HAL_RCC_ClockConfig+0x268>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	f000 80df 	beq.w	8002b8a <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d13d      	bne.n	8002a50 <HAL_RCC_ClockConfig+0xf8>
 80029d4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80029d8:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029da:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029dc:	fa93 f3a3 	rbit	r3, r3
 80029e0:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 80029e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029e4:	fab3 f383 	clz	r3, r3
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	095b      	lsrs	r3, r3, #5
 80029ec:	b2db      	uxtb	r3, r3
 80029ee:	f043 0301 	orr.w	r3, r3, #1
 80029f2:	b2db      	uxtb	r3, r3
 80029f4:	2b01      	cmp	r3, #1
 80029f6:	d102      	bne.n	80029fe <HAL_RCC_ClockConfig+0xa6>
 80029f8:	4b71      	ldr	r3, [pc, #452]	; (8002bc0 <HAL_RCC_ClockConfig+0x268>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	e00f      	b.n	8002a1e <HAL_RCC_ClockConfig+0xc6>
 80029fe:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a02:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a04:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002a06:	fa93 f3a3 	rbit	r3, r3
 8002a0a:	667b      	str	r3, [r7, #100]	; 0x64
 8002a0c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002a10:	663b      	str	r3, [r7, #96]	; 0x60
 8002a12:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002a14:	fa93 f3a3 	rbit	r3, r3
 8002a18:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002a1a:	4b69      	ldr	r3, [pc, #420]	; (8002bc0 <HAL_RCC_ClockConfig+0x268>)
 8002a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a1e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002a22:	65ba      	str	r2, [r7, #88]	; 0x58
 8002a24:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002a26:	fa92 f2a2 	rbit	r2, r2
 8002a2a:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002a2c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002a2e:	fab2 f282 	clz	r2, r2
 8002a32:	b252      	sxtb	r2, r2
 8002a34:	f042 0220 	orr.w	r2, r2, #32
 8002a38:	b252      	sxtb	r2, r2
 8002a3a:	b2d2      	uxtb	r2, r2
 8002a3c:	f002 021f 	and.w	r2, r2, #31
 8002a40:	2101      	movs	r1, #1
 8002a42:	fa01 f202 	lsl.w	r2, r1, r2
 8002a46:	4013      	ands	r3, r2
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d17d      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e0f4      	b.n	8002c3a <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d13d      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x17c>
 8002a58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a5c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002a60:	fa93 f3a3 	rbit	r3, r3
 8002a64:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002a66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a68:	fab3 f383 	clz	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	095b      	lsrs	r3, r3, #5
 8002a70:	b2db      	uxtb	r3, r3
 8002a72:	f043 0301 	orr.w	r3, r3, #1
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d102      	bne.n	8002a82 <HAL_RCC_ClockConfig+0x12a>
 8002a7c:	4b50      	ldr	r3, [pc, #320]	; (8002bc0 <HAL_RCC_ClockConfig+0x268>)
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	e00f      	b.n	8002aa2 <HAL_RCC_ClockConfig+0x14a>
 8002a82:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a86:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a8a:	fa93 f3a3 	rbit	r3, r3
 8002a8e:	647b      	str	r3, [r7, #68]	; 0x44
 8002a90:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a94:	643b      	str	r3, [r7, #64]	; 0x40
 8002a96:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a98:	fa93 f3a3 	rbit	r3, r3
 8002a9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a9e:	4b48      	ldr	r3, [pc, #288]	; (8002bc0 <HAL_RCC_ClockConfig+0x268>)
 8002aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aa6:	63ba      	str	r2, [r7, #56]	; 0x38
 8002aa8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002aaa:	fa92 f2a2 	rbit	r2, r2
 8002aae:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002ab0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002ab2:	fab2 f282 	clz	r2, r2
 8002ab6:	b252      	sxtb	r2, r2
 8002ab8:	f042 0220 	orr.w	r2, r2, #32
 8002abc:	b252      	sxtb	r2, r2
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	f002 021f 	and.w	r2, r2, #31
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d13b      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e0b2      	b.n	8002c3a <HAL_RCC_ClockConfig+0x2e2>
 8002ad4:	2302      	movs	r3, #2
 8002ad6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ada:	fa93 f3a3 	rbit	r3, r3
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002ae0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ae2:	fab3 f383 	clz	r3, r3
 8002ae6:	b2db      	uxtb	r3, r3
 8002ae8:	095b      	lsrs	r3, r3, #5
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	f043 0301 	orr.w	r3, r3, #1
 8002af0:	b2db      	uxtb	r3, r3
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d102      	bne.n	8002afc <HAL_RCC_ClockConfig+0x1a4>
 8002af6:	4b32      	ldr	r3, [pc, #200]	; (8002bc0 <HAL_RCC_ClockConfig+0x268>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	e00d      	b.n	8002b18 <HAL_RCC_ClockConfig+0x1c0>
 8002afc:	2302      	movs	r3, #2
 8002afe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b02:	fa93 f3a3 	rbit	r3, r3
 8002b06:	627b      	str	r3, [r7, #36]	; 0x24
 8002b08:	2302      	movs	r3, #2
 8002b0a:	623b      	str	r3, [r7, #32]
 8002b0c:	6a3b      	ldr	r3, [r7, #32]
 8002b0e:	fa93 f3a3 	rbit	r3, r3
 8002b12:	61fb      	str	r3, [r7, #28]
 8002b14:	4b2a      	ldr	r3, [pc, #168]	; (8002bc0 <HAL_RCC_ClockConfig+0x268>)
 8002b16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b18:	2202      	movs	r2, #2
 8002b1a:	61ba      	str	r2, [r7, #24]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	fa92 f2a2 	rbit	r2, r2
 8002b22:	617a      	str	r2, [r7, #20]
  return(result);
 8002b24:	697a      	ldr	r2, [r7, #20]
 8002b26:	fab2 f282 	clz	r2, r2
 8002b2a:	b252      	sxtb	r2, r2
 8002b2c:	f042 0220 	orr.w	r2, r2, #32
 8002b30:	b252      	sxtb	r2, r2
 8002b32:	b2d2      	uxtb	r2, r2
 8002b34:	f002 021f 	and.w	r2, r2, #31
 8002b38:	2101      	movs	r1, #1
 8002b3a:	fa01 f202 	lsl.w	r2, r1, r2
 8002b3e:	4013      	ands	r3, r2
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d101      	bne.n	8002b48 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e078      	b.n	8002c3a <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002b48:	4b1d      	ldr	r3, [pc, #116]	; (8002bc0 <HAL_RCC_ClockConfig+0x268>)
 8002b4a:	685b      	ldr	r3, [r3, #4]
 8002b4c:	f023 0203 	bic.w	r2, r3, #3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	685b      	ldr	r3, [r3, #4]
 8002b54:	491a      	ldr	r1, [pc, #104]	; (8002bc0 <HAL_RCC_ClockConfig+0x268>)
 8002b56:	4313      	orrs	r3, r2
 8002b58:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002b5a:	f7fe f86f 	bl	8000c3c <HAL_GetTick>
 8002b5e:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b60:	e00a      	b.n	8002b78 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002b62:	f7fe f86b 	bl	8000c3c <HAL_GetTick>
 8002b66:	4602      	mov	r2, r0
 8002b68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b6a:	1ad3      	subs	r3, r2, r3
 8002b6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d901      	bls.n	8002b78 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e060      	b.n	8002c3a <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b78:	4b11      	ldr	r3, [pc, #68]	; (8002bc0 <HAL_RCC_ClockConfig+0x268>)
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	f003 020c 	and.w	r2, r3, #12
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	429a      	cmp	r2, r3
 8002b88:	d1eb      	bne.n	8002b62 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b8a:	4b0c      	ldr	r3, [pc, #48]	; (8002bbc <HAL_RCC_ClockConfig+0x264>)
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	f003 0307 	and.w	r3, r3, #7
 8002b92:	683a      	ldr	r2, [r7, #0]
 8002b94:	429a      	cmp	r2, r3
 8002b96:	d215      	bcs.n	8002bc4 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b98:	4b08      	ldr	r3, [pc, #32]	; (8002bbc <HAL_RCC_ClockConfig+0x264>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f023 0207 	bic.w	r2, r3, #7
 8002ba0:	4906      	ldr	r1, [pc, #24]	; (8002bbc <HAL_RCC_ClockConfig+0x264>)
 8002ba2:	683b      	ldr	r3, [r7, #0]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <HAL_RCC_ClockConfig+0x264>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f003 0307 	and.w	r3, r3, #7
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d006      	beq.n	8002bc4 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e03f      	b.n	8002c3a <HAL_RCC_ClockConfig+0x2e2>
 8002bba:	bf00      	nop
 8002bbc:	40022000 	.word	0x40022000
 8002bc0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d008      	beq.n	8002be2 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002bd0:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <HAL_RCC_ClockConfig+0x2ec>)
 8002bd2:	685b      	ldr	r3, [r3, #4]
 8002bd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	4919      	ldr	r1, [pc, #100]	; (8002c44 <HAL_RCC_ClockConfig+0x2ec>)
 8002bde:	4313      	orrs	r3, r2
 8002be0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f003 0308 	and.w	r3, r3, #8
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d009      	beq.n	8002c02 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bee:	4b15      	ldr	r3, [pc, #84]	; (8002c44 <HAL_RCC_ClockConfig+0x2ec>)
 8002bf0:	685b      	ldr	r3, [r3, #4]
 8002bf2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	00db      	lsls	r3, r3, #3
 8002bfc:	4911      	ldr	r1, [pc, #68]	; (8002c44 <HAL_RCC_ClockConfig+0x2ec>)
 8002bfe:	4313      	orrs	r3, r2
 8002c00:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002c02:	f000 f825 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 8002c06:	4601      	mov	r1, r0
 8002c08:	4b0e      	ldr	r3, [pc, #56]	; (8002c44 <HAL_RCC_ClockConfig+0x2ec>)
 8002c0a:	685b      	ldr	r3, [r3, #4]
 8002c0c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002c10:	23f0      	movs	r3, #240	; 0xf0
 8002c12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	fa93 f3a3 	rbit	r3, r3
 8002c1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	fab3 f383 	clz	r3, r3
 8002c22:	fa22 f303 	lsr.w	r3, r2, r3
 8002c26:	4a08      	ldr	r2, [pc, #32]	; (8002c48 <HAL_RCC_ClockConfig+0x2f0>)
 8002c28:	5cd3      	ldrb	r3, [r2, r3]
 8002c2a:	fa21 f303 	lsr.w	r3, r1, r3
 8002c2e:	4a07      	ldr	r2, [pc, #28]	; (8002c4c <HAL_RCC_ClockConfig+0x2f4>)
 8002c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002c32:	2000      	movs	r0, #0
 8002c34:	f7fd ffbe 	bl	8000bb4 <HAL_InitTick>
  
  return HAL_OK;
 8002c38:	2300      	movs	r3, #0
}
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	3778      	adds	r7, #120	; 0x78
 8002c3e:	46bd      	mov	sp, r7
 8002c40:	bd80      	pop	{r7, pc}
 8002c42:	bf00      	nop
 8002c44:	40021000 	.word	0x40021000
 8002c48:	08004f70 	.word	0x08004f70
 8002c4c:	20000008 	.word	0x20000008

08002c50 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b08b      	sub	sp, #44	; 0x2c
 8002c54:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002c56:	2300      	movs	r3, #0
 8002c58:	61fb      	str	r3, [r7, #28]
 8002c5a:	2300      	movs	r3, #0
 8002c5c:	61bb      	str	r3, [r7, #24]
 8002c5e:	2300      	movs	r3, #0
 8002c60:	627b      	str	r3, [r7, #36]	; 0x24
 8002c62:	2300      	movs	r3, #0
 8002c64:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002c6a:	4b29      	ldr	r3, [pc, #164]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c6c:	685b      	ldr	r3, [r3, #4]
 8002c6e:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002c70:	69fb      	ldr	r3, [r7, #28]
 8002c72:	f003 030c 	and.w	r3, r3, #12
 8002c76:	2b04      	cmp	r3, #4
 8002c78:	d002      	beq.n	8002c80 <HAL_RCC_GetSysClockFreq+0x30>
 8002c7a:	2b08      	cmp	r3, #8
 8002c7c:	d003      	beq.n	8002c86 <HAL_RCC_GetSysClockFreq+0x36>
 8002c7e:	e03c      	b.n	8002cfa <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c80:	4b24      	ldr	r3, [pc, #144]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c82:	623b      	str	r3, [r7, #32]
      break;
 8002c84:	e03c      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c86:	69fb      	ldr	r3, [r7, #28]
 8002c88:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c8c:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002c90:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	fa93 f3a3 	rbit	r3, r3
 8002c98:	607b      	str	r3, [r7, #4]
  return(result);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	fab3 f383 	clz	r3, r3
 8002ca0:	fa22 f303 	lsr.w	r3, r2, r3
 8002ca4:	4a1c      	ldr	r2, [pc, #112]	; (8002d18 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002ca6:	5cd3      	ldrb	r3, [r2, r3]
 8002ca8:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002caa:	4b19      	ldr	r3, [pc, #100]	; (8002d10 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	f003 020f 	and.w	r2, r3, #15
 8002cb2:	230f      	movs	r3, #15
 8002cb4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	fa93 f3a3 	rbit	r3, r3
 8002cbc:	60fb      	str	r3, [r7, #12]
  return(result);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	fab3 f383 	clz	r3, r3
 8002cc4:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc8:	4a14      	ldr	r2, [pc, #80]	; (8002d1c <HAL_RCC_GetSysClockFreq+0xcc>)
 8002cca:	5cd3      	ldrb	r3, [r2, r3]
 8002ccc:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002cce:	69fb      	ldr	r3, [r7, #28]
 8002cd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d008      	beq.n	8002cea <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002cd8:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cda:	69bb      	ldr	r3, [r7, #24]
 8002cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8002ce0:	697b      	ldr	r3, [r7, #20]
 8002ce2:	fb02 f303 	mul.w	r3, r2, r3
 8002ce6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ce8:	e004      	b.n	8002cf4 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002cea:	697b      	ldr	r3, [r7, #20]
 8002cec:	4a0c      	ldr	r2, [pc, #48]	; (8002d20 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002cee:	fb02 f303 	mul.w	r3, r2, r3
 8002cf2:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002cf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cf6:	623b      	str	r3, [r7, #32]
      break;
 8002cf8:	e002      	b.n	8002d00 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002cfa:	4b06      	ldr	r3, [pc, #24]	; (8002d14 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002cfc:	623b      	str	r3, [r7, #32]
      break;
 8002cfe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002d00:	6a3b      	ldr	r3, [r7, #32]
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	372c      	adds	r7, #44	; 0x2c
 8002d06:	46bd      	mov	sp, r7
 8002d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0c:	4770      	bx	lr
 8002d0e:	bf00      	nop
 8002d10:	40021000 	.word	0x40021000
 8002d14:	007a1200 	.word	0x007a1200
 8002d18:	08004f50 	.word	0x08004f50
 8002d1c:	08004f60 	.word	0x08004f60
 8002d20:	003d0900 	.word	0x003d0900

08002d24 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002d24:	b480      	push	{r7}
 8002d26:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002d28:	4b03      	ldr	r3, [pc, #12]	; (8002d38 <HAL_RCC_GetHCLKFreq+0x14>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	20000008 	.word	0x20000008

08002d3c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b082      	sub	sp, #8
 8002d40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002d42:	f7ff ffef 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002d46:	4601      	mov	r1, r0
 8002d48:	4b0b      	ldr	r3, [pc, #44]	; (8002d78 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002d50:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002d54:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	fa93 f3a3 	rbit	r3, r3
 8002d5c:	603b      	str	r3, [r7, #0]
  return(result);
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	fab3 f383 	clz	r3, r3
 8002d64:	fa22 f303 	lsr.w	r3, r2, r3
 8002d68:	4a04      	ldr	r2, [pc, #16]	; (8002d7c <HAL_RCC_GetPCLK1Freq+0x40>)
 8002d6a:	5cd3      	ldrb	r3, [r2, r3]
 8002d6c:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002d70:	4618      	mov	r0, r3
 8002d72:	3708      	adds	r7, #8
 8002d74:	46bd      	mov	sp, r7
 8002d76:	bd80      	pop	{r7, pc}
 8002d78:	40021000 	.word	0x40021000
 8002d7c:	08004f80 	.word	0x08004f80

08002d80 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002d86:	f7ff ffcd 	bl	8002d24 <HAL_RCC_GetHCLKFreq>
 8002d8a:	4601      	mov	r1, r0
 8002d8c:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002d94:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002d98:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	fa93 f3a3 	rbit	r3, r3
 8002da0:	603b      	str	r3, [r7, #0]
  return(result);
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	fab3 f383 	clz	r3, r3
 8002da8:	fa22 f303 	lsr.w	r3, r2, r3
 8002dac:	4a04      	ldr	r2, [pc, #16]	; (8002dc0 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002dae:	5cd3      	ldrb	r3, [r2, r3]
 8002db0:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	08004f80 	.word	0x08004f80

08002dc4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b092      	sub	sp, #72	; 0x48
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002dcc:	2300      	movs	r3, #0
 8002dce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	f000 80cf 	beq.w	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002de8:	4b86      	ldr	r3, [pc, #536]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dea:	69db      	ldr	r3, [r3, #28]
 8002dec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d10e      	bne.n	8002e12 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002df4:	4b83      	ldr	r3, [pc, #524]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002df6:	69db      	ldr	r3, [r3, #28]
 8002df8:	4a82      	ldr	r2, [pc, #520]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002dfa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002dfe:	61d3      	str	r3, [r2, #28]
 8002e00:	4b80      	ldr	r3, [pc, #512]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e02:	69db      	ldr	r3, [r3, #28]
 8002e04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e08:	60bb      	str	r3, [r7, #8]
 8002e0a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e12:	4b7d      	ldr	r3, [pc, #500]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d118      	bne.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e1e:	4b7a      	ldr	r3, [pc, #488]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	4a79      	ldr	r2, [pc, #484]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e28:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002e2a:	f7fd ff07 	bl	8000c3c <HAL_GetTick>
 8002e2e:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e30:	e008      	b.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e32:	f7fd ff03 	bl	8000c3c <HAL_GetTick>
 8002e36:	4602      	mov	r2, r0
 8002e38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002e3a:	1ad3      	subs	r3, r2, r3
 8002e3c:	2b64      	cmp	r3, #100	; 0x64
 8002e3e:	d901      	bls.n	8002e44 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002e40:	2303      	movs	r3, #3
 8002e42:	e0da      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e44:	4b70      	ldr	r3, [pc, #448]	; (8003008 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d0f0      	beq.n	8002e32 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002e50:	4b6c      	ldr	r3, [pc, #432]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e52:	6a1b      	ldr	r3, [r3, #32]
 8002e54:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e58:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002e5a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d07c      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e68:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002e6a:	429a      	cmp	r2, r3
 8002e6c:	d075      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e6e:	4b65      	ldr	r3, [pc, #404]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002e78:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e7c:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e80:	fa93 f3a3 	rbit	r3, r3
 8002e84:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002e86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002e88:	fab3 f383 	clz	r3, r3
 8002e8c:	461a      	mov	r2, r3
 8002e8e:	4b5f      	ldr	r3, [pc, #380]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002e90:	4413      	add	r3, r2
 8002e92:	009b      	lsls	r3, r3, #2
 8002e94:	461a      	mov	r2, r3
 8002e96:	2301      	movs	r3, #1
 8002e98:	6013      	str	r3, [r2, #0]
 8002e9a:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002e9e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ea0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ea2:	fa93 f3a3 	rbit	r3, r3
 8002ea6:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	461a      	mov	r2, r3
 8002eb0:	4b56      	ldr	r3, [pc, #344]	; (800300c <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	461a      	mov	r2, r3
 8002eb8:	2300      	movs	r3, #0
 8002eba:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002ebc:	4a51      	ldr	r2, [pc, #324]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ebe:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec0:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002ec2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d046      	beq.n	8002f5a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ecc:	f7fd feb6 	bl	8000c3c <HAL_GetTick>
 8002ed0:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ed2:	e00a      	b.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed4:	f7fd feb2 	bl	8000c3c <HAL_GetTick>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002edc:	1ad3      	subs	r3, r2, r3
 8002ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d901      	bls.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	e087      	b.n	8002ffa <HAL_RCCEx_PeriphCLKConfig+0x236>
 8002eea:	2302      	movs	r3, #2
 8002eec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002eee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ef0:	fa93 f3a3 	rbit	r3, r3
 8002ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ef6:	2302      	movs	r3, #2
 8002ef8:	623b      	str	r3, [r7, #32]
 8002efa:	6a3b      	ldr	r3, [r7, #32]
 8002efc:	fa93 f3a3 	rbit	r3, r3
 8002f00:	61fb      	str	r3, [r7, #28]
  return(result);
 8002f02:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f04:	fab3 f383 	clz	r3, r3
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	b2db      	uxtb	r3, r3
 8002f0e:	f043 0302 	orr.w	r3, r3, #2
 8002f12:	b2db      	uxtb	r3, r3
 8002f14:	2b02      	cmp	r3, #2
 8002f16:	d102      	bne.n	8002f1e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002f18:	4b3a      	ldr	r3, [pc, #232]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	e007      	b.n	8002f2e <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002f1e:	2302      	movs	r3, #2
 8002f20:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f22:	69bb      	ldr	r3, [r7, #24]
 8002f24:	fa93 f3a3 	rbit	r3, r3
 8002f28:	617b      	str	r3, [r7, #20]
 8002f2a:	4b36      	ldr	r3, [pc, #216]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f2e:	2202      	movs	r2, #2
 8002f30:	613a      	str	r2, [r7, #16]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	fa92 f2a2 	rbit	r2, r2
 8002f38:	60fa      	str	r2, [r7, #12]
  return(result);
 8002f3a:	68fa      	ldr	r2, [r7, #12]
 8002f3c:	fab2 f282 	clz	r2, r2
 8002f40:	b252      	sxtb	r2, r2
 8002f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f46:	b252      	sxtb	r2, r2
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	f002 021f 	and.w	r2, r2, #31
 8002f4e:	2101      	movs	r1, #1
 8002f50:	fa01 f202 	lsl.w	r2, r1, r2
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d0bc      	beq.n	8002ed4 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002f5a:	4b2a      	ldr	r3, [pc, #168]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f5c:	6a1b      	ldr	r3, [r3, #32]
 8002f5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	4927      	ldr	r1, [pc, #156]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002f6c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002f70:	2b01      	cmp	r3, #1
 8002f72:	d105      	bne.n	8002f80 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f74:	4b23      	ldr	r3, [pc, #140]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f76:	69db      	ldr	r3, [r3, #28]
 8002f78:	4a22      	ldr	r2, [pc, #136]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f7a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f003 0301 	and.w	r3, r3, #1
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d008      	beq.n	8002f9e <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002f8c:	4b1d      	ldr	r3, [pc, #116]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f90:	f023 0203 	bic.w	r2, r3, #3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	689b      	ldr	r3, [r3, #8]
 8002f98:	491a      	ldr	r1, [pc, #104]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f003 0320 	and.w	r3, r3, #32
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d008      	beq.n	8002fbc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002faa:	4b16      	ldr	r3, [pc, #88]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fae:	f023 0210 	bic.w	r2, r3, #16
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	68db      	ldr	r3, [r3, #12]
 8002fb6:	4913      	ldr	r1, [pc, #76]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fb8:	4313      	orrs	r3, r2
 8002fba:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d008      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002fc8:	4b0e      	ldr	r3, [pc, #56]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fcc:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	691b      	ldr	r3, [r3, #16]
 8002fd4:	490b      	ldr	r1, [pc, #44]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fd6:	4313      	orrs	r3, r2
 8002fd8:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d008      	beq.n	8002ff8 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002fe6:	4b07      	ldr	r3, [pc, #28]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fea:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	695b      	ldr	r3, [r3, #20]
 8002ff2:	4904      	ldr	r1, [pc, #16]	; (8003004 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ff4:	4313      	orrs	r3, r2
 8002ff6:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ff8:	2300      	movs	r3, #0
}
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	3748      	adds	r7, #72	; 0x48
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bd80      	pop	{r7, pc}
 8003002:	bf00      	nop
 8003004:	40021000 	.word	0x40021000
 8003008:	40007000 	.word	0x40007000
 800300c:	10908100 	.word	0x10908100

08003010 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003010:	b580      	push	{r7, lr}
 8003012:	b082      	sub	sp, #8
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d101      	bne.n	8003022 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	e043      	b.n	80030aa <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003028:	b2db      	uxtb	r3, r3
 800302a:	2b00      	cmp	r3, #0
 800302c:	d106      	bne.n	800303c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	2200      	movs	r2, #0
 8003032:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fede 	bl	8003df8 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2224      	movs	r2, #36	; 0x24
 8003040:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	681a      	ldr	r2, [r3, #0]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	f022 0201 	bic.w	r2, r2, #1
 8003052:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f8b9 	bl	80031cc <UART_SetConfig>
 800305a:	4603      	mov	r3, r0
 800305c:	2b01      	cmp	r3, #1
 800305e:	d101      	bne.n	8003064 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8003060:	2301      	movs	r3, #1
 8003062:	e022      	b.n	80030aa <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003068:	2b00      	cmp	r3, #0
 800306a:	d002      	beq.n	8003072 <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 800306c:	6878      	ldr	r0, [r7, #4]
 800306e:	f000 fa13 	bl	8003498 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	685a      	ldr	r2, [r3, #4]
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003080:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	689a      	ldr	r2, [r3, #8]
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003090:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	f042 0201 	orr.w	r2, r2, #1
 80030a0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fa9a 	bl	80035dc <UART_CheckIdleState>
 80030a8:	4603      	mov	r3, r0
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3708      	adds	r7, #8
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}

080030b2 <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030b2:	b580      	push	{r7, lr}
 80030b4:	b088      	sub	sp, #32
 80030b6:	af02      	add	r7, sp, #8
 80030b8:	60f8      	str	r0, [r7, #12]
 80030ba:	60b9      	str	r1, [r7, #8]
 80030bc:	603b      	str	r3, [r7, #0]
 80030be:	4613      	mov	r3, r2
 80030c0:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 80030c2:	2300      	movs	r3, #0
 80030c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	d177      	bne.n	80031c2 <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d002      	beq.n	80030de <HAL_UART_Transmit+0x2c>
 80030d8:	88fb      	ldrh	r3, [r7, #6]
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d101      	bne.n	80030e2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	e070      	b.n	80031c4 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 80030e8:	2b01      	cmp	r3, #1
 80030ea:	d101      	bne.n	80030f0 <HAL_UART_Transmit+0x3e>
 80030ec:	2302      	movs	r3, #2
 80030ee:	e069      	b.n	80031c4 <HAL_UART_Transmit+0x112>
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	2221      	movs	r2, #33	; 0x21
 8003102:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003106:	f7fd fd99 	bl	8000c3c <HAL_GetTick>
 800310a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	88fa      	ldrh	r2, [r7, #6]
 8003110:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	88fa      	ldrh	r2, [r7, #6]
 8003118:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 800311c:	e034      	b.n	8003188 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003124:	b29b      	uxth	r3, r3
 8003126:	3b01      	subs	r3, #1
 8003128:	b29a      	uxth	r2, r3
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003130:	683b      	ldr	r3, [r7, #0]
 8003132:	9300      	str	r3, [sp, #0]
 8003134:	697b      	ldr	r3, [r7, #20]
 8003136:	2200      	movs	r2, #0
 8003138:	2180      	movs	r1, #128	; 0x80
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f000 fa97 	bl	800366e <UART_WaitOnFlagUntilTimeout>
 8003140:	4603      	mov	r3, r0
 8003142:	2b00      	cmp	r3, #0
 8003144:	d001      	beq.n	800314a <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e03c      	b.n	80031c4 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003152:	d111      	bne.n	8003178 <HAL_UART_Transmit+0xc6>
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d10d      	bne.n	8003178 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	881a      	ldrh	r2, [r3, #0]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800316c:	b292      	uxth	r2, r2
 800316e:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	3302      	adds	r3, #2
 8003174:	60bb      	str	r3, [r7, #8]
 8003176:	e007      	b.n	8003188 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003178:	68bb      	ldr	r3, [r7, #8]
 800317a:	1c5a      	adds	r2, r3, #1
 800317c:	60ba      	str	r2, [r7, #8]
 800317e:	781a      	ldrb	r2, [r3, #0]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	b292      	uxth	r2, r2
 8003186:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800318e:	b29b      	uxth	r3, r3
 8003190:	2b00      	cmp	r3, #0
 8003192:	d1c4      	bne.n	800311e <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	9300      	str	r3, [sp, #0]
 8003198:	697b      	ldr	r3, [r7, #20]
 800319a:	2200      	movs	r2, #0
 800319c:	2140      	movs	r1, #64	; 0x40
 800319e:	68f8      	ldr	r0, [r7, #12]
 80031a0:	f000 fa65 	bl	800366e <UART_WaitOnFlagUntilTimeout>
 80031a4:	4603      	mov	r3, r0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d001      	beq.n	80031ae <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	e00a      	b.n	80031c4 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	2220      	movs	r2, #32
 80031b2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	e000      	b.n	80031c4 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 80031c2:	2302      	movs	r3, #2
  }
}
 80031c4:	4618      	mov	r0, r3
 80031c6:	3718      	adds	r7, #24
 80031c8:	46bd      	mov	sp, r7
 80031ca:	bd80      	pop	{r7, pc}

080031cc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b086      	sub	sp, #24
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 80031d4:	2300      	movs	r3, #0
 80031d6:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 80031d8:	2310      	movs	r3, #16
 80031da:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 80031dc:	2300      	movs	r3, #0
 80031de:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 80031e0:	2300      	movs	r3, #0
 80031e2:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 80031e4:	2300      	movs	r3, #0
 80031e6:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	689a      	ldr	r2, [r3, #8]
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	691b      	ldr	r3, [r3, #16]
 80031f0:	431a      	orrs	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	431a      	orrs	r2, r3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	69db      	ldr	r3, [r3, #28]
 80031fc:	4313      	orrs	r3, r2
 80031fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	4b9f      	ldr	r3, [pc, #636]	; (8003484 <UART_SetConfig+0x2b8>)
 8003208:	4013      	ands	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6812      	ldr	r2, [r2, #0]
 800320e:	68f9      	ldr	r1, [r7, #12]
 8003210:	430b      	orrs	r3, r1
 8003212:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68da      	ldr	r2, [r3, #12]
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	430a      	orrs	r2, r1
 8003228:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	699a      	ldr	r2, [r3, #24]
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6a1b      	ldr	r3, [r3, #32]
 8003232:	4313      	orrs	r3, r2
 8003234:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68fa      	ldr	r2, [r7, #12]
 8003246:	430a      	orrs	r2, r1
 8003248:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4a8e      	ldr	r2, [pc, #568]	; (8003488 <UART_SetConfig+0x2bc>)
 8003250:	4293      	cmp	r3, r2
 8003252:	d121      	bne.n	8003298 <UART_SetConfig+0xcc>
 8003254:	4b8d      	ldr	r3, [pc, #564]	; (800348c <UART_SetConfig+0x2c0>)
 8003256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b03      	cmp	r3, #3
 800325e:	d817      	bhi.n	8003290 <UART_SetConfig+0xc4>
 8003260:	a201      	add	r2, pc, #4	; (adr r2, 8003268 <UART_SetConfig+0x9c>)
 8003262:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003266:	bf00      	nop
 8003268:	08003279 	.word	0x08003279
 800326c:	08003285 	.word	0x08003285
 8003270:	0800328b 	.word	0x0800328b
 8003274:	0800327f 	.word	0x0800327f
 8003278:	2300      	movs	r3, #0
 800327a:	75fb      	strb	r3, [r7, #23]
 800327c:	e01e      	b.n	80032bc <UART_SetConfig+0xf0>
 800327e:	2302      	movs	r3, #2
 8003280:	75fb      	strb	r3, [r7, #23]
 8003282:	e01b      	b.n	80032bc <UART_SetConfig+0xf0>
 8003284:	2304      	movs	r3, #4
 8003286:	75fb      	strb	r3, [r7, #23]
 8003288:	e018      	b.n	80032bc <UART_SetConfig+0xf0>
 800328a:	2308      	movs	r3, #8
 800328c:	75fb      	strb	r3, [r7, #23]
 800328e:	e015      	b.n	80032bc <UART_SetConfig+0xf0>
 8003290:	2310      	movs	r3, #16
 8003292:	75fb      	strb	r3, [r7, #23]
 8003294:	bf00      	nop
 8003296:	e011      	b.n	80032bc <UART_SetConfig+0xf0>
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4a7c      	ldr	r2, [pc, #496]	; (8003490 <UART_SetConfig+0x2c4>)
 800329e:	4293      	cmp	r3, r2
 80032a0:	d102      	bne.n	80032a8 <UART_SetConfig+0xdc>
 80032a2:	2300      	movs	r3, #0
 80032a4:	75fb      	strb	r3, [r7, #23]
 80032a6:	e009      	b.n	80032bc <UART_SetConfig+0xf0>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a79      	ldr	r2, [pc, #484]	; (8003494 <UART_SetConfig+0x2c8>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d102      	bne.n	80032b8 <UART_SetConfig+0xec>
 80032b2:	2300      	movs	r3, #0
 80032b4:	75fb      	strb	r3, [r7, #23]
 80032b6:	e001      	b.n	80032bc <UART_SetConfig+0xf0>
 80032b8:	2310      	movs	r3, #16
 80032ba:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	69db      	ldr	r3, [r3, #28]
 80032c0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032c4:	d16f      	bne.n	80033a6 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 80032c6:	7dfb      	ldrb	r3, [r7, #23]
 80032c8:	2b08      	cmp	r3, #8
 80032ca:	d857      	bhi.n	800337c <UART_SetConfig+0x1b0>
 80032cc:	a201      	add	r2, pc, #4	; (adr r2, 80032d4 <UART_SetConfig+0x108>)
 80032ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032d2:	bf00      	nop
 80032d4:	080032f9 	.word	0x080032f9
 80032d8:	08003315 	.word	0x08003315
 80032dc:	08003331 	.word	0x08003331
 80032e0:	0800337d 	.word	0x0800337d
 80032e4:	0800334b 	.word	0x0800334b
 80032e8:	0800337d 	.word	0x0800337d
 80032ec:	0800337d 	.word	0x0800337d
 80032f0:	0800337d 	.word	0x0800337d
 80032f4:	08003367 	.word	0x08003367
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80032f8:	f7ff fd20 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 80032fc:	4603      	mov	r3, r0
 80032fe:	005a      	lsls	r2, r3, #1
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	441a      	add	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	82bb      	strh	r3, [r7, #20]
        break;
 8003312:	e036      	b.n	8003382 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003314:	f7ff fd34 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 8003318:	4603      	mov	r3, r0
 800331a:	005a      	lsls	r2, r3, #1
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	085b      	lsrs	r3, r3, #1
 8003322:	441a      	add	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	fbb2 f3f3 	udiv	r3, r2, r3
 800332c:	82bb      	strh	r3, [r7, #20]
        break;
 800332e:	e028      	b.n	8003382 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	085b      	lsrs	r3, r3, #1
 8003336:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800333a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800333e:	687a      	ldr	r2, [r7, #4]
 8003340:	6852      	ldr	r2, [r2, #4]
 8003342:	fbb3 f3f2 	udiv	r3, r3, r2
 8003346:	82bb      	strh	r3, [r7, #20]
        break;
 8003348:	e01b      	b.n	8003382 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800334a:	f7ff fc81 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 800334e:	4603      	mov	r3, r0
 8003350:	005a      	lsls	r2, r3, #1
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	085b      	lsrs	r3, r3, #1
 8003358:	441a      	add	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	685b      	ldr	r3, [r3, #4]
 800335e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003362:	82bb      	strh	r3, [r7, #20]
        break;
 8003364:	e00d      	b.n	8003382 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	085b      	lsrs	r3, r3, #1
 800336c:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	685b      	ldr	r3, [r3, #4]
 8003374:	fbb2 f3f3 	udiv	r3, r2, r3
 8003378:	82bb      	strh	r3, [r7, #20]
        break;
 800337a:	e002      	b.n	8003382 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 800337c:	2301      	movs	r3, #1
 800337e:	74fb      	strb	r3, [r7, #19]
        break;
 8003380:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003382:	8abb      	ldrh	r3, [r7, #20]
 8003384:	f023 030f 	bic.w	r3, r3, #15
 8003388:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800338a:	8abb      	ldrh	r3, [r7, #20]
 800338c:	105b      	asrs	r3, r3, #1
 800338e:	b29b      	uxth	r3, r3
 8003390:	f003 0307 	and.w	r3, r3, #7
 8003394:	b29a      	uxth	r2, r3
 8003396:	897b      	ldrh	r3, [r7, #10]
 8003398:	4313      	orrs	r3, r2
 800339a:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	897a      	ldrh	r2, [r7, #10]
 80033a2:	60da      	str	r2, [r3, #12]
 80033a4:	e069      	b.n	800347a <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 80033a6:	7dfb      	ldrb	r3, [r7, #23]
 80033a8:	2b08      	cmp	r3, #8
 80033aa:	d863      	bhi.n	8003474 <UART_SetConfig+0x2a8>
 80033ac:	a201      	add	r2, pc, #4	; (adr r2, 80033b4 <UART_SetConfig+0x1e8>)
 80033ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033b2:	bf00      	nop
 80033b4:	080033d9 	.word	0x080033d9
 80033b8:	080033f9 	.word	0x080033f9
 80033bc:	08003419 	.word	0x08003419
 80033c0:	08003475 	.word	0x08003475
 80033c4:	08003439 	.word	0x08003439
 80033c8:	08003475 	.word	0x08003475
 80033cc:	08003475 	.word	0x08003475
 80033d0:	08003475 	.word	0x08003475
 80033d4:	08003459 	.word	0x08003459
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80033d8:	f7ff fcb0 	bl	8002d3c <HAL_RCC_GetPCLK1Freq>
 80033dc:	4602      	mov	r2, r0
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	085b      	lsrs	r3, r3, #1
 80033e4:	441a      	add	r2, r3
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ee:	b29a      	uxth	r2, r3
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	60da      	str	r2, [r3, #12]
        break;
 80033f6:	e040      	b.n	800347a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80033f8:	f7ff fcc2 	bl	8002d80 <HAL_RCC_GetPCLK2Freq>
 80033fc:	4602      	mov	r2, r0
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	085b      	lsrs	r3, r3, #1
 8003404:	441a      	add	r2, r3
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	fbb2 f3f3 	udiv	r3, r2, r3
 800340e:	b29a      	uxth	r2, r3
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	60da      	str	r2, [r3, #12]
        break;
 8003416:	e030      	b.n	800347a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	085b      	lsrs	r3, r3, #1
 800341e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003422:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003426:	687a      	ldr	r2, [r7, #4]
 8003428:	6852      	ldr	r2, [r2, #4]
 800342a:	fbb3 f3f2 	udiv	r3, r3, r2
 800342e:	b29a      	uxth	r2, r3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	60da      	str	r2, [r3, #12]
        break;
 8003436:	e020      	b.n	800347a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003438:	f7ff fc0a 	bl	8002c50 <HAL_RCC_GetSysClockFreq>
 800343c:	4602      	mov	r2, r0
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	085b      	lsrs	r3, r3, #1
 8003444:	441a      	add	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	fbb2 f3f3 	udiv	r3, r2, r3
 800344e:	b29a      	uxth	r2, r3
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	60da      	str	r2, [r3, #12]
        break;
 8003456:	e010      	b.n	800347a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	085b      	lsrs	r3, r3, #1
 800345e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	fbb2 f3f3 	udiv	r3, r2, r3
 800346a:	b29a      	uxth	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	60da      	str	r2, [r3, #12]
        break;
 8003472:	e002      	b.n	800347a <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003474:	2301      	movs	r3, #1
 8003476:	74fb      	strb	r3, [r7, #19]
        break;
 8003478:	bf00      	nop
    }
  }

  return ret;
 800347a:	7cfb      	ldrb	r3, [r7, #19]

}
 800347c:	4618      	mov	r0, r3
 800347e:	3718      	adds	r7, #24
 8003480:	46bd      	mov	sp, r7
 8003482:	bd80      	pop	{r7, pc}
 8003484:	efff69f3 	.word	0xefff69f3
 8003488:	40013800 	.word	0x40013800
 800348c:	40021000 	.word	0x40021000
 8003490:	40004400 	.word	0x40004400
 8003494:	40004800 	.word	0x40004800

08003498 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003498:	b480      	push	{r7}
 800349a:	b083      	sub	sp, #12
 800349c:	af00      	add	r7, sp, #0
 800349e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a4:	f003 0301 	and.w	r3, r3, #1
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d00a      	beq.n	80034c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	430a      	orrs	r2, r1
 80034c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c6:	f003 0302 	and.w	r3, r3, #2
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d00a      	beq.n	80034e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	f003 0304 	and.w	r3, r3, #4
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d00a      	beq.n	8003506 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	430a      	orrs	r2, r1
 8003504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800350a:	f003 0308 	and.w	r3, r3, #8
 800350e:	2b00      	cmp	r3, #0
 8003510:	d00a      	beq.n	8003528 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	685b      	ldr	r3, [r3, #4]
 8003518:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	430a      	orrs	r2, r1
 8003526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800352c:	f003 0310 	and.w	r3, r3, #16
 8003530:	2b00      	cmp	r3, #0
 8003532:	d00a      	beq.n	800354a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689b      	ldr	r3, [r3, #8]
 800353a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	430a      	orrs	r2, r1
 8003548:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800354e:	f003 0320 	and.w	r3, r3, #32
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689b      	ldr	r3, [r3, #8]
 800355c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	430a      	orrs	r2, r1
 800356a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003570:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003574:	2b00      	cmp	r3, #0
 8003576:	d01a      	beq.n	80035ae <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	685b      	ldr	r3, [r3, #4]
 800357e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	430a      	orrs	r2, r1
 800358c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003592:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003596:	d10a      	bne.n	80035ae <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	430a      	orrs	r2, r1
 80035ac:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d00a      	beq.n	80035d0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	685b      	ldr	r3, [r3, #4]
 80035c0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	430a      	orrs	r2, r1
 80035ce:	605a      	str	r2, [r3, #4]
  }
}
 80035d0:	bf00      	nop
 80035d2:	370c      	adds	r7, #12
 80035d4:	46bd      	mov	sp, r7
 80035d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035da:	4770      	bx	lr

080035dc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af02      	add	r7, sp, #8
 80035e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 80035ee:	f7fd fb25 	bl	8000c3c <HAL_GetTick>
 80035f2:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 0308 	and.w	r3, r3, #8
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d10e      	bne.n	8003620 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003602:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	2200      	movs	r2, #0
 800360c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 f82c 	bl	800366e <UART_WaitOnFlagUntilTimeout>
 8003616:	4603      	mov	r3, r0
 8003618:	2b00      	cmp	r3, #0
 800361a:	d001      	beq.n	8003620 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e022      	b.n	8003666 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f003 0304 	and.w	r3, r3, #4
 800362a:	2b04      	cmp	r3, #4
 800362c:	d10e      	bne.n	800364c <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800362e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003632:	9300      	str	r3, [sp, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	2200      	movs	r2, #0
 8003638:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f000 f816 	bl	800366e <UART_WaitOnFlagUntilTimeout>
 8003642:	4603      	mov	r3, r0
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	e00c      	b.n	8003666 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2220      	movs	r2, #32
 8003650:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2220      	movs	r2, #32
 8003658:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	2200      	movs	r2, #0
 8003660:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003664:	2300      	movs	r3, #0
}
 8003666:	4618      	mov	r0, r3
 8003668:	3710      	adds	r7, #16
 800366a:	46bd      	mov	sp, r7
 800366c:	bd80      	pop	{r7, pc}

0800366e <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800366e:	b580      	push	{r7, lr}
 8003670:	b084      	sub	sp, #16
 8003672:	af00      	add	r7, sp, #0
 8003674:	60f8      	str	r0, [r7, #12]
 8003676:	60b9      	str	r1, [r7, #8]
 8003678:	603b      	str	r3, [r7, #0]
 800367a:	4613      	mov	r3, r2
 800367c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800367e:	e02c      	b.n	80036da <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003680:	69bb      	ldr	r3, [r7, #24]
 8003682:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003686:	d028      	beq.n	80036da <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003688:	69bb      	ldr	r3, [r7, #24]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d007      	beq.n	800369e <UART_WaitOnFlagUntilTimeout+0x30>
 800368e:	f7fd fad5 	bl	8000c3c <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	69ba      	ldr	r2, [r7, #24]
 800369a:	429a      	cmp	r2, r3
 800369c:	d21d      	bcs.n	80036da <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	681a      	ldr	r2, [r3, #0]
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036ac:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	689a      	ldr	r2, [r3, #8]
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f022 0201 	bic.w	r2, r2, #1
 80036bc:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	2220      	movs	r2, #32
 80036c2:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2220      	movs	r2, #32
 80036ca:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	2200      	movs	r2, #0
 80036d2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 80036d6:	2303      	movs	r3, #3
 80036d8:	e00f      	b.n	80036fa <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	69da      	ldr	r2, [r3, #28]
 80036e0:	68bb      	ldr	r3, [r7, #8]
 80036e2:	4013      	ands	r3, r2
 80036e4:	68ba      	ldr	r2, [r7, #8]
 80036e6:	429a      	cmp	r2, r3
 80036e8:	bf0c      	ite	eq
 80036ea:	2301      	moveq	r3, #1
 80036ec:	2300      	movne	r3, #0
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	461a      	mov	r2, r3
 80036f2:	79fb      	ldrb	r3, [r7, #7]
 80036f4:	429a      	cmp	r2, r3
 80036f6:	d0c3      	beq.n	8003680 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <ads_new>:
 * @brief  Creates new ads_t variable corresponding to a ads module
 * @param  *hi2c: I2C peripheral from the mcu
 * @param  addr: I2C address used by the module
 * @retval ads_t variable corresponding to the ads module
 */
ads_t* ads_new(I2C_HandleTypeDef *hi2c, uint8_t addr){
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	70fb      	strb	r3, [r7, #3]
	ads_t* ads = malloc(sizeof(*ads));
 800370e:	200c      	movs	r0, #12
 8003710:	f000 fcae 	bl	8004070 <malloc>
 8003714:	4603      	mov	r3, r0
 8003716:	60fb      	str	r3, [r7, #12]
	ads_init(ads, hi2c, addr);
 8003718:	78fb      	ldrb	r3, [r7, #3]
 800371a:	461a      	mov	r2, r3
 800371c:	6879      	ldr	r1, [r7, #4]
 800371e:	68f8      	ldr	r0, [r7, #12]
 8003720:	f000 f805 	bl	800372e <ads_init>
	return ads;
 8003724:	68fb      	ldr	r3, [r7, #12]
}
 8003726:	4618      	mov	r0, r3
 8003728:	3710      	adds	r7, #16
 800372a:	46bd      	mov	sp, r7
 800372c:	bd80      	pop	{r7, pc}

0800372e <ads_init>:
 * @param  *ads: ads variable corresponding to the module targeted
 * @param  *hi2c: I2C peripheral from the mcu
 * @param  addr: I2C address used by the module
 * @retval None
 */
void ads_init(ads_t *ads, I2C_HandleTypeDef *hi2c, uint8_t addr){
 800372e:	b480      	push	{r7}
 8003730:	b085      	sub	sp, #20
 8003732:	af00      	add	r7, sp, #0
 8003734:	60f8      	str	r0, [r7, #12]
 8003736:	60b9      	str	r1, [r7, #8]
 8003738:	4613      	mov	r3, r2
 800373a:	71fb      	strb	r3, [r7, #7]
	ads->hi2c = hi2c;
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	68ba      	ldr	r2, [r7, #8]
 8003740:	605a      	str	r2, [r3, #4]
	ads->addr = addr;
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	79fa      	ldrb	r2, [r7, #7]
 8003746:	701a      	strb	r2, [r3, #0]
}
 8003748:	bf00      	nop
 800374a:	3714      	adds	r7, #20
 800374c:	46bd      	mov	sp, r7
 800374e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003752:	4770      	bx	lr

08003754 <ads_write>:
 * @brief  Configures the ads module register before reading (mux and gain)
 * 		   sending 3 bytes using I2C
 * @param  *ads: variable corresponding to the module targeted
 * @retval None
 */
void ads_write(ads_t *ads){
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af02      	add	r7, sp, #8
 800375a:	6078      	str	r0, [r7, #4]
	uint8_t adsWrite[3];
	adsWrite[0] = 0x01;
 800375c:	2301      	movs	r3, #1
 800375e:	733b      	strb	r3, [r7, #12]
	adsWrite[1] = 0x80 + (ads->mux<<4) + (ads->gain<<1);
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	7a5b      	ldrb	r3, [r3, #9]
 8003764:	011b      	lsls	r3, r3, #4
 8003766:	b2da      	uxtb	r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	7a1b      	ldrb	r3, [r3, #8]
 800376c:	005b      	lsls	r3, r3, #1
 800376e:	b2db      	uxtb	r3, r3
 8003770:	4413      	add	r3, r2
 8003772:	b2db      	uxtb	r3, r3
 8003774:	3b80      	subs	r3, #128	; 0x80
 8003776:	b2db      	uxtb	r3, r3
 8003778:	737b      	strb	r3, [r7, #13]
	adsWrite[2] = 0x83;
 800377a:	2383      	movs	r3, #131	; 0x83
 800377c:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(ads->hi2c, ads->addr<<1, adsWrite, 3, 100);
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6858      	ldr	r0, [r3, #4]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	b29b      	uxth	r3, r3
 8003788:	005b      	lsls	r3, r3, #1
 800378a:	b299      	uxth	r1, r3
 800378c:	f107 020c 	add.w	r2, r7, #12
 8003790:	2364      	movs	r3, #100	; 0x64
 8003792:	9300      	str	r3, [sp, #0]
 8003794:	2303      	movs	r3, #3
 8003796:	f7fd fd83 	bl	80012a0 <HAL_I2C_Master_Transmit>
}
 800379a:	bf00      	nop
 800379c:	3710      	adds	r7, #16
 800379e:	46bd      	mov	sp, r7
 80037a0:	bd80      	pop	{r7, pc}
	...

080037a4 <ads_voltageConv>:
 * @brief  Auxiliary function. Converts a raw ADC reading to a voltage reading in mV
 * @param  reading: raw ADC reading
 * @param  gain: gain of the internal amplifier chosen
 * @retval Voltage reading in mV
 */
uint16_t ads_voltageConv(uint16_t reading, uint8_t gain){
 80037a4:	b480      	push	{r7}
 80037a6:	b085      	sub	sp, #20
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	4603      	mov	r3, r0
 80037ac:	460a      	mov	r2, r1
 80037ae:	80fb      	strh	r3, [r7, #6]
 80037b0:	4613      	mov	r3, r2
 80037b2:	717b      	strb	r3, [r7, #5]
	float factor;
	switch (gain){
 80037b4:	797b      	ldrb	r3, [r7, #5]
 80037b6:	2b04      	cmp	r3, #4
 80037b8:	d81f      	bhi.n	80037fa <ads_voltageConv+0x56>
 80037ba:	a201      	add	r2, pc, #4	; (adr r2, 80037c0 <ads_voltageConv+0x1c>)
 80037bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037c0:	080037d5 	.word	0x080037d5
 80037c4:	080037db 	.word	0x080037db
 80037c8:	080037e3 	.word	0x080037e3
 80037cc:	080037eb 	.word	0x080037eb
 80037d0:	080037f3 	.word	0x080037f3
		case 0: factor = 6144; break;
 80037d4:	4b19      	ldr	r3, [pc, #100]	; (800383c <ads_voltageConv+0x98>)
 80037d6:	60fb      	str	r3, [r7, #12]
 80037d8:	e013      	b.n	8003802 <ads_voltageConv+0x5e>
		case 1: factor = 4096; break;
 80037da:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 80037de:	60fb      	str	r3, [r7, #12]
 80037e0:	e00f      	b.n	8003802 <ads_voltageConv+0x5e>
		case 2: factor = 2048; break;
 80037e2:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80037e6:	60fb      	str	r3, [r7, #12]
 80037e8:	e00b      	b.n	8003802 <ads_voltageConv+0x5e>
		case 3: factor = 1024; break;
 80037ea:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 80037ee:	60fb      	str	r3, [r7, #12]
 80037f0:	e007      	b.n	8003802 <ads_voltageConv+0x5e>
		case 4: factor = 512; break;
 80037f2:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 80037f6:	60fb      	str	r3, [r7, #12]
 80037f8:	e003      	b.n	8003802 <ads_voltageConv+0x5e>
		default: factor = 256; break;
 80037fa:	f04f 4387 	mov.w	r3, #1132462080	; 0x43800000
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	bf00      	nop
	}
	factor = factor*reading/32768;
 8003802:	88fb      	ldrh	r3, [r7, #6]
 8003804:	ee07 3a90 	vmov	s15, r3
 8003808:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800380c:	edd7 7a03 	vldr	s15, [r7, #12]
 8003810:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003814:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8003840 <ads_voltageConv+0x9c>
 8003818:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800381c:	edc7 7a03 	vstr	s15, [r7, #12]
	return (uint16_t) factor;
 8003820:	edd7 7a03 	vldr	s15, [r7, #12]
 8003824:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003828:	ee17 3a90 	vmov	r3, s15
 800382c:	b29b      	uxth	r3, r3
}
 800382e:	4618      	mov	r0, r3
 8003830:	3714      	adds	r7, #20
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr
 800383a:	bf00      	nop
 800383c:	45c00000 	.word	0x45c00000
 8003840:	47000000 	.word	0x47000000

08003844 <ads_read>:
 * 			0: +-6144 mV	1: +-4096 mV
 * 			2: +-2048 mV	3: +-1024 mV
 * 			4: +-512 mV		5, 6, 7: +-256 mV
 * @retval Voltage read by the module (mV)
 */
uint16_t ads_read(ads_t *ads, uint8_t mux, uint8_t gain){
 8003844:	b580      	push	{r7, lr}
 8003846:	b086      	sub	sp, #24
 8003848:	af02      	add	r7, sp, #8
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	460b      	mov	r3, r1
 800384e:	70fb      	strb	r3, [r7, #3]
 8003850:	4613      	mov	r3, r2
 8003852:	70bb      	strb	r3, [r7, #2]
	if ((ads->mux != mux) & (ads->gain != gain)){
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	7a5b      	ldrb	r3, [r3, #9]
 8003858:	78fa      	ldrb	r2, [r7, #3]
 800385a:	429a      	cmp	r2, r3
 800385c:	bf14      	ite	ne
 800385e:	2301      	movne	r3, #1
 8003860:	2300      	moveq	r3, #0
 8003862:	b2da      	uxtb	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	7a1b      	ldrb	r3, [r3, #8]
 8003868:	78b9      	ldrb	r1, [r7, #2]
 800386a:	4299      	cmp	r1, r3
 800386c:	bf14      	ite	ne
 800386e:	2301      	movne	r3, #1
 8003870:	2300      	moveq	r3, #0
 8003872:	b2db      	uxtb	r3, r3
 8003874:	4013      	ands	r3, r2
 8003876:	b2db      	uxtb	r3, r3
 8003878:	2b00      	cmp	r3, #0
 800387a:	d008      	beq.n	800388e <ads_read+0x4a>
		ads->mux = mux;
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	78fa      	ldrb	r2, [r7, #3]
 8003880:	725a      	strb	r2, [r3, #9]
		ads->gain = gain;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	78ba      	ldrb	r2, [r7, #2]
 8003886:	721a      	strb	r2, [r3, #8]
		ads_write(ads);
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f7ff ff63 	bl	8003754 <ads_write>
	}

	uint8_t adsRead[2];
	HAL_I2C_Master_Transmit(ads->hi2c, ads->addr<<1, 0x00, 1, 100);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6858      	ldr	r0, [r3, #4]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	b29b      	uxth	r3, r3
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	b299      	uxth	r1, r3
 800389c:	2364      	movs	r3, #100	; 0x64
 800389e:	9300      	str	r3, [sp, #0]
 80038a0:	2301      	movs	r3, #1
 80038a2:	2200      	movs	r2, #0
 80038a4:	f7fd fcfc 	bl	80012a0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ads->hi2c, ads->addr<<1, adsRead, 2, 100);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6858      	ldr	r0, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	781b      	ldrb	r3, [r3, #0]
 80038b0:	b29b      	uxth	r3, r3
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	b299      	uxth	r1, r3
 80038b6:	f107 020c 	add.w	r2, r7, #12
 80038ba:	2364      	movs	r3, #100	; 0x64
 80038bc:	9300      	str	r3, [sp, #0]
 80038be:	2302      	movs	r3, #2
 80038c0:	f7fd fdee 	bl	80014a0 <HAL_I2C_Master_Receive>
	int16_t reading = (adsRead[0] << 8 | adsRead[1]);
 80038c4:	7b3b      	ldrb	r3, [r7, #12]
 80038c6:	021b      	lsls	r3, r3, #8
 80038c8:	b21a      	sxth	r2, r3
 80038ca:	7b7b      	ldrb	r3, [r7, #13]
 80038cc:	b21b      	sxth	r3, r3
 80038ce:	4313      	orrs	r3, r2
 80038d0:	81fb      	strh	r3, [r7, #14]
	if (reading < 0){
 80038d2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	da01      	bge.n	80038de <ads_read+0x9a>
	  reading = 0;
 80038da:	2300      	movs	r3, #0
 80038dc:	81fb      	strh	r3, [r7, #14]
	}
	return ads_voltageConv(reading, gain);
 80038de:	89fb      	ldrh	r3, [r7, #14]
 80038e0:	78ba      	ldrb	r2, [r7, #2]
 80038e2:	4611      	mov	r1, r2
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7ff ff5d 	bl	80037a4 <ads_voltageConv>
 80038ea:	4603      	mov	r3, r0
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	3710      	adds	r7, #16
 80038f0:	46bd      	mov	sp, r7
 80038f2:	bd80      	pop	{r7, pc}

080038f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b082      	sub	sp, #8
 80038f8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80038fa:	f7fd f945 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80038fe:	f000 f81f 	bl	8003940 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003902:	f000 f8dd 	bl	8003ac0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003906:	f000 f8ab 	bl	8003a60 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800390a:	f000 f86b 	bl	80039e4 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  ads_t* ads_1 = ads_new(&hi2c1, 0x48);
 800390e:	2148      	movs	r1, #72	; 0x48
 8003910:	4809      	ldr	r0, [pc, #36]	; (8003938 <main+0x44>)
 8003912:	f7ff fef6 	bl	8003702 <ads_new>
 8003916:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  tx_UART_int(&huart2, ads_read(ads_1, 4, 0), 100);
 8003918:	2200      	movs	r2, #0
 800391a:	2104      	movs	r1, #4
 800391c:	6878      	ldr	r0, [r7, #4]
 800391e:	f7ff ff91 	bl	8003844 <ads_read>
 8003922:	4603      	mov	r3, r0
 8003924:	2264      	movs	r2, #100	; 0x64
 8003926:	4619      	mov	r1, r3
 8003928:	4804      	ldr	r0, [pc, #16]	; (800393c <main+0x48>)
 800392a:	f000 f91b 	bl	8003b64 <tx_UART_int>
	  HAL_Delay(1);
 800392e:	2001      	movs	r0, #1
 8003930:	f7fd f990 	bl	8000c54 <HAL_Delay>
	  tx_UART_int(&huart2, ads_read(ads_1, 4, 0), 100);
 8003934:	e7f0      	b.n	8003918 <main+0x24>
 8003936:	bf00      	nop
 8003938:	200000a0 	.word	0x200000a0
 800393c:	200000ec 	.word	0x200000ec

08003940 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003940:	b580      	push	{r7, lr}
 8003942:	b096      	sub	sp, #88	; 0x58
 8003944:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003946:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800394a:	2228      	movs	r2, #40	; 0x28
 800394c:	2100      	movs	r1, #0
 800394e:	4618      	mov	r0, r3
 8003950:	f000 fb96 	bl	8004080 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003954:	f107 031c 	add.w	r3, r7, #28
 8003958:	2200      	movs	r2, #0
 800395a:	601a      	str	r2, [r3, #0]
 800395c:	605a      	str	r2, [r3, #4]
 800395e:	609a      	str	r2, [r3, #8]
 8003960:	60da      	str	r2, [r3, #12]
 8003962:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003964:	1d3b      	adds	r3, r7, #4
 8003966:	2200      	movs	r2, #0
 8003968:	601a      	str	r2, [r3, #0]
 800396a:	605a      	str	r2, [r3, #4]
 800396c:	609a      	str	r2, [r3, #8]
 800396e:	60da      	str	r2, [r3, #12]
 8003970:	611a      	str	r2, [r3, #16]
 8003972:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003974:	2302      	movs	r3, #2
 8003976:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003978:	2301      	movs	r3, #1
 800397a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800397c:	2310      	movs	r3, #16
 800397e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003980:	2300      	movs	r3, #0
 8003982:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003984:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003988:	4618      	mov	r0, r3
 800398a:	f7fe f8f7 	bl	8001b7c <HAL_RCC_OscConfig>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003994:	f000 f8de 	bl	8003b54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003998:	230f      	movs	r3, #15
 800399a:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800399c:	2300      	movs	r3, #0
 800399e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80039a0:	2300      	movs	r3, #0
 80039a2:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80039a4:	2300      	movs	r3, #0
 80039a6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80039a8:	2300      	movs	r3, #0
 80039aa:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80039ac:	f107 031c 	add.w	r3, r7, #28
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f7fe ffd0 	bl	8002958 <HAL_RCC_ClockConfig>
 80039b8:	4603      	mov	r3, r0
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d001      	beq.n	80039c2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80039be:	f000 f8c9 	bl	8003b54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80039c2:	2320      	movs	r3, #32
 80039c4:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 80039c6:	2300      	movs	r3, #0
 80039c8:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80039ca:	1d3b      	adds	r3, r7, #4
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7ff f9f9 	bl	8002dc4 <HAL_RCCEx_PeriphCLKConfig>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80039d8:	f000 f8bc 	bl	8003b54 <Error_Handler>
  }
}
 80039dc:	bf00      	nop
 80039de:	3758      	adds	r7, #88	; 0x58
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd80      	pop	{r7, pc}

080039e4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80039e8:	4b1b      	ldr	r3, [pc, #108]	; (8003a58 <MX_I2C1_Init+0x74>)
 80039ea:	4a1c      	ldr	r2, [pc, #112]	; (8003a5c <MX_I2C1_Init+0x78>)
 80039ec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 80039ee:	4b1a      	ldr	r3, [pc, #104]	; (8003a58 <MX_I2C1_Init+0x74>)
 80039f0:	f240 220b 	movw	r2, #523	; 0x20b
 80039f4:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80039f6:	4b18      	ldr	r3, [pc, #96]	; (8003a58 <MX_I2C1_Init+0x74>)
 80039f8:	2200      	movs	r2, #0
 80039fa:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80039fc:	4b16      	ldr	r3, [pc, #88]	; (8003a58 <MX_I2C1_Init+0x74>)
 80039fe:	2201      	movs	r2, #1
 8003a00:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003a02:	4b15      	ldr	r3, [pc, #84]	; (8003a58 <MX_I2C1_Init+0x74>)
 8003a04:	2200      	movs	r2, #0
 8003a06:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003a08:	4b13      	ldr	r3, [pc, #76]	; (8003a58 <MX_I2C1_Init+0x74>)
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003a0e:	4b12      	ldr	r3, [pc, #72]	; (8003a58 <MX_I2C1_Init+0x74>)
 8003a10:	2200      	movs	r2, #0
 8003a12:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003a14:	4b10      	ldr	r3, [pc, #64]	; (8003a58 <MX_I2C1_Init+0x74>)
 8003a16:	2200      	movs	r2, #0
 8003a18:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003a1a:	4b0f      	ldr	r3, [pc, #60]	; (8003a58 <MX_I2C1_Init+0x74>)
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003a20:	480d      	ldr	r0, [pc, #52]	; (8003a58 <MX_I2C1_Init+0x74>)
 8003a22:	f7fd fbad 	bl	8001180 <HAL_I2C_Init>
 8003a26:	4603      	mov	r3, r0
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d001      	beq.n	8003a30 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003a2c:	f000 f892 	bl	8003b54 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003a30:	2100      	movs	r1, #0
 8003a32:	4809      	ldr	r0, [pc, #36]	; (8003a58 <MX_I2C1_Init+0x74>)
 8003a34:	f7fe f808 	bl	8001a48 <HAL_I2CEx_ConfigAnalogFilter>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d001      	beq.n	8003a42 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003a3e:	f000 f889 	bl	8003b54 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003a42:	2100      	movs	r1, #0
 8003a44:	4804      	ldr	r0, [pc, #16]	; (8003a58 <MX_I2C1_Init+0x74>)
 8003a46:	f7fe f84a 	bl	8001ade <HAL_I2CEx_ConfigDigitalFilter>
 8003a4a:	4603      	mov	r3, r0
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d001      	beq.n	8003a54 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003a50:	f000 f880 	bl	8003b54 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003a54:	bf00      	nop
 8003a56:	bd80      	pop	{r7, pc}
 8003a58:	200000a0 	.word	0x200000a0
 8003a5c:	40005400 	.word	0x40005400

08003a60 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003a64:	4b14      	ldr	r3, [pc, #80]	; (8003ab8 <MX_USART2_UART_Init+0x58>)
 8003a66:	4a15      	ldr	r2, [pc, #84]	; (8003abc <MX_USART2_UART_Init+0x5c>)
 8003a68:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003a6a:	4b13      	ldr	r3, [pc, #76]	; (8003ab8 <MX_USART2_UART_Init+0x58>)
 8003a6c:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003a70:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003a72:	4b11      	ldr	r3, [pc, #68]	; (8003ab8 <MX_USART2_UART_Init+0x58>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003a78:	4b0f      	ldr	r3, [pc, #60]	; (8003ab8 <MX_USART2_UART_Init+0x58>)
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003a7e:	4b0e      	ldr	r3, [pc, #56]	; (8003ab8 <MX_USART2_UART_Init+0x58>)
 8003a80:	2200      	movs	r2, #0
 8003a82:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003a84:	4b0c      	ldr	r3, [pc, #48]	; (8003ab8 <MX_USART2_UART_Init+0x58>)
 8003a86:	220c      	movs	r2, #12
 8003a88:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a8a:	4b0b      	ldr	r3, [pc, #44]	; (8003ab8 <MX_USART2_UART_Init+0x58>)
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <MX_USART2_UART_Init+0x58>)
 8003a92:	2200      	movs	r2, #0
 8003a94:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003a96:	4b08      	ldr	r3, [pc, #32]	; (8003ab8 <MX_USART2_UART_Init+0x58>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003a9c:	4b06      	ldr	r3, [pc, #24]	; (8003ab8 <MX_USART2_UART_Init+0x58>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003aa2:	4805      	ldr	r0, [pc, #20]	; (8003ab8 <MX_USART2_UART_Init+0x58>)
 8003aa4:	f7ff fab4 	bl	8003010 <HAL_UART_Init>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003aae:	f000 f851 	bl	8003b54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003ab2:	bf00      	nop
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200000ec 	.word	0x200000ec
 8003abc:	40004400 	.word	0x40004400

08003ac0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b088      	sub	sp, #32
 8003ac4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ac6:	f107 030c 	add.w	r3, r7, #12
 8003aca:	2200      	movs	r2, #0
 8003acc:	601a      	str	r2, [r3, #0]
 8003ace:	605a      	str	r2, [r3, #4]
 8003ad0:	609a      	str	r2, [r3, #8]
 8003ad2:	60da      	str	r2, [r3, #12]
 8003ad4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003ad6:	4b1d      	ldr	r3, [pc, #116]	; (8003b4c <MX_GPIO_Init+0x8c>)
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	4a1c      	ldr	r2, [pc, #112]	; (8003b4c <MX_GPIO_Init+0x8c>)
 8003adc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003ae0:	6153      	str	r3, [r2, #20]
 8003ae2:	4b1a      	ldr	r3, [pc, #104]	; (8003b4c <MX_GPIO_Init+0x8c>)
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003aea:	60bb      	str	r3, [r7, #8]
 8003aec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aee:	4b17      	ldr	r3, [pc, #92]	; (8003b4c <MX_GPIO_Init+0x8c>)
 8003af0:	695b      	ldr	r3, [r3, #20]
 8003af2:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <MX_GPIO_Init+0x8c>)
 8003af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003af8:	6153      	str	r3, [r2, #20]
 8003afa:	4b14      	ldr	r3, [pc, #80]	; (8003b4c <MX_GPIO_Init+0x8c>)
 8003afc:	695b      	ldr	r3, [r3, #20]
 8003afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b02:	607b      	str	r3, [r7, #4]
 8003b04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003b06:	4b11      	ldr	r3, [pc, #68]	; (8003b4c <MX_GPIO_Init+0x8c>)
 8003b08:	695b      	ldr	r3, [r3, #20]
 8003b0a:	4a10      	ldr	r2, [pc, #64]	; (8003b4c <MX_GPIO_Init+0x8c>)
 8003b0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003b10:	6153      	str	r3, [r2, #20]
 8003b12:	4b0e      	ldr	r3, [pc, #56]	; (8003b4c <MX_GPIO_Init+0x8c>)
 8003b14:	695b      	ldr	r3, [r3, #20]
 8003b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003b1e:	2200      	movs	r2, #0
 8003b20:	2108      	movs	r1, #8
 8003b22:	480b      	ldr	r0, [pc, #44]	; (8003b50 <MX_GPIO_Init+0x90>)
 8003b24:	f7fd fb14 	bl	8001150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003b28:	2308      	movs	r3, #8
 8003b2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b2c:	2301      	movs	r3, #1
 8003b2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b34:	2300      	movs	r3, #0
 8003b36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003b38:	f107 030c 	add.w	r3, r7, #12
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4804      	ldr	r0, [pc, #16]	; (8003b50 <MX_GPIO_Init+0x90>)
 8003b40:	f7fd f990 	bl	8000e64 <HAL_GPIO_Init>

}
 8003b44:	bf00      	nop
 8003b46:	3720      	adds	r7, #32
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40021000 	.word	0x40021000
 8003b50:	48000400 	.word	0x48000400

08003b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b54:	b480      	push	{r7}
 8003b56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003b58:	bf00      	nop
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <tx_UART_int>:
#include "print_UART.h"
#include "math.h"

void tx_UART_int(UART_HandleTypeDef *huart, int data, uint32_t Timeout) {
 8003b64:	b5b0      	push	{r4, r5, r7, lr}
 8003b66:	b08a      	sub	sp, #40	; 0x28
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	60f8      	str	r0, [r7, #12]
 8003b6c:	60b9      	str	r1, [r7, #8]
 8003b6e:	607a      	str	r2, [r7, #4]
 8003b70:	466b      	mov	r3, sp
 8003b72:	461d      	mov	r5, r3
	uint8_t negativo = 0;
 8003b74:	2300      	movs	r3, #0
 8003b76:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (data < 0) {	// Si es negativo se pasa a positivo y activamos el flag
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	da05      	bge.n	8003b8c <tx_UART_int+0x28>
		data = -data;
 8003b80:	68bb      	ldr	r3, [r7, #8]
 8003b82:	425b      	negs	r3, r3
 8003b84:	60bb      	str	r3, [r7, #8]
		negativo = 1;
 8003b86:	2301      	movs	r3, #1
 8003b88:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	uint8_t size = size_int(data);
 8003b8c:	68b8      	ldr	r0, [r7, #8]
 8003b8e:	f000 f897 	bl	8003cc0 <size_int>
 8003b92:	4603      	mov	r3, r0
 8003b94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	char data_char[size];		// String de chars
 8003b98:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	3b01      	subs	r3, #1
 8003ba0:	623b      	str	r3, [r7, #32]
 8003ba2:	b2c1      	uxtb	r1, r0
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	f04f 0300 	mov.w	r3, #0
 8003bac:	f04f 0400 	mov.w	r4, #0
 8003bb0:	00d4      	lsls	r4, r2, #3
 8003bb2:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003bb6:	00cb      	lsls	r3, r1, #3
 8003bb8:	b2c1      	uxtb	r1, r0
 8003bba:	f04f 0200 	mov.w	r2, #0
 8003bbe:	f04f 0300 	mov.w	r3, #0
 8003bc2:	f04f 0400 	mov.w	r4, #0
 8003bc6:	00d4      	lsls	r4, r2, #3
 8003bc8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003bcc:	00cb      	lsls	r3, r1, #3
 8003bce:	4603      	mov	r3, r0
 8003bd0:	3307      	adds	r3, #7
 8003bd2:	08db      	lsrs	r3, r3, #3
 8003bd4:	00db      	lsls	r3, r3, #3
 8003bd6:	ebad 0d03 	sub.w	sp, sp, r3
 8003bda:	466b      	mov	r3, sp
 8003bdc:	3300      	adds	r3, #0
 8003bde:	61fb      	str	r3, [r7, #28]
	sprintf(data_char,"%d", data);	// Cada numero del int en un char
 8003be0:	69fb      	ldr	r3, [r7, #28]
 8003be2:	68ba      	ldr	r2, [r7, #8]
 8003be4:	4935      	ldr	r1, [pc, #212]	; (8003cbc <tx_UART_int+0x158>)
 8003be6:	4618      	mov	r0, r3
 8003be8:	f000 fb0a 	bl	8004200 <siprintf>

	size = size+negativo+2;
 8003bec:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 8003bf0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003bf4:	4413      	add	r3, r2
 8003bf6:	b2db      	uxtb	r3, r3
 8003bf8:	3302      	adds	r3, #2
 8003bfa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t int_str[size];
 8003bfe:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8003c02:	4603      	mov	r3, r0
 8003c04:	3b01      	subs	r3, #1
 8003c06:	61bb      	str	r3, [r7, #24]
 8003c08:	b2c1      	uxtb	r1, r0
 8003c0a:	f04f 0200 	mov.w	r2, #0
 8003c0e:	f04f 0300 	mov.w	r3, #0
 8003c12:	f04f 0400 	mov.w	r4, #0
 8003c16:	00d4      	lsls	r4, r2, #3
 8003c18:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003c1c:	00cb      	lsls	r3, r1, #3
 8003c1e:	b2c1      	uxtb	r1, r0
 8003c20:	f04f 0200 	mov.w	r2, #0
 8003c24:	f04f 0300 	mov.w	r3, #0
 8003c28:	f04f 0400 	mov.w	r4, #0
 8003c2c:	00d4      	lsls	r4, r2, #3
 8003c2e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003c32:	00cb      	lsls	r3, r1, #3
 8003c34:	4603      	mov	r3, r0
 8003c36:	3307      	adds	r3, #7
 8003c38:	08db      	lsrs	r3, r3, #3
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	ebad 0d03 	sub.w	sp, sp, r3
 8003c40:	466b      	mov	r3, sp
 8003c42:	3300      	adds	r3, #0
 8003c44:	617b      	str	r3, [r7, #20]

	int_str[size-1] = '\r';
 8003c46:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	697a      	ldr	r2, [r7, #20]
 8003c4e:	210d      	movs	r1, #13
 8003c50:	54d1      	strb	r1, [r2, r3]
	int_str[size-2] = '\n';
 8003c52:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c56:	3b02      	subs	r3, #2
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	210a      	movs	r1, #10
 8003c5c:	54d1      	strb	r1, [r2, r3]

	for(int8_t i=(size-3); i>=0; i--){
 8003c5e:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8003c62:	3b03      	subs	r3, #3
 8003c64:	b2db      	uxtb	r3, r3
 8003c66:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003c6a:	e011      	b.n	8003c90 <tx_UART_int+0x12c>
		int_str[i] = (uint8_t) data_char[i-negativo];
 8003c6c:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 8003c70:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c74:	1ad2      	subs	r2, r2, r3
 8003c76:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8003c7a:	69f9      	ldr	r1, [r7, #28]
 8003c7c:	5c89      	ldrb	r1, [r1, r2]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	54d1      	strb	r1, [r2, r3]
	for(int8_t i=(size-3); i>=0; i--){
 8003c82:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8003c86:	b2db      	uxtb	r3, r3
 8003c88:	3b01      	subs	r3, #1
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003c90:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	dae9      	bge.n	8003c6c <tx_UART_int+0x108>
	}
	if (negativo == 1) {
 8003c98:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d102      	bne.n	8003ca6 <tx_UART_int+0x142>
		int_str[0] = '-';
 8003ca0:	697b      	ldr	r3, [r7, #20]
 8003ca2:	222d      	movs	r2, #45	; 0x2d
 8003ca4:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(huart,int_str,sizeof(int_str), 10);	// TX por UART del array de uint8_t
 8003ca6:	6979      	ldr	r1, [r7, #20]
 8003ca8:	b282      	uxth	r2, r0
 8003caa:	230a      	movs	r3, #10
 8003cac:	68f8      	ldr	r0, [r7, #12]
 8003cae:	f7ff fa00 	bl	80030b2 <HAL_UART_Transmit>
 8003cb2:	46ad      	mov	sp, r5
}
 8003cb4:	bf00      	nop
 8003cb6:	3728      	adds	r7, #40	; 0x28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	bdb0      	pop	{r4, r5, r7, pc}
 8003cbc:	08004f4c 	.word	0x08004f4c

08003cc0 <size_int>:
	byte_str[8] = '\r';
	byte_str[9] = '\n';
	HAL_UART_Transmit(huart, byte_str, sizeof(byte_str), 10);
}

uint8_t size_int(int data){
 8003cc0:	b590      	push	{r4, r7, lr}
 8003cc2:	b085      	sub	sp, #20
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	6078      	str	r0, [r7, #4]
	uint8_t size;
	if (data==0){
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d102      	bne.n	8003cd4 <size_int+0x14>
		size = 1;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	73fb      	strb	r3, [r7, #15]
 8003cd2:	e021      	b.n	8003d18 <size_int+0x58>
	}
	else {
		size = floor(log10(data))+1;
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f7fc fc1d 	bl	8000514 <__aeabi_i2d>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	460c      	mov	r4, r1
 8003cde:	ec44 3b10 	vmov	d0, r3, r4
 8003ce2:	f000 fe61 	bl	80049a8 <log10>
 8003ce6:	eeb0 7a40 	vmov.f32	s14, s0
 8003cea:	eef0 7a60 	vmov.f32	s15, s1
 8003cee:	eeb0 0a47 	vmov.f32	s0, s14
 8003cf2:	eef0 0a67 	vmov.f32	s1, s15
 8003cf6:	f000 fdd3 	bl	80048a0 <floor>
 8003cfa:	ec51 0b10 	vmov	r0, r1, d0
 8003cfe:	f04f 0200 	mov.w	r2, #0
 8003d02:	4b08      	ldr	r3, [pc, #32]	; (8003d24 <size_int+0x64>)
 8003d04:	f7fc faba 	bl	800027c <__adddf3>
 8003d08:	4603      	mov	r3, r0
 8003d0a:	460c      	mov	r4, r1
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	4621      	mov	r1, r4
 8003d10:	f7fc ff1a 	bl	8000b48 <__aeabi_d2uiz>
 8003d14:	4603      	mov	r3, r0
 8003d16:	73fb      	strb	r3, [r7, #15]
	}
	return size;
 8003d18:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3714      	adds	r7, #20
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd90      	pop	{r4, r7, pc}
 8003d22:	bf00      	nop
 8003d24:	3ff00000 	.word	0x3ff00000

08003d28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d28:	b480      	push	{r7}
 8003d2a:	b083      	sub	sp, #12
 8003d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d2e:	4b0f      	ldr	r3, [pc, #60]	; (8003d6c <HAL_MspInit+0x44>)
 8003d30:	699b      	ldr	r3, [r3, #24]
 8003d32:	4a0e      	ldr	r2, [pc, #56]	; (8003d6c <HAL_MspInit+0x44>)
 8003d34:	f043 0301 	orr.w	r3, r3, #1
 8003d38:	6193      	str	r3, [r2, #24]
 8003d3a:	4b0c      	ldr	r3, [pc, #48]	; (8003d6c <HAL_MspInit+0x44>)
 8003d3c:	699b      	ldr	r3, [r3, #24]
 8003d3e:	f003 0301 	and.w	r3, r3, #1
 8003d42:	607b      	str	r3, [r7, #4]
 8003d44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d46:	4b09      	ldr	r3, [pc, #36]	; (8003d6c <HAL_MspInit+0x44>)
 8003d48:	69db      	ldr	r3, [r3, #28]
 8003d4a:	4a08      	ldr	r2, [pc, #32]	; (8003d6c <HAL_MspInit+0x44>)
 8003d4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d50:	61d3      	str	r3, [r2, #28]
 8003d52:	4b06      	ldr	r3, [pc, #24]	; (8003d6c <HAL_MspInit+0x44>)
 8003d54:	69db      	ldr	r3, [r3, #28]
 8003d56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d5a:	603b      	str	r3, [r7, #0]
 8003d5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d5e:	bf00      	nop
 8003d60:	370c      	adds	r7, #12
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
 8003d6a:	bf00      	nop
 8003d6c:	40021000 	.word	0x40021000

08003d70 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	b08a      	sub	sp, #40	; 0x28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d78:	f107 0314 	add.w	r3, r7, #20
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	601a      	str	r2, [r3, #0]
 8003d80:	605a      	str	r2, [r3, #4]
 8003d82:	609a      	str	r2, [r3, #8]
 8003d84:	60da      	str	r2, [r3, #12]
 8003d86:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a17      	ldr	r2, [pc, #92]	; (8003dec <HAL_I2C_MspInit+0x7c>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d127      	bne.n	8003de2 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003d92:	4b17      	ldr	r3, [pc, #92]	; (8003df0 <HAL_I2C_MspInit+0x80>)
 8003d94:	695b      	ldr	r3, [r3, #20]
 8003d96:	4a16      	ldr	r2, [pc, #88]	; (8003df0 <HAL_I2C_MspInit+0x80>)
 8003d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d9c:	6153      	str	r3, [r2, #20]
 8003d9e:	4b14      	ldr	r3, [pc, #80]	; (8003df0 <HAL_I2C_MspInit+0x80>)
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003daa:	23c0      	movs	r3, #192	; 0xc0
 8003dac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003dae:	2312      	movs	r3, #18
 8003db0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003db2:	2301      	movs	r3, #1
 8003db4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003db6:	2303      	movs	r3, #3
 8003db8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003dba:	2304      	movs	r3, #4
 8003dbc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dbe:	f107 0314 	add.w	r3, r7, #20
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	480b      	ldr	r0, [pc, #44]	; (8003df4 <HAL_I2C_MspInit+0x84>)
 8003dc6:	f7fd f84d 	bl	8000e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003dca:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <HAL_I2C_MspInit+0x80>)
 8003dcc:	69db      	ldr	r3, [r3, #28]
 8003dce:	4a08      	ldr	r2, [pc, #32]	; (8003df0 <HAL_I2C_MspInit+0x80>)
 8003dd0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003dd4:	61d3      	str	r3, [r2, #28]
 8003dd6:	4b06      	ldr	r3, [pc, #24]	; (8003df0 <HAL_I2C_MspInit+0x80>)
 8003dd8:	69db      	ldr	r3, [r3, #28]
 8003dda:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003dde:	60fb      	str	r3, [r7, #12]
 8003de0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003de2:	bf00      	nop
 8003de4:	3728      	adds	r7, #40	; 0x28
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	40005400 	.word	0x40005400
 8003df0:	40021000 	.word	0x40021000
 8003df4:	48000400 	.word	0x48000400

08003df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b08a      	sub	sp, #40	; 0x28
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003e00:	f107 0314 	add.w	r3, r7, #20
 8003e04:	2200      	movs	r2, #0
 8003e06:	601a      	str	r2, [r3, #0]
 8003e08:	605a      	str	r2, [r3, #4]
 8003e0a:	609a      	str	r2, [r3, #8]
 8003e0c:	60da      	str	r2, [r3, #12]
 8003e0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a18      	ldr	r2, [pc, #96]	; (8003e78 <HAL_UART_MspInit+0x80>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d129      	bne.n	8003e6e <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e1a:	4b18      	ldr	r3, [pc, #96]	; (8003e7c <HAL_UART_MspInit+0x84>)
 8003e1c:	69db      	ldr	r3, [r3, #28]
 8003e1e:	4a17      	ldr	r2, [pc, #92]	; (8003e7c <HAL_UART_MspInit+0x84>)
 8003e20:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e24:	61d3      	str	r3, [r2, #28]
 8003e26:	4b15      	ldr	r3, [pc, #84]	; (8003e7c <HAL_UART_MspInit+0x84>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e2e:	613b      	str	r3, [r7, #16]
 8003e30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e32:	4b12      	ldr	r3, [pc, #72]	; (8003e7c <HAL_UART_MspInit+0x84>)
 8003e34:	695b      	ldr	r3, [r3, #20]
 8003e36:	4a11      	ldr	r2, [pc, #68]	; (8003e7c <HAL_UART_MspInit+0x84>)
 8003e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003e3c:	6153      	str	r3, [r2, #20]
 8003e3e:	4b0f      	ldr	r3, [pc, #60]	; (8003e7c <HAL_UART_MspInit+0x84>)
 8003e40:	695b      	ldr	r3, [r3, #20]
 8003e42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e46:	60fb      	str	r3, [r7, #12]
 8003e48:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8003e4a:	f248 0304 	movw	r3, #32772	; 0x8004
 8003e4e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e50:	2302      	movs	r3, #2
 8003e52:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e54:	2300      	movs	r3, #0
 8003e56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e58:	2303      	movs	r3, #3
 8003e5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003e5c:	2307      	movs	r3, #7
 8003e5e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e60:	f107 0314 	add.w	r3, r7, #20
 8003e64:	4619      	mov	r1, r3
 8003e66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e6a:	f7fc fffb 	bl	8000e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e6e:	bf00      	nop
 8003e70:	3728      	adds	r7, #40	; 0x28
 8003e72:	46bd      	mov	sp, r7
 8003e74:	bd80      	pop	{r7, pc}
 8003e76:	bf00      	nop
 8003e78:	40004400 	.word	0x40004400
 8003e7c:	40021000 	.word	0x40021000

08003e80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr

08003e8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e8e:	b480      	push	{r7}
 8003e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e92:	e7fe      	b.n	8003e92 <HardFault_Handler+0x4>

08003e94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e94:	b480      	push	{r7}
 8003e96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e98:	e7fe      	b.n	8003e98 <MemManage_Handler+0x4>

08003e9a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e9a:	b480      	push	{r7}
 8003e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e9e:	e7fe      	b.n	8003e9e <BusFault_Handler+0x4>

08003ea0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ea4:	e7fe      	b.n	8003ea4 <UsageFault_Handler+0x4>

08003ea6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003ea6:	b480      	push	{r7}
 8003ea8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003eaa:	bf00      	nop
 8003eac:	46bd      	mov	sp, r7
 8003eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb2:	4770      	bx	lr

08003eb4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003eb4:	b480      	push	{r7}
 8003eb6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003eb8:	bf00      	nop
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr

08003ec2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003ec6:	bf00      	nop
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ece:	4770      	bx	lr

08003ed0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ed4:	f7fc fe9e 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003ed8:	bf00      	nop
 8003eda:	bd80      	pop	{r7, pc}

08003edc <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b084      	sub	sp, #16
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003ee4:	4b11      	ldr	r3, [pc, #68]	; (8003f2c <_sbrk+0x50>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d102      	bne.n	8003ef2 <_sbrk+0x16>
		heap_end = &end;
 8003eec:	4b0f      	ldr	r3, [pc, #60]	; (8003f2c <_sbrk+0x50>)
 8003eee:	4a10      	ldr	r2, [pc, #64]	; (8003f30 <_sbrk+0x54>)
 8003ef0:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003ef2:	4b0e      	ldr	r3, [pc, #56]	; (8003f2c <_sbrk+0x50>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	; (8003f2c <_sbrk+0x50>)
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	4413      	add	r3, r2
 8003f00:	466a      	mov	r2, sp
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d907      	bls.n	8003f16 <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003f06:	f000 f889 	bl	800401c <__errno>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	230c      	movs	r3, #12
 8003f0e:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003f10:	f04f 33ff 	mov.w	r3, #4294967295
 8003f14:	e006      	b.n	8003f24 <_sbrk+0x48>
	}

	heap_end += incr;
 8003f16:	4b05      	ldr	r3, [pc, #20]	; (8003f2c <_sbrk+0x50>)
 8003f18:	681a      	ldr	r2, [r3, #0]
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	4413      	add	r3, r2
 8003f1e:	4a03      	ldr	r2, [pc, #12]	; (8003f2c <_sbrk+0x50>)
 8003f20:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003f22:	68fb      	ldr	r3, [r7, #12]
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	3710      	adds	r7, #16
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	20000090 	.word	0x20000090
 8003f30:	20000160 	.word	0x20000160

08003f34 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f38:	4b1f      	ldr	r3, [pc, #124]	; (8003fb8 <SystemInit+0x84>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	4a1e      	ldr	r2, [pc, #120]	; (8003fb8 <SystemInit+0x84>)
 8003f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003f48:	4b1c      	ldr	r3, [pc, #112]	; (8003fbc <SystemInit+0x88>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4a1b      	ldr	r2, [pc, #108]	; (8003fbc <SystemInit+0x88>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003f54:	4b19      	ldr	r3, [pc, #100]	; (8003fbc <SystemInit+0x88>)
 8003f56:	685a      	ldr	r2, [r3, #4]
 8003f58:	4918      	ldr	r1, [pc, #96]	; (8003fbc <SystemInit+0x88>)
 8003f5a:	4b19      	ldr	r3, [pc, #100]	; (8003fc0 <SystemInit+0x8c>)
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003f60:	4b16      	ldr	r3, [pc, #88]	; (8003fbc <SystemInit+0x88>)
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a15      	ldr	r2, [pc, #84]	; (8003fbc <SystemInit+0x88>)
 8003f66:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003f6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f6e:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f70:	4b12      	ldr	r3, [pc, #72]	; (8003fbc <SystemInit+0x88>)
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a11      	ldr	r2, [pc, #68]	; (8003fbc <SystemInit+0x88>)
 8003f76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f7a:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003f7c:	4b0f      	ldr	r3, [pc, #60]	; (8003fbc <SystemInit+0x88>)
 8003f7e:	685b      	ldr	r3, [r3, #4]
 8003f80:	4a0e      	ldr	r2, [pc, #56]	; (8003fbc <SystemInit+0x88>)
 8003f82:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003f86:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003f88:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <SystemInit+0x88>)
 8003f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f8c:	4a0b      	ldr	r2, [pc, #44]	; (8003fbc <SystemInit+0x88>)
 8003f8e:	f023 030f 	bic.w	r3, r3, #15
 8003f92:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003f94:	4b09      	ldr	r3, [pc, #36]	; (8003fbc <SystemInit+0x88>)
 8003f96:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f98:	4908      	ldr	r1, [pc, #32]	; (8003fbc <SystemInit+0x88>)
 8003f9a:	4b0a      	ldr	r3, [pc, #40]	; (8003fc4 <SystemInit+0x90>)
 8003f9c:	4013      	ands	r3, r2
 8003f9e:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003fa0:	4b06      	ldr	r3, [pc, #24]	; (8003fbc <SystemInit+0x88>)
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003fa6:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <SystemInit+0x84>)
 8003fa8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003fac:	609a      	str	r2, [r3, #8]
#endif
}
 8003fae:	bf00      	nop
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb6:	4770      	bx	lr
 8003fb8:	e000ed00 	.word	0xe000ed00
 8003fbc:	40021000 	.word	0x40021000
 8003fc0:	f87fc00c 	.word	0xf87fc00c
 8003fc4:	ff00fccc 	.word	0xff00fccc

08003fc8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003fc8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004000 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003fcc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003fce:	e003      	b.n	8003fd8 <LoopCopyDataInit>

08003fd0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003fd2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003fd4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003fd6:	3104      	adds	r1, #4

08003fd8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003fd8:	480b      	ldr	r0, [pc, #44]	; (8004008 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003fda:	4b0c      	ldr	r3, [pc, #48]	; (800400c <LoopForever+0xe>)
	adds	r2, r0, r1
 8003fdc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003fde:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003fe0:	d3f6      	bcc.n	8003fd0 <CopyDataInit>
	ldr	r2, =_sbss
 8003fe2:	4a0b      	ldr	r2, [pc, #44]	; (8004010 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003fe4:	e002      	b.n	8003fec <LoopFillZerobss>

08003fe6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003fe6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003fe8:	f842 3b04 	str.w	r3, [r2], #4

08003fec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003fec:	4b09      	ldr	r3, [pc, #36]	; (8004014 <LoopForever+0x16>)
	cmp	r2, r3
 8003fee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003ff0:	d3f9      	bcc.n	8003fe6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003ff2:	f7ff ff9f 	bl	8003f34 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003ff6:	f000 f817 	bl	8004028 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ffa:	f7ff fc7b 	bl	80038f4 <main>

08003ffe <LoopForever>:

LoopForever:
    b LoopForever
 8003ffe:	e7fe      	b.n	8003ffe <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004000:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8004004:	08004fcc 	.word	0x08004fcc
	ldr	r0, =_sdata
 8004008:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800400c:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 8004010:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 8004014:	20000160 	.word	0x20000160

08004018 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004018:	e7fe      	b.n	8004018 <ADC1_2_IRQHandler>
	...

0800401c <__errno>:
 800401c:	4b01      	ldr	r3, [pc, #4]	; (8004024 <__errno+0x8>)
 800401e:	6818      	ldr	r0, [r3, #0]
 8004020:	4770      	bx	lr
 8004022:	bf00      	nop
 8004024:	2000000c 	.word	0x2000000c

08004028 <__libc_init_array>:
 8004028:	b570      	push	{r4, r5, r6, lr}
 800402a:	4e0d      	ldr	r6, [pc, #52]	; (8004060 <__libc_init_array+0x38>)
 800402c:	4c0d      	ldr	r4, [pc, #52]	; (8004064 <__libc_init_array+0x3c>)
 800402e:	1ba4      	subs	r4, r4, r6
 8004030:	10a4      	asrs	r4, r4, #2
 8004032:	2500      	movs	r5, #0
 8004034:	42a5      	cmp	r5, r4
 8004036:	d109      	bne.n	800404c <__libc_init_array+0x24>
 8004038:	4e0b      	ldr	r6, [pc, #44]	; (8004068 <__libc_init_array+0x40>)
 800403a:	4c0c      	ldr	r4, [pc, #48]	; (800406c <__libc_init_array+0x44>)
 800403c:	f000 ff7a 	bl	8004f34 <_init>
 8004040:	1ba4      	subs	r4, r4, r6
 8004042:	10a4      	asrs	r4, r4, #2
 8004044:	2500      	movs	r5, #0
 8004046:	42a5      	cmp	r5, r4
 8004048:	d105      	bne.n	8004056 <__libc_init_array+0x2e>
 800404a:	bd70      	pop	{r4, r5, r6, pc}
 800404c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004050:	4798      	blx	r3
 8004052:	3501      	adds	r5, #1
 8004054:	e7ee      	b.n	8004034 <__libc_init_array+0xc>
 8004056:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800405a:	4798      	blx	r3
 800405c:	3501      	adds	r5, #1
 800405e:	e7f2      	b.n	8004046 <__libc_init_array+0x1e>
 8004060:	08004fc4 	.word	0x08004fc4
 8004064:	08004fc4 	.word	0x08004fc4
 8004068:	08004fc4 	.word	0x08004fc4
 800406c:	08004fc8 	.word	0x08004fc8

08004070 <malloc>:
 8004070:	4b02      	ldr	r3, [pc, #8]	; (800407c <malloc+0xc>)
 8004072:	4601      	mov	r1, r0
 8004074:	6818      	ldr	r0, [r3, #0]
 8004076:	f000 b859 	b.w	800412c <_malloc_r>
 800407a:	bf00      	nop
 800407c:	2000000c 	.word	0x2000000c

08004080 <memset>:
 8004080:	4402      	add	r2, r0
 8004082:	4603      	mov	r3, r0
 8004084:	4293      	cmp	r3, r2
 8004086:	d100      	bne.n	800408a <memset+0xa>
 8004088:	4770      	bx	lr
 800408a:	f803 1b01 	strb.w	r1, [r3], #1
 800408e:	e7f9      	b.n	8004084 <memset+0x4>

08004090 <_free_r>:
 8004090:	b538      	push	{r3, r4, r5, lr}
 8004092:	4605      	mov	r5, r0
 8004094:	2900      	cmp	r1, #0
 8004096:	d045      	beq.n	8004124 <_free_r+0x94>
 8004098:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800409c:	1f0c      	subs	r4, r1, #4
 800409e:	2b00      	cmp	r3, #0
 80040a0:	bfb8      	it	lt
 80040a2:	18e4      	addlt	r4, r4, r3
 80040a4:	f000 f8cc 	bl	8004240 <__malloc_lock>
 80040a8:	4a1f      	ldr	r2, [pc, #124]	; (8004128 <_free_r+0x98>)
 80040aa:	6813      	ldr	r3, [r2, #0]
 80040ac:	4610      	mov	r0, r2
 80040ae:	b933      	cbnz	r3, 80040be <_free_r+0x2e>
 80040b0:	6063      	str	r3, [r4, #4]
 80040b2:	6014      	str	r4, [r2, #0]
 80040b4:	4628      	mov	r0, r5
 80040b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80040ba:	f000 b8c2 	b.w	8004242 <__malloc_unlock>
 80040be:	42a3      	cmp	r3, r4
 80040c0:	d90c      	bls.n	80040dc <_free_r+0x4c>
 80040c2:	6821      	ldr	r1, [r4, #0]
 80040c4:	1862      	adds	r2, r4, r1
 80040c6:	4293      	cmp	r3, r2
 80040c8:	bf04      	itt	eq
 80040ca:	681a      	ldreq	r2, [r3, #0]
 80040cc:	685b      	ldreq	r3, [r3, #4]
 80040ce:	6063      	str	r3, [r4, #4]
 80040d0:	bf04      	itt	eq
 80040d2:	1852      	addeq	r2, r2, r1
 80040d4:	6022      	streq	r2, [r4, #0]
 80040d6:	6004      	str	r4, [r0, #0]
 80040d8:	e7ec      	b.n	80040b4 <_free_r+0x24>
 80040da:	4613      	mov	r3, r2
 80040dc:	685a      	ldr	r2, [r3, #4]
 80040de:	b10a      	cbz	r2, 80040e4 <_free_r+0x54>
 80040e0:	42a2      	cmp	r2, r4
 80040e2:	d9fa      	bls.n	80040da <_free_r+0x4a>
 80040e4:	6819      	ldr	r1, [r3, #0]
 80040e6:	1858      	adds	r0, r3, r1
 80040e8:	42a0      	cmp	r0, r4
 80040ea:	d10b      	bne.n	8004104 <_free_r+0x74>
 80040ec:	6820      	ldr	r0, [r4, #0]
 80040ee:	4401      	add	r1, r0
 80040f0:	1858      	adds	r0, r3, r1
 80040f2:	4282      	cmp	r2, r0
 80040f4:	6019      	str	r1, [r3, #0]
 80040f6:	d1dd      	bne.n	80040b4 <_free_r+0x24>
 80040f8:	6810      	ldr	r0, [r2, #0]
 80040fa:	6852      	ldr	r2, [r2, #4]
 80040fc:	605a      	str	r2, [r3, #4]
 80040fe:	4401      	add	r1, r0
 8004100:	6019      	str	r1, [r3, #0]
 8004102:	e7d7      	b.n	80040b4 <_free_r+0x24>
 8004104:	d902      	bls.n	800410c <_free_r+0x7c>
 8004106:	230c      	movs	r3, #12
 8004108:	602b      	str	r3, [r5, #0]
 800410a:	e7d3      	b.n	80040b4 <_free_r+0x24>
 800410c:	6820      	ldr	r0, [r4, #0]
 800410e:	1821      	adds	r1, r4, r0
 8004110:	428a      	cmp	r2, r1
 8004112:	bf04      	itt	eq
 8004114:	6811      	ldreq	r1, [r2, #0]
 8004116:	6852      	ldreq	r2, [r2, #4]
 8004118:	6062      	str	r2, [r4, #4]
 800411a:	bf04      	itt	eq
 800411c:	1809      	addeq	r1, r1, r0
 800411e:	6021      	streq	r1, [r4, #0]
 8004120:	605c      	str	r4, [r3, #4]
 8004122:	e7c7      	b.n	80040b4 <_free_r+0x24>
 8004124:	bd38      	pop	{r3, r4, r5, pc}
 8004126:	bf00      	nop
 8004128:	20000094 	.word	0x20000094

0800412c <_malloc_r>:
 800412c:	b570      	push	{r4, r5, r6, lr}
 800412e:	1ccd      	adds	r5, r1, #3
 8004130:	f025 0503 	bic.w	r5, r5, #3
 8004134:	3508      	adds	r5, #8
 8004136:	2d0c      	cmp	r5, #12
 8004138:	bf38      	it	cc
 800413a:	250c      	movcc	r5, #12
 800413c:	2d00      	cmp	r5, #0
 800413e:	4606      	mov	r6, r0
 8004140:	db01      	blt.n	8004146 <_malloc_r+0x1a>
 8004142:	42a9      	cmp	r1, r5
 8004144:	d903      	bls.n	800414e <_malloc_r+0x22>
 8004146:	230c      	movs	r3, #12
 8004148:	6033      	str	r3, [r6, #0]
 800414a:	2000      	movs	r0, #0
 800414c:	bd70      	pop	{r4, r5, r6, pc}
 800414e:	f000 f877 	bl	8004240 <__malloc_lock>
 8004152:	4a21      	ldr	r2, [pc, #132]	; (80041d8 <_malloc_r+0xac>)
 8004154:	6814      	ldr	r4, [r2, #0]
 8004156:	4621      	mov	r1, r4
 8004158:	b991      	cbnz	r1, 8004180 <_malloc_r+0x54>
 800415a:	4c20      	ldr	r4, [pc, #128]	; (80041dc <_malloc_r+0xb0>)
 800415c:	6823      	ldr	r3, [r4, #0]
 800415e:	b91b      	cbnz	r3, 8004168 <_malloc_r+0x3c>
 8004160:	4630      	mov	r0, r6
 8004162:	f000 f83d 	bl	80041e0 <_sbrk_r>
 8004166:	6020      	str	r0, [r4, #0]
 8004168:	4629      	mov	r1, r5
 800416a:	4630      	mov	r0, r6
 800416c:	f000 f838 	bl	80041e0 <_sbrk_r>
 8004170:	1c43      	adds	r3, r0, #1
 8004172:	d124      	bne.n	80041be <_malloc_r+0x92>
 8004174:	230c      	movs	r3, #12
 8004176:	6033      	str	r3, [r6, #0]
 8004178:	4630      	mov	r0, r6
 800417a:	f000 f862 	bl	8004242 <__malloc_unlock>
 800417e:	e7e4      	b.n	800414a <_malloc_r+0x1e>
 8004180:	680b      	ldr	r3, [r1, #0]
 8004182:	1b5b      	subs	r3, r3, r5
 8004184:	d418      	bmi.n	80041b8 <_malloc_r+0x8c>
 8004186:	2b0b      	cmp	r3, #11
 8004188:	d90f      	bls.n	80041aa <_malloc_r+0x7e>
 800418a:	600b      	str	r3, [r1, #0]
 800418c:	50cd      	str	r5, [r1, r3]
 800418e:	18cc      	adds	r4, r1, r3
 8004190:	4630      	mov	r0, r6
 8004192:	f000 f856 	bl	8004242 <__malloc_unlock>
 8004196:	f104 000b 	add.w	r0, r4, #11
 800419a:	1d23      	adds	r3, r4, #4
 800419c:	f020 0007 	bic.w	r0, r0, #7
 80041a0:	1ac3      	subs	r3, r0, r3
 80041a2:	d0d3      	beq.n	800414c <_malloc_r+0x20>
 80041a4:	425a      	negs	r2, r3
 80041a6:	50e2      	str	r2, [r4, r3]
 80041a8:	e7d0      	b.n	800414c <_malloc_r+0x20>
 80041aa:	428c      	cmp	r4, r1
 80041ac:	684b      	ldr	r3, [r1, #4]
 80041ae:	bf16      	itet	ne
 80041b0:	6063      	strne	r3, [r4, #4]
 80041b2:	6013      	streq	r3, [r2, #0]
 80041b4:	460c      	movne	r4, r1
 80041b6:	e7eb      	b.n	8004190 <_malloc_r+0x64>
 80041b8:	460c      	mov	r4, r1
 80041ba:	6849      	ldr	r1, [r1, #4]
 80041bc:	e7cc      	b.n	8004158 <_malloc_r+0x2c>
 80041be:	1cc4      	adds	r4, r0, #3
 80041c0:	f024 0403 	bic.w	r4, r4, #3
 80041c4:	42a0      	cmp	r0, r4
 80041c6:	d005      	beq.n	80041d4 <_malloc_r+0xa8>
 80041c8:	1a21      	subs	r1, r4, r0
 80041ca:	4630      	mov	r0, r6
 80041cc:	f000 f808 	bl	80041e0 <_sbrk_r>
 80041d0:	3001      	adds	r0, #1
 80041d2:	d0cf      	beq.n	8004174 <_malloc_r+0x48>
 80041d4:	6025      	str	r5, [r4, #0]
 80041d6:	e7db      	b.n	8004190 <_malloc_r+0x64>
 80041d8:	20000094 	.word	0x20000094
 80041dc:	20000098 	.word	0x20000098

080041e0 <_sbrk_r>:
 80041e0:	b538      	push	{r3, r4, r5, lr}
 80041e2:	4c06      	ldr	r4, [pc, #24]	; (80041fc <_sbrk_r+0x1c>)
 80041e4:	2300      	movs	r3, #0
 80041e6:	4605      	mov	r5, r0
 80041e8:	4608      	mov	r0, r1
 80041ea:	6023      	str	r3, [r4, #0]
 80041ec:	f7ff fe76 	bl	8003edc <_sbrk>
 80041f0:	1c43      	adds	r3, r0, #1
 80041f2:	d102      	bne.n	80041fa <_sbrk_r+0x1a>
 80041f4:	6823      	ldr	r3, [r4, #0]
 80041f6:	b103      	cbz	r3, 80041fa <_sbrk_r+0x1a>
 80041f8:	602b      	str	r3, [r5, #0]
 80041fa:	bd38      	pop	{r3, r4, r5, pc}
 80041fc:	2000015c 	.word	0x2000015c

08004200 <siprintf>:
 8004200:	b40e      	push	{r1, r2, r3}
 8004202:	b500      	push	{lr}
 8004204:	b09c      	sub	sp, #112	; 0x70
 8004206:	ab1d      	add	r3, sp, #116	; 0x74
 8004208:	9002      	str	r0, [sp, #8]
 800420a:	9006      	str	r0, [sp, #24]
 800420c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004210:	4809      	ldr	r0, [pc, #36]	; (8004238 <siprintf+0x38>)
 8004212:	9107      	str	r1, [sp, #28]
 8004214:	9104      	str	r1, [sp, #16]
 8004216:	4909      	ldr	r1, [pc, #36]	; (800423c <siprintf+0x3c>)
 8004218:	f853 2b04 	ldr.w	r2, [r3], #4
 800421c:	9105      	str	r1, [sp, #20]
 800421e:	6800      	ldr	r0, [r0, #0]
 8004220:	9301      	str	r3, [sp, #4]
 8004222:	a902      	add	r1, sp, #8
 8004224:	f000 f868 	bl	80042f8 <_svfiprintf_r>
 8004228:	9b02      	ldr	r3, [sp, #8]
 800422a:	2200      	movs	r2, #0
 800422c:	701a      	strb	r2, [r3, #0]
 800422e:	b01c      	add	sp, #112	; 0x70
 8004230:	f85d eb04 	ldr.w	lr, [sp], #4
 8004234:	b003      	add	sp, #12
 8004236:	4770      	bx	lr
 8004238:	2000000c 	.word	0x2000000c
 800423c:	ffff0208 	.word	0xffff0208

08004240 <__malloc_lock>:
 8004240:	4770      	bx	lr

08004242 <__malloc_unlock>:
 8004242:	4770      	bx	lr

08004244 <__ssputs_r>:
 8004244:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004248:	688e      	ldr	r6, [r1, #8]
 800424a:	429e      	cmp	r6, r3
 800424c:	4682      	mov	sl, r0
 800424e:	460c      	mov	r4, r1
 8004250:	4690      	mov	r8, r2
 8004252:	4699      	mov	r9, r3
 8004254:	d837      	bhi.n	80042c6 <__ssputs_r+0x82>
 8004256:	898a      	ldrh	r2, [r1, #12]
 8004258:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800425c:	d031      	beq.n	80042c2 <__ssputs_r+0x7e>
 800425e:	6825      	ldr	r5, [r4, #0]
 8004260:	6909      	ldr	r1, [r1, #16]
 8004262:	1a6f      	subs	r7, r5, r1
 8004264:	6965      	ldr	r5, [r4, #20]
 8004266:	2302      	movs	r3, #2
 8004268:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800426c:	fb95 f5f3 	sdiv	r5, r5, r3
 8004270:	f109 0301 	add.w	r3, r9, #1
 8004274:	443b      	add	r3, r7
 8004276:	429d      	cmp	r5, r3
 8004278:	bf38      	it	cc
 800427a:	461d      	movcc	r5, r3
 800427c:	0553      	lsls	r3, r2, #21
 800427e:	d530      	bpl.n	80042e2 <__ssputs_r+0x9e>
 8004280:	4629      	mov	r1, r5
 8004282:	f7ff ff53 	bl	800412c <_malloc_r>
 8004286:	4606      	mov	r6, r0
 8004288:	b950      	cbnz	r0, 80042a0 <__ssputs_r+0x5c>
 800428a:	230c      	movs	r3, #12
 800428c:	f8ca 3000 	str.w	r3, [sl]
 8004290:	89a3      	ldrh	r3, [r4, #12]
 8004292:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004296:	81a3      	strh	r3, [r4, #12]
 8004298:	f04f 30ff 	mov.w	r0, #4294967295
 800429c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042a0:	463a      	mov	r2, r7
 80042a2:	6921      	ldr	r1, [r4, #16]
 80042a4:	f000 faa8 	bl	80047f8 <memcpy>
 80042a8:	89a3      	ldrh	r3, [r4, #12]
 80042aa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80042ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80042b2:	81a3      	strh	r3, [r4, #12]
 80042b4:	6126      	str	r6, [r4, #16]
 80042b6:	6165      	str	r5, [r4, #20]
 80042b8:	443e      	add	r6, r7
 80042ba:	1bed      	subs	r5, r5, r7
 80042bc:	6026      	str	r6, [r4, #0]
 80042be:	60a5      	str	r5, [r4, #8]
 80042c0:	464e      	mov	r6, r9
 80042c2:	454e      	cmp	r6, r9
 80042c4:	d900      	bls.n	80042c8 <__ssputs_r+0x84>
 80042c6:	464e      	mov	r6, r9
 80042c8:	4632      	mov	r2, r6
 80042ca:	4641      	mov	r1, r8
 80042cc:	6820      	ldr	r0, [r4, #0]
 80042ce:	f000 fa9e 	bl	800480e <memmove>
 80042d2:	68a3      	ldr	r3, [r4, #8]
 80042d4:	1b9b      	subs	r3, r3, r6
 80042d6:	60a3      	str	r3, [r4, #8]
 80042d8:	6823      	ldr	r3, [r4, #0]
 80042da:	441e      	add	r6, r3
 80042dc:	6026      	str	r6, [r4, #0]
 80042de:	2000      	movs	r0, #0
 80042e0:	e7dc      	b.n	800429c <__ssputs_r+0x58>
 80042e2:	462a      	mov	r2, r5
 80042e4:	f000 faac 	bl	8004840 <_realloc_r>
 80042e8:	4606      	mov	r6, r0
 80042ea:	2800      	cmp	r0, #0
 80042ec:	d1e2      	bne.n	80042b4 <__ssputs_r+0x70>
 80042ee:	6921      	ldr	r1, [r4, #16]
 80042f0:	4650      	mov	r0, sl
 80042f2:	f7ff fecd 	bl	8004090 <_free_r>
 80042f6:	e7c8      	b.n	800428a <__ssputs_r+0x46>

080042f8 <_svfiprintf_r>:
 80042f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042fc:	461d      	mov	r5, r3
 80042fe:	898b      	ldrh	r3, [r1, #12]
 8004300:	061f      	lsls	r7, r3, #24
 8004302:	b09d      	sub	sp, #116	; 0x74
 8004304:	4680      	mov	r8, r0
 8004306:	460c      	mov	r4, r1
 8004308:	4616      	mov	r6, r2
 800430a:	d50f      	bpl.n	800432c <_svfiprintf_r+0x34>
 800430c:	690b      	ldr	r3, [r1, #16]
 800430e:	b96b      	cbnz	r3, 800432c <_svfiprintf_r+0x34>
 8004310:	2140      	movs	r1, #64	; 0x40
 8004312:	f7ff ff0b 	bl	800412c <_malloc_r>
 8004316:	6020      	str	r0, [r4, #0]
 8004318:	6120      	str	r0, [r4, #16]
 800431a:	b928      	cbnz	r0, 8004328 <_svfiprintf_r+0x30>
 800431c:	230c      	movs	r3, #12
 800431e:	f8c8 3000 	str.w	r3, [r8]
 8004322:	f04f 30ff 	mov.w	r0, #4294967295
 8004326:	e0c8      	b.n	80044ba <_svfiprintf_r+0x1c2>
 8004328:	2340      	movs	r3, #64	; 0x40
 800432a:	6163      	str	r3, [r4, #20]
 800432c:	2300      	movs	r3, #0
 800432e:	9309      	str	r3, [sp, #36]	; 0x24
 8004330:	2320      	movs	r3, #32
 8004332:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004336:	2330      	movs	r3, #48	; 0x30
 8004338:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800433c:	9503      	str	r5, [sp, #12]
 800433e:	f04f 0b01 	mov.w	fp, #1
 8004342:	4637      	mov	r7, r6
 8004344:	463d      	mov	r5, r7
 8004346:	f815 3b01 	ldrb.w	r3, [r5], #1
 800434a:	b10b      	cbz	r3, 8004350 <_svfiprintf_r+0x58>
 800434c:	2b25      	cmp	r3, #37	; 0x25
 800434e:	d13e      	bne.n	80043ce <_svfiprintf_r+0xd6>
 8004350:	ebb7 0a06 	subs.w	sl, r7, r6
 8004354:	d00b      	beq.n	800436e <_svfiprintf_r+0x76>
 8004356:	4653      	mov	r3, sl
 8004358:	4632      	mov	r2, r6
 800435a:	4621      	mov	r1, r4
 800435c:	4640      	mov	r0, r8
 800435e:	f7ff ff71 	bl	8004244 <__ssputs_r>
 8004362:	3001      	adds	r0, #1
 8004364:	f000 80a4 	beq.w	80044b0 <_svfiprintf_r+0x1b8>
 8004368:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800436a:	4453      	add	r3, sl
 800436c:	9309      	str	r3, [sp, #36]	; 0x24
 800436e:	783b      	ldrb	r3, [r7, #0]
 8004370:	2b00      	cmp	r3, #0
 8004372:	f000 809d 	beq.w	80044b0 <_svfiprintf_r+0x1b8>
 8004376:	2300      	movs	r3, #0
 8004378:	f04f 32ff 	mov.w	r2, #4294967295
 800437c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004380:	9304      	str	r3, [sp, #16]
 8004382:	9307      	str	r3, [sp, #28]
 8004384:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004388:	931a      	str	r3, [sp, #104]	; 0x68
 800438a:	462f      	mov	r7, r5
 800438c:	2205      	movs	r2, #5
 800438e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004392:	4850      	ldr	r0, [pc, #320]	; (80044d4 <_svfiprintf_r+0x1dc>)
 8004394:	f7fb ff1c 	bl	80001d0 <memchr>
 8004398:	9b04      	ldr	r3, [sp, #16]
 800439a:	b9d0      	cbnz	r0, 80043d2 <_svfiprintf_r+0xda>
 800439c:	06d9      	lsls	r1, r3, #27
 800439e:	bf44      	itt	mi
 80043a0:	2220      	movmi	r2, #32
 80043a2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043a6:	071a      	lsls	r2, r3, #28
 80043a8:	bf44      	itt	mi
 80043aa:	222b      	movmi	r2, #43	; 0x2b
 80043ac:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80043b0:	782a      	ldrb	r2, [r5, #0]
 80043b2:	2a2a      	cmp	r2, #42	; 0x2a
 80043b4:	d015      	beq.n	80043e2 <_svfiprintf_r+0xea>
 80043b6:	9a07      	ldr	r2, [sp, #28]
 80043b8:	462f      	mov	r7, r5
 80043ba:	2000      	movs	r0, #0
 80043bc:	250a      	movs	r5, #10
 80043be:	4639      	mov	r1, r7
 80043c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80043c4:	3b30      	subs	r3, #48	; 0x30
 80043c6:	2b09      	cmp	r3, #9
 80043c8:	d94d      	bls.n	8004466 <_svfiprintf_r+0x16e>
 80043ca:	b1b8      	cbz	r0, 80043fc <_svfiprintf_r+0x104>
 80043cc:	e00f      	b.n	80043ee <_svfiprintf_r+0xf6>
 80043ce:	462f      	mov	r7, r5
 80043d0:	e7b8      	b.n	8004344 <_svfiprintf_r+0x4c>
 80043d2:	4a40      	ldr	r2, [pc, #256]	; (80044d4 <_svfiprintf_r+0x1dc>)
 80043d4:	1a80      	subs	r0, r0, r2
 80043d6:	fa0b f000 	lsl.w	r0, fp, r0
 80043da:	4318      	orrs	r0, r3
 80043dc:	9004      	str	r0, [sp, #16]
 80043de:	463d      	mov	r5, r7
 80043e0:	e7d3      	b.n	800438a <_svfiprintf_r+0x92>
 80043e2:	9a03      	ldr	r2, [sp, #12]
 80043e4:	1d11      	adds	r1, r2, #4
 80043e6:	6812      	ldr	r2, [r2, #0]
 80043e8:	9103      	str	r1, [sp, #12]
 80043ea:	2a00      	cmp	r2, #0
 80043ec:	db01      	blt.n	80043f2 <_svfiprintf_r+0xfa>
 80043ee:	9207      	str	r2, [sp, #28]
 80043f0:	e004      	b.n	80043fc <_svfiprintf_r+0x104>
 80043f2:	4252      	negs	r2, r2
 80043f4:	f043 0302 	orr.w	r3, r3, #2
 80043f8:	9207      	str	r2, [sp, #28]
 80043fa:	9304      	str	r3, [sp, #16]
 80043fc:	783b      	ldrb	r3, [r7, #0]
 80043fe:	2b2e      	cmp	r3, #46	; 0x2e
 8004400:	d10c      	bne.n	800441c <_svfiprintf_r+0x124>
 8004402:	787b      	ldrb	r3, [r7, #1]
 8004404:	2b2a      	cmp	r3, #42	; 0x2a
 8004406:	d133      	bne.n	8004470 <_svfiprintf_r+0x178>
 8004408:	9b03      	ldr	r3, [sp, #12]
 800440a:	1d1a      	adds	r2, r3, #4
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	9203      	str	r2, [sp, #12]
 8004410:	2b00      	cmp	r3, #0
 8004412:	bfb8      	it	lt
 8004414:	f04f 33ff 	movlt.w	r3, #4294967295
 8004418:	3702      	adds	r7, #2
 800441a:	9305      	str	r3, [sp, #20]
 800441c:	4d2e      	ldr	r5, [pc, #184]	; (80044d8 <_svfiprintf_r+0x1e0>)
 800441e:	7839      	ldrb	r1, [r7, #0]
 8004420:	2203      	movs	r2, #3
 8004422:	4628      	mov	r0, r5
 8004424:	f7fb fed4 	bl	80001d0 <memchr>
 8004428:	b138      	cbz	r0, 800443a <_svfiprintf_r+0x142>
 800442a:	2340      	movs	r3, #64	; 0x40
 800442c:	1b40      	subs	r0, r0, r5
 800442e:	fa03 f000 	lsl.w	r0, r3, r0
 8004432:	9b04      	ldr	r3, [sp, #16]
 8004434:	4303      	orrs	r3, r0
 8004436:	3701      	adds	r7, #1
 8004438:	9304      	str	r3, [sp, #16]
 800443a:	7839      	ldrb	r1, [r7, #0]
 800443c:	4827      	ldr	r0, [pc, #156]	; (80044dc <_svfiprintf_r+0x1e4>)
 800443e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004442:	2206      	movs	r2, #6
 8004444:	1c7e      	adds	r6, r7, #1
 8004446:	f7fb fec3 	bl	80001d0 <memchr>
 800444a:	2800      	cmp	r0, #0
 800444c:	d038      	beq.n	80044c0 <_svfiprintf_r+0x1c8>
 800444e:	4b24      	ldr	r3, [pc, #144]	; (80044e0 <_svfiprintf_r+0x1e8>)
 8004450:	bb13      	cbnz	r3, 8004498 <_svfiprintf_r+0x1a0>
 8004452:	9b03      	ldr	r3, [sp, #12]
 8004454:	3307      	adds	r3, #7
 8004456:	f023 0307 	bic.w	r3, r3, #7
 800445a:	3308      	adds	r3, #8
 800445c:	9303      	str	r3, [sp, #12]
 800445e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004460:	444b      	add	r3, r9
 8004462:	9309      	str	r3, [sp, #36]	; 0x24
 8004464:	e76d      	b.n	8004342 <_svfiprintf_r+0x4a>
 8004466:	fb05 3202 	mla	r2, r5, r2, r3
 800446a:	2001      	movs	r0, #1
 800446c:	460f      	mov	r7, r1
 800446e:	e7a6      	b.n	80043be <_svfiprintf_r+0xc6>
 8004470:	2300      	movs	r3, #0
 8004472:	3701      	adds	r7, #1
 8004474:	9305      	str	r3, [sp, #20]
 8004476:	4619      	mov	r1, r3
 8004478:	250a      	movs	r5, #10
 800447a:	4638      	mov	r0, r7
 800447c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004480:	3a30      	subs	r2, #48	; 0x30
 8004482:	2a09      	cmp	r2, #9
 8004484:	d903      	bls.n	800448e <_svfiprintf_r+0x196>
 8004486:	2b00      	cmp	r3, #0
 8004488:	d0c8      	beq.n	800441c <_svfiprintf_r+0x124>
 800448a:	9105      	str	r1, [sp, #20]
 800448c:	e7c6      	b.n	800441c <_svfiprintf_r+0x124>
 800448e:	fb05 2101 	mla	r1, r5, r1, r2
 8004492:	2301      	movs	r3, #1
 8004494:	4607      	mov	r7, r0
 8004496:	e7f0      	b.n	800447a <_svfiprintf_r+0x182>
 8004498:	ab03      	add	r3, sp, #12
 800449a:	9300      	str	r3, [sp, #0]
 800449c:	4622      	mov	r2, r4
 800449e:	4b11      	ldr	r3, [pc, #68]	; (80044e4 <_svfiprintf_r+0x1ec>)
 80044a0:	a904      	add	r1, sp, #16
 80044a2:	4640      	mov	r0, r8
 80044a4:	f3af 8000 	nop.w
 80044a8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80044ac:	4681      	mov	r9, r0
 80044ae:	d1d6      	bne.n	800445e <_svfiprintf_r+0x166>
 80044b0:	89a3      	ldrh	r3, [r4, #12]
 80044b2:	065b      	lsls	r3, r3, #25
 80044b4:	f53f af35 	bmi.w	8004322 <_svfiprintf_r+0x2a>
 80044b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80044ba:	b01d      	add	sp, #116	; 0x74
 80044bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80044c0:	ab03      	add	r3, sp, #12
 80044c2:	9300      	str	r3, [sp, #0]
 80044c4:	4622      	mov	r2, r4
 80044c6:	4b07      	ldr	r3, [pc, #28]	; (80044e4 <_svfiprintf_r+0x1ec>)
 80044c8:	a904      	add	r1, sp, #16
 80044ca:	4640      	mov	r0, r8
 80044cc:	f000 f882 	bl	80045d4 <_printf_i>
 80044d0:	e7ea      	b.n	80044a8 <_svfiprintf_r+0x1b0>
 80044d2:	bf00      	nop
 80044d4:	08004f88 	.word	0x08004f88
 80044d8:	08004f8e 	.word	0x08004f8e
 80044dc:	08004f92 	.word	0x08004f92
 80044e0:	00000000 	.word	0x00000000
 80044e4:	08004245 	.word	0x08004245

080044e8 <_printf_common>:
 80044e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044ec:	4691      	mov	r9, r2
 80044ee:	461f      	mov	r7, r3
 80044f0:	688a      	ldr	r2, [r1, #8]
 80044f2:	690b      	ldr	r3, [r1, #16]
 80044f4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80044f8:	4293      	cmp	r3, r2
 80044fa:	bfb8      	it	lt
 80044fc:	4613      	movlt	r3, r2
 80044fe:	f8c9 3000 	str.w	r3, [r9]
 8004502:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004506:	4606      	mov	r6, r0
 8004508:	460c      	mov	r4, r1
 800450a:	b112      	cbz	r2, 8004512 <_printf_common+0x2a>
 800450c:	3301      	adds	r3, #1
 800450e:	f8c9 3000 	str.w	r3, [r9]
 8004512:	6823      	ldr	r3, [r4, #0]
 8004514:	0699      	lsls	r1, r3, #26
 8004516:	bf42      	ittt	mi
 8004518:	f8d9 3000 	ldrmi.w	r3, [r9]
 800451c:	3302      	addmi	r3, #2
 800451e:	f8c9 3000 	strmi.w	r3, [r9]
 8004522:	6825      	ldr	r5, [r4, #0]
 8004524:	f015 0506 	ands.w	r5, r5, #6
 8004528:	d107      	bne.n	800453a <_printf_common+0x52>
 800452a:	f104 0a19 	add.w	sl, r4, #25
 800452e:	68e3      	ldr	r3, [r4, #12]
 8004530:	f8d9 2000 	ldr.w	r2, [r9]
 8004534:	1a9b      	subs	r3, r3, r2
 8004536:	42ab      	cmp	r3, r5
 8004538:	dc28      	bgt.n	800458c <_printf_common+0xa4>
 800453a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800453e:	6822      	ldr	r2, [r4, #0]
 8004540:	3300      	adds	r3, #0
 8004542:	bf18      	it	ne
 8004544:	2301      	movne	r3, #1
 8004546:	0692      	lsls	r2, r2, #26
 8004548:	d42d      	bmi.n	80045a6 <_printf_common+0xbe>
 800454a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800454e:	4639      	mov	r1, r7
 8004550:	4630      	mov	r0, r6
 8004552:	47c0      	blx	r8
 8004554:	3001      	adds	r0, #1
 8004556:	d020      	beq.n	800459a <_printf_common+0xb2>
 8004558:	6823      	ldr	r3, [r4, #0]
 800455a:	68e5      	ldr	r5, [r4, #12]
 800455c:	f8d9 2000 	ldr.w	r2, [r9]
 8004560:	f003 0306 	and.w	r3, r3, #6
 8004564:	2b04      	cmp	r3, #4
 8004566:	bf08      	it	eq
 8004568:	1aad      	subeq	r5, r5, r2
 800456a:	68a3      	ldr	r3, [r4, #8]
 800456c:	6922      	ldr	r2, [r4, #16]
 800456e:	bf0c      	ite	eq
 8004570:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004574:	2500      	movne	r5, #0
 8004576:	4293      	cmp	r3, r2
 8004578:	bfc4      	itt	gt
 800457a:	1a9b      	subgt	r3, r3, r2
 800457c:	18ed      	addgt	r5, r5, r3
 800457e:	f04f 0900 	mov.w	r9, #0
 8004582:	341a      	adds	r4, #26
 8004584:	454d      	cmp	r5, r9
 8004586:	d11a      	bne.n	80045be <_printf_common+0xd6>
 8004588:	2000      	movs	r0, #0
 800458a:	e008      	b.n	800459e <_printf_common+0xb6>
 800458c:	2301      	movs	r3, #1
 800458e:	4652      	mov	r2, sl
 8004590:	4639      	mov	r1, r7
 8004592:	4630      	mov	r0, r6
 8004594:	47c0      	blx	r8
 8004596:	3001      	adds	r0, #1
 8004598:	d103      	bne.n	80045a2 <_printf_common+0xba>
 800459a:	f04f 30ff 	mov.w	r0, #4294967295
 800459e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045a2:	3501      	adds	r5, #1
 80045a4:	e7c3      	b.n	800452e <_printf_common+0x46>
 80045a6:	18e1      	adds	r1, r4, r3
 80045a8:	1c5a      	adds	r2, r3, #1
 80045aa:	2030      	movs	r0, #48	; 0x30
 80045ac:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80045b0:	4422      	add	r2, r4
 80045b2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80045b6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80045ba:	3302      	adds	r3, #2
 80045bc:	e7c5      	b.n	800454a <_printf_common+0x62>
 80045be:	2301      	movs	r3, #1
 80045c0:	4622      	mov	r2, r4
 80045c2:	4639      	mov	r1, r7
 80045c4:	4630      	mov	r0, r6
 80045c6:	47c0      	blx	r8
 80045c8:	3001      	adds	r0, #1
 80045ca:	d0e6      	beq.n	800459a <_printf_common+0xb2>
 80045cc:	f109 0901 	add.w	r9, r9, #1
 80045d0:	e7d8      	b.n	8004584 <_printf_common+0x9c>
	...

080045d4 <_printf_i>:
 80045d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80045d8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80045dc:	460c      	mov	r4, r1
 80045de:	7e09      	ldrb	r1, [r1, #24]
 80045e0:	b085      	sub	sp, #20
 80045e2:	296e      	cmp	r1, #110	; 0x6e
 80045e4:	4617      	mov	r7, r2
 80045e6:	4606      	mov	r6, r0
 80045e8:	4698      	mov	r8, r3
 80045ea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80045ec:	f000 80b3 	beq.w	8004756 <_printf_i+0x182>
 80045f0:	d822      	bhi.n	8004638 <_printf_i+0x64>
 80045f2:	2963      	cmp	r1, #99	; 0x63
 80045f4:	d036      	beq.n	8004664 <_printf_i+0x90>
 80045f6:	d80a      	bhi.n	800460e <_printf_i+0x3a>
 80045f8:	2900      	cmp	r1, #0
 80045fa:	f000 80b9 	beq.w	8004770 <_printf_i+0x19c>
 80045fe:	2958      	cmp	r1, #88	; 0x58
 8004600:	f000 8083 	beq.w	800470a <_printf_i+0x136>
 8004604:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004608:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 800460c:	e032      	b.n	8004674 <_printf_i+0xa0>
 800460e:	2964      	cmp	r1, #100	; 0x64
 8004610:	d001      	beq.n	8004616 <_printf_i+0x42>
 8004612:	2969      	cmp	r1, #105	; 0x69
 8004614:	d1f6      	bne.n	8004604 <_printf_i+0x30>
 8004616:	6820      	ldr	r0, [r4, #0]
 8004618:	6813      	ldr	r3, [r2, #0]
 800461a:	0605      	lsls	r5, r0, #24
 800461c:	f103 0104 	add.w	r1, r3, #4
 8004620:	d52a      	bpl.n	8004678 <_printf_i+0xa4>
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	6011      	str	r1, [r2, #0]
 8004626:	2b00      	cmp	r3, #0
 8004628:	da03      	bge.n	8004632 <_printf_i+0x5e>
 800462a:	222d      	movs	r2, #45	; 0x2d
 800462c:	425b      	negs	r3, r3
 800462e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004632:	486f      	ldr	r0, [pc, #444]	; (80047f0 <_printf_i+0x21c>)
 8004634:	220a      	movs	r2, #10
 8004636:	e039      	b.n	80046ac <_printf_i+0xd8>
 8004638:	2973      	cmp	r1, #115	; 0x73
 800463a:	f000 809d 	beq.w	8004778 <_printf_i+0x1a4>
 800463e:	d808      	bhi.n	8004652 <_printf_i+0x7e>
 8004640:	296f      	cmp	r1, #111	; 0x6f
 8004642:	d020      	beq.n	8004686 <_printf_i+0xb2>
 8004644:	2970      	cmp	r1, #112	; 0x70
 8004646:	d1dd      	bne.n	8004604 <_printf_i+0x30>
 8004648:	6823      	ldr	r3, [r4, #0]
 800464a:	f043 0320 	orr.w	r3, r3, #32
 800464e:	6023      	str	r3, [r4, #0]
 8004650:	e003      	b.n	800465a <_printf_i+0x86>
 8004652:	2975      	cmp	r1, #117	; 0x75
 8004654:	d017      	beq.n	8004686 <_printf_i+0xb2>
 8004656:	2978      	cmp	r1, #120	; 0x78
 8004658:	d1d4      	bne.n	8004604 <_printf_i+0x30>
 800465a:	2378      	movs	r3, #120	; 0x78
 800465c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004660:	4864      	ldr	r0, [pc, #400]	; (80047f4 <_printf_i+0x220>)
 8004662:	e055      	b.n	8004710 <_printf_i+0x13c>
 8004664:	6813      	ldr	r3, [r2, #0]
 8004666:	1d19      	adds	r1, r3, #4
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	6011      	str	r1, [r2, #0]
 800466c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004670:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004674:	2301      	movs	r3, #1
 8004676:	e08c      	b.n	8004792 <_printf_i+0x1be>
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	6011      	str	r1, [r2, #0]
 800467c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004680:	bf18      	it	ne
 8004682:	b21b      	sxthne	r3, r3
 8004684:	e7cf      	b.n	8004626 <_printf_i+0x52>
 8004686:	6813      	ldr	r3, [r2, #0]
 8004688:	6825      	ldr	r5, [r4, #0]
 800468a:	1d18      	adds	r0, r3, #4
 800468c:	6010      	str	r0, [r2, #0]
 800468e:	0628      	lsls	r0, r5, #24
 8004690:	d501      	bpl.n	8004696 <_printf_i+0xc2>
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	e002      	b.n	800469c <_printf_i+0xc8>
 8004696:	0668      	lsls	r0, r5, #25
 8004698:	d5fb      	bpl.n	8004692 <_printf_i+0xbe>
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	4854      	ldr	r0, [pc, #336]	; (80047f0 <_printf_i+0x21c>)
 800469e:	296f      	cmp	r1, #111	; 0x6f
 80046a0:	bf14      	ite	ne
 80046a2:	220a      	movne	r2, #10
 80046a4:	2208      	moveq	r2, #8
 80046a6:	2100      	movs	r1, #0
 80046a8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80046ac:	6865      	ldr	r5, [r4, #4]
 80046ae:	60a5      	str	r5, [r4, #8]
 80046b0:	2d00      	cmp	r5, #0
 80046b2:	f2c0 8095 	blt.w	80047e0 <_printf_i+0x20c>
 80046b6:	6821      	ldr	r1, [r4, #0]
 80046b8:	f021 0104 	bic.w	r1, r1, #4
 80046bc:	6021      	str	r1, [r4, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d13d      	bne.n	800473e <_printf_i+0x16a>
 80046c2:	2d00      	cmp	r5, #0
 80046c4:	f040 808e 	bne.w	80047e4 <_printf_i+0x210>
 80046c8:	4665      	mov	r5, ip
 80046ca:	2a08      	cmp	r2, #8
 80046cc:	d10b      	bne.n	80046e6 <_printf_i+0x112>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	07db      	lsls	r3, r3, #31
 80046d2:	d508      	bpl.n	80046e6 <_printf_i+0x112>
 80046d4:	6923      	ldr	r3, [r4, #16]
 80046d6:	6862      	ldr	r2, [r4, #4]
 80046d8:	429a      	cmp	r2, r3
 80046da:	bfde      	ittt	le
 80046dc:	2330      	movle	r3, #48	; 0x30
 80046de:	f805 3c01 	strble.w	r3, [r5, #-1]
 80046e2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80046e6:	ebac 0305 	sub.w	r3, ip, r5
 80046ea:	6123      	str	r3, [r4, #16]
 80046ec:	f8cd 8000 	str.w	r8, [sp]
 80046f0:	463b      	mov	r3, r7
 80046f2:	aa03      	add	r2, sp, #12
 80046f4:	4621      	mov	r1, r4
 80046f6:	4630      	mov	r0, r6
 80046f8:	f7ff fef6 	bl	80044e8 <_printf_common>
 80046fc:	3001      	adds	r0, #1
 80046fe:	d14d      	bne.n	800479c <_printf_i+0x1c8>
 8004700:	f04f 30ff 	mov.w	r0, #4294967295
 8004704:	b005      	add	sp, #20
 8004706:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800470a:	4839      	ldr	r0, [pc, #228]	; (80047f0 <_printf_i+0x21c>)
 800470c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004710:	6813      	ldr	r3, [r2, #0]
 8004712:	6821      	ldr	r1, [r4, #0]
 8004714:	1d1d      	adds	r5, r3, #4
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	6015      	str	r5, [r2, #0]
 800471a:	060a      	lsls	r2, r1, #24
 800471c:	d50b      	bpl.n	8004736 <_printf_i+0x162>
 800471e:	07ca      	lsls	r2, r1, #31
 8004720:	bf44      	itt	mi
 8004722:	f041 0120 	orrmi.w	r1, r1, #32
 8004726:	6021      	strmi	r1, [r4, #0]
 8004728:	b91b      	cbnz	r3, 8004732 <_printf_i+0x15e>
 800472a:	6822      	ldr	r2, [r4, #0]
 800472c:	f022 0220 	bic.w	r2, r2, #32
 8004730:	6022      	str	r2, [r4, #0]
 8004732:	2210      	movs	r2, #16
 8004734:	e7b7      	b.n	80046a6 <_printf_i+0xd2>
 8004736:	064d      	lsls	r5, r1, #25
 8004738:	bf48      	it	mi
 800473a:	b29b      	uxthmi	r3, r3
 800473c:	e7ef      	b.n	800471e <_printf_i+0x14a>
 800473e:	4665      	mov	r5, ip
 8004740:	fbb3 f1f2 	udiv	r1, r3, r2
 8004744:	fb02 3311 	mls	r3, r2, r1, r3
 8004748:	5cc3      	ldrb	r3, [r0, r3]
 800474a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800474e:	460b      	mov	r3, r1
 8004750:	2900      	cmp	r1, #0
 8004752:	d1f5      	bne.n	8004740 <_printf_i+0x16c>
 8004754:	e7b9      	b.n	80046ca <_printf_i+0xf6>
 8004756:	6813      	ldr	r3, [r2, #0]
 8004758:	6825      	ldr	r5, [r4, #0]
 800475a:	6961      	ldr	r1, [r4, #20]
 800475c:	1d18      	adds	r0, r3, #4
 800475e:	6010      	str	r0, [r2, #0]
 8004760:	0628      	lsls	r0, r5, #24
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	d501      	bpl.n	800476a <_printf_i+0x196>
 8004766:	6019      	str	r1, [r3, #0]
 8004768:	e002      	b.n	8004770 <_printf_i+0x19c>
 800476a:	066a      	lsls	r2, r5, #25
 800476c:	d5fb      	bpl.n	8004766 <_printf_i+0x192>
 800476e:	8019      	strh	r1, [r3, #0]
 8004770:	2300      	movs	r3, #0
 8004772:	6123      	str	r3, [r4, #16]
 8004774:	4665      	mov	r5, ip
 8004776:	e7b9      	b.n	80046ec <_printf_i+0x118>
 8004778:	6813      	ldr	r3, [r2, #0]
 800477a:	1d19      	adds	r1, r3, #4
 800477c:	6011      	str	r1, [r2, #0]
 800477e:	681d      	ldr	r5, [r3, #0]
 8004780:	6862      	ldr	r2, [r4, #4]
 8004782:	2100      	movs	r1, #0
 8004784:	4628      	mov	r0, r5
 8004786:	f7fb fd23 	bl	80001d0 <memchr>
 800478a:	b108      	cbz	r0, 8004790 <_printf_i+0x1bc>
 800478c:	1b40      	subs	r0, r0, r5
 800478e:	6060      	str	r0, [r4, #4]
 8004790:	6863      	ldr	r3, [r4, #4]
 8004792:	6123      	str	r3, [r4, #16]
 8004794:	2300      	movs	r3, #0
 8004796:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800479a:	e7a7      	b.n	80046ec <_printf_i+0x118>
 800479c:	6923      	ldr	r3, [r4, #16]
 800479e:	462a      	mov	r2, r5
 80047a0:	4639      	mov	r1, r7
 80047a2:	4630      	mov	r0, r6
 80047a4:	47c0      	blx	r8
 80047a6:	3001      	adds	r0, #1
 80047a8:	d0aa      	beq.n	8004700 <_printf_i+0x12c>
 80047aa:	6823      	ldr	r3, [r4, #0]
 80047ac:	079b      	lsls	r3, r3, #30
 80047ae:	d413      	bmi.n	80047d8 <_printf_i+0x204>
 80047b0:	68e0      	ldr	r0, [r4, #12]
 80047b2:	9b03      	ldr	r3, [sp, #12]
 80047b4:	4298      	cmp	r0, r3
 80047b6:	bfb8      	it	lt
 80047b8:	4618      	movlt	r0, r3
 80047ba:	e7a3      	b.n	8004704 <_printf_i+0x130>
 80047bc:	2301      	movs	r3, #1
 80047be:	464a      	mov	r2, r9
 80047c0:	4639      	mov	r1, r7
 80047c2:	4630      	mov	r0, r6
 80047c4:	47c0      	blx	r8
 80047c6:	3001      	adds	r0, #1
 80047c8:	d09a      	beq.n	8004700 <_printf_i+0x12c>
 80047ca:	3501      	adds	r5, #1
 80047cc:	68e3      	ldr	r3, [r4, #12]
 80047ce:	9a03      	ldr	r2, [sp, #12]
 80047d0:	1a9b      	subs	r3, r3, r2
 80047d2:	42ab      	cmp	r3, r5
 80047d4:	dcf2      	bgt.n	80047bc <_printf_i+0x1e8>
 80047d6:	e7eb      	b.n	80047b0 <_printf_i+0x1dc>
 80047d8:	2500      	movs	r5, #0
 80047da:	f104 0919 	add.w	r9, r4, #25
 80047de:	e7f5      	b.n	80047cc <_printf_i+0x1f8>
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1ac      	bne.n	800473e <_printf_i+0x16a>
 80047e4:	7803      	ldrb	r3, [r0, #0]
 80047e6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80047ea:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80047ee:	e76c      	b.n	80046ca <_printf_i+0xf6>
 80047f0:	08004f99 	.word	0x08004f99
 80047f4:	08004faa 	.word	0x08004faa

080047f8 <memcpy>:
 80047f8:	b510      	push	{r4, lr}
 80047fa:	1e43      	subs	r3, r0, #1
 80047fc:	440a      	add	r2, r1
 80047fe:	4291      	cmp	r1, r2
 8004800:	d100      	bne.n	8004804 <memcpy+0xc>
 8004802:	bd10      	pop	{r4, pc}
 8004804:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004808:	f803 4f01 	strb.w	r4, [r3, #1]!
 800480c:	e7f7      	b.n	80047fe <memcpy+0x6>

0800480e <memmove>:
 800480e:	4288      	cmp	r0, r1
 8004810:	b510      	push	{r4, lr}
 8004812:	eb01 0302 	add.w	r3, r1, r2
 8004816:	d807      	bhi.n	8004828 <memmove+0x1a>
 8004818:	1e42      	subs	r2, r0, #1
 800481a:	4299      	cmp	r1, r3
 800481c:	d00a      	beq.n	8004834 <memmove+0x26>
 800481e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004822:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004826:	e7f8      	b.n	800481a <memmove+0xc>
 8004828:	4283      	cmp	r3, r0
 800482a:	d9f5      	bls.n	8004818 <memmove+0xa>
 800482c:	1881      	adds	r1, r0, r2
 800482e:	1ad2      	subs	r2, r2, r3
 8004830:	42d3      	cmn	r3, r2
 8004832:	d100      	bne.n	8004836 <memmove+0x28>
 8004834:	bd10      	pop	{r4, pc}
 8004836:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800483a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 800483e:	e7f7      	b.n	8004830 <memmove+0x22>

08004840 <_realloc_r>:
 8004840:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004842:	4607      	mov	r7, r0
 8004844:	4614      	mov	r4, r2
 8004846:	460e      	mov	r6, r1
 8004848:	b921      	cbnz	r1, 8004854 <_realloc_r+0x14>
 800484a:	4611      	mov	r1, r2
 800484c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004850:	f7ff bc6c 	b.w	800412c <_malloc_r>
 8004854:	b922      	cbnz	r2, 8004860 <_realloc_r+0x20>
 8004856:	f7ff fc1b 	bl	8004090 <_free_r>
 800485a:	4625      	mov	r5, r4
 800485c:	4628      	mov	r0, r5
 800485e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004860:	f000 f814 	bl	800488c <_malloc_usable_size_r>
 8004864:	42a0      	cmp	r0, r4
 8004866:	d20f      	bcs.n	8004888 <_realloc_r+0x48>
 8004868:	4621      	mov	r1, r4
 800486a:	4638      	mov	r0, r7
 800486c:	f7ff fc5e 	bl	800412c <_malloc_r>
 8004870:	4605      	mov	r5, r0
 8004872:	2800      	cmp	r0, #0
 8004874:	d0f2      	beq.n	800485c <_realloc_r+0x1c>
 8004876:	4631      	mov	r1, r6
 8004878:	4622      	mov	r2, r4
 800487a:	f7ff ffbd 	bl	80047f8 <memcpy>
 800487e:	4631      	mov	r1, r6
 8004880:	4638      	mov	r0, r7
 8004882:	f7ff fc05 	bl	8004090 <_free_r>
 8004886:	e7e9      	b.n	800485c <_realloc_r+0x1c>
 8004888:	4635      	mov	r5, r6
 800488a:	e7e7      	b.n	800485c <_realloc_r+0x1c>

0800488c <_malloc_usable_size_r>:
 800488c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004890:	1f18      	subs	r0, r3, #4
 8004892:	2b00      	cmp	r3, #0
 8004894:	bfbc      	itt	lt
 8004896:	580b      	ldrlt	r3, [r1, r0]
 8004898:	18c0      	addlt	r0, r0, r3
 800489a:	4770      	bx	lr
 800489c:	0000      	movs	r0, r0
	...

080048a0 <floor>:
 80048a0:	ec51 0b10 	vmov	r0, r1, d0
 80048a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a8:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80048ac:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80048b0:	2e13      	cmp	r6, #19
 80048b2:	460c      	mov	r4, r1
 80048b4:	ee10 5a10 	vmov	r5, s0
 80048b8:	4680      	mov	r8, r0
 80048ba:	dc34      	bgt.n	8004926 <floor+0x86>
 80048bc:	2e00      	cmp	r6, #0
 80048be:	da16      	bge.n	80048ee <floor+0x4e>
 80048c0:	a335      	add	r3, pc, #212	; (adr r3, 8004998 <floor+0xf8>)
 80048c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c6:	f7fb fcd9 	bl	800027c <__adddf3>
 80048ca:	2200      	movs	r2, #0
 80048cc:	2300      	movs	r3, #0
 80048ce:	f7fc f91b 	bl	8000b08 <__aeabi_dcmpgt>
 80048d2:	b148      	cbz	r0, 80048e8 <floor+0x48>
 80048d4:	2c00      	cmp	r4, #0
 80048d6:	da59      	bge.n	800498c <floor+0xec>
 80048d8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80048dc:	4a30      	ldr	r2, [pc, #192]	; (80049a0 <floor+0x100>)
 80048de:	432b      	orrs	r3, r5
 80048e0:	2500      	movs	r5, #0
 80048e2:	42ab      	cmp	r3, r5
 80048e4:	bf18      	it	ne
 80048e6:	4614      	movne	r4, r2
 80048e8:	4621      	mov	r1, r4
 80048ea:	4628      	mov	r0, r5
 80048ec:	e025      	b.n	800493a <floor+0x9a>
 80048ee:	4f2d      	ldr	r7, [pc, #180]	; (80049a4 <floor+0x104>)
 80048f0:	4137      	asrs	r7, r6
 80048f2:	ea01 0307 	and.w	r3, r1, r7
 80048f6:	4303      	orrs	r3, r0
 80048f8:	d01f      	beq.n	800493a <floor+0x9a>
 80048fa:	a327      	add	r3, pc, #156	; (adr r3, 8004998 <floor+0xf8>)
 80048fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004900:	f7fb fcbc 	bl	800027c <__adddf3>
 8004904:	2200      	movs	r2, #0
 8004906:	2300      	movs	r3, #0
 8004908:	f7fc f8fe 	bl	8000b08 <__aeabi_dcmpgt>
 800490c:	2800      	cmp	r0, #0
 800490e:	d0eb      	beq.n	80048e8 <floor+0x48>
 8004910:	2c00      	cmp	r4, #0
 8004912:	bfbe      	ittt	lt
 8004914:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004918:	fa43 f606 	asrlt.w	r6, r3, r6
 800491c:	19a4      	addlt	r4, r4, r6
 800491e:	ea24 0407 	bic.w	r4, r4, r7
 8004922:	2500      	movs	r5, #0
 8004924:	e7e0      	b.n	80048e8 <floor+0x48>
 8004926:	2e33      	cmp	r6, #51	; 0x33
 8004928:	dd0b      	ble.n	8004942 <floor+0xa2>
 800492a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800492e:	d104      	bne.n	800493a <floor+0x9a>
 8004930:	ee10 2a10 	vmov	r2, s0
 8004934:	460b      	mov	r3, r1
 8004936:	f7fb fca1 	bl	800027c <__adddf3>
 800493a:	ec41 0b10 	vmov	d0, r0, r1
 800493e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004942:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004946:	f04f 33ff 	mov.w	r3, #4294967295
 800494a:	fa23 f707 	lsr.w	r7, r3, r7
 800494e:	4207      	tst	r7, r0
 8004950:	d0f3      	beq.n	800493a <floor+0x9a>
 8004952:	a311      	add	r3, pc, #68	; (adr r3, 8004998 <floor+0xf8>)
 8004954:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004958:	f7fb fc90 	bl	800027c <__adddf3>
 800495c:	2200      	movs	r2, #0
 800495e:	2300      	movs	r3, #0
 8004960:	f7fc f8d2 	bl	8000b08 <__aeabi_dcmpgt>
 8004964:	2800      	cmp	r0, #0
 8004966:	d0bf      	beq.n	80048e8 <floor+0x48>
 8004968:	2c00      	cmp	r4, #0
 800496a:	da02      	bge.n	8004972 <floor+0xd2>
 800496c:	2e14      	cmp	r6, #20
 800496e:	d103      	bne.n	8004978 <floor+0xd8>
 8004970:	3401      	adds	r4, #1
 8004972:	ea25 0507 	bic.w	r5, r5, r7
 8004976:	e7b7      	b.n	80048e8 <floor+0x48>
 8004978:	2301      	movs	r3, #1
 800497a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800497e:	fa03 f606 	lsl.w	r6, r3, r6
 8004982:	4435      	add	r5, r6
 8004984:	4545      	cmp	r5, r8
 8004986:	bf38      	it	cc
 8004988:	18e4      	addcc	r4, r4, r3
 800498a:	e7f2      	b.n	8004972 <floor+0xd2>
 800498c:	2500      	movs	r5, #0
 800498e:	462c      	mov	r4, r5
 8004990:	e7aa      	b.n	80048e8 <floor+0x48>
 8004992:	bf00      	nop
 8004994:	f3af 8000 	nop.w
 8004998:	8800759c 	.word	0x8800759c
 800499c:	7e37e43c 	.word	0x7e37e43c
 80049a0:	bff00000 	.word	0xbff00000
 80049a4:	000fffff 	.word	0x000fffff

080049a8 <log10>:
 80049a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049aa:	ed2d 8b02 	vpush	{d8}
 80049ae:	b08b      	sub	sp, #44	; 0x2c
 80049b0:	ec55 4b10 	vmov	r4, r5, d0
 80049b4:	f000 f878 	bl	8004aa8 <__ieee754_log10>
 80049b8:	4b36      	ldr	r3, [pc, #216]	; (8004a94 <log10+0xec>)
 80049ba:	eeb0 8a40 	vmov.f32	s16, s0
 80049be:	eef0 8a60 	vmov.f32	s17, s1
 80049c2:	f993 6000 	ldrsb.w	r6, [r3]
 80049c6:	1c73      	adds	r3, r6, #1
 80049c8:	d05c      	beq.n	8004a84 <log10+0xdc>
 80049ca:	4622      	mov	r2, r4
 80049cc:	462b      	mov	r3, r5
 80049ce:	4620      	mov	r0, r4
 80049d0:	4629      	mov	r1, r5
 80049d2:	f7fc f8a3 	bl	8000b1c <__aeabi_dcmpun>
 80049d6:	4607      	mov	r7, r0
 80049d8:	2800      	cmp	r0, #0
 80049da:	d153      	bne.n	8004a84 <log10+0xdc>
 80049dc:	2200      	movs	r2, #0
 80049de:	2300      	movs	r3, #0
 80049e0:	4620      	mov	r0, r4
 80049e2:	4629      	mov	r1, r5
 80049e4:	f7fc f87c 	bl	8000ae0 <__aeabi_dcmple>
 80049e8:	2800      	cmp	r0, #0
 80049ea:	d04b      	beq.n	8004a84 <log10+0xdc>
 80049ec:	4b2a      	ldr	r3, [pc, #168]	; (8004a98 <log10+0xf0>)
 80049ee:	9301      	str	r3, [sp, #4]
 80049f0:	9708      	str	r7, [sp, #32]
 80049f2:	e9cd 4502 	strd	r4, r5, [sp, #8]
 80049f6:	e9cd 4504 	strd	r4, r5, [sp, #16]
 80049fa:	b9a6      	cbnz	r6, 8004a26 <log10+0x7e>
 80049fc:	4b27      	ldr	r3, [pc, #156]	; (8004a9c <log10+0xf4>)
 80049fe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004a02:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a06:	4620      	mov	r0, r4
 8004a08:	2200      	movs	r2, #0
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	f7fc f853 	bl	8000ab8 <__aeabi_dcmpeq>
 8004a12:	bb40      	cbnz	r0, 8004a66 <log10+0xbe>
 8004a14:	2301      	movs	r3, #1
 8004a16:	2e02      	cmp	r6, #2
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	d119      	bne.n	8004a50 <log10+0xa8>
 8004a1c:	f7ff fafe 	bl	800401c <__errno>
 8004a20:	2321      	movs	r3, #33	; 0x21
 8004a22:	6003      	str	r3, [r0, #0]
 8004a24:	e019      	b.n	8004a5a <log10+0xb2>
 8004a26:	4b1e      	ldr	r3, [pc, #120]	; (8004aa0 <log10+0xf8>)
 8004a28:	2200      	movs	r2, #0
 8004a2a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a2e:	4620      	mov	r0, r4
 8004a30:	2200      	movs	r2, #0
 8004a32:	2300      	movs	r3, #0
 8004a34:	4629      	mov	r1, r5
 8004a36:	f7fc f83f 	bl	8000ab8 <__aeabi_dcmpeq>
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d0ea      	beq.n	8004a14 <log10+0x6c>
 8004a3e:	2302      	movs	r3, #2
 8004a40:	429e      	cmp	r6, r3
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	d111      	bne.n	8004a6a <log10+0xc2>
 8004a46:	f7ff fae9 	bl	800401c <__errno>
 8004a4a:	2322      	movs	r3, #34	; 0x22
 8004a4c:	6003      	str	r3, [r0, #0]
 8004a4e:	e011      	b.n	8004a74 <log10+0xcc>
 8004a50:	4668      	mov	r0, sp
 8004a52:	f000 f8b3 	bl	8004bbc <matherr>
 8004a56:	2800      	cmp	r0, #0
 8004a58:	d0e0      	beq.n	8004a1c <log10+0x74>
 8004a5a:	4812      	ldr	r0, [pc, #72]	; (8004aa4 <log10+0xfc>)
 8004a5c:	f000 f8b0 	bl	8004bc0 <nan>
 8004a60:	ed8d 0b06 	vstr	d0, [sp, #24]
 8004a64:	e006      	b.n	8004a74 <log10+0xcc>
 8004a66:	2302      	movs	r3, #2
 8004a68:	9300      	str	r3, [sp, #0]
 8004a6a:	4668      	mov	r0, sp
 8004a6c:	f000 f8a6 	bl	8004bbc <matherr>
 8004a70:	2800      	cmp	r0, #0
 8004a72:	d0e8      	beq.n	8004a46 <log10+0x9e>
 8004a74:	9b08      	ldr	r3, [sp, #32]
 8004a76:	b11b      	cbz	r3, 8004a80 <log10+0xd8>
 8004a78:	f7ff fad0 	bl	800401c <__errno>
 8004a7c:	9b08      	ldr	r3, [sp, #32]
 8004a7e:	6003      	str	r3, [r0, #0]
 8004a80:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004a84:	eeb0 0a48 	vmov.f32	s0, s16
 8004a88:	eef0 0a68 	vmov.f32	s1, s17
 8004a8c:	b00b      	add	sp, #44	; 0x2c
 8004a8e:	ecbd 8b02 	vpop	{d8}
 8004a92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a94:	20000070 	.word	0x20000070
 8004a98:	08004fbb 	.word	0x08004fbb
 8004a9c:	c7efffff 	.word	0xc7efffff
 8004aa0:	fff00000 	.word	0xfff00000
 8004aa4:	08004f8d 	.word	0x08004f8d

08004aa8 <__ieee754_log10>:
 8004aa8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004aac:	ec55 4b10 	vmov	r4, r5, d0
 8004ab0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8004ab4:	462b      	mov	r3, r5
 8004ab6:	da2f      	bge.n	8004b18 <__ieee754_log10+0x70>
 8004ab8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8004abc:	4322      	orrs	r2, r4
 8004abe:	d10a      	bne.n	8004ad6 <__ieee754_log10+0x2e>
 8004ac0:	493b      	ldr	r1, [pc, #236]	; (8004bb0 <__ieee754_log10+0x108>)
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2000      	movs	r0, #0
 8004ac8:	f7fb feb8 	bl	800083c <__aeabi_ddiv>
 8004acc:	ec41 0b10 	vmov	d0, r0, r1
 8004ad0:	b003      	add	sp, #12
 8004ad2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004ad6:	2d00      	cmp	r5, #0
 8004ad8:	da08      	bge.n	8004aec <__ieee754_log10+0x44>
 8004ada:	ee10 2a10 	vmov	r2, s0
 8004ade:	4620      	mov	r0, r4
 8004ae0:	4629      	mov	r1, r5
 8004ae2:	f7fb fbc9 	bl	8000278 <__aeabi_dsub>
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	2300      	movs	r3, #0
 8004aea:	e7ed      	b.n	8004ac8 <__ieee754_log10+0x20>
 8004aec:	2200      	movs	r2, #0
 8004aee:	4b31      	ldr	r3, [pc, #196]	; (8004bb4 <__ieee754_log10+0x10c>)
 8004af0:	4629      	mov	r1, r5
 8004af2:	ee10 0a10 	vmov	r0, s0
 8004af6:	f7fb fd77 	bl	80005e8 <__aeabi_dmul>
 8004afa:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8004afe:	4604      	mov	r4, r0
 8004b00:	460d      	mov	r5, r1
 8004b02:	460b      	mov	r3, r1
 8004b04:	492c      	ldr	r1, [pc, #176]	; (8004bb8 <__ieee754_log10+0x110>)
 8004b06:	428b      	cmp	r3, r1
 8004b08:	dd08      	ble.n	8004b1c <__ieee754_log10+0x74>
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	462b      	mov	r3, r5
 8004b0e:	4620      	mov	r0, r4
 8004b10:	4629      	mov	r1, r5
 8004b12:	f7fb fbb3 	bl	800027c <__adddf3>
 8004b16:	e7d9      	b.n	8004acc <__ieee754_log10+0x24>
 8004b18:	2200      	movs	r2, #0
 8004b1a:	e7f3      	b.n	8004b04 <__ieee754_log10+0x5c>
 8004b1c:	1518      	asrs	r0, r3, #20
 8004b1e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8004b22:	4410      	add	r0, r2
 8004b24:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8004b28:	4448      	add	r0, r9
 8004b2a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8004b2e:	f7fb fcf1 	bl	8000514 <__aeabi_i2d>
 8004b32:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8004b36:	3303      	adds	r3, #3
 8004b38:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8004b3c:	ec45 4b10 	vmov	d0, r4, r5
 8004b40:	4606      	mov	r6, r0
 8004b42:	460f      	mov	r7, r1
 8004b44:	f000 f844 	bl	8004bd0 <__ieee754_log>
 8004b48:	a313      	add	r3, pc, #76	; (adr r3, 8004b98 <__ieee754_log10+0xf0>)
 8004b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4e:	4630      	mov	r0, r6
 8004b50:	4639      	mov	r1, r7
 8004b52:	ed8d 0b00 	vstr	d0, [sp]
 8004b56:	f7fb fd47 	bl	80005e8 <__aeabi_dmul>
 8004b5a:	ed9d 0b00 	vldr	d0, [sp]
 8004b5e:	4604      	mov	r4, r0
 8004b60:	460d      	mov	r5, r1
 8004b62:	a30f      	add	r3, pc, #60	; (adr r3, 8004ba0 <__ieee754_log10+0xf8>)
 8004b64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b68:	ec51 0b10 	vmov	r0, r1, d0
 8004b6c:	f7fb fd3c 	bl	80005e8 <__aeabi_dmul>
 8004b70:	4602      	mov	r2, r0
 8004b72:	460b      	mov	r3, r1
 8004b74:	4620      	mov	r0, r4
 8004b76:	4629      	mov	r1, r5
 8004b78:	f7fb fb80 	bl	800027c <__adddf3>
 8004b7c:	a30a      	add	r3, pc, #40	; (adr r3, 8004ba8 <__ieee754_log10+0x100>)
 8004b7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b82:	4604      	mov	r4, r0
 8004b84:	460d      	mov	r5, r1
 8004b86:	4630      	mov	r0, r6
 8004b88:	4639      	mov	r1, r7
 8004b8a:	f7fb fd2d 	bl	80005e8 <__aeabi_dmul>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	460b      	mov	r3, r1
 8004b92:	4620      	mov	r0, r4
 8004b94:	4629      	mov	r1, r5
 8004b96:	e7bc      	b.n	8004b12 <__ieee754_log10+0x6a>
 8004b98:	11f12b36 	.word	0x11f12b36
 8004b9c:	3d59fef3 	.word	0x3d59fef3
 8004ba0:	1526e50e 	.word	0x1526e50e
 8004ba4:	3fdbcb7b 	.word	0x3fdbcb7b
 8004ba8:	509f6000 	.word	0x509f6000
 8004bac:	3fd34413 	.word	0x3fd34413
 8004bb0:	c3500000 	.word	0xc3500000
 8004bb4:	43500000 	.word	0x43500000
 8004bb8:	7fefffff 	.word	0x7fefffff

08004bbc <matherr>:
 8004bbc:	2000      	movs	r0, #0
 8004bbe:	4770      	bx	lr

08004bc0 <nan>:
 8004bc0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8004bc8 <nan+0x8>
 8004bc4:	4770      	bx	lr
 8004bc6:	bf00      	nop
 8004bc8:	00000000 	.word	0x00000000
 8004bcc:	7ff80000 	.word	0x7ff80000

08004bd0 <__ieee754_log>:
 8004bd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bd4:	ec51 0b10 	vmov	r0, r1, d0
 8004bd8:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004bdc:	b087      	sub	sp, #28
 8004bde:	460d      	mov	r5, r1
 8004be0:	da27      	bge.n	8004c32 <__ieee754_log+0x62>
 8004be2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004be6:	4303      	orrs	r3, r0
 8004be8:	ee10 2a10 	vmov	r2, s0
 8004bec:	d10a      	bne.n	8004c04 <__ieee754_log+0x34>
 8004bee:	49cc      	ldr	r1, [pc, #816]	; (8004f20 <__ieee754_log+0x350>)
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	2300      	movs	r3, #0
 8004bf4:	2000      	movs	r0, #0
 8004bf6:	f7fb fe21 	bl	800083c <__aeabi_ddiv>
 8004bfa:	ec41 0b10 	vmov	d0, r0, r1
 8004bfe:	b007      	add	sp, #28
 8004c00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c04:	2900      	cmp	r1, #0
 8004c06:	da05      	bge.n	8004c14 <__ieee754_log+0x44>
 8004c08:	460b      	mov	r3, r1
 8004c0a:	f7fb fb35 	bl	8000278 <__aeabi_dsub>
 8004c0e:	2200      	movs	r2, #0
 8004c10:	2300      	movs	r3, #0
 8004c12:	e7f0      	b.n	8004bf6 <__ieee754_log+0x26>
 8004c14:	4bc3      	ldr	r3, [pc, #780]	; (8004f24 <__ieee754_log+0x354>)
 8004c16:	2200      	movs	r2, #0
 8004c18:	f7fb fce6 	bl	80005e8 <__aeabi_dmul>
 8004c1c:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8004c20:	460d      	mov	r5, r1
 8004c22:	4ac1      	ldr	r2, [pc, #772]	; (8004f28 <__ieee754_log+0x358>)
 8004c24:	4295      	cmp	r5, r2
 8004c26:	dd06      	ble.n	8004c36 <__ieee754_log+0x66>
 8004c28:	4602      	mov	r2, r0
 8004c2a:	460b      	mov	r3, r1
 8004c2c:	f7fb fb26 	bl	800027c <__adddf3>
 8004c30:	e7e3      	b.n	8004bfa <__ieee754_log+0x2a>
 8004c32:	2300      	movs	r3, #0
 8004c34:	e7f5      	b.n	8004c22 <__ieee754_log+0x52>
 8004c36:	152c      	asrs	r4, r5, #20
 8004c38:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004c3c:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8004c40:	441c      	add	r4, r3
 8004c42:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8004c46:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8004c4a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c4e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8004c52:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8004c56:	ea42 0105 	orr.w	r1, r2, r5
 8004c5a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8004c5e:	2200      	movs	r2, #0
 8004c60:	4bb2      	ldr	r3, [pc, #712]	; (8004f2c <__ieee754_log+0x35c>)
 8004c62:	f7fb fb09 	bl	8000278 <__aeabi_dsub>
 8004c66:	1cab      	adds	r3, r5, #2
 8004c68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	4682      	mov	sl, r0
 8004c70:	468b      	mov	fp, r1
 8004c72:	f04f 0200 	mov.w	r2, #0
 8004c76:	dc53      	bgt.n	8004d20 <__ieee754_log+0x150>
 8004c78:	2300      	movs	r3, #0
 8004c7a:	f7fb ff1d 	bl	8000ab8 <__aeabi_dcmpeq>
 8004c7e:	b1d0      	cbz	r0, 8004cb6 <__ieee754_log+0xe6>
 8004c80:	2c00      	cmp	r4, #0
 8004c82:	f000 8120 	beq.w	8004ec6 <__ieee754_log+0x2f6>
 8004c86:	4620      	mov	r0, r4
 8004c88:	f7fb fc44 	bl	8000514 <__aeabi_i2d>
 8004c8c:	a390      	add	r3, pc, #576	; (adr r3, 8004ed0 <__ieee754_log+0x300>)
 8004c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c92:	4606      	mov	r6, r0
 8004c94:	460f      	mov	r7, r1
 8004c96:	f7fb fca7 	bl	80005e8 <__aeabi_dmul>
 8004c9a:	a38f      	add	r3, pc, #572	; (adr r3, 8004ed8 <__ieee754_log+0x308>)
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	4604      	mov	r4, r0
 8004ca2:	460d      	mov	r5, r1
 8004ca4:	4630      	mov	r0, r6
 8004ca6:	4639      	mov	r1, r7
 8004ca8:	f7fb fc9e 	bl	80005e8 <__aeabi_dmul>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	4629      	mov	r1, r5
 8004cb4:	e7ba      	b.n	8004c2c <__ieee754_log+0x5c>
 8004cb6:	a38a      	add	r3, pc, #552	; (adr r3, 8004ee0 <__ieee754_log+0x310>)
 8004cb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbc:	4650      	mov	r0, sl
 8004cbe:	4659      	mov	r1, fp
 8004cc0:	f7fb fc92 	bl	80005e8 <__aeabi_dmul>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	2000      	movs	r0, #0
 8004cca:	4999      	ldr	r1, [pc, #612]	; (8004f30 <__ieee754_log+0x360>)
 8004ccc:	f7fb fad4 	bl	8000278 <__aeabi_dsub>
 8004cd0:	4652      	mov	r2, sl
 8004cd2:	4606      	mov	r6, r0
 8004cd4:	460f      	mov	r7, r1
 8004cd6:	465b      	mov	r3, fp
 8004cd8:	4650      	mov	r0, sl
 8004cda:	4659      	mov	r1, fp
 8004cdc:	f7fb fc84 	bl	80005e8 <__aeabi_dmul>
 8004ce0:	4602      	mov	r2, r0
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	4630      	mov	r0, r6
 8004ce6:	4639      	mov	r1, r7
 8004ce8:	f7fb fc7e 	bl	80005e8 <__aeabi_dmul>
 8004cec:	4606      	mov	r6, r0
 8004cee:	460f      	mov	r7, r1
 8004cf0:	b914      	cbnz	r4, 8004cf8 <__ieee754_log+0x128>
 8004cf2:	4632      	mov	r2, r6
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	e0a0      	b.n	8004e3a <__ieee754_log+0x26a>
 8004cf8:	4620      	mov	r0, r4
 8004cfa:	f7fb fc0b 	bl	8000514 <__aeabi_i2d>
 8004cfe:	a374      	add	r3, pc, #464	; (adr r3, 8004ed0 <__ieee754_log+0x300>)
 8004d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d04:	4680      	mov	r8, r0
 8004d06:	4689      	mov	r9, r1
 8004d08:	f7fb fc6e 	bl	80005e8 <__aeabi_dmul>
 8004d0c:	a372      	add	r3, pc, #456	; (adr r3, 8004ed8 <__ieee754_log+0x308>)
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	4604      	mov	r4, r0
 8004d14:	460d      	mov	r5, r1
 8004d16:	4640      	mov	r0, r8
 8004d18:	4649      	mov	r1, r9
 8004d1a:	f7fb fc65 	bl	80005e8 <__aeabi_dmul>
 8004d1e:	e0a5      	b.n	8004e6c <__ieee754_log+0x29c>
 8004d20:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004d24:	f7fb faaa 	bl	800027c <__adddf3>
 8004d28:	4602      	mov	r2, r0
 8004d2a:	460b      	mov	r3, r1
 8004d2c:	4650      	mov	r0, sl
 8004d2e:	4659      	mov	r1, fp
 8004d30:	f7fb fd84 	bl	800083c <__aeabi_ddiv>
 8004d34:	e9cd 0100 	strd	r0, r1, [sp]
 8004d38:	4620      	mov	r0, r4
 8004d3a:	f7fb fbeb 	bl	8000514 <__aeabi_i2d>
 8004d3e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d46:	4610      	mov	r0, r2
 8004d48:	4619      	mov	r1, r3
 8004d4a:	f7fb fc4d 	bl	80005e8 <__aeabi_dmul>
 8004d4e:	4602      	mov	r2, r0
 8004d50:	460b      	mov	r3, r1
 8004d52:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d56:	f7fb fc47 	bl	80005e8 <__aeabi_dmul>
 8004d5a:	a363      	add	r3, pc, #396	; (adr r3, 8004ee8 <__ieee754_log+0x318>)
 8004d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d60:	4680      	mov	r8, r0
 8004d62:	4689      	mov	r9, r1
 8004d64:	f7fb fc40 	bl	80005e8 <__aeabi_dmul>
 8004d68:	a361      	add	r3, pc, #388	; (adr r3, 8004ef0 <__ieee754_log+0x320>)
 8004d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6e:	f7fb fa85 	bl	800027c <__adddf3>
 8004d72:	4642      	mov	r2, r8
 8004d74:	464b      	mov	r3, r9
 8004d76:	f7fb fc37 	bl	80005e8 <__aeabi_dmul>
 8004d7a:	a35f      	add	r3, pc, #380	; (adr r3, 8004ef8 <__ieee754_log+0x328>)
 8004d7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d80:	f7fb fa7c 	bl	800027c <__adddf3>
 8004d84:	4642      	mov	r2, r8
 8004d86:	464b      	mov	r3, r9
 8004d88:	f7fb fc2e 	bl	80005e8 <__aeabi_dmul>
 8004d8c:	a35c      	add	r3, pc, #368	; (adr r3, 8004f00 <__ieee754_log+0x330>)
 8004d8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d92:	f7fb fa73 	bl	800027c <__adddf3>
 8004d96:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004d9a:	f7fb fc25 	bl	80005e8 <__aeabi_dmul>
 8004d9e:	a35a      	add	r3, pc, #360	; (adr r3, 8004f08 <__ieee754_log+0x338>)
 8004da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004da8:	4640      	mov	r0, r8
 8004daa:	4649      	mov	r1, r9
 8004dac:	f7fb fc1c 	bl	80005e8 <__aeabi_dmul>
 8004db0:	a357      	add	r3, pc, #348	; (adr r3, 8004f10 <__ieee754_log+0x340>)
 8004db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db6:	f7fb fa61 	bl	800027c <__adddf3>
 8004dba:	4642      	mov	r2, r8
 8004dbc:	464b      	mov	r3, r9
 8004dbe:	f7fb fc13 	bl	80005e8 <__aeabi_dmul>
 8004dc2:	a355      	add	r3, pc, #340	; (adr r3, 8004f18 <__ieee754_log+0x348>)
 8004dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc8:	f7fb fa58 	bl	800027c <__adddf3>
 8004dcc:	4642      	mov	r2, r8
 8004dce:	464b      	mov	r3, r9
 8004dd0:	f7fb fc0a 	bl	80005e8 <__aeabi_dmul>
 8004dd4:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8004dd8:	4602      	mov	r2, r0
 8004dda:	460b      	mov	r3, r1
 8004ddc:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8004de0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004de4:	f7fb fa4a 	bl	800027c <__adddf3>
 8004de8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8004dec:	3551      	adds	r5, #81	; 0x51
 8004dee:	4335      	orrs	r5, r6
 8004df0:	2d00      	cmp	r5, #0
 8004df2:	4680      	mov	r8, r0
 8004df4:	4689      	mov	r9, r1
 8004df6:	dd48      	ble.n	8004e8a <__ieee754_log+0x2ba>
 8004df8:	2200      	movs	r2, #0
 8004dfa:	4b4d      	ldr	r3, [pc, #308]	; (8004f30 <__ieee754_log+0x360>)
 8004dfc:	4650      	mov	r0, sl
 8004dfe:	4659      	mov	r1, fp
 8004e00:	f7fb fbf2 	bl	80005e8 <__aeabi_dmul>
 8004e04:	4652      	mov	r2, sl
 8004e06:	465b      	mov	r3, fp
 8004e08:	f7fb fbee 	bl	80005e8 <__aeabi_dmul>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	460b      	mov	r3, r1
 8004e10:	4606      	mov	r6, r0
 8004e12:	460f      	mov	r7, r1
 8004e14:	4640      	mov	r0, r8
 8004e16:	4649      	mov	r1, r9
 8004e18:	f7fb fa30 	bl	800027c <__adddf3>
 8004e1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e20:	f7fb fbe2 	bl	80005e8 <__aeabi_dmul>
 8004e24:	4680      	mov	r8, r0
 8004e26:	4689      	mov	r9, r1
 8004e28:	b964      	cbnz	r4, 8004e44 <__ieee754_log+0x274>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	460b      	mov	r3, r1
 8004e2e:	4630      	mov	r0, r6
 8004e30:	4639      	mov	r1, r7
 8004e32:	f7fb fa21 	bl	8000278 <__aeabi_dsub>
 8004e36:	4602      	mov	r2, r0
 8004e38:	460b      	mov	r3, r1
 8004e3a:	4650      	mov	r0, sl
 8004e3c:	4659      	mov	r1, fp
 8004e3e:	f7fb fa1b 	bl	8000278 <__aeabi_dsub>
 8004e42:	e6da      	b.n	8004bfa <__ieee754_log+0x2a>
 8004e44:	a322      	add	r3, pc, #136	; (adr r3, 8004ed0 <__ieee754_log+0x300>)
 8004e46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e4e:	f7fb fbcb 	bl	80005e8 <__aeabi_dmul>
 8004e52:	a321      	add	r3, pc, #132	; (adr r3, 8004ed8 <__ieee754_log+0x308>)
 8004e54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e58:	4604      	mov	r4, r0
 8004e5a:	460d      	mov	r5, r1
 8004e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e60:	f7fb fbc2 	bl	80005e8 <__aeabi_dmul>
 8004e64:	4642      	mov	r2, r8
 8004e66:	464b      	mov	r3, r9
 8004e68:	f7fb fa08 	bl	800027c <__adddf3>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4630      	mov	r0, r6
 8004e72:	4639      	mov	r1, r7
 8004e74:	f7fb fa00 	bl	8000278 <__aeabi_dsub>
 8004e78:	4652      	mov	r2, sl
 8004e7a:	465b      	mov	r3, fp
 8004e7c:	f7fb f9fc 	bl	8000278 <__aeabi_dsub>
 8004e80:	4602      	mov	r2, r0
 8004e82:	460b      	mov	r3, r1
 8004e84:	4620      	mov	r0, r4
 8004e86:	4629      	mov	r1, r5
 8004e88:	e7d9      	b.n	8004e3e <__ieee754_log+0x26e>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4650      	mov	r0, sl
 8004e90:	4659      	mov	r1, fp
 8004e92:	f7fb f9f1 	bl	8000278 <__aeabi_dsub>
 8004e96:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e9a:	f7fb fba5 	bl	80005e8 <__aeabi_dmul>
 8004e9e:	4606      	mov	r6, r0
 8004ea0:	460f      	mov	r7, r1
 8004ea2:	2c00      	cmp	r4, #0
 8004ea4:	f43f af25 	beq.w	8004cf2 <__ieee754_log+0x122>
 8004ea8:	a309      	add	r3, pc, #36	; (adr r3, 8004ed0 <__ieee754_log+0x300>)
 8004eaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eb2:	f7fb fb99 	bl	80005e8 <__aeabi_dmul>
 8004eb6:	a308      	add	r3, pc, #32	; (adr r3, 8004ed8 <__ieee754_log+0x308>)
 8004eb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebc:	4604      	mov	r4, r0
 8004ebe:	460d      	mov	r5, r1
 8004ec0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ec4:	e729      	b.n	8004d1a <__ieee754_log+0x14a>
 8004ec6:	2000      	movs	r0, #0
 8004ec8:	2100      	movs	r1, #0
 8004eca:	e696      	b.n	8004bfa <__ieee754_log+0x2a>
 8004ecc:	f3af 8000 	nop.w
 8004ed0:	fee00000 	.word	0xfee00000
 8004ed4:	3fe62e42 	.word	0x3fe62e42
 8004ed8:	35793c76 	.word	0x35793c76
 8004edc:	3dea39ef 	.word	0x3dea39ef
 8004ee0:	55555555 	.word	0x55555555
 8004ee4:	3fd55555 	.word	0x3fd55555
 8004ee8:	df3e5244 	.word	0xdf3e5244
 8004eec:	3fc2f112 	.word	0x3fc2f112
 8004ef0:	96cb03de 	.word	0x96cb03de
 8004ef4:	3fc74664 	.word	0x3fc74664
 8004ef8:	94229359 	.word	0x94229359
 8004efc:	3fd24924 	.word	0x3fd24924
 8004f00:	55555593 	.word	0x55555593
 8004f04:	3fe55555 	.word	0x3fe55555
 8004f08:	d078c69f 	.word	0xd078c69f
 8004f0c:	3fc39a09 	.word	0x3fc39a09
 8004f10:	1d8e78af 	.word	0x1d8e78af
 8004f14:	3fcc71c5 	.word	0x3fcc71c5
 8004f18:	9997fa04 	.word	0x9997fa04
 8004f1c:	3fd99999 	.word	0x3fd99999
 8004f20:	c3500000 	.word	0xc3500000
 8004f24:	43500000 	.word	0x43500000
 8004f28:	7fefffff 	.word	0x7fefffff
 8004f2c:	3ff00000 	.word	0x3ff00000
 8004f30:	3fe00000 	.word	0x3fe00000

08004f34 <_init>:
 8004f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f36:	bf00      	nop
 8004f38:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f3a:	bc08      	pop	{r3}
 8004f3c:	469e      	mov	lr, r3
 8004f3e:	4770      	bx	lr

08004f40 <_fini>:
 8004f40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f42:	bf00      	nop
 8004f44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f46:	bc08      	pop	{r3}
 8004f48:	469e      	mov	lr, r3
 8004f4a:	4770      	bx	lr
