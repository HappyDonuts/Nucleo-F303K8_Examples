
F303_I2C_ADC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005454  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001554  080055e4  080055e4  000155e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006b38  08006b38  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  08006b38  08006b38  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006b38  08006b38  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006b38  08006b38  00016b38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006b3c  08006b3c  00016b3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  08006b40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ec  20000084  08006bc4  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000170  08006bc4  00020170  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013029  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000025dd  00000000  00000000  000330dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009d0  00000000  00000000  000356c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008c8  00000000  00000000  00036090  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018c39  00000000  00000000  00036958  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b0ac  00000000  00000000  0004f591  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00080e22  00000000  00000000  0005a63d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db45f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d98  00000000  00000000  000db4dc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080055cc 	.word	0x080055cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	080055cc 	.word	0x080055cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <HAL_Init+0x28>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	4a07      	ldr	r2, [pc, #28]	; (8000bb0 <HAL_Init+0x28>)
 8000b92:	f043 0310 	orr.w	r3, r3, #16
 8000b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b98:	2003      	movs	r0, #3
 8000b9a:	f000 f92f 	bl	8000dfc <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f000 f808 	bl	8000bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ba4:	f003 fc0c 	bl	80043c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ba8:	2300      	movs	r3, #0
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	bd80      	pop	{r7, pc}
 8000bae:	bf00      	nop
 8000bb0:	40022000 	.word	0x40022000

08000bb4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bbc:	4b12      	ldr	r3, [pc, #72]	; (8000c08 <HAL_InitTick+0x54>)
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <HAL_InitTick+0x58>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f000 f939 	bl	8000e4a <HAL_SYSTICK_Config>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bde:	2301      	movs	r3, #1
 8000be0:	e00e      	b.n	8000c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	2b0f      	cmp	r3, #15
 8000be6:	d80a      	bhi.n	8000bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be8:	2200      	movs	r2, #0
 8000bea:	6879      	ldr	r1, [r7, #4]
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	f000 f90f 	bl	8000e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000bf4:	4a06      	ldr	r2, [pc, #24]	; (8000c10 <HAL_InitTick+0x5c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e000      	b.n	8000c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bfe:	2301      	movs	r3, #1
}
 8000c00:	4618      	mov	r0, r3
 8000c02:	3708      	adds	r7, #8
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000018 	.word	0x20000018
 8000c0c:	20000004 	.word	0x20000004
 8000c10:	20000000 	.word	0x20000000

08000c14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c18:	4b06      	ldr	r3, [pc, #24]	; (8000c34 <HAL_IncTick+0x20>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	461a      	mov	r2, r3
 8000c1e:	4b06      	ldr	r3, [pc, #24]	; (8000c38 <HAL_IncTick+0x24>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4413      	add	r3, r2
 8000c24:	4a04      	ldr	r2, [pc, #16]	; (8000c38 <HAL_IncTick+0x24>)
 8000c26:	6013      	str	r3, [r2, #0]
}
 8000c28:	bf00      	nop
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c30:	4770      	bx	lr
 8000c32:	bf00      	nop
 8000c34:	20000004 	.word	0x20000004
 8000c38:	200000ac 	.word	0x200000ac

08000c3c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_GetTick+0x14>)
 8000c42:	681b      	ldr	r3, [r3, #0]
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
 8000c4e:	bf00      	nop
 8000c50:	200000ac 	.word	0x200000ac

08000c54 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b084      	sub	sp, #16
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c5c:	f7ff ffee 	bl	8000c3c <HAL_GetTick>
 8000c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c66:	68fb      	ldr	r3, [r7, #12]
 8000c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c6c:	d005      	beq.n	8000c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c6e:	4b09      	ldr	r3, [pc, #36]	; (8000c94 <HAL_Delay+0x40>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	68fb      	ldr	r3, [r7, #12]
 8000c76:	4413      	add	r3, r2
 8000c78:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000c7a:	bf00      	nop
 8000c7c:	f7ff ffde 	bl	8000c3c <HAL_GetTick>
 8000c80:	4602      	mov	r2, r0
 8000c82:	68bb      	ldr	r3, [r7, #8]
 8000c84:	1ad3      	subs	r3, r2, r3
 8000c86:	68fa      	ldr	r2, [r7, #12]
 8000c88:	429a      	cmp	r2, r3
 8000c8a:	d8f7      	bhi.n	8000c7c <HAL_Delay+0x28>
  {
  }
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	20000004 	.word	0x20000004

08000c98 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c98:	b480      	push	{r7}
 8000c9a:	b085      	sub	sp, #20
 8000c9c:	af00      	add	r7, sp, #0
 8000c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ca0:	687b      	ldr	r3, [r7, #4]
 8000ca2:	f003 0307 	and.w	r3, r3, #7
 8000ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <NVIC_SetPriorityGrouping+0x44>)
 8000caa:	68db      	ldr	r3, [r3, #12]
 8000cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cae:	68ba      	ldr	r2, [r7, #8]
 8000cb0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cb4:	4013      	ands	r3, r2
 8000cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000cb8:	68fb      	ldr	r3, [r7, #12]
 8000cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cbc:	68bb      	ldr	r3, [r7, #8]
 8000cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cc0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000cc4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cca:	4a04      	ldr	r2, [pc, #16]	; (8000cdc <NVIC_SetPriorityGrouping+0x44>)
 8000ccc:	68bb      	ldr	r3, [r7, #8]
 8000cce:	60d3      	str	r3, [r2, #12]
}
 8000cd0:	bf00      	nop
 8000cd2:	3714      	adds	r7, #20
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cda:	4770      	bx	lr
 8000cdc:	e000ed00 	.word	0xe000ed00

08000ce0 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ce4:	4b04      	ldr	r3, [pc, #16]	; (8000cf8 <NVIC_GetPriorityGrouping+0x18>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	0a1b      	lsrs	r3, r3, #8
 8000cea:	f003 0307 	and.w	r3, r3, #7
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf6:	4770      	bx	lr
 8000cf8:	e000ed00 	.word	0xe000ed00

08000cfc <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	b083      	sub	sp, #12
 8000d00:	af00      	add	r7, sp, #0
 8000d02:	4603      	mov	r3, r0
 8000d04:	6039      	str	r1, [r7, #0]
 8000d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	da0b      	bge.n	8000d28 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d10:	683b      	ldr	r3, [r7, #0]
 8000d12:	b2da      	uxtb	r2, r3
 8000d14:	490c      	ldr	r1, [pc, #48]	; (8000d48 <NVIC_SetPriority+0x4c>)
 8000d16:	79fb      	ldrb	r3, [r7, #7]
 8000d18:	f003 030f 	and.w	r3, r3, #15
 8000d1c:	3b04      	subs	r3, #4
 8000d1e:	0112      	lsls	r2, r2, #4
 8000d20:	b2d2      	uxtb	r2, r2
 8000d22:	440b      	add	r3, r1
 8000d24:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d26:	e009      	b.n	8000d3c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	4907      	ldr	r1, [pc, #28]	; (8000d4c <NVIC_SetPriority+0x50>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000d3c:	bf00      	nop
 8000d3e:	370c      	adds	r7, #12
 8000d40:	46bd      	mov	sp, r7
 8000d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d46:	4770      	bx	lr
 8000d48:	e000ed00 	.word	0xe000ed00
 8000d4c:	e000e100 	.word	0xe000e100

08000d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b089      	sub	sp, #36	; 0x24
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	60b9      	str	r1, [r7, #8]
 8000d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d5c:	68fb      	ldr	r3, [r7, #12]
 8000d5e:	f003 0307 	and.w	r3, r3, #7
 8000d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d64:	69fb      	ldr	r3, [r7, #28]
 8000d66:	f1c3 0307 	rsb	r3, r3, #7
 8000d6a:	2b04      	cmp	r3, #4
 8000d6c:	bf28      	it	cs
 8000d6e:	2304      	movcs	r3, #4
 8000d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d72:	69fb      	ldr	r3, [r7, #28]
 8000d74:	3304      	adds	r3, #4
 8000d76:	2b06      	cmp	r3, #6
 8000d78:	d902      	bls.n	8000d80 <NVIC_EncodePriority+0x30>
 8000d7a:	69fb      	ldr	r3, [r7, #28]
 8000d7c:	3b03      	subs	r3, #3
 8000d7e:	e000      	b.n	8000d82 <NVIC_EncodePriority+0x32>
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	f04f 32ff 	mov.w	r2, #4294967295
 8000d88:	69bb      	ldr	r3, [r7, #24]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43da      	mvns	r2, r3
 8000d90:	68bb      	ldr	r3, [r7, #8]
 8000d92:	401a      	ands	r2, r3
 8000d94:	697b      	ldr	r3, [r7, #20]
 8000d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d98:	f04f 31ff 	mov.w	r1, #4294967295
 8000d9c:	697b      	ldr	r3, [r7, #20]
 8000d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000da2:	43d9      	mvns	r1, r3
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000da8:	4313      	orrs	r3, r2
         );
}
 8000daa:	4618      	mov	r0, r3
 8000dac:	3724      	adds	r7, #36	; 0x24
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b082      	sub	sp, #8
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	3b01      	subs	r3, #1
 8000dc4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000dc8:	d301      	bcc.n	8000dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000dca:	2301      	movs	r3, #1
 8000dcc:	e00f      	b.n	8000dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000dce:	4a0a      	ldr	r2, [pc, #40]	; (8000df8 <SysTick_Config+0x40>)
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dd6:	210f      	movs	r1, #15
 8000dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000ddc:	f7ff ff8e 	bl	8000cfc <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000de0:	4b05      	ldr	r3, [pc, #20]	; (8000df8 <SysTick_Config+0x40>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000de6:	4b04      	ldr	r3, [pc, #16]	; (8000df8 <SysTick_Config+0x40>)
 8000de8:	2207      	movs	r2, #7
 8000dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dec:	2300      	movs	r3, #0
}
 8000dee:	4618      	mov	r0, r3
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	e000e010 	.word	0xe000e010

08000dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e04:	6878      	ldr	r0, [r7, #4]
 8000e06:	f7ff ff47 	bl	8000c98 <NVIC_SetPriorityGrouping>
}
 8000e0a:	bf00      	nop
 8000e0c:	3708      	adds	r7, #8
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b086      	sub	sp, #24
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	4603      	mov	r3, r0
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
 8000e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e20:	2300      	movs	r3, #0
 8000e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e24:	f7ff ff5c 	bl	8000ce0 <NVIC_GetPriorityGrouping>
 8000e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e2a:	687a      	ldr	r2, [r7, #4]
 8000e2c:	68b9      	ldr	r1, [r7, #8]
 8000e2e:	6978      	ldr	r0, [r7, #20]
 8000e30:	f7ff ff8e 	bl	8000d50 <NVIC_EncodePriority>
 8000e34:	4602      	mov	r2, r0
 8000e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e3a:	4611      	mov	r1, r2
 8000e3c:	4618      	mov	r0, r3
 8000e3e:	f7ff ff5d 	bl	8000cfc <NVIC_SetPriority>
}
 8000e42:	bf00      	nop
 8000e44:	3718      	adds	r7, #24
 8000e46:	46bd      	mov	sp, r7
 8000e48:	bd80      	pop	{r7, pc}

08000e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
 8000e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e52:	6878      	ldr	r0, [r7, #4]
 8000e54:	f7ff ffb0 	bl	8000db8 <SysTick_Config>
 8000e58:	4603      	mov	r3, r0
}
 8000e5a:	4618      	mov	r0, r3
 8000e5c:	3708      	adds	r7, #8
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
	...

08000e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e64:	b480      	push	{r7}
 8000e66:	b087      	sub	sp, #28
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
 8000e6c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000e72:	2300      	movs	r3, #0
 8000e74:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000e7a:	e14e      	b.n	800111a <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	2101      	movs	r1, #1
 8000e82:	697b      	ldr	r3, [r7, #20]
 8000e84:	fa01 f303 	lsl.w	r3, r1, r3
 8000e88:	4013      	ands	r3, r2
 8000e8a:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	f000 8140 	beq.w	8001114 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	2b02      	cmp	r3, #2
 8000e9a:	d003      	beq.n	8000ea4 <HAL_GPIO_Init+0x40>
 8000e9c:	683b      	ldr	r3, [r7, #0]
 8000e9e:	685b      	ldr	r3, [r3, #4]
 8000ea0:	2b12      	cmp	r3, #18
 8000ea2:	d123      	bne.n	8000eec <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	08da      	lsrs	r2, r3, #3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	3208      	adds	r2, #8
 8000eac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000eb0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	f003 0307 	and.w	r3, r3, #7
 8000eb8:	009b      	lsls	r3, r3, #2
 8000eba:	220f      	movs	r2, #15
 8000ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec0:	43db      	mvns	r3, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	691a      	ldr	r2, [r3, #16]
 8000ecc:	697b      	ldr	r3, [r7, #20]
 8000ece:	f003 0307 	and.w	r3, r3, #7
 8000ed2:	009b      	lsls	r3, r3, #2
 8000ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed8:	693a      	ldr	r2, [r7, #16]
 8000eda:	4313      	orrs	r3, r2
 8000edc:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000ede:	697b      	ldr	r3, [r7, #20]
 8000ee0:	08da      	lsrs	r2, r3, #3
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	3208      	adds	r2, #8
 8000ee6:	6939      	ldr	r1, [r7, #16]
 8000ee8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ef2:	697b      	ldr	r3, [r7, #20]
 8000ef4:	005b      	lsls	r3, r3, #1
 8000ef6:	2203      	movs	r2, #3
 8000ef8:	fa02 f303 	lsl.w	r3, r2, r3
 8000efc:	43db      	mvns	r3, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4013      	ands	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f003 0203 	and.w	r2, r3, #3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	005b      	lsls	r3, r3, #1
 8000f10:	fa02 f303 	lsl.w	r3, r2, r3
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	4313      	orrs	r3, r2
 8000f18:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f20:	683b      	ldr	r3, [r7, #0]
 8000f22:	685b      	ldr	r3, [r3, #4]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d00b      	beq.n	8000f40 <HAL_GPIO_Init+0xdc>
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	685b      	ldr	r3, [r3, #4]
 8000f2c:	2b02      	cmp	r3, #2
 8000f2e:	d007      	beq.n	8000f40 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f30:	683b      	ldr	r3, [r7, #0]
 8000f32:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000f34:	2b11      	cmp	r3, #17
 8000f36:	d003      	beq.n	8000f40 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	2b12      	cmp	r3, #18
 8000f3e:	d130      	bne.n	8000fa2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	689b      	ldr	r3, [r3, #8]
 8000f44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	2203      	movs	r2, #3
 8000f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f50:	43db      	mvns	r3, r3
 8000f52:	693a      	ldr	r2, [r7, #16]
 8000f54:	4013      	ands	r3, r2
 8000f56:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	68da      	ldr	r2, [r3, #12]
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	fa02 f303 	lsl.w	r3, r2, r3
 8000f64:	693a      	ldr	r2, [r7, #16]
 8000f66:	4313      	orrs	r3, r2
 8000f68:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	693a      	ldr	r2, [r7, #16]
 8000f6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	685b      	ldr	r3, [r3, #4]
 8000f74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f76:	2201      	movs	r2, #1
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	693a      	ldr	r2, [r7, #16]
 8000f82:	4013      	ands	r3, r2
 8000f84:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	091b      	lsrs	r3, r3, #4
 8000f8c:	f003 0201 	and.w	r2, r3, #1
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	693a      	ldr	r2, [r7, #16]
 8000f98:	4313      	orrs	r3, r2
 8000f9a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	693a      	ldr	r2, [r7, #16]
 8000fa0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68db      	ldr	r3, [r3, #12]
 8000fa6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	005b      	lsls	r3, r3, #1
 8000fac:	2203      	movs	r2, #3
 8000fae:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb2:	43db      	mvns	r3, r3
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	4013      	ands	r3, r2
 8000fb8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	697b      	ldr	r3, [r7, #20]
 8000fc0:	005b      	lsls	r3, r3, #1
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	693a      	ldr	r2, [r7, #16]
 8000fd0:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	f000 809a 	beq.w	8001114 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fe0:	4b55      	ldr	r3, [pc, #340]	; (8001138 <HAL_GPIO_Init+0x2d4>)
 8000fe2:	699b      	ldr	r3, [r3, #24]
 8000fe4:	4a54      	ldr	r2, [pc, #336]	; (8001138 <HAL_GPIO_Init+0x2d4>)
 8000fe6:	f043 0301 	orr.w	r3, r3, #1
 8000fea:	6193      	str	r3, [r2, #24]
 8000fec:	4b52      	ldr	r3, [pc, #328]	; (8001138 <HAL_GPIO_Init+0x2d4>)
 8000fee:	699b      	ldr	r3, [r3, #24]
 8000ff0:	f003 0301 	and.w	r3, r3, #1
 8000ff4:	60bb      	str	r3, [r7, #8]
 8000ff6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000ff8:	4a50      	ldr	r2, [pc, #320]	; (800113c <HAL_GPIO_Init+0x2d8>)
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	089b      	lsrs	r3, r3, #2
 8000ffe:	3302      	adds	r3, #2
 8001000:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001004:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001006:	697b      	ldr	r3, [r7, #20]
 8001008:	f003 0303 	and.w	r3, r3, #3
 800100c:	009b      	lsls	r3, r3, #2
 800100e:	220f      	movs	r2, #15
 8001010:	fa02 f303 	lsl.w	r3, r2, r3
 8001014:	43db      	mvns	r3, r3
 8001016:	693a      	ldr	r2, [r7, #16]
 8001018:	4013      	ands	r3, r2
 800101a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001022:	d013      	beq.n	800104c <HAL_GPIO_Init+0x1e8>
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	4a46      	ldr	r2, [pc, #280]	; (8001140 <HAL_GPIO_Init+0x2dc>)
 8001028:	4293      	cmp	r3, r2
 800102a:	d00d      	beq.n	8001048 <HAL_GPIO_Init+0x1e4>
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	4a45      	ldr	r2, [pc, #276]	; (8001144 <HAL_GPIO_Init+0x2e0>)
 8001030:	4293      	cmp	r3, r2
 8001032:	d007      	beq.n	8001044 <HAL_GPIO_Init+0x1e0>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a44      	ldr	r2, [pc, #272]	; (8001148 <HAL_GPIO_Init+0x2e4>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d101      	bne.n	8001040 <HAL_GPIO_Init+0x1dc>
 800103c:	2303      	movs	r3, #3
 800103e:	e006      	b.n	800104e <HAL_GPIO_Init+0x1ea>
 8001040:	2305      	movs	r3, #5
 8001042:	e004      	b.n	800104e <HAL_GPIO_Init+0x1ea>
 8001044:	2302      	movs	r3, #2
 8001046:	e002      	b.n	800104e <HAL_GPIO_Init+0x1ea>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <HAL_GPIO_Init+0x1ea>
 800104c:	2300      	movs	r3, #0
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	f002 0203 	and.w	r2, r2, #3
 8001054:	0092      	lsls	r2, r2, #2
 8001056:	4093      	lsls	r3, r2
 8001058:	693a      	ldr	r2, [r7, #16]
 800105a:	4313      	orrs	r3, r2
 800105c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800105e:	4937      	ldr	r1, [pc, #220]	; (800113c <HAL_GPIO_Init+0x2d8>)
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	089b      	lsrs	r3, r3, #2
 8001064:	3302      	adds	r3, #2
 8001066:	693a      	ldr	r2, [r7, #16]
 8001068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800106c:	4b37      	ldr	r3, [pc, #220]	; (800114c <HAL_GPIO_Init+0x2e8>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	43db      	mvns	r3, r3
 8001076:	693a      	ldr	r2, [r7, #16]
 8001078:	4013      	ands	r3, r2
 800107a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800107c:	683b      	ldr	r3, [r7, #0]
 800107e:	685b      	ldr	r3, [r3, #4]
 8001080:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001084:	2b00      	cmp	r3, #0
 8001086:	d003      	beq.n	8001090 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	68fb      	ldr	r3, [r7, #12]
 800108c:	4313      	orrs	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8001090:	4a2e      	ldr	r2, [pc, #184]	; (800114c <HAL_GPIO_Init+0x2e8>)
 8001092:	693b      	ldr	r3, [r7, #16]
 8001094:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001096:	4b2d      	ldr	r3, [pc, #180]	; (800114c <HAL_GPIO_Init+0x2e8>)
 8001098:	685b      	ldr	r3, [r3, #4]
 800109a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	43db      	mvns	r3, r3
 80010a0:	693a      	ldr	r2, [r7, #16]
 80010a2:	4013      	ands	r3, r2
 80010a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	685b      	ldr	r3, [r3, #4]
 80010aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d003      	beq.n	80010ba <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80010b2:	693a      	ldr	r2, [r7, #16]
 80010b4:	68fb      	ldr	r3, [r7, #12]
 80010b6:	4313      	orrs	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80010ba:	4a24      	ldr	r2, [pc, #144]	; (800114c <HAL_GPIO_Init+0x2e8>)
 80010bc:	693b      	ldr	r3, [r7, #16]
 80010be:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80010c0:	4b22      	ldr	r3, [pc, #136]	; (800114c <HAL_GPIO_Init+0x2e8>)
 80010c2:	689b      	ldr	r3, [r3, #8]
 80010c4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010c6:	68fb      	ldr	r3, [r7, #12]
 80010c8:	43db      	mvns	r3, r3
 80010ca:	693a      	ldr	r2, [r7, #16]
 80010cc:	4013      	ands	r3, r2
 80010ce:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d003      	beq.n	80010e4 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 80010dc:	693a      	ldr	r2, [r7, #16]
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	4313      	orrs	r3, r2
 80010e2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80010e4:	4a19      	ldr	r2, [pc, #100]	; (800114c <HAL_GPIO_Init+0x2e8>)
 80010e6:	693b      	ldr	r3, [r7, #16]
 80010e8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010ea:	4b18      	ldr	r3, [pc, #96]	; (800114c <HAL_GPIO_Init+0x2e8>)
 80010ec:	68db      	ldr	r3, [r3, #12]
 80010ee:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80010f0:	68fb      	ldr	r3, [r7, #12]
 80010f2:	43db      	mvns	r3, r3
 80010f4:	693a      	ldr	r2, [r7, #16]
 80010f6:	4013      	ands	r3, r2
 80010f8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001102:	2b00      	cmp	r3, #0
 8001104:	d003      	beq.n	800110e <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8001106:	693a      	ldr	r2, [r7, #16]
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800110e:	4a0f      	ldr	r2, [pc, #60]	; (800114c <HAL_GPIO_Init+0x2e8>)
 8001110:	693b      	ldr	r3, [r7, #16]
 8001112:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	3301      	adds	r3, #1
 8001118:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800111a:	683b      	ldr	r3, [r7, #0]
 800111c:	681a      	ldr	r2, [r3, #0]
 800111e:	697b      	ldr	r3, [r7, #20]
 8001120:	fa22 f303 	lsr.w	r3, r2, r3
 8001124:	2b00      	cmp	r3, #0
 8001126:	f47f aea9 	bne.w	8000e7c <HAL_GPIO_Init+0x18>
  }
}
 800112a:	bf00      	nop
 800112c:	371c      	adds	r7, #28
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
 8001136:	bf00      	nop
 8001138:	40021000 	.word	0x40021000
 800113c:	40010000 	.word	0x40010000
 8001140:	48000400 	.word	0x48000400
 8001144:	48000800 	.word	0x48000800
 8001148:	48000c00 	.word	0x48000c00
 800114c:	40010400 	.word	0x40010400

08001150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800116c:	e002      	b.n	8001174 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2b00      	cmp	r3, #0
 800118c:	d101      	bne.n	8001192 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800118e:	2301      	movs	r3, #1
 8001190:	e081      	b.n	8001296 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001198:	b2db      	uxtb	r3, r3
 800119a:	2b00      	cmp	r3, #0
 800119c:	d106      	bne.n	80011ac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	2200      	movs	r2, #0
 80011a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80011a6:	6878      	ldr	r0, [r7, #4]
 80011a8:	f003 f92e 	bl	8004408 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	2224      	movs	r2, #36	; 0x24
 80011b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f022 0201 	bic.w	r2, r2, #1
 80011c2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	685a      	ldr	r2, [r3, #4]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80011d0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80011e0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	68db      	ldr	r3, [r3, #12]
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d107      	bne.n	80011fa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	689a      	ldr	r2, [r3, #8]
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80011f6:	609a      	str	r2, [r3, #8]
 80011f8:	e006      	b.n	8001208 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001206:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	68db      	ldr	r3, [r3, #12]
 800120c:	2b02      	cmp	r3, #2
 800120e:	d104      	bne.n	800121a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001218:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	687a      	ldr	r2, [r7, #4]
 8001222:	6812      	ldr	r2, [r2, #0]
 8001224:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001228:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800122c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	68da      	ldr	r2, [r3, #12]
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800123c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	691a      	ldr	r2, [r3, #16]
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	ea42 0103 	orr.w	r1, r2, r3
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	699b      	ldr	r3, [r3, #24]
 800124e:	021a      	lsls	r2, r3, #8
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	430a      	orrs	r2, r1
 8001256:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	69d9      	ldr	r1, [r3, #28]
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	6a1a      	ldr	r2, [r3, #32]
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	430a      	orrs	r2, r1
 8001266:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f042 0201 	orr.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	2220      	movs	r2, #32
 8001282:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	2200      	movs	r2, #0
 800128a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	2200      	movs	r2, #0
 8001290:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	3708      	adds	r7, #8
 800129a:	46bd      	mov	sp, r7
 800129c:	bd80      	pop	{r7, pc}
	...

080012a0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b088      	sub	sp, #32
 80012a4:	af02      	add	r7, sp, #8
 80012a6:	60f8      	str	r0, [r7, #12]
 80012a8:	607a      	str	r2, [r7, #4]
 80012aa:	461a      	mov	r2, r3
 80012ac:	460b      	mov	r3, r1
 80012ae:	817b      	strh	r3, [r7, #10]
 80012b0:	4613      	mov	r3, r2
 80012b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	2b20      	cmp	r3, #32
 80012c2:	f040 80e4 	bne.w	800148e <HAL_I2C_Master_Transmit+0x1ee>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80012cc:	2b01      	cmp	r3, #1
 80012ce:	d101      	bne.n	80012d4 <HAL_I2C_Master_Transmit+0x34>
 80012d0:	2302      	movs	r3, #2
 80012d2:	e0dd      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	2201      	movs	r2, #1
 80012d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80012dc:	f7ff fcae 	bl	8000c3c <HAL_GetTick>
 80012e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	9300      	str	r3, [sp, #0]
 80012e6:	2319      	movs	r3, #25
 80012e8:	2201      	movs	r2, #1
 80012ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f000 fada 	bl	80018a8 <I2C_WaitOnFlagUntilTimeout>
 80012f4:	4603      	mov	r3, r0
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	d001      	beq.n	80012fe <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 80012fa:	2303      	movs	r3, #3
 80012fc:	e0c8      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	2221      	movs	r2, #33	; 0x21
 8001302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	2210      	movs	r2, #16
 800130a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	2200      	movs	r2, #0
 8001312:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	687a      	ldr	r2, [r7, #4]
 8001318:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	893a      	ldrh	r2, [r7, #8]
 800131e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	2200      	movs	r2, #0
 8001324:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800132a:	b29b      	uxth	r3, r3
 800132c:	2bff      	cmp	r3, #255	; 0xff
 800132e:	d90e      	bls.n	800134e <HAL_I2C_Master_Transmit+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	22ff      	movs	r2, #255	; 0xff
 8001334:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001336:	68fb      	ldr	r3, [r7, #12]
 8001338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800133a:	b2da      	uxtb	r2, r3
 800133c:	8979      	ldrh	r1, [r7, #10]
 800133e:	4b56      	ldr	r3, [pc, #344]	; (8001498 <HAL_I2C_Master_Transmit+0x1f8>)
 8001340:	9300      	str	r3, [sp, #0]
 8001342:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001346:	68f8      	ldr	r0, [r7, #12]
 8001348:	f000 fc2e 	bl	8001ba8 <I2C_TransferConfig>
 800134c:	e070      	b.n	8001430 <HAL_I2C_Master_Transmit+0x190>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001352:	b29a      	uxth	r2, r3
 8001354:	68fb      	ldr	r3, [r7, #12]
 8001356:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001358:	68fb      	ldr	r3, [r7, #12]
 800135a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800135c:	b2da      	uxtb	r2, r3
 800135e:	8979      	ldrh	r1, [r7, #10]
 8001360:	4b4d      	ldr	r3, [pc, #308]	; (8001498 <HAL_I2C_Master_Transmit+0x1f8>)
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001368:	68f8      	ldr	r0, [r7, #12]
 800136a:	f000 fc1d 	bl	8001ba8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800136e:	e05f      	b.n	8001430 <HAL_I2C_Master_Transmit+0x190>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001370:	697a      	ldr	r2, [r7, #20]
 8001372:	6a39      	ldr	r1, [r7, #32]
 8001374:	68f8      	ldr	r0, [r7, #12]
 8001376:	f000 fad1 	bl	800191c <I2C_WaitOnTXISFlagUntilTimeout>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d007      	beq.n	8001390 <HAL_I2C_Master_Transmit+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001384:	2b04      	cmp	r3, #4
 8001386:	d101      	bne.n	800138c <HAL_I2C_Master_Transmit+0xec>
        {
          return HAL_ERROR;
 8001388:	2301      	movs	r3, #1
 800138a:	e081      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
        }
        else
        {
          return HAL_TIMEOUT;
 800138c:	2303      	movs	r3, #3
 800138e:	e07f      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001394:	1c59      	adds	r1, r3, #1
 8001396:	68fa      	ldr	r2, [r7, #12]
 8001398:	6251      	str	r1, [r2, #36]	; 0x24
 800139a:	781a      	ldrb	r2, [r3, #0]
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013a6:	b29b      	uxth	r3, r3
 80013a8:	3b01      	subs	r3, #1
 80013aa:	b29a      	uxth	r2, r3
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013b4:	3b01      	subs	r3, #1
 80013b6:	b29a      	uxth	r2, r3
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d135      	bne.n	8001430 <HAL_I2C_Master_Transmit+0x190>
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013c8:	b29b      	uxth	r3, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d030      	beq.n	8001430 <HAL_I2C_Master_Transmit+0x190>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	9300      	str	r3, [sp, #0]
 80013d2:	6a3b      	ldr	r3, [r7, #32]
 80013d4:	2200      	movs	r2, #0
 80013d6:	2180      	movs	r1, #128	; 0x80
 80013d8:	68f8      	ldr	r0, [r7, #12]
 80013da:	f000 fa65 	bl	80018a8 <I2C_WaitOnFlagUntilTimeout>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d001      	beq.n	80013e8 <HAL_I2C_Master_Transmit+0x148>
        {
          return HAL_TIMEOUT;
 80013e4:	2303      	movs	r3, #3
 80013e6:	e053      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	2bff      	cmp	r3, #255	; 0xff
 80013f0:	d90e      	bls.n	8001410 <HAL_I2C_Master_Transmit+0x170>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	22ff      	movs	r2, #255	; 0xff
 80013f6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80013f8:	68fb      	ldr	r3, [r7, #12]
 80013fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013fc:	b2da      	uxtb	r2, r3
 80013fe:	8979      	ldrh	r1, [r7, #10]
 8001400:	2300      	movs	r3, #0
 8001402:	9300      	str	r3, [sp, #0]
 8001404:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001408:	68f8      	ldr	r0, [r7, #12]
 800140a:	f000 fbcd 	bl	8001ba8 <I2C_TransferConfig>
 800140e:	e00f      	b.n	8001430 <HAL_I2C_Master_Transmit+0x190>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001410:	68fb      	ldr	r3, [r7, #12]
 8001412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001414:	b29a      	uxth	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800141a:	68fb      	ldr	r3, [r7, #12]
 800141c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800141e:	b2da      	uxtb	r2, r3
 8001420:	8979      	ldrh	r1, [r7, #10]
 8001422:	2300      	movs	r3, #0
 8001424:	9300      	str	r3, [sp, #0]
 8001426:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800142a:	68f8      	ldr	r0, [r7, #12]
 800142c:	f000 fbbc 	bl	8001ba8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001434:	b29b      	uxth	r3, r3
 8001436:	2b00      	cmp	r3, #0
 8001438:	d19a      	bne.n	8001370 <HAL_I2C_Master_Transmit+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800143a:	697a      	ldr	r2, [r7, #20]
 800143c:	6a39      	ldr	r1, [r7, #32]
 800143e:	68f8      	ldr	r0, [r7, #12]
 8001440:	f000 faac 	bl	800199c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d007      	beq.n	800145a <HAL_I2C_Master_Transmit+0x1ba>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800144a:	68fb      	ldr	r3, [r7, #12]
 800144c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144e:	2b04      	cmp	r3, #4
 8001450:	d101      	bne.n	8001456 <HAL_I2C_Master_Transmit+0x1b6>
      {
        return HAL_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e01c      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
      }
      else
      {
        return HAL_TIMEOUT;
 8001456:	2303      	movs	r3, #3
 8001458:	e01a      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	2220      	movs	r2, #32
 8001460:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	6859      	ldr	r1, [r3, #4]
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	681a      	ldr	r2, [r3, #0]
 800146c:	4b0b      	ldr	r3, [pc, #44]	; (800149c <HAL_I2C_Master_Transmit+0x1fc>)
 800146e:	400b      	ands	r3, r1
 8001470:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001472:	68fb      	ldr	r3, [r7, #12]
 8001474:	2220      	movs	r2, #32
 8001476:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	2200      	movs	r2, #0
 800147e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	2200      	movs	r2, #0
 8001486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800148a:	2300      	movs	r3, #0
 800148c:	e000      	b.n	8001490 <HAL_I2C_Master_Transmit+0x1f0>
  }
  else
  {
    return HAL_BUSY;
 800148e:	2302      	movs	r3, #2
  }
}
 8001490:	4618      	mov	r0, r3
 8001492:	3718      	adds	r7, #24
 8001494:	46bd      	mov	sp, r7
 8001496:	bd80      	pop	{r7, pc}
 8001498:	80002000 	.word	0x80002000
 800149c:	fe00e800 	.word	0xfe00e800

080014a0 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80014a0:	b580      	push	{r7, lr}
 80014a2:	b088      	sub	sp, #32
 80014a4:	af02      	add	r7, sp, #8
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	607a      	str	r2, [r7, #4]
 80014aa:	461a      	mov	r2, r3
 80014ac:	460b      	mov	r3, r1
 80014ae:	817b      	strh	r3, [r7, #10]
 80014b0:	4613      	mov	r3, r2
 80014b2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 80014b4:	2300      	movs	r3, #0
 80014b6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80014b8:	68fb      	ldr	r3, [r7, #12]
 80014ba:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80014be:	b2db      	uxtb	r3, r3
 80014c0:	2b20      	cmp	r3, #32
 80014c2:	f040 80e5 	bne.w	8001690 <HAL_I2C_Master_Receive+0x1f0>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80014cc:	2b01      	cmp	r3, #1
 80014ce:	d101      	bne.n	80014d4 <HAL_I2C_Master_Receive+0x34>
 80014d0:	2302      	movs	r3, #2
 80014d2:	e0de      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
 80014d4:	68fb      	ldr	r3, [r7, #12]
 80014d6:	2201      	movs	r2, #1
 80014d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80014dc:	f7ff fbae 	bl	8000c3c <HAL_GetTick>
 80014e0:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80014e2:	697b      	ldr	r3, [r7, #20]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	2319      	movs	r3, #25
 80014e8:	2201      	movs	r2, #1
 80014ea:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80014ee:	68f8      	ldr	r0, [r7, #12]
 80014f0:	f000 f9da 	bl	80018a8 <I2C_WaitOnFlagUntilTimeout>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_I2C_Master_Receive+0x5e>
    {
      return HAL_TIMEOUT;
 80014fa:	2303      	movs	r3, #3
 80014fc:	e0c9      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80014fe:	68fb      	ldr	r3, [r7, #12]
 8001500:	2222      	movs	r2, #34	; 0x22
 8001502:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	2210      	movs	r2, #16
 800150a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	2200      	movs	r2, #0
 8001512:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	687a      	ldr	r2, [r7, #4]
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	893a      	ldrh	r2, [r7, #8]
 800151e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	2200      	movs	r2, #0
 8001524:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800152a:	b29b      	uxth	r3, r3
 800152c:	2bff      	cmp	r3, #255	; 0xff
 800152e:	d90e      	bls.n	800154e <HAL_I2C_Master_Receive+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001530:	68fb      	ldr	r3, [r7, #12]
 8001532:	22ff      	movs	r2, #255	; 0xff
 8001534:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_READ);
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800153a:	b2da      	uxtb	r2, r3
 800153c:	8979      	ldrh	r1, [r7, #10]
 800153e:	4b57      	ldr	r3, [pc, #348]	; (800169c <HAL_I2C_Master_Receive+0x1fc>)
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001546:	68f8      	ldr	r0, [r7, #12]
 8001548:	f000 fb2e 	bl	8001ba8 <I2C_TransferConfig>
 800154c:	e071      	b.n	8001632 <HAL_I2C_Master_Receive+0x192>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001552:	b29a      	uxth	r2, r3
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_READ);
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800155c:	b2da      	uxtb	r2, r3
 800155e:	8979      	ldrh	r1, [r7, #10]
 8001560:	4b4e      	ldr	r3, [pc, #312]	; (800169c <HAL_I2C_Master_Receive+0x1fc>)
 8001562:	9300      	str	r3, [sp, #0]
 8001564:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001568:	68f8      	ldr	r0, [r7, #12]
 800156a:	f000 fb1d 	bl	8001ba8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800156e:	e060      	b.n	8001632 <HAL_I2C_Master_Receive+0x192>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001570:	697a      	ldr	r2, [r7, #20]
 8001572:	6a39      	ldr	r1, [r7, #32]
 8001574:	68f8      	ldr	r0, [r7, #12]
 8001576:	f000 fa4d 	bl	8001a14 <I2C_WaitOnRXNEFlagUntilTimeout>
 800157a:	4603      	mov	r3, r0
 800157c:	2b00      	cmp	r3, #0
 800157e:	d007      	beq.n	8001590 <HAL_I2C_Master_Receive+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001584:	2b04      	cmp	r3, #4
 8001586:	d101      	bne.n	800158c <HAL_I2C_Master_Receive+0xec>
        {
          return HAL_ERROR;
 8001588:	2301      	movs	r3, #1
 800158a:	e082      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
        }
        else
        {
          return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e080      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
        }
      }

      /* Read data from RXDR */
      (*hi2c->pBuffPtr++) = hi2c->Instance->RXDR;
 8001590:	68fb      	ldr	r3, [r7, #12]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159a:	1c59      	adds	r1, r3, #1
 800159c:	68fa      	ldr	r2, [r7, #12]
 800159e:	6251      	str	r1, [r2, #36]	; 0x24
 80015a0:	b2c2      	uxtb	r2, r0
 80015a2:	701a      	strb	r2, [r3, #0]
      hi2c->XferSize--;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015a8:	3b01      	subs	r3, #1
 80015aa:	b29a      	uxth	r2, r3
 80015ac:	68fb      	ldr	r3, [r7, #12]
 80015ae:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80015b0:	68fb      	ldr	r3, [r7, #12]
 80015b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015b4:	b29b      	uxth	r3, r3
 80015b6:	3b01      	subs	r3, #1
 80015b8:	b29a      	uxth	r2, r3
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d135      	bne.n	8001632 <HAL_I2C_Master_Receive+0x192>
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ca:	b29b      	uxth	r3, r3
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d030      	beq.n	8001632 <HAL_I2C_Master_Receive+0x192>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	9300      	str	r3, [sp, #0]
 80015d4:	6a3b      	ldr	r3, [r7, #32]
 80015d6:	2200      	movs	r2, #0
 80015d8:	2180      	movs	r1, #128	; 0x80
 80015da:	68f8      	ldr	r0, [r7, #12]
 80015dc:	f000 f964 	bl	80018a8 <I2C_WaitOnFlagUntilTimeout>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <HAL_I2C_Master_Receive+0x14a>
        {
          return HAL_TIMEOUT;
 80015e6:	2303      	movs	r3, #3
 80015e8:	e053      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80015ee:	b29b      	uxth	r3, r3
 80015f0:	2bff      	cmp	r3, #255	; 0xff
 80015f2:	d90e      	bls.n	8001612 <HAL_I2C_Master_Receive+0x172>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	22ff      	movs	r2, #255	; 0xff
 80015f8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80015fe:	b2da      	uxtb	r2, r3
 8001600:	8979      	ldrh	r1, [r7, #10]
 8001602:	2300      	movs	r3, #0
 8001604:	9300      	str	r3, [sp, #0]
 8001606:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800160a:	68f8      	ldr	r0, [r7, #12]
 800160c:	f000 facc 	bl	8001ba8 <I2C_TransferConfig>
 8001610:	e00f      	b.n	8001632 <HAL_I2C_Master_Receive+0x192>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001616:	b29a      	uxth	r2, r3
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001620:	b2da      	uxtb	r2, r3
 8001622:	8979      	ldrh	r1, [r7, #10]
 8001624:	2300      	movs	r3, #0
 8001626:	9300      	str	r3, [sp, #0]
 8001628:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800162c:	68f8      	ldr	r0, [r7, #12]
 800162e:	f000 fabb 	bl	8001ba8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001636:	b29b      	uxth	r3, r3
 8001638:	2b00      	cmp	r3, #0
 800163a:	d199      	bne.n	8001570 <HAL_I2C_Master_Receive+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800163c:	697a      	ldr	r2, [r7, #20]
 800163e:	6a39      	ldr	r1, [r7, #32]
 8001640:	68f8      	ldr	r0, [r7, #12]
 8001642:	f000 f9ab 	bl	800199c <I2C_WaitOnSTOPFlagUntilTimeout>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d007      	beq.n	800165c <HAL_I2C_Master_Receive+0x1bc>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001650:	2b04      	cmp	r3, #4
 8001652:	d101      	bne.n	8001658 <HAL_I2C_Master_Receive+0x1b8>
      {
        return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e01c      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
      }
      else
      {
        return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e01a      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2220      	movs	r2, #32
 8001662:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6859      	ldr	r1, [r3, #4]
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681a      	ldr	r2, [r3, #0]
 800166e:	4b0c      	ldr	r3, [pc, #48]	; (80016a0 <HAL_I2C_Master_Receive+0x200>)
 8001670:	400b      	ands	r3, r1
 8001672:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	2220      	movs	r2, #32
 8001678:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	2200      	movs	r2, #0
 8001680:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	2200      	movs	r2, #0
 8001688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800168c:	2300      	movs	r3, #0
 800168e:	e000      	b.n	8001692 <HAL_I2C_Master_Receive+0x1f2>
  }
  else
  {
    return HAL_BUSY;
 8001690:	2302      	movs	r3, #2
  }
}
 8001692:	4618      	mov	r0, r3
 8001694:	3718      	adds	r7, #24
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	80002400 	.word	0x80002400
 80016a0:	fe00e800 	.word	0xfe00e800

080016a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af02      	add	r7, sp, #8
 80016aa:	60f8      	str	r0, [r7, #12]
 80016ac:	607a      	str	r2, [r7, #4]
 80016ae:	603b      	str	r3, [r7, #0]
 80016b0:	460b      	mov	r3, r1
 80016b2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U;
 80016b4:	2300      	movs	r3, #0
 80016b6:	617b      	str	r3, [r7, #20]

  __IO uint32_t I2C_Trials = 0U;
 80016b8:	2300      	movs	r3, #0
 80016ba:	613b      	str	r3, [r7, #16]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016c2:	b2db      	uxtb	r3, r3
 80016c4:	2b20      	cmp	r3, #32
 80016c6:	f040 80c6 	bne.w	8001856 <HAL_I2C_IsDeviceReady+0x1b2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	699b      	ldr	r3, [r3, #24]
 80016d0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80016d4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80016d8:	d101      	bne.n	80016de <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 80016da:	2302      	movs	r3, #2
 80016dc:	e0bc      	b.n	8001858 <HAL_I2C_IsDeviceReady+0x1b4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80016e4:	2b01      	cmp	r3, #1
 80016e6:	d101      	bne.n	80016ec <HAL_I2C_IsDeviceReady+0x48>
 80016e8:	2302      	movs	r3, #2
 80016ea:	e0b5      	b.n	8001858 <HAL_I2C_IsDeviceReady+0x1b4>
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	2201      	movs	r2, #1
 80016f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	2224      	movs	r2, #36	; 0x24
 80016f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	2200      	movs	r2, #0
 8001700:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	68db      	ldr	r3, [r3, #12]
 8001706:	2b01      	cmp	r3, #1
 8001708:	d107      	bne.n	800171a <HAL_I2C_IsDeviceReady+0x76>
 800170a:	897b      	ldrh	r3, [r7, #10]
 800170c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001710:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001714:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001718:	e004      	b.n	8001724 <HAL_I2C_IsDeviceReady+0x80>
 800171a:	897b      	ldrh	r3, [r7, #10]
 800171c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001720:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001724:	68fa      	ldr	r2, [r7, #12]
 8001726:	6812      	ldr	r2, [r2, #0]
 8001728:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 800172a:	f7ff fa87 	bl	8000c3c <HAL_GetTick>
 800172e:	6178      	str	r0, [r7, #20]
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8001730:	e018      	b.n	8001764 <HAL_I2C_IsDeviceReady+0xc0>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001738:	d014      	beq.n	8001764 <HAL_I2C_IsDeviceReady+0xc0>
        {
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	2b00      	cmp	r3, #0
 800173e:	d007      	beq.n	8001750 <HAL_I2C_IsDeviceReady+0xac>
 8001740:	f7ff fa7c 	bl	8000c3c <HAL_GetTick>
 8001744:	4602      	mov	r2, r0
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	683a      	ldr	r2, [r7, #0]
 800174c:	429a      	cmp	r2, r3
 800174e:	d209      	bcs.n	8001764 <HAL_I2C_IsDeviceReady+0xc0>
          {
            /* Device is ready */
            hi2c->State = HAL_I2C_STATE_READY;
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2220      	movs	r2, #32
 8001754:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            return HAL_TIMEOUT;
 8001760:	2303      	movs	r3, #3
 8001762:	e079      	b.n	8001858 <HAL_I2C_IsDeviceReady+0x1b4>
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	699b      	ldr	r3, [r3, #24]
 800176a:	f003 0320 	and.w	r3, r3, #32
 800176e:	2b20      	cmp	r3, #32
 8001770:	d00c      	beq.n	800178c <HAL_I2C_IsDeviceReady+0xe8>
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	699b      	ldr	r3, [r3, #24]
 8001778:	f003 0310 	and.w	r3, r3, #16
 800177c:	2b10      	cmp	r3, #16
 800177e:	d005      	beq.n	800178c <HAL_I2C_IsDeviceReady+0xe8>
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001786:	b2db      	uxtb	r3, r3
 8001788:	2ba0      	cmp	r3, #160	; 0xa0
 800178a:	d1d2      	bne.n	8001732 <HAL_I2C_IsDeviceReady+0x8e>
          }
        }
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 800178c:	68fb      	ldr	r3, [r7, #12]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	699b      	ldr	r3, [r3, #24]
 8001792:	f003 0310 	and.w	r3, r3, #16
 8001796:	2b10      	cmp	r3, #16
 8001798:	d01a      	beq.n	80017d0 <HAL_I2C_IsDeviceReady+0x12c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	9300      	str	r3, [sp, #0]
 800179e:	683b      	ldr	r3, [r7, #0]
 80017a0:	2200      	movs	r2, #0
 80017a2:	2120      	movs	r1, #32
 80017a4:	68f8      	ldr	r0, [r7, #12]
 80017a6:	f000 f87f 	bl	80018a8 <I2C_WaitOnFlagUntilTimeout>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <HAL_I2C_IsDeviceReady+0x110>
        {
          return HAL_TIMEOUT;
 80017b0:	2303      	movs	r3, #3
 80017b2:	e051      	b.n	8001858 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2220      	movs	r2, #32
 80017ba:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	2220      	movs	r2, #32
 80017c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	2200      	movs	r2, #0
 80017c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80017cc:	2300      	movs	r3, #0
 80017ce:	e043      	b.n	8001858 <HAL_I2C_IsDeviceReady+0x1b4>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	9300      	str	r3, [sp, #0]
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	2200      	movs	r2, #0
 80017d8:	2120      	movs	r1, #32
 80017da:	68f8      	ldr	r0, [r7, #12]
 80017dc:	f000 f864 	bl	80018a8 <I2C_WaitOnFlagUntilTimeout>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <HAL_I2C_IsDeviceReady+0x146>
        {
          return HAL_TIMEOUT;
 80017e6:	2303      	movs	r3, #3
 80017e8:	e036      	b.n	8001858 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	2210      	movs	r2, #16
 80017f0:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	2220      	movs	r2, #32
 80017f8:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials++ == Trials)
 80017fa:	693b      	ldr	r3, [r7, #16]
 80017fc:	1c5a      	adds	r2, r3, #1
 80017fe:	613a      	str	r2, [r7, #16]
 8001800:	687a      	ldr	r2, [r7, #4]
 8001802:	429a      	cmp	r2, r3
 8001804:	d118      	bne.n	8001838 <HAL_I2C_IsDeviceReady+0x194>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001806:	68fb      	ldr	r3, [r7, #12]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	685a      	ldr	r2, [r3, #4]
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001814:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	9300      	str	r3, [sp, #0]
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	2200      	movs	r2, #0
 800181e:	2120      	movs	r1, #32
 8001820:	68f8      	ldr	r0, [r7, #12]
 8001822:	f000 f841 	bl	80018a8 <I2C_WaitOnFlagUntilTimeout>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d001      	beq.n	8001830 <HAL_I2C_IsDeviceReady+0x18c>
        {
          return HAL_TIMEOUT;
 800182c:	2303      	movs	r3, #3
 800182e:	e013      	b.n	8001858 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	2220      	movs	r2, #32
 8001836:	61da      	str	r2, [r3, #28]
      }
    }
    while (I2C_Trials < Trials);
 8001838:	693b      	ldr	r3, [r7, #16]
 800183a:	687a      	ldr	r2, [r7, #4]
 800183c:	429a      	cmp	r2, r3
 800183e:	f63f af60 	bhi.w	8001702 <HAL_I2C_IsDeviceReady+0x5e>

    hi2c->State = HAL_I2C_STATE_READY;
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	2220      	movs	r2, #32
 8001846:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	2200      	movs	r2, #0
 800184e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_TIMEOUT;
 8001852:	2303      	movs	r3, #3
 8001854:	e000      	b.n	8001858 <HAL_I2C_IsDeviceReady+0x1b4>
  }
  else
  {
    return HAL_BUSY;
 8001856:	2302      	movs	r3, #2
  }
}
 8001858:	4618      	mov	r0, r3
 800185a:	3718      	adds	r7, #24
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}

08001860 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	699b      	ldr	r3, [r3, #24]
 800186e:	f003 0302 	and.w	r3, r3, #2
 8001872:	2b02      	cmp	r3, #2
 8001874:	d103      	bne.n	800187e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	2200      	movs	r2, #0
 800187c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	699b      	ldr	r3, [r3, #24]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	d007      	beq.n	800189c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	699a      	ldr	r2, [r3, #24]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f042 0201 	orr.w	r2, r2, #1
 800189a:	619a      	str	r2, [r3, #24]
  }
}
 800189c:	bf00      	nop
 800189e:	370c      	adds	r7, #12
 80018a0:	46bd      	mov	sp, r7
 80018a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a6:	4770      	bx	lr

080018a8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	60f8      	str	r0, [r7, #12]
 80018b0:	60b9      	str	r1, [r7, #8]
 80018b2:	603b      	str	r3, [r7, #0]
 80018b4:	4613      	mov	r3, r2
 80018b6:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018b8:	e01c      	b.n	80018f4 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018c0:	d018      	beq.n	80018f4 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d007      	beq.n	80018d8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80018c8:	f7ff f9b8 	bl	8000c3c <HAL_GetTick>
 80018cc:	4602      	mov	r2, r0
 80018ce:	69bb      	ldr	r3, [r7, #24]
 80018d0:	1ad3      	subs	r3, r2, r3
 80018d2:	683a      	ldr	r2, [r7, #0]
 80018d4:	429a      	cmp	r2, r3
 80018d6:	d20d      	bcs.n	80018f4 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	2220      	movs	r2, #32
 80018dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	2200      	movs	r2, #0
 80018e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	2200      	movs	r2, #0
 80018ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 80018f0:	2303      	movs	r3, #3
 80018f2:	e00f      	b.n	8001914 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	699a      	ldr	r2, [r3, #24]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	4013      	ands	r3, r2
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	429a      	cmp	r2, r3
 8001902:	bf0c      	ite	eq
 8001904:	2301      	moveq	r3, #1
 8001906:	2300      	movne	r3, #0
 8001908:	b2db      	uxtb	r3, r3
 800190a:	461a      	mov	r2, r3
 800190c:	79fb      	ldrb	r3, [r7, #7]
 800190e:	429a      	cmp	r2, r3
 8001910:	d0d3      	beq.n	80018ba <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001912:	2300      	movs	r3, #0
}
 8001914:	4618      	mov	r0, r3
 8001916:	3710      	adds	r7, #16
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b084      	sub	sp, #16
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001928:	e02c      	b.n	8001984 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	68b9      	ldr	r1, [r7, #8]
 800192e:	68f8      	ldr	r0, [r7, #12]
 8001930:	f000 f8dc 	bl	8001aec <I2C_IsAcknowledgeFailed>
 8001934:	4603      	mov	r3, r0
 8001936:	2b00      	cmp	r3, #0
 8001938:	d001      	beq.n	800193e <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800193a:	2301      	movs	r3, #1
 800193c:	e02a      	b.n	8001994 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800193e:	68bb      	ldr	r3, [r7, #8]
 8001940:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001944:	d01e      	beq.n	8001984 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001946:	68bb      	ldr	r3, [r7, #8]
 8001948:	2b00      	cmp	r3, #0
 800194a:	d007      	beq.n	800195c <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800194c:	f7ff f976 	bl	8000c3c <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	429a      	cmp	r2, r3
 800195a:	d213      	bcs.n	8001984 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001960:	f043 0220 	orr.w	r2, r3, #32
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	2220      	movs	r2, #32
 800196c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001970:	68fb      	ldr	r3, [r7, #12]
 8001972:	2200      	movs	r2, #0
 8001974:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	2200      	movs	r2, #0
 800197c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e007      	b.n	8001994 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	699b      	ldr	r3, [r3, #24]
 800198a:	f003 0302 	and.w	r3, r3, #2
 800198e:	2b02      	cmp	r3, #2
 8001990:	d1cb      	bne.n	800192a <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}

0800199c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	60f8      	str	r0, [r7, #12]
 80019a4:	60b9      	str	r1, [r7, #8]
 80019a6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019a8:	e028      	b.n	80019fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	68b9      	ldr	r1, [r7, #8]
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 f89c 	bl	8001aec <I2C_IsAcknowledgeFailed>
 80019b4:	4603      	mov	r3, r0
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d001      	beq.n	80019be <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80019ba:	2301      	movs	r3, #1
 80019bc:	e026      	b.n	8001a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80019be:	68bb      	ldr	r3, [r7, #8]
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d007      	beq.n	80019d4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80019c4:	f7ff f93a 	bl	8000c3c <HAL_GetTick>
 80019c8:	4602      	mov	r2, r0
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	1ad3      	subs	r3, r2, r3
 80019ce:	68ba      	ldr	r2, [r7, #8]
 80019d0:	429a      	cmp	r2, r3
 80019d2:	d213      	bcs.n	80019fc <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d8:	f043 0220 	orr.w	r2, r3, #32
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	2220      	movs	r2, #32
 80019e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	2200      	movs	r2, #0
 80019ec:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	2200      	movs	r2, #0
 80019f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 80019f8:	2303      	movs	r3, #3
 80019fa:	e007      	b.n	8001a0c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	699b      	ldr	r3, [r3, #24]
 8001a02:	f003 0320 	and.w	r3, r3, #32
 8001a06:	2b20      	cmp	r3, #32
 8001a08:	d1cf      	bne.n	80019aa <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001a0a:	2300      	movs	r3, #0
}
 8001a0c:	4618      	mov	r0, r3
 8001a0e:	3710      	adds	r7, #16
 8001a10:	46bd      	mov	sp, r7
 8001a12:	bd80      	pop	{r7, pc}

08001a14 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	60f8      	str	r0, [r7, #12]
 8001a1c:	60b9      	str	r1, [r7, #8]
 8001a1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001a20:	e055      	b.n	8001ace <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001a22:	687a      	ldr	r2, [r7, #4]
 8001a24:	68b9      	ldr	r1, [r7, #8]
 8001a26:	68f8      	ldr	r0, [r7, #12]
 8001a28:	f000 f860 	bl	8001aec <I2C_IsAcknowledgeFailed>
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d001      	beq.n	8001a36 <I2C_WaitOnRXNEFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001a32:	2301      	movs	r3, #1
 8001a34:	e053      	b.n	8001ade <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
    }

    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	699b      	ldr	r3, [r3, #24]
 8001a3c:	f003 0320 	and.w	r3, r3, #32
 8001a40:	2b20      	cmp	r3, #32
 8001a42:	d129      	bne.n	8001a98 <I2C_WaitOnRXNEFlagUntilTimeout+0x84>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	699b      	ldr	r3, [r3, #24]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	d105      	bne.n	8001a5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <I2C_WaitOnRXNEFlagUntilTimeout+0x4a>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        return HAL_OK;
 8001a5a:	2300      	movs	r3, #0
 8001a5c:	e03f      	b.n	8001ade <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
      else
      {
        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	2220      	movs	r2, #32
 8001a64:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	6859      	ldr	r1, [r3, #4]
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	681a      	ldr	r2, [r3, #0]
 8001a70:	4b1d      	ldr	r3, [pc, #116]	; (8001ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0xd4>)
 8001a72:	400b      	ands	r3, r1
 8001a74:	6053      	str	r3, [r2, #4]

        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	2200      	movs	r2, #0
 8001a7a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001a7c:	68fb      	ldr	r3, [r7, #12]
 8001a7e:	2220      	movs	r2, #32
 8001a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	2200      	movs	r2, #0
 8001a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e022      	b.n	8001ade <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
      }
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d007      	beq.n	8001aae <I2C_WaitOnRXNEFlagUntilTimeout+0x9a>
 8001a9e:	f7ff f8cd 	bl	8000c3c <HAL_GetTick>
 8001aa2:	4602      	mov	r2, r0
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	1ad3      	subs	r3, r2, r3
 8001aa8:	68ba      	ldr	r2, [r7, #8]
 8001aaa:	429a      	cmp	r2, r3
 8001aac:	d20f      	bcs.n	8001ace <I2C_WaitOnRXNEFlagUntilTimeout+0xba>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aae:	68fb      	ldr	r3, [r7, #12]
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f043 0220 	orr.w	r2, r3, #32
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	2220      	movs	r2, #32
 8001abe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ac2:	68fb      	ldr	r3, [r7, #12]
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8001aca:	2303      	movs	r3, #3
 8001acc:	e007      	b.n	8001ade <I2C_WaitOnRXNEFlagUntilTimeout+0xca>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d1a2      	bne.n	8001a22 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001adc:	2300      	movs	r3, #0
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3710      	adds	r7, #16
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	fe00e800 	.word	0xfe00e800

08001aec <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001aec:	b580      	push	{r7, lr}
 8001aee:	b084      	sub	sp, #16
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	699b      	ldr	r3, [r3, #24]
 8001afe:	f003 0310 	and.w	r3, r3, #16
 8001b02:	2b10      	cmp	r3, #16
 8001b04:	d148      	bne.n	8001b98 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b06:	e01c      	b.n	8001b42 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b0e:	d018      	beq.n	8001b42 <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d007      	beq.n	8001b26 <I2C_IsAcknowledgeFailed+0x3a>
 8001b16:	f7ff f891 	bl	8000c3c <HAL_GetTick>
 8001b1a:	4602      	mov	r2, r0
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	1ad3      	subs	r3, r2, r3
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	429a      	cmp	r2, r3
 8001b24:	d20d      	bcs.n	8001b42 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	2220      	movs	r2, #32
 8001b2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	2200      	movs	r2, #0
 8001b32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	2200      	movs	r2, #0
 8001b3a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8001b3e:	2303      	movs	r3, #3
 8001b40:	e02b      	b.n	8001b9a <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	699b      	ldr	r3, [r3, #24]
 8001b48:	f003 0320 	and.w	r3, r3, #32
 8001b4c:	2b20      	cmp	r3, #32
 8001b4e:	d1db      	bne.n	8001b08 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	2210      	movs	r2, #16
 8001b56:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	2220      	movs	r2, #32
 8001b5e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001b60:	68f8      	ldr	r0, [r7, #12]
 8001b62:	f7ff fe7d 	bl	8001860 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	6859      	ldr	r1, [r3, #4]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	4b0c      	ldr	r3, [pc, #48]	; (8001ba4 <I2C_IsAcknowledgeFailed+0xb8>)
 8001b72:	400b      	ands	r3, r1
 8001b74:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	2204      	movs	r2, #4
 8001b7a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	2220      	movs	r2, #32
 8001b80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	2200      	movs	r2, #0
 8001b88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	2200      	movs	r2, #0
 8001b90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001b94:	2301      	movs	r3, #1
 8001b96:	e000      	b.n	8001b9a <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	fe00e800 	.word	0xfe00e800

08001ba8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	60f8      	str	r0, [r7, #12]
 8001bb0:	607b      	str	r3, [r7, #4]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	817b      	strh	r3, [r7, #10]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	685a      	ldr	r2, [r3, #4]
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	0d5b      	lsrs	r3, r3, #21
 8001bc4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001bc8:	4b0d      	ldr	r3, [pc, #52]	; (8001c00 <I2C_TransferConfig+0x58>)
 8001bca:	430b      	orrs	r3, r1
 8001bcc:	43db      	mvns	r3, r3
 8001bce:	ea02 0103 	and.w	r1, r2, r3
 8001bd2:	897b      	ldrh	r3, [r7, #10]
 8001bd4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001bd8:	7a7b      	ldrb	r3, [r7, #9]
 8001bda:	041b      	lsls	r3, r3, #16
 8001bdc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001be0:	431a      	orrs	r2, r3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	431a      	orrs	r2, r3
 8001be6:	69bb      	ldr	r3, [r7, #24]
 8001be8:	431a      	orrs	r2, r3
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	430a      	orrs	r2, r1
 8001bf0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001bf2:	bf00      	nop
 8001bf4:	3714      	adds	r7, #20
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr
 8001bfe:	bf00      	nop
 8001c00:	03ff63ff 	.word	0x03ff63ff

08001c04 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001c14:	b2db      	uxtb	r3, r3
 8001c16:	2b20      	cmp	r3, #32
 8001c18:	d138      	bne.n	8001c8c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001c20:	2b01      	cmp	r3, #1
 8001c22:	d101      	bne.n	8001c28 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001c24:	2302      	movs	r3, #2
 8001c26:	e032      	b.n	8001c8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2201      	movs	r2, #1
 8001c2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2224      	movs	r2, #36	; 0x24
 8001c34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	681a      	ldr	r2, [r3, #0]
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001c56:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	6819      	ldr	r1, [r3, #0]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	430a      	orrs	r2, r1
 8001c66:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	681b      	ldr	r3, [r3, #0]
 8001c6c:	681a      	ldr	r2, [r3, #0]
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	f042 0201 	orr.w	r2, r2, #1
 8001c76:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2220      	movs	r2, #32
 8001c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	2200      	movs	r2, #0
 8001c84:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	e000      	b.n	8001c8e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001c8c:	2302      	movs	r3, #2
  }
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b085      	sub	sp, #20
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001ca4:	2300      	movs	r3, #0
 8001ca6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b20      	cmp	r3, #32
 8001cb2:	d139      	bne.n	8001d28 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001cba:	2b01      	cmp	r3, #1
 8001cbc:	d101      	bne.n	8001cc2 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	e033      	b.n	8001d2a <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2224      	movs	r2, #36	; 0x24
 8001cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	681a      	ldr	r2, [r3, #0]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0201 	bic.w	r2, r2, #1
 8001ce0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001cf0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	021b      	lsls	r3, r3, #8
 8001cf6:	68fa      	ldr	r2, [r7, #12]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	68fa      	ldr	r2, [r7, #12]
 8001d02:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f042 0201 	orr.w	r2, r2, #1
 8001d12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2220      	movs	r2, #32
 8001d18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2200      	movs	r2, #0
 8001d20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001d24:	2300      	movs	r3, #0
 8001d26:	e000      	b.n	8001d2a <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001d28:	2302      	movs	r3, #2
  }
}
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	3714      	adds	r7, #20
 8001d2e:	46bd      	mov	sp, r7
 8001d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d34:	4770      	bx	lr
	...

08001d38 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	1d3b      	adds	r3, r7, #4
 8001d42:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d44:	1d3b      	adds	r3, r7, #4
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d102      	bne.n	8001d52 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001d4c:	2301      	movs	r3, #1
 8001d4e:	f000 beda 	b.w	8002b06 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d52:	1d3b      	adds	r3, r7, #4
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f003 0301 	and.w	r3, r3, #1
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	f000 816e 	beq.w	800203e <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001d62:	4bb5      	ldr	r3, [pc, #724]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001d64:	685b      	ldr	r3, [r3, #4]
 8001d66:	f003 030c 	and.w	r3, r3, #12
 8001d6a:	2b04      	cmp	r3, #4
 8001d6c:	d00c      	beq.n	8001d88 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d6e:	4bb2      	ldr	r3, [pc, #712]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	f003 030c 	and.w	r3, r3, #12
 8001d76:	2b08      	cmp	r3, #8
 8001d78:	d15a      	bne.n	8001e30 <HAL_RCC_OscConfig+0xf8>
 8001d7a:	4baf      	ldr	r3, [pc, #700]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d82:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d86:	d153      	bne.n	8001e30 <HAL_RCC_OscConfig+0xf8>
 8001d88:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d8c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d90:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001d94:	fa93 f3a3 	rbit	r3, r3
 8001d98:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001d9c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001da0:	fab3 f383 	clz	r3, r3
 8001da4:	b2db      	uxtb	r3, r3
 8001da6:	095b      	lsrs	r3, r3, #5
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	b2db      	uxtb	r3, r3
 8001db0:	2b01      	cmp	r3, #1
 8001db2:	d102      	bne.n	8001dba <HAL_RCC_OscConfig+0x82>
 8001db4:	4ba0      	ldr	r3, [pc, #640]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	e015      	b.n	8001de6 <HAL_RCC_OscConfig+0xae>
 8001dba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dbe:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001dc6:	fa93 f3a3 	rbit	r3, r3
 8001dca:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001dce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001dd6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001dda:	fa93 f3a3 	rbit	r3, r3
 8001dde:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001de2:	4b95      	ldr	r3, [pc, #596]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dea:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001dee:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001df2:	fa92 f2a2 	rbit	r2, r2
 8001df6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001dfa:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001dfe:	fab2 f282 	clz	r2, r2
 8001e02:	b252      	sxtb	r2, r2
 8001e04:	f042 0220 	orr.w	r2, r2, #32
 8001e08:	b252      	sxtb	r2, r2
 8001e0a:	b2d2      	uxtb	r2, r2
 8001e0c:	f002 021f 	and.w	r2, r2, #31
 8001e10:	2101      	movs	r1, #1
 8001e12:	fa01 f202 	lsl.w	r2, r1, r2
 8001e16:	4013      	ands	r3, r2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 810f 	beq.w	800203c <HAL_RCC_OscConfig+0x304>
 8001e1e:	1d3b      	adds	r3, r7, #4
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	f040 8109 	bne.w	800203c <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
 8001e2c:	f000 be6b 	b.w	8002b06 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001e3a:	d106      	bne.n	8001e4a <HAL_RCC_OscConfig+0x112>
 8001e3c:	4b7e      	ldr	r3, [pc, #504]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a7d      	ldr	r2, [pc, #500]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001e42:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e46:	6013      	str	r3, [r2, #0]
 8001e48:	e030      	b.n	8001eac <HAL_RCC_OscConfig+0x174>
 8001e4a:	1d3b      	adds	r3, r7, #4
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	685b      	ldr	r3, [r3, #4]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d10c      	bne.n	8001e6e <HAL_RCC_OscConfig+0x136>
 8001e54:	4b78      	ldr	r3, [pc, #480]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a77      	ldr	r2, [pc, #476]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001e5a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e5e:	6013      	str	r3, [r2, #0]
 8001e60:	4b75      	ldr	r3, [pc, #468]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a74      	ldr	r2, [pc, #464]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001e66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e6a:	6013      	str	r3, [r2, #0]
 8001e6c:	e01e      	b.n	8001eac <HAL_RCC_OscConfig+0x174>
 8001e6e:	1d3b      	adds	r3, r7, #4
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001e78:	d10c      	bne.n	8001e94 <HAL_RCC_OscConfig+0x15c>
 8001e7a:	4b6f      	ldr	r3, [pc, #444]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a6e      	ldr	r2, [pc, #440]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001e80:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001e84:	6013      	str	r3, [r2, #0]
 8001e86:	4b6c      	ldr	r3, [pc, #432]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a6b      	ldr	r2, [pc, #428]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001e8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e90:	6013      	str	r3, [r2, #0]
 8001e92:	e00b      	b.n	8001eac <HAL_RCC_OscConfig+0x174>
 8001e94:	4b68      	ldr	r3, [pc, #416]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a67      	ldr	r2, [pc, #412]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001e9a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e9e:	6013      	str	r3, [r2, #0]
 8001ea0:	4b65      	ldr	r3, [pc, #404]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	4a64      	ldr	r2, [pc, #400]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001ea6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001eaa:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001eac:	4b62      	ldr	r3, [pc, #392]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001eb0:	f023 020f 	bic.w	r2, r3, #15
 8001eb4:	1d3b      	adds	r3, r7, #4
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	495f      	ldr	r1, [pc, #380]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ec0:	1d3b      	adds	r3, r7, #4
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d05a      	beq.n	8001f80 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7fe feb7 	bl	8000c3c <HAL_GetTick>
 8001ece:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ed2:	e00a      	b.n	8001eea <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ed4:	f7fe feb2 	bl	8000c3c <HAL_GetTick>
 8001ed8:	4602      	mov	r2, r0
 8001eda:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b64      	cmp	r3, #100	; 0x64
 8001ee2:	d902      	bls.n	8001eea <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	f000 be0e 	b.w	8002b06 <HAL_RCC_OscConfig+0xdce>
 8001eea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eee:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8001efe:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_OscConfig+0x1e4>
 8001f16:	4b48      	ldr	r3, [pc, #288]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	e015      	b.n	8001f48 <HAL_RCC_OscConfig+0x210>
 8001f1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f20:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001f34:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001f38:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001f3c:	fa93 f3a3 	rbit	r3, r3
 8001f40:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001f44:	4b3c      	ldr	r3, [pc, #240]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001f4c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001f50:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001f54:	fa92 f2a2 	rbit	r2, r2
 8001f58:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001f5c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001f60:	fab2 f282 	clz	r2, r2
 8001f64:	b252      	sxtb	r2, r2
 8001f66:	f042 0220 	orr.w	r2, r2, #32
 8001f6a:	b252      	sxtb	r2, r2
 8001f6c:	b2d2      	uxtb	r2, r2
 8001f6e:	f002 021f 	and.w	r2, r2, #31
 8001f72:	2101      	movs	r1, #1
 8001f74:	fa01 f202 	lsl.w	r2, r1, r2
 8001f78:	4013      	ands	r3, r2
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d0aa      	beq.n	8001ed4 <HAL_RCC_OscConfig+0x19c>
 8001f7e:	e05e      	b.n	800203e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f80:	f7fe fe5c 	bl	8000c3c <HAL_GetTick>
 8001f84:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001f88:	e00a      	b.n	8001fa0 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001f8a:	f7fe fe57 	bl	8000c3c <HAL_GetTick>
 8001f8e:	4602      	mov	r2, r0
 8001f90:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b64      	cmp	r3, #100	; 0x64
 8001f98:	d902      	bls.n	8001fa0 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	f000 bdb3 	b.w	8002b06 <HAL_RCC_OscConfig+0xdce>
 8001fa0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fa4:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fa8:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001fac:	fa93 f3a3 	rbit	r3, r3
 8001fb0:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001fb4:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fb8:	fab3 f383 	clz	r3, r3
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	095b      	lsrs	r3, r3, #5
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	f043 0301 	orr.w	r3, r3, #1
 8001fc6:	b2db      	uxtb	r3, r3
 8001fc8:	2b01      	cmp	r3, #1
 8001fca:	d102      	bne.n	8001fd2 <HAL_RCC_OscConfig+0x29a>
 8001fcc:	4b1a      	ldr	r3, [pc, #104]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	e015      	b.n	8001ffe <HAL_RCC_OscConfig+0x2c6>
 8001fd2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fd6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fda:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001fde:	fa93 f3a3 	rbit	r3, r3
 8001fe2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001fe6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001fea:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001fee:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001ff2:	fa93 f3a3 	rbit	r3, r3
 8001ff6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001ffa:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_RCC_OscConfig+0x300>)
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002002:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002006:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800200a:	fa92 f2a2 	rbit	r2, r2
 800200e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8002012:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8002016:	fab2 f282 	clz	r2, r2
 800201a:	b252      	sxtb	r2, r2
 800201c:	f042 0220 	orr.w	r2, r2, #32
 8002020:	b252      	sxtb	r2, r2
 8002022:	b2d2      	uxtb	r2, r2
 8002024:	f002 021f 	and.w	r2, r2, #31
 8002028:	2101      	movs	r1, #1
 800202a:	fa01 f202 	lsl.w	r2, r1, r2
 800202e:	4013      	ands	r3, r2
 8002030:	2b00      	cmp	r3, #0
 8002032:	d1aa      	bne.n	8001f8a <HAL_RCC_OscConfig+0x252>
 8002034:	e003      	b.n	800203e <HAL_RCC_OscConfig+0x306>
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800203c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0302 	and.w	r3, r3, #2
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 8170 	beq.w	800232e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800204e:	4bd0      	ldr	r3, [pc, #832]	; (8002390 <HAL_RCC_OscConfig+0x658>)
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800205a:	4bcd      	ldr	r3, [pc, #820]	; (8002390 <HAL_RCC_OscConfig+0x658>)
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	f003 030c 	and.w	r3, r3, #12
 8002062:	2b08      	cmp	r3, #8
 8002064:	d16d      	bne.n	8002142 <HAL_RCC_OscConfig+0x40a>
 8002066:	4bca      	ldr	r3, [pc, #808]	; (8002390 <HAL_RCC_OscConfig+0x658>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d167      	bne.n	8002142 <HAL_RCC_OscConfig+0x40a>
 8002072:	2302      	movs	r3, #2
 8002074:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8002084:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d102      	bne.n	80020a2 <HAL_RCC_OscConfig+0x36a>
 800209c:	4bbc      	ldr	r3, [pc, #752]	; (8002390 <HAL_RCC_OscConfig+0x658>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	e013      	b.n	80020ca <HAL_RCC_OscConfig+0x392>
 80020a2:	2302      	movs	r3, #2
 80020a4:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 80020b4:	2302      	movs	r3, #2
 80020b6:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80020ba:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80020c6:	4bb2      	ldr	r3, [pc, #712]	; (8002390 <HAL_RCC_OscConfig+0x658>)
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	2202      	movs	r2, #2
 80020cc:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80020d0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80020d4:	fa92 f2a2 	rbit	r2, r2
 80020d8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80020dc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80020e0:	fab2 f282 	clz	r2, r2
 80020e4:	b252      	sxtb	r2, r2
 80020e6:	f042 0220 	orr.w	r2, r2, #32
 80020ea:	b252      	sxtb	r2, r2
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f002 021f 	and.w	r2, r2, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d007      	beq.n	800210e <HAL_RCC_OscConfig+0x3d6>
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	691b      	ldr	r3, [r3, #16]
 8002104:	2b01      	cmp	r3, #1
 8002106:	d002      	beq.n	800210e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8002108:	2301      	movs	r3, #1
 800210a:	f000 bcfc 	b.w	8002b06 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800210e:	4ba0      	ldr	r3, [pc, #640]	; (8002390 <HAL_RCC_OscConfig+0x658>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002116:	1d3b      	adds	r3, r7, #4
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	6959      	ldr	r1, [r3, #20]
 800211c:	23f8      	movs	r3, #248	; 0xf8
 800211e:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002122:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002126:	fa93 f3a3 	rbit	r3, r3
 800212a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 800212e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002132:	fab3 f383 	clz	r3, r3
 8002136:	fa01 f303 	lsl.w	r3, r1, r3
 800213a:	4995      	ldr	r1, [pc, #596]	; (8002390 <HAL_RCC_OscConfig+0x658>)
 800213c:	4313      	orrs	r3, r2
 800213e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002140:	e0f5      	b.n	800232e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002142:	1d3b      	adds	r3, r7, #4
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	691b      	ldr	r3, [r3, #16]
 8002148:	2b00      	cmp	r3, #0
 800214a:	f000 8085 	beq.w	8002258 <HAL_RCC_OscConfig+0x520>
 800214e:	2301      	movs	r3, #1
 8002150:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002154:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002158:	fa93 f3a3 	rbit	r3, r3
 800215c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8002160:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002164:	fab3 f383 	clz	r3, r3
 8002168:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800216c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002170:	009b      	lsls	r3, r3, #2
 8002172:	461a      	mov	r2, r3
 8002174:	2301      	movs	r3, #1
 8002176:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002178:	f7fe fd60 	bl	8000c3c <HAL_GetTick>
 800217c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002180:	e00a      	b.n	8002198 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002182:	f7fe fd5b 	bl	8000c3c <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800218c:	1ad3      	subs	r3, r2, r3
 800218e:	2b02      	cmp	r3, #2
 8002190:	d902      	bls.n	8002198 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8002192:	2303      	movs	r3, #3
 8002194:	f000 bcb7 	b.w	8002b06 <HAL_RCC_OscConfig+0xdce>
 8002198:	2302      	movs	r3, #2
 800219a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800219e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 80021a2:	fa93 f3a3 	rbit	r3, r3
 80021a6:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 80021aa:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021ae:	fab3 f383 	clz	r3, r3
 80021b2:	b2db      	uxtb	r3, r3
 80021b4:	095b      	lsrs	r3, r3, #5
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	f043 0301 	orr.w	r3, r3, #1
 80021bc:	b2db      	uxtb	r3, r3
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d102      	bne.n	80021c8 <HAL_RCC_OscConfig+0x490>
 80021c2:	4b73      	ldr	r3, [pc, #460]	; (8002390 <HAL_RCC_OscConfig+0x658>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	e013      	b.n	80021f0 <HAL_RCC_OscConfig+0x4b8>
 80021c8:	2302      	movs	r3, #2
 80021ca:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ce:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80021d2:	fa93 f3a3 	rbit	r3, r3
 80021d6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80021da:	2302      	movs	r3, #2
 80021dc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80021e0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80021e4:	fa93 f3a3 	rbit	r3, r3
 80021e8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80021ec:	4b68      	ldr	r3, [pc, #416]	; (8002390 <HAL_RCC_OscConfig+0x658>)
 80021ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f0:	2202      	movs	r2, #2
 80021f2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80021f6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80021fa:	fa92 f2a2 	rbit	r2, r2
 80021fe:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8002202:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002206:	fab2 f282 	clz	r2, r2
 800220a:	b252      	sxtb	r2, r2
 800220c:	f042 0220 	orr.w	r2, r2, #32
 8002210:	b252      	sxtb	r2, r2
 8002212:	b2d2      	uxtb	r2, r2
 8002214:	f002 021f 	and.w	r2, r2, #31
 8002218:	2101      	movs	r1, #1
 800221a:	fa01 f202 	lsl.w	r2, r1, r2
 800221e:	4013      	ands	r3, r2
 8002220:	2b00      	cmp	r3, #0
 8002222:	d0ae      	beq.n	8002182 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002224:	4b5a      	ldr	r3, [pc, #360]	; (8002390 <HAL_RCC_OscConfig+0x658>)
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800222c:	1d3b      	adds	r3, r7, #4
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	6959      	ldr	r1, [r3, #20]
 8002232:	23f8      	movs	r3, #248	; 0xf8
 8002234:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8002244:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002248:	fab3 f383 	clz	r3, r3
 800224c:	fa01 f303 	lsl.w	r3, r1, r3
 8002250:	494f      	ldr	r1, [pc, #316]	; (8002390 <HAL_RCC_OscConfig+0x658>)
 8002252:	4313      	orrs	r3, r2
 8002254:	600b      	str	r3, [r1, #0]
 8002256:	e06a      	b.n	800232e <HAL_RCC_OscConfig+0x5f6>
 8002258:	2301      	movs	r3, #1
 800225a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800225e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 800226a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800226e:	fab3 f383 	clz	r3, r3
 8002272:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002276:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800227a:	009b      	lsls	r3, r3, #2
 800227c:	461a      	mov	r2, r3
 800227e:	2300      	movs	r3, #0
 8002280:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002282:	f7fe fcdb 	bl	8000c3c <HAL_GetTick>
 8002286:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800228a:	e00a      	b.n	80022a2 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800228c:	f7fe fcd6 	bl	8000c3c <HAL_GetTick>
 8002290:	4602      	mov	r2, r0
 8002292:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	2b02      	cmp	r3, #2
 800229a:	d902      	bls.n	80022a2 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 800229c:	2303      	movs	r3, #3
 800229e:	f000 bc32 	b.w	8002b06 <HAL_RCC_OscConfig+0xdce>
 80022a2:	2302      	movs	r3, #2
 80022a4:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80022ac:	fa93 f3a3 	rbit	r3, r3
 80022b0:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 80022b4:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80022b8:	fab3 f383 	clz	r3, r3
 80022bc:	b2db      	uxtb	r3, r3
 80022be:	095b      	lsrs	r3, r3, #5
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	f043 0301 	orr.w	r3, r3, #1
 80022c6:	b2db      	uxtb	r3, r3
 80022c8:	2b01      	cmp	r3, #1
 80022ca:	d102      	bne.n	80022d2 <HAL_RCC_OscConfig+0x59a>
 80022cc:	4b30      	ldr	r3, [pc, #192]	; (8002390 <HAL_RCC_OscConfig+0x658>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	e013      	b.n	80022fa <HAL_RCC_OscConfig+0x5c2>
 80022d2:	2302      	movs	r3, #2
 80022d4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022d8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80022dc:	fa93 f3a3 	rbit	r3, r3
 80022e0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80022e4:	2302      	movs	r3, #2
 80022e6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80022ea:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80022ee:	fa93 f3a3 	rbit	r3, r3
 80022f2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80022f6:	4b26      	ldr	r3, [pc, #152]	; (8002390 <HAL_RCC_OscConfig+0x658>)
 80022f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022fa:	2202      	movs	r2, #2
 80022fc:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002300:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002304:	fa92 f2a2 	rbit	r2, r2
 8002308:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 800230c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 8002310:	fab2 f282 	clz	r2, r2
 8002314:	b252      	sxtb	r2, r2
 8002316:	f042 0220 	orr.w	r2, r2, #32
 800231a:	b252      	sxtb	r2, r2
 800231c:	b2d2      	uxtb	r2, r2
 800231e:	f002 021f 	and.w	r2, r2, #31
 8002322:	2101      	movs	r1, #1
 8002324:	fa01 f202 	lsl.w	r2, r1, r2
 8002328:	4013      	ands	r3, r2
 800232a:	2b00      	cmp	r3, #0
 800232c:	d1ae      	bne.n	800228c <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800232e:	1d3b      	adds	r3, r7, #4
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f003 0308 	and.w	r3, r3, #8
 8002338:	2b00      	cmp	r3, #0
 800233a:	f000 80d8 	beq.w	80024ee <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800233e:	1d3b      	adds	r3, r7, #4
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d067      	beq.n	8002418 <HAL_RCC_OscConfig+0x6e0>
 8002348:	2301      	movs	r3, #1
 800234a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800234e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002352:	fa93 f3a3 	rbit	r3, r3
 8002356:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 800235a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800235e:	fab3 f383 	clz	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	4b0b      	ldr	r3, [pc, #44]	; (8002394 <HAL_RCC_OscConfig+0x65c>)
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	461a      	mov	r2, r3
 800236c:	2301      	movs	r3, #1
 800236e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002370:	f7fe fc64 	bl	8000c3c <HAL_GetTick>
 8002374:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002378:	e00e      	b.n	8002398 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800237a:	f7fe fc5f 	bl	8000c3c <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d906      	bls.n	8002398 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e3bb      	b.n	8002b06 <HAL_RCC_OscConfig+0xdce>
 800238e:	bf00      	nop
 8002390:	40021000 	.word	0x40021000
 8002394:	10908120 	.word	0x10908120
 8002398:	2302      	movs	r3, #2
 800239a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800239e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 80023a2:	fa93 f3a3 	rbit	r3, r3
 80023a6:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 80023aa:	2302      	movs	r3, #2
 80023ac:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80023b0:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 80023b4:	fa93 f2a3 	rbit	r2, r3
 80023b8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80023bc:	601a      	str	r2, [r3, #0]
 80023be:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80023c2:	2202      	movs	r2, #2
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	fa93 f2a3 	rbit	r2, r3
 80023d0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80023d4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023d6:	4ba5      	ldr	r3, [pc, #660]	; (800266c <HAL_RCC_OscConfig+0x934>)
 80023d8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80023da:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80023de:	2102      	movs	r1, #2
 80023e0:	6019      	str	r1, [r3, #0]
 80023e2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	fa93 f1a3 	rbit	r1, r3
 80023ec:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80023f0:	6019      	str	r1, [r3, #0]
  return(result);
 80023f2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	b25b      	sxtb	r3, r3
 80023fe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002402:	b25b      	sxtb	r3, r3
 8002404:	b2db      	uxtb	r3, r3
 8002406:	f003 031f 	and.w	r3, r3, #31
 800240a:	2101      	movs	r1, #1
 800240c:	fa01 f303 	lsl.w	r3, r1, r3
 8002410:	4013      	ands	r3, r2
 8002412:	2b00      	cmp	r3, #0
 8002414:	d0b1      	beq.n	800237a <HAL_RCC_OscConfig+0x642>
 8002416:	e06a      	b.n	80024ee <HAL_RCC_OscConfig+0x7b6>
 8002418:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 800241c:	2201      	movs	r2, #1
 800241e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002420:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	fa93 f2a3 	rbit	r2, r3
 800242a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 800242e:	601a      	str	r2, [r3, #0]
  return(result);
 8002430:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002434:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002436:	fab3 f383 	clz	r3, r3
 800243a:	461a      	mov	r2, r3
 800243c:	4b8c      	ldr	r3, [pc, #560]	; (8002670 <HAL_RCC_OscConfig+0x938>)
 800243e:	4413      	add	r3, r2
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	461a      	mov	r2, r3
 8002444:	2300      	movs	r3, #0
 8002446:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002448:	f7fe fbf8 	bl	8000c3c <HAL_GetTick>
 800244c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002450:	e009      	b.n	8002466 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002452:	f7fe fbf3 	bl	8000c3c <HAL_GetTick>
 8002456:	4602      	mov	r2, r0
 8002458:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800245c:	1ad3      	subs	r3, r2, r3
 800245e:	2b02      	cmp	r3, #2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e34f      	b.n	8002b06 <HAL_RCC_OscConfig+0xdce>
 8002466:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800246a:	2202      	movs	r2, #2
 800246c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800246e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	fa93 f2a3 	rbit	r2, r3
 8002478:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800247c:	601a      	str	r2, [r3, #0]
 800247e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002482:	2202      	movs	r2, #2
 8002484:	601a      	str	r2, [r3, #0]
 8002486:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	fa93 f2a3 	rbit	r2, r3
 8002490:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002494:	601a      	str	r2, [r3, #0]
 8002496:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800249a:	2202      	movs	r2, #2
 800249c:	601a      	str	r2, [r3, #0]
 800249e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	fa93 f2a3 	rbit	r2, r3
 80024a8:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 80024ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80024ae:	4b6f      	ldr	r3, [pc, #444]	; (800266c <HAL_RCC_OscConfig+0x934>)
 80024b0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024b2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024b6:	2102      	movs	r1, #2
 80024b8:	6019      	str	r1, [r3, #0]
 80024ba:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	fa93 f1a3 	rbit	r1, r3
 80024c4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80024c8:	6019      	str	r1, [r3, #0]
  return(result);
 80024ca:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	fab3 f383 	clz	r3, r3
 80024d4:	b25b      	sxtb	r3, r3
 80024d6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80024da:	b25b      	sxtb	r3, r3
 80024dc:	b2db      	uxtb	r3, r3
 80024de:	f003 031f 	and.w	r3, r3, #31
 80024e2:	2101      	movs	r1, #1
 80024e4:	fa01 f303 	lsl.w	r3, r1, r3
 80024e8:	4013      	ands	r3, r2
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d1b1      	bne.n	8002452 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024ee:	1d3b      	adds	r3, r7, #4
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f003 0304 	and.w	r3, r3, #4
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	f000 8159 	beq.w	80027b0 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fe:	2300      	movs	r3, #0
 8002500:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002504:	4b59      	ldr	r3, [pc, #356]	; (800266c <HAL_RCC_OscConfig+0x934>)
 8002506:	69db      	ldr	r3, [r3, #28]
 8002508:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800250c:	2b00      	cmp	r3, #0
 800250e:	d112      	bne.n	8002536 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002510:	4b56      	ldr	r3, [pc, #344]	; (800266c <HAL_RCC_OscConfig+0x934>)
 8002512:	69db      	ldr	r3, [r3, #28]
 8002514:	4a55      	ldr	r2, [pc, #340]	; (800266c <HAL_RCC_OscConfig+0x934>)
 8002516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800251a:	61d3      	str	r3, [r2, #28]
 800251c:	4b53      	ldr	r3, [pc, #332]	; (800266c <HAL_RCC_OscConfig+0x934>)
 800251e:	69db      	ldr	r3, [r3, #28]
 8002520:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002524:	f107 030c 	add.w	r3, r7, #12
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	f107 030c 	add.w	r3, r7, #12
 800252e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002530:	2301      	movs	r3, #1
 8002532:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002536:	4b4f      	ldr	r3, [pc, #316]	; (8002674 <HAL_RCC_OscConfig+0x93c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800253e:	2b00      	cmp	r3, #0
 8002540:	d11a      	bne.n	8002578 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002542:	4b4c      	ldr	r3, [pc, #304]	; (8002674 <HAL_RCC_OscConfig+0x93c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a4b      	ldr	r2, [pc, #300]	; (8002674 <HAL_RCC_OscConfig+0x93c>)
 8002548:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800254c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800254e:	f7fe fb75 	bl	8000c3c <HAL_GetTick>
 8002552:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002556:	e009      	b.n	800256c <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002558:	f7fe fb70 	bl	8000c3c <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002562:	1ad3      	subs	r3, r2, r3
 8002564:	2b64      	cmp	r3, #100	; 0x64
 8002566:	d901      	bls.n	800256c <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8002568:	2303      	movs	r3, #3
 800256a:	e2cc      	b.n	8002b06 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800256c:	4b41      	ldr	r3, [pc, #260]	; (8002674 <HAL_RCC_OscConfig+0x93c>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002574:	2b00      	cmp	r3, #0
 8002576:	d0ef      	beq.n	8002558 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002578:	1d3b      	adds	r3, r7, #4
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	2b01      	cmp	r3, #1
 8002580:	d106      	bne.n	8002590 <HAL_RCC_OscConfig+0x858>
 8002582:	4b3a      	ldr	r3, [pc, #232]	; (800266c <HAL_RCC_OscConfig+0x934>)
 8002584:	6a1b      	ldr	r3, [r3, #32]
 8002586:	4a39      	ldr	r2, [pc, #228]	; (800266c <HAL_RCC_OscConfig+0x934>)
 8002588:	f043 0301 	orr.w	r3, r3, #1
 800258c:	6213      	str	r3, [r2, #32]
 800258e:	e02f      	b.n	80025f0 <HAL_RCC_OscConfig+0x8b8>
 8002590:	1d3b      	adds	r3, r7, #4
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	68db      	ldr	r3, [r3, #12]
 8002596:	2b00      	cmp	r3, #0
 8002598:	d10c      	bne.n	80025b4 <HAL_RCC_OscConfig+0x87c>
 800259a:	4b34      	ldr	r3, [pc, #208]	; (800266c <HAL_RCC_OscConfig+0x934>)
 800259c:	6a1b      	ldr	r3, [r3, #32]
 800259e:	4a33      	ldr	r2, [pc, #204]	; (800266c <HAL_RCC_OscConfig+0x934>)
 80025a0:	f023 0301 	bic.w	r3, r3, #1
 80025a4:	6213      	str	r3, [r2, #32]
 80025a6:	4b31      	ldr	r3, [pc, #196]	; (800266c <HAL_RCC_OscConfig+0x934>)
 80025a8:	6a1b      	ldr	r3, [r3, #32]
 80025aa:	4a30      	ldr	r2, [pc, #192]	; (800266c <HAL_RCC_OscConfig+0x934>)
 80025ac:	f023 0304 	bic.w	r3, r3, #4
 80025b0:	6213      	str	r3, [r2, #32]
 80025b2:	e01d      	b.n	80025f0 <HAL_RCC_OscConfig+0x8b8>
 80025b4:	1d3b      	adds	r3, r7, #4
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	68db      	ldr	r3, [r3, #12]
 80025ba:	2b05      	cmp	r3, #5
 80025bc:	d10c      	bne.n	80025d8 <HAL_RCC_OscConfig+0x8a0>
 80025be:	4b2b      	ldr	r3, [pc, #172]	; (800266c <HAL_RCC_OscConfig+0x934>)
 80025c0:	6a1b      	ldr	r3, [r3, #32]
 80025c2:	4a2a      	ldr	r2, [pc, #168]	; (800266c <HAL_RCC_OscConfig+0x934>)
 80025c4:	f043 0304 	orr.w	r3, r3, #4
 80025c8:	6213      	str	r3, [r2, #32]
 80025ca:	4b28      	ldr	r3, [pc, #160]	; (800266c <HAL_RCC_OscConfig+0x934>)
 80025cc:	6a1b      	ldr	r3, [r3, #32]
 80025ce:	4a27      	ldr	r2, [pc, #156]	; (800266c <HAL_RCC_OscConfig+0x934>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6213      	str	r3, [r2, #32]
 80025d6:	e00b      	b.n	80025f0 <HAL_RCC_OscConfig+0x8b8>
 80025d8:	4b24      	ldr	r3, [pc, #144]	; (800266c <HAL_RCC_OscConfig+0x934>)
 80025da:	6a1b      	ldr	r3, [r3, #32]
 80025dc:	4a23      	ldr	r2, [pc, #140]	; (800266c <HAL_RCC_OscConfig+0x934>)
 80025de:	f023 0301 	bic.w	r3, r3, #1
 80025e2:	6213      	str	r3, [r2, #32]
 80025e4:	4b21      	ldr	r3, [pc, #132]	; (800266c <HAL_RCC_OscConfig+0x934>)
 80025e6:	6a1b      	ldr	r3, [r3, #32]
 80025e8:	4a20      	ldr	r2, [pc, #128]	; (800266c <HAL_RCC_OscConfig+0x934>)
 80025ea:	f023 0304 	bic.w	r3, r3, #4
 80025ee:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80025f0:	1d3b      	adds	r3, r7, #4
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d06b      	beq.n	80026d2 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025fa:	f7fe fb1f 	bl	8000c3c <HAL_GetTick>
 80025fe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002602:	e00b      	b.n	800261c <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002604:	f7fe fb1a 	bl	8000c3c <HAL_GetTick>
 8002608:	4602      	mov	r2, r0
 800260a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800260e:	1ad3      	subs	r3, r2, r3
 8002610:	f241 3288 	movw	r2, #5000	; 0x1388
 8002614:	4293      	cmp	r3, r2
 8002616:	d901      	bls.n	800261c <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8002618:	2303      	movs	r3, #3
 800261a:	e274      	b.n	8002b06 <HAL_RCC_OscConfig+0xdce>
 800261c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002620:	2202      	movs	r2, #2
 8002622:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002624:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	fa93 f2a3 	rbit	r2, r3
 800262e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002638:	2202      	movs	r2, #2
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	fa93 f2a3 	rbit	r2, r3
 8002646:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800264a:	601a      	str	r2, [r3, #0]
  return(result);
 800264c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002650:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002652:	fab3 f383 	clz	r3, r3
 8002656:	b2db      	uxtb	r3, r3
 8002658:	095b      	lsrs	r3, r3, #5
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f043 0302 	orr.w	r3, r3, #2
 8002660:	b2db      	uxtb	r3, r3
 8002662:	2b02      	cmp	r3, #2
 8002664:	d108      	bne.n	8002678 <HAL_RCC_OscConfig+0x940>
 8002666:	4b01      	ldr	r3, [pc, #4]	; (800266c <HAL_RCC_OscConfig+0x934>)
 8002668:	6a1b      	ldr	r3, [r3, #32]
 800266a:	e013      	b.n	8002694 <HAL_RCC_OscConfig+0x95c>
 800266c:	40021000 	.word	0x40021000
 8002670:	10908120 	.word	0x10908120
 8002674:	40007000 	.word	0x40007000
 8002678:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800267c:	2202      	movs	r2, #2
 800267e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002680:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	fa93 f2a3 	rbit	r2, r3
 800268a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	4bbb      	ldr	r3, [pc, #748]	; (8002980 <HAL_RCC_OscConfig+0xc48>)
 8002692:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002694:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002698:	2102      	movs	r1, #2
 800269a:	6011      	str	r1, [r2, #0]
 800269c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 80026a0:	6812      	ldr	r2, [r2, #0]
 80026a2:	fa92 f1a2 	rbit	r1, r2
 80026a6:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80026aa:	6011      	str	r1, [r2, #0]
  return(result);
 80026ac:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 80026b0:	6812      	ldr	r2, [r2, #0]
 80026b2:	fab2 f282 	clz	r2, r2
 80026b6:	b252      	sxtb	r2, r2
 80026b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80026bc:	b252      	sxtb	r2, r2
 80026be:	b2d2      	uxtb	r2, r2
 80026c0:	f002 021f 	and.w	r2, r2, #31
 80026c4:	2101      	movs	r1, #1
 80026c6:	fa01 f202 	lsl.w	r2, r1, r2
 80026ca:	4013      	ands	r3, r2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d099      	beq.n	8002604 <HAL_RCC_OscConfig+0x8cc>
 80026d0:	e064      	b.n	800279c <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026d2:	f7fe fab3 	bl	8000c3c <HAL_GetTick>
 80026d6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80026da:	e00b      	b.n	80026f4 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80026dc:	f7fe faae 	bl	8000c3c <HAL_GetTick>
 80026e0:	4602      	mov	r2, r0
 80026e2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80026e6:	1ad3      	subs	r3, r2, r3
 80026e8:	f241 3288 	movw	r2, #5000	; 0x1388
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d901      	bls.n	80026f4 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 80026f0:	2303      	movs	r3, #3
 80026f2:	e208      	b.n	8002b06 <HAL_RCC_OscConfig+0xdce>
 80026f4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80026f8:	2202      	movs	r2, #2
 80026fa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026fc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	fa93 f2a3 	rbit	r2, r3
 8002706:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002710:	2202      	movs	r2, #2
 8002712:	601a      	str	r2, [r3, #0]
 8002714:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	fa93 f2a3 	rbit	r2, r3
 800271e:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002722:	601a      	str	r2, [r3, #0]
  return(result);
 8002724:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002728:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800272a:	fab3 f383 	clz	r3, r3
 800272e:	b2db      	uxtb	r3, r3
 8002730:	095b      	lsrs	r3, r3, #5
 8002732:	b2db      	uxtb	r3, r3
 8002734:	f043 0302 	orr.w	r3, r3, #2
 8002738:	b2db      	uxtb	r3, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d102      	bne.n	8002744 <HAL_RCC_OscConfig+0xa0c>
 800273e:	4b90      	ldr	r3, [pc, #576]	; (8002980 <HAL_RCC_OscConfig+0xc48>)
 8002740:	6a1b      	ldr	r3, [r3, #32]
 8002742:	e00d      	b.n	8002760 <HAL_RCC_OscConfig+0xa28>
 8002744:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002748:	2202      	movs	r2, #2
 800274a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800274c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	fa93 f2a3 	rbit	r2, r3
 8002756:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800275a:	601a      	str	r2, [r3, #0]
 800275c:	4b88      	ldr	r3, [pc, #544]	; (8002980 <HAL_RCC_OscConfig+0xc48>)
 800275e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002760:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002764:	2102      	movs	r1, #2
 8002766:	6011      	str	r1, [r2, #0]
 8002768:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800276c:	6812      	ldr	r2, [r2, #0]
 800276e:	fa92 f1a2 	rbit	r1, r2
 8002772:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002776:	6011      	str	r1, [r2, #0]
  return(result);
 8002778:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800277c:	6812      	ldr	r2, [r2, #0]
 800277e:	fab2 f282 	clz	r2, r2
 8002782:	b252      	sxtb	r2, r2
 8002784:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002788:	b252      	sxtb	r2, r2
 800278a:	b2d2      	uxtb	r2, r2
 800278c:	f002 021f 	and.w	r2, r2, #31
 8002790:	2101      	movs	r1, #1
 8002792:	fa01 f202 	lsl.w	r2, r1, r2
 8002796:	4013      	ands	r3, r2
 8002798:	2b00      	cmp	r3, #0
 800279a:	d19f      	bne.n	80026dc <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800279c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d105      	bne.n	80027b0 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027a4:	4b76      	ldr	r3, [pc, #472]	; (8002980 <HAL_RCC_OscConfig+0xc48>)
 80027a6:	69db      	ldr	r3, [r3, #28]
 80027a8:	4a75      	ldr	r2, [pc, #468]	; (8002980 <HAL_RCC_OscConfig+0xc48>)
 80027aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80027ae:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027b0:	1d3b      	adds	r3, r7, #4
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	69db      	ldr	r3, [r3, #28]
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	f000 81a4 	beq.w	8002b04 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80027bc:	4b70      	ldr	r3, [pc, #448]	; (8002980 <HAL_RCC_OscConfig+0xc48>)
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 030c 	and.w	r3, r3, #12
 80027c4:	2b08      	cmp	r3, #8
 80027c6:	f000 819b 	beq.w	8002b00 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027ca:	1d3b      	adds	r3, r7, #4
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	69db      	ldr	r3, [r3, #28]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	f040 8113 	bne.w	80029fc <HAL_RCC_OscConfig+0xcc4>
 80027d6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027da:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027de:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027e0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	fa93 f2a3 	rbit	r2, r3
 80027ea:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027ee:	601a      	str	r2, [r3, #0]
  return(result);
 80027f0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80027f4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027f6:	fab3 f383 	clz	r3, r3
 80027fa:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027fe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002802:	009b      	lsls	r3, r3, #2
 8002804:	461a      	mov	r2, r3
 8002806:	2300      	movs	r3, #0
 8002808:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280a:	f7fe fa17 	bl	8000c3c <HAL_GetTick>
 800280e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002812:	e009      	b.n	8002828 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002814:	f7fe fa12 	bl	8000c3c <HAL_GetTick>
 8002818:	4602      	mov	r2, r0
 800281a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800281e:	1ad3      	subs	r3, r2, r3
 8002820:	2b02      	cmp	r3, #2
 8002822:	d901      	bls.n	8002828 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8002824:	2303      	movs	r3, #3
 8002826:	e16e      	b.n	8002b06 <HAL_RCC_OscConfig+0xdce>
 8002828:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800282c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002830:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002832:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	fa93 f2a3 	rbit	r2, r3
 800283c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002840:	601a      	str	r2, [r3, #0]
  return(result);
 8002842:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002846:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d102      	bne.n	8002862 <HAL_RCC_OscConfig+0xb2a>
 800285c:	4b48      	ldr	r3, [pc, #288]	; (8002980 <HAL_RCC_OscConfig+0xc48>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	e01b      	b.n	800289a <HAL_RCC_OscConfig+0xb62>
 8002862:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002866:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800286a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800286c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	fa93 f2a3 	rbit	r2, r3
 8002876:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002880:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002884:	601a      	str	r2, [r3, #0]
 8002886:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	fa93 f2a3 	rbit	r2, r3
 8002890:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002894:	601a      	str	r2, [r3, #0]
 8002896:	4b3a      	ldr	r3, [pc, #232]	; (8002980 <HAL_RCC_OscConfig+0xc48>)
 8002898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800289a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800289e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80028a2:	6011      	str	r1, [r2, #0]
 80028a4:	f107 0264 	add.w	r2, r7, #100	; 0x64
 80028a8:	6812      	ldr	r2, [r2, #0]
 80028aa:	fa92 f1a2 	rbit	r1, r2
 80028ae:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80028b2:	6011      	str	r1, [r2, #0]
  return(result);
 80028b4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80028b8:	6812      	ldr	r2, [r2, #0]
 80028ba:	fab2 f282 	clz	r2, r2
 80028be:	b252      	sxtb	r2, r2
 80028c0:	f042 0220 	orr.w	r2, r2, #32
 80028c4:	b252      	sxtb	r2, r2
 80028c6:	b2d2      	uxtb	r2, r2
 80028c8:	f002 021f 	and.w	r2, r2, #31
 80028cc:	2101      	movs	r1, #1
 80028ce:	fa01 f202 	lsl.w	r2, r1, r2
 80028d2:	4013      	ands	r3, r2
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d19d      	bne.n	8002814 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80028d8:	4b29      	ldr	r3, [pc, #164]	; (8002980 <HAL_RCC_OscConfig+0xc48>)
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80028e0:	1d3b      	adds	r3, r7, #4
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80028e6:	1d3b      	adds	r3, r7, #4
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	6a1b      	ldr	r3, [r3, #32]
 80028ec:	430b      	orrs	r3, r1
 80028ee:	4924      	ldr	r1, [pc, #144]	; (8002980 <HAL_RCC_OscConfig+0xc48>)
 80028f0:	4313      	orrs	r3, r2
 80028f2:	604b      	str	r3, [r1, #4]
 80028f4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80028f8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80028fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028fe:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	fa93 f2a3 	rbit	r2, r3
 8002908:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800290c:	601a      	str	r2, [r3, #0]
  return(result);
 800290e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002912:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002914:	fab3 f383 	clz	r3, r3
 8002918:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800291c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	461a      	mov	r2, r3
 8002924:	2301      	movs	r3, #1
 8002926:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002928:	f7fe f988 	bl	8000c3c <HAL_GetTick>
 800292c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002930:	e009      	b.n	8002946 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002932:	f7fe f983 	bl	8000c3c <HAL_GetTick>
 8002936:	4602      	mov	r2, r0
 8002938:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	2b02      	cmp	r3, #2
 8002940:	d901      	bls.n	8002946 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8002942:	2303      	movs	r3, #3
 8002944:	e0df      	b.n	8002b06 <HAL_RCC_OscConfig+0xdce>
 8002946:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800294a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800294e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002950:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	fa93 f2a3 	rbit	r2, r3
 800295a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800295e:	601a      	str	r2, [r3, #0]
  return(result);
 8002960:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002964:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002966:	fab3 f383 	clz	r3, r3
 800296a:	b2db      	uxtb	r3, r3
 800296c:	095b      	lsrs	r3, r3, #5
 800296e:	b2db      	uxtb	r3, r3
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	b2db      	uxtb	r3, r3
 8002976:	2b01      	cmp	r3, #1
 8002978:	d104      	bne.n	8002984 <HAL_RCC_OscConfig+0xc4c>
 800297a:	4b01      	ldr	r3, [pc, #4]	; (8002980 <HAL_RCC_OscConfig+0xc48>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	e01d      	b.n	80029bc <HAL_RCC_OscConfig+0xc84>
 8002980:	40021000 	.word	0x40021000
 8002984:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002988:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800298c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800298e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	fa93 f2a3 	rbit	r2, r3
 8002998:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029a2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80029a6:	601a      	str	r2, [r3, #0]
 80029a8:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	fa93 f2a3 	rbit	r2, r3
 80029b2:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80029b6:	601a      	str	r2, [r3, #0]
 80029b8:	4b55      	ldr	r3, [pc, #340]	; (8002b10 <HAL_RCC_OscConfig+0xdd8>)
 80029ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029bc:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80029c0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80029c4:	6011      	str	r1, [r2, #0]
 80029c6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 80029ca:	6812      	ldr	r2, [r2, #0]
 80029cc:	fa92 f1a2 	rbit	r1, r2
 80029d0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029d4:	6011      	str	r1, [r2, #0]
  return(result);
 80029d6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80029da:	6812      	ldr	r2, [r2, #0]
 80029dc:	fab2 f282 	clz	r2, r2
 80029e0:	b252      	sxtb	r2, r2
 80029e2:	f042 0220 	orr.w	r2, r2, #32
 80029e6:	b252      	sxtb	r2, r2
 80029e8:	b2d2      	uxtb	r2, r2
 80029ea:	f002 021f 	and.w	r2, r2, #31
 80029ee:	2101      	movs	r1, #1
 80029f0:	fa01 f202 	lsl.w	r2, r1, r2
 80029f4:	4013      	ands	r3, r2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d09b      	beq.n	8002932 <HAL_RCC_OscConfig+0xbfa>
 80029fa:	e083      	b.n	8002b04 <HAL_RCC_OscConfig+0xdcc>
 80029fc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a00:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002a04:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a06:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	fa93 f2a3 	rbit	r2, r3
 8002a10:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a14:	601a      	str	r2, [r3, #0]
  return(result);
 8002a16:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002a1a:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002a1c:	fab3 f383 	clz	r3, r3
 8002a20:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002a24:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002a28:	009b      	lsls	r3, r3, #2
 8002a2a:	461a      	mov	r2, r3
 8002a2c:	2300      	movs	r3, #0
 8002a2e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a30:	f7fe f904 	bl	8000c3c <HAL_GetTick>
 8002a34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a38:	e009      	b.n	8002a4e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a3a:	f7fe f8ff 	bl	8000c3c <HAL_GetTick>
 8002a3e:	4602      	mov	r2, r0
 8002a40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d901      	bls.n	8002a4e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8002a4a:	2303      	movs	r3, #3
 8002a4c:	e05b      	b.n	8002b06 <HAL_RCC_OscConfig+0xdce>
 8002a4e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a52:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a56:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a58:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	fa93 f2a3 	rbit	r2, r3
 8002a62:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a66:	601a      	str	r2, [r3, #0]
  return(result);
 8002a68:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002a6c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d102      	bne.n	8002a88 <HAL_RCC_OscConfig+0xd50>
 8002a82:	4b23      	ldr	r3, [pc, #140]	; (8002b10 <HAL_RCC_OscConfig+0xdd8>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	e01b      	b.n	8002ac0 <HAL_RCC_OscConfig+0xd88>
 8002a88:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	fa93 f2a3 	rbit	r2, r3
 8002a9c:	f107 0320 	add.w	r3, r7, #32
 8002aa0:	601a      	str	r2, [r3, #0]
 8002aa2:	f107 031c 	add.w	r3, r7, #28
 8002aa6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002aaa:	601a      	str	r2, [r3, #0]
 8002aac:	f107 031c 	add.w	r3, r7, #28
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	fa93 f2a3 	rbit	r2, r3
 8002ab6:	f107 0318 	add.w	r3, r7, #24
 8002aba:	601a      	str	r2, [r3, #0]
 8002abc:	4b14      	ldr	r3, [pc, #80]	; (8002b10 <HAL_RCC_OscConfig+0xdd8>)
 8002abe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ac0:	f107 0214 	add.w	r2, r7, #20
 8002ac4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002ac8:	6011      	str	r1, [r2, #0]
 8002aca:	f107 0214 	add.w	r2, r7, #20
 8002ace:	6812      	ldr	r2, [r2, #0]
 8002ad0:	fa92 f1a2 	rbit	r1, r2
 8002ad4:	f107 0210 	add.w	r2, r7, #16
 8002ad8:	6011      	str	r1, [r2, #0]
  return(result);
 8002ada:	f107 0210 	add.w	r2, r7, #16
 8002ade:	6812      	ldr	r2, [r2, #0]
 8002ae0:	fab2 f282 	clz	r2, r2
 8002ae4:	b252      	sxtb	r2, r2
 8002ae6:	f042 0220 	orr.w	r2, r2, #32
 8002aea:	b252      	sxtb	r2, r2
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	f002 021f 	and.w	r2, r2, #31
 8002af2:	2101      	movs	r1, #1
 8002af4:	fa01 f202 	lsl.w	r2, r1, r2
 8002af8:	4013      	ands	r3, r2
 8002afa:	2b00      	cmp	r3, #0
 8002afc:	d19d      	bne.n	8002a3a <HAL_RCC_OscConfig+0xd02>
 8002afe:	e001      	b.n	8002b04 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	e000      	b.n	8002b06 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8002b04:	2300      	movs	r3, #0
}
 8002b06:	4618      	mov	r0, r3
 8002b08:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40021000 	.word	0x40021000

08002b14 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b09e      	sub	sp, #120	; 0x78
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d101      	bne.n	8002b2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002b28:	2301      	movs	r3, #1
 8002b2a:	e164      	b.n	8002df6 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b2c:	4b92      	ldr	r3, [pc, #584]	; (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f003 0307 	and.w	r3, r3, #7
 8002b34:	683a      	ldr	r2, [r7, #0]
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d910      	bls.n	8002b5c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b3a:	4b8f      	ldr	r3, [pc, #572]	; (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f023 0207 	bic.w	r2, r3, #7
 8002b42:	498d      	ldr	r1, [pc, #564]	; (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b4a:	4b8b      	ldr	r3, [pc, #556]	; (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f003 0307 	and.w	r3, r3, #7
 8002b52:	683a      	ldr	r2, [r7, #0]
 8002b54:	429a      	cmp	r2, r3
 8002b56:	d001      	beq.n	8002b5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e14c      	b.n	8002df6 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d008      	beq.n	8002b7a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002b68:	4b84      	ldr	r3, [pc, #528]	; (8002d7c <HAL_RCC_ClockConfig+0x268>)
 8002b6a:	685b      	ldr	r3, [r3, #4]
 8002b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	689b      	ldr	r3, [r3, #8]
 8002b74:	4981      	ldr	r1, [pc, #516]	; (8002d7c <HAL_RCC_ClockConfig+0x268>)
 8002b76:	4313      	orrs	r3, r2
 8002b78:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0301 	and.w	r3, r3, #1
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	f000 80df 	beq.w	8002d46 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d13d      	bne.n	8002c0c <HAL_RCC_ClockConfig+0xf8>
 8002b90:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002b94:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b96:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002b98:	fa93 f3a3 	rbit	r3, r3
 8002b9c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8002b9e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba0:	fab3 f383 	clz	r3, r3
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	095b      	lsrs	r3, r3, #5
 8002ba8:	b2db      	uxtb	r3, r3
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	b2db      	uxtb	r3, r3
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d102      	bne.n	8002bba <HAL_RCC_ClockConfig+0xa6>
 8002bb4:	4b71      	ldr	r3, [pc, #452]	; (8002d7c <HAL_RCC_ClockConfig+0x268>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	e00f      	b.n	8002bda <HAL_RCC_ClockConfig+0xc6>
 8002bba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bbe:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bc0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002bc2:	fa93 f3a3 	rbit	r3, r3
 8002bc6:	667b      	str	r3, [r7, #100]	; 0x64
 8002bc8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002bcc:	663b      	str	r3, [r7, #96]	; 0x60
 8002bce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002bd6:	4b69      	ldr	r3, [pc, #420]	; (8002d7c <HAL_RCC_ClockConfig+0x268>)
 8002bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bda:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002bde:	65ba      	str	r2, [r7, #88]	; 0x58
 8002be0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002be2:	fa92 f2a2 	rbit	r2, r2
 8002be6:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8002be8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8002bea:	fab2 f282 	clz	r2, r2
 8002bee:	b252      	sxtb	r2, r2
 8002bf0:	f042 0220 	orr.w	r2, r2, #32
 8002bf4:	b252      	sxtb	r2, r2
 8002bf6:	b2d2      	uxtb	r2, r2
 8002bf8:	f002 021f 	and.w	r2, r2, #31
 8002bfc:	2101      	movs	r1, #1
 8002bfe:	fa01 f202 	lsl.w	r2, r1, r2
 8002c02:	4013      	ands	r3, r2
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d17d      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e0f4      	b.n	8002df6 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	2b02      	cmp	r3, #2
 8002c12:	d13d      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x17c>
 8002c14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002c1c:	fa93 f3a3 	rbit	r3, r3
 8002c20:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8002c22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c24:	fab3 f383 	clz	r3, r3
 8002c28:	b2db      	uxtb	r3, r3
 8002c2a:	095b      	lsrs	r3, r3, #5
 8002c2c:	b2db      	uxtb	r3, r3
 8002c2e:	f043 0301 	orr.w	r3, r3, #1
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	2b01      	cmp	r3, #1
 8002c36:	d102      	bne.n	8002c3e <HAL_RCC_ClockConfig+0x12a>
 8002c38:	4b50      	ldr	r3, [pc, #320]	; (8002d7c <HAL_RCC_ClockConfig+0x268>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	e00f      	b.n	8002c5e <HAL_RCC_ClockConfig+0x14a>
 8002c3e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c42:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c44:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002c46:	fa93 f3a3 	rbit	r3, r3
 8002c4a:	647b      	str	r3, [r7, #68]	; 0x44
 8002c4c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002c50:	643b      	str	r3, [r7, #64]	; 0x40
 8002c52:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c54:	fa93 f3a3 	rbit	r3, r3
 8002c58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002c5a:	4b48      	ldr	r3, [pc, #288]	; (8002d7c <HAL_RCC_ClockConfig+0x268>)
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002c62:	63ba      	str	r2, [r7, #56]	; 0x38
 8002c64:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002c66:	fa92 f2a2 	rbit	r2, r2
 8002c6a:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002c6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002c6e:	fab2 f282 	clz	r2, r2
 8002c72:	b252      	sxtb	r2, r2
 8002c74:	f042 0220 	orr.w	r2, r2, #32
 8002c78:	b252      	sxtb	r2, r2
 8002c7a:	b2d2      	uxtb	r2, r2
 8002c7c:	f002 021f 	and.w	r2, r2, #31
 8002c80:	2101      	movs	r1, #1
 8002c82:	fa01 f202 	lsl.w	r2, r1, r2
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	d13b      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	e0b2      	b.n	8002df6 <HAL_RCC_ClockConfig+0x2e2>
 8002c90:	2302      	movs	r3, #2
 8002c92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c96:	fa93 f3a3 	rbit	r3, r3
 8002c9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c9e:	fab3 f383 	clz	r3, r3
 8002ca2:	b2db      	uxtb	r3, r3
 8002ca4:	095b      	lsrs	r3, r3, #5
 8002ca6:	b2db      	uxtb	r3, r3
 8002ca8:	f043 0301 	orr.w	r3, r3, #1
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b01      	cmp	r3, #1
 8002cb0:	d102      	bne.n	8002cb8 <HAL_RCC_ClockConfig+0x1a4>
 8002cb2:	4b32      	ldr	r3, [pc, #200]	; (8002d7c <HAL_RCC_ClockConfig+0x268>)
 8002cb4:	681b      	ldr	r3, [r3, #0]
 8002cb6:	e00d      	b.n	8002cd4 <HAL_RCC_ClockConfig+0x1c0>
 8002cb8:	2302      	movs	r3, #2
 8002cba:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cbe:	fa93 f3a3 	rbit	r3, r3
 8002cc2:	627b      	str	r3, [r7, #36]	; 0x24
 8002cc4:	2302      	movs	r3, #2
 8002cc6:	623b      	str	r3, [r7, #32]
 8002cc8:	6a3b      	ldr	r3, [r7, #32]
 8002cca:	fa93 f3a3 	rbit	r3, r3
 8002cce:	61fb      	str	r3, [r7, #28]
 8002cd0:	4b2a      	ldr	r3, [pc, #168]	; (8002d7c <HAL_RCC_ClockConfig+0x268>)
 8002cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cd4:	2202      	movs	r2, #2
 8002cd6:	61ba      	str	r2, [r7, #24]
 8002cd8:	69ba      	ldr	r2, [r7, #24]
 8002cda:	fa92 f2a2 	rbit	r2, r2
 8002cde:	617a      	str	r2, [r7, #20]
  return(result);
 8002ce0:	697a      	ldr	r2, [r7, #20]
 8002ce2:	fab2 f282 	clz	r2, r2
 8002ce6:	b252      	sxtb	r2, r2
 8002ce8:	f042 0220 	orr.w	r2, r2, #32
 8002cec:	b252      	sxtb	r2, r2
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	f002 021f 	and.w	r2, r2, #31
 8002cf4:	2101      	movs	r1, #1
 8002cf6:	fa01 f202 	lsl.w	r2, r1, r2
 8002cfa:	4013      	ands	r3, r2
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d101      	bne.n	8002d04 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e078      	b.n	8002df6 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d04:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <HAL_RCC_ClockConfig+0x268>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f023 0203 	bic.w	r2, r3, #3
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	491a      	ldr	r1, [pc, #104]	; (8002d7c <HAL_RCC_ClockConfig+0x268>)
 8002d12:	4313      	orrs	r3, r2
 8002d14:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d16:	f7fd ff91 	bl	8000c3c <HAL_GetTick>
 8002d1a:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d1c:	e00a      	b.n	8002d34 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1e:	f7fd ff8d 	bl	8000c3c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d901      	bls.n	8002d34 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e060      	b.n	8002df6 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d34:	4b11      	ldr	r3, [pc, #68]	; (8002d7c <HAL_RCC_ClockConfig+0x268>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f003 020c 	and.w	r2, r3, #12
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	009b      	lsls	r3, r3, #2
 8002d42:	429a      	cmp	r2, r3
 8002d44:	d1eb      	bne.n	8002d1e <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d46:	4b0c      	ldr	r3, [pc, #48]	; (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0307 	and.w	r3, r3, #7
 8002d4e:	683a      	ldr	r2, [r7, #0]
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d215      	bcs.n	8002d80 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d54:	4b08      	ldr	r3, [pc, #32]	; (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f023 0207 	bic.w	r2, r3, #7
 8002d5c:	4906      	ldr	r1, [pc, #24]	; (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	4313      	orrs	r3, r2
 8002d62:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d64:	4b04      	ldr	r3, [pc, #16]	; (8002d78 <HAL_RCC_ClockConfig+0x264>)
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	f003 0307 	and.w	r3, r3, #7
 8002d6c:	683a      	ldr	r2, [r7, #0]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d006      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e03f      	b.n	8002df6 <HAL_RCC_ClockConfig+0x2e2>
 8002d76:	bf00      	nop
 8002d78:	40022000 	.word	0x40022000
 8002d7c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0304 	and.w	r3, r3, #4
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d008      	beq.n	8002d9e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d8c:	4b1c      	ldr	r3, [pc, #112]	; (8002e00 <HAL_RCC_ClockConfig+0x2ec>)
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	68db      	ldr	r3, [r3, #12]
 8002d98:	4919      	ldr	r1, [pc, #100]	; (8002e00 <HAL_RCC_ClockConfig+0x2ec>)
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f003 0308 	and.w	r3, r3, #8
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d009      	beq.n	8002dbe <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002daa:	4b15      	ldr	r3, [pc, #84]	; (8002e00 <HAL_RCC_ClockConfig+0x2ec>)
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	00db      	lsls	r3, r3, #3
 8002db8:	4911      	ldr	r1, [pc, #68]	; (8002e00 <HAL_RCC_ClockConfig+0x2ec>)
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002dbe:	f000 f825 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 8002dc2:	4601      	mov	r1, r0
 8002dc4:	4b0e      	ldr	r3, [pc, #56]	; (8002e00 <HAL_RCC_ClockConfig+0x2ec>)
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002dcc:	23f0      	movs	r3, #240	; 0xf0
 8002dce:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dd0:	693b      	ldr	r3, [r7, #16]
 8002dd2:	fa93 f3a3 	rbit	r3, r3
 8002dd6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	fab3 f383 	clz	r3, r3
 8002dde:	fa22 f303 	lsr.w	r3, r2, r3
 8002de2:	4a08      	ldr	r2, [pc, #32]	; (8002e04 <HAL_RCC_ClockConfig+0x2f0>)
 8002de4:	5cd3      	ldrb	r3, [r2, r3]
 8002de6:	fa21 f303 	lsr.w	r3, r1, r3
 8002dea:	4a07      	ldr	r2, [pc, #28]	; (8002e08 <HAL_RCC_ClockConfig+0x2f4>)
 8002dec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002dee:	2000      	movs	r0, #0
 8002df0:	f7fd fee0 	bl	8000bb4 <HAL_InitTick>
  
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	3778      	adds	r7, #120	; 0x78
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40021000 	.word	0x40021000
 8002e04:	08006ae4 	.word	0x08006ae4
 8002e08:	20000018 	.word	0x20000018

08002e0c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e0c:	b480      	push	{r7}
 8002e0e:	b08b      	sub	sp, #44	; 0x2c
 8002e10:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e12:	2300      	movs	r3, #0
 8002e14:	61fb      	str	r3, [r7, #28]
 8002e16:	2300      	movs	r3, #0
 8002e18:	61bb      	str	r3, [r7, #24]
 8002e1a:	2300      	movs	r3, #0
 8002e1c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e1e:	2300      	movs	r3, #0
 8002e20:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e22:	2300      	movs	r3, #0
 8002e24:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002e26:	4b29      	ldr	r3, [pc, #164]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e2c:	69fb      	ldr	r3, [r7, #28]
 8002e2e:	f003 030c 	and.w	r3, r3, #12
 8002e32:	2b04      	cmp	r3, #4
 8002e34:	d002      	beq.n	8002e3c <HAL_RCC_GetSysClockFreq+0x30>
 8002e36:	2b08      	cmp	r3, #8
 8002e38:	d003      	beq.n	8002e42 <HAL_RCC_GetSysClockFreq+0x36>
 8002e3a:	e03c      	b.n	8002eb6 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e3c:	4b24      	ldr	r3, [pc, #144]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e3e:	623b      	str	r3, [r7, #32]
      break;
 8002e40:	e03c      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002e42:	69fb      	ldr	r3, [r7, #28]
 8002e44:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002e48:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002e4c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4e:	68bb      	ldr	r3, [r7, #8]
 8002e50:	fa93 f3a3 	rbit	r3, r3
 8002e54:	607b      	str	r3, [r7, #4]
  return(result);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	fab3 f383 	clz	r3, r3
 8002e5c:	fa22 f303 	lsr.w	r3, r2, r3
 8002e60:	4a1c      	ldr	r2, [pc, #112]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002e62:	5cd3      	ldrb	r3, [r2, r3]
 8002e64:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002e66:	4b19      	ldr	r3, [pc, #100]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xc0>)
 8002e68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e6a:	f003 020f 	and.w	r2, r3, #15
 8002e6e:	230f      	movs	r3, #15
 8002e70:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e72:	693b      	ldr	r3, [r7, #16]
 8002e74:	fa93 f3a3 	rbit	r3, r3
 8002e78:	60fb      	str	r3, [r7, #12]
  return(result);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	fa22 f303 	lsr.w	r3, r2, r3
 8002e84:	4a14      	ldr	r2, [pc, #80]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002e86:	5cd3      	ldrb	r3, [r2, r3]
 8002e88:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002e8a:	69fb      	ldr	r3, [r7, #28]
 8002e8c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d008      	beq.n	8002ea6 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002e94:	4a0e      	ldr	r2, [pc, #56]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002e96:	69bb      	ldr	r3, [r7, #24]
 8002e98:	fbb2 f2f3 	udiv	r2, r2, r3
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	fb02 f303 	mul.w	r3, r2, r3
 8002ea2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea4:	e004      	b.n	8002eb0 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002ea6:	697b      	ldr	r3, [r7, #20]
 8002ea8:	4a0c      	ldr	r2, [pc, #48]	; (8002edc <HAL_RCC_GetSysClockFreq+0xd0>)
 8002eaa:	fb02 f303 	mul.w	r3, r2, r3
 8002eae:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb2:	623b      	str	r3, [r7, #32]
      break;
 8002eb4:	e002      	b.n	8002ebc <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eb6:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002eb8:	623b      	str	r3, [r7, #32]
      break;
 8002eba:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ebc:	6a3b      	ldr	r3, [r7, #32]
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	372c      	adds	r7, #44	; 0x2c
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000
 8002ed0:	007a1200 	.word	0x007a1200
 8002ed4:	080055fc 	.word	0x080055fc
 8002ed8:	0800560c 	.word	0x0800560c
 8002edc:	003d0900 	.word	0x003d0900

08002ee0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee4:	4b03      	ldr	r3, [pc, #12]	; (8002ef4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002ee6:	681b      	ldr	r3, [r3, #0]
}
 8002ee8:	4618      	mov	r0, r3
 8002eea:	46bd      	mov	sp, r7
 8002eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef0:	4770      	bx	lr
 8002ef2:	bf00      	nop
 8002ef4:	20000018 	.word	0x20000018

08002ef8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b082      	sub	sp, #8
 8002efc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8002efe:	f7ff ffef 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002f02:	4601      	mov	r1, r0
 8002f04:	4b0b      	ldr	r3, [pc, #44]	; (8002f34 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002f06:	685b      	ldr	r3, [r3, #4]
 8002f08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002f0c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002f10:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	fa93 f3a3 	rbit	r3, r3
 8002f18:	603b      	str	r3, [r7, #0]
  return(result);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	fab3 f383 	clz	r3, r3
 8002f20:	fa22 f303 	lsr.w	r3, r2, r3
 8002f24:	4a04      	ldr	r2, [pc, #16]	; (8002f38 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002f26:	5cd3      	ldrb	r3, [r2, r3]
 8002f28:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	3708      	adds	r7, #8
 8002f30:	46bd      	mov	sp, r7
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	40021000 	.word	0x40021000
 8002f38:	08006af4 	.word	0x08006af4

08002f3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b082      	sub	sp, #8
 8002f40:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8002f42:	f7ff ffcd 	bl	8002ee0 <HAL_RCC_GetHCLKFreq>
 8002f46:	4601      	mov	r1, r0
 8002f48:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002f50:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8002f54:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	fa93 f3a3 	rbit	r3, r3
 8002f5c:	603b      	str	r3, [r7, #0]
  return(result);
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	fab3 f383 	clz	r3, r3
 8002f64:	fa22 f303 	lsr.w	r3, r2, r3
 8002f68:	4a04      	ldr	r2, [pc, #16]	; (8002f7c <HAL_RCC_GetPCLK2Freq+0x40>)
 8002f6a:	5cd3      	ldrb	r3, [r2, r3]
 8002f6c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002f70:	4618      	mov	r0, r3
 8002f72:	3708      	adds	r7, #8
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}
 8002f78:	40021000 	.word	0x40021000
 8002f7c:	08006af4 	.word	0x08006af4

08002f80 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b092      	sub	sp, #72	; 0x48
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	f000 80cf 	beq.w	800313c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002f9e:	2300      	movs	r3, #0
 8002fa0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fa4:	4b86      	ldr	r3, [pc, #536]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fa6:	69db      	ldr	r3, [r3, #28]
 8002fa8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d10e      	bne.n	8002fce <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fb0:	4b83      	ldr	r3, [pc, #524]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fb2:	69db      	ldr	r3, [r3, #28]
 8002fb4:	4a82      	ldr	r2, [pc, #520]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fb6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fba:	61d3      	str	r3, [r2, #28]
 8002fbc:	4b80      	ldr	r3, [pc, #512]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002fbe:	69db      	ldr	r3, [r3, #28]
 8002fc0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc8:	2301      	movs	r3, #1
 8002fca:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fce:	4b7d      	ldr	r3, [pc, #500]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d118      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fda:	4b7a      	ldr	r3, [pc, #488]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	4a79      	ldr	r2, [pc, #484]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002fe0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fe4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fe6:	f7fd fe29 	bl	8000c3c <HAL_GetTick>
 8002fea:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fec:	e008      	b.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fee:	f7fd fe25 	bl	8000c3c <HAL_GetTick>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002ff6:	1ad3      	subs	r3, r2, r3
 8002ff8:	2b64      	cmp	r3, #100	; 0x64
 8002ffa:	d901      	bls.n	8003000 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002ffc:	2303      	movs	r3, #3
 8002ffe:	e0da      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003000:	4b70      	ldr	r3, [pc, #448]	; (80031c4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d0f0      	beq.n	8002fee <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800300c:	4b6c      	ldr	r3, [pc, #432]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800300e:	6a1b      	ldr	r3, [r3, #32]
 8003010:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003014:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003016:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d07c      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x196>
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	685b      	ldr	r3, [r3, #4]
 8003020:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003024:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003026:	429a      	cmp	r2, r3
 8003028:	d075      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800302a:	4b65      	ldr	r3, [pc, #404]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800302c:	6a1b      	ldr	r3, [r3, #32]
 800302e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003032:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003034:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003038:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800303a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800303c:	fa93 f3a3 	rbit	r3, r3
 8003040:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003044:	fab3 f383 	clz	r3, r3
 8003048:	461a      	mov	r2, r3
 800304a:	4b5f      	ldr	r3, [pc, #380]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800304c:	4413      	add	r3, r2
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	461a      	mov	r2, r3
 8003052:	2301      	movs	r3, #1
 8003054:	6013      	str	r3, [r2, #0]
 8003056:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800305a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800305c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800305e:	fa93 f3a3 	rbit	r3, r3
 8003062:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	461a      	mov	r2, r3
 800306c:	4b56      	ldr	r3, [pc, #344]	; (80031c8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800306e:	4413      	add	r3, r2
 8003070:	009b      	lsls	r3, r3, #2
 8003072:	461a      	mov	r2, r3
 8003074:	2300      	movs	r3, #0
 8003076:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003078:	4a51      	ldr	r2, [pc, #324]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800307a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800307c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800307e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003080:	f003 0301 	and.w	r3, r3, #1
 8003084:	2b00      	cmp	r3, #0
 8003086:	d046      	beq.n	8003116 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003088:	f7fd fdd8 	bl	8000c3c <HAL_GetTick>
 800308c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fd fdd4 	bl	8000c3c <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e087      	b.n	80031b6 <HAL_RCCEx_PeriphCLKConfig+0x236>
 80030a6:	2302      	movs	r3, #2
 80030a8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ac:	fa93 f3a3 	rbit	r3, r3
 80030b0:	627b      	str	r3, [r7, #36]	; 0x24
 80030b2:	2302      	movs	r3, #2
 80030b4:	623b      	str	r3, [r7, #32]
 80030b6:	6a3b      	ldr	r3, [r7, #32]
 80030b8:	fa93 f3a3 	rbit	r3, r3
 80030bc:	61fb      	str	r3, [r7, #28]
  return(result);
 80030be:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030c0:	fab3 f383 	clz	r3, r3
 80030c4:	b2db      	uxtb	r3, r3
 80030c6:	095b      	lsrs	r3, r3, #5
 80030c8:	b2db      	uxtb	r3, r3
 80030ca:	f043 0302 	orr.w	r3, r3, #2
 80030ce:	b2db      	uxtb	r3, r3
 80030d0:	2b02      	cmp	r3, #2
 80030d2:	d102      	bne.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80030d4:	4b3a      	ldr	r3, [pc, #232]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030d6:	6a1b      	ldr	r3, [r3, #32]
 80030d8:	e007      	b.n	80030ea <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80030da:	2302      	movs	r3, #2
 80030dc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030de:	69bb      	ldr	r3, [r7, #24]
 80030e0:	fa93 f3a3 	rbit	r3, r3
 80030e4:	617b      	str	r3, [r7, #20]
 80030e6:	4b36      	ldr	r3, [pc, #216]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80030e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ea:	2202      	movs	r2, #2
 80030ec:	613a      	str	r2, [r7, #16]
 80030ee:	693a      	ldr	r2, [r7, #16]
 80030f0:	fa92 f2a2 	rbit	r2, r2
 80030f4:	60fa      	str	r2, [r7, #12]
  return(result);
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	fab2 f282 	clz	r2, r2
 80030fc:	b252      	sxtb	r2, r2
 80030fe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003102:	b252      	sxtb	r2, r2
 8003104:	b2d2      	uxtb	r2, r2
 8003106:	f002 021f 	and.w	r2, r2, #31
 800310a:	2101      	movs	r1, #1
 800310c:	fa01 f202 	lsl.w	r2, r1, r2
 8003110:	4013      	ands	r3, r2
 8003112:	2b00      	cmp	r3, #0
 8003114:	d0bc      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8003116:	4b2a      	ldr	r3, [pc, #168]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003118:	6a1b      	ldr	r3, [r3, #32]
 800311a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	4927      	ldr	r1, [pc, #156]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003124:	4313      	orrs	r3, r2
 8003126:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003128:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800312c:	2b01      	cmp	r3, #1
 800312e:	d105      	bne.n	800313c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003130:	4b23      	ldr	r3, [pc, #140]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003132:	69db      	ldr	r3, [r3, #28]
 8003134:	4a22      	ldr	r2, [pc, #136]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003136:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800313a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003148:	4b1d      	ldr	r3, [pc, #116]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800314a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800314c:	f023 0203 	bic.w	r2, r3, #3
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	491a      	ldr	r1, [pc, #104]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003156:	4313      	orrs	r3, r2
 8003158:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0320 	and.w	r3, r3, #32
 8003162:	2b00      	cmp	r3, #0
 8003164:	d008      	beq.n	8003178 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003166:	4b16      	ldr	r3, [pc, #88]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800316a:	f023 0210 	bic.w	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	68db      	ldr	r3, [r3, #12]
 8003172:	4913      	ldr	r1, [pc, #76]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003174:	4313      	orrs	r3, r2
 8003176:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003180:	2b00      	cmp	r3, #0
 8003182:	d008      	beq.n	8003196 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003184:	4b0e      	ldr	r3, [pc, #56]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003186:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003188:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	490b      	ldr	r1, [pc, #44]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003192:	4313      	orrs	r3, r2
 8003194:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d008      	beq.n	80031b4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031a2:	4b07      	ldr	r3, [pc, #28]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031a6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	695b      	ldr	r3, [r3, #20]
 80031ae:	4904      	ldr	r1, [pc, #16]	; (80031c0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80031b0:	4313      	orrs	r3, r2
 80031b2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3748      	adds	r7, #72	; 0x48
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40021000 	.word	0x40021000
 80031c4:	40007000 	.word	0x40007000
 80031c8:	10908100 	.word	0x10908100

080031cc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d101      	bne.n	80031de <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031da:	2301      	movs	r3, #1
 80031dc:	e043      	b.n	8003266 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80031e4:	b2db      	uxtb	r3, r3
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d106      	bne.n	80031f8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f001 f94c 	bl	8004490 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2224      	movs	r2, #36	; 0x24
 80031fc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	681a      	ldr	r2, [r3, #0]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0201 	bic.w	r2, r2, #1
 800320e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003210:	6878      	ldr	r0, [r7, #4]
 8003212:	f000 f82d 	bl	8003270 <UART_SetConfig>
 8003216:	4603      	mov	r3, r0
 8003218:	2b01      	cmp	r3, #1
 800321a:	d101      	bne.n	8003220 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e022      	b.n	8003266 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	2b00      	cmp	r3, #0
 8003226:	d002      	beq.n	800322e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003228:	6878      	ldr	r0, [r7, #4]
 800322a:	f000 f987 	bl	800353c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800323c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	689a      	ldr	r2, [r3, #8]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800324c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f042 0201 	orr.w	r2, r2, #1
 800325c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800325e:	6878      	ldr	r0, [r7, #4]
 8003260:	f000 fa0e 	bl	8003680 <UART_CheckIdleState>
 8003264:	4603      	mov	r3, r0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3708      	adds	r7, #8
 800326a:	46bd      	mov	sp, r7
 800326c:	bd80      	pop	{r7, pc}
	...

08003270 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 800327c:	2310      	movs	r3, #16
 800327e:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8003280:	2300      	movs	r3, #0
 8003282:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8003284:	2300      	movs	r3, #0
 8003286:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003288:	2300      	movs	r3, #0
 800328a:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	689a      	ldr	r2, [r3, #8]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	691b      	ldr	r3, [r3, #16]
 8003294:	431a      	orrs	r2, r3
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	431a      	orrs	r2, r3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	69db      	ldr	r3, [r3, #28]
 80032a0:	4313      	orrs	r3, r2
 80032a2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	4b9f      	ldr	r3, [pc, #636]	; (8003528 <UART_SetConfig+0x2b8>)
 80032ac:	4013      	ands	r3, r2
 80032ae:	687a      	ldr	r2, [r7, #4]
 80032b0:	6812      	ldr	r2, [r2, #0]
 80032b2:	68f9      	ldr	r1, [r7, #12]
 80032b4:	430b      	orrs	r3, r1
 80032b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	699a      	ldr	r2, [r3, #24]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	6a1b      	ldr	r3, [r3, #32]
 80032d6:	4313      	orrs	r3, r2
 80032d8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	689b      	ldr	r3, [r3, #8]
 80032e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	68fa      	ldr	r2, [r7, #12]
 80032ea:	430a      	orrs	r2, r1
 80032ec:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a8e      	ldr	r2, [pc, #568]	; (800352c <UART_SetConfig+0x2bc>)
 80032f4:	4293      	cmp	r3, r2
 80032f6:	d121      	bne.n	800333c <UART_SetConfig+0xcc>
 80032f8:	4b8d      	ldr	r3, [pc, #564]	; (8003530 <UART_SetConfig+0x2c0>)
 80032fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032fc:	f003 0303 	and.w	r3, r3, #3
 8003300:	2b03      	cmp	r3, #3
 8003302:	d817      	bhi.n	8003334 <UART_SetConfig+0xc4>
 8003304:	a201      	add	r2, pc, #4	; (adr r2, 800330c <UART_SetConfig+0x9c>)
 8003306:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800330a:	bf00      	nop
 800330c:	0800331d 	.word	0x0800331d
 8003310:	08003329 	.word	0x08003329
 8003314:	0800332f 	.word	0x0800332f
 8003318:	08003323 	.word	0x08003323
 800331c:	2300      	movs	r3, #0
 800331e:	75fb      	strb	r3, [r7, #23]
 8003320:	e01e      	b.n	8003360 <UART_SetConfig+0xf0>
 8003322:	2302      	movs	r3, #2
 8003324:	75fb      	strb	r3, [r7, #23]
 8003326:	e01b      	b.n	8003360 <UART_SetConfig+0xf0>
 8003328:	2304      	movs	r3, #4
 800332a:	75fb      	strb	r3, [r7, #23]
 800332c:	e018      	b.n	8003360 <UART_SetConfig+0xf0>
 800332e:	2308      	movs	r3, #8
 8003330:	75fb      	strb	r3, [r7, #23]
 8003332:	e015      	b.n	8003360 <UART_SetConfig+0xf0>
 8003334:	2310      	movs	r3, #16
 8003336:	75fb      	strb	r3, [r7, #23]
 8003338:	bf00      	nop
 800333a:	e011      	b.n	8003360 <UART_SetConfig+0xf0>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a7c      	ldr	r2, [pc, #496]	; (8003534 <UART_SetConfig+0x2c4>)
 8003342:	4293      	cmp	r3, r2
 8003344:	d102      	bne.n	800334c <UART_SetConfig+0xdc>
 8003346:	2300      	movs	r3, #0
 8003348:	75fb      	strb	r3, [r7, #23]
 800334a:	e009      	b.n	8003360 <UART_SetConfig+0xf0>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a79      	ldr	r2, [pc, #484]	; (8003538 <UART_SetConfig+0x2c8>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d102      	bne.n	800335c <UART_SetConfig+0xec>
 8003356:	2300      	movs	r3, #0
 8003358:	75fb      	strb	r3, [r7, #23]
 800335a:	e001      	b.n	8003360 <UART_SetConfig+0xf0>
 800335c:	2310      	movs	r3, #16
 800335e:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69db      	ldr	r3, [r3, #28]
 8003364:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003368:	d16f      	bne.n	800344a <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 800336a:	7dfb      	ldrb	r3, [r7, #23]
 800336c:	2b08      	cmp	r3, #8
 800336e:	d857      	bhi.n	8003420 <UART_SetConfig+0x1b0>
 8003370:	a201      	add	r2, pc, #4	; (adr r2, 8003378 <UART_SetConfig+0x108>)
 8003372:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003376:	bf00      	nop
 8003378:	0800339d 	.word	0x0800339d
 800337c:	080033b9 	.word	0x080033b9
 8003380:	080033d5 	.word	0x080033d5
 8003384:	08003421 	.word	0x08003421
 8003388:	080033ef 	.word	0x080033ef
 800338c:	08003421 	.word	0x08003421
 8003390:	08003421 	.word	0x08003421
 8003394:	08003421 	.word	0x08003421
 8003398:	0800340b 	.word	0x0800340b
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800339c:	f7ff fdac 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 80033a0:	4603      	mov	r3, r0
 80033a2:	005a      	lsls	r2, r3, #1
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	085b      	lsrs	r3, r3, #1
 80033aa:	441a      	add	r2, r3
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	685b      	ldr	r3, [r3, #4]
 80033b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80033b4:	82bb      	strh	r3, [r7, #20]
        break;
 80033b6:	e036      	b.n	8003426 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80033b8:	f7ff fdc0 	bl	8002f3c <HAL_RCC_GetPCLK2Freq>
 80033bc:	4603      	mov	r3, r0
 80033be:	005a      	lsls	r2, r3, #1
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	085b      	lsrs	r3, r3, #1
 80033c6:	441a      	add	r2, r3
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80033d0:	82bb      	strh	r3, [r7, #20]
        break;
 80033d2:	e028      	b.n	8003426 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	085b      	lsrs	r3, r3, #1
 80033da:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80033de:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 80033e2:	687a      	ldr	r2, [r7, #4]
 80033e4:	6852      	ldr	r2, [r2, #4]
 80033e6:	fbb3 f3f2 	udiv	r3, r3, r2
 80033ea:	82bb      	strh	r3, [r7, #20]
        break;
 80033ec:	e01b      	b.n	8003426 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80033ee:	f7ff fd0d 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 80033f2:	4603      	mov	r3, r0
 80033f4:	005a      	lsls	r2, r3, #1
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	085b      	lsrs	r3, r3, #1
 80033fc:	441a      	add	r2, r3
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	fbb2 f3f3 	udiv	r3, r2, r3
 8003406:	82bb      	strh	r3, [r7, #20]
        break;
 8003408:	e00d      	b.n	8003426 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	085b      	lsrs	r3, r3, #1
 8003410:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	fbb2 f3f3 	udiv	r3, r2, r3
 800341c:	82bb      	strh	r3, [r7, #20]
        break;
 800341e:	e002      	b.n	8003426 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	74fb      	strb	r3, [r7, #19]
        break;
 8003424:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003426:	8abb      	ldrh	r3, [r7, #20]
 8003428:	f023 030f 	bic.w	r3, r3, #15
 800342c:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800342e:	8abb      	ldrh	r3, [r7, #20]
 8003430:	105b      	asrs	r3, r3, #1
 8003432:	b29b      	uxth	r3, r3
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	b29a      	uxth	r2, r3
 800343a:	897b      	ldrh	r3, [r7, #10]
 800343c:	4313      	orrs	r3, r2
 800343e:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	897a      	ldrh	r2, [r7, #10]
 8003446:	60da      	str	r2, [r3, #12]
 8003448:	e069      	b.n	800351e <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 800344a:	7dfb      	ldrb	r3, [r7, #23]
 800344c:	2b08      	cmp	r3, #8
 800344e:	d863      	bhi.n	8003518 <UART_SetConfig+0x2a8>
 8003450:	a201      	add	r2, pc, #4	; (adr r2, 8003458 <UART_SetConfig+0x1e8>)
 8003452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003456:	bf00      	nop
 8003458:	0800347d 	.word	0x0800347d
 800345c:	0800349d 	.word	0x0800349d
 8003460:	080034bd 	.word	0x080034bd
 8003464:	08003519 	.word	0x08003519
 8003468:	080034dd 	.word	0x080034dd
 800346c:	08003519 	.word	0x08003519
 8003470:	08003519 	.word	0x08003519
 8003474:	08003519 	.word	0x08003519
 8003478:	080034fd 	.word	0x080034fd
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800347c:	f7ff fd3c 	bl	8002ef8 <HAL_RCC_GetPCLK1Freq>
 8003480:	4602      	mov	r2, r0
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	085b      	lsrs	r3, r3, #1
 8003488:	441a      	add	r2, r3
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685b      	ldr	r3, [r3, #4]
 800348e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003492:	b29a      	uxth	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	60da      	str	r2, [r3, #12]
        break;
 800349a:	e040      	b.n	800351e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800349c:	f7ff fd4e 	bl	8002f3c <HAL_RCC_GetPCLK2Freq>
 80034a0:	4602      	mov	r2, r0
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	085b      	lsrs	r3, r3, #1
 80034a8:	441a      	add	r2, r3
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	685b      	ldr	r3, [r3, #4]
 80034ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80034b2:	b29a      	uxth	r2, r3
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	60da      	str	r2, [r3, #12]
        break;
 80034ba:	e030      	b.n	800351e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	685b      	ldr	r3, [r3, #4]
 80034c0:	085b      	lsrs	r3, r3, #1
 80034c2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80034c6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	6852      	ldr	r2, [r2, #4]
 80034ce:	fbb3 f3f2 	udiv	r3, r3, r2
 80034d2:	b29a      	uxth	r2, r3
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	60da      	str	r2, [r3, #12]
        break;
 80034da:	e020      	b.n	800351e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80034dc:	f7ff fc96 	bl	8002e0c <HAL_RCC_GetSysClockFreq>
 80034e0:	4602      	mov	r2, r0
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	685b      	ldr	r3, [r3, #4]
 80034e6:	085b      	lsrs	r3, r3, #1
 80034e8:	441a      	add	r2, r3
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	685b      	ldr	r3, [r3, #4]
 80034ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	60da      	str	r2, [r3, #12]
        break;
 80034fa:	e010      	b.n	800351e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	085b      	lsrs	r3, r3, #1
 8003502:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	685b      	ldr	r3, [r3, #4]
 800350a:	fbb2 f3f3 	udiv	r3, r2, r3
 800350e:	b29a      	uxth	r2, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	60da      	str	r2, [r3, #12]
        break;
 8003516:	e002      	b.n	800351e <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	74fb      	strb	r3, [r7, #19]
        break;
 800351c:	bf00      	nop
    }
  }

  return ret;
 800351e:	7cfb      	ldrb	r3, [r7, #19]

}
 8003520:	4618      	mov	r0, r3
 8003522:	3718      	adds	r7, #24
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	efff69f3 	.word	0xefff69f3
 800352c:	40013800 	.word	0x40013800
 8003530:	40021000 	.word	0x40021000
 8003534:	40004400 	.word	0x40004400
 8003538:	40004800 	.word	0x40004800

0800353c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800353c:	b480      	push	{r7}
 800353e:	b083      	sub	sp, #12
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003548:	f003 0301 	and.w	r3, r3, #1
 800354c:	2b00      	cmp	r3, #0
 800354e:	d00a      	beq.n	8003566 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d00a      	beq.n	8003588 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	430a      	orrs	r2, r1
 8003586:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800358c:	f003 0304 	and.w	r3, r3, #4
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00a      	beq.n	80035aa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	430a      	orrs	r2, r1
 80035a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00a      	beq.n	80035cc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	685b      	ldr	r3, [r3, #4]
 80035bc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	430a      	orrs	r2, r1
 80035ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035d0:	f003 0310 	and.w	r3, r3, #16
 80035d4:	2b00      	cmp	r3, #0
 80035d6:	d00a      	beq.n	80035ee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	430a      	orrs	r2, r1
 80035ec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	f003 0320 	and.w	r3, r3, #32
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00a      	beq.n	8003610 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	430a      	orrs	r2, r1
 800360e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003614:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003618:	2b00      	cmp	r3, #0
 800361a:	d01a      	beq.n	8003652 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	430a      	orrs	r2, r1
 8003630:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003636:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800363a:	d10a      	bne.n	8003652 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	685b      	ldr	r3, [r3, #4]
 8003642:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	430a      	orrs	r2, r1
 8003650:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003656:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800365a:	2b00      	cmp	r3, #0
 800365c:	d00a      	beq.n	8003674 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	430a      	orrs	r2, r1
 8003672:	605a      	str	r2, [r3, #4]
  }
}
 8003674:	bf00      	nop
 8003676:	370c      	adds	r7, #12
 8003678:	46bd      	mov	sp, r7
 800367a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367e:	4770      	bx	lr

08003680 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af02      	add	r7, sp, #8
 8003686:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003692:	f7fd fad3 	bl	8000c3c <HAL_GetTick>
 8003696:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f003 0308 	and.w	r3, r3, #8
 80036a2:	2b08      	cmp	r3, #8
 80036a4:	d10e      	bne.n	80036c4 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036aa:	9300      	str	r3, [sp, #0]
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	2200      	movs	r2, #0
 80036b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80036b4:	6878      	ldr	r0, [r7, #4]
 80036b6:	f000 f82c 	bl	8003712 <UART_WaitOnFlagUntilTimeout>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d001      	beq.n	80036c4 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e022      	b.n	800370a <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f003 0304 	and.w	r3, r3, #4
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d10e      	bne.n	80036f0 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80036d2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80036d6:	9300      	str	r3, [sp, #0]
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	2200      	movs	r2, #0
 80036dc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80036e0:	6878      	ldr	r0, [r7, #4]
 80036e2:	f000 f816 	bl	8003712 <UART_WaitOnFlagUntilTimeout>
 80036e6:	4603      	mov	r3, r0
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d001      	beq.n	80036f0 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e00c      	b.n	800370a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2220      	movs	r2, #32
 80036f4:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2220      	movs	r2, #32
 80036fc:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2200      	movs	r2, #0
 8003704:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003708:	2300      	movs	r3, #0
}
 800370a:	4618      	mov	r0, r3
 800370c:	3710      	adds	r7, #16
 800370e:	46bd      	mov	sp, r7
 8003710:	bd80      	pop	{r7, pc}

08003712 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003712:	b580      	push	{r7, lr}
 8003714:	b084      	sub	sp, #16
 8003716:	af00      	add	r7, sp, #0
 8003718:	60f8      	str	r0, [r7, #12]
 800371a:	60b9      	str	r1, [r7, #8]
 800371c:	603b      	str	r3, [r7, #0]
 800371e:	4613      	mov	r3, r2
 8003720:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003722:	e02c      	b.n	800377e <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003724:	69bb      	ldr	r3, [r7, #24]
 8003726:	f1b3 3fff 	cmp.w	r3, #4294967295
 800372a:	d028      	beq.n	800377e <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 800372c:	69bb      	ldr	r3, [r7, #24]
 800372e:	2b00      	cmp	r3, #0
 8003730:	d007      	beq.n	8003742 <UART_WaitOnFlagUntilTimeout+0x30>
 8003732:	f7fd fa83 	bl	8000c3c <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	69ba      	ldr	r2, [r7, #24]
 800373e:	429a      	cmp	r2, r3
 8003740:	d21d      	bcs.n	800377e <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	681a      	ldr	r2, [r3, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003750:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f022 0201 	bic.w	r2, r2, #1
 8003760:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2220      	movs	r2, #32
 8003766:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2220      	movs	r2, #32
 800376e:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	2200      	movs	r2, #0
 8003776:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 800377a:	2303      	movs	r3, #3
 800377c:	e00f      	b.n	800379e <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	69da      	ldr	r2, [r3, #28]
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	4013      	ands	r3, r2
 8003788:	68ba      	ldr	r2, [r7, #8]
 800378a:	429a      	cmp	r2, r3
 800378c:	bf0c      	ite	eq
 800378e:	2301      	moveq	r3, #1
 8003790:	2300      	movne	r3, #0
 8003792:	b2db      	uxtb	r3, r3
 8003794:	461a      	mov	r2, r3
 8003796:	79fb      	ldrb	r3, [r7, #7]
 8003798:	429a      	cmp	r2, r3
 800379a:	d0c3      	beq.n	8003724 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800379c:	2300      	movs	r3, #0
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3710      	adds	r7, #16
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}

080037a6 <ads_new>:
 * @brief  Creates new ads_t variable corresponding to a ads module
 * @param  *hi2c: I2C peripheral from the mcu
 * @param  addr: I2C address used by the module
 * @retval ads_t variable corresponding to the ads module
 */
ads_t* ads_new(I2C_HandleTypeDef *hi2c, uint8_t addr){
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	460b      	mov	r3, r1
 80037b0:	70fb      	strb	r3, [r7, #3]
	ads_t* ads = malloc(sizeof(*ads));
 80037b2:	200c      	movs	r0, #12
 80037b4:	f000 ffa8 	bl	8004708 <malloc>
 80037b8:	4603      	mov	r3, r0
 80037ba:	60fb      	str	r3, [r7, #12]
	ads_init(ads, hi2c, addr);
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	461a      	mov	r2, r3
 80037c0:	6879      	ldr	r1, [r7, #4]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f805 	bl	80037d2 <ads_init>
	return ads;
 80037c8:	68fb      	ldr	r3, [r7, #12]
}
 80037ca:	4618      	mov	r0, r3
 80037cc:	3710      	adds	r7, #16
 80037ce:	46bd      	mov	sp, r7
 80037d0:	bd80      	pop	{r7, pc}

080037d2 <ads_init>:
 * @param  *ads: ads variable corresponding to the module targeted
 * @param  *hi2c: I2C peripheral from the mcu
 * @param  addr: I2C address used by the module
 * @retval None
 */
void ads_init(ads_t *ads, I2C_HandleTypeDef *hi2c, uint8_t addr){
 80037d2:	b480      	push	{r7}
 80037d4:	b085      	sub	sp, #20
 80037d6:	af00      	add	r7, sp, #0
 80037d8:	60f8      	str	r0, [r7, #12]
 80037da:	60b9      	str	r1, [r7, #8]
 80037dc:	4613      	mov	r3, r2
 80037de:	71fb      	strb	r3, [r7, #7]
	ads->hi2c = hi2c;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	68ba      	ldr	r2, [r7, #8]
 80037e4:	605a      	str	r2, [r3, #4]
	ads->addr = addr;
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	79fa      	ldrb	r2, [r7, #7]
 80037ea:	701a      	strb	r2, [r3, #0]
}
 80037ec:	bf00      	nop
 80037ee:	3714      	adds	r7, #20
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <ads_write>:
 * @brief  Configures the ads module register before reading (mux and gain)
 * 		   sending 3 bytes using I2C
 * @param  *ads: variable corresponding to the module targeted
 * @retval None
 */
void ads_write(ads_t *ads){
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b086      	sub	sp, #24
 80037fc:	af02      	add	r7, sp, #8
 80037fe:	6078      	str	r0, [r7, #4]
	uint8_t adsWrite[3];
	adsWrite[0] = 0x01;
 8003800:	2301      	movs	r3, #1
 8003802:	733b      	strb	r3, [r7, #12]
	adsWrite[1] = 0x80 + (ads->mux<<4) + (ads->gain<<1);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	7a5b      	ldrb	r3, [r3, #9]
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	b2da      	uxtb	r2, r3
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	7a1b      	ldrb	r3, [r3, #8]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	b2db      	uxtb	r3, r3
 8003814:	4413      	add	r3, r2
 8003816:	b2db      	uxtb	r3, r3
 8003818:	3b80      	subs	r3, #128	; 0x80
 800381a:	b2db      	uxtb	r3, r3
 800381c:	737b      	strb	r3, [r7, #13]
	adsWrite[2] = 0x83;
 800381e:	2383      	movs	r3, #131	; 0x83
 8003820:	73bb      	strb	r3, [r7, #14]
	HAL_I2C_Master_Transmit(ads->hi2c, ads->addr<<1, adsWrite, 3, 100);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6858      	ldr	r0, [r3, #4]
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	781b      	ldrb	r3, [r3, #0]
 800382a:	b29b      	uxth	r3, r3
 800382c:	005b      	lsls	r3, r3, #1
 800382e:	b299      	uxth	r1, r3
 8003830:	f107 020c 	add.w	r2, r7, #12
 8003834:	2364      	movs	r3, #100	; 0x64
 8003836:	9300      	str	r3, [sp, #0]
 8003838:	2303      	movs	r3, #3
 800383a:	f7fd fd31 	bl	80012a0 <HAL_I2C_Master_Transmit>
}
 800383e:	bf00      	nop
 8003840:	3710      	adds	r7, #16
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
	...

08003848 <ads_voltageConv>:
 * @brief  Auxiliary function. Converts a raw ADC reading to a voltage reading in mV
 * @param  reading: raw ADC reading
 * @param  gain: gain of the internal amplifier chosen
 * @retval Voltage reading in mV
 */
uint16_t ads_voltageConv(uint16_t reading, uint8_t gain){
 8003848:	b480      	push	{r7}
 800384a:	b085      	sub	sp, #20
 800384c:	af00      	add	r7, sp, #0
 800384e:	4603      	mov	r3, r0
 8003850:	460a      	mov	r2, r1
 8003852:	80fb      	strh	r3, [r7, #6]
 8003854:	4613      	mov	r3, r2
 8003856:	717b      	strb	r3, [r7, #5]
	float factor;
	switch (gain){
 8003858:	797b      	ldrb	r3, [r7, #5]
 800385a:	2b04      	cmp	r3, #4
 800385c:	d81f      	bhi.n	800389e <ads_voltageConv+0x56>
 800385e:	a201      	add	r2, pc, #4	; (adr r2, 8003864 <ads_voltageConv+0x1c>)
 8003860:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003864:	08003879 	.word	0x08003879
 8003868:	0800387f 	.word	0x0800387f
 800386c:	08003887 	.word	0x08003887
 8003870:	0800388f 	.word	0x0800388f
 8003874:	08003897 	.word	0x08003897
		case 0: factor = 6144; break;
 8003878:	4b19      	ldr	r3, [pc, #100]	; (80038e0 <ads_voltageConv+0x98>)
 800387a:	60fb      	str	r3, [r7, #12]
 800387c:	e013      	b.n	80038a6 <ads_voltageConv+0x5e>
		case 1: factor = 4096; break;
 800387e:	f04f 438b 	mov.w	r3, #1166016512	; 0x45800000
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	e00f      	b.n	80038a6 <ads_voltageConv+0x5e>
		case 2: factor = 2048; break;
 8003886:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 800388a:	60fb      	str	r3, [r7, #12]
 800388c:	e00b      	b.n	80038a6 <ads_voltageConv+0x5e>
		case 3: factor = 1024; break;
 800388e:	f04f 4389 	mov.w	r3, #1149239296	; 0x44800000
 8003892:	60fb      	str	r3, [r7, #12]
 8003894:	e007      	b.n	80038a6 <ads_voltageConv+0x5e>
		case 4: factor = 512; break;
 8003896:	f04f 4388 	mov.w	r3, #1140850688	; 0x44000000
 800389a:	60fb      	str	r3, [r7, #12]
 800389c:	e003      	b.n	80038a6 <ads_voltageConv+0x5e>
		default: factor = 256; break;
 800389e:	f04f 4387 	mov.w	r3, #1132462080	; 0x43800000
 80038a2:	60fb      	str	r3, [r7, #12]
 80038a4:	bf00      	nop
	}
	factor = factor*reading/32768;
 80038a6:	88fb      	ldrh	r3, [r7, #6]
 80038a8:	ee07 3a90 	vmov	s15, r3
 80038ac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038b0:	edd7 7a03 	vldr	s15, [r7, #12]
 80038b4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80038b8:	eddf 6a0a 	vldr	s13, [pc, #40]	; 80038e4 <ads_voltageConv+0x9c>
 80038bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80038c0:	edc7 7a03 	vstr	s15, [r7, #12]
	return (uint16_t) factor;
 80038c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80038c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038cc:	ee17 3a90 	vmov	r3, s15
 80038d0:	b29b      	uxth	r3, r3
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038dc:	4770      	bx	lr
 80038de:	bf00      	nop
 80038e0:	45c00000 	.word	0x45c00000
 80038e4:	47000000 	.word	0x47000000

080038e8 <ads_read>:
 * 			0: +-6144 mV	1: +-4096 mV
 * 			2: +-2048 mV	3: +-1024 mV
 * 			4: +-512 mV		5, 6, 7: +-256 mV
 * @retval Voltage read by the module (mV)
 */
uint16_t ads_read(ads_t *ads, uint8_t mux, uint8_t gain){
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b086      	sub	sp, #24
 80038ec:	af02      	add	r7, sp, #8
 80038ee:	6078      	str	r0, [r7, #4]
 80038f0:	460b      	mov	r3, r1
 80038f2:	70fb      	strb	r3, [r7, #3]
 80038f4:	4613      	mov	r3, r2
 80038f6:	70bb      	strb	r3, [r7, #2]
	if ((ads->mux != mux) | (ads->gain != gain)){
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	7a5b      	ldrb	r3, [r3, #9]
 80038fc:	78fa      	ldrb	r2, [r7, #3]
 80038fe:	429a      	cmp	r2, r3
 8003900:	bf14      	ite	ne
 8003902:	2301      	movne	r3, #1
 8003904:	2300      	moveq	r3, #0
 8003906:	b2da      	uxtb	r2, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	7a1b      	ldrb	r3, [r3, #8]
 800390c:	78b9      	ldrb	r1, [r7, #2]
 800390e:	4299      	cmp	r1, r3
 8003910:	bf14      	ite	ne
 8003912:	2301      	movne	r3, #1
 8003914:	2300      	moveq	r3, #0
 8003916:	b2db      	uxtb	r3, r3
 8003918:	4313      	orrs	r3, r2
 800391a:	b2db      	uxtb	r3, r3
 800391c:	2b00      	cmp	r3, #0
 800391e:	d008      	beq.n	8003932 <ads_read+0x4a>
		ads->mux = mux;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	78fa      	ldrb	r2, [r7, #3]
 8003924:	725a      	strb	r2, [r3, #9]
		ads->gain = gain;
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	78ba      	ldrb	r2, [r7, #2]
 800392a:	721a      	strb	r2, [r3, #8]
		ads_write(ads);
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	f7ff ff63 	bl	80037f8 <ads_write>
	}

	uint8_t adsRead[2];
	HAL_I2C_Master_Transmit(ads->hi2c, ads->addr<<1, 0x00, 1, 100);
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6858      	ldr	r0, [r3, #4]
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	781b      	ldrb	r3, [r3, #0]
 800393a:	b29b      	uxth	r3, r3
 800393c:	005b      	lsls	r3, r3, #1
 800393e:	b299      	uxth	r1, r3
 8003940:	2364      	movs	r3, #100	; 0x64
 8003942:	9300      	str	r3, [sp, #0]
 8003944:	2301      	movs	r3, #1
 8003946:	2200      	movs	r2, #0
 8003948:	f7fd fcaa 	bl	80012a0 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(ads->hi2c, ads->addr<<1, adsRead, 2, 100);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6858      	ldr	r0, [r3, #4]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	781b      	ldrb	r3, [r3, #0]
 8003954:	b29b      	uxth	r3, r3
 8003956:	005b      	lsls	r3, r3, #1
 8003958:	b299      	uxth	r1, r3
 800395a:	f107 020c 	add.w	r2, r7, #12
 800395e:	2364      	movs	r3, #100	; 0x64
 8003960:	9300      	str	r3, [sp, #0]
 8003962:	2302      	movs	r3, #2
 8003964:	f7fd fd9c 	bl	80014a0 <HAL_I2C_Master_Receive>
	int16_t reading = (adsRead[0] << 8 | adsRead[1]);
 8003968:	7b3b      	ldrb	r3, [r7, #12]
 800396a:	021b      	lsls	r3, r3, #8
 800396c:	b21a      	sxth	r2, r3
 800396e:	7b7b      	ldrb	r3, [r7, #13]
 8003970:	b21b      	sxth	r3, r3
 8003972:	4313      	orrs	r3, r2
 8003974:	81fb      	strh	r3, [r7, #14]
	if (reading < 0){
 8003976:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800397a:	2b00      	cmp	r3, #0
 800397c:	da01      	bge.n	8003982 <ads_read+0x9a>
	  reading = 0;
 800397e:	2300      	movs	r3, #0
 8003980:	81fb      	strh	r3, [r7, #14]
	}
	return ads_voltageConv(reading, gain);
 8003982:	89fb      	ldrh	r3, [r7, #14]
 8003984:	78ba      	ldrb	r2, [r7, #2]
 8003986:	4611      	mov	r1, r2
 8003988:	4618      	mov	r0, r3
 800398a:	f7ff ff5d 	bl	8003848 <ads_voltageConv>
 800398e:	4603      	mov	r3, r0
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800399e:	f7fd f8f3 	bl	8000b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039a2:	f000 f827 	bl	80039f4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039a6:	f000 f8e5 	bl	8003b74 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80039aa:	f000 f8b3 	bl	8003b14 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 80039ae:	f000 f873 	bl	8003a98 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  uint16_t reading;
  ads_t* ads_1 = ads_new(&hi2c1, 0x48);
 80039b2:	2148      	movs	r1, #72	; 0x48
 80039b4:	480e      	ldr	r0, [pc, #56]	; (80039f0 <main+0x58>)
 80039b6:	f7ff fef6 	bl	80037a6 <ads_new>
 80039ba:	60f8      	str	r0, [r7, #12]
  ssd1306_t* ssd1306_1 = ssd1306_new(&hi2c1, 0x79);
 80039bc:	2179      	movs	r1, #121	; 0x79
 80039be:	480c      	ldr	r0, [pc, #48]	; (80039f0 <main+0x58>)
 80039c0:	f000 f929 	bl	8003c16 <ssd1306_new>
 80039c4:	60b8      	str	r0, [r7, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  reading = ads_read(ads_1, 4, 0);
 80039c6:	2200      	movs	r2, #0
 80039c8:	2104      	movs	r1, #4
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f7ff ff8c 	bl	80038e8 <ads_read>
 80039d0:	4603      	mov	r3, r0
 80039d2:	80fb      	strh	r3, [r7, #6]
	  SSD1306_Putint(ssd1306_1, reading, 1);
 80039d4:	88fb      	ldrh	r3, [r7, #6]
 80039d6:	2201      	movs	r2, #1
 80039d8:	4619      	mov	r1, r3
 80039da:	68b8      	ldr	r0, [r7, #8]
 80039dc:	f000 fb44 	bl	8004068 <SSD1306_Putint>
	  SSD1306_UpdateScreen(ssd1306_1);
 80039e0:	68b8      	ldr	r0, [r7, #8]
 80039e2:	f000 f9f4 	bl	8003dce <SSD1306_UpdateScreen>
	  HAL_Delay(100);
 80039e6:	2064      	movs	r0, #100	; 0x64
 80039e8:	f7fd f934 	bl	8000c54 <HAL_Delay>
	  reading = ads_read(ads_1, 4, 0);
 80039ec:	e7eb      	b.n	80039c6 <main+0x2e>
 80039ee:	bf00      	nop
 80039f0:	200000b0 	.word	0x200000b0

080039f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b096      	sub	sp, #88	; 0x58
 80039f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039fa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80039fe:	2228      	movs	r2, #40	; 0x28
 8003a00:	2100      	movs	r1, #0
 8003a02:	4618      	mov	r0, r3
 8003a04:	f000 fe88 	bl	8004718 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a08:	f107 031c 	add.w	r3, r7, #28
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	601a      	str	r2, [r3, #0]
 8003a10:	605a      	str	r2, [r3, #4]
 8003a12:	609a      	str	r2, [r3, #8]
 8003a14:	60da      	str	r2, [r3, #12]
 8003a16:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a18:	1d3b      	adds	r3, r7, #4
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	601a      	str	r2, [r3, #0]
 8003a1e:	605a      	str	r2, [r3, #4]
 8003a20:	609a      	str	r2, [r3, #8]
 8003a22:	60da      	str	r2, [r3, #12]
 8003a24:	611a      	str	r2, [r3, #16]
 8003a26:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a28:	2302      	movs	r3, #2
 8003a2a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a30:	2310      	movs	r3, #16
 8003a32:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a34:	2300      	movs	r3, #0
 8003a36:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a38:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003a3c:	4618      	mov	r0, r3
 8003a3e:	f7fe f97b 	bl	8001d38 <HAL_RCC_OscConfig>
 8003a42:	4603      	mov	r3, r0
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d001      	beq.n	8003a4c <SystemClock_Config+0x58>
  {
    Error_Handler();
 8003a48:	f000 f8de 	bl	8003c08 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a4c:	230f      	movs	r3, #15
 8003a4e:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003a50:	2300      	movs	r3, #0
 8003a52:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a54:	2300      	movs	r3, #0
 8003a56:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a58:	2300      	movs	r3, #0
 8003a5a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003a60:	f107 031c 	add.w	r3, r7, #28
 8003a64:	2100      	movs	r1, #0
 8003a66:	4618      	mov	r0, r3
 8003a68:	f7ff f854 	bl	8002b14 <HAL_RCC_ClockConfig>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003a72:	f000 f8c9 	bl	8003c08 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003a76:	2320      	movs	r3, #32
 8003a78:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a7e:	1d3b      	adds	r3, r7, #4
 8003a80:	4618      	mov	r0, r3
 8003a82:	f7ff fa7d 	bl	8002f80 <HAL_RCCEx_PeriphCLKConfig>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8003a8c:	f000 f8bc 	bl	8003c08 <Error_Handler>
  }
}
 8003a90:	bf00      	nop
 8003a92:	3758      	adds	r7, #88	; 0x58
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}

08003a98 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003a9c:	4b1b      	ldr	r3, [pc, #108]	; (8003b0c <MX_I2C1_Init+0x74>)
 8003a9e:	4a1c      	ldr	r2, [pc, #112]	; (8003b10 <MX_I2C1_Init+0x78>)
 8003aa0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <MX_I2C1_Init+0x74>)
 8003aa4:	f240 220b 	movw	r2, #523	; 0x20b
 8003aa8:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003aaa:	4b18      	ldr	r3, [pc, #96]	; (8003b0c <MX_I2C1_Init+0x74>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003ab0:	4b16      	ldr	r3, [pc, #88]	; (8003b0c <MX_I2C1_Init+0x74>)
 8003ab2:	2201      	movs	r2, #1
 8003ab4:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003ab6:	4b15      	ldr	r3, [pc, #84]	; (8003b0c <MX_I2C1_Init+0x74>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003abc:	4b13      	ldr	r3, [pc, #76]	; (8003b0c <MX_I2C1_Init+0x74>)
 8003abe:	2200      	movs	r2, #0
 8003ac0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003ac2:	4b12      	ldr	r3, [pc, #72]	; (8003b0c <MX_I2C1_Init+0x74>)
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003ac8:	4b10      	ldr	r3, [pc, #64]	; (8003b0c <MX_I2C1_Init+0x74>)
 8003aca:	2200      	movs	r2, #0
 8003acc:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003ace:	4b0f      	ldr	r3, [pc, #60]	; (8003b0c <MX_I2C1_Init+0x74>)
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003ad4:	480d      	ldr	r0, [pc, #52]	; (8003b0c <MX_I2C1_Init+0x74>)
 8003ad6:	f7fd fb53 	bl	8001180 <HAL_I2C_Init>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8003ae0:	f000 f892 	bl	8003c08 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003ae4:	2100      	movs	r1, #0
 8003ae6:	4809      	ldr	r0, [pc, #36]	; (8003b0c <MX_I2C1_Init+0x74>)
 8003ae8:	f7fe f88c 	bl	8001c04 <HAL_I2CEx_ConfigAnalogFilter>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8003af2:	f000 f889 	bl	8003c08 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003af6:	2100      	movs	r1, #0
 8003af8:	4804      	ldr	r0, [pc, #16]	; (8003b0c <MX_I2C1_Init+0x74>)
 8003afa:	f7fe f8ce 	bl	8001c9a <HAL_I2CEx_ConfigDigitalFilter>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8003b04:	f000 f880 	bl	8003c08 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003b08:	bf00      	nop
 8003b0a:	bd80      	pop	{r7, pc}
 8003b0c:	200000b0 	.word	0x200000b0
 8003b10:	40005400 	.word	0x40005400

08003b14 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b18:	4b14      	ldr	r3, [pc, #80]	; (8003b6c <MX_USART2_UART_Init+0x58>)
 8003b1a:	4a15      	ldr	r2, [pc, #84]	; (8003b70 <MX_USART2_UART_Init+0x5c>)
 8003b1c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8003b1e:	4b13      	ldr	r3, [pc, #76]	; (8003b6c <MX_USART2_UART_Init+0x58>)
 8003b20:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003b24:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b26:	4b11      	ldr	r3, [pc, #68]	; (8003b6c <MX_USART2_UART_Init+0x58>)
 8003b28:	2200      	movs	r2, #0
 8003b2a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b2c:	4b0f      	ldr	r3, [pc, #60]	; (8003b6c <MX_USART2_UART_Init+0x58>)
 8003b2e:	2200      	movs	r2, #0
 8003b30:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b32:	4b0e      	ldr	r3, [pc, #56]	; (8003b6c <MX_USART2_UART_Init+0x58>)
 8003b34:	2200      	movs	r2, #0
 8003b36:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b38:	4b0c      	ldr	r3, [pc, #48]	; (8003b6c <MX_USART2_UART_Init+0x58>)
 8003b3a:	220c      	movs	r2, #12
 8003b3c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b3e:	4b0b      	ldr	r3, [pc, #44]	; (8003b6c <MX_USART2_UART_Init+0x58>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <MX_USART2_UART_Init+0x58>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b4a:	4b08      	ldr	r3, [pc, #32]	; (8003b6c <MX_USART2_UART_Init+0x58>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b50:	4b06      	ldr	r3, [pc, #24]	; (8003b6c <MX_USART2_UART_Init+0x58>)
 8003b52:	2200      	movs	r2, #0
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b56:	4805      	ldr	r0, [pc, #20]	; (8003b6c <MX_USART2_UART_Init+0x58>)
 8003b58:	f7ff fb38 	bl	80031cc <HAL_UART_Init>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d001      	beq.n	8003b66 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003b62:	f000 f851 	bl	8003c08 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b66:	bf00      	nop
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	200000fc 	.word	0x200000fc
 8003b70:	40004400 	.word	0x40004400

08003b74 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b088      	sub	sp, #32
 8003b78:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b7a:	f107 030c 	add.w	r3, r7, #12
 8003b7e:	2200      	movs	r2, #0
 8003b80:	601a      	str	r2, [r3, #0]
 8003b82:	605a      	str	r2, [r3, #4]
 8003b84:	609a      	str	r2, [r3, #8]
 8003b86:	60da      	str	r2, [r3, #12]
 8003b88:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003b8a:	4b1d      	ldr	r3, [pc, #116]	; (8003c00 <MX_GPIO_Init+0x8c>)
 8003b8c:	695b      	ldr	r3, [r3, #20]
 8003b8e:	4a1c      	ldr	r2, [pc, #112]	; (8003c00 <MX_GPIO_Init+0x8c>)
 8003b90:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b94:	6153      	str	r3, [r2, #20]
 8003b96:	4b1a      	ldr	r3, [pc, #104]	; (8003c00 <MX_GPIO_Init+0x8c>)
 8003b98:	695b      	ldr	r3, [r3, #20]
 8003b9a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ba2:	4b17      	ldr	r3, [pc, #92]	; (8003c00 <MX_GPIO_Init+0x8c>)
 8003ba4:	695b      	ldr	r3, [r3, #20]
 8003ba6:	4a16      	ldr	r2, [pc, #88]	; (8003c00 <MX_GPIO_Init+0x8c>)
 8003ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003bac:	6153      	str	r3, [r2, #20]
 8003bae:	4b14      	ldr	r3, [pc, #80]	; (8003c00 <MX_GPIO_Init+0x8c>)
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bb6:	607b      	str	r3, [r7, #4]
 8003bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bba:	4b11      	ldr	r3, [pc, #68]	; (8003c00 <MX_GPIO_Init+0x8c>)
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	4a10      	ldr	r2, [pc, #64]	; (8003c00 <MX_GPIO_Init+0x8c>)
 8003bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc4:	6153      	str	r3, [r2, #20]
 8003bc6:	4b0e      	ldr	r3, [pc, #56]	; (8003c00 <MX_GPIO_Init+0x8c>)
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003bce:	603b      	str	r3, [r7, #0]
 8003bd0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8003bd2:	2200      	movs	r2, #0
 8003bd4:	2108      	movs	r1, #8
 8003bd6:	480b      	ldr	r0, [pc, #44]	; (8003c04 <MX_GPIO_Init+0x90>)
 8003bd8:	f7fd faba 	bl	8001150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8003bdc:	2308      	movs	r3, #8
 8003bde:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003be0:	2301      	movs	r3, #1
 8003be2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be4:	2300      	movs	r3, #0
 8003be6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003be8:	2300      	movs	r3, #0
 8003bea:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8003bec:	f107 030c 	add.w	r3, r7, #12
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	4804      	ldr	r0, [pc, #16]	; (8003c04 <MX_GPIO_Init+0x90>)
 8003bf4:	f7fd f936 	bl	8000e64 <HAL_GPIO_Init>

}
 8003bf8:	bf00      	nop
 8003bfa:	3720      	adds	r7, #32
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}
 8003c00:	40021000 	.word	0x40021000
 8003c04:	48000400 	.word	0x48000400

08003c08 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003c08:	b480      	push	{r7}
 8003c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003c0c:	bf00      	nop
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <ssd1306_new>:
#include "math.h"

/* SSD1306 data buffer */
//static uint8_t SSD1306_Buffer[SSD1306_WIDTH * SSD1306_HEIGHT / 8];

ssd1306_t* ssd1306_new(I2C_HandleTypeDef *hi2c, uint8_t addr){
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b084      	sub	sp, #16
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	70fb      	strb	r3, [r7, #3]
	ssd1306_t* ssd1306 = malloc(sizeof(*ssd1306));
 8003c22:	f44f 6086 	mov.w	r0, #1072	; 0x430
 8003c26:	f000 fd6f 	bl	8004708 <malloc>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	60fb      	str	r3, [r7, #12]
	SSD1306_Init(ssd1306, hi2c, addr);
 8003c2e:	78fb      	ldrb	r3, [r7, #3]
 8003c30:	461a      	mov	r2, r3
 8003c32:	6879      	ldr	r1, [r7, #4]
 8003c34:	68f8      	ldr	r0, [r7, #12]
 8003c36:	f000 f805 	bl	8003c44 <SSD1306_Init>
	return ssd1306;
 8003c3a:	68fb      	ldr	r3, [r7, #12]
}
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	3710      	adds	r7, #16
 8003c40:	46bd      	mov	sp, r7
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <SSD1306_Init>:

uint8_t SSD1306_Init(ssd1306_t* ssd1306, I2C_HandleTypeDef *hi2c, uint8_t addr) {
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	4613      	mov	r3, r2
 8003c50:	71fb      	strb	r3, [r7, #7]

	ssd1306->hi2c = hi2c;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	68ba      	ldr	r2, [r7, #8]
 8003c56:	605a      	str	r2, [r3, #4]
	ssd1306->addr = addr;
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	79fa      	ldrb	r2, [r7, #7]
 8003c5c:	701a      	strb	r2, [r3, #0]
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(ssd1306->hi2c, ssd1306->addr, 1, 20000) != HAL_OK) {
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	6858      	ldr	r0, [r3, #4]
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	781b      	ldrb	r3, [r3, #0]
 8003c66:	b299      	uxth	r1, r3
 8003c68:	f644 6320 	movw	r3, #20000	; 0x4e20
 8003c6c:	2201      	movs	r2, #1
 8003c6e:	f7fd fd19 	bl	80016a4 <HAL_I2C_IsDeviceReady>
 8003c72:	4603      	mov	r3, r0
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d001      	beq.n	8003c7c <SSD1306_Init+0x38>
		/* Return false */
		return 0;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e0a4      	b.n	8003dc6 <SSD1306_Init+0x182>
//	uint32_t p = 2500;
//	while(p>0)
//		p--;
	
	/* Init LCD */
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAE);
 8003c7c:	22ae      	movs	r2, #174	; 0xae
 8003c7e:	2100      	movs	r1, #0
 8003c80:	68f8      	ldr	r0, [r7, #12]
 8003c82:	f000 fb80 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAE); //display off
 8003c86:	22ae      	movs	r2, #174	; 0xae
 8003c88:	2100      	movs	r1, #0
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 fb7b 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x20); //Set Memory Addressing Mode
 8003c90:	2220      	movs	r2, #32
 8003c92:	2100      	movs	r1, #0
 8003c94:	68f8      	ldr	r0, [r7, #12]
 8003c96:	f000 fb76 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003c9a:	2210      	movs	r2, #16
 8003c9c:	2100      	movs	r1, #0
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 fb71 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003ca4:	22b0      	movs	r2, #176	; 0xb0
 8003ca6:	2100      	movs	r1, #0
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 fb6c 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xC8); //Set COM Output Scan Direction
 8003cae:	22c8      	movs	r2, #200	; 0xc8
 8003cb0:	2100      	movs	r1, #0
 8003cb2:	68f8      	ldr	r0, [r7, #12]
 8003cb4:	f000 fb67 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x00); //---set low column address
 8003cb8:	2200      	movs	r2, #0
 8003cba:	2100      	movs	r1, #0
 8003cbc:	68f8      	ldr	r0, [r7, #12]
 8003cbe:	f000 fb62 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x10); //---set high column address
 8003cc2:	2210      	movs	r2, #16
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	68f8      	ldr	r0, [r7, #12]
 8003cc8:	f000 fb5d 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x40); //--set start line address
 8003ccc:	2240      	movs	r2, #64	; 0x40
 8003cce:	2100      	movs	r1, #0
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f000 fb58 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x81); //--set contrast control register
 8003cd6:	2281      	movs	r2, #129	; 0x81
 8003cd8:	2100      	movs	r1, #0
 8003cda:	68f8      	ldr	r0, [r7, #12]
 8003cdc:	f000 fb53 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xFF);
 8003ce0:	22ff      	movs	r2, #255	; 0xff
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	68f8      	ldr	r0, [r7, #12]
 8003ce6:	f000 fb4e 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA1); //--set segment re-map 0 to 127
 8003cea:	22a1      	movs	r2, #161	; 0xa1
 8003cec:	2100      	movs	r1, #0
 8003cee:	68f8      	ldr	r0, [r7, #12]
 8003cf0:	f000 fb49 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA6); //--set normal display
 8003cf4:	22a6      	movs	r2, #166	; 0xa6
 8003cf6:	2100      	movs	r1, #0
 8003cf8:	68f8      	ldr	r0, [r7, #12]
 8003cfa:	f000 fb44 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA8); //--set multiplex ratio(1 to 64)
 8003cfe:	22a8      	movs	r2, #168	; 0xa8
 8003d00:	2100      	movs	r1, #0
 8003d02:	68f8      	ldr	r0, [r7, #12]
 8003d04:	f000 fb3f 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x3F); //
 8003d08:	223f      	movs	r2, #63	; 0x3f
 8003d0a:	2100      	movs	r1, #0
 8003d0c:	68f8      	ldr	r0, [r7, #12]
 8003d0e:	f000 fb3a 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 8003d12:	22a4      	movs	r2, #164	; 0xa4
 8003d14:	2100      	movs	r1, #0
 8003d16:	68f8      	ldr	r0, [r7, #12]
 8003d18:	f000 fb35 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD3); //-set display offset
 8003d1c:	22d3      	movs	r2, #211	; 0xd3
 8003d1e:	2100      	movs	r1, #0
 8003d20:	68f8      	ldr	r0, [r7, #12]
 8003d22:	f000 fb30 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x00); //-not offset
 8003d26:	2200      	movs	r2, #0
 8003d28:	2100      	movs	r1, #0
 8003d2a:	68f8      	ldr	r0, [r7, #12]
 8003d2c:	f000 fb2b 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD5); //--set display clock divide ratio/oscillator frequency
 8003d30:	22d5      	movs	r2, #213	; 0xd5
 8003d32:	2100      	movs	r1, #0
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fb26 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xF0); //--set divide ratio
 8003d3a:	22f0      	movs	r2, #240	; 0xf0
 8003d3c:	2100      	movs	r1, #0
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fb21 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xD9); //--set pre-charge period
 8003d44:	22d9      	movs	r2, #217	; 0xd9
 8003d46:	2100      	movs	r1, #0
 8003d48:	68f8      	ldr	r0, [r7, #12]
 8003d4a:	f000 fb1c 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x22); //
 8003d4e:	2222      	movs	r2, #34	; 0x22
 8003d50:	2100      	movs	r1, #0
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 fb17 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xDA); //--set com pins hardware configuration
 8003d58:	22da      	movs	r2, #218	; 0xda
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	68f8      	ldr	r0, [r7, #12]
 8003d5e:	f000 fb12 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x12);
 8003d62:	2212      	movs	r2, #18
 8003d64:	2100      	movs	r1, #0
 8003d66:	68f8      	ldr	r0, [r7, #12]
 8003d68:	f000 fb0d 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xDB); //--set vcomh
 8003d6c:	22db      	movs	r2, #219	; 0xdb
 8003d6e:	2100      	movs	r1, #0
 8003d70:	68f8      	ldr	r0, [r7, #12]
 8003d72:	f000 fb08 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x20); //0x20,0.77xVcc
 8003d76:	2220      	movs	r2, #32
 8003d78:	2100      	movs	r1, #0
 8003d7a:	68f8      	ldr	r0, [r7, #12]
 8003d7c:	f000 fb03 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x8D); //--set DC-DC enable
 8003d80:	228d      	movs	r2, #141	; 0x8d
 8003d82:	2100      	movs	r1, #0
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 fafe 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0x14); //
 8003d8a:	2214      	movs	r2, #20
 8003d8c:	2100      	movs	r1, #0
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f000 faf9 	bl	8004386 <ssd1306_I2C_Write>
	ssd1306_I2C_Write(ssd1306, 0x00, 0xAF); //--turn on SSD1306 panel
 8003d94:	22af      	movs	r2, #175	; 0xaf
 8003d96:	2100      	movs	r1, #0
 8003d98:	68f8      	ldr	r0, [r7, #12]
 8003d9a:	f000 faf4 	bl	8004386 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(ssd1306, SSD1306_COLOR_BLACK);
 8003d9e:	2100      	movs	r1, #0
 8003da0:	68f8      	ldr	r0, [r7, #12]
 8003da2:	f000 f845 	bl	8003e30 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen(ssd1306);
 8003da6:	68f8      	ldr	r0, [r7, #12]
 8003da8:	f000 f811 	bl	8003dce <SSD1306_UpdateScreen>
	
	/* Set default values */
	ssd1306->CurrentX = 0;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	811a      	strh	r2, [r3, #8]
	ssd1306->CurrentY = 0;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	815a      	strh	r2, [r3, #10]
	
	/* Initialized OK */
	ssd1306->Initialized = 1;
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	2201      	movs	r2, #1
 8003dbc:	735a      	strb	r2, [r3, #13]
	ssd1306->Inverted= 0;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	731a      	strb	r2, [r3, #12]
	
	/* Return OK */
	return 1;
 8003dc4:	2301      	movs	r3, #1
}
 8003dc6:	4618      	mov	r0, r3
 8003dc8:	3710      	adds	r7, #16
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bd80      	pop	{r7, pc}

08003dce <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(ssd1306_t* ssd1306) {
 8003dce:	b580      	push	{r7, lr}
 8003dd0:	b084      	sub	sp, #16
 8003dd2:	af00      	add	r7, sp, #0
 8003dd4:	6078      	str	r0, [r7, #4]
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
 8003dda:	e022      	b.n	8003e22 <SSD1306_UpdateScreen+0x54>
		ssd1306_I2C_Write(ssd1306, 0x00, 0xB0 + m);
 8003ddc:	7bfb      	ldrb	r3, [r7, #15]
 8003dde:	3b50      	subs	r3, #80	; 0x50
 8003de0:	b2db      	uxtb	r3, r3
 8003de2:	461a      	mov	r2, r3
 8003de4:	2100      	movs	r1, #0
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f000 facd 	bl	8004386 <ssd1306_I2C_Write>
		ssd1306_I2C_Write(ssd1306, 0x00, 0x00);
 8003dec:	2200      	movs	r2, #0
 8003dee:	2100      	movs	r1, #0
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 fac8 	bl	8004386 <ssd1306_I2C_Write>
		ssd1306_I2C_Write(ssd1306, 0x00, 0x10);
 8003df6:	2210      	movs	r2, #16
 8003df8:	2100      	movs	r1, #0
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f000 fac3 	bl	8004386 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(ssd1306, 0x40, &ssd1306->SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	4613      	mov	r3, r2
 8003e04:	015b      	lsls	r3, r3, #5
 8003e06:	4413      	add	r3, r2
 8003e08:	009b      	lsls	r3, r3, #2
 8003e0a:	3308      	adds	r3, #8
 8003e0c:	687a      	ldr	r2, [r7, #4]
 8003e0e:	4413      	add	r3, r2
 8003e10:	1d9a      	adds	r2, r3, #6
 8003e12:	2384      	movs	r3, #132	; 0x84
 8003e14:	2140      	movs	r1, #64	; 0x40
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 fa5d 	bl	80042d6 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003e1c:	7bfb      	ldrb	r3, [r7, #15]
 8003e1e:	3301      	adds	r3, #1
 8003e20:	73fb      	strb	r3, [r7, #15]
 8003e22:	7bfb      	ldrb	r3, [r7, #15]
 8003e24:	2b07      	cmp	r3, #7
 8003e26:	d9d9      	bls.n	8003ddc <SSD1306_UpdateScreen+0xe>
	}
}
 8003e28:	bf00      	nop
 8003e2a:	3710      	adds	r7, #16
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <SSD1306_Fill>:

void SSD1306_Fill(ssd1306_t* ssd1306, SSD1306_COLOR_t color) {
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b082      	sub	sp, #8
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
 8003e38:	460b      	mov	r3, r1
 8003e3a:	70fb      	strb	r3, [r7, #3]
	/* Set memory */
	memset(ssd1306->SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(ssd1306->SSD1306_Buffer));
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	f103 000e 	add.w	r0, r3, #14
 8003e42:	78fb      	ldrb	r3, [r7, #3]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d101      	bne.n	8003e4c <SSD1306_Fill+0x1c>
 8003e48:	2300      	movs	r3, #0
 8003e4a:	e000      	b.n	8003e4e <SSD1306_Fill+0x1e>
 8003e4c:	23ff      	movs	r3, #255	; 0xff
 8003e4e:	f44f 6284 	mov.w	r2, #1056	; 0x420
 8003e52:	4619      	mov	r1, r3
 8003e54:	f000 fc60 	bl	8004718 <memset>
}
 8003e58:	bf00      	nop
 8003e5a:	3708      	adds	r7, #8
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}

08003e60 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(ssd1306_t* ssd1306, uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003e60:	b490      	push	{r4, r7}
 8003e62:	b084      	sub	sp, #16
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	60f8      	str	r0, [r7, #12]
 8003e68:	4608      	mov	r0, r1
 8003e6a:	4611      	mov	r1, r2
 8003e6c:	461a      	mov	r2, r3
 8003e6e:	4603      	mov	r3, r0
 8003e70:	817b      	strh	r3, [r7, #10]
 8003e72:	460b      	mov	r3, r1
 8003e74:	813b      	strh	r3, [r7, #8]
 8003e76:	4613      	mov	r3, r2
 8003e78:	71fb      	strb	r3, [r7, #7]
	if (
 8003e7a:	897b      	ldrh	r3, [r7, #10]
 8003e7c:	2b83      	cmp	r3, #131	; 0x83
 8003e7e:	d85a      	bhi.n	8003f36 <SSD1306_DrawPixel+0xd6>
		x >= SSD1306_WIDTH ||
 8003e80:	893b      	ldrh	r3, [r7, #8]
 8003e82:	2b3f      	cmp	r3, #63	; 0x3f
 8003e84:	d857      	bhi.n	8003f36 <SSD1306_DrawPixel+0xd6>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (ssd1306->Inverted) {
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	7b1b      	ldrb	r3, [r3, #12]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d006      	beq.n	8003e9c <SSD1306_DrawPixel+0x3c>
		color = (SSD1306_COLOR_t)!color;
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	bf0c      	ite	eq
 8003e94:	2301      	moveq	r3, #1
 8003e96:	2300      	movne	r3, #0
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	71fb      	strb	r3, [r7, #7]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003e9c:	79fb      	ldrb	r3, [r7, #7]
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d123      	bne.n	8003eea <SSD1306_DrawPixel+0x8a>
		ssd1306->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003ea2:	897a      	ldrh	r2, [r7, #10]
 8003ea4:	893b      	ldrh	r3, [r7, #8]
 8003ea6:	08db      	lsrs	r3, r3, #3
 8003ea8:	b298      	uxth	r0, r3
 8003eaa:	4601      	mov	r1, r0
 8003eac:	460b      	mov	r3, r1
 8003eae:	015b      	lsls	r3, r3, #5
 8003eb0:	440b      	add	r3, r1
 8003eb2:	009b      	lsls	r3, r3, #2
 8003eb4:	4413      	add	r3, r2
 8003eb6:	68fa      	ldr	r2, [r7, #12]
 8003eb8:	4413      	add	r3, r2
 8003eba:	7b9b      	ldrb	r3, [r3, #14]
 8003ebc:	b25a      	sxtb	r2, r3
 8003ebe:	893b      	ldrh	r3, [r7, #8]
 8003ec0:	f003 0307 	and.w	r3, r3, #7
 8003ec4:	2101      	movs	r1, #1
 8003ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eca:	b25b      	sxtb	r3, r3
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	b25c      	sxtb	r4, r3
 8003ed0:	897a      	ldrh	r2, [r7, #10]
 8003ed2:	4601      	mov	r1, r0
 8003ed4:	460b      	mov	r3, r1
 8003ed6:	015b      	lsls	r3, r3, #5
 8003ed8:	440b      	add	r3, r1
 8003eda:	009b      	lsls	r3, r3, #2
 8003edc:	4413      	add	r3, r2
 8003ede:	b2e1      	uxtb	r1, r4
 8003ee0:	68fa      	ldr	r2, [r7, #12]
 8003ee2:	4413      	add	r3, r2
 8003ee4:	460a      	mov	r2, r1
 8003ee6:	739a      	strb	r2, [r3, #14]
 8003ee8:	e026      	b.n	8003f38 <SSD1306_DrawPixel+0xd8>
	} else {
		ssd1306->SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8003eea:	897a      	ldrh	r2, [r7, #10]
 8003eec:	893b      	ldrh	r3, [r7, #8]
 8003eee:	08db      	lsrs	r3, r3, #3
 8003ef0:	b298      	uxth	r0, r3
 8003ef2:	4601      	mov	r1, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	015b      	lsls	r3, r3, #5
 8003ef8:	440b      	add	r3, r1
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	4413      	add	r3, r2
 8003efe:	68fa      	ldr	r2, [r7, #12]
 8003f00:	4413      	add	r3, r2
 8003f02:	7b9b      	ldrb	r3, [r3, #14]
 8003f04:	b25a      	sxtb	r2, r3
 8003f06:	893b      	ldrh	r3, [r7, #8]
 8003f08:	f003 0307 	and.w	r3, r3, #7
 8003f0c:	2101      	movs	r1, #1
 8003f0e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f12:	b25b      	sxtb	r3, r3
 8003f14:	43db      	mvns	r3, r3
 8003f16:	b25b      	sxtb	r3, r3
 8003f18:	4013      	ands	r3, r2
 8003f1a:	b25c      	sxtb	r4, r3
 8003f1c:	897a      	ldrh	r2, [r7, #10]
 8003f1e:	4601      	mov	r1, r0
 8003f20:	460b      	mov	r3, r1
 8003f22:	015b      	lsls	r3, r3, #5
 8003f24:	440b      	add	r3, r1
 8003f26:	009b      	lsls	r3, r3, #2
 8003f28:	4413      	add	r3, r2
 8003f2a:	b2e1      	uxtb	r1, r4
 8003f2c:	68fa      	ldr	r2, [r7, #12]
 8003f2e:	4413      	add	r3, r2
 8003f30:	460a      	mov	r2, r1
 8003f32:	739a      	strb	r2, [r3, #14]
 8003f34:	e000      	b.n	8003f38 <SSD1306_DrawPixel+0xd8>
		return;
 8003f36:	bf00      	nop
	}
}
 8003f38:	3710      	adds	r7, #16
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	bc90      	pop	{r4, r7}
 8003f3e:	4770      	bx	lr

08003f40 <SSD1306_GotoXY>:

void SSD1306_GotoXY(ssd1306_t* ssd1306, uint16_t x, uint16_t y) {
 8003f40:	b480      	push	{r7}
 8003f42:	b083      	sub	sp, #12
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
 8003f48:	460b      	mov	r3, r1
 8003f4a:	807b      	strh	r3, [r7, #2]
 8003f4c:	4613      	mov	r3, r2
 8003f4e:	803b      	strh	r3, [r7, #0]
	/* Set write pointers */
	ssd1306->CurrentX = x;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	887a      	ldrh	r2, [r7, #2]
 8003f54:	811a      	strh	r2, [r3, #8]
	ssd1306->CurrentY = y;
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	883a      	ldrh	r2, [r7, #0]
 8003f5a:	815a      	strh	r2, [r3, #10]
}
 8003f5c:	bf00      	nop
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <SSD1306_Putc>:

char SSD1306_Putc(ssd1306_t* ssd1306, uint8_t ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b088      	sub	sp, #32
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	607a      	str	r2, [r7, #4]
 8003f72:	461a      	mov	r2, r3
 8003f74:	460b      	mov	r3, r1
 8003f76:	72fb      	strb	r3, [r7, #11]
 8003f78:	4613      	mov	r3, r2
 8003f7a:	72bb      	strb	r3, [r7, #10]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (ssd1306->CurrentX + Font->FontWidth) ||
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	891b      	ldrh	r3, [r3, #8]
 8003f80:	461a      	mov	r2, r3
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	781b      	ldrb	r3, [r3, #0]
 8003f86:	4413      	add	r3, r2
	if (
 8003f88:	2b83      	cmp	r3, #131	; 0x83
 8003f8a:	dc07      	bgt.n	8003f9c <SSD1306_Putc+0x34>
		SSD1306_HEIGHT <= (ssd1306->CurrentY + Font->FontHeight)
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	895b      	ldrh	r3, [r3, #10]
 8003f90:	461a      	mov	r2, r3
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	785b      	ldrb	r3, [r3, #1]
 8003f96:	4413      	add	r3, r2
		SSD1306_WIDTH <= (ssd1306->CurrentX + Font->FontWidth) ||
 8003f98:	2b3f      	cmp	r3, #63	; 0x3f
 8003f9a:	dd01      	ble.n	8003fa0 <SSD1306_Putc+0x38>
	) {
		/* Error */
		return 0;
 8003f9c:	2300      	movs	r3, #0
 8003f9e:	e05e      	b.n	800405e <SSD1306_Putc+0xf6>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003fa0:	2300      	movs	r3, #0
 8003fa2:	61fb      	str	r3, [r7, #28]
 8003fa4:	e04b      	b.n	800403e <SSD1306_Putc+0xd6>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	685a      	ldr	r2, [r3, #4]
 8003faa:	7afb      	ldrb	r3, [r7, #11]
 8003fac:	3b20      	subs	r3, #32
 8003fae:	6879      	ldr	r1, [r7, #4]
 8003fb0:	7849      	ldrb	r1, [r1, #1]
 8003fb2:	fb01 f303 	mul.w	r3, r1, r3
 8003fb6:	4619      	mov	r1, r3
 8003fb8:	69fb      	ldr	r3, [r7, #28]
 8003fba:	440b      	add	r3, r1
 8003fbc:	005b      	lsls	r3, r3, #1
 8003fbe:	4413      	add	r3, r2
 8003fc0:	881b      	ldrh	r3, [r3, #0]
 8003fc2:	617b      	str	r3, [r7, #20]
		for (j = 0; j < Font->FontWidth; j++) {
 8003fc4:	2300      	movs	r3, #0
 8003fc6:	61bb      	str	r3, [r7, #24]
 8003fc8:	e030      	b.n	800402c <SSD1306_Putc+0xc4>
			if ((b << j) & 0x8000) {
 8003fca:	697a      	ldr	r2, [r7, #20]
 8003fcc:	69bb      	ldr	r3, [r7, #24]
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d010      	beq.n	8003ffc <SSD1306_Putc+0x94>
				SSD1306_DrawPixel(ssd1306, ssd1306->CurrentX + j, (ssd1306->CurrentY + i), (SSD1306_COLOR_t) color);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	891a      	ldrh	r2, [r3, #8]
 8003fde:	69bb      	ldr	r3, [r7, #24]
 8003fe0:	b29b      	uxth	r3, r3
 8003fe2:	4413      	add	r3, r2
 8003fe4:	b299      	uxth	r1, r3
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	895a      	ldrh	r2, [r3, #10]
 8003fea:	69fb      	ldr	r3, [r7, #28]
 8003fec:	b29b      	uxth	r3, r3
 8003fee:	4413      	add	r3, r2
 8003ff0:	b29a      	uxth	r2, r3
 8003ff2:	7abb      	ldrb	r3, [r7, #10]
 8003ff4:	68f8      	ldr	r0, [r7, #12]
 8003ff6:	f7ff ff33 	bl	8003e60 <SSD1306_DrawPixel>
 8003ffa:	e014      	b.n	8004026 <SSD1306_Putc+0xbe>
			} else {
				SSD1306_DrawPixel(ssd1306, ssd1306->CurrentX + j, (ssd1306->CurrentY + i), (SSD1306_COLOR_t)!color);
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	891a      	ldrh	r2, [r3, #8]
 8004000:	69bb      	ldr	r3, [r7, #24]
 8004002:	b29b      	uxth	r3, r3
 8004004:	4413      	add	r3, r2
 8004006:	b299      	uxth	r1, r3
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	895a      	ldrh	r2, [r3, #10]
 800400c:	69fb      	ldr	r3, [r7, #28]
 800400e:	b29b      	uxth	r3, r3
 8004010:	4413      	add	r3, r2
 8004012:	b29a      	uxth	r2, r3
 8004014:	7abb      	ldrb	r3, [r7, #10]
 8004016:	2b00      	cmp	r3, #0
 8004018:	bf0c      	ite	eq
 800401a:	2301      	moveq	r3, #1
 800401c:	2300      	movne	r3, #0
 800401e:	b2db      	uxtb	r3, r3
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff ff1d 	bl	8003e60 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 8004026:	69bb      	ldr	r3, [r7, #24]
 8004028:	3301      	adds	r3, #1
 800402a:	61bb      	str	r3, [r7, #24]
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	781b      	ldrb	r3, [r3, #0]
 8004030:	461a      	mov	r2, r3
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	4293      	cmp	r3, r2
 8004036:	d3c8      	bcc.n	8003fca <SSD1306_Putc+0x62>
	for (i = 0; i < Font->FontHeight; i++) {
 8004038:	69fb      	ldr	r3, [r7, #28]
 800403a:	3301      	adds	r3, #1
 800403c:	61fb      	str	r3, [r7, #28]
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	785b      	ldrb	r3, [r3, #1]
 8004042:	461a      	mov	r2, r3
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	4293      	cmp	r3, r2
 8004048:	d3ad      	bcc.n	8003fa6 <SSD1306_Putc+0x3e>
			}
		}
	}
	
	/* Increase pointer */
	ssd1306->CurrentX += Font->FontWidth;
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	891a      	ldrh	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	781b      	ldrb	r3, [r3, #0]
 8004052:	b29b      	uxth	r3, r3
 8004054:	4413      	add	r3, r2
 8004056:	b29a      	uxth	r2, r3
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	811a      	strh	r2, [r3, #8]
	
	/* Return character written */
	return ch;
 800405c:	7afb      	ldrb	r3, [r7, #11]
}
 800405e:	4618      	mov	r0, r3
 8004060:	3720      	adds	r7, #32
 8004062:	46bd      	mov	sp, r7
 8004064:	bd80      	pop	{r7, pc}
	...

08004068 <SSD1306_Putint>:

void SSD1306_Putint(ssd1306_t* ssd1306, int data, uint8_t slot) {
 8004068:	b5b0      	push	{r4, r5, r7, lr}
 800406a:	b08a      	sub	sp, #40	; 0x28
 800406c:	af00      	add	r7, sp, #0
 800406e:	60f8      	str	r0, [r7, #12]
 8004070:	60b9      	str	r1, [r7, #8]
 8004072:	4613      	mov	r3, r2
 8004074:	71fb      	strb	r3, [r7, #7]
 8004076:	466b      	mov	r3, sp
 8004078:	461d      	mov	r5, r3

	char menos_char = ' ';
 800407a:	2320      	movs	r3, #32
 800407c:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	if (data < 0) {
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	da05      	bge.n	8004092 <SSD1306_Putint+0x2a>
		data = -data;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	425b      	negs	r3, r3
 800408a:	60bb      	str	r3, [r7, #8]
		menos_char = '-';
 800408c:	232d      	movs	r3, #45	; 0x2d
 800408e:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	}

	int size = size_int_oled(data);
 8004092:	68b8      	ldr	r0, [r7, #8]
 8004094:	f000 f8c6 	bl	8004224 <size_int_oled>
 8004098:	4603      	mov	r3, r0
 800409a:	61fb      	str	r3, [r7, #28]
	char data_char[size];		// String de chars=
 800409c:	69f8      	ldr	r0, [r7, #28]
 800409e:	1e43      	subs	r3, r0, #1
 80040a0:	61bb      	str	r3, [r7, #24]
 80040a2:	4603      	mov	r3, r0
 80040a4:	4619      	mov	r1, r3
 80040a6:	f04f 0200 	mov.w	r2, #0
 80040aa:	f04f 0300 	mov.w	r3, #0
 80040ae:	f04f 0400 	mov.w	r4, #0
 80040b2:	00d4      	lsls	r4, r2, #3
 80040b4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80040b8:	00cb      	lsls	r3, r1, #3
 80040ba:	4603      	mov	r3, r0
 80040bc:	4619      	mov	r1, r3
 80040be:	f04f 0200 	mov.w	r2, #0
 80040c2:	f04f 0300 	mov.w	r3, #0
 80040c6:	f04f 0400 	mov.w	r4, #0
 80040ca:	00d4      	lsls	r4, r2, #3
 80040cc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80040d0:	00cb      	lsls	r3, r1, #3
 80040d2:	4603      	mov	r3, r0
 80040d4:	3307      	adds	r3, #7
 80040d6:	08db      	lsrs	r3, r3, #3
 80040d8:	00db      	lsls	r3, r3, #3
 80040da:	ebad 0d03 	sub.w	sp, sp, r3
 80040de:	466b      	mov	r3, sp
 80040e0:	3300      	adds	r3, #0
 80040e2:	617b      	str	r3, [r7, #20]
	sprintf(data_char,"%d", data);	// Cada numero del int en un char
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	4949      	ldr	r1, [pc, #292]	; (8004210 <SSD1306_Putint+0x1a8>)
 80040ea:	4618      	mov	r0, r3
 80040ec:	f000 fbd4 	bl	8004898 <siprintf>

	uint16_t x_slot = 0;
 80040f0:	2300      	movs	r3, #0
 80040f2:	847b      	strh	r3, [r7, #34]	; 0x22
	uint16_t y_slot = 0;
 80040f4:	2300      	movs	r3, #0
 80040f6:	84bb      	strh	r3, [r7, #36]	; 0x24
	uint8_t slot_mini = 0;
 80040f8:	2300      	movs	r3, #0
 80040fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	switch (slot) {
 80040fe:	79fb      	ldrb	r3, [r7, #7]
 8004100:	3b01      	subs	r3, #1
 8004102:	2b04      	cmp	r3, #4
 8004104:	d82b      	bhi.n	800415e <SSD1306_Putint+0xf6>
 8004106:	a201      	add	r2, pc, #4	; (adr r2, 800410c <SSD1306_Putint+0xa4>)
 8004108:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800410c:	08004121 	.word	0x08004121
 8004110:	0800412b 	.word	0x0800412b
 8004114:	08004135 	.word	0x08004135
 8004118:	0800413f 	.word	0x0800413f
 800411c:	0800414f 	.word	0x0800414f
	case 1:
		x_slot = 2;
 8004120:	2302      	movs	r3, #2
 8004122:	847b      	strh	r3, [r7, #34]	; 0x22
		y_slot = 0;
 8004124:	2300      	movs	r3, #0
 8004126:	84bb      	strh	r3, [r7, #36]	; 0x24
		break;
 8004128:	e019      	b.n	800415e <SSD1306_Putint+0xf6>
	case 2:
		x_slot = 2;
 800412a:	2302      	movs	r3, #2
 800412c:	847b      	strh	r3, [r7, #34]	; 0x22
		y_slot = 17;
 800412e:	2311      	movs	r3, #17
 8004130:	84bb      	strh	r3, [r7, #36]	; 0x24
		break;
 8004132:	e014      	b.n	800415e <SSD1306_Putint+0xf6>
	case 3:
		x_slot = 2;
 8004134:	2302      	movs	r3, #2
 8004136:	847b      	strh	r3, [r7, #34]	; 0x22
		y_slot = 35;
 8004138:	2323      	movs	r3, #35	; 0x23
 800413a:	84bb      	strh	r3, [r7, #36]	; 0x24
		break;
 800413c:	e00f      	b.n	800415e <SSD1306_Putint+0xf6>
	case 4:
		x_slot = 22;
 800413e:	2316      	movs	r3, #22
 8004140:	847b      	strh	r3, [r7, #34]	; 0x22
		y_slot = 53;
 8004142:	2335      	movs	r3, #53	; 0x35
 8004144:	84bb      	strh	r3, [r7, #36]	; 0x24
		slot_mini = 1;
 8004146:	2301      	movs	r3, #1
 8004148:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 800414c:	e007      	b.n	800415e <SSD1306_Putint+0xf6>
	case 5:
		x_slot = 70;
 800414e:	2346      	movs	r3, #70	; 0x46
 8004150:	847b      	strh	r3, [r7, #34]	; 0x22
		y_slot = 53;
 8004152:	2335      	movs	r3, #53	; 0x35
 8004154:	84bb      	strh	r3, [r7, #36]	; 0x24
		slot_mini = 1;
 8004156:	2301      	movs	r3, #1
 8004158:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		break;
 800415c:	bf00      	nop
	}
	if (slot_mini == 1){
 800415e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004162:	2b01      	cmp	r3, #1
 8004164:	d129      	bne.n	80041ba <SSD1306_Putint+0x152>
		SSD1306_GotoXY (ssd1306, x_slot,y_slot);				// Select x and y from the selected slot
 8004166:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004168:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800416a:	4619      	mov	r1, r3
 800416c:	68f8      	ldr	r0, [r7, #12]
 800416e:	f7ff fee7 	bl	8003f40 <SSD1306_GotoXY>
		SSD1306_Puts (ssd1306, "       ", &Font_7x10, 1);	// Reset the slot before writing (7 blank chars for small slots)
 8004172:	2301      	movs	r3, #1
 8004174:	4a27      	ldr	r2, [pc, #156]	; (8004214 <SSD1306_Putint+0x1ac>)
 8004176:	4928      	ldr	r1, [pc, #160]	; (8004218 <SSD1306_Putint+0x1b0>)
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f887 	bl	800428c <SSD1306_Puts>
		SSD1306_GotoXY (ssd1306, x_slot,y_slot);				// Come back to the initial position
 800417e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004180:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8004182:	4619      	mov	r1, r3
 8004184:	68f8      	ldr	r0, [r7, #12]
 8004186:	f7ff fedb 	bl	8003f40 <SSD1306_GotoXY>
		SSD1306_Putc (ssd1306, menos_char, &Font_7x10, 1);	// Write minus char if necessary
 800418a:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 800418e:	2301      	movs	r3, #1
 8004190:	4a20      	ldr	r2, [pc, #128]	; (8004214 <SSD1306_Putint+0x1ac>)
 8004192:	68f8      	ldr	r0, [r7, #12]
 8004194:	f7ff fee8 	bl	8003f68 <SSD1306_Putc>
		SSD1306_GotoXY (ssd1306, x_slot+7,y_slot);			// Shif a char correspondig to the minus char
 8004198:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800419a:	3307      	adds	r3, #7
 800419c:	b29b      	uxth	r3, r3
 800419e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041a0:	4619      	mov	r1, r3
 80041a2:	68f8      	ldr	r0, [r7, #12]
 80041a4:	f7ff fecc 	bl	8003f40 <SSD1306_GotoXY>
		SSD1306_Puts (ssd1306, data_char, &Font_7x10, 1);	// Write the value
 80041a8:	6979      	ldr	r1, [r7, #20]
 80041aa:	2301      	movs	r3, #1
 80041ac:	4a19      	ldr	r2, [pc, #100]	; (8004214 <SSD1306_Putint+0x1ac>)
 80041ae:	68f8      	ldr	r0, [r7, #12]
 80041b0:	f000 f86c 	bl	800428c <SSD1306_Puts>
		return;
 80041b4:	bf00      	nop
 80041b6:	46ad      	mov	sp, r5
 80041b8:	e027      	b.n	800420a <SSD1306_Putint+0x1a2>
	}
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 80041ba:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041bc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80041be:	4619      	mov	r1, r3
 80041c0:	68f8      	ldr	r0, [r7, #12]
 80041c2:	f7ff febd 	bl	8003f40 <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, "         ", &Font_11x18, 1);		// Reset the slot before writing (9 blank chars for small slots)
 80041c6:	2301      	movs	r3, #1
 80041c8:	4a14      	ldr	r2, [pc, #80]	; (800421c <SSD1306_Putint+0x1b4>)
 80041ca:	4915      	ldr	r1, [pc, #84]	; (8004220 <SSD1306_Putint+0x1b8>)
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f85d 	bl	800428c <SSD1306_Puts>
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
 80041d2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80041d6:	4619      	mov	r1, r3
 80041d8:	68f8      	ldr	r0, [r7, #12]
 80041da:	f7ff feb1 	bl	8003f40 <SSD1306_GotoXY>
	SSD1306_Putc (ssd1306, menos_char, &Font_11x18, 1);
 80041de:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80041e2:	2301      	movs	r3, #1
 80041e4:	4a0d      	ldr	r2, [pc, #52]	; (800421c <SSD1306_Putint+0x1b4>)
 80041e6:	68f8      	ldr	r0, [r7, #12]
 80041e8:	f7ff febe 	bl	8003f68 <SSD1306_Putc>
	SSD1306_GotoXY (ssd1306, x_slot+11,y_slot);
 80041ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80041ee:	330b      	adds	r3, #11
 80041f0:	b29b      	uxth	r3, r3
 80041f2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80041f4:	4619      	mov	r1, r3
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f7ff fea2 	bl	8003f40 <SSD1306_GotoXY>
	SSD1306_Puts (ssd1306, data_char, &Font_11x18, 1);
 80041fc:	6979      	ldr	r1, [r7, #20]
 80041fe:	2301      	movs	r3, #1
 8004200:	4a06      	ldr	r2, [pc, #24]	; (800421c <SSD1306_Putint+0x1b4>)
 8004202:	68f8      	ldr	r0, [r7, #12]
 8004204:	f000 f842 	bl	800428c <SSD1306_Puts>
 8004208:	46ad      	mov	sp, r5
}
 800420a:	3728      	adds	r7, #40	; 0x28
 800420c:	46bd      	mov	sp, r7
 800420e:	bdb0      	pop	{r4, r5, r7, pc}
 8004210:	080055e4 	.word	0x080055e4
 8004214:	20000008 	.word	0x20000008
 8004218:	080055e8 	.word	0x080055e8
 800421c:	20000010 	.word	0x20000010
 8004220:	080055f0 	.word	0x080055f0

08004224 <size_int_oled>:
	SSD1306_GotoXY (ssd1306, x_slot,y_slot);
	SSD1306_Puts (ssd1306, float_str, &Font_11x18, 1);
//	SSD1306_UpdateScreen();
}

uint8_t size_int_oled(int data){
 8004224:	b590      	push	{r4, r7, lr}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
	uint8_t size;
	if (data==0){
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	2b00      	cmp	r3, #0
 8004230:	d102      	bne.n	8004238 <size_int_oled+0x14>
		size = 1;
 8004232:	2301      	movs	r3, #1
 8004234:	73fb      	strb	r3, [r7, #15]
 8004236:	e021      	b.n	800427c <size_int_oled+0x58>
	}
	else {
		size = floor(log10(data))+1;
 8004238:	6878      	ldr	r0, [r7, #4]
 800423a:	f7fc f96b 	bl	8000514 <__aeabi_i2d>
 800423e:	4603      	mov	r3, r0
 8004240:	460c      	mov	r4, r1
 8004242:	ec44 3b10 	vmov	d0, r3, r4
 8004246:	f000 fefb 	bl	8005040 <log10>
 800424a:	eeb0 7a40 	vmov.f32	s14, s0
 800424e:	eef0 7a60 	vmov.f32	s15, s1
 8004252:	eeb0 0a47 	vmov.f32	s0, s14
 8004256:	eef0 0a67 	vmov.f32	s1, s15
 800425a:	f000 fe6d 	bl	8004f38 <floor>
 800425e:	ec51 0b10 	vmov	r0, r1, d0
 8004262:	f04f 0200 	mov.w	r2, #0
 8004266:	4b08      	ldr	r3, [pc, #32]	; (8004288 <size_int_oled+0x64>)
 8004268:	f7fc f808 	bl	800027c <__adddf3>
 800426c:	4603      	mov	r3, r0
 800426e:	460c      	mov	r4, r1
 8004270:	4618      	mov	r0, r3
 8004272:	4621      	mov	r1, r4
 8004274:	f7fc fc68 	bl	8000b48 <__aeabi_d2uiz>
 8004278:	4603      	mov	r3, r0
 800427a:	73fb      	strb	r3, [r7, #15]
	}
	return size;
 800427c:	7bfb      	ldrb	r3, [r7, #15]
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	bd90      	pop	{r4, r7, pc}
 8004286:	bf00      	nop
 8004288:	3ff00000 	.word	0x3ff00000

0800428c <SSD1306_Puts>:

char SSD1306_Puts(ssd1306_t* ssd1306, char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	60b9      	str	r1, [r7, #8]
 8004296:	607a      	str	r2, [r7, #4]
 8004298:	70fb      	strb	r3, [r7, #3]
	/* Write characters */
	while (*str) {
 800429a:	e012      	b.n	80042c2 <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(ssd1306, *str, Font, color) != *str) {
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	7819      	ldrb	r1, [r3, #0]
 80042a0:	78fb      	ldrb	r3, [r7, #3]
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f7ff fe5f 	bl	8003f68 <SSD1306_Putc>
 80042aa:	4603      	mov	r3, r0
 80042ac:	461a      	mov	r2, r3
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d002      	beq.n	80042bc <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80042b6:	68bb      	ldr	r3, [r7, #8]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	e008      	b.n	80042ce <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	3301      	adds	r3, #1
 80042c0:	60bb      	str	r3, [r7, #8]
	while (*str) {
 80042c2:	68bb      	ldr	r3, [r7, #8]
 80042c4:	781b      	ldrb	r3, [r3, #0]
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1e8      	bne.n	800429c <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	781b      	ldrb	r3, [r3, #0]
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3710      	adds	r7, #16
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <ssd1306_I2C_WriteMulti>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_WriteMulti(ssd1306_t* ssd1306, uint8_t reg, uint8_t* data, uint16_t count) {
 80042d6:	b5b0      	push	{r4, r5, r7, lr}
 80042d8:	b08a      	sub	sp, #40	; 0x28
 80042da:	af02      	add	r7, sp, #8
 80042dc:	60f8      	str	r0, [r7, #12]
 80042de:	607a      	str	r2, [r7, #4]
 80042e0:	461a      	mov	r2, r3
 80042e2:	460b      	mov	r3, r1
 80042e4:	72fb      	strb	r3, [r7, #11]
 80042e6:	4613      	mov	r3, r2
 80042e8:	813b      	strh	r3, [r7, #8]
 80042ea:	466b      	mov	r3, sp
 80042ec:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 80042ee:	893b      	ldrh	r3, [r7, #8]
 80042f0:	1c58      	adds	r0, r3, #1
 80042f2:	1e43      	subs	r3, r0, #1
 80042f4:	61bb      	str	r3, [r7, #24]
 80042f6:	4603      	mov	r3, r0
 80042f8:	4619      	mov	r1, r3
 80042fa:	f04f 0200 	mov.w	r2, #0
 80042fe:	f04f 0300 	mov.w	r3, #0
 8004302:	f04f 0400 	mov.w	r4, #0
 8004306:	00d4      	lsls	r4, r2, #3
 8004308:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800430c:	00cb      	lsls	r3, r1, #3
 800430e:	4603      	mov	r3, r0
 8004310:	4619      	mov	r1, r3
 8004312:	f04f 0200 	mov.w	r2, #0
 8004316:	f04f 0300 	mov.w	r3, #0
 800431a:	f04f 0400 	mov.w	r4, #0
 800431e:	00d4      	lsls	r4, r2, #3
 8004320:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004324:	00cb      	lsls	r3, r1, #3
 8004326:	4603      	mov	r3, r0
 8004328:	3307      	adds	r3, #7
 800432a:	08db      	lsrs	r3, r3, #3
 800432c:	00db      	lsls	r3, r3, #3
 800432e:	ebad 0d03 	sub.w	sp, sp, r3
 8004332:	ab02      	add	r3, sp, #8
 8004334:	3300      	adds	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
	dt[0] = reg;
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	7afa      	ldrb	r2, [r7, #11]
 800433c:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 800433e:	2301      	movs	r3, #1
 8004340:	77fb      	strb	r3, [r7, #31]
 8004342:	e00a      	b.n	800435a <ssd1306_I2C_WriteMulti+0x84>
		dt[i] = data[i-1];
 8004344:	7ffb      	ldrb	r3, [r7, #31]
 8004346:	3b01      	subs	r3, #1
 8004348:	687a      	ldr	r2, [r7, #4]
 800434a:	441a      	add	r2, r3
 800434c:	7ffb      	ldrb	r3, [r7, #31]
 800434e:	7811      	ldrb	r1, [r2, #0]
 8004350:	697a      	ldr	r2, [r7, #20]
 8004352:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8004354:	7ffb      	ldrb	r3, [r7, #31]
 8004356:	3301      	adds	r3, #1
 8004358:	77fb      	strb	r3, [r7, #31]
 800435a:	7ffb      	ldrb	r3, [r7, #31]
 800435c:	b29b      	uxth	r3, r3
 800435e:	893a      	ldrh	r2, [r7, #8]
 8004360:	429a      	cmp	r2, r3
 8004362:	d2ef      	bcs.n	8004344 <ssd1306_I2C_WriteMulti+0x6e>
	HAL_I2C_Master_Transmit(ssd1306->hi2c, ssd1306->addr, dt, count, 10);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	6858      	ldr	r0, [r3, #4]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	781b      	ldrb	r3, [r3, #0]
 800436c:	b299      	uxth	r1, r3
 800436e:	697a      	ldr	r2, [r7, #20]
 8004370:	893c      	ldrh	r4, [r7, #8]
 8004372:	230a      	movs	r3, #10
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	4623      	mov	r3, r4
 8004378:	f7fc ff92 	bl	80012a0 <HAL_I2C_Master_Transmit>
 800437c:	46ad      	mov	sp, r5
}
 800437e:	bf00      	nop
 8004380:	3720      	adds	r7, #32
 8004382:	46bd      	mov	sp, r7
 8004384:	bdb0      	pop	{r4, r5, r7, pc}

08004386 <ssd1306_I2C_Write>:

void ssd1306_I2C_Write(ssd1306_t* ssd1306, uint8_t reg, uint8_t data) {
 8004386:	b580      	push	{r7, lr}
 8004388:	b086      	sub	sp, #24
 800438a:	af02      	add	r7, sp, #8
 800438c:	6078      	str	r0, [r7, #4]
 800438e:	460b      	mov	r3, r1
 8004390:	70fb      	strb	r3, [r7, #3]
 8004392:	4613      	mov	r3, r2
 8004394:	70bb      	strb	r3, [r7, #2]
	uint8_t dt[2];
	dt[0] = reg;
 8004396:	78fb      	ldrb	r3, [r7, #3]
 8004398:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800439a:	78bb      	ldrb	r3, [r7, #2]
 800439c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(ssd1306->hi2c, ssd1306->addr, dt, 2, 10);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	6858      	ldr	r0, [r3, #4]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	781b      	ldrb	r3, [r3, #0]
 80043a6:	b299      	uxth	r1, r3
 80043a8:	f107 020c 	add.w	r2, r7, #12
 80043ac:	230a      	movs	r3, #10
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	2302      	movs	r3, #2
 80043b2:	f7fc ff75 	bl	80012a0 <HAL_I2C_Master_Transmit>
}
 80043b6:	bf00      	nop
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b083      	sub	sp, #12
 80043c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80043c6:	4b0f      	ldr	r3, [pc, #60]	; (8004404 <HAL_MspInit+0x44>)
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	4a0e      	ldr	r2, [pc, #56]	; (8004404 <HAL_MspInit+0x44>)
 80043cc:	f043 0301 	orr.w	r3, r3, #1
 80043d0:	6193      	str	r3, [r2, #24]
 80043d2:	4b0c      	ldr	r3, [pc, #48]	; (8004404 <HAL_MspInit+0x44>)
 80043d4:	699b      	ldr	r3, [r3, #24]
 80043d6:	f003 0301 	and.w	r3, r3, #1
 80043da:	607b      	str	r3, [r7, #4]
 80043dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80043de:	4b09      	ldr	r3, [pc, #36]	; (8004404 <HAL_MspInit+0x44>)
 80043e0:	69db      	ldr	r3, [r3, #28]
 80043e2:	4a08      	ldr	r2, [pc, #32]	; (8004404 <HAL_MspInit+0x44>)
 80043e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043e8:	61d3      	str	r3, [r2, #28]
 80043ea:	4b06      	ldr	r3, [pc, #24]	; (8004404 <HAL_MspInit+0x44>)
 80043ec:	69db      	ldr	r3, [r3, #28]
 80043ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043f2:	603b      	str	r3, [r7, #0]
 80043f4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr
 8004402:	bf00      	nop
 8004404:	40021000 	.word	0x40021000

08004408 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b08a      	sub	sp, #40	; 0x28
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004410:	f107 0314 	add.w	r3, r7, #20
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	605a      	str	r2, [r3, #4]
 800441a:	609a      	str	r2, [r3, #8]
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a17      	ldr	r2, [pc, #92]	; (8004484 <HAL_I2C_MspInit+0x7c>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d127      	bne.n	800447a <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800442a:	4b17      	ldr	r3, [pc, #92]	; (8004488 <HAL_I2C_MspInit+0x80>)
 800442c:	695b      	ldr	r3, [r3, #20]
 800442e:	4a16      	ldr	r2, [pc, #88]	; (8004488 <HAL_I2C_MspInit+0x80>)
 8004430:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004434:	6153      	str	r3, [r2, #20]
 8004436:	4b14      	ldr	r3, [pc, #80]	; (8004488 <HAL_I2C_MspInit+0x80>)
 8004438:	695b      	ldr	r3, [r3, #20]
 800443a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800443e:	613b      	str	r3, [r7, #16]
 8004440:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004442:	23c0      	movs	r3, #192	; 0xc0
 8004444:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004446:	2312      	movs	r3, #18
 8004448:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800444a:	2301      	movs	r3, #1
 800444c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800444e:	2303      	movs	r3, #3
 8004450:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004452:	2304      	movs	r3, #4
 8004454:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004456:	f107 0314 	add.w	r3, r7, #20
 800445a:	4619      	mov	r1, r3
 800445c:	480b      	ldr	r0, [pc, #44]	; (800448c <HAL_I2C_MspInit+0x84>)
 800445e:	f7fc fd01 	bl	8000e64 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004462:	4b09      	ldr	r3, [pc, #36]	; (8004488 <HAL_I2C_MspInit+0x80>)
 8004464:	69db      	ldr	r3, [r3, #28]
 8004466:	4a08      	ldr	r2, [pc, #32]	; (8004488 <HAL_I2C_MspInit+0x80>)
 8004468:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800446c:	61d3      	str	r3, [r2, #28]
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <HAL_I2C_MspInit+0x80>)
 8004470:	69db      	ldr	r3, [r3, #28]
 8004472:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004476:	60fb      	str	r3, [r7, #12]
 8004478:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800447a:	bf00      	nop
 800447c:	3728      	adds	r7, #40	; 0x28
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	40005400 	.word	0x40005400
 8004488:	40021000 	.word	0x40021000
 800448c:	48000400 	.word	0x48000400

08004490 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004490:	b580      	push	{r7, lr}
 8004492:	b08a      	sub	sp, #40	; 0x28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004498:	f107 0314 	add.w	r3, r7, #20
 800449c:	2200      	movs	r2, #0
 800449e:	601a      	str	r2, [r3, #0]
 80044a0:	605a      	str	r2, [r3, #4]
 80044a2:	609a      	str	r2, [r3, #8]
 80044a4:	60da      	str	r2, [r3, #12]
 80044a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a18      	ldr	r2, [pc, #96]	; (8004510 <HAL_UART_MspInit+0x80>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d129      	bne.n	8004506 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80044b2:	4b18      	ldr	r3, [pc, #96]	; (8004514 <HAL_UART_MspInit+0x84>)
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	4a17      	ldr	r2, [pc, #92]	; (8004514 <HAL_UART_MspInit+0x84>)
 80044b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044bc:	61d3      	str	r3, [r2, #28]
 80044be:	4b15      	ldr	r3, [pc, #84]	; (8004514 <HAL_UART_MspInit+0x84>)
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044c6:	613b      	str	r3, [r7, #16]
 80044c8:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80044ca:	4b12      	ldr	r3, [pc, #72]	; (8004514 <HAL_UART_MspInit+0x84>)
 80044cc:	695b      	ldr	r3, [r3, #20]
 80044ce:	4a11      	ldr	r2, [pc, #68]	; (8004514 <HAL_UART_MspInit+0x84>)
 80044d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044d4:	6153      	str	r3, [r2, #20]
 80044d6:	4b0f      	ldr	r3, [pc, #60]	; (8004514 <HAL_UART_MspInit+0x84>)
 80044d8:	695b      	ldr	r3, [r3, #20]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	60fb      	str	r3, [r7, #12]
 80044e0:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80044e2:	f248 0304 	movw	r3, #32772	; 0x8004
 80044e6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80044e8:	2302      	movs	r3, #2
 80044ea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044ec:	2300      	movs	r3, #0
 80044ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80044f0:	2303      	movs	r3, #3
 80044f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80044f4:	2307      	movs	r3, #7
 80044f6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044f8:	f107 0314 	add.w	r3, r7, #20
 80044fc:	4619      	mov	r1, r3
 80044fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004502:	f7fc fcaf 	bl	8000e64 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004506:	bf00      	nop
 8004508:	3728      	adds	r7, #40	; 0x28
 800450a:	46bd      	mov	sp, r7
 800450c:	bd80      	pop	{r7, pc}
 800450e:	bf00      	nop
 8004510:	40004400 	.word	0x40004400
 8004514:	40021000 	.word	0x40021000

08004518 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004518:	b480      	push	{r7}
 800451a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800451c:	bf00      	nop
 800451e:	46bd      	mov	sp, r7
 8004520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004524:	4770      	bx	lr

08004526 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004526:	b480      	push	{r7}
 8004528:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800452a:	e7fe      	b.n	800452a <HardFault_Handler+0x4>

0800452c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800452c:	b480      	push	{r7}
 800452e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004530:	e7fe      	b.n	8004530 <MemManage_Handler+0x4>

08004532 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004532:	b480      	push	{r7}
 8004534:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004536:	e7fe      	b.n	8004536 <BusFault_Handler+0x4>

08004538 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004538:	b480      	push	{r7}
 800453a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800453c:	e7fe      	b.n	800453c <UsageFault_Handler+0x4>

0800453e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800453e:	b480      	push	{r7}
 8004540:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004542:	bf00      	nop
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr

0800454c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800454c:	b480      	push	{r7}
 800454e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004550:	bf00      	nop
 8004552:	46bd      	mov	sp, r7
 8004554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004558:	4770      	bx	lr

0800455a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800455a:	b480      	push	{r7}
 800455c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800455e:	bf00      	nop
 8004560:	46bd      	mov	sp, r7
 8004562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004566:	4770      	bx	lr

08004568 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800456c:	f7fc fb52 	bl	8000c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004570:	bf00      	nop
 8004572:	bd80      	pop	{r7, pc}

08004574 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b084      	sub	sp, #16
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800457c:	4b11      	ldr	r3, [pc, #68]	; (80045c4 <_sbrk+0x50>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	2b00      	cmp	r3, #0
 8004582:	d102      	bne.n	800458a <_sbrk+0x16>
		heap_end = &end;
 8004584:	4b0f      	ldr	r3, [pc, #60]	; (80045c4 <_sbrk+0x50>)
 8004586:	4a10      	ldr	r2, [pc, #64]	; (80045c8 <_sbrk+0x54>)
 8004588:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800458a:	4b0e      	ldr	r3, [pc, #56]	; (80045c4 <_sbrk+0x50>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8004590:	4b0c      	ldr	r3, [pc, #48]	; (80045c4 <_sbrk+0x50>)
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	4413      	add	r3, r2
 8004598:	466a      	mov	r2, sp
 800459a:	4293      	cmp	r3, r2
 800459c:	d907      	bls.n	80045ae <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800459e:	f000 f889 	bl	80046b4 <__errno>
 80045a2:	4602      	mov	r2, r0
 80045a4:	230c      	movs	r3, #12
 80045a6:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80045a8:	f04f 33ff 	mov.w	r3, #4294967295
 80045ac:	e006      	b.n	80045bc <_sbrk+0x48>
	}

	heap_end += incr;
 80045ae:	4b05      	ldr	r3, [pc, #20]	; (80045c4 <_sbrk+0x50>)
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	4413      	add	r3, r2
 80045b6:	4a03      	ldr	r2, [pc, #12]	; (80045c4 <_sbrk+0x50>)
 80045b8:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80045ba:	68fb      	ldr	r3, [r7, #12]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	3710      	adds	r7, #16
 80045c0:	46bd      	mov	sp, r7
 80045c2:	bd80      	pop	{r7, pc}
 80045c4:	200000a0 	.word	0x200000a0
 80045c8:	20000170 	.word	0x20000170

080045cc <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80045cc:	b480      	push	{r7}
 80045ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80045d0:	4b1f      	ldr	r3, [pc, #124]	; (8004650 <SystemInit+0x84>)
 80045d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80045d6:	4a1e      	ldr	r2, [pc, #120]	; (8004650 <SystemInit+0x84>)
 80045d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80045dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80045e0:	4b1c      	ldr	r3, [pc, #112]	; (8004654 <SystemInit+0x88>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	4a1b      	ldr	r2, [pc, #108]	; (8004654 <SystemInit+0x88>)
 80045e6:	f043 0301 	orr.w	r3, r3, #1
 80045ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80045ec:	4b19      	ldr	r3, [pc, #100]	; (8004654 <SystemInit+0x88>)
 80045ee:	685a      	ldr	r2, [r3, #4]
 80045f0:	4918      	ldr	r1, [pc, #96]	; (8004654 <SystemInit+0x88>)
 80045f2:	4b19      	ldr	r3, [pc, #100]	; (8004658 <SystemInit+0x8c>)
 80045f4:	4013      	ands	r3, r2
 80045f6:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80045f8:	4b16      	ldr	r3, [pc, #88]	; (8004654 <SystemInit+0x88>)
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	4a15      	ldr	r2, [pc, #84]	; (8004654 <SystemInit+0x88>)
 80045fe:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8004602:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004606:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004608:	4b12      	ldr	r3, [pc, #72]	; (8004654 <SystemInit+0x88>)
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	4a11      	ldr	r2, [pc, #68]	; (8004654 <SystemInit+0x88>)
 800460e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004612:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004614:	4b0f      	ldr	r3, [pc, #60]	; (8004654 <SystemInit+0x88>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	4a0e      	ldr	r2, [pc, #56]	; (8004654 <SystemInit+0x88>)
 800461a:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800461e:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8004620:	4b0c      	ldr	r3, [pc, #48]	; (8004654 <SystemInit+0x88>)
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	4a0b      	ldr	r2, [pc, #44]	; (8004654 <SystemInit+0x88>)
 8004626:	f023 030f 	bic.w	r3, r3, #15
 800462a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 800462c:	4b09      	ldr	r3, [pc, #36]	; (8004654 <SystemInit+0x88>)
 800462e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004630:	4908      	ldr	r1, [pc, #32]	; (8004654 <SystemInit+0x88>)
 8004632:	4b0a      	ldr	r3, [pc, #40]	; (800465c <SystemInit+0x90>)
 8004634:	4013      	ands	r3, r2
 8004636:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004638:	4b06      	ldr	r3, [pc, #24]	; (8004654 <SystemInit+0x88>)
 800463a:	2200      	movs	r2, #0
 800463c:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800463e:	4b04      	ldr	r3, [pc, #16]	; (8004650 <SystemInit+0x84>)
 8004640:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004644:	609a      	str	r2, [r3, #8]
#endif
}
 8004646:	bf00      	nop
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr
 8004650:	e000ed00 	.word	0xe000ed00
 8004654:	40021000 	.word	0x40021000
 8004658:	f87fc00c 	.word	0xf87fc00c
 800465c:	ff00fccc 	.word	0xff00fccc

08004660 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004660:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004698 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004664:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004666:	e003      	b.n	8004670 <LoopCopyDataInit>

08004668 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004668:	4b0c      	ldr	r3, [pc, #48]	; (800469c <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800466a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800466c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800466e:	3104      	adds	r1, #4

08004670 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004670:	480b      	ldr	r0, [pc, #44]	; (80046a0 <LoopForever+0xa>)
	ldr	r3, =_edata
 8004672:	4b0c      	ldr	r3, [pc, #48]	; (80046a4 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004674:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004676:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004678:	d3f6      	bcc.n	8004668 <CopyDataInit>
	ldr	r2, =_sbss
 800467a:	4a0b      	ldr	r2, [pc, #44]	; (80046a8 <LoopForever+0x12>)
	b	LoopFillZerobss
 800467c:	e002      	b.n	8004684 <LoopFillZerobss>

0800467e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800467e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004680:	f842 3b04 	str.w	r3, [r2], #4

08004684 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004684:	4b09      	ldr	r3, [pc, #36]	; (80046ac <LoopForever+0x16>)
	cmp	r2, r3
 8004686:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004688:	d3f9      	bcc.n	800467e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800468a:	f7ff ff9f 	bl	80045cc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800468e:	f000 f817 	bl	80046c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8004692:	f7ff f981 	bl	8003998 <main>

08004696 <LoopForever>:

LoopForever:
    b LoopForever
 8004696:	e7fe      	b.n	8004696 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004698:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 800469c:	08006b40 	.word	0x08006b40
	ldr	r0, =_sdata
 80046a0:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80046a4:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 80046a8:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 80046ac:	20000170 	.word	0x20000170

080046b0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80046b0:	e7fe      	b.n	80046b0 <ADC1_2_IRQHandler>
	...

080046b4 <__errno>:
 80046b4:	4b01      	ldr	r3, [pc, #4]	; (80046bc <__errno+0x8>)
 80046b6:	6818      	ldr	r0, [r3, #0]
 80046b8:	4770      	bx	lr
 80046ba:	bf00      	nop
 80046bc:	2000001c 	.word	0x2000001c

080046c0 <__libc_init_array>:
 80046c0:	b570      	push	{r4, r5, r6, lr}
 80046c2:	4e0d      	ldr	r6, [pc, #52]	; (80046f8 <__libc_init_array+0x38>)
 80046c4:	4c0d      	ldr	r4, [pc, #52]	; (80046fc <__libc_init_array+0x3c>)
 80046c6:	1ba4      	subs	r4, r4, r6
 80046c8:	10a4      	asrs	r4, r4, #2
 80046ca:	2500      	movs	r5, #0
 80046cc:	42a5      	cmp	r5, r4
 80046ce:	d109      	bne.n	80046e4 <__libc_init_array+0x24>
 80046d0:	4e0b      	ldr	r6, [pc, #44]	; (8004700 <__libc_init_array+0x40>)
 80046d2:	4c0c      	ldr	r4, [pc, #48]	; (8004704 <__libc_init_array+0x44>)
 80046d4:	f000 ff7a 	bl	80055cc <_init>
 80046d8:	1ba4      	subs	r4, r4, r6
 80046da:	10a4      	asrs	r4, r4, #2
 80046dc:	2500      	movs	r5, #0
 80046de:	42a5      	cmp	r5, r4
 80046e0:	d105      	bne.n	80046ee <__libc_init_array+0x2e>
 80046e2:	bd70      	pop	{r4, r5, r6, pc}
 80046e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046e8:	4798      	blx	r3
 80046ea:	3501      	adds	r5, #1
 80046ec:	e7ee      	b.n	80046cc <__libc_init_array+0xc>
 80046ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80046f2:	4798      	blx	r3
 80046f4:	3501      	adds	r5, #1
 80046f6:	e7f2      	b.n	80046de <__libc_init_array+0x1e>
 80046f8:	08006b38 	.word	0x08006b38
 80046fc:	08006b38 	.word	0x08006b38
 8004700:	08006b38 	.word	0x08006b38
 8004704:	08006b3c 	.word	0x08006b3c

08004708 <malloc>:
 8004708:	4b02      	ldr	r3, [pc, #8]	; (8004714 <malloc+0xc>)
 800470a:	4601      	mov	r1, r0
 800470c:	6818      	ldr	r0, [r3, #0]
 800470e:	f000 b859 	b.w	80047c4 <_malloc_r>
 8004712:	bf00      	nop
 8004714:	2000001c 	.word	0x2000001c

08004718 <memset>:
 8004718:	4402      	add	r2, r0
 800471a:	4603      	mov	r3, r0
 800471c:	4293      	cmp	r3, r2
 800471e:	d100      	bne.n	8004722 <memset+0xa>
 8004720:	4770      	bx	lr
 8004722:	f803 1b01 	strb.w	r1, [r3], #1
 8004726:	e7f9      	b.n	800471c <memset+0x4>

08004728 <_free_r>:
 8004728:	b538      	push	{r3, r4, r5, lr}
 800472a:	4605      	mov	r5, r0
 800472c:	2900      	cmp	r1, #0
 800472e:	d045      	beq.n	80047bc <_free_r+0x94>
 8004730:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004734:	1f0c      	subs	r4, r1, #4
 8004736:	2b00      	cmp	r3, #0
 8004738:	bfb8      	it	lt
 800473a:	18e4      	addlt	r4, r4, r3
 800473c:	f000 f8cc 	bl	80048d8 <__malloc_lock>
 8004740:	4a1f      	ldr	r2, [pc, #124]	; (80047c0 <_free_r+0x98>)
 8004742:	6813      	ldr	r3, [r2, #0]
 8004744:	4610      	mov	r0, r2
 8004746:	b933      	cbnz	r3, 8004756 <_free_r+0x2e>
 8004748:	6063      	str	r3, [r4, #4]
 800474a:	6014      	str	r4, [r2, #0]
 800474c:	4628      	mov	r0, r5
 800474e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004752:	f000 b8c2 	b.w	80048da <__malloc_unlock>
 8004756:	42a3      	cmp	r3, r4
 8004758:	d90c      	bls.n	8004774 <_free_r+0x4c>
 800475a:	6821      	ldr	r1, [r4, #0]
 800475c:	1862      	adds	r2, r4, r1
 800475e:	4293      	cmp	r3, r2
 8004760:	bf04      	itt	eq
 8004762:	681a      	ldreq	r2, [r3, #0]
 8004764:	685b      	ldreq	r3, [r3, #4]
 8004766:	6063      	str	r3, [r4, #4]
 8004768:	bf04      	itt	eq
 800476a:	1852      	addeq	r2, r2, r1
 800476c:	6022      	streq	r2, [r4, #0]
 800476e:	6004      	str	r4, [r0, #0]
 8004770:	e7ec      	b.n	800474c <_free_r+0x24>
 8004772:	4613      	mov	r3, r2
 8004774:	685a      	ldr	r2, [r3, #4]
 8004776:	b10a      	cbz	r2, 800477c <_free_r+0x54>
 8004778:	42a2      	cmp	r2, r4
 800477a:	d9fa      	bls.n	8004772 <_free_r+0x4a>
 800477c:	6819      	ldr	r1, [r3, #0]
 800477e:	1858      	adds	r0, r3, r1
 8004780:	42a0      	cmp	r0, r4
 8004782:	d10b      	bne.n	800479c <_free_r+0x74>
 8004784:	6820      	ldr	r0, [r4, #0]
 8004786:	4401      	add	r1, r0
 8004788:	1858      	adds	r0, r3, r1
 800478a:	4282      	cmp	r2, r0
 800478c:	6019      	str	r1, [r3, #0]
 800478e:	d1dd      	bne.n	800474c <_free_r+0x24>
 8004790:	6810      	ldr	r0, [r2, #0]
 8004792:	6852      	ldr	r2, [r2, #4]
 8004794:	605a      	str	r2, [r3, #4]
 8004796:	4401      	add	r1, r0
 8004798:	6019      	str	r1, [r3, #0]
 800479a:	e7d7      	b.n	800474c <_free_r+0x24>
 800479c:	d902      	bls.n	80047a4 <_free_r+0x7c>
 800479e:	230c      	movs	r3, #12
 80047a0:	602b      	str	r3, [r5, #0]
 80047a2:	e7d3      	b.n	800474c <_free_r+0x24>
 80047a4:	6820      	ldr	r0, [r4, #0]
 80047a6:	1821      	adds	r1, r4, r0
 80047a8:	428a      	cmp	r2, r1
 80047aa:	bf04      	itt	eq
 80047ac:	6811      	ldreq	r1, [r2, #0]
 80047ae:	6852      	ldreq	r2, [r2, #4]
 80047b0:	6062      	str	r2, [r4, #4]
 80047b2:	bf04      	itt	eq
 80047b4:	1809      	addeq	r1, r1, r0
 80047b6:	6021      	streq	r1, [r4, #0]
 80047b8:	605c      	str	r4, [r3, #4]
 80047ba:	e7c7      	b.n	800474c <_free_r+0x24>
 80047bc:	bd38      	pop	{r3, r4, r5, pc}
 80047be:	bf00      	nop
 80047c0:	200000a4 	.word	0x200000a4

080047c4 <_malloc_r>:
 80047c4:	b570      	push	{r4, r5, r6, lr}
 80047c6:	1ccd      	adds	r5, r1, #3
 80047c8:	f025 0503 	bic.w	r5, r5, #3
 80047cc:	3508      	adds	r5, #8
 80047ce:	2d0c      	cmp	r5, #12
 80047d0:	bf38      	it	cc
 80047d2:	250c      	movcc	r5, #12
 80047d4:	2d00      	cmp	r5, #0
 80047d6:	4606      	mov	r6, r0
 80047d8:	db01      	blt.n	80047de <_malloc_r+0x1a>
 80047da:	42a9      	cmp	r1, r5
 80047dc:	d903      	bls.n	80047e6 <_malloc_r+0x22>
 80047de:	230c      	movs	r3, #12
 80047e0:	6033      	str	r3, [r6, #0]
 80047e2:	2000      	movs	r0, #0
 80047e4:	bd70      	pop	{r4, r5, r6, pc}
 80047e6:	f000 f877 	bl	80048d8 <__malloc_lock>
 80047ea:	4a21      	ldr	r2, [pc, #132]	; (8004870 <_malloc_r+0xac>)
 80047ec:	6814      	ldr	r4, [r2, #0]
 80047ee:	4621      	mov	r1, r4
 80047f0:	b991      	cbnz	r1, 8004818 <_malloc_r+0x54>
 80047f2:	4c20      	ldr	r4, [pc, #128]	; (8004874 <_malloc_r+0xb0>)
 80047f4:	6823      	ldr	r3, [r4, #0]
 80047f6:	b91b      	cbnz	r3, 8004800 <_malloc_r+0x3c>
 80047f8:	4630      	mov	r0, r6
 80047fa:	f000 f83d 	bl	8004878 <_sbrk_r>
 80047fe:	6020      	str	r0, [r4, #0]
 8004800:	4629      	mov	r1, r5
 8004802:	4630      	mov	r0, r6
 8004804:	f000 f838 	bl	8004878 <_sbrk_r>
 8004808:	1c43      	adds	r3, r0, #1
 800480a:	d124      	bne.n	8004856 <_malloc_r+0x92>
 800480c:	230c      	movs	r3, #12
 800480e:	6033      	str	r3, [r6, #0]
 8004810:	4630      	mov	r0, r6
 8004812:	f000 f862 	bl	80048da <__malloc_unlock>
 8004816:	e7e4      	b.n	80047e2 <_malloc_r+0x1e>
 8004818:	680b      	ldr	r3, [r1, #0]
 800481a:	1b5b      	subs	r3, r3, r5
 800481c:	d418      	bmi.n	8004850 <_malloc_r+0x8c>
 800481e:	2b0b      	cmp	r3, #11
 8004820:	d90f      	bls.n	8004842 <_malloc_r+0x7e>
 8004822:	600b      	str	r3, [r1, #0]
 8004824:	50cd      	str	r5, [r1, r3]
 8004826:	18cc      	adds	r4, r1, r3
 8004828:	4630      	mov	r0, r6
 800482a:	f000 f856 	bl	80048da <__malloc_unlock>
 800482e:	f104 000b 	add.w	r0, r4, #11
 8004832:	1d23      	adds	r3, r4, #4
 8004834:	f020 0007 	bic.w	r0, r0, #7
 8004838:	1ac3      	subs	r3, r0, r3
 800483a:	d0d3      	beq.n	80047e4 <_malloc_r+0x20>
 800483c:	425a      	negs	r2, r3
 800483e:	50e2      	str	r2, [r4, r3]
 8004840:	e7d0      	b.n	80047e4 <_malloc_r+0x20>
 8004842:	428c      	cmp	r4, r1
 8004844:	684b      	ldr	r3, [r1, #4]
 8004846:	bf16      	itet	ne
 8004848:	6063      	strne	r3, [r4, #4]
 800484a:	6013      	streq	r3, [r2, #0]
 800484c:	460c      	movne	r4, r1
 800484e:	e7eb      	b.n	8004828 <_malloc_r+0x64>
 8004850:	460c      	mov	r4, r1
 8004852:	6849      	ldr	r1, [r1, #4]
 8004854:	e7cc      	b.n	80047f0 <_malloc_r+0x2c>
 8004856:	1cc4      	adds	r4, r0, #3
 8004858:	f024 0403 	bic.w	r4, r4, #3
 800485c:	42a0      	cmp	r0, r4
 800485e:	d005      	beq.n	800486c <_malloc_r+0xa8>
 8004860:	1a21      	subs	r1, r4, r0
 8004862:	4630      	mov	r0, r6
 8004864:	f000 f808 	bl	8004878 <_sbrk_r>
 8004868:	3001      	adds	r0, #1
 800486a:	d0cf      	beq.n	800480c <_malloc_r+0x48>
 800486c:	6025      	str	r5, [r4, #0]
 800486e:	e7db      	b.n	8004828 <_malloc_r+0x64>
 8004870:	200000a4 	.word	0x200000a4
 8004874:	200000a8 	.word	0x200000a8

08004878 <_sbrk_r>:
 8004878:	b538      	push	{r3, r4, r5, lr}
 800487a:	4c06      	ldr	r4, [pc, #24]	; (8004894 <_sbrk_r+0x1c>)
 800487c:	2300      	movs	r3, #0
 800487e:	4605      	mov	r5, r0
 8004880:	4608      	mov	r0, r1
 8004882:	6023      	str	r3, [r4, #0]
 8004884:	f7ff fe76 	bl	8004574 <_sbrk>
 8004888:	1c43      	adds	r3, r0, #1
 800488a:	d102      	bne.n	8004892 <_sbrk_r+0x1a>
 800488c:	6823      	ldr	r3, [r4, #0]
 800488e:	b103      	cbz	r3, 8004892 <_sbrk_r+0x1a>
 8004890:	602b      	str	r3, [r5, #0]
 8004892:	bd38      	pop	{r3, r4, r5, pc}
 8004894:	2000016c 	.word	0x2000016c

08004898 <siprintf>:
 8004898:	b40e      	push	{r1, r2, r3}
 800489a:	b500      	push	{lr}
 800489c:	b09c      	sub	sp, #112	; 0x70
 800489e:	ab1d      	add	r3, sp, #116	; 0x74
 80048a0:	9002      	str	r0, [sp, #8]
 80048a2:	9006      	str	r0, [sp, #24]
 80048a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80048a8:	4809      	ldr	r0, [pc, #36]	; (80048d0 <siprintf+0x38>)
 80048aa:	9107      	str	r1, [sp, #28]
 80048ac:	9104      	str	r1, [sp, #16]
 80048ae:	4909      	ldr	r1, [pc, #36]	; (80048d4 <siprintf+0x3c>)
 80048b0:	f853 2b04 	ldr.w	r2, [r3], #4
 80048b4:	9105      	str	r1, [sp, #20]
 80048b6:	6800      	ldr	r0, [r0, #0]
 80048b8:	9301      	str	r3, [sp, #4]
 80048ba:	a902      	add	r1, sp, #8
 80048bc:	f000 f868 	bl	8004990 <_svfiprintf_r>
 80048c0:	9b02      	ldr	r3, [sp, #8]
 80048c2:	2200      	movs	r2, #0
 80048c4:	701a      	strb	r2, [r3, #0]
 80048c6:	b01c      	add	sp, #112	; 0x70
 80048c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80048cc:	b003      	add	sp, #12
 80048ce:	4770      	bx	lr
 80048d0:	2000001c 	.word	0x2000001c
 80048d4:	ffff0208 	.word	0xffff0208

080048d8 <__malloc_lock>:
 80048d8:	4770      	bx	lr

080048da <__malloc_unlock>:
 80048da:	4770      	bx	lr

080048dc <__ssputs_r>:
 80048dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e0:	688e      	ldr	r6, [r1, #8]
 80048e2:	429e      	cmp	r6, r3
 80048e4:	4682      	mov	sl, r0
 80048e6:	460c      	mov	r4, r1
 80048e8:	4690      	mov	r8, r2
 80048ea:	4699      	mov	r9, r3
 80048ec:	d837      	bhi.n	800495e <__ssputs_r+0x82>
 80048ee:	898a      	ldrh	r2, [r1, #12]
 80048f0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80048f4:	d031      	beq.n	800495a <__ssputs_r+0x7e>
 80048f6:	6825      	ldr	r5, [r4, #0]
 80048f8:	6909      	ldr	r1, [r1, #16]
 80048fa:	1a6f      	subs	r7, r5, r1
 80048fc:	6965      	ldr	r5, [r4, #20]
 80048fe:	2302      	movs	r3, #2
 8004900:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004904:	fb95 f5f3 	sdiv	r5, r5, r3
 8004908:	f109 0301 	add.w	r3, r9, #1
 800490c:	443b      	add	r3, r7
 800490e:	429d      	cmp	r5, r3
 8004910:	bf38      	it	cc
 8004912:	461d      	movcc	r5, r3
 8004914:	0553      	lsls	r3, r2, #21
 8004916:	d530      	bpl.n	800497a <__ssputs_r+0x9e>
 8004918:	4629      	mov	r1, r5
 800491a:	f7ff ff53 	bl	80047c4 <_malloc_r>
 800491e:	4606      	mov	r6, r0
 8004920:	b950      	cbnz	r0, 8004938 <__ssputs_r+0x5c>
 8004922:	230c      	movs	r3, #12
 8004924:	f8ca 3000 	str.w	r3, [sl]
 8004928:	89a3      	ldrh	r3, [r4, #12]
 800492a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800492e:	81a3      	strh	r3, [r4, #12]
 8004930:	f04f 30ff 	mov.w	r0, #4294967295
 8004934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004938:	463a      	mov	r2, r7
 800493a:	6921      	ldr	r1, [r4, #16]
 800493c:	f000 faa8 	bl	8004e90 <memcpy>
 8004940:	89a3      	ldrh	r3, [r4, #12]
 8004942:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004946:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800494a:	81a3      	strh	r3, [r4, #12]
 800494c:	6126      	str	r6, [r4, #16]
 800494e:	6165      	str	r5, [r4, #20]
 8004950:	443e      	add	r6, r7
 8004952:	1bed      	subs	r5, r5, r7
 8004954:	6026      	str	r6, [r4, #0]
 8004956:	60a5      	str	r5, [r4, #8]
 8004958:	464e      	mov	r6, r9
 800495a:	454e      	cmp	r6, r9
 800495c:	d900      	bls.n	8004960 <__ssputs_r+0x84>
 800495e:	464e      	mov	r6, r9
 8004960:	4632      	mov	r2, r6
 8004962:	4641      	mov	r1, r8
 8004964:	6820      	ldr	r0, [r4, #0]
 8004966:	f000 fa9e 	bl	8004ea6 <memmove>
 800496a:	68a3      	ldr	r3, [r4, #8]
 800496c:	1b9b      	subs	r3, r3, r6
 800496e:	60a3      	str	r3, [r4, #8]
 8004970:	6823      	ldr	r3, [r4, #0]
 8004972:	441e      	add	r6, r3
 8004974:	6026      	str	r6, [r4, #0]
 8004976:	2000      	movs	r0, #0
 8004978:	e7dc      	b.n	8004934 <__ssputs_r+0x58>
 800497a:	462a      	mov	r2, r5
 800497c:	f000 faac 	bl	8004ed8 <_realloc_r>
 8004980:	4606      	mov	r6, r0
 8004982:	2800      	cmp	r0, #0
 8004984:	d1e2      	bne.n	800494c <__ssputs_r+0x70>
 8004986:	6921      	ldr	r1, [r4, #16]
 8004988:	4650      	mov	r0, sl
 800498a:	f7ff fecd 	bl	8004728 <_free_r>
 800498e:	e7c8      	b.n	8004922 <__ssputs_r+0x46>

08004990 <_svfiprintf_r>:
 8004990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004994:	461d      	mov	r5, r3
 8004996:	898b      	ldrh	r3, [r1, #12]
 8004998:	061f      	lsls	r7, r3, #24
 800499a:	b09d      	sub	sp, #116	; 0x74
 800499c:	4680      	mov	r8, r0
 800499e:	460c      	mov	r4, r1
 80049a0:	4616      	mov	r6, r2
 80049a2:	d50f      	bpl.n	80049c4 <_svfiprintf_r+0x34>
 80049a4:	690b      	ldr	r3, [r1, #16]
 80049a6:	b96b      	cbnz	r3, 80049c4 <_svfiprintf_r+0x34>
 80049a8:	2140      	movs	r1, #64	; 0x40
 80049aa:	f7ff ff0b 	bl	80047c4 <_malloc_r>
 80049ae:	6020      	str	r0, [r4, #0]
 80049b0:	6120      	str	r0, [r4, #16]
 80049b2:	b928      	cbnz	r0, 80049c0 <_svfiprintf_r+0x30>
 80049b4:	230c      	movs	r3, #12
 80049b6:	f8c8 3000 	str.w	r3, [r8]
 80049ba:	f04f 30ff 	mov.w	r0, #4294967295
 80049be:	e0c8      	b.n	8004b52 <_svfiprintf_r+0x1c2>
 80049c0:	2340      	movs	r3, #64	; 0x40
 80049c2:	6163      	str	r3, [r4, #20]
 80049c4:	2300      	movs	r3, #0
 80049c6:	9309      	str	r3, [sp, #36]	; 0x24
 80049c8:	2320      	movs	r3, #32
 80049ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80049ce:	2330      	movs	r3, #48	; 0x30
 80049d0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80049d4:	9503      	str	r5, [sp, #12]
 80049d6:	f04f 0b01 	mov.w	fp, #1
 80049da:	4637      	mov	r7, r6
 80049dc:	463d      	mov	r5, r7
 80049de:	f815 3b01 	ldrb.w	r3, [r5], #1
 80049e2:	b10b      	cbz	r3, 80049e8 <_svfiprintf_r+0x58>
 80049e4:	2b25      	cmp	r3, #37	; 0x25
 80049e6:	d13e      	bne.n	8004a66 <_svfiprintf_r+0xd6>
 80049e8:	ebb7 0a06 	subs.w	sl, r7, r6
 80049ec:	d00b      	beq.n	8004a06 <_svfiprintf_r+0x76>
 80049ee:	4653      	mov	r3, sl
 80049f0:	4632      	mov	r2, r6
 80049f2:	4621      	mov	r1, r4
 80049f4:	4640      	mov	r0, r8
 80049f6:	f7ff ff71 	bl	80048dc <__ssputs_r>
 80049fa:	3001      	adds	r0, #1
 80049fc:	f000 80a4 	beq.w	8004b48 <_svfiprintf_r+0x1b8>
 8004a00:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a02:	4453      	add	r3, sl
 8004a04:	9309      	str	r3, [sp, #36]	; 0x24
 8004a06:	783b      	ldrb	r3, [r7, #0]
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	f000 809d 	beq.w	8004b48 <_svfiprintf_r+0x1b8>
 8004a0e:	2300      	movs	r3, #0
 8004a10:	f04f 32ff 	mov.w	r2, #4294967295
 8004a14:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004a18:	9304      	str	r3, [sp, #16]
 8004a1a:	9307      	str	r3, [sp, #28]
 8004a1c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004a20:	931a      	str	r3, [sp, #104]	; 0x68
 8004a22:	462f      	mov	r7, r5
 8004a24:	2205      	movs	r2, #5
 8004a26:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004a2a:	4850      	ldr	r0, [pc, #320]	; (8004b6c <_svfiprintf_r+0x1dc>)
 8004a2c:	f7fb fbd0 	bl	80001d0 <memchr>
 8004a30:	9b04      	ldr	r3, [sp, #16]
 8004a32:	b9d0      	cbnz	r0, 8004a6a <_svfiprintf_r+0xda>
 8004a34:	06d9      	lsls	r1, r3, #27
 8004a36:	bf44      	itt	mi
 8004a38:	2220      	movmi	r2, #32
 8004a3a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a3e:	071a      	lsls	r2, r3, #28
 8004a40:	bf44      	itt	mi
 8004a42:	222b      	movmi	r2, #43	; 0x2b
 8004a44:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004a48:	782a      	ldrb	r2, [r5, #0]
 8004a4a:	2a2a      	cmp	r2, #42	; 0x2a
 8004a4c:	d015      	beq.n	8004a7a <_svfiprintf_r+0xea>
 8004a4e:	9a07      	ldr	r2, [sp, #28]
 8004a50:	462f      	mov	r7, r5
 8004a52:	2000      	movs	r0, #0
 8004a54:	250a      	movs	r5, #10
 8004a56:	4639      	mov	r1, r7
 8004a58:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004a5c:	3b30      	subs	r3, #48	; 0x30
 8004a5e:	2b09      	cmp	r3, #9
 8004a60:	d94d      	bls.n	8004afe <_svfiprintf_r+0x16e>
 8004a62:	b1b8      	cbz	r0, 8004a94 <_svfiprintf_r+0x104>
 8004a64:	e00f      	b.n	8004a86 <_svfiprintf_r+0xf6>
 8004a66:	462f      	mov	r7, r5
 8004a68:	e7b8      	b.n	80049dc <_svfiprintf_r+0x4c>
 8004a6a:	4a40      	ldr	r2, [pc, #256]	; (8004b6c <_svfiprintf_r+0x1dc>)
 8004a6c:	1a80      	subs	r0, r0, r2
 8004a6e:	fa0b f000 	lsl.w	r0, fp, r0
 8004a72:	4318      	orrs	r0, r3
 8004a74:	9004      	str	r0, [sp, #16]
 8004a76:	463d      	mov	r5, r7
 8004a78:	e7d3      	b.n	8004a22 <_svfiprintf_r+0x92>
 8004a7a:	9a03      	ldr	r2, [sp, #12]
 8004a7c:	1d11      	adds	r1, r2, #4
 8004a7e:	6812      	ldr	r2, [r2, #0]
 8004a80:	9103      	str	r1, [sp, #12]
 8004a82:	2a00      	cmp	r2, #0
 8004a84:	db01      	blt.n	8004a8a <_svfiprintf_r+0xfa>
 8004a86:	9207      	str	r2, [sp, #28]
 8004a88:	e004      	b.n	8004a94 <_svfiprintf_r+0x104>
 8004a8a:	4252      	negs	r2, r2
 8004a8c:	f043 0302 	orr.w	r3, r3, #2
 8004a90:	9207      	str	r2, [sp, #28]
 8004a92:	9304      	str	r3, [sp, #16]
 8004a94:	783b      	ldrb	r3, [r7, #0]
 8004a96:	2b2e      	cmp	r3, #46	; 0x2e
 8004a98:	d10c      	bne.n	8004ab4 <_svfiprintf_r+0x124>
 8004a9a:	787b      	ldrb	r3, [r7, #1]
 8004a9c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a9e:	d133      	bne.n	8004b08 <_svfiprintf_r+0x178>
 8004aa0:	9b03      	ldr	r3, [sp, #12]
 8004aa2:	1d1a      	adds	r2, r3, #4
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	9203      	str	r2, [sp, #12]
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	bfb8      	it	lt
 8004aac:	f04f 33ff 	movlt.w	r3, #4294967295
 8004ab0:	3702      	adds	r7, #2
 8004ab2:	9305      	str	r3, [sp, #20]
 8004ab4:	4d2e      	ldr	r5, [pc, #184]	; (8004b70 <_svfiprintf_r+0x1e0>)
 8004ab6:	7839      	ldrb	r1, [r7, #0]
 8004ab8:	2203      	movs	r2, #3
 8004aba:	4628      	mov	r0, r5
 8004abc:	f7fb fb88 	bl	80001d0 <memchr>
 8004ac0:	b138      	cbz	r0, 8004ad2 <_svfiprintf_r+0x142>
 8004ac2:	2340      	movs	r3, #64	; 0x40
 8004ac4:	1b40      	subs	r0, r0, r5
 8004ac6:	fa03 f000 	lsl.w	r0, r3, r0
 8004aca:	9b04      	ldr	r3, [sp, #16]
 8004acc:	4303      	orrs	r3, r0
 8004ace:	3701      	adds	r7, #1
 8004ad0:	9304      	str	r3, [sp, #16]
 8004ad2:	7839      	ldrb	r1, [r7, #0]
 8004ad4:	4827      	ldr	r0, [pc, #156]	; (8004b74 <_svfiprintf_r+0x1e4>)
 8004ad6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004ada:	2206      	movs	r2, #6
 8004adc:	1c7e      	adds	r6, r7, #1
 8004ade:	f7fb fb77 	bl	80001d0 <memchr>
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	d038      	beq.n	8004b58 <_svfiprintf_r+0x1c8>
 8004ae6:	4b24      	ldr	r3, [pc, #144]	; (8004b78 <_svfiprintf_r+0x1e8>)
 8004ae8:	bb13      	cbnz	r3, 8004b30 <_svfiprintf_r+0x1a0>
 8004aea:	9b03      	ldr	r3, [sp, #12]
 8004aec:	3307      	adds	r3, #7
 8004aee:	f023 0307 	bic.w	r3, r3, #7
 8004af2:	3308      	adds	r3, #8
 8004af4:	9303      	str	r3, [sp, #12]
 8004af6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004af8:	444b      	add	r3, r9
 8004afa:	9309      	str	r3, [sp, #36]	; 0x24
 8004afc:	e76d      	b.n	80049da <_svfiprintf_r+0x4a>
 8004afe:	fb05 3202 	mla	r2, r5, r2, r3
 8004b02:	2001      	movs	r0, #1
 8004b04:	460f      	mov	r7, r1
 8004b06:	e7a6      	b.n	8004a56 <_svfiprintf_r+0xc6>
 8004b08:	2300      	movs	r3, #0
 8004b0a:	3701      	adds	r7, #1
 8004b0c:	9305      	str	r3, [sp, #20]
 8004b0e:	4619      	mov	r1, r3
 8004b10:	250a      	movs	r5, #10
 8004b12:	4638      	mov	r0, r7
 8004b14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004b18:	3a30      	subs	r2, #48	; 0x30
 8004b1a:	2a09      	cmp	r2, #9
 8004b1c:	d903      	bls.n	8004b26 <_svfiprintf_r+0x196>
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d0c8      	beq.n	8004ab4 <_svfiprintf_r+0x124>
 8004b22:	9105      	str	r1, [sp, #20]
 8004b24:	e7c6      	b.n	8004ab4 <_svfiprintf_r+0x124>
 8004b26:	fb05 2101 	mla	r1, r5, r1, r2
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	4607      	mov	r7, r0
 8004b2e:	e7f0      	b.n	8004b12 <_svfiprintf_r+0x182>
 8004b30:	ab03      	add	r3, sp, #12
 8004b32:	9300      	str	r3, [sp, #0]
 8004b34:	4622      	mov	r2, r4
 8004b36:	4b11      	ldr	r3, [pc, #68]	; (8004b7c <_svfiprintf_r+0x1ec>)
 8004b38:	a904      	add	r1, sp, #16
 8004b3a:	4640      	mov	r0, r8
 8004b3c:	f3af 8000 	nop.w
 8004b40:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004b44:	4681      	mov	r9, r0
 8004b46:	d1d6      	bne.n	8004af6 <_svfiprintf_r+0x166>
 8004b48:	89a3      	ldrh	r3, [r4, #12]
 8004b4a:	065b      	lsls	r3, r3, #25
 8004b4c:	f53f af35 	bmi.w	80049ba <_svfiprintf_r+0x2a>
 8004b50:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004b52:	b01d      	add	sp, #116	; 0x74
 8004b54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b58:	ab03      	add	r3, sp, #12
 8004b5a:	9300      	str	r3, [sp, #0]
 8004b5c:	4622      	mov	r2, r4
 8004b5e:	4b07      	ldr	r3, [pc, #28]	; (8004b7c <_svfiprintf_r+0x1ec>)
 8004b60:	a904      	add	r1, sp, #16
 8004b62:	4640      	mov	r0, r8
 8004b64:	f000 f882 	bl	8004c6c <_printf_i>
 8004b68:	e7ea      	b.n	8004b40 <_svfiprintf_r+0x1b0>
 8004b6a:	bf00      	nop
 8004b6c:	08006afc 	.word	0x08006afc
 8004b70:	08006b02 	.word	0x08006b02
 8004b74:	08006b06 	.word	0x08006b06
 8004b78:	00000000 	.word	0x00000000
 8004b7c:	080048dd 	.word	0x080048dd

08004b80 <_printf_common>:
 8004b80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b84:	4691      	mov	r9, r2
 8004b86:	461f      	mov	r7, r3
 8004b88:	688a      	ldr	r2, [r1, #8]
 8004b8a:	690b      	ldr	r3, [r1, #16]
 8004b8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b90:	4293      	cmp	r3, r2
 8004b92:	bfb8      	it	lt
 8004b94:	4613      	movlt	r3, r2
 8004b96:	f8c9 3000 	str.w	r3, [r9]
 8004b9a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b9e:	4606      	mov	r6, r0
 8004ba0:	460c      	mov	r4, r1
 8004ba2:	b112      	cbz	r2, 8004baa <_printf_common+0x2a>
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	f8c9 3000 	str.w	r3, [r9]
 8004baa:	6823      	ldr	r3, [r4, #0]
 8004bac:	0699      	lsls	r1, r3, #26
 8004bae:	bf42      	ittt	mi
 8004bb0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004bb4:	3302      	addmi	r3, #2
 8004bb6:	f8c9 3000 	strmi.w	r3, [r9]
 8004bba:	6825      	ldr	r5, [r4, #0]
 8004bbc:	f015 0506 	ands.w	r5, r5, #6
 8004bc0:	d107      	bne.n	8004bd2 <_printf_common+0x52>
 8004bc2:	f104 0a19 	add.w	sl, r4, #25
 8004bc6:	68e3      	ldr	r3, [r4, #12]
 8004bc8:	f8d9 2000 	ldr.w	r2, [r9]
 8004bcc:	1a9b      	subs	r3, r3, r2
 8004bce:	42ab      	cmp	r3, r5
 8004bd0:	dc28      	bgt.n	8004c24 <_printf_common+0xa4>
 8004bd2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004bd6:	6822      	ldr	r2, [r4, #0]
 8004bd8:	3300      	adds	r3, #0
 8004bda:	bf18      	it	ne
 8004bdc:	2301      	movne	r3, #1
 8004bde:	0692      	lsls	r2, r2, #26
 8004be0:	d42d      	bmi.n	8004c3e <_printf_common+0xbe>
 8004be2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004be6:	4639      	mov	r1, r7
 8004be8:	4630      	mov	r0, r6
 8004bea:	47c0      	blx	r8
 8004bec:	3001      	adds	r0, #1
 8004bee:	d020      	beq.n	8004c32 <_printf_common+0xb2>
 8004bf0:	6823      	ldr	r3, [r4, #0]
 8004bf2:	68e5      	ldr	r5, [r4, #12]
 8004bf4:	f8d9 2000 	ldr.w	r2, [r9]
 8004bf8:	f003 0306 	and.w	r3, r3, #6
 8004bfc:	2b04      	cmp	r3, #4
 8004bfe:	bf08      	it	eq
 8004c00:	1aad      	subeq	r5, r5, r2
 8004c02:	68a3      	ldr	r3, [r4, #8]
 8004c04:	6922      	ldr	r2, [r4, #16]
 8004c06:	bf0c      	ite	eq
 8004c08:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004c0c:	2500      	movne	r5, #0
 8004c0e:	4293      	cmp	r3, r2
 8004c10:	bfc4      	itt	gt
 8004c12:	1a9b      	subgt	r3, r3, r2
 8004c14:	18ed      	addgt	r5, r5, r3
 8004c16:	f04f 0900 	mov.w	r9, #0
 8004c1a:	341a      	adds	r4, #26
 8004c1c:	454d      	cmp	r5, r9
 8004c1e:	d11a      	bne.n	8004c56 <_printf_common+0xd6>
 8004c20:	2000      	movs	r0, #0
 8004c22:	e008      	b.n	8004c36 <_printf_common+0xb6>
 8004c24:	2301      	movs	r3, #1
 8004c26:	4652      	mov	r2, sl
 8004c28:	4639      	mov	r1, r7
 8004c2a:	4630      	mov	r0, r6
 8004c2c:	47c0      	blx	r8
 8004c2e:	3001      	adds	r0, #1
 8004c30:	d103      	bne.n	8004c3a <_printf_common+0xba>
 8004c32:	f04f 30ff 	mov.w	r0, #4294967295
 8004c36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004c3a:	3501      	adds	r5, #1
 8004c3c:	e7c3      	b.n	8004bc6 <_printf_common+0x46>
 8004c3e:	18e1      	adds	r1, r4, r3
 8004c40:	1c5a      	adds	r2, r3, #1
 8004c42:	2030      	movs	r0, #48	; 0x30
 8004c44:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004c48:	4422      	add	r2, r4
 8004c4a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004c4e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004c52:	3302      	adds	r3, #2
 8004c54:	e7c5      	b.n	8004be2 <_printf_common+0x62>
 8004c56:	2301      	movs	r3, #1
 8004c58:	4622      	mov	r2, r4
 8004c5a:	4639      	mov	r1, r7
 8004c5c:	4630      	mov	r0, r6
 8004c5e:	47c0      	blx	r8
 8004c60:	3001      	adds	r0, #1
 8004c62:	d0e6      	beq.n	8004c32 <_printf_common+0xb2>
 8004c64:	f109 0901 	add.w	r9, r9, #1
 8004c68:	e7d8      	b.n	8004c1c <_printf_common+0x9c>
	...

08004c6c <_printf_i>:
 8004c6c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c70:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004c74:	460c      	mov	r4, r1
 8004c76:	7e09      	ldrb	r1, [r1, #24]
 8004c78:	b085      	sub	sp, #20
 8004c7a:	296e      	cmp	r1, #110	; 0x6e
 8004c7c:	4617      	mov	r7, r2
 8004c7e:	4606      	mov	r6, r0
 8004c80:	4698      	mov	r8, r3
 8004c82:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004c84:	f000 80b3 	beq.w	8004dee <_printf_i+0x182>
 8004c88:	d822      	bhi.n	8004cd0 <_printf_i+0x64>
 8004c8a:	2963      	cmp	r1, #99	; 0x63
 8004c8c:	d036      	beq.n	8004cfc <_printf_i+0x90>
 8004c8e:	d80a      	bhi.n	8004ca6 <_printf_i+0x3a>
 8004c90:	2900      	cmp	r1, #0
 8004c92:	f000 80b9 	beq.w	8004e08 <_printf_i+0x19c>
 8004c96:	2958      	cmp	r1, #88	; 0x58
 8004c98:	f000 8083 	beq.w	8004da2 <_printf_i+0x136>
 8004c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ca0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004ca4:	e032      	b.n	8004d0c <_printf_i+0xa0>
 8004ca6:	2964      	cmp	r1, #100	; 0x64
 8004ca8:	d001      	beq.n	8004cae <_printf_i+0x42>
 8004caa:	2969      	cmp	r1, #105	; 0x69
 8004cac:	d1f6      	bne.n	8004c9c <_printf_i+0x30>
 8004cae:	6820      	ldr	r0, [r4, #0]
 8004cb0:	6813      	ldr	r3, [r2, #0]
 8004cb2:	0605      	lsls	r5, r0, #24
 8004cb4:	f103 0104 	add.w	r1, r3, #4
 8004cb8:	d52a      	bpl.n	8004d10 <_printf_i+0xa4>
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	6011      	str	r1, [r2, #0]
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	da03      	bge.n	8004cca <_printf_i+0x5e>
 8004cc2:	222d      	movs	r2, #45	; 0x2d
 8004cc4:	425b      	negs	r3, r3
 8004cc6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004cca:	486f      	ldr	r0, [pc, #444]	; (8004e88 <_printf_i+0x21c>)
 8004ccc:	220a      	movs	r2, #10
 8004cce:	e039      	b.n	8004d44 <_printf_i+0xd8>
 8004cd0:	2973      	cmp	r1, #115	; 0x73
 8004cd2:	f000 809d 	beq.w	8004e10 <_printf_i+0x1a4>
 8004cd6:	d808      	bhi.n	8004cea <_printf_i+0x7e>
 8004cd8:	296f      	cmp	r1, #111	; 0x6f
 8004cda:	d020      	beq.n	8004d1e <_printf_i+0xb2>
 8004cdc:	2970      	cmp	r1, #112	; 0x70
 8004cde:	d1dd      	bne.n	8004c9c <_printf_i+0x30>
 8004ce0:	6823      	ldr	r3, [r4, #0]
 8004ce2:	f043 0320 	orr.w	r3, r3, #32
 8004ce6:	6023      	str	r3, [r4, #0]
 8004ce8:	e003      	b.n	8004cf2 <_printf_i+0x86>
 8004cea:	2975      	cmp	r1, #117	; 0x75
 8004cec:	d017      	beq.n	8004d1e <_printf_i+0xb2>
 8004cee:	2978      	cmp	r1, #120	; 0x78
 8004cf0:	d1d4      	bne.n	8004c9c <_printf_i+0x30>
 8004cf2:	2378      	movs	r3, #120	; 0x78
 8004cf4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004cf8:	4864      	ldr	r0, [pc, #400]	; (8004e8c <_printf_i+0x220>)
 8004cfa:	e055      	b.n	8004da8 <_printf_i+0x13c>
 8004cfc:	6813      	ldr	r3, [r2, #0]
 8004cfe:	1d19      	adds	r1, r3, #4
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	6011      	str	r1, [r2, #0]
 8004d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d08:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	e08c      	b.n	8004e2a <_printf_i+0x1be>
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	6011      	str	r1, [r2, #0]
 8004d14:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004d18:	bf18      	it	ne
 8004d1a:	b21b      	sxthne	r3, r3
 8004d1c:	e7cf      	b.n	8004cbe <_printf_i+0x52>
 8004d1e:	6813      	ldr	r3, [r2, #0]
 8004d20:	6825      	ldr	r5, [r4, #0]
 8004d22:	1d18      	adds	r0, r3, #4
 8004d24:	6010      	str	r0, [r2, #0]
 8004d26:	0628      	lsls	r0, r5, #24
 8004d28:	d501      	bpl.n	8004d2e <_printf_i+0xc2>
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	e002      	b.n	8004d34 <_printf_i+0xc8>
 8004d2e:	0668      	lsls	r0, r5, #25
 8004d30:	d5fb      	bpl.n	8004d2a <_printf_i+0xbe>
 8004d32:	881b      	ldrh	r3, [r3, #0]
 8004d34:	4854      	ldr	r0, [pc, #336]	; (8004e88 <_printf_i+0x21c>)
 8004d36:	296f      	cmp	r1, #111	; 0x6f
 8004d38:	bf14      	ite	ne
 8004d3a:	220a      	movne	r2, #10
 8004d3c:	2208      	moveq	r2, #8
 8004d3e:	2100      	movs	r1, #0
 8004d40:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004d44:	6865      	ldr	r5, [r4, #4]
 8004d46:	60a5      	str	r5, [r4, #8]
 8004d48:	2d00      	cmp	r5, #0
 8004d4a:	f2c0 8095 	blt.w	8004e78 <_printf_i+0x20c>
 8004d4e:	6821      	ldr	r1, [r4, #0]
 8004d50:	f021 0104 	bic.w	r1, r1, #4
 8004d54:	6021      	str	r1, [r4, #0]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d13d      	bne.n	8004dd6 <_printf_i+0x16a>
 8004d5a:	2d00      	cmp	r5, #0
 8004d5c:	f040 808e 	bne.w	8004e7c <_printf_i+0x210>
 8004d60:	4665      	mov	r5, ip
 8004d62:	2a08      	cmp	r2, #8
 8004d64:	d10b      	bne.n	8004d7e <_printf_i+0x112>
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	07db      	lsls	r3, r3, #31
 8004d6a:	d508      	bpl.n	8004d7e <_printf_i+0x112>
 8004d6c:	6923      	ldr	r3, [r4, #16]
 8004d6e:	6862      	ldr	r2, [r4, #4]
 8004d70:	429a      	cmp	r2, r3
 8004d72:	bfde      	ittt	le
 8004d74:	2330      	movle	r3, #48	; 0x30
 8004d76:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d7a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004d7e:	ebac 0305 	sub.w	r3, ip, r5
 8004d82:	6123      	str	r3, [r4, #16]
 8004d84:	f8cd 8000 	str.w	r8, [sp]
 8004d88:	463b      	mov	r3, r7
 8004d8a:	aa03      	add	r2, sp, #12
 8004d8c:	4621      	mov	r1, r4
 8004d8e:	4630      	mov	r0, r6
 8004d90:	f7ff fef6 	bl	8004b80 <_printf_common>
 8004d94:	3001      	adds	r0, #1
 8004d96:	d14d      	bne.n	8004e34 <_printf_i+0x1c8>
 8004d98:	f04f 30ff 	mov.w	r0, #4294967295
 8004d9c:	b005      	add	sp, #20
 8004d9e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004da2:	4839      	ldr	r0, [pc, #228]	; (8004e88 <_printf_i+0x21c>)
 8004da4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004da8:	6813      	ldr	r3, [r2, #0]
 8004daa:	6821      	ldr	r1, [r4, #0]
 8004dac:	1d1d      	adds	r5, r3, #4
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	6015      	str	r5, [r2, #0]
 8004db2:	060a      	lsls	r2, r1, #24
 8004db4:	d50b      	bpl.n	8004dce <_printf_i+0x162>
 8004db6:	07ca      	lsls	r2, r1, #31
 8004db8:	bf44      	itt	mi
 8004dba:	f041 0120 	orrmi.w	r1, r1, #32
 8004dbe:	6021      	strmi	r1, [r4, #0]
 8004dc0:	b91b      	cbnz	r3, 8004dca <_printf_i+0x15e>
 8004dc2:	6822      	ldr	r2, [r4, #0]
 8004dc4:	f022 0220 	bic.w	r2, r2, #32
 8004dc8:	6022      	str	r2, [r4, #0]
 8004dca:	2210      	movs	r2, #16
 8004dcc:	e7b7      	b.n	8004d3e <_printf_i+0xd2>
 8004dce:	064d      	lsls	r5, r1, #25
 8004dd0:	bf48      	it	mi
 8004dd2:	b29b      	uxthmi	r3, r3
 8004dd4:	e7ef      	b.n	8004db6 <_printf_i+0x14a>
 8004dd6:	4665      	mov	r5, ip
 8004dd8:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ddc:	fb02 3311 	mls	r3, r2, r1, r3
 8004de0:	5cc3      	ldrb	r3, [r0, r3]
 8004de2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004de6:	460b      	mov	r3, r1
 8004de8:	2900      	cmp	r1, #0
 8004dea:	d1f5      	bne.n	8004dd8 <_printf_i+0x16c>
 8004dec:	e7b9      	b.n	8004d62 <_printf_i+0xf6>
 8004dee:	6813      	ldr	r3, [r2, #0]
 8004df0:	6825      	ldr	r5, [r4, #0]
 8004df2:	6961      	ldr	r1, [r4, #20]
 8004df4:	1d18      	adds	r0, r3, #4
 8004df6:	6010      	str	r0, [r2, #0]
 8004df8:	0628      	lsls	r0, r5, #24
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	d501      	bpl.n	8004e02 <_printf_i+0x196>
 8004dfe:	6019      	str	r1, [r3, #0]
 8004e00:	e002      	b.n	8004e08 <_printf_i+0x19c>
 8004e02:	066a      	lsls	r2, r5, #25
 8004e04:	d5fb      	bpl.n	8004dfe <_printf_i+0x192>
 8004e06:	8019      	strh	r1, [r3, #0]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	6123      	str	r3, [r4, #16]
 8004e0c:	4665      	mov	r5, ip
 8004e0e:	e7b9      	b.n	8004d84 <_printf_i+0x118>
 8004e10:	6813      	ldr	r3, [r2, #0]
 8004e12:	1d19      	adds	r1, r3, #4
 8004e14:	6011      	str	r1, [r2, #0]
 8004e16:	681d      	ldr	r5, [r3, #0]
 8004e18:	6862      	ldr	r2, [r4, #4]
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4628      	mov	r0, r5
 8004e1e:	f7fb f9d7 	bl	80001d0 <memchr>
 8004e22:	b108      	cbz	r0, 8004e28 <_printf_i+0x1bc>
 8004e24:	1b40      	subs	r0, r0, r5
 8004e26:	6060      	str	r0, [r4, #4]
 8004e28:	6863      	ldr	r3, [r4, #4]
 8004e2a:	6123      	str	r3, [r4, #16]
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e32:	e7a7      	b.n	8004d84 <_printf_i+0x118>
 8004e34:	6923      	ldr	r3, [r4, #16]
 8004e36:	462a      	mov	r2, r5
 8004e38:	4639      	mov	r1, r7
 8004e3a:	4630      	mov	r0, r6
 8004e3c:	47c0      	blx	r8
 8004e3e:	3001      	adds	r0, #1
 8004e40:	d0aa      	beq.n	8004d98 <_printf_i+0x12c>
 8004e42:	6823      	ldr	r3, [r4, #0]
 8004e44:	079b      	lsls	r3, r3, #30
 8004e46:	d413      	bmi.n	8004e70 <_printf_i+0x204>
 8004e48:	68e0      	ldr	r0, [r4, #12]
 8004e4a:	9b03      	ldr	r3, [sp, #12]
 8004e4c:	4298      	cmp	r0, r3
 8004e4e:	bfb8      	it	lt
 8004e50:	4618      	movlt	r0, r3
 8004e52:	e7a3      	b.n	8004d9c <_printf_i+0x130>
 8004e54:	2301      	movs	r3, #1
 8004e56:	464a      	mov	r2, r9
 8004e58:	4639      	mov	r1, r7
 8004e5a:	4630      	mov	r0, r6
 8004e5c:	47c0      	blx	r8
 8004e5e:	3001      	adds	r0, #1
 8004e60:	d09a      	beq.n	8004d98 <_printf_i+0x12c>
 8004e62:	3501      	adds	r5, #1
 8004e64:	68e3      	ldr	r3, [r4, #12]
 8004e66:	9a03      	ldr	r2, [sp, #12]
 8004e68:	1a9b      	subs	r3, r3, r2
 8004e6a:	42ab      	cmp	r3, r5
 8004e6c:	dcf2      	bgt.n	8004e54 <_printf_i+0x1e8>
 8004e6e:	e7eb      	b.n	8004e48 <_printf_i+0x1dc>
 8004e70:	2500      	movs	r5, #0
 8004e72:	f104 0919 	add.w	r9, r4, #25
 8004e76:	e7f5      	b.n	8004e64 <_printf_i+0x1f8>
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d1ac      	bne.n	8004dd6 <_printf_i+0x16a>
 8004e7c:	7803      	ldrb	r3, [r0, #0]
 8004e7e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e82:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004e86:	e76c      	b.n	8004d62 <_printf_i+0xf6>
 8004e88:	08006b0d 	.word	0x08006b0d
 8004e8c:	08006b1e 	.word	0x08006b1e

08004e90 <memcpy>:
 8004e90:	b510      	push	{r4, lr}
 8004e92:	1e43      	subs	r3, r0, #1
 8004e94:	440a      	add	r2, r1
 8004e96:	4291      	cmp	r1, r2
 8004e98:	d100      	bne.n	8004e9c <memcpy+0xc>
 8004e9a:	bd10      	pop	{r4, pc}
 8004e9c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ea0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004ea4:	e7f7      	b.n	8004e96 <memcpy+0x6>

08004ea6 <memmove>:
 8004ea6:	4288      	cmp	r0, r1
 8004ea8:	b510      	push	{r4, lr}
 8004eaa:	eb01 0302 	add.w	r3, r1, r2
 8004eae:	d807      	bhi.n	8004ec0 <memmove+0x1a>
 8004eb0:	1e42      	subs	r2, r0, #1
 8004eb2:	4299      	cmp	r1, r3
 8004eb4:	d00a      	beq.n	8004ecc <memmove+0x26>
 8004eb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004eba:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004ebe:	e7f8      	b.n	8004eb2 <memmove+0xc>
 8004ec0:	4283      	cmp	r3, r0
 8004ec2:	d9f5      	bls.n	8004eb0 <memmove+0xa>
 8004ec4:	1881      	adds	r1, r0, r2
 8004ec6:	1ad2      	subs	r2, r2, r3
 8004ec8:	42d3      	cmn	r3, r2
 8004eca:	d100      	bne.n	8004ece <memmove+0x28>
 8004ecc:	bd10      	pop	{r4, pc}
 8004ece:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004ed2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004ed6:	e7f7      	b.n	8004ec8 <memmove+0x22>

08004ed8 <_realloc_r>:
 8004ed8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004eda:	4607      	mov	r7, r0
 8004edc:	4614      	mov	r4, r2
 8004ede:	460e      	mov	r6, r1
 8004ee0:	b921      	cbnz	r1, 8004eec <_realloc_r+0x14>
 8004ee2:	4611      	mov	r1, r2
 8004ee4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004ee8:	f7ff bc6c 	b.w	80047c4 <_malloc_r>
 8004eec:	b922      	cbnz	r2, 8004ef8 <_realloc_r+0x20>
 8004eee:	f7ff fc1b 	bl	8004728 <_free_r>
 8004ef2:	4625      	mov	r5, r4
 8004ef4:	4628      	mov	r0, r5
 8004ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004ef8:	f000 f814 	bl	8004f24 <_malloc_usable_size_r>
 8004efc:	42a0      	cmp	r0, r4
 8004efe:	d20f      	bcs.n	8004f20 <_realloc_r+0x48>
 8004f00:	4621      	mov	r1, r4
 8004f02:	4638      	mov	r0, r7
 8004f04:	f7ff fc5e 	bl	80047c4 <_malloc_r>
 8004f08:	4605      	mov	r5, r0
 8004f0a:	2800      	cmp	r0, #0
 8004f0c:	d0f2      	beq.n	8004ef4 <_realloc_r+0x1c>
 8004f0e:	4631      	mov	r1, r6
 8004f10:	4622      	mov	r2, r4
 8004f12:	f7ff ffbd 	bl	8004e90 <memcpy>
 8004f16:	4631      	mov	r1, r6
 8004f18:	4638      	mov	r0, r7
 8004f1a:	f7ff fc05 	bl	8004728 <_free_r>
 8004f1e:	e7e9      	b.n	8004ef4 <_realloc_r+0x1c>
 8004f20:	4635      	mov	r5, r6
 8004f22:	e7e7      	b.n	8004ef4 <_realloc_r+0x1c>

08004f24 <_malloc_usable_size_r>:
 8004f24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f28:	1f18      	subs	r0, r3, #4
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	bfbc      	itt	lt
 8004f2e:	580b      	ldrlt	r3, [r1, r0]
 8004f30:	18c0      	addlt	r0, r0, r3
 8004f32:	4770      	bx	lr
 8004f34:	0000      	movs	r0, r0
	...

08004f38 <floor>:
 8004f38:	ec51 0b10 	vmov	r0, r1, d0
 8004f3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f40:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004f44:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004f48:	2e13      	cmp	r6, #19
 8004f4a:	460c      	mov	r4, r1
 8004f4c:	ee10 5a10 	vmov	r5, s0
 8004f50:	4680      	mov	r8, r0
 8004f52:	dc34      	bgt.n	8004fbe <floor+0x86>
 8004f54:	2e00      	cmp	r6, #0
 8004f56:	da16      	bge.n	8004f86 <floor+0x4e>
 8004f58:	a335      	add	r3, pc, #212	; (adr r3, 8005030 <floor+0xf8>)
 8004f5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f5e:	f7fb f98d 	bl	800027c <__adddf3>
 8004f62:	2200      	movs	r2, #0
 8004f64:	2300      	movs	r3, #0
 8004f66:	f7fb fdcf 	bl	8000b08 <__aeabi_dcmpgt>
 8004f6a:	b148      	cbz	r0, 8004f80 <floor+0x48>
 8004f6c:	2c00      	cmp	r4, #0
 8004f6e:	da59      	bge.n	8005024 <floor+0xec>
 8004f70:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004f74:	4a30      	ldr	r2, [pc, #192]	; (8005038 <floor+0x100>)
 8004f76:	432b      	orrs	r3, r5
 8004f78:	2500      	movs	r5, #0
 8004f7a:	42ab      	cmp	r3, r5
 8004f7c:	bf18      	it	ne
 8004f7e:	4614      	movne	r4, r2
 8004f80:	4621      	mov	r1, r4
 8004f82:	4628      	mov	r0, r5
 8004f84:	e025      	b.n	8004fd2 <floor+0x9a>
 8004f86:	4f2d      	ldr	r7, [pc, #180]	; (800503c <floor+0x104>)
 8004f88:	4137      	asrs	r7, r6
 8004f8a:	ea01 0307 	and.w	r3, r1, r7
 8004f8e:	4303      	orrs	r3, r0
 8004f90:	d01f      	beq.n	8004fd2 <floor+0x9a>
 8004f92:	a327      	add	r3, pc, #156	; (adr r3, 8005030 <floor+0xf8>)
 8004f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f98:	f7fb f970 	bl	800027c <__adddf3>
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	2300      	movs	r3, #0
 8004fa0:	f7fb fdb2 	bl	8000b08 <__aeabi_dcmpgt>
 8004fa4:	2800      	cmp	r0, #0
 8004fa6:	d0eb      	beq.n	8004f80 <floor+0x48>
 8004fa8:	2c00      	cmp	r4, #0
 8004faa:	bfbe      	ittt	lt
 8004fac:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004fb0:	fa43 f606 	asrlt.w	r6, r3, r6
 8004fb4:	19a4      	addlt	r4, r4, r6
 8004fb6:	ea24 0407 	bic.w	r4, r4, r7
 8004fba:	2500      	movs	r5, #0
 8004fbc:	e7e0      	b.n	8004f80 <floor+0x48>
 8004fbe:	2e33      	cmp	r6, #51	; 0x33
 8004fc0:	dd0b      	ble.n	8004fda <floor+0xa2>
 8004fc2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004fc6:	d104      	bne.n	8004fd2 <floor+0x9a>
 8004fc8:	ee10 2a10 	vmov	r2, s0
 8004fcc:	460b      	mov	r3, r1
 8004fce:	f7fb f955 	bl	800027c <__adddf3>
 8004fd2:	ec41 0b10 	vmov	d0, r0, r1
 8004fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004fda:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8004fde:	f04f 33ff 	mov.w	r3, #4294967295
 8004fe2:	fa23 f707 	lsr.w	r7, r3, r7
 8004fe6:	4207      	tst	r7, r0
 8004fe8:	d0f3      	beq.n	8004fd2 <floor+0x9a>
 8004fea:	a311      	add	r3, pc, #68	; (adr r3, 8005030 <floor+0xf8>)
 8004fec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff0:	f7fb f944 	bl	800027c <__adddf3>
 8004ff4:	2200      	movs	r2, #0
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	f7fb fd86 	bl	8000b08 <__aeabi_dcmpgt>
 8004ffc:	2800      	cmp	r0, #0
 8004ffe:	d0bf      	beq.n	8004f80 <floor+0x48>
 8005000:	2c00      	cmp	r4, #0
 8005002:	da02      	bge.n	800500a <floor+0xd2>
 8005004:	2e14      	cmp	r6, #20
 8005006:	d103      	bne.n	8005010 <floor+0xd8>
 8005008:	3401      	adds	r4, #1
 800500a:	ea25 0507 	bic.w	r5, r5, r7
 800500e:	e7b7      	b.n	8004f80 <floor+0x48>
 8005010:	2301      	movs	r3, #1
 8005012:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005016:	fa03 f606 	lsl.w	r6, r3, r6
 800501a:	4435      	add	r5, r6
 800501c:	4545      	cmp	r5, r8
 800501e:	bf38      	it	cc
 8005020:	18e4      	addcc	r4, r4, r3
 8005022:	e7f2      	b.n	800500a <floor+0xd2>
 8005024:	2500      	movs	r5, #0
 8005026:	462c      	mov	r4, r5
 8005028:	e7aa      	b.n	8004f80 <floor+0x48>
 800502a:	bf00      	nop
 800502c:	f3af 8000 	nop.w
 8005030:	8800759c 	.word	0x8800759c
 8005034:	7e37e43c 	.word	0x7e37e43c
 8005038:	bff00000 	.word	0xbff00000
 800503c:	000fffff 	.word	0x000fffff

08005040 <log10>:
 8005040:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005042:	ed2d 8b02 	vpush	{d8}
 8005046:	b08b      	sub	sp, #44	; 0x2c
 8005048:	ec55 4b10 	vmov	r4, r5, d0
 800504c:	f000 f878 	bl	8005140 <__ieee754_log10>
 8005050:	4b36      	ldr	r3, [pc, #216]	; (800512c <log10+0xec>)
 8005052:	eeb0 8a40 	vmov.f32	s16, s0
 8005056:	eef0 8a60 	vmov.f32	s17, s1
 800505a:	f993 6000 	ldrsb.w	r6, [r3]
 800505e:	1c73      	adds	r3, r6, #1
 8005060:	d05c      	beq.n	800511c <log10+0xdc>
 8005062:	4622      	mov	r2, r4
 8005064:	462b      	mov	r3, r5
 8005066:	4620      	mov	r0, r4
 8005068:	4629      	mov	r1, r5
 800506a:	f7fb fd57 	bl	8000b1c <__aeabi_dcmpun>
 800506e:	4607      	mov	r7, r0
 8005070:	2800      	cmp	r0, #0
 8005072:	d153      	bne.n	800511c <log10+0xdc>
 8005074:	2200      	movs	r2, #0
 8005076:	2300      	movs	r3, #0
 8005078:	4620      	mov	r0, r4
 800507a:	4629      	mov	r1, r5
 800507c:	f7fb fd30 	bl	8000ae0 <__aeabi_dcmple>
 8005080:	2800      	cmp	r0, #0
 8005082:	d04b      	beq.n	800511c <log10+0xdc>
 8005084:	4b2a      	ldr	r3, [pc, #168]	; (8005130 <log10+0xf0>)
 8005086:	9301      	str	r3, [sp, #4]
 8005088:	9708      	str	r7, [sp, #32]
 800508a:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800508e:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8005092:	b9a6      	cbnz	r6, 80050be <log10+0x7e>
 8005094:	4b27      	ldr	r3, [pc, #156]	; (8005134 <log10+0xf4>)
 8005096:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800509a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800509e:	4620      	mov	r0, r4
 80050a0:	2200      	movs	r2, #0
 80050a2:	2300      	movs	r3, #0
 80050a4:	4629      	mov	r1, r5
 80050a6:	f7fb fd07 	bl	8000ab8 <__aeabi_dcmpeq>
 80050aa:	bb40      	cbnz	r0, 80050fe <log10+0xbe>
 80050ac:	2301      	movs	r3, #1
 80050ae:	2e02      	cmp	r6, #2
 80050b0:	9300      	str	r3, [sp, #0]
 80050b2:	d119      	bne.n	80050e8 <log10+0xa8>
 80050b4:	f7ff fafe 	bl	80046b4 <__errno>
 80050b8:	2321      	movs	r3, #33	; 0x21
 80050ba:	6003      	str	r3, [r0, #0]
 80050bc:	e019      	b.n	80050f2 <log10+0xb2>
 80050be:	4b1e      	ldr	r3, [pc, #120]	; (8005138 <log10+0xf8>)
 80050c0:	2200      	movs	r2, #0
 80050c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80050c6:	4620      	mov	r0, r4
 80050c8:	2200      	movs	r2, #0
 80050ca:	2300      	movs	r3, #0
 80050cc:	4629      	mov	r1, r5
 80050ce:	f7fb fcf3 	bl	8000ab8 <__aeabi_dcmpeq>
 80050d2:	2800      	cmp	r0, #0
 80050d4:	d0ea      	beq.n	80050ac <log10+0x6c>
 80050d6:	2302      	movs	r3, #2
 80050d8:	429e      	cmp	r6, r3
 80050da:	9300      	str	r3, [sp, #0]
 80050dc:	d111      	bne.n	8005102 <log10+0xc2>
 80050de:	f7ff fae9 	bl	80046b4 <__errno>
 80050e2:	2322      	movs	r3, #34	; 0x22
 80050e4:	6003      	str	r3, [r0, #0]
 80050e6:	e011      	b.n	800510c <log10+0xcc>
 80050e8:	4668      	mov	r0, sp
 80050ea:	f000 f8b3 	bl	8005254 <matherr>
 80050ee:	2800      	cmp	r0, #0
 80050f0:	d0e0      	beq.n	80050b4 <log10+0x74>
 80050f2:	4812      	ldr	r0, [pc, #72]	; (800513c <log10+0xfc>)
 80050f4:	f000 f8b0 	bl	8005258 <nan>
 80050f8:	ed8d 0b06 	vstr	d0, [sp, #24]
 80050fc:	e006      	b.n	800510c <log10+0xcc>
 80050fe:	2302      	movs	r3, #2
 8005100:	9300      	str	r3, [sp, #0]
 8005102:	4668      	mov	r0, sp
 8005104:	f000 f8a6 	bl	8005254 <matherr>
 8005108:	2800      	cmp	r0, #0
 800510a:	d0e8      	beq.n	80050de <log10+0x9e>
 800510c:	9b08      	ldr	r3, [sp, #32]
 800510e:	b11b      	cbz	r3, 8005118 <log10+0xd8>
 8005110:	f7ff fad0 	bl	80046b4 <__errno>
 8005114:	9b08      	ldr	r3, [sp, #32]
 8005116:	6003      	str	r3, [r0, #0]
 8005118:	ed9d 8b06 	vldr	d8, [sp, #24]
 800511c:	eeb0 0a48 	vmov.f32	s0, s16
 8005120:	eef0 0a68 	vmov.f32	s1, s17
 8005124:	b00b      	add	sp, #44	; 0x2c
 8005126:	ecbd 8b02 	vpop	{d8}
 800512a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800512c:	20000080 	.word	0x20000080
 8005130:	08006b2f 	.word	0x08006b2f
 8005134:	c7efffff 	.word	0xc7efffff
 8005138:	fff00000 	.word	0xfff00000
 800513c:	08006b01 	.word	0x08006b01

08005140 <__ieee754_log10>:
 8005140:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005144:	ec55 4b10 	vmov	r4, r5, d0
 8005148:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800514c:	462b      	mov	r3, r5
 800514e:	da2f      	bge.n	80051b0 <__ieee754_log10+0x70>
 8005150:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8005154:	4322      	orrs	r2, r4
 8005156:	d10a      	bne.n	800516e <__ieee754_log10+0x2e>
 8005158:	493b      	ldr	r1, [pc, #236]	; (8005248 <__ieee754_log10+0x108>)
 800515a:	2200      	movs	r2, #0
 800515c:	2300      	movs	r3, #0
 800515e:	2000      	movs	r0, #0
 8005160:	f7fb fb6c 	bl	800083c <__aeabi_ddiv>
 8005164:	ec41 0b10 	vmov	d0, r0, r1
 8005168:	b003      	add	sp, #12
 800516a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800516e:	2d00      	cmp	r5, #0
 8005170:	da08      	bge.n	8005184 <__ieee754_log10+0x44>
 8005172:	ee10 2a10 	vmov	r2, s0
 8005176:	4620      	mov	r0, r4
 8005178:	4629      	mov	r1, r5
 800517a:	f7fb f87d 	bl	8000278 <__aeabi_dsub>
 800517e:	2200      	movs	r2, #0
 8005180:	2300      	movs	r3, #0
 8005182:	e7ed      	b.n	8005160 <__ieee754_log10+0x20>
 8005184:	2200      	movs	r2, #0
 8005186:	4b31      	ldr	r3, [pc, #196]	; (800524c <__ieee754_log10+0x10c>)
 8005188:	4629      	mov	r1, r5
 800518a:	ee10 0a10 	vmov	r0, s0
 800518e:	f7fb fa2b 	bl	80005e8 <__aeabi_dmul>
 8005192:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8005196:	4604      	mov	r4, r0
 8005198:	460d      	mov	r5, r1
 800519a:	460b      	mov	r3, r1
 800519c:	492c      	ldr	r1, [pc, #176]	; (8005250 <__ieee754_log10+0x110>)
 800519e:	428b      	cmp	r3, r1
 80051a0:	dd08      	ble.n	80051b4 <__ieee754_log10+0x74>
 80051a2:	4622      	mov	r2, r4
 80051a4:	462b      	mov	r3, r5
 80051a6:	4620      	mov	r0, r4
 80051a8:	4629      	mov	r1, r5
 80051aa:	f7fb f867 	bl	800027c <__adddf3>
 80051ae:	e7d9      	b.n	8005164 <__ieee754_log10+0x24>
 80051b0:	2200      	movs	r2, #0
 80051b2:	e7f3      	b.n	800519c <__ieee754_log10+0x5c>
 80051b4:	1518      	asrs	r0, r3, #20
 80051b6:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 80051ba:	4410      	add	r0, r2
 80051bc:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 80051c0:	4448      	add	r0, r9
 80051c2:	f3c3 0813 	ubfx	r8, r3, #0, #20
 80051c6:	f7fb f9a5 	bl	8000514 <__aeabi_i2d>
 80051ca:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 80051ce:	3303      	adds	r3, #3
 80051d0:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80051d4:	ec45 4b10 	vmov	d0, r4, r5
 80051d8:	4606      	mov	r6, r0
 80051da:	460f      	mov	r7, r1
 80051dc:	f000 f844 	bl	8005268 <__ieee754_log>
 80051e0:	a313      	add	r3, pc, #76	; (adr r3, 8005230 <__ieee754_log10+0xf0>)
 80051e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e6:	4630      	mov	r0, r6
 80051e8:	4639      	mov	r1, r7
 80051ea:	ed8d 0b00 	vstr	d0, [sp]
 80051ee:	f7fb f9fb 	bl	80005e8 <__aeabi_dmul>
 80051f2:	ed9d 0b00 	vldr	d0, [sp]
 80051f6:	4604      	mov	r4, r0
 80051f8:	460d      	mov	r5, r1
 80051fa:	a30f      	add	r3, pc, #60	; (adr r3, 8005238 <__ieee754_log10+0xf8>)
 80051fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005200:	ec51 0b10 	vmov	r0, r1, d0
 8005204:	f7fb f9f0 	bl	80005e8 <__aeabi_dmul>
 8005208:	4602      	mov	r2, r0
 800520a:	460b      	mov	r3, r1
 800520c:	4620      	mov	r0, r4
 800520e:	4629      	mov	r1, r5
 8005210:	f7fb f834 	bl	800027c <__adddf3>
 8005214:	a30a      	add	r3, pc, #40	; (adr r3, 8005240 <__ieee754_log10+0x100>)
 8005216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800521a:	4604      	mov	r4, r0
 800521c:	460d      	mov	r5, r1
 800521e:	4630      	mov	r0, r6
 8005220:	4639      	mov	r1, r7
 8005222:	f7fb f9e1 	bl	80005e8 <__aeabi_dmul>
 8005226:	4602      	mov	r2, r0
 8005228:	460b      	mov	r3, r1
 800522a:	4620      	mov	r0, r4
 800522c:	4629      	mov	r1, r5
 800522e:	e7bc      	b.n	80051aa <__ieee754_log10+0x6a>
 8005230:	11f12b36 	.word	0x11f12b36
 8005234:	3d59fef3 	.word	0x3d59fef3
 8005238:	1526e50e 	.word	0x1526e50e
 800523c:	3fdbcb7b 	.word	0x3fdbcb7b
 8005240:	509f6000 	.word	0x509f6000
 8005244:	3fd34413 	.word	0x3fd34413
 8005248:	c3500000 	.word	0xc3500000
 800524c:	43500000 	.word	0x43500000
 8005250:	7fefffff 	.word	0x7fefffff

08005254 <matherr>:
 8005254:	2000      	movs	r0, #0
 8005256:	4770      	bx	lr

08005258 <nan>:
 8005258:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005260 <nan+0x8>
 800525c:	4770      	bx	lr
 800525e:	bf00      	nop
 8005260:	00000000 	.word	0x00000000
 8005264:	7ff80000 	.word	0x7ff80000

08005268 <__ieee754_log>:
 8005268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800526c:	ec51 0b10 	vmov	r0, r1, d0
 8005270:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005274:	b087      	sub	sp, #28
 8005276:	460d      	mov	r5, r1
 8005278:	da27      	bge.n	80052ca <__ieee754_log+0x62>
 800527a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800527e:	4303      	orrs	r3, r0
 8005280:	ee10 2a10 	vmov	r2, s0
 8005284:	d10a      	bne.n	800529c <__ieee754_log+0x34>
 8005286:	49cc      	ldr	r1, [pc, #816]	; (80055b8 <__ieee754_log+0x350>)
 8005288:	2200      	movs	r2, #0
 800528a:	2300      	movs	r3, #0
 800528c:	2000      	movs	r0, #0
 800528e:	f7fb fad5 	bl	800083c <__aeabi_ddiv>
 8005292:	ec41 0b10 	vmov	d0, r0, r1
 8005296:	b007      	add	sp, #28
 8005298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800529c:	2900      	cmp	r1, #0
 800529e:	da05      	bge.n	80052ac <__ieee754_log+0x44>
 80052a0:	460b      	mov	r3, r1
 80052a2:	f7fa ffe9 	bl	8000278 <__aeabi_dsub>
 80052a6:	2200      	movs	r2, #0
 80052a8:	2300      	movs	r3, #0
 80052aa:	e7f0      	b.n	800528e <__ieee754_log+0x26>
 80052ac:	4bc3      	ldr	r3, [pc, #780]	; (80055bc <__ieee754_log+0x354>)
 80052ae:	2200      	movs	r2, #0
 80052b0:	f7fb f99a 	bl	80005e8 <__aeabi_dmul>
 80052b4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80052b8:	460d      	mov	r5, r1
 80052ba:	4ac1      	ldr	r2, [pc, #772]	; (80055c0 <__ieee754_log+0x358>)
 80052bc:	4295      	cmp	r5, r2
 80052be:	dd06      	ble.n	80052ce <__ieee754_log+0x66>
 80052c0:	4602      	mov	r2, r0
 80052c2:	460b      	mov	r3, r1
 80052c4:	f7fa ffda 	bl	800027c <__adddf3>
 80052c8:	e7e3      	b.n	8005292 <__ieee754_log+0x2a>
 80052ca:	2300      	movs	r3, #0
 80052cc:	e7f5      	b.n	80052ba <__ieee754_log+0x52>
 80052ce:	152c      	asrs	r4, r5, #20
 80052d0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80052d4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80052d8:	441c      	add	r4, r3
 80052da:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80052de:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80052e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80052e6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80052ea:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80052ee:	ea42 0105 	orr.w	r1, r2, r5
 80052f2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80052f6:	2200      	movs	r2, #0
 80052f8:	4bb2      	ldr	r3, [pc, #712]	; (80055c4 <__ieee754_log+0x35c>)
 80052fa:	f7fa ffbd 	bl	8000278 <__aeabi_dsub>
 80052fe:	1cab      	adds	r3, r5, #2
 8005300:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005304:	2b02      	cmp	r3, #2
 8005306:	4682      	mov	sl, r0
 8005308:	468b      	mov	fp, r1
 800530a:	f04f 0200 	mov.w	r2, #0
 800530e:	dc53      	bgt.n	80053b8 <__ieee754_log+0x150>
 8005310:	2300      	movs	r3, #0
 8005312:	f7fb fbd1 	bl	8000ab8 <__aeabi_dcmpeq>
 8005316:	b1d0      	cbz	r0, 800534e <__ieee754_log+0xe6>
 8005318:	2c00      	cmp	r4, #0
 800531a:	f000 8120 	beq.w	800555e <__ieee754_log+0x2f6>
 800531e:	4620      	mov	r0, r4
 8005320:	f7fb f8f8 	bl	8000514 <__aeabi_i2d>
 8005324:	a390      	add	r3, pc, #576	; (adr r3, 8005568 <__ieee754_log+0x300>)
 8005326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800532a:	4606      	mov	r6, r0
 800532c:	460f      	mov	r7, r1
 800532e:	f7fb f95b 	bl	80005e8 <__aeabi_dmul>
 8005332:	a38f      	add	r3, pc, #572	; (adr r3, 8005570 <__ieee754_log+0x308>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	4604      	mov	r4, r0
 800533a:	460d      	mov	r5, r1
 800533c:	4630      	mov	r0, r6
 800533e:	4639      	mov	r1, r7
 8005340:	f7fb f952 	bl	80005e8 <__aeabi_dmul>
 8005344:	4602      	mov	r2, r0
 8005346:	460b      	mov	r3, r1
 8005348:	4620      	mov	r0, r4
 800534a:	4629      	mov	r1, r5
 800534c:	e7ba      	b.n	80052c4 <__ieee754_log+0x5c>
 800534e:	a38a      	add	r3, pc, #552	; (adr r3, 8005578 <__ieee754_log+0x310>)
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	4650      	mov	r0, sl
 8005356:	4659      	mov	r1, fp
 8005358:	f7fb f946 	bl	80005e8 <__aeabi_dmul>
 800535c:	4602      	mov	r2, r0
 800535e:	460b      	mov	r3, r1
 8005360:	2000      	movs	r0, #0
 8005362:	4999      	ldr	r1, [pc, #612]	; (80055c8 <__ieee754_log+0x360>)
 8005364:	f7fa ff88 	bl	8000278 <__aeabi_dsub>
 8005368:	4652      	mov	r2, sl
 800536a:	4606      	mov	r6, r0
 800536c:	460f      	mov	r7, r1
 800536e:	465b      	mov	r3, fp
 8005370:	4650      	mov	r0, sl
 8005372:	4659      	mov	r1, fp
 8005374:	f7fb f938 	bl	80005e8 <__aeabi_dmul>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	4630      	mov	r0, r6
 800537e:	4639      	mov	r1, r7
 8005380:	f7fb f932 	bl	80005e8 <__aeabi_dmul>
 8005384:	4606      	mov	r6, r0
 8005386:	460f      	mov	r7, r1
 8005388:	b914      	cbnz	r4, 8005390 <__ieee754_log+0x128>
 800538a:	4632      	mov	r2, r6
 800538c:	463b      	mov	r3, r7
 800538e:	e0a0      	b.n	80054d2 <__ieee754_log+0x26a>
 8005390:	4620      	mov	r0, r4
 8005392:	f7fb f8bf 	bl	8000514 <__aeabi_i2d>
 8005396:	a374      	add	r3, pc, #464	; (adr r3, 8005568 <__ieee754_log+0x300>)
 8005398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800539c:	4680      	mov	r8, r0
 800539e:	4689      	mov	r9, r1
 80053a0:	f7fb f922 	bl	80005e8 <__aeabi_dmul>
 80053a4:	a372      	add	r3, pc, #456	; (adr r3, 8005570 <__ieee754_log+0x308>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	4604      	mov	r4, r0
 80053ac:	460d      	mov	r5, r1
 80053ae:	4640      	mov	r0, r8
 80053b0:	4649      	mov	r1, r9
 80053b2:	f7fb f919 	bl	80005e8 <__aeabi_dmul>
 80053b6:	e0a5      	b.n	8005504 <__ieee754_log+0x29c>
 80053b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80053bc:	f7fa ff5e 	bl	800027c <__adddf3>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4650      	mov	r0, sl
 80053c6:	4659      	mov	r1, fp
 80053c8:	f7fb fa38 	bl	800083c <__aeabi_ddiv>
 80053cc:	e9cd 0100 	strd	r0, r1, [sp]
 80053d0:	4620      	mov	r0, r4
 80053d2:	f7fb f89f 	bl	8000514 <__aeabi_i2d>
 80053d6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80053da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80053de:	4610      	mov	r0, r2
 80053e0:	4619      	mov	r1, r3
 80053e2:	f7fb f901 	bl	80005e8 <__aeabi_dmul>
 80053e6:	4602      	mov	r2, r0
 80053e8:	460b      	mov	r3, r1
 80053ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053ee:	f7fb f8fb 	bl	80005e8 <__aeabi_dmul>
 80053f2:	a363      	add	r3, pc, #396	; (adr r3, 8005580 <__ieee754_log+0x318>)
 80053f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f8:	4680      	mov	r8, r0
 80053fa:	4689      	mov	r9, r1
 80053fc:	f7fb f8f4 	bl	80005e8 <__aeabi_dmul>
 8005400:	a361      	add	r3, pc, #388	; (adr r3, 8005588 <__ieee754_log+0x320>)
 8005402:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005406:	f7fa ff39 	bl	800027c <__adddf3>
 800540a:	4642      	mov	r2, r8
 800540c:	464b      	mov	r3, r9
 800540e:	f7fb f8eb 	bl	80005e8 <__aeabi_dmul>
 8005412:	a35f      	add	r3, pc, #380	; (adr r3, 8005590 <__ieee754_log+0x328>)
 8005414:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005418:	f7fa ff30 	bl	800027c <__adddf3>
 800541c:	4642      	mov	r2, r8
 800541e:	464b      	mov	r3, r9
 8005420:	f7fb f8e2 	bl	80005e8 <__aeabi_dmul>
 8005424:	a35c      	add	r3, pc, #368	; (adr r3, 8005598 <__ieee754_log+0x330>)
 8005426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542a:	f7fa ff27 	bl	800027c <__adddf3>
 800542e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005432:	f7fb f8d9 	bl	80005e8 <__aeabi_dmul>
 8005436:	a35a      	add	r3, pc, #360	; (adr r3, 80055a0 <__ieee754_log+0x338>)
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005440:	4640      	mov	r0, r8
 8005442:	4649      	mov	r1, r9
 8005444:	f7fb f8d0 	bl	80005e8 <__aeabi_dmul>
 8005448:	a357      	add	r3, pc, #348	; (adr r3, 80055a8 <__ieee754_log+0x340>)
 800544a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544e:	f7fa ff15 	bl	800027c <__adddf3>
 8005452:	4642      	mov	r2, r8
 8005454:	464b      	mov	r3, r9
 8005456:	f7fb f8c7 	bl	80005e8 <__aeabi_dmul>
 800545a:	a355      	add	r3, pc, #340	; (adr r3, 80055b0 <__ieee754_log+0x348>)
 800545c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005460:	f7fa ff0c 	bl	800027c <__adddf3>
 8005464:	4642      	mov	r2, r8
 8005466:	464b      	mov	r3, r9
 8005468:	f7fb f8be 	bl	80005e8 <__aeabi_dmul>
 800546c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8005470:	4602      	mov	r2, r0
 8005472:	460b      	mov	r3, r1
 8005474:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8005478:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800547c:	f7fa fefe 	bl	800027c <__adddf3>
 8005480:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8005484:	3551      	adds	r5, #81	; 0x51
 8005486:	4335      	orrs	r5, r6
 8005488:	2d00      	cmp	r5, #0
 800548a:	4680      	mov	r8, r0
 800548c:	4689      	mov	r9, r1
 800548e:	dd48      	ble.n	8005522 <__ieee754_log+0x2ba>
 8005490:	2200      	movs	r2, #0
 8005492:	4b4d      	ldr	r3, [pc, #308]	; (80055c8 <__ieee754_log+0x360>)
 8005494:	4650      	mov	r0, sl
 8005496:	4659      	mov	r1, fp
 8005498:	f7fb f8a6 	bl	80005e8 <__aeabi_dmul>
 800549c:	4652      	mov	r2, sl
 800549e:	465b      	mov	r3, fp
 80054a0:	f7fb f8a2 	bl	80005e8 <__aeabi_dmul>
 80054a4:	4602      	mov	r2, r0
 80054a6:	460b      	mov	r3, r1
 80054a8:	4606      	mov	r6, r0
 80054aa:	460f      	mov	r7, r1
 80054ac:	4640      	mov	r0, r8
 80054ae:	4649      	mov	r1, r9
 80054b0:	f7fa fee4 	bl	800027c <__adddf3>
 80054b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054b8:	f7fb f896 	bl	80005e8 <__aeabi_dmul>
 80054bc:	4680      	mov	r8, r0
 80054be:	4689      	mov	r9, r1
 80054c0:	b964      	cbnz	r4, 80054dc <__ieee754_log+0x274>
 80054c2:	4602      	mov	r2, r0
 80054c4:	460b      	mov	r3, r1
 80054c6:	4630      	mov	r0, r6
 80054c8:	4639      	mov	r1, r7
 80054ca:	f7fa fed5 	bl	8000278 <__aeabi_dsub>
 80054ce:	4602      	mov	r2, r0
 80054d0:	460b      	mov	r3, r1
 80054d2:	4650      	mov	r0, sl
 80054d4:	4659      	mov	r1, fp
 80054d6:	f7fa fecf 	bl	8000278 <__aeabi_dsub>
 80054da:	e6da      	b.n	8005292 <__ieee754_log+0x2a>
 80054dc:	a322      	add	r3, pc, #136	; (adr r3, 8005568 <__ieee754_log+0x300>)
 80054de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054e6:	f7fb f87f 	bl	80005e8 <__aeabi_dmul>
 80054ea:	a321      	add	r3, pc, #132	; (adr r3, 8005570 <__ieee754_log+0x308>)
 80054ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f0:	4604      	mov	r4, r0
 80054f2:	460d      	mov	r5, r1
 80054f4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054f8:	f7fb f876 	bl	80005e8 <__aeabi_dmul>
 80054fc:	4642      	mov	r2, r8
 80054fe:	464b      	mov	r3, r9
 8005500:	f7fa febc 	bl	800027c <__adddf3>
 8005504:	4602      	mov	r2, r0
 8005506:	460b      	mov	r3, r1
 8005508:	4630      	mov	r0, r6
 800550a:	4639      	mov	r1, r7
 800550c:	f7fa feb4 	bl	8000278 <__aeabi_dsub>
 8005510:	4652      	mov	r2, sl
 8005512:	465b      	mov	r3, fp
 8005514:	f7fa feb0 	bl	8000278 <__aeabi_dsub>
 8005518:	4602      	mov	r2, r0
 800551a:	460b      	mov	r3, r1
 800551c:	4620      	mov	r0, r4
 800551e:	4629      	mov	r1, r5
 8005520:	e7d9      	b.n	80054d6 <__ieee754_log+0x26e>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4650      	mov	r0, sl
 8005528:	4659      	mov	r1, fp
 800552a:	f7fa fea5 	bl	8000278 <__aeabi_dsub>
 800552e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005532:	f7fb f859 	bl	80005e8 <__aeabi_dmul>
 8005536:	4606      	mov	r6, r0
 8005538:	460f      	mov	r7, r1
 800553a:	2c00      	cmp	r4, #0
 800553c:	f43f af25 	beq.w	800538a <__ieee754_log+0x122>
 8005540:	a309      	add	r3, pc, #36	; (adr r3, 8005568 <__ieee754_log+0x300>)
 8005542:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800554a:	f7fb f84d 	bl	80005e8 <__aeabi_dmul>
 800554e:	a308      	add	r3, pc, #32	; (adr r3, 8005570 <__ieee754_log+0x308>)
 8005550:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005554:	4604      	mov	r4, r0
 8005556:	460d      	mov	r5, r1
 8005558:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800555c:	e729      	b.n	80053b2 <__ieee754_log+0x14a>
 800555e:	2000      	movs	r0, #0
 8005560:	2100      	movs	r1, #0
 8005562:	e696      	b.n	8005292 <__ieee754_log+0x2a>
 8005564:	f3af 8000 	nop.w
 8005568:	fee00000 	.word	0xfee00000
 800556c:	3fe62e42 	.word	0x3fe62e42
 8005570:	35793c76 	.word	0x35793c76
 8005574:	3dea39ef 	.word	0x3dea39ef
 8005578:	55555555 	.word	0x55555555
 800557c:	3fd55555 	.word	0x3fd55555
 8005580:	df3e5244 	.word	0xdf3e5244
 8005584:	3fc2f112 	.word	0x3fc2f112
 8005588:	96cb03de 	.word	0x96cb03de
 800558c:	3fc74664 	.word	0x3fc74664
 8005590:	94229359 	.word	0x94229359
 8005594:	3fd24924 	.word	0x3fd24924
 8005598:	55555593 	.word	0x55555593
 800559c:	3fe55555 	.word	0x3fe55555
 80055a0:	d078c69f 	.word	0xd078c69f
 80055a4:	3fc39a09 	.word	0x3fc39a09
 80055a8:	1d8e78af 	.word	0x1d8e78af
 80055ac:	3fcc71c5 	.word	0x3fcc71c5
 80055b0:	9997fa04 	.word	0x9997fa04
 80055b4:	3fd99999 	.word	0x3fd99999
 80055b8:	c3500000 	.word	0xc3500000
 80055bc:	43500000 	.word	0x43500000
 80055c0:	7fefffff 	.word	0x7fefffff
 80055c4:	3ff00000 	.word	0x3ff00000
 80055c8:	3fe00000 	.word	0x3fe00000

080055cc <_init>:
 80055cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055ce:	bf00      	nop
 80055d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055d2:	bc08      	pop	{r3}
 80055d4:	469e      	mov	lr, r3
 80055d6:	4770      	bx	lr

080055d8 <_fini>:
 80055d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80055da:	bf00      	nop
 80055dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80055de:	bc08      	pop	{r3}
 80055e0:	469e      	mov	lr, r3
 80055e2:	4770      	bx	lr
