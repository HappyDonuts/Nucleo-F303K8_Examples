
F303_I2C_LCD.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002788  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08002910  08002910  00012910  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002970  08002970  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002970  08002970  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002970  08002970  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002970  08002970  00012970  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002974  08002974  00012974  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002978  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000006c  2000000c  08002984  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000078  08002984  00020078  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e0a5  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001c8a  00000000  00000000  0002e0e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000700  00000000  00000000  0002fd70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000638  00000000  00000000  00030470  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000174c8  00000000  00000000  00030aa8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000082f8  00000000  00000000  00047f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007b68c  00000000  00000000  00050268  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000cb8f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001b04  00000000  00000000  000cb970  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080028f8 	.word	0x080028f8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080028f8 	.word	0x080028f8

080001c8 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80001cc:	4b08      	ldr	r3, [pc, #32]	; (80001f0 <HAL_Init+0x28>)
 80001ce:	681b      	ldr	r3, [r3, #0]
 80001d0:	4a07      	ldr	r2, [pc, #28]	; (80001f0 <HAL_Init+0x28>)
 80001d2:	f043 0310 	orr.w	r3, r3, #16
 80001d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001d8:	2003      	movs	r0, #3
 80001da:	f000 f92f 	bl	800043c <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80001de:	2000      	movs	r0, #0
 80001e0:	f000 f808 	bl	80001f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80001e4:	f002 fa52 	bl	800268c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80001e8:	2300      	movs	r3, #0
}
 80001ea:	4618      	mov	r0, r3
 80001ec:	bd80      	pop	{r7, pc}
 80001ee:	bf00      	nop
 80001f0:	40022000 	.word	0x40022000

080001f4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001f4:	b580      	push	{r7, lr}
 80001f6:	b082      	sub	sp, #8
 80001f8:	af00      	add	r7, sp, #0
 80001fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001fc:	4b12      	ldr	r3, [pc, #72]	; (8000248 <HAL_InitTick+0x54>)
 80001fe:	681a      	ldr	r2, [r3, #0]
 8000200:	4b12      	ldr	r3, [pc, #72]	; (800024c <HAL_InitTick+0x58>)
 8000202:	781b      	ldrb	r3, [r3, #0]
 8000204:	4619      	mov	r1, r3
 8000206:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800020a:	fbb3 f3f1 	udiv	r3, r3, r1
 800020e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000212:	4618      	mov	r0, r3
 8000214:	f000 f939 	bl	800048a <HAL_SYSTICK_Config>
 8000218:	4603      	mov	r3, r0
 800021a:	2b00      	cmp	r3, #0
 800021c:	d001      	beq.n	8000222 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800021e:	2301      	movs	r3, #1
 8000220:	e00e      	b.n	8000240 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000222:	687b      	ldr	r3, [r7, #4]
 8000224:	2b0f      	cmp	r3, #15
 8000226:	d80a      	bhi.n	800023e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000228:	2200      	movs	r2, #0
 800022a:	6879      	ldr	r1, [r7, #4]
 800022c:	f04f 30ff 	mov.w	r0, #4294967295
 8000230:	f000 f90f 	bl	8000452 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000234:	4a06      	ldr	r2, [pc, #24]	; (8000250 <HAL_InitTick+0x5c>)
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 800023a:	2300      	movs	r3, #0
 800023c:	e000      	b.n	8000240 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800023e:	2301      	movs	r3, #1
}
 8000240:	4618      	mov	r0, r3
 8000242:	3708      	adds	r7, #8
 8000244:	46bd      	mov	sp, r7
 8000246:	bd80      	pop	{r7, pc}
 8000248:	20000008 	.word	0x20000008
 800024c:	20000004 	.word	0x20000004
 8000250:	20000000 	.word	0x20000000

08000254 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000254:	b480      	push	{r7}
 8000256:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000258:	4b06      	ldr	r3, [pc, #24]	; (8000274 <HAL_IncTick+0x20>)
 800025a:	781b      	ldrb	r3, [r3, #0]
 800025c:	461a      	mov	r2, r3
 800025e:	4b06      	ldr	r3, [pc, #24]	; (8000278 <HAL_IncTick+0x24>)
 8000260:	681b      	ldr	r3, [r3, #0]
 8000262:	4413      	add	r3, r2
 8000264:	4a04      	ldr	r2, [pc, #16]	; (8000278 <HAL_IncTick+0x24>)
 8000266:	6013      	str	r3, [r2, #0]
}
 8000268:	bf00      	nop
 800026a:	46bd      	mov	sp, r7
 800026c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000270:	4770      	bx	lr
 8000272:	bf00      	nop
 8000274:	20000004 	.word	0x20000004
 8000278:	20000028 	.word	0x20000028

0800027c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800027c:	b480      	push	{r7}
 800027e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000280:	4b03      	ldr	r3, [pc, #12]	; (8000290 <HAL_GetTick+0x14>)
 8000282:	681b      	ldr	r3, [r3, #0]
}
 8000284:	4618      	mov	r0, r3
 8000286:	46bd      	mov	sp, r7
 8000288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop
 8000290:	20000028 	.word	0x20000028

08000294 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000294:	b580      	push	{r7, lr}
 8000296:	b084      	sub	sp, #16
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800029c:	f7ff ffee 	bl	800027c <HAL_GetTick>
 80002a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80002a6:	68fb      	ldr	r3, [r7, #12]
 80002a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80002ac:	d005      	beq.n	80002ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80002ae:	4b09      	ldr	r3, [pc, #36]	; (80002d4 <HAL_Delay+0x40>)
 80002b0:	781b      	ldrb	r3, [r3, #0]
 80002b2:	461a      	mov	r2, r3
 80002b4:	68fb      	ldr	r3, [r7, #12]
 80002b6:	4413      	add	r3, r2
 80002b8:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80002ba:	bf00      	nop
 80002bc:	f7ff ffde 	bl	800027c <HAL_GetTick>
 80002c0:	4602      	mov	r2, r0
 80002c2:	68bb      	ldr	r3, [r7, #8]
 80002c4:	1ad3      	subs	r3, r2, r3
 80002c6:	68fa      	ldr	r2, [r7, #12]
 80002c8:	429a      	cmp	r2, r3
 80002ca:	d8f7      	bhi.n	80002bc <HAL_Delay+0x28>
  {
  }
}
 80002cc:	bf00      	nop
 80002ce:	3710      	adds	r7, #16
 80002d0:	46bd      	mov	sp, r7
 80002d2:	bd80      	pop	{r7, pc}
 80002d4:	20000004 	.word	0x20000004

080002d8 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80002d8:	b480      	push	{r7}
 80002da:	b085      	sub	sp, #20
 80002dc:	af00      	add	r7, sp, #0
 80002de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80002e0:	687b      	ldr	r3, [r7, #4]
 80002e2:	f003 0307 	and.w	r3, r3, #7
 80002e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80002e8:	4b0c      	ldr	r3, [pc, #48]	; (800031c <NVIC_SetPriorityGrouping+0x44>)
 80002ea:	68db      	ldr	r3, [r3, #12]
 80002ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80002ee:	68ba      	ldr	r2, [r7, #8]
 80002f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80002f4:	4013      	ands	r3, r2
 80002f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80002f8:	68fb      	ldr	r3, [r7, #12]
 80002fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80002fc:	68bb      	ldr	r3, [r7, #8]
 80002fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000300:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000304:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000308:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800030a:	4a04      	ldr	r2, [pc, #16]	; (800031c <NVIC_SetPriorityGrouping+0x44>)
 800030c:	68bb      	ldr	r3, [r7, #8]
 800030e:	60d3      	str	r3, [r2, #12]
}
 8000310:	bf00      	nop
 8000312:	3714      	adds	r7, #20
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	e000ed00 	.word	0xe000ed00

08000320 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000320:	b480      	push	{r7}
 8000322:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000324:	4b04      	ldr	r3, [pc, #16]	; (8000338 <NVIC_GetPriorityGrouping+0x18>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	0a1b      	lsrs	r3, r3, #8
 800032a:	f003 0307 	and.w	r3, r3, #7
}
 800032e:	4618      	mov	r0, r3
 8000330:	46bd      	mov	sp, r7
 8000332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000336:	4770      	bx	lr
 8000338:	e000ed00 	.word	0xe000ed00

0800033c <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800033c:	b480      	push	{r7}
 800033e:	b083      	sub	sp, #12
 8000340:	af00      	add	r7, sp, #0
 8000342:	4603      	mov	r3, r0
 8000344:	6039      	str	r1, [r7, #0]
 8000346:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000348:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800034c:	2b00      	cmp	r3, #0
 800034e:	da0b      	bge.n	8000368 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000350:	683b      	ldr	r3, [r7, #0]
 8000352:	b2da      	uxtb	r2, r3
 8000354:	490c      	ldr	r1, [pc, #48]	; (8000388 <NVIC_SetPriority+0x4c>)
 8000356:	79fb      	ldrb	r3, [r7, #7]
 8000358:	f003 030f 	and.w	r3, r3, #15
 800035c:	3b04      	subs	r3, #4
 800035e:	0112      	lsls	r2, r2, #4
 8000360:	b2d2      	uxtb	r2, r2
 8000362:	440b      	add	r3, r1
 8000364:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000366:	e009      	b.n	800037c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000368:	683b      	ldr	r3, [r7, #0]
 800036a:	b2da      	uxtb	r2, r3
 800036c:	4907      	ldr	r1, [pc, #28]	; (800038c <NVIC_SetPriority+0x50>)
 800036e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000372:	0112      	lsls	r2, r2, #4
 8000374:	b2d2      	uxtb	r2, r2
 8000376:	440b      	add	r3, r1
 8000378:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800037c:	bf00      	nop
 800037e:	370c      	adds	r7, #12
 8000380:	46bd      	mov	sp, r7
 8000382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000386:	4770      	bx	lr
 8000388:	e000ed00 	.word	0xe000ed00
 800038c:	e000e100 	.word	0xe000e100

08000390 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000390:	b480      	push	{r7}
 8000392:	b089      	sub	sp, #36	; 0x24
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800039c:	68fb      	ldr	r3, [r7, #12]
 800039e:	f003 0307 	and.w	r3, r3, #7
 80003a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80003a4:	69fb      	ldr	r3, [r7, #28]
 80003a6:	f1c3 0307 	rsb	r3, r3, #7
 80003aa:	2b04      	cmp	r3, #4
 80003ac:	bf28      	it	cs
 80003ae:	2304      	movcs	r3, #4
 80003b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80003b2:	69fb      	ldr	r3, [r7, #28]
 80003b4:	3304      	adds	r3, #4
 80003b6:	2b06      	cmp	r3, #6
 80003b8:	d902      	bls.n	80003c0 <NVIC_EncodePriority+0x30>
 80003ba:	69fb      	ldr	r3, [r7, #28]
 80003bc:	3b03      	subs	r3, #3
 80003be:	e000      	b.n	80003c2 <NVIC_EncodePriority+0x32>
 80003c0:	2300      	movs	r3, #0
 80003c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003c4:	f04f 32ff 	mov.w	r2, #4294967295
 80003c8:	69bb      	ldr	r3, [r7, #24]
 80003ca:	fa02 f303 	lsl.w	r3, r2, r3
 80003ce:	43da      	mvns	r2, r3
 80003d0:	68bb      	ldr	r3, [r7, #8]
 80003d2:	401a      	ands	r2, r3
 80003d4:	697b      	ldr	r3, [r7, #20]
 80003d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80003d8:	f04f 31ff 	mov.w	r1, #4294967295
 80003dc:	697b      	ldr	r3, [r7, #20]
 80003de:	fa01 f303 	lsl.w	r3, r1, r3
 80003e2:	43d9      	mvns	r1, r3
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80003e8:	4313      	orrs	r3, r2
         );
}
 80003ea:	4618      	mov	r0, r3
 80003ec:	3724      	adds	r7, #36	; 0x24
 80003ee:	46bd      	mov	sp, r7
 80003f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003f4:	4770      	bx	lr
	...

080003f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80003f8:	b580      	push	{r7, lr}
 80003fa:	b082      	sub	sp, #8
 80003fc:	af00      	add	r7, sp, #0
 80003fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000400:	687b      	ldr	r3, [r7, #4]
 8000402:	3b01      	subs	r3, #1
 8000404:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000408:	d301      	bcc.n	800040e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800040a:	2301      	movs	r3, #1
 800040c:	e00f      	b.n	800042e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800040e:	4a0a      	ldr	r2, [pc, #40]	; (8000438 <SysTick_Config+0x40>)
 8000410:	687b      	ldr	r3, [r7, #4]
 8000412:	3b01      	subs	r3, #1
 8000414:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000416:	210f      	movs	r1, #15
 8000418:	f04f 30ff 	mov.w	r0, #4294967295
 800041c:	f7ff ff8e 	bl	800033c <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000420:	4b05      	ldr	r3, [pc, #20]	; (8000438 <SysTick_Config+0x40>)
 8000422:	2200      	movs	r2, #0
 8000424:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000426:	4b04      	ldr	r3, [pc, #16]	; (8000438 <SysTick_Config+0x40>)
 8000428:	2207      	movs	r2, #7
 800042a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800042c:	2300      	movs	r3, #0
}
 800042e:	4618      	mov	r0, r3
 8000430:	3708      	adds	r7, #8
 8000432:	46bd      	mov	sp, r7
 8000434:	bd80      	pop	{r7, pc}
 8000436:	bf00      	nop
 8000438:	e000e010 	.word	0xe000e010

0800043c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800043c:	b580      	push	{r7, lr}
 800043e:	b082      	sub	sp, #8
 8000440:	af00      	add	r7, sp, #0
 8000442:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000444:	6878      	ldr	r0, [r7, #4]
 8000446:	f7ff ff47 	bl	80002d8 <NVIC_SetPriorityGrouping>
}
 800044a:	bf00      	nop
 800044c:	3708      	adds	r7, #8
 800044e:	46bd      	mov	sp, r7
 8000450:	bd80      	pop	{r7, pc}

08000452 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000452:	b580      	push	{r7, lr}
 8000454:	b086      	sub	sp, #24
 8000456:	af00      	add	r7, sp, #0
 8000458:	4603      	mov	r3, r0
 800045a:	60b9      	str	r1, [r7, #8]
 800045c:	607a      	str	r2, [r7, #4]
 800045e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000460:	2300      	movs	r3, #0
 8000462:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000464:	f7ff ff5c 	bl	8000320 <NVIC_GetPriorityGrouping>
 8000468:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800046a:	687a      	ldr	r2, [r7, #4]
 800046c:	68b9      	ldr	r1, [r7, #8]
 800046e:	6978      	ldr	r0, [r7, #20]
 8000470:	f7ff ff8e 	bl	8000390 <NVIC_EncodePriority>
 8000474:	4602      	mov	r2, r0
 8000476:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800047a:	4611      	mov	r1, r2
 800047c:	4618      	mov	r0, r3
 800047e:	f7ff ff5d 	bl	800033c <NVIC_SetPriority>
}
 8000482:	bf00      	nop
 8000484:	3718      	adds	r7, #24
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}

0800048a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800048a:	b580      	push	{r7, lr}
 800048c:	b082      	sub	sp, #8
 800048e:	af00      	add	r7, sp, #0
 8000490:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000492:	6878      	ldr	r0, [r7, #4]
 8000494:	f7ff ffb0 	bl	80003f8 <SysTick_Config>
 8000498:	4603      	mov	r3, r0
}
 800049a:	4618      	mov	r0, r3
 800049c:	3708      	adds	r7, #8
 800049e:	46bd      	mov	sp, r7
 80004a0:	bd80      	pop	{r7, pc}
	...

080004a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80004a4:	b480      	push	{r7}
 80004a6:	b087      	sub	sp, #28
 80004a8:	af00      	add	r7, sp, #0
 80004aa:	6078      	str	r0, [r7, #4]
 80004ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80004ae:	2300      	movs	r3, #0
 80004b0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80004b2:	2300      	movs	r3, #0
 80004b4:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 80004b6:	2300      	movs	r3, #0
 80004b8:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 80004ba:	e14e      	b.n	800075a <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80004bc:	683b      	ldr	r3, [r7, #0]
 80004be:	681a      	ldr	r2, [r3, #0]
 80004c0:	2101      	movs	r1, #1
 80004c2:	697b      	ldr	r3, [r7, #20]
 80004c4:	fa01 f303 	lsl.w	r3, r1, r3
 80004c8:	4013      	ands	r3, r2
 80004ca:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 80004cc:	68fb      	ldr	r3, [r7, #12]
 80004ce:	2b00      	cmp	r3, #0
 80004d0:	f000 8140 	beq.w	8000754 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004d4:	683b      	ldr	r3, [r7, #0]
 80004d6:	685b      	ldr	r3, [r3, #4]
 80004d8:	2b02      	cmp	r3, #2
 80004da:	d003      	beq.n	80004e4 <HAL_GPIO_Init+0x40>
 80004dc:	683b      	ldr	r3, [r7, #0]
 80004de:	685b      	ldr	r3, [r3, #4]
 80004e0:	2b12      	cmp	r3, #18
 80004e2:	d123      	bne.n	800052c <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80004e4:	697b      	ldr	r3, [r7, #20]
 80004e6:	08da      	lsrs	r2, r3, #3
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	3208      	adds	r2, #8
 80004ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80004f0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004f2:	697b      	ldr	r3, [r7, #20]
 80004f4:	f003 0307 	and.w	r3, r3, #7
 80004f8:	009b      	lsls	r3, r3, #2
 80004fa:	220f      	movs	r2, #15
 80004fc:	fa02 f303 	lsl.w	r3, r2, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	693a      	ldr	r2, [r7, #16]
 8000504:	4013      	ands	r3, r2
 8000506:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000508:	683b      	ldr	r3, [r7, #0]
 800050a:	691a      	ldr	r2, [r3, #16]
 800050c:	697b      	ldr	r3, [r7, #20]
 800050e:	f003 0307 	and.w	r3, r3, #7
 8000512:	009b      	lsls	r3, r3, #2
 8000514:	fa02 f303 	lsl.w	r3, r2, r3
 8000518:	693a      	ldr	r2, [r7, #16]
 800051a:	4313      	orrs	r3, r2
 800051c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800051e:	697b      	ldr	r3, [r7, #20]
 8000520:	08da      	lsrs	r2, r3, #3
 8000522:	687b      	ldr	r3, [r7, #4]
 8000524:	3208      	adds	r2, #8
 8000526:	6939      	ldr	r1, [r7, #16]
 8000528:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	681b      	ldr	r3, [r3, #0]
 8000530:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000532:	697b      	ldr	r3, [r7, #20]
 8000534:	005b      	lsls	r3, r3, #1
 8000536:	2203      	movs	r2, #3
 8000538:	fa02 f303 	lsl.w	r3, r2, r3
 800053c:	43db      	mvns	r3, r3
 800053e:	693a      	ldr	r2, [r7, #16]
 8000540:	4013      	ands	r3, r2
 8000542:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	685b      	ldr	r3, [r3, #4]
 8000548:	f003 0203 	and.w	r2, r3, #3
 800054c:	697b      	ldr	r3, [r7, #20]
 800054e:	005b      	lsls	r3, r3, #1
 8000550:	fa02 f303 	lsl.w	r3, r2, r3
 8000554:	693a      	ldr	r2, [r7, #16]
 8000556:	4313      	orrs	r3, r2
 8000558:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800055a:	687b      	ldr	r3, [r7, #4]
 800055c:	693a      	ldr	r2, [r7, #16]
 800055e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000560:	683b      	ldr	r3, [r7, #0]
 8000562:	685b      	ldr	r3, [r3, #4]
 8000564:	2b01      	cmp	r3, #1
 8000566:	d00b      	beq.n	8000580 <HAL_GPIO_Init+0xdc>
 8000568:	683b      	ldr	r3, [r7, #0]
 800056a:	685b      	ldr	r3, [r3, #4]
 800056c:	2b02      	cmp	r3, #2
 800056e:	d007      	beq.n	8000580 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000570:	683b      	ldr	r3, [r7, #0]
 8000572:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000574:	2b11      	cmp	r3, #17
 8000576:	d003      	beq.n	8000580 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000578:	683b      	ldr	r3, [r7, #0]
 800057a:	685b      	ldr	r3, [r3, #4]
 800057c:	2b12      	cmp	r3, #18
 800057e:	d130      	bne.n	80005e2 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	689b      	ldr	r3, [r3, #8]
 8000584:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000586:	697b      	ldr	r3, [r7, #20]
 8000588:	005b      	lsls	r3, r3, #1
 800058a:	2203      	movs	r2, #3
 800058c:	fa02 f303 	lsl.w	r3, r2, r3
 8000590:	43db      	mvns	r3, r3
 8000592:	693a      	ldr	r2, [r7, #16]
 8000594:	4013      	ands	r3, r2
 8000596:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000598:	683b      	ldr	r3, [r7, #0]
 800059a:	68da      	ldr	r2, [r3, #12]
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	005b      	lsls	r3, r3, #1
 80005a0:	fa02 f303 	lsl.w	r3, r2, r3
 80005a4:	693a      	ldr	r2, [r7, #16]
 80005a6:	4313      	orrs	r3, r2
 80005a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80005aa:	687b      	ldr	r3, [r7, #4]
 80005ac:	693a      	ldr	r2, [r7, #16]
 80005ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80005b6:	2201      	movs	r2, #1
 80005b8:	697b      	ldr	r3, [r7, #20]
 80005ba:	fa02 f303 	lsl.w	r3, r2, r3
 80005be:	43db      	mvns	r3, r3
 80005c0:	693a      	ldr	r2, [r7, #16]
 80005c2:	4013      	ands	r3, r2
 80005c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80005c6:	683b      	ldr	r3, [r7, #0]
 80005c8:	685b      	ldr	r3, [r3, #4]
 80005ca:	091b      	lsrs	r3, r3, #4
 80005cc:	f003 0201 	and.w	r2, r3, #1
 80005d0:	697b      	ldr	r3, [r7, #20]
 80005d2:	fa02 f303 	lsl.w	r3, r2, r3
 80005d6:	693a      	ldr	r2, [r7, #16]
 80005d8:	4313      	orrs	r3, r2
 80005da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	693a      	ldr	r2, [r7, #16]
 80005e0:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80005e2:	687b      	ldr	r3, [r7, #4]
 80005e4:	68db      	ldr	r3, [r3, #12]
 80005e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80005e8:	697b      	ldr	r3, [r7, #20]
 80005ea:	005b      	lsls	r3, r3, #1
 80005ec:	2203      	movs	r2, #3
 80005ee:	fa02 f303 	lsl.w	r3, r2, r3
 80005f2:	43db      	mvns	r3, r3
 80005f4:	693a      	ldr	r2, [r7, #16]
 80005f6:	4013      	ands	r3, r2
 80005f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80005fa:	683b      	ldr	r3, [r7, #0]
 80005fc:	689a      	ldr	r2, [r3, #8]
 80005fe:	697b      	ldr	r3, [r7, #20]
 8000600:	005b      	lsls	r3, r3, #1
 8000602:	fa02 f303 	lsl.w	r3, r2, r3
 8000606:	693a      	ldr	r2, [r7, #16]
 8000608:	4313      	orrs	r3, r2
 800060a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	693a      	ldr	r2, [r7, #16]
 8000610:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000612:	683b      	ldr	r3, [r7, #0]
 8000614:	685b      	ldr	r3, [r3, #4]
 8000616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800061a:	2b00      	cmp	r3, #0
 800061c:	f000 809a 	beq.w	8000754 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000620:	4b55      	ldr	r3, [pc, #340]	; (8000778 <HAL_GPIO_Init+0x2d4>)
 8000622:	699b      	ldr	r3, [r3, #24]
 8000624:	4a54      	ldr	r2, [pc, #336]	; (8000778 <HAL_GPIO_Init+0x2d4>)
 8000626:	f043 0301 	orr.w	r3, r3, #1
 800062a:	6193      	str	r3, [r2, #24]
 800062c:	4b52      	ldr	r3, [pc, #328]	; (8000778 <HAL_GPIO_Init+0x2d4>)
 800062e:	699b      	ldr	r3, [r3, #24]
 8000630:	f003 0301 	and.w	r3, r3, #1
 8000634:	60bb      	str	r3, [r7, #8]
 8000636:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000638:	4a50      	ldr	r2, [pc, #320]	; (800077c <HAL_GPIO_Init+0x2d8>)
 800063a:	697b      	ldr	r3, [r7, #20]
 800063c:	089b      	lsrs	r3, r3, #2
 800063e:	3302      	adds	r3, #2
 8000640:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000644:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000646:	697b      	ldr	r3, [r7, #20]
 8000648:	f003 0303 	and.w	r3, r3, #3
 800064c:	009b      	lsls	r3, r3, #2
 800064e:	220f      	movs	r2, #15
 8000650:	fa02 f303 	lsl.w	r3, r2, r3
 8000654:	43db      	mvns	r3, r3
 8000656:	693a      	ldr	r2, [r7, #16]
 8000658:	4013      	ands	r3, r2
 800065a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800065c:	687b      	ldr	r3, [r7, #4]
 800065e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000662:	d013      	beq.n	800068c <HAL_GPIO_Init+0x1e8>
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	4a46      	ldr	r2, [pc, #280]	; (8000780 <HAL_GPIO_Init+0x2dc>)
 8000668:	4293      	cmp	r3, r2
 800066a:	d00d      	beq.n	8000688 <HAL_GPIO_Init+0x1e4>
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	4a45      	ldr	r2, [pc, #276]	; (8000784 <HAL_GPIO_Init+0x2e0>)
 8000670:	4293      	cmp	r3, r2
 8000672:	d007      	beq.n	8000684 <HAL_GPIO_Init+0x1e0>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	4a44      	ldr	r2, [pc, #272]	; (8000788 <HAL_GPIO_Init+0x2e4>)
 8000678:	4293      	cmp	r3, r2
 800067a:	d101      	bne.n	8000680 <HAL_GPIO_Init+0x1dc>
 800067c:	2303      	movs	r3, #3
 800067e:	e006      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 8000680:	2305      	movs	r3, #5
 8000682:	e004      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 8000684:	2302      	movs	r3, #2
 8000686:	e002      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 8000688:	2301      	movs	r3, #1
 800068a:	e000      	b.n	800068e <HAL_GPIO_Init+0x1ea>
 800068c:	2300      	movs	r3, #0
 800068e:	697a      	ldr	r2, [r7, #20]
 8000690:	f002 0203 	and.w	r2, r2, #3
 8000694:	0092      	lsls	r2, r2, #2
 8000696:	4093      	lsls	r3, r2
 8000698:	693a      	ldr	r2, [r7, #16]
 800069a:	4313      	orrs	r3, r2
 800069c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800069e:	4937      	ldr	r1, [pc, #220]	; (800077c <HAL_GPIO_Init+0x2d8>)
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	089b      	lsrs	r3, r3, #2
 80006a4:	3302      	adds	r3, #2
 80006a6:	693a      	ldr	r2, [r7, #16]
 80006a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	43db      	mvns	r3, r3
 80006b6:	693a      	ldr	r2, [r7, #16]
 80006b8:	4013      	ands	r3, r2
 80006ba:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80006bc:	683b      	ldr	r3, [r7, #0]
 80006be:	685b      	ldr	r3, [r3, #4]
 80006c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d003      	beq.n	80006d0 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80006c8:	693a      	ldr	r2, [r7, #16]
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	4313      	orrs	r3, r2
 80006ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80006d0:	4a2e      	ldr	r2, [pc, #184]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006d2:	693b      	ldr	r3, [r7, #16]
 80006d4:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80006d6:	4b2d      	ldr	r3, [pc, #180]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006d8:	685b      	ldr	r3, [r3, #4]
 80006da:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80006dc:	68fb      	ldr	r3, [r7, #12]
 80006de:	43db      	mvns	r3, r3
 80006e0:	693a      	ldr	r2, [r7, #16]
 80006e2:	4013      	ands	r3, r2
 80006e4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80006e6:	683b      	ldr	r3, [r7, #0]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d003      	beq.n	80006fa <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80006f2:	693a      	ldr	r2, [r7, #16]
 80006f4:	68fb      	ldr	r3, [r7, #12]
 80006f6:	4313      	orrs	r3, r2
 80006f8:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <HAL_GPIO_Init+0x2e8>)
 80006fc:	693b      	ldr	r3, [r7, #16]
 80006fe:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000700:	4b22      	ldr	r3, [pc, #136]	; (800078c <HAL_GPIO_Init+0x2e8>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000706:	68fb      	ldr	r3, [r7, #12]
 8000708:	43db      	mvns	r3, r3
 800070a:	693a      	ldr	r2, [r7, #16]
 800070c:	4013      	ands	r3, r2
 800070e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000710:	683b      	ldr	r3, [r7, #0]
 8000712:	685b      	ldr	r3, [r3, #4]
 8000714:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000718:	2b00      	cmp	r3, #0
 800071a:	d003      	beq.n	8000724 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 800071c:	693a      	ldr	r2, [r7, #16]
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	4313      	orrs	r3, r2
 8000722:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000724:	4a19      	ldr	r2, [pc, #100]	; (800078c <HAL_GPIO_Init+0x2e8>)
 8000726:	693b      	ldr	r3, [r7, #16]
 8000728:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800072a:	4b18      	ldr	r3, [pc, #96]	; (800078c <HAL_GPIO_Init+0x2e8>)
 800072c:	68db      	ldr	r3, [r3, #12]
 800072e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	43db      	mvns	r3, r3
 8000734:	693a      	ldr	r2, [r7, #16]
 8000736:	4013      	ands	r3, r2
 8000738:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800073a:	683b      	ldr	r3, [r7, #0]
 800073c:	685b      	ldr	r3, [r3, #4]
 800073e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000742:	2b00      	cmp	r3, #0
 8000744:	d003      	beq.n	800074e <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8000746:	693a      	ldr	r2, [r7, #16]
 8000748:	68fb      	ldr	r3, [r7, #12]
 800074a:	4313      	orrs	r3, r2
 800074c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800074e:	4a0f      	ldr	r2, [pc, #60]	; (800078c <HAL_GPIO_Init+0x2e8>)
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8000754:	697b      	ldr	r3, [r7, #20]
 8000756:	3301      	adds	r3, #1
 8000758:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800075a:	683b      	ldr	r3, [r7, #0]
 800075c:	681a      	ldr	r2, [r3, #0]
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	fa22 f303 	lsr.w	r3, r2, r3
 8000764:	2b00      	cmp	r3, #0
 8000766:	f47f aea9 	bne.w	80004bc <HAL_GPIO_Init+0x18>
  }
}
 800076a:	bf00      	nop
 800076c:	371c      	adds	r7, #28
 800076e:	46bd      	mov	sp, r7
 8000770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000774:	4770      	bx	lr
 8000776:	bf00      	nop
 8000778:	40021000 	.word	0x40021000
 800077c:	40010000 	.word	0x40010000
 8000780:	48000400 	.word	0x48000400
 8000784:	48000800 	.word	0x48000800
 8000788:	48000c00 	.word	0x48000c00
 800078c:	40010400 	.word	0x40010400

08000790 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
 8000798:	460b      	mov	r3, r1
 800079a:	807b      	strh	r3, [r7, #2]
 800079c:	4613      	mov	r3, r2
 800079e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80007a0:	787b      	ldrb	r3, [r7, #1]
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d003      	beq.n	80007ae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80007a6:	887a      	ldrh	r2, [r7, #2]
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80007ac:	e002      	b.n	80007b4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80007ae:	887a      	ldrh	r2, [r7, #2]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80007b4:	bf00      	nop
 80007b6:	370c      	adds	r7, #12
 80007b8:	46bd      	mov	sp, r7
 80007ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007be:	4770      	bx	lr

080007c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b082      	sub	sp, #8
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d101      	bne.n	80007d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80007ce:	2301      	movs	r3, #1
 80007d0:	e081      	b.n	80008d6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80007d8:	b2db      	uxtb	r3, r3
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d106      	bne.n	80007ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2200      	movs	r2, #0
 80007e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80007e6:	6878      	ldr	r0, [r7, #4]
 80007e8:	f001 ff74 	bl	80026d4 <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2224      	movs	r2, #36	; 0x24
 80007f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	681a      	ldr	r2, [r3, #0]
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	681b      	ldr	r3, [r3, #0]
 80007fe:	f022 0201 	bic.w	r2, r2, #1
 8000802:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	685a      	ldr	r2, [r3, #4]
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000810:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	689a      	ldr	r2, [r3, #8]
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000820:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	68db      	ldr	r3, [r3, #12]
 8000826:	2b01      	cmp	r3, #1
 8000828:	d107      	bne.n	800083a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	689a      	ldr	r2, [r3, #8]
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000836:	609a      	str	r2, [r3, #8]
 8000838:	e006      	b.n	8000848 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800083a:	687b      	ldr	r3, [r7, #4]
 800083c:	689a      	ldr	r2, [r3, #8]
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000846:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	68db      	ldr	r3, [r3, #12]
 800084c:	2b02      	cmp	r3, #2
 800084e:	d104      	bne.n	800085a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000850:	687b      	ldr	r3, [r7, #4]
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000858:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	681b      	ldr	r3, [r3, #0]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	687a      	ldr	r2, [r7, #4]
 8000862:	6812      	ldr	r2, [r2, #0]
 8000864:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000868:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800086c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68da      	ldr	r2, [r3, #12]
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800087c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	691a      	ldr	r2, [r3, #16]
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	695b      	ldr	r3, [r3, #20]
 8000886:	ea42 0103 	orr.w	r1, r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	699b      	ldr	r3, [r3, #24]
 800088e:	021a      	lsls	r2, r3, #8
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	430a      	orrs	r2, r1
 8000896:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	69d9      	ldr	r1, [r3, #28]
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6a1a      	ldr	r2, [r3, #32]
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	430a      	orrs	r2, r1
 80008a6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	681b      	ldr	r3, [r3, #0]
 80008b2:	f042 0201 	orr.w	r2, r2, #1
 80008b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2200      	movs	r2, #0
 80008bc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2220      	movs	r2, #32
 80008c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2200      	movs	r2, #0
 80008ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	2200      	movs	r2, #0
 80008d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80008d4:	2300      	movs	r3, #0
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3708      	adds	r7, #8
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}
	...

080008e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b088      	sub	sp, #32
 80008e4:	af02      	add	r7, sp, #8
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	607a      	str	r2, [r7, #4]
 80008ea:	461a      	mov	r2, r3
 80008ec:	460b      	mov	r3, r1
 80008ee:	817b      	strh	r3, [r7, #10]
 80008f0:	4613      	mov	r3, r2
 80008f2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 80008f4:	2300      	movs	r3, #0
 80008f6:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80008f8:	68fb      	ldr	r3, [r7, #12]
 80008fa:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b20      	cmp	r3, #32
 8000902:	f040 80e4 	bne.w	8000ace <HAL_I2C_Master_Transmit+0x1ee>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000906:	68fb      	ldr	r3, [r7, #12]
 8000908:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800090c:	2b01      	cmp	r3, #1
 800090e:	d101      	bne.n	8000914 <HAL_I2C_Master_Transmit+0x34>
 8000910:	2302      	movs	r3, #2
 8000912:	e0dd      	b.n	8000ad0 <HAL_I2C_Master_Transmit+0x1f0>
 8000914:	68fb      	ldr	r3, [r7, #12]
 8000916:	2201      	movs	r2, #1
 8000918:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800091c:	f7ff fcae 	bl	800027c <HAL_GetTick>
 8000920:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000922:	697b      	ldr	r3, [r7, #20]
 8000924:	9300      	str	r3, [sp, #0]
 8000926:	2319      	movs	r3, #25
 8000928:	2201      	movs	r2, #1
 800092a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800092e:	68f8      	ldr	r0, [r7, #12]
 8000930:	f000 f8fa 	bl	8000b28 <I2C_WaitOnFlagUntilTimeout>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d001      	beq.n	800093e <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 800093a:	2303      	movs	r3, #3
 800093c:	e0c8      	b.n	8000ad0 <HAL_I2C_Master_Transmit+0x1f0>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800093e:	68fb      	ldr	r3, [r7, #12]
 8000940:	2221      	movs	r2, #33	; 0x21
 8000942:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000946:	68fb      	ldr	r3, [r7, #12]
 8000948:	2210      	movs	r2, #16
 800094a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800094e:	68fb      	ldr	r3, [r7, #12]
 8000950:	2200      	movs	r2, #0
 8000952:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000954:	68fb      	ldr	r3, [r7, #12]
 8000956:	687a      	ldr	r2, [r7, #4]
 8000958:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800095a:	68fb      	ldr	r3, [r7, #12]
 800095c:	893a      	ldrh	r2, [r7, #8]
 800095e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000960:	68fb      	ldr	r3, [r7, #12]
 8000962:	2200      	movs	r2, #0
 8000964:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000966:	68fb      	ldr	r3, [r7, #12]
 8000968:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800096a:	b29b      	uxth	r3, r3
 800096c:	2bff      	cmp	r3, #255	; 0xff
 800096e:	d90e      	bls.n	800098e <HAL_I2C_Master_Transmit+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	22ff      	movs	r2, #255	; 0xff
 8000974:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000976:	68fb      	ldr	r3, [r7, #12]
 8000978:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800097a:	b2da      	uxtb	r2, r3
 800097c:	8979      	ldrh	r1, [r7, #10]
 800097e:	4b56      	ldr	r3, [pc, #344]	; (8000ad8 <HAL_I2C_Master_Transmit+0x1f8>)
 8000980:	9300      	str	r3, [sp, #0]
 8000982:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f000 f9e2 	bl	8000d50 <I2C_TransferConfig>
 800098c:	e070      	b.n	8000a70 <HAL_I2C_Master_Transmit+0x190>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800098e:	68fb      	ldr	r3, [r7, #12]
 8000990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000992:	b29a      	uxth	r2, r3
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000998:	68fb      	ldr	r3, [r7, #12]
 800099a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800099c:	b2da      	uxtb	r2, r3
 800099e:	8979      	ldrh	r1, [r7, #10]
 80009a0:	4b4d      	ldr	r3, [pc, #308]	; (8000ad8 <HAL_I2C_Master_Transmit+0x1f8>)
 80009a2:	9300      	str	r3, [sp, #0]
 80009a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80009a8:	68f8      	ldr	r0, [r7, #12]
 80009aa:	f000 f9d1 	bl	8000d50 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80009ae:	e05f      	b.n	8000a70 <HAL_I2C_Master_Transmit+0x190>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80009b0:	697a      	ldr	r2, [r7, #20]
 80009b2:	6a39      	ldr	r1, [r7, #32]
 80009b4:	68f8      	ldr	r0, [r7, #12]
 80009b6:	f000 f8f1 	bl	8000b9c <I2C_WaitOnTXISFlagUntilTimeout>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d007      	beq.n	80009d0 <HAL_I2C_Master_Transmit+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80009c0:	68fb      	ldr	r3, [r7, #12]
 80009c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	d101      	bne.n	80009cc <HAL_I2C_Master_Transmit+0xec>
        {
          return HAL_ERROR;
 80009c8:	2301      	movs	r3, #1
 80009ca:	e081      	b.n	8000ad0 <HAL_I2C_Master_Transmit+0x1f0>
        }
        else
        {
          return HAL_TIMEOUT;
 80009cc:	2303      	movs	r3, #3
 80009ce:	e07f      	b.n	8000ad0 <HAL_I2C_Master_Transmit+0x1f0>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80009d4:	1c59      	adds	r1, r3, #1
 80009d6:	68fa      	ldr	r2, [r7, #12]
 80009d8:	6251      	str	r1, [r2, #36]	; 0x24
 80009da:	781a      	ldrb	r2, [r3, #0]
 80009dc:	68fb      	ldr	r3, [r7, #12]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80009e2:	68fb      	ldr	r3, [r7, #12]
 80009e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80009e6:	b29b      	uxth	r3, r3
 80009e8:	3b01      	subs	r3, #1
 80009ea:	b29a      	uxth	r2, r3
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80009f4:	3b01      	subs	r3, #1
 80009f6:	b29a      	uxth	r2, r3
 80009f8:	68fb      	ldr	r3, [r7, #12]
 80009fa:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d135      	bne.n	8000a70 <HAL_I2C_Master_Transmit+0x190>
 8000a04:	68fb      	ldr	r3, [r7, #12]
 8000a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a08:	b29b      	uxth	r3, r3
 8000a0a:	2b00      	cmp	r3, #0
 8000a0c:	d030      	beq.n	8000a70 <HAL_I2C_Master_Transmit+0x190>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000a0e:	697b      	ldr	r3, [r7, #20]
 8000a10:	9300      	str	r3, [sp, #0]
 8000a12:	6a3b      	ldr	r3, [r7, #32]
 8000a14:	2200      	movs	r2, #0
 8000a16:	2180      	movs	r1, #128	; 0x80
 8000a18:	68f8      	ldr	r0, [r7, #12]
 8000a1a:	f000 f885 	bl	8000b28 <I2C_WaitOnFlagUntilTimeout>
 8000a1e:	4603      	mov	r3, r0
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d001      	beq.n	8000a28 <HAL_I2C_Master_Transmit+0x148>
        {
          return HAL_TIMEOUT;
 8000a24:	2303      	movs	r3, #3
 8000a26:	e053      	b.n	8000ad0 <HAL_I2C_Master_Transmit+0x1f0>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000a28:	68fb      	ldr	r3, [r7, #12]
 8000a2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	2bff      	cmp	r3, #255	; 0xff
 8000a30:	d90e      	bls.n	8000a50 <HAL_I2C_Master_Transmit+0x170>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000a32:	68fb      	ldr	r3, [r7, #12]
 8000a34:	22ff      	movs	r2, #255	; 0xff
 8000a36:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000a38:	68fb      	ldr	r3, [r7, #12]
 8000a3a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	8979      	ldrh	r1, [r7, #10]
 8000a40:	2300      	movs	r3, #0
 8000a42:	9300      	str	r3, [sp, #0]
 8000a44:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f000 f981 	bl	8000d50 <I2C_TransferConfig>
 8000a4e:	e00f      	b.n	8000a70 <HAL_I2C_Master_Transmit+0x190>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000a50:	68fb      	ldr	r3, [r7, #12]
 8000a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a54:	b29a      	uxth	r2, r3
 8000a56:	68fb      	ldr	r3, [r7, #12]
 8000a58:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000a5a:	68fb      	ldr	r3, [r7, #12]
 8000a5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000a5e:	b2da      	uxtb	r2, r3
 8000a60:	8979      	ldrh	r1, [r7, #10]
 8000a62:	2300      	movs	r3, #0
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000a6a:	68f8      	ldr	r0, [r7, #12]
 8000a6c:	f000 f970 	bl	8000d50 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000a74:	b29b      	uxth	r3, r3
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d19a      	bne.n	80009b0 <HAL_I2C_Master_Transmit+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000a7a:	697a      	ldr	r2, [r7, #20]
 8000a7c:	6a39      	ldr	r1, [r7, #32]
 8000a7e:	68f8      	ldr	r0, [r7, #12]
 8000a80:	f000 f8cc 	bl	8000c1c <I2C_WaitOnSTOPFlagUntilTimeout>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d007      	beq.n	8000a9a <HAL_I2C_Master_Transmit+0x1ba>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8000a8a:	68fb      	ldr	r3, [r7, #12]
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	2b04      	cmp	r3, #4
 8000a90:	d101      	bne.n	8000a96 <HAL_I2C_Master_Transmit+0x1b6>
      {
        return HAL_ERROR;
 8000a92:	2301      	movs	r3, #1
 8000a94:	e01c      	b.n	8000ad0 <HAL_I2C_Master_Transmit+0x1f0>
      }
      else
      {
        return HAL_TIMEOUT;
 8000a96:	2303      	movs	r3, #3
 8000a98:	e01a      	b.n	8000ad0 <HAL_I2C_Master_Transmit+0x1f0>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	2220      	movs	r2, #32
 8000aa0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000aa2:	68fb      	ldr	r3, [r7, #12]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	6859      	ldr	r1, [r3, #4]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	681a      	ldr	r2, [r3, #0]
 8000aac:	4b0b      	ldr	r3, [pc, #44]	; (8000adc <HAL_I2C_Master_Transmit+0x1fc>)
 8000aae:	400b      	ands	r3, r1
 8000ab0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	2220      	movs	r2, #32
 8000ab6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	2200      	movs	r2, #0
 8000abe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000aca:	2300      	movs	r3, #0
 8000acc:	e000      	b.n	8000ad0 <HAL_I2C_Master_Transmit+0x1f0>
  }
  else
  {
    return HAL_BUSY;
 8000ace:	2302      	movs	r3, #2
  }
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	3718      	adds	r7, #24
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	bd80      	pop	{r7, pc}
 8000ad8:	80002000 	.word	0x80002000
 8000adc:	fe00e800 	.word	0xfe00e800

08000ae0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b083      	sub	sp, #12
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	699b      	ldr	r3, [r3, #24]
 8000aee:	f003 0302 	and.w	r3, r3, #2
 8000af2:	2b02      	cmp	r3, #2
 8000af4:	d103      	bne.n	8000afe <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	681b      	ldr	r3, [r3, #0]
 8000afa:	2200      	movs	r2, #0
 8000afc:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8000afe:	687b      	ldr	r3, [r7, #4]
 8000b00:	681b      	ldr	r3, [r3, #0]
 8000b02:	699b      	ldr	r3, [r3, #24]
 8000b04:	f003 0301 	and.w	r3, r3, #1
 8000b08:	2b01      	cmp	r3, #1
 8000b0a:	d007      	beq.n	8000b1c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	699a      	ldr	r2, [r3, #24]
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f042 0201 	orr.w	r2, r2, #1
 8000b1a:	619a      	str	r2, [r3, #24]
  }
}
 8000b1c:	bf00      	nop
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	b084      	sub	sp, #16
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	60f8      	str	r0, [r7, #12]
 8000b30:	60b9      	str	r1, [r7, #8]
 8000b32:	603b      	str	r3, [r7, #0]
 8000b34:	4613      	mov	r3, r2
 8000b36:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000b38:	e01c      	b.n	8000b74 <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b40:	d018      	beq.n	8000b74 <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000b42:	683b      	ldr	r3, [r7, #0]
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d007      	beq.n	8000b58 <I2C_WaitOnFlagUntilTimeout+0x30>
 8000b48:	f7ff fb98 	bl	800027c <HAL_GetTick>
 8000b4c:	4602      	mov	r2, r0
 8000b4e:	69bb      	ldr	r3, [r7, #24]
 8000b50:	1ad3      	subs	r3, r2, r3
 8000b52:	683a      	ldr	r2, [r7, #0]
 8000b54:	429a      	cmp	r2, r3
 8000b56:	d20d      	bcs.n	8000b74 <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8000b58:	68fb      	ldr	r3, [r7, #12]
 8000b5a:	2220      	movs	r2, #32
 8000b5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2200      	movs	r2, #0
 8000b64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000b68:	68fb      	ldr	r3, [r7, #12]
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8000b70:	2303      	movs	r3, #3
 8000b72:	e00f      	b.n	8000b94 <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8000b74:	68fb      	ldr	r3, [r7, #12]
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	699a      	ldr	r2, [r3, #24]
 8000b7a:	68bb      	ldr	r3, [r7, #8]
 8000b7c:	4013      	ands	r3, r2
 8000b7e:	68ba      	ldr	r2, [r7, #8]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	bf0c      	ite	eq
 8000b84:	2301      	moveq	r3, #1
 8000b86:	2300      	movne	r3, #0
 8000b88:	b2db      	uxtb	r3, r3
 8000b8a:	461a      	mov	r2, r3
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	429a      	cmp	r2, r3
 8000b90:	d0d3      	beq.n	8000b3a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
}
 8000b94:	4618      	mov	r0, r3
 8000b96:	3710      	adds	r7, #16
 8000b98:	46bd      	mov	sp, r7
 8000b9a:	bd80      	pop	{r7, pc}

08000b9c <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b084      	sub	sp, #16
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	60f8      	str	r0, [r7, #12]
 8000ba4:	60b9      	str	r1, [r7, #8]
 8000ba6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000ba8:	e02c      	b.n	8000c04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000baa:	687a      	ldr	r2, [r7, #4]
 8000bac:	68b9      	ldr	r1, [r7, #8]
 8000bae:	68f8      	ldr	r0, [r7, #12]
 8000bb0:	f000 f870 	bl	8000c94 <I2C_IsAcknowledgeFailed>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000bba:	2301      	movs	r3, #1
 8000bbc:	e02a      	b.n	8000c14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8000bbe:	68bb      	ldr	r3, [r7, #8]
 8000bc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000bc4:	d01e      	beq.n	8000c04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000bc6:	68bb      	ldr	r3, [r7, #8]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d007      	beq.n	8000bdc <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8000bcc:	f7ff fb56 	bl	800027c <HAL_GetTick>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d213      	bcs.n	8000c04 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000bdc:	68fb      	ldr	r3, [r7, #12]
 8000bde:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000be0:	f043 0220 	orr.w	r2, r3, #32
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8000be8:	68fb      	ldr	r3, [r7, #12]
 8000bea:	2220      	movs	r2, #32
 8000bec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8000c00:	2303      	movs	r3, #3
 8000c02:	e007      	b.n	8000c14 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	699b      	ldr	r3, [r3, #24]
 8000c0a:	f003 0302 	and.w	r3, r3, #2
 8000c0e:	2b02      	cmp	r3, #2
 8000c10:	d1cb      	bne.n	8000baa <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
}
 8000c14:	4618      	mov	r0, r3
 8000c16:	3710      	adds	r7, #16
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}

08000c1c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b084      	sub	sp, #16
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	60f8      	str	r0, [r7, #12]
 8000c24:	60b9      	str	r1, [r7, #8]
 8000c26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000c28:	e028      	b.n	8000c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8000c2a:	687a      	ldr	r2, [r7, #4]
 8000c2c:	68b9      	ldr	r1, [r7, #8]
 8000c2e:	68f8      	ldr	r0, [r7, #12]
 8000c30:	f000 f830 	bl	8000c94 <I2C_IsAcknowledgeFailed>
 8000c34:	4603      	mov	r3, r0
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d001      	beq.n	8000c3e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8000c3a:	2301      	movs	r3, #1
 8000c3c:	e026      	b.n	8000c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000c3e:	68bb      	ldr	r3, [r7, #8]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d007      	beq.n	8000c54 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8000c44:	f7ff fb1a 	bl	800027c <HAL_GetTick>
 8000c48:	4602      	mov	r2, r0
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	1ad3      	subs	r3, r2, r3
 8000c4e:	68ba      	ldr	r2, [r7, #8]
 8000c50:	429a      	cmp	r2, r3
 8000c52:	d213      	bcs.n	8000c7c <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8000c54:	68fb      	ldr	r3, [r7, #12]
 8000c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c58:	f043 0220 	orr.w	r2, r3, #32
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8000c60:	68fb      	ldr	r3, [r7, #12]
 8000c62:	2220      	movs	r2, #32
 8000c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8000c68:	68fb      	ldr	r3, [r7, #12]
 8000c6a:	2200      	movs	r2, #0
 8000c6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	2200      	movs	r2, #0
 8000c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	e007      	b.n	8000c8c <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000c7c:	68fb      	ldr	r3, [r7, #12]
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	699b      	ldr	r3, [r3, #24]
 8000c82:	f003 0320 	and.w	r3, r3, #32
 8000c86:	2b20      	cmp	r3, #32
 8000c88:	d1cf      	bne.n	8000c2a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8000c8a:	2300      	movs	r3, #0
}
 8000c8c:	4618      	mov	r0, r3
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}

08000c94 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b084      	sub	sp, #16
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8000ca0:	68fb      	ldr	r3, [r7, #12]
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	699b      	ldr	r3, [r3, #24]
 8000ca6:	f003 0310 	and.w	r3, r3, #16
 8000caa:	2b10      	cmp	r3, #16
 8000cac:	d148      	bne.n	8000d40 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000cae:	e01c      	b.n	8000cea <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8000cb0:	68bb      	ldr	r3, [r7, #8]
 8000cb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000cb6:	d018      	beq.n	8000cea <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d007      	beq.n	8000cce <I2C_IsAcknowledgeFailed+0x3a>
 8000cbe:	f7ff fadd 	bl	800027c <HAL_GetTick>
 8000cc2:	4602      	mov	r2, r0
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	429a      	cmp	r2, r3
 8000ccc:	d20d      	bcs.n	8000cea <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 8000cce:	68fb      	ldr	r3, [r7, #12]
 8000cd0:	2220      	movs	r2, #32
 8000cd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	2200      	movs	r2, #0
 8000cda:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8000cde:	68fb      	ldr	r3, [r7, #12]
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 8000ce6:	2303      	movs	r3, #3
 8000ce8:	e02b      	b.n	8000d42 <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8000cea:	68fb      	ldr	r3, [r7, #12]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	699b      	ldr	r3, [r3, #24]
 8000cf0:	f003 0320 	and.w	r3, r3, #32
 8000cf4:	2b20      	cmp	r3, #32
 8000cf6:	d1db      	bne.n	8000cb0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8000cf8:	68fb      	ldr	r3, [r7, #12]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	2210      	movs	r2, #16
 8000cfe:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	2220      	movs	r2, #32
 8000d06:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8000d08:	68f8      	ldr	r0, [r7, #12]
 8000d0a:	f7ff fee9 	bl	8000ae0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000d0e:	68fb      	ldr	r3, [r7, #12]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	6859      	ldr	r1, [r3, #4]
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	681a      	ldr	r2, [r3, #0]
 8000d18:	4b0c      	ldr	r3, [pc, #48]	; (8000d4c <I2C_IsAcknowledgeFailed+0xb8>)
 8000d1a:	400b      	ands	r3, r1
 8000d1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8000d1e:	68fb      	ldr	r3, [r7, #12]
 8000d20:	2204      	movs	r2, #4
 8000d22:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8000d24:	68fb      	ldr	r3, [r7, #12]
 8000d26:	2220      	movs	r2, #32
 8000d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8000d2c:	68fb      	ldr	r3, [r7, #12]
 8000d2e:	2200      	movs	r2, #0
 8000d30:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	2200      	movs	r2, #0
 8000d38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8000d3c:	2301      	movs	r3, #1
 8000d3e:	e000      	b.n	8000d42 <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8000d40:	2300      	movs	r3, #0
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	3710      	adds	r7, #16
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
 8000d4a:	bf00      	nop
 8000d4c:	fe00e800 	.word	0xfe00e800

08000d50 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8000d50:	b480      	push	{r7}
 8000d52:	b085      	sub	sp, #20
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	60f8      	str	r0, [r7, #12]
 8000d58:	607b      	str	r3, [r7, #4]
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	817b      	strh	r3, [r7, #10]
 8000d5e:	4613      	mov	r3, r2
 8000d60:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	685a      	ldr	r2, [r3, #4]
 8000d68:	69bb      	ldr	r3, [r7, #24]
 8000d6a:	0d5b      	lsrs	r3, r3, #21
 8000d6c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8000d70:	4b0d      	ldr	r3, [pc, #52]	; (8000da8 <I2C_TransferConfig+0x58>)
 8000d72:	430b      	orrs	r3, r1
 8000d74:	43db      	mvns	r3, r3
 8000d76:	ea02 0103 	and.w	r1, r2, r3
 8000d7a:	897b      	ldrh	r3, [r7, #10]
 8000d7c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8000d80:	7a7b      	ldrb	r3, [r7, #9]
 8000d82:	041b      	lsls	r3, r3, #16
 8000d84:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	69bb      	ldr	r3, [r7, #24]
 8000d90:	431a      	orrs	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	430a      	orrs	r2, r1
 8000d98:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8000d9a:	bf00      	nop
 8000d9c:	3714      	adds	r7, #20
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	03ff63ff 	.word	0x03ff63ff

08000dac <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b083      	sub	sp, #12
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000db6:	687b      	ldr	r3, [r7, #4]
 8000db8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000dbc:	b2db      	uxtb	r3, r3
 8000dbe:	2b20      	cmp	r3, #32
 8000dc0:	d138      	bne.n	8000e34 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000dc8:	2b01      	cmp	r3, #1
 8000dca:	d101      	bne.n	8000dd0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8000dcc:	2302      	movs	r3, #2
 8000dce:	e032      	b.n	8000e36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	2201      	movs	r2, #1
 8000dd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000dd8:	687b      	ldr	r3, [r7, #4]
 8000dda:	2224      	movs	r2, #36	; 0x24
 8000ddc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	681a      	ldr	r2, [r3, #0]
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	f022 0201 	bic.w	r2, r2, #1
 8000dee:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	681a      	ldr	r2, [r3, #0]
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000dfe:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	6819      	ldr	r1, [r3, #0]
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	683a      	ldr	r2, [r7, #0]
 8000e0c:	430a      	orrs	r2, r1
 8000e0e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	681a      	ldr	r2, [r3, #0]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	f042 0201 	orr.w	r2, r2, #1
 8000e1e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	2220      	movs	r2, #32
 8000e24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000e30:	2300      	movs	r3, #0
 8000e32:	e000      	b.n	8000e36 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8000e34:	2302      	movs	r3, #2
  }
}
 8000e36:	4618      	mov	r0, r3
 8000e38:	370c      	adds	r7, #12
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8000e42:	b480      	push	{r7}
 8000e44:	b085      	sub	sp, #20
 8000e46:	af00      	add	r7, sp, #0
 8000e48:	6078      	str	r0, [r7, #4]
 8000e4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e56:	b2db      	uxtb	r3, r3
 8000e58:	2b20      	cmp	r3, #32
 8000e5a:	d139      	bne.n	8000ed0 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e62:	2b01      	cmp	r3, #1
 8000e64:	d101      	bne.n	8000e6a <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8000e66:	2302      	movs	r3, #2
 8000e68:	e033      	b.n	8000ed2 <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	2201      	movs	r2, #1
 8000e6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	2224      	movs	r2, #36	; 0x24
 8000e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8000e7a:	687b      	ldr	r3, [r7, #4]
 8000e7c:	681b      	ldr	r3, [r3, #0]
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	f022 0201 	bic.w	r2, r2, #1
 8000e88:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000e98:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	021b      	lsls	r3, r3, #8
 8000e9e:	68fa      	ldr	r2, [r7, #12]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	68fa      	ldr	r2, [r7, #12]
 8000eaa:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	f042 0201 	orr.w	r2, r2, #1
 8000eba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	2220      	movs	r2, #32
 8000ec0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	e000      	b.n	8000ed2 <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8000ed0:	2302      	movs	r3, #2
  }
}
 8000ed2:	4618      	mov	r0, r3
 8000ed4:	3714      	adds	r7, #20
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000edc:	4770      	bx	lr
	...

08000ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8000ee6:	af00      	add	r7, sp, #0
 8000ee8:	1d3b      	adds	r3, r7, #4
 8000eea:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000eec:	1d3b      	adds	r3, r7, #4
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d102      	bne.n	8000efa <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8000ef4:	2301      	movs	r3, #1
 8000ef6:	f000 beda 	b.w	8001cae <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000efa:	1d3b      	adds	r3, r7, #4
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f003 0301 	and.w	r3, r3, #1
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	f000 816e 	beq.w	80011e6 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f0a:	4bb5      	ldr	r3, [pc, #724]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f003 030c 	and.w	r3, r3, #12
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d00c      	beq.n	8000f30 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f16:	4bb2      	ldr	r3, [pc, #712]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 030c 	and.w	r3, r3, #12
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d15a      	bne.n	8000fd8 <HAL_RCC_OscConfig+0xf8>
 8000f22:	4baf      	ldr	r3, [pc, #700]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8000f24:	685b      	ldr	r3, [r3, #4]
 8000f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f2a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000f2e:	d153      	bne.n	8000fd8 <HAL_RCC_OscConfig+0xf8>
 8000f30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f34:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f38:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000f3c:	fa93 f3a3 	rbit	r3, r3
 8000f40:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8000f44:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f48:	fab3 f383 	clz	r3, r3
 8000f4c:	b2db      	uxtb	r3, r3
 8000f4e:	095b      	lsrs	r3, r3, #5
 8000f50:	b2db      	uxtb	r3, r3
 8000f52:	f043 0301 	orr.w	r3, r3, #1
 8000f56:	b2db      	uxtb	r3, r3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d102      	bne.n	8000f62 <HAL_RCC_OscConfig+0x82>
 8000f5c:	4ba0      	ldr	r3, [pc, #640]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	e015      	b.n	8000f8e <HAL_RCC_OscConfig+0xae>
 8000f62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f66:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f6a:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000f6e:	fa93 f3a3 	rbit	r3, r3
 8000f72:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000f76:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f7a:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000f7e:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000f82:	fa93 f3a3 	rbit	r3, r3
 8000f86:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000f8a:	4b95      	ldr	r3, [pc, #596]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8000f8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f92:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000f96:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000f9a:	fa92 f2a2 	rbit	r2, r2
 8000f9e:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8000fa2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000fa6:	fab2 f282 	clz	r2, r2
 8000faa:	b252      	sxtb	r2, r2
 8000fac:	f042 0220 	orr.w	r2, r2, #32
 8000fb0:	b252      	sxtb	r2, r2
 8000fb2:	b2d2      	uxtb	r2, r2
 8000fb4:	f002 021f 	and.w	r2, r2, #31
 8000fb8:	2101      	movs	r1, #1
 8000fba:	fa01 f202 	lsl.w	r2, r1, r2
 8000fbe:	4013      	ands	r3, r2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	f000 810f 	beq.w	80011e4 <HAL_RCC_OscConfig+0x304>
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	681b      	ldr	r3, [r3, #0]
 8000fca:	685b      	ldr	r3, [r3, #4]
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	f040 8109 	bne.w	80011e4 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	f000 be6b 	b.w	8001cae <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd8:	1d3b      	adds	r3, r7, #4
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe2:	d106      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x112>
 8000fe4:	4b7e      	ldr	r3, [pc, #504]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a7d      	ldr	r2, [pc, #500]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8000fea:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fee:	6013      	str	r3, [r2, #0]
 8000ff0:	e030      	b.n	8001054 <HAL_RCC_OscConfig+0x174>
 8000ff2:	1d3b      	adds	r3, r7, #4
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	685b      	ldr	r3, [r3, #4]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d10c      	bne.n	8001016 <HAL_RCC_OscConfig+0x136>
 8000ffc:	4b78      	ldr	r3, [pc, #480]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a77      	ldr	r2, [pc, #476]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8001002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b75      	ldr	r3, [pc, #468]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a74      	ldr	r2, [pc, #464]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 800100e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001012:	6013      	str	r3, [r2, #0]
 8001014:	e01e      	b.n	8001054 <HAL_RCC_OscConfig+0x174>
 8001016:	1d3b      	adds	r3, r7, #4
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001020:	d10c      	bne.n	800103c <HAL_RCC_OscConfig+0x15c>
 8001022:	4b6f      	ldr	r3, [pc, #444]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	4a6e      	ldr	r2, [pc, #440]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8001028:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800102c:	6013      	str	r3, [r2, #0]
 800102e:	4b6c      	ldr	r3, [pc, #432]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	4a6b      	ldr	r2, [pc, #428]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8001034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001038:	6013      	str	r3, [r2, #0]
 800103a:	e00b      	b.n	8001054 <HAL_RCC_OscConfig+0x174>
 800103c:	4b68      	ldr	r3, [pc, #416]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	4a67      	ldr	r2, [pc, #412]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8001042:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001046:	6013      	str	r3, [r2, #0]
 8001048:	4b65      	ldr	r3, [pc, #404]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a64      	ldr	r2, [pc, #400]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 800104e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001052:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001054:	4b62      	ldr	r3, [pc, #392]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8001056:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001058:	f023 020f 	bic.w	r2, r3, #15
 800105c:	1d3b      	adds	r3, r7, #4
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	495f      	ldr	r1, [pc, #380]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8001064:	4313      	orrs	r3, r2
 8001066:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001068:	1d3b      	adds	r3, r7, #4
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d05a      	beq.n	8001128 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001072:	f7ff f903 	bl	800027c <HAL_GetTick>
 8001076:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800107a:	e00a      	b.n	8001092 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800107c:	f7ff f8fe 	bl	800027c <HAL_GetTick>
 8001080:	4602      	mov	r2, r0
 8001082:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001086:	1ad3      	subs	r3, r2, r3
 8001088:	2b64      	cmp	r3, #100	; 0x64
 800108a:	d902      	bls.n	8001092 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 800108c:	2303      	movs	r3, #3
 800108e:	f000 be0e 	b.w	8001cae <HAL_RCC_OscConfig+0xdce>
 8001092:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001096:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800109a:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 800109e:	fa93 f3a3 	rbit	r3, r3
 80010a2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80010a6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80010aa:	fab3 f383 	clz	r3, r3
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	095b      	lsrs	r3, r3, #5
 80010b2:	b2db      	uxtb	r3, r3
 80010b4:	f043 0301 	orr.w	r3, r3, #1
 80010b8:	b2db      	uxtb	r3, r3
 80010ba:	2b01      	cmp	r3, #1
 80010bc:	d102      	bne.n	80010c4 <HAL_RCC_OscConfig+0x1e4>
 80010be:	4b48      	ldr	r3, [pc, #288]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	e015      	b.n	80010f0 <HAL_RCC_OscConfig+0x210>
 80010c4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010c8:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010cc:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80010d0:	fa93 f3a3 	rbit	r3, r3
 80010d4:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80010d8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80010dc:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80010e0:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80010e4:	fa93 f3a3 	rbit	r3, r3
 80010e8:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80010ec:	4b3c      	ldr	r3, [pc, #240]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 80010ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80010f0:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80010f4:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80010f8:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80010fc:	fa92 f2a2 	rbit	r2, r2
 8001100:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001104:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001108:	fab2 f282 	clz	r2, r2
 800110c:	b252      	sxtb	r2, r2
 800110e:	f042 0220 	orr.w	r2, r2, #32
 8001112:	b252      	sxtb	r2, r2
 8001114:	b2d2      	uxtb	r2, r2
 8001116:	f002 021f 	and.w	r2, r2, #31
 800111a:	2101      	movs	r1, #1
 800111c:	fa01 f202 	lsl.w	r2, r1, r2
 8001120:	4013      	ands	r3, r2
 8001122:	2b00      	cmp	r3, #0
 8001124:	d0aa      	beq.n	800107c <HAL_RCC_OscConfig+0x19c>
 8001126:	e05e      	b.n	80011e6 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001128:	f7ff f8a8 	bl	800027c <HAL_GetTick>
 800112c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001130:	e00a      	b.n	8001148 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001132:	f7ff f8a3 	bl	800027c <HAL_GetTick>
 8001136:	4602      	mov	r2, r0
 8001138:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800113c:	1ad3      	subs	r3, r2, r3
 800113e:	2b64      	cmp	r3, #100	; 0x64
 8001140:	d902      	bls.n	8001148 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001142:	2303      	movs	r3, #3
 8001144:	f000 bdb3 	b.w	8001cae <HAL_RCC_OscConfig+0xdce>
 8001148:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800114c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001150:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001154:	fa93 f3a3 	rbit	r3, r3
 8001158:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 800115c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001160:	fab3 f383 	clz	r3, r3
 8001164:	b2db      	uxtb	r3, r3
 8001166:	095b      	lsrs	r3, r3, #5
 8001168:	b2db      	uxtb	r3, r3
 800116a:	f043 0301 	orr.w	r3, r3, #1
 800116e:	b2db      	uxtb	r3, r3
 8001170:	2b01      	cmp	r3, #1
 8001172:	d102      	bne.n	800117a <HAL_RCC_OscConfig+0x29a>
 8001174:	4b1a      	ldr	r3, [pc, #104]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	e015      	b.n	80011a6 <HAL_RCC_OscConfig+0x2c6>
 800117a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800117e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001182:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001186:	fa93 f3a3 	rbit	r3, r3
 800118a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800118e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001192:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001196:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800119a:	fa93 f3a3 	rbit	r3, r3
 800119e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80011a2:	4b0f      	ldr	r3, [pc, #60]	; (80011e0 <HAL_RCC_OscConfig+0x300>)
 80011a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011a6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80011aa:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80011ae:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80011b2:	fa92 f2a2 	rbit	r2, r2
 80011b6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 80011ba:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80011be:	fab2 f282 	clz	r2, r2
 80011c2:	b252      	sxtb	r2, r2
 80011c4:	f042 0220 	orr.w	r2, r2, #32
 80011c8:	b252      	sxtb	r2, r2
 80011ca:	b2d2      	uxtb	r2, r2
 80011cc:	f002 021f 	and.w	r2, r2, #31
 80011d0:	2101      	movs	r1, #1
 80011d2:	fa01 f202 	lsl.w	r2, r1, r2
 80011d6:	4013      	ands	r3, r2
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d1aa      	bne.n	8001132 <HAL_RCC_OscConfig+0x252>
 80011dc:	e003      	b.n	80011e6 <HAL_RCC_OscConfig+0x306>
 80011de:	bf00      	nop
 80011e0:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80011e4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	f003 0302 	and.w	r3, r3, #2
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	f000 8170 	beq.w	80014d6 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80011f6:	4bd0      	ldr	r3, [pc, #832]	; (8001538 <HAL_RCC_OscConfig+0x658>)
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	f003 030c 	and.w	r3, r3, #12
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d00b      	beq.n	800121a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001202:	4bcd      	ldr	r3, [pc, #820]	; (8001538 <HAL_RCC_OscConfig+0x658>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 030c 	and.w	r3, r3, #12
 800120a:	2b08      	cmp	r3, #8
 800120c:	d16d      	bne.n	80012ea <HAL_RCC_OscConfig+0x40a>
 800120e:	4bca      	ldr	r3, [pc, #808]	; (8001538 <HAL_RCC_OscConfig+0x658>)
 8001210:	685b      	ldr	r3, [r3, #4]
 8001212:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001216:	2b00      	cmp	r3, #0
 8001218:	d167      	bne.n	80012ea <HAL_RCC_OscConfig+0x40a>
 800121a:	2302      	movs	r3, #2
 800121c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001220:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001224:	fa93 f3a3 	rbit	r3, r3
 8001228:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 800122c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001230:	fab3 f383 	clz	r3, r3
 8001234:	b2db      	uxtb	r3, r3
 8001236:	095b      	lsrs	r3, r3, #5
 8001238:	b2db      	uxtb	r3, r3
 800123a:	f043 0301 	orr.w	r3, r3, #1
 800123e:	b2db      	uxtb	r3, r3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d102      	bne.n	800124a <HAL_RCC_OscConfig+0x36a>
 8001244:	4bbc      	ldr	r3, [pc, #752]	; (8001538 <HAL_RCC_OscConfig+0x658>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	e013      	b.n	8001272 <HAL_RCC_OscConfig+0x392>
 800124a:	2302      	movs	r3, #2
 800124c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001250:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001254:	fa93 f3a3 	rbit	r3, r3
 8001258:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800125c:	2302      	movs	r3, #2
 800125e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001262:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001266:	fa93 f3a3 	rbit	r3, r3
 800126a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800126e:	4bb2      	ldr	r3, [pc, #712]	; (8001538 <HAL_RCC_OscConfig+0x658>)
 8001270:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001272:	2202      	movs	r2, #2
 8001274:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001278:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800127c:	fa92 f2a2 	rbit	r2, r2
 8001280:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001284:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001288:	fab2 f282 	clz	r2, r2
 800128c:	b252      	sxtb	r2, r2
 800128e:	f042 0220 	orr.w	r2, r2, #32
 8001292:	b252      	sxtb	r2, r2
 8001294:	b2d2      	uxtb	r2, r2
 8001296:	f002 021f 	and.w	r2, r2, #31
 800129a:	2101      	movs	r1, #1
 800129c:	fa01 f202 	lsl.w	r2, r1, r2
 80012a0:	4013      	ands	r3, r2
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	d007      	beq.n	80012b6 <HAL_RCC_OscConfig+0x3d6>
 80012a6:	1d3b      	adds	r3, r7, #4
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	691b      	ldr	r3, [r3, #16]
 80012ac:	2b01      	cmp	r3, #1
 80012ae:	d002      	beq.n	80012b6 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 80012b0:	2301      	movs	r3, #1
 80012b2:	f000 bcfc 	b.w	8001cae <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012b6:	4ba0      	ldr	r3, [pc, #640]	; (8001538 <HAL_RCC_OscConfig+0x658>)
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012be:	1d3b      	adds	r3, r7, #4
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	6959      	ldr	r1, [r3, #20]
 80012c4:	23f8      	movs	r3, #248	; 0xf8
 80012c6:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ca:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80012ce:	fa93 f3a3 	rbit	r3, r3
 80012d2:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 80012d6:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80012da:	fab3 f383 	clz	r3, r3
 80012de:	fa01 f303 	lsl.w	r3, r1, r3
 80012e2:	4995      	ldr	r1, [pc, #596]	; (8001538 <HAL_RCC_OscConfig+0x658>)
 80012e4:	4313      	orrs	r3, r2
 80012e6:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80012e8:	e0f5      	b.n	80014d6 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	691b      	ldr	r3, [r3, #16]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	f000 8085 	beq.w	8001400 <HAL_RCC_OscConfig+0x520>
 80012f6:	2301      	movs	r3, #1
 80012f8:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012fc:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001300:	fa93 f3a3 	rbit	r3, r3
 8001304:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001308:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800130c:	fab3 f383 	clz	r3, r3
 8001310:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001314:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001318:	009b      	lsls	r3, r3, #2
 800131a:	461a      	mov	r2, r3
 800131c:	2301      	movs	r3, #1
 800131e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001320:	f7fe ffac 	bl	800027c <HAL_GetTick>
 8001324:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001328:	e00a      	b.n	8001340 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800132a:	f7fe ffa7 	bl	800027c <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b02      	cmp	r3, #2
 8001338:	d902      	bls.n	8001340 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	f000 bcb7 	b.w	8001cae <HAL_RCC_OscConfig+0xdce>
 8001340:	2302      	movs	r3, #2
 8001342:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001346:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800134a:	fa93 f3a3 	rbit	r3, r3
 800134e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8001352:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001356:	fab3 f383 	clz	r3, r3
 800135a:	b2db      	uxtb	r3, r3
 800135c:	095b      	lsrs	r3, r3, #5
 800135e:	b2db      	uxtb	r3, r3
 8001360:	f043 0301 	orr.w	r3, r3, #1
 8001364:	b2db      	uxtb	r3, r3
 8001366:	2b01      	cmp	r3, #1
 8001368:	d102      	bne.n	8001370 <HAL_RCC_OscConfig+0x490>
 800136a:	4b73      	ldr	r3, [pc, #460]	; (8001538 <HAL_RCC_OscConfig+0x658>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	e013      	b.n	8001398 <HAL_RCC_OscConfig+0x4b8>
 8001370:	2302      	movs	r3, #2
 8001372:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001376:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800137a:	fa93 f3a3 	rbit	r3, r3
 800137e:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001382:	2302      	movs	r3, #2
 8001384:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001388:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 800138c:	fa93 f3a3 	rbit	r3, r3
 8001390:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001394:	4b68      	ldr	r3, [pc, #416]	; (8001538 <HAL_RCC_OscConfig+0x658>)
 8001396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001398:	2202      	movs	r2, #2
 800139a:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 800139e:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80013a2:	fa92 f2a2 	rbit	r2, r2
 80013a6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 80013aa:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80013ae:	fab2 f282 	clz	r2, r2
 80013b2:	b252      	sxtb	r2, r2
 80013b4:	f042 0220 	orr.w	r2, r2, #32
 80013b8:	b252      	sxtb	r2, r2
 80013ba:	b2d2      	uxtb	r2, r2
 80013bc:	f002 021f 	and.w	r2, r2, #31
 80013c0:	2101      	movs	r1, #1
 80013c2:	fa01 f202 	lsl.w	r2, r1, r2
 80013c6:	4013      	ands	r3, r2
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d0ae      	beq.n	800132a <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013cc:	4b5a      	ldr	r3, [pc, #360]	; (8001538 <HAL_RCC_OscConfig+0x658>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013d4:	1d3b      	adds	r3, r7, #4
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	6959      	ldr	r1, [r3, #20]
 80013da:	23f8      	movs	r3, #248	; 0xf8
 80013dc:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e0:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80013e4:	fa93 f3a3 	rbit	r3, r3
 80013e8:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 80013ec:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80013f0:	fab3 f383 	clz	r3, r3
 80013f4:	fa01 f303 	lsl.w	r3, r1, r3
 80013f8:	494f      	ldr	r1, [pc, #316]	; (8001538 <HAL_RCC_OscConfig+0x658>)
 80013fa:	4313      	orrs	r3, r2
 80013fc:	600b      	str	r3, [r1, #0]
 80013fe:	e06a      	b.n	80014d6 <HAL_RCC_OscConfig+0x5f6>
 8001400:	2301      	movs	r3, #1
 8001402:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001406:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800140a:	fa93 f3a3 	rbit	r3, r3
 800140e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001412:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001416:	fab3 f383 	clz	r3, r3
 800141a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800141e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001422:	009b      	lsls	r3, r3, #2
 8001424:	461a      	mov	r2, r3
 8001426:	2300      	movs	r3, #0
 8001428:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142a:	f7fe ff27 	bl	800027c <HAL_GetTick>
 800142e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001432:	e00a      	b.n	800144a <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001434:	f7fe ff22 	bl	800027c <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d902      	bls.n	800144a <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8001444:	2303      	movs	r3, #3
 8001446:	f000 bc32 	b.w	8001cae <HAL_RCC_OscConfig+0xdce>
 800144a:	2302      	movs	r3, #2
 800144c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001450:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001454:	fa93 f3a3 	rbit	r3, r3
 8001458:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 800145c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001460:	fab3 f383 	clz	r3, r3
 8001464:	b2db      	uxtb	r3, r3
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	b2db      	uxtb	r3, r3
 800146a:	f043 0301 	orr.w	r3, r3, #1
 800146e:	b2db      	uxtb	r3, r3
 8001470:	2b01      	cmp	r3, #1
 8001472:	d102      	bne.n	800147a <HAL_RCC_OscConfig+0x59a>
 8001474:	4b30      	ldr	r3, [pc, #192]	; (8001538 <HAL_RCC_OscConfig+0x658>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	e013      	b.n	80014a2 <HAL_RCC_OscConfig+0x5c2>
 800147a:	2302      	movs	r3, #2
 800147c:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001480:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001484:	fa93 f3a3 	rbit	r3, r3
 8001488:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800148c:	2302      	movs	r3, #2
 800148e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001492:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001496:	fa93 f3a3 	rbit	r3, r3
 800149a:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <HAL_RCC_OscConfig+0x658>)
 80014a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014a2:	2202      	movs	r2, #2
 80014a4:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80014a8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80014ac:	fa92 f2a2 	rbit	r2, r2
 80014b0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 80014b4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80014b8:	fab2 f282 	clz	r2, r2
 80014bc:	b252      	sxtb	r2, r2
 80014be:	f042 0220 	orr.w	r2, r2, #32
 80014c2:	b252      	sxtb	r2, r2
 80014c4:	b2d2      	uxtb	r2, r2
 80014c6:	f002 021f 	and.w	r2, r2, #31
 80014ca:	2101      	movs	r1, #1
 80014cc:	fa01 f202 	lsl.w	r2, r1, r2
 80014d0:	4013      	ands	r3, r2
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1ae      	bne.n	8001434 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014d6:	1d3b      	adds	r3, r7, #4
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f003 0308 	and.w	r3, r3, #8
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f000 80d8 	beq.w	8001696 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80014e6:	1d3b      	adds	r3, r7, #4
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	699b      	ldr	r3, [r3, #24]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d067      	beq.n	80015c0 <HAL_RCC_OscConfig+0x6e0>
 80014f0:	2301      	movs	r3, #1
 80014f2:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014f6:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80014fa:	fa93 f3a3 	rbit	r3, r3
 80014fe:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001502:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001506:	fab3 f383 	clz	r3, r3
 800150a:	461a      	mov	r2, r3
 800150c:	4b0b      	ldr	r3, [pc, #44]	; (800153c <HAL_RCC_OscConfig+0x65c>)
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	461a      	mov	r2, r3
 8001514:	2301      	movs	r3, #1
 8001516:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001518:	f7fe feb0 	bl	800027c <HAL_GetTick>
 800151c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001520:	e00e      	b.n	8001540 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001522:	f7fe feab 	bl	800027c <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d906      	bls.n	8001540 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e3bb      	b.n	8001cae <HAL_RCC_OscConfig+0xdce>
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000
 800153c:	10908120 	.word	0x10908120
 8001540:	2302      	movs	r3, #2
 8001542:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001546:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800154a:	fa93 f3a3 	rbit	r3, r3
 800154e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001552:	2302      	movs	r3, #2
 8001554:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001558:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800155c:	fa93 f2a3 	rbit	r2, r3
 8001560:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800156a:	2202      	movs	r2, #2
 800156c:	601a      	str	r2, [r3, #0]
 800156e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8001572:	681b      	ldr	r3, [r3, #0]
 8001574:	fa93 f2a3 	rbit	r2, r3
 8001578:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800157c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800157e:	4ba5      	ldr	r3, [pc, #660]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 8001580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001582:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8001586:	2102      	movs	r1, #2
 8001588:	6019      	str	r1, [r3, #0]
 800158a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	fa93 f1a3 	rbit	r1, r3
 8001594:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8001598:	6019      	str	r1, [r3, #0]
  return(result);
 800159a:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	fab3 f383 	clz	r3, r3
 80015a4:	b25b      	sxtb	r3, r3
 80015a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015aa:	b25b      	sxtb	r3, r3
 80015ac:	b2db      	uxtb	r3, r3
 80015ae:	f003 031f 	and.w	r3, r3, #31
 80015b2:	2101      	movs	r1, #1
 80015b4:	fa01 f303 	lsl.w	r3, r1, r3
 80015b8:	4013      	ands	r3, r2
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d0b1      	beq.n	8001522 <HAL_RCC_OscConfig+0x642>
 80015be:	e06a      	b.n	8001696 <HAL_RCC_OscConfig+0x7b6>
 80015c0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	fa93 f2a3 	rbit	r2, r3
 80015d2:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015d6:	601a      	str	r2, [r3, #0]
  return(result);
 80015d8:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80015dc:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015de:	fab3 f383 	clz	r3, r3
 80015e2:	461a      	mov	r2, r3
 80015e4:	4b8c      	ldr	r3, [pc, #560]	; (8001818 <HAL_RCC_OscConfig+0x938>)
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	461a      	mov	r2, r3
 80015ec:	2300      	movs	r3, #0
 80015ee:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f0:	f7fe fe44 	bl	800027c <HAL_GetTick>
 80015f4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015f8:	e009      	b.n	800160e <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fa:	f7fe fe3f 	bl	800027c <HAL_GetTick>
 80015fe:	4602      	mov	r2, r0
 8001600:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	2b02      	cmp	r3, #2
 8001608:	d901      	bls.n	800160e <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 800160a:	2303      	movs	r3, #3
 800160c:	e34f      	b.n	8001cae <HAL_RCC_OscConfig+0xdce>
 800160e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001612:	2202      	movs	r2, #2
 8001614:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001616:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	fa93 f2a3 	rbit	r2, r3
 8001620:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001624:	601a      	str	r2, [r3, #0]
 8001626:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800162a:	2202      	movs	r2, #2
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	fa93 f2a3 	rbit	r2, r3
 8001638:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 800163c:	601a      	str	r2, [r3, #0]
 800163e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001642:	2202      	movs	r2, #2
 8001644:	601a      	str	r2, [r3, #0]
 8001646:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	fa93 f2a3 	rbit	r2, r3
 8001650:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001654:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001656:	4b6f      	ldr	r3, [pc, #444]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 8001658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800165a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800165e:	2102      	movs	r1, #2
 8001660:	6019      	str	r1, [r3, #0]
 8001662:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	fa93 f1a3 	rbit	r1, r3
 800166c:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001670:	6019      	str	r1, [r3, #0]
  return(result);
 8001672:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	fab3 f383 	clz	r3, r3
 800167c:	b25b      	sxtb	r3, r3
 800167e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001682:	b25b      	sxtb	r3, r3
 8001684:	b2db      	uxtb	r3, r3
 8001686:	f003 031f 	and.w	r3, r3, #31
 800168a:	2101      	movs	r1, #1
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	4013      	ands	r3, r2
 8001692:	2b00      	cmp	r3, #0
 8001694:	d1b1      	bne.n	80015fa <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001696:	1d3b      	adds	r3, r7, #4
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	f000 8159 	beq.w	8001958 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a6:	2300      	movs	r3, #0
 80016a8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016ac:	4b59      	ldr	r3, [pc, #356]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 80016ae:	69db      	ldr	r3, [r3, #28]
 80016b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d112      	bne.n	80016de <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b8:	4b56      	ldr	r3, [pc, #344]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 80016ba:	69db      	ldr	r3, [r3, #28]
 80016bc:	4a55      	ldr	r2, [pc, #340]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 80016be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80016c2:	61d3      	str	r3, [r2, #28]
 80016c4:	4b53      	ldr	r3, [pc, #332]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 80016c6:	69db      	ldr	r3, [r3, #28]
 80016c8:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80016cc:	f107 030c 	add.w	r3, r7, #12
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	f107 030c 	add.w	r3, r7, #12
 80016d6:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 80016d8:	2301      	movs	r3, #1
 80016da:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016de:	4b4f      	ldr	r3, [pc, #316]	; (800181c <HAL_RCC_OscConfig+0x93c>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d11a      	bne.n	8001720 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016ea:	4b4c      	ldr	r3, [pc, #304]	; (800181c <HAL_RCC_OscConfig+0x93c>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a4b      	ldr	r2, [pc, #300]	; (800181c <HAL_RCC_OscConfig+0x93c>)
 80016f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016f4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016f6:	f7fe fdc1 	bl	800027c <HAL_GetTick>
 80016fa:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016fe:	e009      	b.n	8001714 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001700:	f7fe fdbc 	bl	800027c <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800170a:	1ad3      	subs	r3, r2, r3
 800170c:	2b64      	cmp	r3, #100	; 0x64
 800170e:	d901      	bls.n	8001714 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001710:	2303      	movs	r3, #3
 8001712:	e2cc      	b.n	8001cae <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001714:	4b41      	ldr	r3, [pc, #260]	; (800181c <HAL_RCC_OscConfig+0x93c>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d0ef      	beq.n	8001700 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001720:	1d3b      	adds	r3, r7, #4
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b01      	cmp	r3, #1
 8001728:	d106      	bne.n	8001738 <HAL_RCC_OscConfig+0x858>
 800172a:	4b3a      	ldr	r3, [pc, #232]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a39      	ldr	r2, [pc, #228]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 8001730:	f043 0301 	orr.w	r3, r3, #1
 8001734:	6213      	str	r3, [r2, #32]
 8001736:	e02f      	b.n	8001798 <HAL_RCC_OscConfig+0x8b8>
 8001738:	1d3b      	adds	r3, r7, #4
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	68db      	ldr	r3, [r3, #12]
 800173e:	2b00      	cmp	r3, #0
 8001740:	d10c      	bne.n	800175c <HAL_RCC_OscConfig+0x87c>
 8001742:	4b34      	ldr	r3, [pc, #208]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 8001744:	6a1b      	ldr	r3, [r3, #32]
 8001746:	4a33      	ldr	r2, [pc, #204]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 8001748:	f023 0301 	bic.w	r3, r3, #1
 800174c:	6213      	str	r3, [r2, #32]
 800174e:	4b31      	ldr	r3, [pc, #196]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 8001750:	6a1b      	ldr	r3, [r3, #32]
 8001752:	4a30      	ldr	r2, [pc, #192]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 8001754:	f023 0304 	bic.w	r3, r3, #4
 8001758:	6213      	str	r3, [r2, #32]
 800175a:	e01d      	b.n	8001798 <HAL_RCC_OscConfig+0x8b8>
 800175c:	1d3b      	adds	r3, r7, #4
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	68db      	ldr	r3, [r3, #12]
 8001762:	2b05      	cmp	r3, #5
 8001764:	d10c      	bne.n	8001780 <HAL_RCC_OscConfig+0x8a0>
 8001766:	4b2b      	ldr	r3, [pc, #172]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4a2a      	ldr	r2, [pc, #168]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 800176c:	f043 0304 	orr.w	r3, r3, #4
 8001770:	6213      	str	r3, [r2, #32]
 8001772:	4b28      	ldr	r3, [pc, #160]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4a27      	ldr	r2, [pc, #156]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6213      	str	r3, [r2, #32]
 800177e:	e00b      	b.n	8001798 <HAL_RCC_OscConfig+0x8b8>
 8001780:	4b24      	ldr	r3, [pc, #144]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 8001782:	6a1b      	ldr	r3, [r3, #32]
 8001784:	4a23      	ldr	r2, [pc, #140]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 8001786:	f023 0301 	bic.w	r3, r3, #1
 800178a:	6213      	str	r3, [r2, #32]
 800178c:	4b21      	ldr	r3, [pc, #132]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 800178e:	6a1b      	ldr	r3, [r3, #32]
 8001790:	4a20      	ldr	r2, [pc, #128]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 8001792:	f023 0304 	bic.w	r3, r3, #4
 8001796:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001798:	1d3b      	adds	r3, r7, #4
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	68db      	ldr	r3, [r3, #12]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d06b      	beq.n	800187a <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017a2:	f7fe fd6b 	bl	800027c <HAL_GetTick>
 80017a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017aa:	e00b      	b.n	80017c4 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80017ac:	f7fe fd66 	bl	800027c <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80017b6:	1ad3      	subs	r3, r2, r3
 80017b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80017bc:	4293      	cmp	r3, r2
 80017be:	d901      	bls.n	80017c4 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 80017c0:	2303      	movs	r3, #3
 80017c2:	e274      	b.n	8001cae <HAL_RCC_OscConfig+0xdce>
 80017c4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017c8:	2202      	movs	r2, #2
 80017ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017cc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	fa93 f2a3 	rbit	r2, r3
 80017d6:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017e0:	2202      	movs	r2, #2
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	fa93 f2a3 	rbit	r2, r3
 80017ee:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017f2:	601a      	str	r2, [r3, #0]
  return(result);
 80017f4:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80017f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017fa:	fab3 f383 	clz	r3, r3
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	095b      	lsrs	r3, r3, #5
 8001802:	b2db      	uxtb	r3, r3
 8001804:	f043 0302 	orr.w	r3, r3, #2
 8001808:	b2db      	uxtb	r3, r3
 800180a:	2b02      	cmp	r3, #2
 800180c:	d108      	bne.n	8001820 <HAL_RCC_OscConfig+0x940>
 800180e:	4b01      	ldr	r3, [pc, #4]	; (8001814 <HAL_RCC_OscConfig+0x934>)
 8001810:	6a1b      	ldr	r3, [r3, #32]
 8001812:	e013      	b.n	800183c <HAL_RCC_OscConfig+0x95c>
 8001814:	40021000 	.word	0x40021000
 8001818:	10908120 	.word	0x10908120
 800181c:	40007000 	.word	0x40007000
 8001820:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001824:	2202      	movs	r2, #2
 8001826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001828:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fa93 f2a3 	rbit	r2, r3
 8001832:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001836:	601a      	str	r2, [r3, #0]
 8001838:	4bbb      	ldr	r3, [pc, #748]	; (8001b28 <HAL_RCC_OscConfig+0xc48>)
 800183a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800183c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001840:	2102      	movs	r1, #2
 8001842:	6011      	str	r1, [r2, #0]
 8001844:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001848:	6812      	ldr	r2, [r2, #0]
 800184a:	fa92 f1a2 	rbit	r1, r2
 800184e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001852:	6011      	str	r1, [r2, #0]
  return(result);
 8001854:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001858:	6812      	ldr	r2, [r2, #0]
 800185a:	fab2 f282 	clz	r2, r2
 800185e:	b252      	sxtb	r2, r2
 8001860:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001864:	b252      	sxtb	r2, r2
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	f002 021f 	and.w	r2, r2, #31
 800186c:	2101      	movs	r1, #1
 800186e:	fa01 f202 	lsl.w	r2, r1, r2
 8001872:	4013      	ands	r3, r2
 8001874:	2b00      	cmp	r3, #0
 8001876:	d099      	beq.n	80017ac <HAL_RCC_OscConfig+0x8cc>
 8001878:	e064      	b.n	8001944 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800187a:	f7fe fcff 	bl	800027c <HAL_GetTick>
 800187e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001882:	e00b      	b.n	800189c <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f7fe fcfa 	bl	800027c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800188e:	1ad3      	subs	r3, r2, r3
 8001890:	f241 3288 	movw	r2, #5000	; 0x1388
 8001894:	4293      	cmp	r3, r2
 8001896:	d901      	bls.n	800189c <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001898:	2303      	movs	r3, #3
 800189a:	e208      	b.n	8001cae <HAL_RCC_OscConfig+0xdce>
 800189c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018a0:	2202      	movs	r2, #2
 80018a2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018a4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	fa93 f2a3 	rbit	r2, r3
 80018ae:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80018b2:	601a      	str	r2, [r3, #0]
 80018b4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018b8:	2202      	movs	r2, #2
 80018ba:	601a      	str	r2, [r3, #0]
 80018bc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	fa93 f2a3 	rbit	r2, r3
 80018c6:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018ca:	601a      	str	r2, [r3, #0]
  return(result);
 80018cc:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80018d0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018d2:	fab3 f383 	clz	r3, r3
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	095b      	lsrs	r3, r3, #5
 80018da:	b2db      	uxtb	r3, r3
 80018dc:	f043 0302 	orr.w	r3, r3, #2
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b02      	cmp	r3, #2
 80018e4:	d102      	bne.n	80018ec <HAL_RCC_OscConfig+0xa0c>
 80018e6:	4b90      	ldr	r3, [pc, #576]	; (8001b28 <HAL_RCC_OscConfig+0xc48>)
 80018e8:	6a1b      	ldr	r3, [r3, #32]
 80018ea:	e00d      	b.n	8001908 <HAL_RCC_OscConfig+0xa28>
 80018ec:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018f0:	2202      	movs	r2, #2
 80018f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018f4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	fa93 f2a3 	rbit	r2, r3
 80018fe:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	4b88      	ldr	r3, [pc, #544]	; (8001b28 <HAL_RCC_OscConfig+0xc48>)
 8001906:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001908:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800190c:	2102      	movs	r1, #2
 800190e:	6011      	str	r1, [r2, #0]
 8001910:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001914:	6812      	ldr	r2, [r2, #0]
 8001916:	fa92 f1a2 	rbit	r1, r2
 800191a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800191e:	6011      	str	r1, [r2, #0]
  return(result);
 8001920:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001924:	6812      	ldr	r2, [r2, #0]
 8001926:	fab2 f282 	clz	r2, r2
 800192a:	b252      	sxtb	r2, r2
 800192c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001930:	b252      	sxtb	r2, r2
 8001932:	b2d2      	uxtb	r2, r2
 8001934:	f002 021f 	and.w	r2, r2, #31
 8001938:	2101      	movs	r1, #1
 800193a:	fa01 f202 	lsl.w	r2, r1, r2
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d19f      	bne.n	8001884 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001944:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001948:	2b01      	cmp	r3, #1
 800194a:	d105      	bne.n	8001958 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800194c:	4b76      	ldr	r3, [pc, #472]	; (8001b28 <HAL_RCC_OscConfig+0xc48>)
 800194e:	69db      	ldr	r3, [r3, #28]
 8001950:	4a75      	ldr	r2, [pc, #468]	; (8001b28 <HAL_RCC_OscConfig+0xc48>)
 8001952:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001956:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001958:	1d3b      	adds	r3, r7, #4
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	69db      	ldr	r3, [r3, #28]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 81a4 	beq.w	8001cac <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001964:	4b70      	ldr	r3, [pc, #448]	; (8001b28 <HAL_RCC_OscConfig+0xc48>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	f000 819b 	beq.w	8001ca8 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001972:	1d3b      	adds	r3, r7, #4
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	69db      	ldr	r3, [r3, #28]
 8001978:	2b02      	cmp	r3, #2
 800197a:	f040 8113 	bne.w	8001ba4 <HAL_RCC_OscConfig+0xcc4>
 800197e:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001982:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001986:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001988:	f107 0384 	add.w	r3, r7, #132	; 0x84
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	fa93 f2a3 	rbit	r2, r3
 8001992:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001996:	601a      	str	r2, [r3, #0]
  return(result);
 8001998:	f107 0380 	add.w	r3, r7, #128	; 0x80
 800199c:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019a6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	461a      	mov	r2, r3
 80019ae:	2300      	movs	r3, #0
 80019b0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019b2:	f7fe fc63 	bl	800027c <HAL_GetTick>
 80019b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019ba:	e009      	b.n	80019d0 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019bc:	f7fe fc5e 	bl	800027c <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e16e      	b.n	8001cae <HAL_RCC_OscConfig+0xdce>
 80019d0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019d4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019d8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019da:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fa93 f2a3 	rbit	r2, r3
 80019e4:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019e8:	601a      	str	r2, [r3, #0]
  return(result);
 80019ea:	f107 0378 	add.w	r3, r7, #120	; 0x78
 80019ee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f0:	fab3 f383 	clz	r3, r3
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	095b      	lsrs	r3, r3, #5
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	f043 0301 	orr.w	r3, r3, #1
 80019fe:	b2db      	uxtb	r3, r3
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d102      	bne.n	8001a0a <HAL_RCC_OscConfig+0xb2a>
 8001a04:	4b48      	ldr	r3, [pc, #288]	; (8001b28 <HAL_RCC_OscConfig+0xc48>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	e01b      	b.n	8001a42 <HAL_RCC_OscConfig+0xb62>
 8001a0a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a0e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a12:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a14:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	fa93 f2a3 	rbit	r2, r3
 8001a1e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001a22:	601a      	str	r2, [r3, #0]
 8001a24:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a28:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a2c:	601a      	str	r2, [r3, #0]
 8001a2e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	fa93 f2a3 	rbit	r2, r3
 8001a38:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001a3c:	601a      	str	r2, [r3, #0]
 8001a3e:	4b3a      	ldr	r3, [pc, #232]	; (8001b28 <HAL_RCC_OscConfig+0xc48>)
 8001a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a42:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001a46:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a4a:	6011      	str	r1, [r2, #0]
 8001a4c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001a50:	6812      	ldr	r2, [r2, #0]
 8001a52:	fa92 f1a2 	rbit	r1, r2
 8001a56:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a5a:	6011      	str	r1, [r2, #0]
  return(result);
 8001a5c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001a60:	6812      	ldr	r2, [r2, #0]
 8001a62:	fab2 f282 	clz	r2, r2
 8001a66:	b252      	sxtb	r2, r2
 8001a68:	f042 0220 	orr.w	r2, r2, #32
 8001a6c:	b252      	sxtb	r2, r2
 8001a6e:	b2d2      	uxtb	r2, r2
 8001a70:	f002 021f 	and.w	r2, r2, #31
 8001a74:	2101      	movs	r1, #1
 8001a76:	fa01 f202 	lsl.w	r2, r1, r2
 8001a7a:	4013      	ands	r3, r2
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d19d      	bne.n	80019bc <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a80:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <HAL_RCC_OscConfig+0xc48>)
 8001a82:	685b      	ldr	r3, [r3, #4]
 8001a84:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001a88:	1d3b      	adds	r3, r7, #4
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001a8e:	1d3b      	adds	r3, r7, #4
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	6a1b      	ldr	r3, [r3, #32]
 8001a94:	430b      	orrs	r3, r1
 8001a96:	4924      	ldr	r1, [pc, #144]	; (8001b28 <HAL_RCC_OscConfig+0xc48>)
 8001a98:	4313      	orrs	r3, r2
 8001a9a:	604b      	str	r3, [r1, #4]
 8001a9c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001aa0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001aa4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ab4:	601a      	str	r2, [r3, #0]
  return(result);
 8001ab6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001aba:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001abc:	fab3 f383 	clz	r3, r3
 8001ac0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001ac4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ac8:	009b      	lsls	r3, r3, #2
 8001aca:	461a      	mov	r2, r3
 8001acc:	2301      	movs	r3, #1
 8001ace:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ad0:	f7fe fbd4 	bl	800027c <HAL_GetTick>
 8001ad4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ad8:	e009      	b.n	8001aee <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001ada:	f7fe fbcf 	bl	800027c <HAL_GetTick>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001ae4:	1ad3      	subs	r3, r2, r3
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d901      	bls.n	8001aee <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001aea:	2303      	movs	r3, #3
 8001aec:	e0df      	b.n	8001cae <HAL_RCC_OscConfig+0xdce>
 8001aee:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001af2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af8:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	fa93 f2a3 	rbit	r2, r3
 8001b02:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b06:	601a      	str	r2, [r3, #0]
  return(result);
 8001b08:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001b0c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	095b      	lsrs	r3, r3, #5
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f043 0301 	orr.w	r3, r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	2b01      	cmp	r3, #1
 8001b20:	d104      	bne.n	8001b2c <HAL_RCC_OscConfig+0xc4c>
 8001b22:	4b01      	ldr	r3, [pc, #4]	; (8001b28 <HAL_RCC_OscConfig+0xc48>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	e01d      	b.n	8001b64 <HAL_RCC_OscConfig+0xc84>
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b30:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b34:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b36:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	fa93 f2a3 	rbit	r2, r3
 8001b40:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001b44:	601a      	str	r2, [r3, #0]
 8001b46:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b4a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b4e:	601a      	str	r2, [r3, #0]
 8001b50:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	fa93 f2a3 	rbit	r2, r3
 8001b5a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001b5e:	601a      	str	r2, [r3, #0]
 8001b60:	4b55      	ldr	r3, [pc, #340]	; (8001cb8 <HAL_RCC_OscConfig+0xdd8>)
 8001b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b64:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b6c:	6011      	str	r1, [r2, #0]
 8001b6e:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001b72:	6812      	ldr	r2, [r2, #0]
 8001b74:	fa92 f1a2 	rbit	r1, r2
 8001b78:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b7c:	6011      	str	r1, [r2, #0]
  return(result);
 8001b7e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001b82:	6812      	ldr	r2, [r2, #0]
 8001b84:	fab2 f282 	clz	r2, r2
 8001b88:	b252      	sxtb	r2, r2
 8001b8a:	f042 0220 	orr.w	r2, r2, #32
 8001b8e:	b252      	sxtb	r2, r2
 8001b90:	b2d2      	uxtb	r2, r2
 8001b92:	f002 021f 	and.w	r2, r2, #31
 8001b96:	2101      	movs	r1, #1
 8001b98:	fa01 f202 	lsl.w	r2, r1, r2
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d09b      	beq.n	8001ada <HAL_RCC_OscConfig+0xbfa>
 8001ba2:	e083      	b.n	8001cac <HAL_RCC_OscConfig+0xdcc>
 8001ba4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ba8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bae:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	fa93 f2a3 	rbit	r2, r3
 8001bb8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bbc:	601a      	str	r2, [r3, #0]
  return(result);
 8001bbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001bc2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bc4:	fab3 f383 	clz	r3, r3
 8001bc8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bcc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bd0:	009b      	lsls	r3, r3, #2
 8001bd2:	461a      	mov	r2, r3
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bd8:	f7fe fb50 	bl	800027c <HAL_GetTick>
 8001bdc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001be0:	e009      	b.n	8001bf6 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001be2:	f7fe fb4b 	bl	800027c <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	2b02      	cmp	r3, #2
 8001bf0:	d901      	bls.n	8001bf6 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8001bf2:	2303      	movs	r3, #3
 8001bf4:	e05b      	b.n	8001cae <HAL_RCC_OscConfig+0xdce>
 8001bf6:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001bfa:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bfe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c00:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	fa93 f2a3 	rbit	r2, r3
 8001c0a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c0e:	601a      	str	r2, [r3, #0]
  return(result);
 8001c10:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c14:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c16:	fab3 f383 	clz	r3, r3
 8001c1a:	b2db      	uxtb	r3, r3
 8001c1c:	095b      	lsrs	r3, r3, #5
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	f043 0301 	orr.w	r3, r3, #1
 8001c24:	b2db      	uxtb	r3, r3
 8001c26:	2b01      	cmp	r3, #1
 8001c28:	d102      	bne.n	8001c30 <HAL_RCC_OscConfig+0xd50>
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <HAL_RCC_OscConfig+0xdd8>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	e01b      	b.n	8001c68 <HAL_RCC_OscConfig+0xd88>
 8001c30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c34:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c38:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	fa93 f2a3 	rbit	r2, r3
 8001c44:	f107 0320 	add.w	r3, r7, #32
 8001c48:	601a      	str	r2, [r3, #0]
 8001c4a:	f107 031c 	add.w	r3, r7, #28
 8001c4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	f107 031c 	add.w	r3, r7, #28
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	fa93 f2a3 	rbit	r2, r3
 8001c5e:	f107 0318 	add.w	r3, r7, #24
 8001c62:	601a      	str	r2, [r3, #0]
 8001c64:	4b14      	ldr	r3, [pc, #80]	; (8001cb8 <HAL_RCC_OscConfig+0xdd8>)
 8001c66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c68:	f107 0214 	add.w	r2, r7, #20
 8001c6c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c70:	6011      	str	r1, [r2, #0]
 8001c72:	f107 0214 	add.w	r2, r7, #20
 8001c76:	6812      	ldr	r2, [r2, #0]
 8001c78:	fa92 f1a2 	rbit	r1, r2
 8001c7c:	f107 0210 	add.w	r2, r7, #16
 8001c80:	6011      	str	r1, [r2, #0]
  return(result);
 8001c82:	f107 0210 	add.w	r2, r7, #16
 8001c86:	6812      	ldr	r2, [r2, #0]
 8001c88:	fab2 f282 	clz	r2, r2
 8001c8c:	b252      	sxtb	r2, r2
 8001c8e:	f042 0220 	orr.w	r2, r2, #32
 8001c92:	b252      	sxtb	r2, r2
 8001c94:	b2d2      	uxtb	r2, r2
 8001c96:	f002 021f 	and.w	r2, r2, #31
 8001c9a:	2101      	movs	r1, #1
 8001c9c:	fa01 f202 	lsl.w	r2, r1, r2
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d19d      	bne.n	8001be2 <HAL_RCC_OscConfig+0xd02>
 8001ca6:	e001      	b.n	8001cac <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8001ca8:	2301      	movs	r3, #1
 8001caa:	e000      	b.n	8001cae <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8001cac:	2300      	movs	r3, #0
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bd80      	pop	{r7, pc}
 8001cb8:	40021000 	.word	0x40021000

08001cbc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b09e      	sub	sp, #120	; 0x78
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
 8001cc4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	e164      	b.n	8001f9e <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001cd4:	4b92      	ldr	r3, [pc, #584]	; (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d910      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce2:	4b8f      	ldr	r3, [pc, #572]	; (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	f023 0207 	bic.w	r2, r3, #7
 8001cea:	498d      	ldr	r1, [pc, #564]	; (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	4313      	orrs	r3, r2
 8001cf0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b8b      	ldr	r3, [pc, #556]	; (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e14c      	b.n	8001f9e <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d008      	beq.n	8001d22 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d10:	4b84      	ldr	r3, [pc, #528]	; (8001f24 <HAL_RCC_ClockConfig+0x268>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4981      	ldr	r1, [pc, #516]	; (8001f24 <HAL_RCC_ClockConfig+0x268>)
 8001d1e:	4313      	orrs	r3, r2
 8001d20:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	f000 80df 	beq.w	8001eee <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	2b01      	cmp	r3, #1
 8001d36:	d13d      	bne.n	8001db4 <HAL_RCC_ClockConfig+0xf8>
 8001d38:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d3c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d3e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001d40:	fa93 f3a3 	rbit	r3, r3
 8001d44:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8001d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d48:	fab3 f383 	clz	r3, r3
 8001d4c:	b2db      	uxtb	r3, r3
 8001d4e:	095b      	lsrs	r3, r3, #5
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	f043 0301 	orr.w	r3, r3, #1
 8001d56:	b2db      	uxtb	r3, r3
 8001d58:	2b01      	cmp	r3, #1
 8001d5a:	d102      	bne.n	8001d62 <HAL_RCC_ClockConfig+0xa6>
 8001d5c:	4b71      	ldr	r3, [pc, #452]	; (8001f24 <HAL_RCC_ClockConfig+0x268>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	e00f      	b.n	8001d82 <HAL_RCC_ClockConfig+0xc6>
 8001d62:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d66:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d68:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001d6a:	fa93 f3a3 	rbit	r3, r3
 8001d6e:	667b      	str	r3, [r7, #100]	; 0x64
 8001d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d74:	663b      	str	r3, [r7, #96]	; 0x60
 8001d76:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001d78:	fa93 f3a3 	rbit	r3, r3
 8001d7c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001d7e:	4b69      	ldr	r3, [pc, #420]	; (8001f24 <HAL_RCC_ClockConfig+0x268>)
 8001d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d82:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d86:	65ba      	str	r2, [r7, #88]	; 0x58
 8001d88:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001d8a:	fa92 f2a2 	rbit	r2, r2
 8001d8e:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8001d90:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001d92:	fab2 f282 	clz	r2, r2
 8001d96:	b252      	sxtb	r2, r2
 8001d98:	f042 0220 	orr.w	r2, r2, #32
 8001d9c:	b252      	sxtb	r2, r2
 8001d9e:	b2d2      	uxtb	r2, r2
 8001da0:	f002 021f 	and.w	r2, r2, #31
 8001da4:	2101      	movs	r1, #1
 8001da6:	fa01 f202 	lsl.w	r2, r1, r2
 8001daa:	4013      	ands	r3, r2
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d17d      	bne.n	8001eac <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001db0:	2301      	movs	r3, #1
 8001db2:	e0f4      	b.n	8001f9e <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d13d      	bne.n	8001e38 <HAL_RCC_ClockConfig+0x17c>
 8001dbc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dc0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001dc4:	fa93 f3a3 	rbit	r3, r3
 8001dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8001dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001dcc:	fab3 f383 	clz	r3, r3
 8001dd0:	b2db      	uxtb	r3, r3
 8001dd2:	095b      	lsrs	r3, r3, #5
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	f043 0301 	orr.w	r3, r3, #1
 8001dda:	b2db      	uxtb	r3, r3
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d102      	bne.n	8001de6 <HAL_RCC_ClockConfig+0x12a>
 8001de0:	4b50      	ldr	r3, [pc, #320]	; (8001f24 <HAL_RCC_ClockConfig+0x268>)
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	e00f      	b.n	8001e06 <HAL_RCC_ClockConfig+0x14a>
 8001de6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001dea:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dec:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001dee:	fa93 f3a3 	rbit	r3, r3
 8001df2:	647b      	str	r3, [r7, #68]	; 0x44
 8001df4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001df8:	643b      	str	r3, [r7, #64]	; 0x40
 8001dfa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001dfc:	fa93 f3a3 	rbit	r3, r3
 8001e00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e02:	4b48      	ldr	r3, [pc, #288]	; (8001f24 <HAL_RCC_ClockConfig+0x268>)
 8001e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e06:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e0a:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e0c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e0e:	fa92 f2a2 	rbit	r2, r2
 8001e12:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8001e14:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e16:	fab2 f282 	clz	r2, r2
 8001e1a:	b252      	sxtb	r2, r2
 8001e1c:	f042 0220 	orr.w	r2, r2, #32
 8001e20:	b252      	sxtb	r2, r2
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	f002 021f 	and.w	r2, r2, #31
 8001e28:	2101      	movs	r1, #1
 8001e2a:	fa01 f202 	lsl.w	r2, r1, r2
 8001e2e:	4013      	ands	r3, r2
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d13b      	bne.n	8001eac <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0b2      	b.n	8001f9e <HAL_RCC_ClockConfig+0x2e2>
 8001e38:	2302      	movs	r3, #2
 8001e3a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e3e:	fa93 f3a3 	rbit	r3, r3
 8001e42:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8001e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e46:	fab3 f383 	clz	r3, r3
 8001e4a:	b2db      	uxtb	r3, r3
 8001e4c:	095b      	lsrs	r3, r3, #5
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	f043 0301 	orr.w	r3, r3, #1
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b01      	cmp	r3, #1
 8001e58:	d102      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x1a4>
 8001e5a:	4b32      	ldr	r3, [pc, #200]	; (8001f24 <HAL_RCC_ClockConfig+0x268>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	e00d      	b.n	8001e7c <HAL_RCC_ClockConfig+0x1c0>
 8001e60:	2302      	movs	r3, #2
 8001e62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e66:	fa93 f3a3 	rbit	r3, r3
 8001e6a:	627b      	str	r3, [r7, #36]	; 0x24
 8001e6c:	2302      	movs	r3, #2
 8001e6e:	623b      	str	r3, [r7, #32]
 8001e70:	6a3b      	ldr	r3, [r7, #32]
 8001e72:	fa93 f3a3 	rbit	r3, r3
 8001e76:	61fb      	str	r3, [r7, #28]
 8001e78:	4b2a      	ldr	r3, [pc, #168]	; (8001f24 <HAL_RCC_ClockConfig+0x268>)
 8001e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e7c:	2202      	movs	r2, #2
 8001e7e:	61ba      	str	r2, [r7, #24]
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	fa92 f2a2 	rbit	r2, r2
 8001e86:	617a      	str	r2, [r7, #20]
  return(result);
 8001e88:	697a      	ldr	r2, [r7, #20]
 8001e8a:	fab2 f282 	clz	r2, r2
 8001e8e:	b252      	sxtb	r2, r2
 8001e90:	f042 0220 	orr.w	r2, r2, #32
 8001e94:	b252      	sxtb	r2, r2
 8001e96:	b2d2      	uxtb	r2, r2
 8001e98:	f002 021f 	and.w	r2, r2, #31
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	fa01 f202 	lsl.w	r2, r1, r2
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d101      	bne.n	8001eac <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	e078      	b.n	8001f9e <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eac:	4b1d      	ldr	r3, [pc, #116]	; (8001f24 <HAL_RCC_ClockConfig+0x268>)
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f023 0203 	bic.w	r2, r3, #3
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	491a      	ldr	r1, [pc, #104]	; (8001f24 <HAL_RCC_ClockConfig+0x268>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001ebe:	f7fe f9dd 	bl	800027c <HAL_GetTick>
 8001ec2:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec4:	e00a      	b.n	8001edc <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ec6:	f7fe f9d9 	bl	800027c <HAL_GetTick>
 8001eca:	4602      	mov	r2, r0
 8001ecc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001ece:	1ad3      	subs	r3, r2, r3
 8001ed0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ed4:	4293      	cmp	r3, r2
 8001ed6:	d901      	bls.n	8001edc <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8001ed8:	2303      	movs	r3, #3
 8001eda:	e060      	b.n	8001f9e <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001edc:	4b11      	ldr	r3, [pc, #68]	; (8001f24 <HAL_RCC_ClockConfig+0x268>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 020c 	and.w	r2, r3, #12
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	685b      	ldr	r3, [r3, #4]
 8001ee8:	009b      	lsls	r3, r3, #2
 8001eea:	429a      	cmp	r2, r3
 8001eec:	d1eb      	bne.n	8001ec6 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001eee:	4b0c      	ldr	r3, [pc, #48]	; (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0307 	and.w	r3, r3, #7
 8001ef6:	683a      	ldr	r2, [r7, #0]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d215      	bcs.n	8001f28 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001efc:	4b08      	ldr	r3, [pc, #32]	; (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f023 0207 	bic.w	r2, r3, #7
 8001f04:	4906      	ldr	r1, [pc, #24]	; (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f0c:	4b04      	ldr	r3, [pc, #16]	; (8001f20 <HAL_RCC_ClockConfig+0x264>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	683a      	ldr	r2, [r7, #0]
 8001f16:	429a      	cmp	r2, r3
 8001f18:	d006      	beq.n	8001f28 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8001f1a:	2301      	movs	r3, #1
 8001f1c:	e03f      	b.n	8001f9e <HAL_RCC_ClockConfig+0x2e2>
 8001f1e:	bf00      	nop
 8001f20:	40022000 	.word	0x40022000
 8001f24:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	f003 0304 	and.w	r3, r3, #4
 8001f30:	2b00      	cmp	r3, #0
 8001f32:	d008      	beq.n	8001f46 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f34:	4b1c      	ldr	r3, [pc, #112]	; (8001fa8 <HAL_RCC_ClockConfig+0x2ec>)
 8001f36:	685b      	ldr	r3, [r3, #4]
 8001f38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4919      	ldr	r1, [pc, #100]	; (8001fa8 <HAL_RCC_ClockConfig+0x2ec>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 0308 	and.w	r3, r3, #8
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d009      	beq.n	8001f66 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f52:	4b15      	ldr	r3, [pc, #84]	; (8001fa8 <HAL_RCC_ClockConfig+0x2ec>)
 8001f54:	685b      	ldr	r3, [r3, #4]
 8001f56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	691b      	ldr	r3, [r3, #16]
 8001f5e:	00db      	lsls	r3, r3, #3
 8001f60:	4911      	ldr	r1, [pc, #68]	; (8001fa8 <HAL_RCC_ClockConfig+0x2ec>)
 8001f62:	4313      	orrs	r3, r2
 8001f64:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001f66:	f000 f825 	bl	8001fb4 <HAL_RCC_GetSysClockFreq>
 8001f6a:	4601      	mov	r1, r0
 8001f6c:	4b0e      	ldr	r3, [pc, #56]	; (8001fa8 <HAL_RCC_ClockConfig+0x2ec>)
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f74:	23f0      	movs	r3, #240	; 0xf0
 8001f76:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	fa93 f3a3 	rbit	r3, r3
 8001f7e:	60fb      	str	r3, [r7, #12]
  return(result);
 8001f80:	68fb      	ldr	r3, [r7, #12]
 8001f82:	fab3 f383 	clz	r3, r3
 8001f86:	fa22 f303 	lsr.w	r3, r2, r3
 8001f8a:	4a08      	ldr	r2, [pc, #32]	; (8001fac <HAL_RCC_ClockConfig+0x2f0>)
 8001f8c:	5cd3      	ldrb	r3, [r2, r3]
 8001f8e:	fa21 f303 	lsr.w	r3, r1, r3
 8001f92:	4a07      	ldr	r2, [pc, #28]	; (8001fb0 <HAL_RCC_ClockConfig+0x2f4>)
 8001f94:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8001f96:	2000      	movs	r0, #0
 8001f98:	f7fe f92c 	bl	80001f4 <HAL_InitTick>
  
  return HAL_OK;
 8001f9c:	2300      	movs	r3, #0
}
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	3778      	adds	r7, #120	; 0x78
 8001fa2:	46bd      	mov	sp, r7
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	40021000 	.word	0x40021000
 8001fac:	08002960 	.word	0x08002960
 8001fb0:	20000008 	.word	0x20000008

08001fb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	b08b      	sub	sp, #44	; 0x2c
 8001fb8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001fba:	2300      	movs	r3, #0
 8001fbc:	61fb      	str	r3, [r7, #28]
 8001fbe:	2300      	movs	r3, #0
 8001fc0:	61bb      	str	r3, [r7, #24]
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	627b      	str	r3, [r7, #36]	; 0x24
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8001fce:	4b29      	ldr	r3, [pc, #164]	; (8002074 <HAL_RCC_GetSysClockFreq+0xc0>)
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001fd4:	69fb      	ldr	r3, [r7, #28]
 8001fd6:	f003 030c 	and.w	r3, r3, #12
 8001fda:	2b04      	cmp	r3, #4
 8001fdc:	d002      	beq.n	8001fe4 <HAL_RCC_GetSysClockFreq+0x30>
 8001fde:	2b08      	cmp	r3, #8
 8001fe0:	d003      	beq.n	8001fea <HAL_RCC_GetSysClockFreq+0x36>
 8001fe2:	e03c      	b.n	800205e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001fe4:	4b24      	ldr	r3, [pc, #144]	; (8002078 <HAL_RCC_GetSysClockFreq+0xc4>)
 8001fe6:	623b      	str	r3, [r7, #32]
      break;
 8001fe8:	e03c      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8001fea:	69fb      	ldr	r3, [r7, #28]
 8001fec:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001ff0:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8001ff4:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	fa93 f3a3 	rbit	r3, r3
 8001ffc:	607b      	str	r3, [r7, #4]
  return(result);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	fab3 f383 	clz	r3, r3
 8002004:	fa22 f303 	lsr.w	r3, r2, r3
 8002008:	4a1c      	ldr	r2, [pc, #112]	; (800207c <HAL_RCC_GetSysClockFreq+0xc8>)
 800200a:	5cd3      	ldrb	r3, [r2, r3]
 800200c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800200e:	4b19      	ldr	r3, [pc, #100]	; (8002074 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	f003 020f 	and.w	r2, r3, #15
 8002016:	230f      	movs	r3, #15
 8002018:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	fa93 f3a3 	rbit	r3, r3
 8002020:	60fb      	str	r3, [r7, #12]
  return(result);
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	fab3 f383 	clz	r3, r3
 8002028:	fa22 f303 	lsr.w	r3, r2, r3
 800202c:	4a14      	ldr	r2, [pc, #80]	; (8002080 <HAL_RCC_GetSysClockFreq+0xcc>)
 800202e:	5cd3      	ldrb	r3, [r2, r3]
 8002030:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002032:	69fb      	ldr	r3, [r7, #28]
 8002034:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800203c:	4a0e      	ldr	r2, [pc, #56]	; (8002078 <HAL_RCC_GetSysClockFreq+0xc4>)
 800203e:	69bb      	ldr	r3, [r7, #24]
 8002040:	fbb2 f2f3 	udiv	r2, r2, r3
 8002044:	697b      	ldr	r3, [r7, #20]
 8002046:	fb02 f303 	mul.w	r3, r2, r3
 800204a:	627b      	str	r3, [r7, #36]	; 0x24
 800204c:	e004      	b.n	8002058 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800204e:	697b      	ldr	r3, [r7, #20]
 8002050:	4a0c      	ldr	r2, [pc, #48]	; (8002084 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800205a:	623b      	str	r3, [r7, #32]
      break;
 800205c:	e002      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800205e:	4b06      	ldr	r3, [pc, #24]	; (8002078 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002060:	623b      	str	r3, [r7, #32]
      break;
 8002062:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002064:	6a3b      	ldr	r3, [r7, #32]
}
 8002066:	4618      	mov	r0, r3
 8002068:	372c      	adds	r7, #44	; 0x2c
 800206a:	46bd      	mov	sp, r7
 800206c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002070:	4770      	bx	lr
 8002072:	bf00      	nop
 8002074:	40021000 	.word	0x40021000
 8002078:	007a1200 	.word	0x007a1200
 800207c:	08002940 	.word	0x08002940
 8002080:	08002950 	.word	0x08002950
 8002084:	003d0900 	.word	0x003d0900

08002088 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b092      	sub	sp, #72	; 0x48
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002090:	2300      	movs	r3, #0
 8002092:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002094:	2300      	movs	r3, #0
 8002096:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	f000 80cf 	beq.w	8002244 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 80020a6:	2300      	movs	r3, #0
 80020a8:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80020ac:	4b86      	ldr	r3, [pc, #536]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020ae:	69db      	ldr	r3, [r3, #28]
 80020b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d10e      	bne.n	80020d6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020b8:	4b83      	ldr	r3, [pc, #524]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020ba:	69db      	ldr	r3, [r3, #28]
 80020bc:	4a82      	ldr	r2, [pc, #520]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020c2:	61d3      	str	r3, [r2, #28]
 80020c4:	4b80      	ldr	r3, [pc, #512]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80020c6:	69db      	ldr	r3, [r3, #28]
 80020c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020cc:	60bb      	str	r3, [r7, #8]
 80020ce:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020d0:	2301      	movs	r3, #1
 80020d2:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020d6:	4b7d      	ldr	r3, [pc, #500]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d118      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80020e2:	4b7a      	ldr	r3, [pc, #488]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	4a79      	ldr	r2, [pc, #484]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80020e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ec:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80020ee:	f7fe f8c5 	bl	800027c <HAL_GetTick>
 80020f2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020f4:	e008      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f6:	f7fe f8c1 	bl	800027c <HAL_GetTick>
 80020fa:	4602      	mov	r2, r0
 80020fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b64      	cmp	r3, #100	; 0x64
 8002102:	d901      	bls.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e0da      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002108:	4b70      	ldr	r3, [pc, #448]	; (80022cc <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0f0      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002114:	4b6c      	ldr	r3, [pc, #432]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002116:	6a1b      	ldr	r3, [r3, #32]
 8002118:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800211c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800211e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002120:	2b00      	cmp	r3, #0
 8002122:	d07c      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800212c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800212e:	429a      	cmp	r2, r3
 8002130:	d075      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002132:	4b65      	ldr	r3, [pc, #404]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800213a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800213c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002140:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800214a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800214c:	fab3 f383 	clz	r3, r3
 8002150:	461a      	mov	r2, r3
 8002152:	4b5f      	ldr	r3, [pc, #380]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002154:	4413      	add	r3, r2
 8002156:	009b      	lsls	r3, r3, #2
 8002158:	461a      	mov	r2, r3
 800215a:	2301      	movs	r3, #1
 800215c:	6013      	str	r3, [r2, #0]
 800215e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002162:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002166:	fa93 f3a3 	rbit	r3, r3
 800216a:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 800216c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800216e:	fab3 f383 	clz	r3, r3
 8002172:	461a      	mov	r2, r3
 8002174:	4b56      	ldr	r3, [pc, #344]	; (80022d0 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002176:	4413      	add	r3, r2
 8002178:	009b      	lsls	r3, r3, #2
 800217a:	461a      	mov	r2, r3
 800217c:	2300      	movs	r3, #0
 800217e:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002180:	4a51      	ldr	r2, [pc, #324]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002182:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002184:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002186:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002188:	f003 0301 	and.w	r3, r3, #1
 800218c:	2b00      	cmp	r3, #0
 800218e:	d046      	beq.n	800221e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002190:	f7fe f874 	bl	800027c <HAL_GetTick>
 8002194:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002196:	e00a      	b.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002198:	f7fe f870 	bl	800027c <HAL_GetTick>
 800219c:	4602      	mov	r2, r0
 800219e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021a0:	1ad3      	subs	r3, r2, r3
 80021a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d901      	bls.n	80021ae <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 80021aa:	2303      	movs	r3, #3
 80021ac:	e087      	b.n	80022be <HAL_RCCEx_PeriphCLKConfig+0x236>
 80021ae:	2302      	movs	r3, #2
 80021b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80021b4:	fa93 f3a3 	rbit	r3, r3
 80021b8:	627b      	str	r3, [r7, #36]	; 0x24
 80021ba:	2302      	movs	r3, #2
 80021bc:	623b      	str	r3, [r7, #32]
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	61fb      	str	r3, [r7, #28]
  return(result);
 80021c6:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b2db      	uxtb	r3, r3
 80021ce:	095b      	lsrs	r3, r3, #5
 80021d0:	b2db      	uxtb	r3, r3
 80021d2:	f043 0302 	orr.w	r3, r3, #2
 80021d6:	b2db      	uxtb	r3, r3
 80021d8:	2b02      	cmp	r3, #2
 80021da:	d102      	bne.n	80021e2 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80021dc:	4b3a      	ldr	r3, [pc, #232]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021de:	6a1b      	ldr	r3, [r3, #32]
 80021e0:	e007      	b.n	80021f2 <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80021e2:	2302      	movs	r3, #2
 80021e4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021e6:	69bb      	ldr	r3, [r7, #24]
 80021e8:	fa93 f3a3 	rbit	r3, r3
 80021ec:	617b      	str	r3, [r7, #20]
 80021ee:	4b36      	ldr	r3, [pc, #216]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80021f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f2:	2202      	movs	r2, #2
 80021f4:	613a      	str	r2, [r7, #16]
 80021f6:	693a      	ldr	r2, [r7, #16]
 80021f8:	fa92 f2a2 	rbit	r2, r2
 80021fc:	60fa      	str	r2, [r7, #12]
  return(result);
 80021fe:	68fa      	ldr	r2, [r7, #12]
 8002200:	fab2 f282 	clz	r2, r2
 8002204:	b252      	sxtb	r2, r2
 8002206:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800220a:	b252      	sxtb	r2, r2
 800220c:	b2d2      	uxtb	r2, r2
 800220e:	f002 021f 	and.w	r2, r2, #31
 8002212:	2101      	movs	r1, #1
 8002214:	fa01 f202 	lsl.w	r2, r1, r2
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d0bc      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800221e:	4b2a      	ldr	r3, [pc, #168]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002220:	6a1b      	ldr	r3, [r3, #32]
 8002222:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	685b      	ldr	r3, [r3, #4]
 800222a:	4927      	ldr	r1, [pc, #156]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800222c:	4313      	orrs	r3, r2
 800222e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002230:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002234:	2b01      	cmp	r3, #1
 8002236:	d105      	bne.n	8002244 <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002238:	4b23      	ldr	r3, [pc, #140]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800223a:	69db      	ldr	r3, [r3, #28]
 800223c:	4a22      	ldr	r2, [pc, #136]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800223e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002242:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0301 	and.w	r3, r3, #1
 800224c:	2b00      	cmp	r3, #0
 800224e:	d008      	beq.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002250:	4b1d      	ldr	r3, [pc, #116]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002254:	f023 0203 	bic.w	r2, r3, #3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	689b      	ldr	r3, [r3, #8]
 800225c:	491a      	ldr	r1, [pc, #104]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800225e:	4313      	orrs	r3, r2
 8002260:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0320 	and.w	r3, r3, #32
 800226a:	2b00      	cmp	r3, #0
 800226c:	d008      	beq.n	8002280 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800226e:	4b16      	ldr	r3, [pc, #88]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002272:	f023 0210 	bic.w	r2, r3, #16
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	68db      	ldr	r3, [r3, #12]
 800227a:	4913      	ldr	r1, [pc, #76]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800227c:	4313      	orrs	r3, r2
 800227e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002288:	2b00      	cmp	r3, #0
 800228a:	d008      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800228c:	4b0e      	ldr	r3, [pc, #56]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	691b      	ldr	r3, [r3, #16]
 8002298:	490b      	ldr	r1, [pc, #44]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800229a:	4313      	orrs	r3, r2
 800229c:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d008      	beq.n	80022bc <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80022aa:	4b07      	ldr	r3, [pc, #28]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	695b      	ldr	r3, [r3, #20]
 80022b6:	4904      	ldr	r1, [pc, #16]	; (80022c8 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80022b8:	4313      	orrs	r3, r2
 80022ba:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80022bc:	2300      	movs	r3, #0
}
 80022be:	4618      	mov	r0, r3
 80022c0:	3748      	adds	r7, #72	; 0x48
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}
 80022c6:	bf00      	nop
 80022c8:	40021000 	.word	0x40021000
 80022cc:	40007000 	.word	0x40007000
 80022d0:	10908100 	.word	0x10908100

080022d4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af02      	add	r7, sp, #8
 80022da:	4603      	mov	r3, r0
 80022dc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	f023 030f 	bic.w	r3, r3, #15
 80022e4:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	011b      	lsls	r3, r3, #4
 80022ea:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 80022ec:	7bfb      	ldrb	r3, [r7, #15]
 80022ee:	f043 030c 	orr.w	r3, r3, #12
 80022f2:	b2db      	uxtb	r3, r3
 80022f4:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 80022f6:	7bfb      	ldrb	r3, [r7, #15]
 80022f8:	f043 0308 	orr.w	r3, r3, #8
 80022fc:	b2db      	uxtb	r3, r3
 80022fe:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8002300:	7bbb      	ldrb	r3, [r7, #14]
 8002302:	f043 030c 	orr.w	r3, r3, #12
 8002306:	b2db      	uxtb	r3, r3
 8002308:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 800230a:	7bbb      	ldrb	r3, [r7, #14]
 800230c:	f043 0308 	orr.w	r3, r3, #8
 8002310:	b2db      	uxtb	r3, r3
 8002312:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002314:	f107 0208 	add.w	r2, r7, #8
 8002318:	2364      	movs	r3, #100	; 0x64
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	2304      	movs	r3, #4
 800231e:	214e      	movs	r1, #78	; 0x4e
 8002320:	4803      	ldr	r0, [pc, #12]	; (8002330 <lcd_send_cmd+0x5c>)
 8002322:	f7fe fadd 	bl	80008e0 <HAL_I2C_Master_Transmit>
}
 8002326:	bf00      	nop
 8002328:	3710      	adds	r7, #16
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}
 800232e:	bf00      	nop
 8002330:	2000002c 	.word	0x2000002c

08002334 <lcd_send_data>:

void lcd_send_data (char data)
{
 8002334:	b580      	push	{r7, lr}
 8002336:	b086      	sub	sp, #24
 8002338:	af02      	add	r7, sp, #8
 800233a:	4603      	mov	r3, r0
 800233c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 800233e:	79fb      	ldrb	r3, [r7, #7]
 8002340:	f023 030f 	bic.w	r3, r3, #15
 8002344:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8002346:	79fb      	ldrb	r3, [r7, #7]
 8002348:	011b      	lsls	r3, r3, #4
 800234a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=1
 800234c:	7bfb      	ldrb	r3, [r7, #15]
 800234e:	f043 030d 	orr.w	r3, r3, #13
 8002352:	b2db      	uxtb	r3, r3
 8002354:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=1
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	f043 0309 	orr.w	r3, r3, #9
 800235c:	b2db      	uxtb	r3, r3
 800235e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=1
 8002360:	7bbb      	ldrb	r3, [r7, #14]
 8002362:	f043 030d 	orr.w	r3, r3, #13
 8002366:	b2db      	uxtb	r3, r3
 8002368:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=1
 800236a:	7bbb      	ldrb	r3, [r7, #14]
 800236c:	f043 0309 	orr.w	r3, r3, #9
 8002370:	b2db      	uxtb	r3, r3
 8002372:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8002374:	f107 0208 	add.w	r2, r7, #8
 8002378:	2364      	movs	r3, #100	; 0x64
 800237a:	9300      	str	r3, [sp, #0]
 800237c:	2304      	movs	r3, #4
 800237e:	214e      	movs	r1, #78	; 0x4e
 8002380:	4803      	ldr	r0, [pc, #12]	; (8002390 <lcd_send_data+0x5c>)
 8002382:	f7fe faad 	bl	80008e0 <HAL_I2C_Master_Transmit>
}
 8002386:	bf00      	nop
 8002388:	3710      	adds	r7, #16
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}
 800238e:	bf00      	nop
 8002390:	2000002c 	.word	0x2000002c

08002394 <lcd_init>:
		lcd_send_data (' ');
	}
}

void lcd_init (void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	af00      	add	r7, sp, #0
	// 4 bit initialisation
	HAL_Delay(50);  // wait for >40ms
 8002398:	2032      	movs	r0, #50	; 0x32
 800239a:	f7fd ff7b 	bl	8000294 <HAL_Delay>
	lcd_send_cmd (0x30);
 800239e:	2030      	movs	r0, #48	; 0x30
 80023a0:	f7ff ff98 	bl	80022d4 <lcd_send_cmd>
	HAL_Delay(5);  // wait for >4.1ms
 80023a4:	2005      	movs	r0, #5
 80023a6:	f7fd ff75 	bl	8000294 <HAL_Delay>
	lcd_send_cmd (0x30);
 80023aa:	2030      	movs	r0, #48	; 0x30
 80023ac:	f7ff ff92 	bl	80022d4 <lcd_send_cmd>
	HAL_Delay(1);  // wait for >100us
 80023b0:	2001      	movs	r0, #1
 80023b2:	f7fd ff6f 	bl	8000294 <HAL_Delay>
	lcd_send_cmd (0x30);
 80023b6:	2030      	movs	r0, #48	; 0x30
 80023b8:	f7ff ff8c 	bl	80022d4 <lcd_send_cmd>
	HAL_Delay(10);
 80023bc:	200a      	movs	r0, #10
 80023be:	f7fd ff69 	bl	8000294 <HAL_Delay>
	lcd_send_cmd (0x20);  // 4bit mode
 80023c2:	2020      	movs	r0, #32
 80023c4:	f7ff ff86 	bl	80022d4 <lcd_send_cmd>
	HAL_Delay(10);
 80023c8:	200a      	movs	r0, #10
 80023ca:	f7fd ff63 	bl	8000294 <HAL_Delay>

  // dislay initialisation
	lcd_send_cmd (0x28); // Function set --> DL=0 (4 bit mode), N = 1 (2 line display) F = 0 (5x8 characters)
 80023ce:	2028      	movs	r0, #40	; 0x28
 80023d0:	f7ff ff80 	bl	80022d4 <lcd_send_cmd>
	HAL_Delay(1);
 80023d4:	2001      	movs	r0, #1
 80023d6:	f7fd ff5d 	bl	8000294 <HAL_Delay>
	lcd_send_cmd (0x08); //Display on/off control --> D=0,C=0, B=0  ---> display off
 80023da:	2008      	movs	r0, #8
 80023dc:	f7ff ff7a 	bl	80022d4 <lcd_send_cmd>
	HAL_Delay(1);
 80023e0:	2001      	movs	r0, #1
 80023e2:	f7fd ff57 	bl	8000294 <HAL_Delay>
	lcd_send_cmd (0x01);  // clear display
 80023e6:	2001      	movs	r0, #1
 80023e8:	f7ff ff74 	bl	80022d4 <lcd_send_cmd>
	HAL_Delay(1);
 80023ec:	2001      	movs	r0, #1
 80023ee:	f7fd ff51 	bl	8000294 <HAL_Delay>
	HAL_Delay(1);
 80023f2:	2001      	movs	r0, #1
 80023f4:	f7fd ff4e 	bl	8000294 <HAL_Delay>
	lcd_send_cmd (0x06); //Entry mode set --> I/D = 1 (increment cursor) & S = 0 (no shift)
 80023f8:	2006      	movs	r0, #6
 80023fa:	f7ff ff6b 	bl	80022d4 <lcd_send_cmd>
	HAL_Delay(1);
 80023fe:	2001      	movs	r0, #1
 8002400:	f7fd ff48 	bl	8000294 <HAL_Delay>
	lcd_send_cmd (0x0C); //Display on/off control --> D = 1, C and B = 0. (Cursor and blink, last two bits)
 8002404:	200c      	movs	r0, #12
 8002406:	f7ff ff65 	bl	80022d4 <lcd_send_cmd>
}
 800240a:	bf00      	nop
 800240c:	bd80      	pop	{r7, pc}

0800240e <lcd_send_string>:

void lcd_send_string (char *str)
{
 800240e:	b580      	push	{r7, lr}
 8002410:	b082      	sub	sp, #8
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8002416:	e006      	b.n	8002426 <lcd_send_string+0x18>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	1c5a      	adds	r2, r3, #1
 800241c:	607a      	str	r2, [r7, #4]
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7ff ff87 	bl	8002334 <lcd_send_data>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f4      	bne.n	8002418 <lcd_send_string+0xa>
}
 800242e:	bf00      	nop
 8002430:	3708      	adds	r7, #8
 8002432:	46bd      	mov	sp, r7
 8002434:	bd80      	pop	{r7, pc}
	...

08002438 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800243c:	f7fd fec4 	bl	80001c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002440:	f000 f828 	bl	8002494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002444:	f000 f8be 	bl	80025c4 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002448:	f000 f87c 	bl	8002544 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	lcd_init();
 800244c:	f7ff ffa2 	bl	8002394 <lcd_init>

	lcd_send_cmd (0x80|0x00);
 8002450:	2080      	movs	r0, #128	; 0x80
 8002452:	f7ff ff3f 	bl	80022d4 <lcd_send_cmd>
	lcd_send_string("HELLO WORLD");
 8002456:	480b      	ldr	r0, [pc, #44]	; (8002484 <main+0x4c>)
 8002458:	f7ff ffd9 	bl	800240e <lcd_send_string>

	lcd_send_cmd (0x80|0x40);
 800245c:	20c0      	movs	r0, #192	; 0xc0
 800245e:	f7ff ff39 	bl	80022d4 <lcd_send_cmd>
	lcd_send_string("LCD 20x4 DEMO");
 8002462:	4809      	ldr	r0, [pc, #36]	; (8002488 <main+0x50>)
 8002464:	f7ff ffd3 	bl	800240e <lcd_send_string>

	lcd_send_cmd (0x80|0x1C);
 8002468:	209c      	movs	r0, #156	; 0x9c
 800246a:	f7ff ff33 	bl	80022d4 <lcd_send_cmd>
	lcd_send_string("BY");
 800246e:	4807      	ldr	r0, [pc, #28]	; (800248c <main+0x54>)
 8002470:	f7ff ffcd 	bl	800240e <lcd_send_string>

	lcd_send_cmd (0x80|0x54);
 8002474:	20d4      	movs	r0, #212	; 0xd4
 8002476:	f7ff ff2d 	bl	80022d4 <lcd_send_cmd>
	lcd_send_string("ControllersTech");
 800247a:	4805      	ldr	r0, [pc, #20]	; (8002490 <main+0x58>)
 800247c:	f7ff ffc7 	bl	800240e <lcd_send_string>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002480:	e7fe      	b.n	8002480 <main+0x48>
 8002482:	bf00      	nop
 8002484:	08002910 	.word	0x08002910
 8002488:	0800291c 	.word	0x0800291c
 800248c:	0800292c 	.word	0x0800292c
 8002490:	08002930 	.word	0x08002930

08002494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b096      	sub	sp, #88	; 0x58
 8002498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800249a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800249e:	2228      	movs	r2, #40	; 0x28
 80024a0:	2100      	movs	r1, #0
 80024a2:	4618      	mov	r0, r3
 80024a4:	f000 fa20 	bl	80028e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80024a8:	f107 031c 	add.w	r3, r7, #28
 80024ac:	2200      	movs	r2, #0
 80024ae:	601a      	str	r2, [r3, #0]
 80024b0:	605a      	str	r2, [r3, #4]
 80024b2:	609a      	str	r2, [r3, #8]
 80024b4:	60da      	str	r2, [r3, #12]
 80024b6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80024b8:	1d3b      	adds	r3, r7, #4
 80024ba:	2200      	movs	r2, #0
 80024bc:	601a      	str	r2, [r3, #0]
 80024be:	605a      	str	r2, [r3, #4]
 80024c0:	609a      	str	r2, [r3, #8]
 80024c2:	60da      	str	r2, [r3, #12]
 80024c4:	611a      	str	r2, [r3, #16]
 80024c6:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80024c8:	2302      	movs	r3, #2
 80024ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80024cc:	2301      	movs	r3, #1
 80024ce:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80024d0:	2310      	movs	r3, #16
 80024d2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80024d4:	2302      	movs	r3, #2
 80024d6:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80024d8:	2300      	movs	r3, #0
 80024da:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 80024dc:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80024e0:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80024e2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80024e6:	4618      	mov	r0, r3
 80024e8:	f7fe fcfa 	bl	8000ee0 <HAL_RCC_OscConfig>
 80024ec:	4603      	mov	r3, r0
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d001      	beq.n	80024f6 <SystemClock_Config+0x62>
  {
    Error_Handler();
 80024f2:	f000 f8c3 	bl	800267c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80024f6:	230f      	movs	r3, #15
 80024f8:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80024fa:	2302      	movs	r3, #2
 80024fc:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80024fe:	2380      	movs	r3, #128	; 0x80
 8002500:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002502:	2300      	movs	r3, #0
 8002504:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002506:	2300      	movs	r3, #0
 8002508:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800250a:	f107 031c 	add.w	r3, r7, #28
 800250e:	2100      	movs	r1, #0
 8002510:	4618      	mov	r0, r3
 8002512:	f7ff fbd3 	bl	8001cbc <HAL_RCC_ClockConfig>
 8002516:	4603      	mov	r3, r0
 8002518:	2b00      	cmp	r3, #0
 800251a:	d001      	beq.n	8002520 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800251c:	f000 f8ae 	bl	800267c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8002520:	2320      	movs	r3, #32
 8002522:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8002524:	2300      	movs	r3, #0
 8002526:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002528:	1d3b      	adds	r3, r7, #4
 800252a:	4618      	mov	r0, r3
 800252c:	f7ff fdac 	bl	8002088 <HAL_RCCEx_PeriphCLKConfig>
 8002530:	4603      	mov	r3, r0
 8002532:	2b00      	cmp	r3, #0
 8002534:	d001      	beq.n	800253a <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8002536:	f000 f8a1 	bl	800267c <Error_Handler>
  }
}
 800253a:	bf00      	nop
 800253c:	3758      	adds	r7, #88	; 0x58
 800253e:	46bd      	mov	sp, r7
 8002540:	bd80      	pop	{r7, pc}
	...

08002544 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002548:	4b1b      	ldr	r3, [pc, #108]	; (80025b8 <MX_I2C1_Init+0x74>)
 800254a:	4a1c      	ldr	r2, [pc, #112]	; (80025bc <MX_I2C1_Init+0x78>)
 800254c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800254e:	4b1a      	ldr	r3, [pc, #104]	; (80025b8 <MX_I2C1_Init+0x74>)
 8002550:	4a1b      	ldr	r2, [pc, #108]	; (80025c0 <MX_I2C1_Init+0x7c>)
 8002552:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002554:	4b18      	ldr	r3, [pc, #96]	; (80025b8 <MX_I2C1_Init+0x74>)
 8002556:	2200      	movs	r2, #0
 8002558:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800255a:	4b17      	ldr	r3, [pc, #92]	; (80025b8 <MX_I2C1_Init+0x74>)
 800255c:	2201      	movs	r2, #1
 800255e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002560:	4b15      	ldr	r3, [pc, #84]	; (80025b8 <MX_I2C1_Init+0x74>)
 8002562:	2200      	movs	r2, #0
 8002564:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <MX_I2C1_Init+0x74>)
 8002568:	2200      	movs	r2, #0
 800256a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800256c:	4b12      	ldr	r3, [pc, #72]	; (80025b8 <MX_I2C1_Init+0x74>)
 800256e:	2200      	movs	r2, #0
 8002570:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002572:	4b11      	ldr	r3, [pc, #68]	; (80025b8 <MX_I2C1_Init+0x74>)
 8002574:	2200      	movs	r2, #0
 8002576:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002578:	4b0f      	ldr	r3, [pc, #60]	; (80025b8 <MX_I2C1_Init+0x74>)
 800257a:	2200      	movs	r2, #0
 800257c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800257e:	480e      	ldr	r0, [pc, #56]	; (80025b8 <MX_I2C1_Init+0x74>)
 8002580:	f7fe f91e 	bl	80007c0 <HAL_I2C_Init>
 8002584:	4603      	mov	r3, r0
 8002586:	2b00      	cmp	r3, #0
 8002588:	d001      	beq.n	800258e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800258a:	f000 f877 	bl	800267c <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800258e:	2100      	movs	r1, #0
 8002590:	4809      	ldr	r0, [pc, #36]	; (80025b8 <MX_I2C1_Init+0x74>)
 8002592:	f7fe fc0b 	bl	8000dac <HAL_I2CEx_ConfigAnalogFilter>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d001      	beq.n	80025a0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800259c:	f000 f86e 	bl	800267c <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80025a0:	2100      	movs	r1, #0
 80025a2:	4805      	ldr	r0, [pc, #20]	; (80025b8 <MX_I2C1_Init+0x74>)
 80025a4:	f7fe fc4d 	bl	8000e42 <HAL_I2CEx_ConfigDigitalFilter>
 80025a8:	4603      	mov	r3, r0
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d001      	beq.n	80025b2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80025ae:	f000 f865 	bl	800267c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80025b2:	bf00      	nop
 80025b4:	bd80      	pop	{r7, pc}
 80025b6:	bf00      	nop
 80025b8:	2000002c 	.word	0x2000002c
 80025bc:	40005400 	.word	0x40005400
 80025c0:	2000090e 	.word	0x2000090e

080025c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b088      	sub	sp, #32
 80025c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025ca:	f107 030c 	add.w	r3, r7, #12
 80025ce:	2200      	movs	r2, #0
 80025d0:	601a      	str	r2, [r3, #0]
 80025d2:	605a      	str	r2, [r3, #4]
 80025d4:	609a      	str	r2, [r3, #8]
 80025d6:	60da      	str	r2, [r3, #12]
 80025d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80025da:	4b26      	ldr	r3, [pc, #152]	; (8002674 <MX_GPIO_Init+0xb0>)
 80025dc:	695b      	ldr	r3, [r3, #20]
 80025de:	4a25      	ldr	r2, [pc, #148]	; (8002674 <MX_GPIO_Init+0xb0>)
 80025e0:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80025e4:	6153      	str	r3, [r2, #20]
 80025e6:	4b23      	ldr	r3, [pc, #140]	; (8002674 <MX_GPIO_Init+0xb0>)
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80025ee:	60bb      	str	r3, [r7, #8]
 80025f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80025f2:	4b20      	ldr	r3, [pc, #128]	; (8002674 <MX_GPIO_Init+0xb0>)
 80025f4:	695b      	ldr	r3, [r3, #20]
 80025f6:	4a1f      	ldr	r2, [pc, #124]	; (8002674 <MX_GPIO_Init+0xb0>)
 80025f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80025fc:	6153      	str	r3, [r2, #20]
 80025fe:	4b1d      	ldr	r3, [pc, #116]	; (8002674 <MX_GPIO_Init+0xb0>)
 8002600:	695b      	ldr	r3, [r3, #20]
 8002602:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002606:	607b      	str	r3, [r7, #4]
 8002608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800260a:	4b1a      	ldr	r3, [pc, #104]	; (8002674 <MX_GPIO_Init+0xb0>)
 800260c:	695b      	ldr	r3, [r3, #20]
 800260e:	4a19      	ldr	r2, [pc, #100]	; (8002674 <MX_GPIO_Init+0xb0>)
 8002610:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002614:	6153      	str	r3, [r2, #20]
 8002616:	4b17      	ldr	r3, [pc, #92]	; (8002674 <MX_GPIO_Init+0xb0>)
 8002618:	695b      	ldr	r3, [r3, #20]
 800261a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800261e:	603b      	str	r3, [r7, #0]
 8002620:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8002622:	2200      	movs	r2, #0
 8002624:	2108      	movs	r1, #8
 8002626:	4814      	ldr	r0, [pc, #80]	; (8002678 <MX_GPIO_Init+0xb4>)
 8002628:	f7fe f8b2 	bl	8000790 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA2 VCP_RX_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_2|VCP_RX_Pin;
 800262c:	f248 0304 	movw	r3, #32772	; 0x8004
 8002630:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002632:	2302      	movs	r3, #2
 8002634:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002636:	2300      	movs	r3, #0
 8002638:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800263a:	2303      	movs	r3, #3
 800263c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800263e:	2307      	movs	r3, #7
 8002640:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002642:	f107 030c 	add.w	r3, r7, #12
 8002646:	4619      	mov	r1, r3
 8002648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800264c:	f7fd ff2a 	bl	80004a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8002650:	2308      	movs	r3, #8
 8002652:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002654:	2301      	movs	r3, #1
 8002656:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800265c:	2300      	movs	r3, #0
 800265e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8002660:	f107 030c 	add.w	r3, r7, #12
 8002664:	4619      	mov	r1, r3
 8002666:	4804      	ldr	r0, [pc, #16]	; (8002678 <MX_GPIO_Init+0xb4>)
 8002668:	f7fd ff1c 	bl	80004a4 <HAL_GPIO_Init>

}
 800266c:	bf00      	nop
 800266e:	3720      	adds	r7, #32
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}
 8002674:	40021000 	.word	0x40021000
 8002678:	48000400 	.word	0x48000400

0800267c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800267c:	b480      	push	{r7}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8002680:	bf00      	nop
 8002682:	46bd      	mov	sp, r7
 8002684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002688:	4770      	bx	lr
	...

0800268c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002692:	4b0f      	ldr	r3, [pc, #60]	; (80026d0 <HAL_MspInit+0x44>)
 8002694:	699b      	ldr	r3, [r3, #24]
 8002696:	4a0e      	ldr	r2, [pc, #56]	; (80026d0 <HAL_MspInit+0x44>)
 8002698:	f043 0301 	orr.w	r3, r3, #1
 800269c:	6193      	str	r3, [r2, #24]
 800269e:	4b0c      	ldr	r3, [pc, #48]	; (80026d0 <HAL_MspInit+0x44>)
 80026a0:	699b      	ldr	r3, [r3, #24]
 80026a2:	f003 0301 	and.w	r3, r3, #1
 80026a6:	607b      	str	r3, [r7, #4]
 80026a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026aa:	4b09      	ldr	r3, [pc, #36]	; (80026d0 <HAL_MspInit+0x44>)
 80026ac:	69db      	ldr	r3, [r3, #28]
 80026ae:	4a08      	ldr	r2, [pc, #32]	; (80026d0 <HAL_MspInit+0x44>)
 80026b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026b4:	61d3      	str	r3, [r2, #28]
 80026b6:	4b06      	ldr	r3, [pc, #24]	; (80026d0 <HAL_MspInit+0x44>)
 80026b8:	69db      	ldr	r3, [r3, #28]
 80026ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026be:	603b      	str	r3, [r7, #0]
 80026c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	40021000 	.word	0x40021000

080026d4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b08a      	sub	sp, #40	; 0x28
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026dc:	f107 0314 	add.w	r3, r7, #20
 80026e0:	2200      	movs	r2, #0
 80026e2:	601a      	str	r2, [r3, #0]
 80026e4:	605a      	str	r2, [r3, #4]
 80026e6:	609a      	str	r2, [r3, #8]
 80026e8:	60da      	str	r2, [r3, #12]
 80026ea:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	4a17      	ldr	r2, [pc, #92]	; (8002750 <HAL_I2C_MspInit+0x7c>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d127      	bne.n	8002746 <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80026f6:	4b17      	ldr	r3, [pc, #92]	; (8002754 <HAL_I2C_MspInit+0x80>)
 80026f8:	695b      	ldr	r3, [r3, #20]
 80026fa:	4a16      	ldr	r2, [pc, #88]	; (8002754 <HAL_I2C_MspInit+0x80>)
 80026fc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002700:	6153      	str	r3, [r2, #20]
 8002702:	4b14      	ldr	r3, [pc, #80]	; (8002754 <HAL_I2C_MspInit+0x80>)
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800270a:	613b      	str	r3, [r7, #16]
 800270c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800270e:	23c0      	movs	r3, #192	; 0xc0
 8002710:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002712:	2312      	movs	r3, #18
 8002714:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002716:	2301      	movs	r3, #1
 8002718:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800271a:	2303      	movs	r3, #3
 800271c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800271e:	2304      	movs	r3, #4
 8002720:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002722:	f107 0314 	add.w	r3, r7, #20
 8002726:	4619      	mov	r1, r3
 8002728:	480b      	ldr	r0, [pc, #44]	; (8002758 <HAL_I2C_MspInit+0x84>)
 800272a:	f7fd febb 	bl	80004a4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800272e:	4b09      	ldr	r3, [pc, #36]	; (8002754 <HAL_I2C_MspInit+0x80>)
 8002730:	69db      	ldr	r3, [r3, #28]
 8002732:	4a08      	ldr	r2, [pc, #32]	; (8002754 <HAL_I2C_MspInit+0x80>)
 8002734:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002738:	61d3      	str	r3, [r2, #28]
 800273a:	4b06      	ldr	r3, [pc, #24]	; (8002754 <HAL_I2C_MspInit+0x80>)
 800273c:	69db      	ldr	r3, [r3, #28]
 800273e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002742:	60fb      	str	r3, [r7, #12]
 8002744:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002746:	bf00      	nop
 8002748:	3728      	adds	r7, #40	; 0x28
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	40005400 	.word	0x40005400
 8002754:	40021000 	.word	0x40021000
 8002758:	48000400 	.word	0x48000400

0800275c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800275c:	b480      	push	{r7}
 800275e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8002760:	bf00      	nop
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr

0800276a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800276a:	b480      	push	{r7}
 800276c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800276e:	e7fe      	b.n	800276e <HardFault_Handler+0x4>

08002770 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002770:	b480      	push	{r7}
 8002772:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002774:	e7fe      	b.n	8002774 <MemManage_Handler+0x4>

08002776 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002776:	b480      	push	{r7}
 8002778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800277a:	e7fe      	b.n	800277a <BusFault_Handler+0x4>

0800277c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800277c:	b480      	push	{r7}
 800277e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002780:	e7fe      	b.n	8002780 <UsageFault_Handler+0x4>

08002782 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002782:	b480      	push	{r7}
 8002784:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002786:	bf00      	nop
 8002788:	46bd      	mov	sp, r7
 800278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800278e:	4770      	bx	lr

08002790 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002790:	b480      	push	{r7}
 8002792:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002794:	bf00      	nop
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr

0800279e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800279e:	b480      	push	{r7}
 80027a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80027a2:	bf00      	nop
 80027a4:	46bd      	mov	sp, r7
 80027a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027aa:	4770      	bx	lr

080027ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80027b0:	f7fd fd50 	bl	8000254 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80027b4:	bf00      	nop
 80027b6:	bd80      	pop	{r7, pc}

080027b8 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80027b8:	b480      	push	{r7}
 80027ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80027bc:	4b1f      	ldr	r3, [pc, #124]	; (800283c <SystemInit+0x84>)
 80027be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027c2:	4a1e      	ldr	r2, [pc, #120]	; (800283c <SystemInit+0x84>)
 80027c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80027c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80027cc:	4b1c      	ldr	r3, [pc, #112]	; (8002840 <SystemInit+0x88>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1b      	ldr	r2, [pc, #108]	; (8002840 <SystemInit+0x88>)
 80027d2:	f043 0301 	orr.w	r3, r3, #1
 80027d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80027d8:	4b19      	ldr	r3, [pc, #100]	; (8002840 <SystemInit+0x88>)
 80027da:	685a      	ldr	r2, [r3, #4]
 80027dc:	4918      	ldr	r1, [pc, #96]	; (8002840 <SystemInit+0x88>)
 80027de:	4b19      	ldr	r3, [pc, #100]	; (8002844 <SystemInit+0x8c>)
 80027e0:	4013      	ands	r3, r2
 80027e2:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80027e4:	4b16      	ldr	r3, [pc, #88]	; (8002840 <SystemInit+0x88>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a15      	ldr	r2, [pc, #84]	; (8002840 <SystemInit+0x88>)
 80027ea:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 80027ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027f2:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80027f4:	4b12      	ldr	r3, [pc, #72]	; (8002840 <SystemInit+0x88>)
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a11      	ldr	r2, [pc, #68]	; (8002840 <SystemInit+0x88>)
 80027fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027fe:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8002800:	4b0f      	ldr	r3, [pc, #60]	; (8002840 <SystemInit+0x88>)
 8002802:	685b      	ldr	r3, [r3, #4]
 8002804:	4a0e      	ldr	r2, [pc, #56]	; (8002840 <SystemInit+0x88>)
 8002806:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800280a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800280c:	4b0c      	ldr	r3, [pc, #48]	; (8002840 <SystemInit+0x88>)
 800280e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002810:	4a0b      	ldr	r2, [pc, #44]	; (8002840 <SystemInit+0x88>)
 8002812:	f023 030f 	bic.w	r3, r3, #15
 8002816:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8002818:	4b09      	ldr	r3, [pc, #36]	; (8002840 <SystemInit+0x88>)
 800281a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800281c:	4908      	ldr	r1, [pc, #32]	; (8002840 <SystemInit+0x88>)
 800281e:	4b0a      	ldr	r3, [pc, #40]	; (8002848 <SystemInit+0x90>)
 8002820:	4013      	ands	r3, r2
 8002822:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8002824:	4b06      	ldr	r3, [pc, #24]	; (8002840 <SystemInit+0x88>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800282a:	4b04      	ldr	r3, [pc, #16]	; (800283c <SystemInit+0x84>)
 800282c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002830:	609a      	str	r2, [r3, #8]
#endif
}
 8002832:	bf00      	nop
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000ed00 	.word	0xe000ed00
 8002840:	40021000 	.word	0x40021000
 8002844:	f87fc00c 	.word	0xf87fc00c
 8002848:	ff00fccc 	.word	0xff00fccc

0800284c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800284c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002884 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002850:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002852:	e003      	b.n	800285c <LoopCopyDataInit>

08002854 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002856:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002858:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800285a:	3104      	adds	r1, #4

0800285c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800285c:	480b      	ldr	r0, [pc, #44]	; (800288c <LoopForever+0xa>)
	ldr	r3, =_edata
 800285e:	4b0c      	ldr	r3, [pc, #48]	; (8002890 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002860:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002862:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002864:	d3f6      	bcc.n	8002854 <CopyDataInit>
	ldr	r2, =_sbss
 8002866:	4a0b      	ldr	r2, [pc, #44]	; (8002894 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002868:	e002      	b.n	8002870 <LoopFillZerobss>

0800286a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800286a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800286c:	f842 3b04 	str.w	r3, [r2], #4

08002870 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002870:	4b09      	ldr	r3, [pc, #36]	; (8002898 <LoopForever+0x16>)
	cmp	r2, r3
 8002872:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002874:	d3f9      	bcc.n	800286a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002876:	f7ff ff9f 	bl	80027b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800287a:	f000 f811 	bl	80028a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800287e:	f7ff fddb 	bl	8002438 <main>

08002882 <LoopForever>:

LoopForever:
    b LoopForever
 8002882:	e7fe      	b.n	8002882 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002884:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002888:	08002978 	.word	0x08002978
	ldr	r0, =_sdata
 800288c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002890:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002894:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002898:	20000078 	.word	0x20000078

0800289c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800289c:	e7fe      	b.n	800289c <ADC1_2_IRQHandler>
	...

080028a0 <__libc_init_array>:
 80028a0:	b570      	push	{r4, r5, r6, lr}
 80028a2:	4e0d      	ldr	r6, [pc, #52]	; (80028d8 <__libc_init_array+0x38>)
 80028a4:	4c0d      	ldr	r4, [pc, #52]	; (80028dc <__libc_init_array+0x3c>)
 80028a6:	1ba4      	subs	r4, r4, r6
 80028a8:	10a4      	asrs	r4, r4, #2
 80028aa:	2500      	movs	r5, #0
 80028ac:	42a5      	cmp	r5, r4
 80028ae:	d109      	bne.n	80028c4 <__libc_init_array+0x24>
 80028b0:	4e0b      	ldr	r6, [pc, #44]	; (80028e0 <__libc_init_array+0x40>)
 80028b2:	4c0c      	ldr	r4, [pc, #48]	; (80028e4 <__libc_init_array+0x44>)
 80028b4:	f000 f820 	bl	80028f8 <_init>
 80028b8:	1ba4      	subs	r4, r4, r6
 80028ba:	10a4      	asrs	r4, r4, #2
 80028bc:	2500      	movs	r5, #0
 80028be:	42a5      	cmp	r5, r4
 80028c0:	d105      	bne.n	80028ce <__libc_init_array+0x2e>
 80028c2:	bd70      	pop	{r4, r5, r6, pc}
 80028c4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028c8:	4798      	blx	r3
 80028ca:	3501      	adds	r5, #1
 80028cc:	e7ee      	b.n	80028ac <__libc_init_array+0xc>
 80028ce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028d2:	4798      	blx	r3
 80028d4:	3501      	adds	r5, #1
 80028d6:	e7f2      	b.n	80028be <__libc_init_array+0x1e>
 80028d8:	08002970 	.word	0x08002970
 80028dc:	08002970 	.word	0x08002970
 80028e0:	08002970 	.word	0x08002970
 80028e4:	08002974 	.word	0x08002974

080028e8 <memset>:
 80028e8:	4402      	add	r2, r0
 80028ea:	4603      	mov	r3, r0
 80028ec:	4293      	cmp	r3, r2
 80028ee:	d100      	bne.n	80028f2 <memset+0xa>
 80028f0:	4770      	bx	lr
 80028f2:	f803 1b01 	strb.w	r1, [r3], #1
 80028f6:	e7f9      	b.n	80028ec <memset+0x4>

080028f8 <_init>:
 80028f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028fa:	bf00      	nop
 80028fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80028fe:	bc08      	pop	{r3}
 8002900:	469e      	mov	lr, r3
 8002902:	4770      	bx	lr

08002904 <_fini>:
 8002904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002906:	bf00      	nop
 8002908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800290a:	bc08      	pop	{r3}
 800290c:	469e      	mov	lr, r3
 800290e:	4770      	bx	lr
