
DAC_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001178  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001300  08001300  00011300  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800133c  0800133c  0001133c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001340  08001340  00011340  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08001344  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          000000a4  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000b0  200000b0  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0000d771  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001e0d  00000000  00000000  0002d7ad  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000304f  00000000  00000000  0002f5ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000608  00000000  00000000  00032610  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000868  00000000  00000000  00032c18  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0000389e  00000000  00000000  00033480  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    000025c3  00000000  00000000  00036d1e  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  000392e1  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00000f9c  00000000  00000000  00039360  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080012e8 	.word	0x080012e8

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	080012e8 	.word	0x080012e8

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f894 	bl	800030c <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 f856 	bl	80002a4 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f82f 	bl	8000280 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f000 ff52 	bl	80010d0 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000258:	b538      	push	{r3, r4, r5, lr}
 800025a:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800025c:	f7ff fff6 	bl	800024c <HAL_GetTick>
  uint32_t wait = Delay;
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000260:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8000262:	bf1c      	itt	ne
 8000264:	4b05      	ldrne	r3, [pc, #20]	; (800027c <HAL_Delay+0x24>)
 8000266:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8000268:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 800026a:	bf18      	it	ne
 800026c:	18e4      	addne	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 800026e:	f7ff ffed 	bl	800024c <HAL_GetTick>
 8000272:	1b40      	subs	r0, r0, r5
 8000274:	4284      	cmp	r4, r0
 8000276:	d8fa      	bhi.n	800026e <HAL_Delay+0x16>
  {
  }
}
 8000278:	bd38      	pop	{r3, r4, r5, pc}
 800027a:	bf00      	nop
 800027c:	20000000 	.word	0x20000000

08000280 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000280:	4a07      	ldr	r2, [pc, #28]	; (80002a0 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000282:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000284:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000288:	041b      	lsls	r3, r3, #16
 800028a:	0c1b      	lsrs	r3, r3, #16
 800028c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000290:	0200      	lsls	r0, r0, #8
 8000292:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000296:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800029a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800029c:	60d3      	str	r3, [r2, #12]
 800029e:	4770      	bx	lr
 80002a0:	e000ed00 	.word	0xe000ed00

080002a4 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80002a4:	4b17      	ldr	r3, [pc, #92]	; (8000304 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80002a6:	b530      	push	{r4, r5, lr}
 80002a8:	68dc      	ldr	r4, [r3, #12]
 80002aa:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002ae:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002b2:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80002b4:	2b04      	cmp	r3, #4
 80002b6:	bf28      	it	cs
 80002b8:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002ba:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002bc:	f04f 0501 	mov.w	r5, #1
 80002c0:	fa05 f303 	lsl.w	r3, r5, r3
 80002c4:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002c8:	bf8c      	ite	hi
 80002ca:	3c03      	subhi	r4, #3
 80002cc:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002ce:	4019      	ands	r1, r3
 80002d0:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002d2:	fa05 f404 	lsl.w	r4, r5, r4
 80002d6:	3c01      	subs	r4, #1
 80002d8:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002da:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002dc:	ea42 0201 	orr.w	r2, r2, r1
 80002e0:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002e4:	bfaf      	iteee	ge
 80002e6:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ea:	f000 000f 	andlt.w	r0, r0, #15
 80002ee:	4b06      	ldrlt	r3, [pc, #24]	; (8000308 <HAL_NVIC_SetPriority+0x64>)
 80002f0:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002f2:	bfa5      	ittet	ge
 80002f4:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002f8:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fa:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002fc:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000300:	bd30      	pop	{r4, r5, pc}
 8000302:	bf00      	nop
 8000304:	e000ed00 	.word	0xe000ed00
 8000308:	e000ed14 	.word	0xe000ed14

0800030c <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800030c:	3801      	subs	r0, #1
 800030e:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000312:	d20a      	bcs.n	800032a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000314:	4b06      	ldr	r3, [pc, #24]	; (8000330 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000316:	4a07      	ldr	r2, [pc, #28]	; (8000334 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000318:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800031a:	21f0      	movs	r1, #240	; 0xf0
 800031c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000320:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000322:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000324:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000326:	601a      	str	r2, [r3, #0]
 8000328:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800032a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800032c:	4770      	bx	lr
 800032e:	bf00      	nop
 8000330:	e000e010 	.word	0xe000e010
 8000334:	e000ed00 	.word	0xe000ed00

08000338 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000338:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 800033a:	4604      	mov	r4, r0
 800033c:	b168      	cbz	r0, 800035a <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 800033e:	7903      	ldrb	r3, [r0, #4]
 8000340:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000344:	b913      	cbnz	r3, 800034c <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000346:	7142      	strb	r2, [r0, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000348:	f000 feda 	bl	8001100 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800034c:	2302      	movs	r3, #2
 800034e:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000350:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000352:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000354:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8000356:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8000358:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 800035a:	2001      	movs	r0, #1
}
 800035c:	bd10      	pop	{r4, pc}

0800035e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 800035e:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0U;
 8000360:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8000362:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 8000364:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t) (hdac->Instance);
 8000366:	9001      	str	r0, [sp, #4]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8000368:	b941      	cbnz	r1, 800037c <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 800036a:	9901      	ldr	r1, [sp, #4]
 800036c:	3108      	adds	r1, #8
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800036e:	440a      	add	r2, r1
 8000370:	9201      	str	r2, [sp, #4]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000372:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8000374:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8000376:	6013      	str	r3, [r2, #0]
}
 8000378:	b002      	add	sp, #8
 800037a:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800037c:	9901      	ldr	r1, [sp, #4]
 800037e:	3114      	adds	r1, #20
 8000380:	e7f5      	b.n	800036e <HAL_DAC_SetValue+0x10>

08000382 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000382:	7943      	ldrb	r3, [r0, #5]
 8000384:	2b01      	cmp	r3, #1
{
 8000386:	b510      	push	{r4, lr}
 8000388:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 800038c:	d015      	beq.n	80003ba <HAL_DAC_Start+0x38>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800038e:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000390:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 8000392:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 8000394:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 8000396:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8000398:	408a      	lsls	r2, r1
 800039a:	4322      	orrs	r2, r4
 800039c:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 800039e:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 80003a0:	b969      	cbnz	r1, 80003be <HAL_DAC_Start+0x3c>
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 80003a2:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 80003a6:	2a3c      	cmp	r2, #60	; 0x3c
 80003a8:	d103      	bne.n	80003b2 <HAL_DAC_Start+0x30>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80003aa:	685a      	ldr	r2, [r3, #4]
 80003ac:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80003b0:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80003b2:	2301      	movs	r3, #1
 80003b4:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80003b6:	2300      	movs	r3, #0
 80003b8:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 80003ba:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 80003bc:	bd10      	pop	{r4, pc}
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 80003be:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 80003c2:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 80003c6:	d1f4      	bne.n	80003b2 <HAL_DAC_Start+0x30>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80003c8:	685a      	ldr	r2, [r3, #4]
 80003ca:	f042 0202 	orr.w	r2, r2, #2
 80003ce:	e7ef      	b.n	80003b0 <HAL_DAC_Start+0x2e>

080003d0 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 80003d0:	7943      	ldrb	r3, [r0, #5]
 80003d2:	2b01      	cmp	r3, #1
{
 80003d4:	b570      	push	{r4, r5, r6, lr}
 80003d6:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 80003da:	d01b      	beq.n	8000414 <HAL_DAC_ConfigChannel+0x44>
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 80003dc:	6805      	ldr	r5, [r0, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80003de:	7103      	strb	r3, [r0, #4]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 80003e0:	4b11      	ldr	r3, [pc, #68]	; (8000428 <HAL_DAC_ConfigChannel+0x58>)
  tmpreg1 = hdac->Instance->CR;
 80003e2:	682c      	ldr	r4, [r5, #0]
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 80003e4:	429d      	cmp	r5, r3
 80003e6:	680b      	ldr	r3, [r1, #0]
 80003e8:	d116      	bne.n	8000418 <HAL_DAC_ConfigChannel+0x48>
 80003ea:	b9aa      	cbnz	r2, 8000418 <HAL_DAC_ConfigChannel+0x48>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80003ec:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 80003f0:	6849      	ldr	r1, [r1, #4]
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 80003f2:	f024 040e 	bic.w	r4, r4, #14
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 80003f6:	430b      	orrs	r3, r1
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 80003f8:	4093      	lsls	r3, r2
 80003fa:	4323      	orrs	r3, r4
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80003fc:	602b      	str	r3, [r5, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 80003fe:	682b      	ldr	r3, [r5, #0]
 8000400:	21c0      	movs	r1, #192	; 0xc0
 8000402:	fa01 f202 	lsl.w	r2, r1, r2
 8000406:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800040a:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800040c:	602a      	str	r2, [r5, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800040e:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000410:	2300      	movs	r3, #0
 8000412:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8000414:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 8000416:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8000418:	f640 76fe 	movw	r6, #4094	; 0xffe
 800041c:	4096      	lsls	r6, r2
 800041e:	ea24 0406 	bic.w	r4, r4, r6
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8000422:	6889      	ldr	r1, [r1, #8]
 8000424:	e7e7      	b.n	80003f6 <HAL_DAC_ConfigChannel+0x26>
 8000426:	bf00      	nop
 8000428:	40007400 	.word	0x40007400

0800042c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800042c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000430:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000432:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000434:	f8df 8164 	ldr.w	r8, [pc, #356]	; 800059c <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000438:	4a56      	ldr	r2, [pc, #344]	; (8000594 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800043a:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800043c:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000440:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000442:	9c01      	ldr	r4, [sp, #4]
 8000444:	40dc      	lsrs	r4, r3
 8000446:	d102      	bne.n	800044e <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000448:	b005      	add	sp, #20
 800044a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800044e:	2401      	movs	r4, #1
 8000450:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000454:	9c01      	ldr	r4, [sp, #4]
 8000456:	ea14 050a 	ands.w	r5, r4, sl
 800045a:	f000 8093 	beq.w	8000584 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800045e:	684c      	ldr	r4, [r1, #4]
 8000460:	f024 0b10 	bic.w	fp, r4, #16
 8000464:	f1bb 0f02 	cmp.w	fp, #2
 8000468:	d111      	bne.n	800048e <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800046a:	08df      	lsrs	r7, r3, #3
 800046c:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000470:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000474:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000476:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800047a:	fa09 fc0e 	lsl.w	ip, r9, lr
 800047e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000482:	690e      	ldr	r6, [r1, #16]
 8000484:	fa06 f60e 	lsl.w	r6, r6, lr
 8000488:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 800048c:	623e      	str	r6, [r7, #32]
 800048e:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000492:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000494:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000496:	fa07 f70c 	lsl.w	r7, r7, ip
 800049a:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800049c:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004a0:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004a2:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004a6:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004aa:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004ae:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80004b2:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004b4:	d811      	bhi.n	80004da <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80004b6:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80004b8:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80004bc:	68ce      	ldr	r6, [r1, #12]
 80004be:	fa06 fe0c 	lsl.w	lr, r6, ip
 80004c2:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80004c6:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80004c8:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80004ca:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80004ce:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80004d2:	409e      	lsls	r6, r3
 80004d4:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80004d8:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80004da:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80004dc:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80004de:	688e      	ldr	r6, [r1, #8]
 80004e0:	fa06 f60c 	lsl.w	r6, r6, ip
 80004e4:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004e6:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80004e8:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80004ea:	d54b      	bpl.n	8000584 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ec:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80004f0:	f046 0601 	orr.w	r6, r6, #1
 80004f4:	f8c8 6018 	str.w	r6, [r8, #24]
 80004f8:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80004fc:	f023 0703 	bic.w	r7, r3, #3
 8000500:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000504:	f006 0601 	and.w	r6, r6, #1
 8000508:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 800050c:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800050e:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000512:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000514:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000516:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800051a:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800051e:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000522:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000526:	d02f      	beq.n	8000588 <HAL_GPIO_Init+0x15c>
 8000528:	4e1b      	ldr	r6, [pc, #108]	; (8000598 <HAL_GPIO_Init+0x16c>)
 800052a:	42b0      	cmp	r0, r6
 800052c:	d02e      	beq.n	800058c <HAL_GPIO_Init+0x160>
 800052e:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000532:	42b0      	cmp	r0, r6
 8000534:	d02c      	beq.n	8000590 <HAL_GPIO_Init+0x164>
 8000536:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800053a:	42b0      	cmp	r0, r6
 800053c:	bf14      	ite	ne
 800053e:	2605      	movne	r6, #5
 8000540:	2603      	moveq	r6, #3
 8000542:	fa06 f60e 	lsl.w	r6, r6, lr
 8000546:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 800054a:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 800054c:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800054e:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000550:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000554:	bf0c      	ite	eq
 8000556:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000558:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 800055a:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 800055c:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800055e:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000562:	bf0c      	ite	eq
 8000564:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000566:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000568:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 800056a:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800056c:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000570:	bf0c      	ite	eq
 8000572:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000574:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000576:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000578:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800057a:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 800057c:	bf54      	ite	pl
 800057e:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000580:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000582:	60d6      	str	r6, [r2, #12]
    position++;
 8000584:	3301      	adds	r3, #1
 8000586:	e75c      	b.n	8000442 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000588:	2600      	movs	r6, #0
 800058a:	e7da      	b.n	8000542 <HAL_GPIO_Init+0x116>
 800058c:	2601      	movs	r6, #1
 800058e:	e7d8      	b.n	8000542 <HAL_GPIO_Init+0x116>
 8000590:	2602      	movs	r6, #2
 8000592:	e7d6      	b.n	8000542 <HAL_GPIO_Init+0x116>
 8000594:	40010400 	.word	0x40010400
 8000598:	48000400 	.word	0x48000400
 800059c:	40021000 	.word	0x40021000

080005a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005a0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80005a4:	4605      	mov	r5, r0
 80005a6:	b918      	cbnz	r0, 80005b0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80005a8:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80005aa:	b002      	add	sp, #8
 80005ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80005b0:	6803      	ldr	r3, [r0, #0]
 80005b2:	07da      	lsls	r2, r3, #31
 80005b4:	d411      	bmi.n	80005da <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80005b6:	682b      	ldr	r3, [r5, #0]
 80005b8:	079b      	lsls	r3, r3, #30
 80005ba:	f100 8085 	bmi.w	80006c8 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005be:	682b      	ldr	r3, [r5, #0]
 80005c0:	071c      	lsls	r4, r3, #28
 80005c2:	f100 80f6 	bmi.w	80007b2 <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005c6:	682b      	ldr	r3, [r5, #0]
 80005c8:	0758      	lsls	r0, r3, #29
 80005ca:	f100 813f 	bmi.w	800084c <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005ce:	69ea      	ldr	r2, [r5, #28]
 80005d0:	2a00      	cmp	r2, #0
 80005d2:	f040 81d6 	bne.w	8000982 <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 80005d6:	2000      	movs	r0, #0
 80005d8:	e7e7      	b.n	80005aa <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005da:	4cba      	ldr	r4, [pc, #744]	; (80008c4 <HAL_RCC_OscConfig+0x324>)
 80005dc:	6863      	ldr	r3, [r4, #4]
 80005de:	f003 030c 	and.w	r3, r3, #12
 80005e2:	2b04      	cmp	r3, #4
 80005e4:	d007      	beq.n	80005f6 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005e6:	6863      	ldr	r3, [r4, #4]
 80005e8:	f003 030c 	and.w	r3, r3, #12
 80005ec:	2b08      	cmp	r3, #8
 80005ee:	d116      	bne.n	800061e <HAL_RCC_OscConfig+0x7e>
 80005f0:	6863      	ldr	r3, [r4, #4]
 80005f2:	03df      	lsls	r7, r3, #15
 80005f4:	d513      	bpl.n	800061e <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005f6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005fa:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005fe:	6821      	ldr	r1, [r4, #0]
 8000600:	fa93 f3a3 	rbit	r3, r3
 8000604:	fab3 f383 	clz	r3, r3
 8000608:	f003 031f 	and.w	r3, r3, #31
 800060c:	2201      	movs	r2, #1
 800060e:	fa02 f303 	lsl.w	r3, r2, r3
 8000612:	420b      	tst	r3, r1
 8000614:	d0cf      	beq.n	80005b6 <HAL_RCC_OscConfig+0x16>
 8000616:	686b      	ldr	r3, [r5, #4]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d1cc      	bne.n	80005b6 <HAL_RCC_OscConfig+0x16>
 800061c:	e7c4      	b.n	80005a8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800061e:	686a      	ldr	r2, [r5, #4]
 8000620:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000624:	d125      	bne.n	8000672 <HAL_RCC_OscConfig+0xd2>
 8000626:	6823      	ldr	r3, [r4, #0]
 8000628:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800062c:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800062e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000630:	68a9      	ldr	r1, [r5, #8]
 8000632:	f023 030f 	bic.w	r3, r3, #15
 8000636:	430b      	orrs	r3, r1
 8000638:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800063a:	b352      	cbz	r2, 8000692 <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 800063c:	f7ff fe06 	bl	800024c <HAL_GetTick>
 8000640:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000644:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000646:	2701      	movs	r7, #1
 8000648:	fa96 f3a6 	rbit	r3, r6
 800064c:	6822      	ldr	r2, [r4, #0]
 800064e:	fa96 f3a6 	rbit	r3, r6
 8000652:	fab3 f383 	clz	r3, r3
 8000656:	f003 031f 	and.w	r3, r3, #31
 800065a:	fa07 f303 	lsl.w	r3, r7, r3
 800065e:	4213      	tst	r3, r2
 8000660:	d1a9      	bne.n	80005b6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000662:	f7ff fdf3 	bl	800024c <HAL_GetTick>
 8000666:	eba0 0008 	sub.w	r0, r0, r8
 800066a:	2864      	cmp	r0, #100	; 0x64
 800066c:	d9ec      	bls.n	8000648 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 800066e:	2003      	movs	r0, #3
 8000670:	e79b      	b.n	80005aa <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000672:	6823      	ldr	r3, [r4, #0]
 8000674:	b932      	cbnz	r2, 8000684 <HAL_RCC_OscConfig+0xe4>
 8000676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800067a:	6023      	str	r3, [r4, #0]
 800067c:	6823      	ldr	r3, [r4, #0]
 800067e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000682:	e7d3      	b.n	800062c <HAL_RCC_OscConfig+0x8c>
 8000684:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000688:	d1f5      	bne.n	8000676 <HAL_RCC_OscConfig+0xd6>
 800068a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800068e:	6023      	str	r3, [r4, #0]
 8000690:	e7c9      	b.n	8000626 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000692:	f7ff fddb 	bl	800024c <HAL_GetTick>
 8000696:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800069a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800069c:	2701      	movs	r7, #1
 800069e:	fa96 f3a6 	rbit	r3, r6
 80006a2:	6822      	ldr	r2, [r4, #0]
 80006a4:	fa96 f3a6 	rbit	r3, r6
 80006a8:	fab3 f383 	clz	r3, r3
 80006ac:	f003 031f 	and.w	r3, r3, #31
 80006b0:	fa07 f303 	lsl.w	r3, r7, r3
 80006b4:	4213      	tst	r3, r2
 80006b6:	f43f af7e 	beq.w	80005b6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006ba:	f7ff fdc7 	bl	800024c <HAL_GetTick>
 80006be:	eba0 0008 	sub.w	r0, r0, r8
 80006c2:	2864      	cmp	r0, #100	; 0x64
 80006c4:	d9eb      	bls.n	800069e <HAL_RCC_OscConfig+0xfe>
 80006c6:	e7d2      	b.n	800066e <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006c8:	4c7e      	ldr	r4, [pc, #504]	; (80008c4 <HAL_RCC_OscConfig+0x324>)
 80006ca:	6863      	ldr	r3, [r4, #4]
 80006cc:	f013 0f0c 	tst.w	r3, #12
 80006d0:	d007      	beq.n	80006e2 <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006d2:	6863      	ldr	r3, [r4, #4]
 80006d4:	f003 030c 	and.w	r3, r3, #12
 80006d8:	2b08      	cmp	r3, #8
 80006da:	d122      	bne.n	8000722 <HAL_RCC_OscConfig+0x182>
 80006dc:	6863      	ldr	r3, [r4, #4]
 80006de:	03de      	lsls	r6, r3, #15
 80006e0:	d41f      	bmi.n	8000722 <HAL_RCC_OscConfig+0x182>
 80006e2:	2302      	movs	r3, #2
 80006e4:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006e8:	6821      	ldr	r1, [r4, #0]
 80006ea:	fa93 f3a3 	rbit	r3, r3
 80006ee:	fab3 f383 	clz	r3, r3
 80006f2:	f003 031f 	and.w	r3, r3, #31
 80006f6:	2201      	movs	r2, #1
 80006f8:	fa02 f303 	lsl.w	r3, r2, r3
 80006fc:	420b      	tst	r3, r1
 80006fe:	d003      	beq.n	8000708 <HAL_RCC_OscConfig+0x168>
 8000700:	692b      	ldr	r3, [r5, #16]
 8000702:	4293      	cmp	r3, r2
 8000704:	f47f af50 	bne.w	80005a8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000708:	6821      	ldr	r1, [r4, #0]
 800070a:	23f8      	movs	r3, #248	; 0xf8
 800070c:	fa93 f3a3 	rbit	r3, r3
 8000710:	fab3 f283 	clz	r2, r3
 8000714:	696b      	ldr	r3, [r5, #20]
 8000716:	4093      	lsls	r3, r2
 8000718:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800071c:	4313      	orrs	r3, r2
 800071e:	6023      	str	r3, [r4, #0]
 8000720:	e74d      	b.n	80005be <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000722:	692a      	ldr	r2, [r5, #16]
 8000724:	2601      	movs	r6, #1
 8000726:	b30a      	cbz	r2, 800076c <HAL_RCC_OscConfig+0x1cc>
 8000728:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800072c:	fab3 f383 	clz	r3, r3
 8000730:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000734:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	2702      	movs	r7, #2
 800073c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800073e:	f7ff fd85 	bl	800024c <HAL_GetTick>
 8000742:	4680      	mov	r8, r0
 8000744:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000748:	6822      	ldr	r2, [r4, #0]
 800074a:	fa97 f3a7 	rbit	r3, r7
 800074e:	fab3 f383 	clz	r3, r3
 8000752:	f003 031f 	and.w	r3, r3, #31
 8000756:	fa06 f303 	lsl.w	r3, r6, r3
 800075a:	4213      	tst	r3, r2
 800075c:	d1d4      	bne.n	8000708 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800075e:	f7ff fd75 	bl	800024c <HAL_GetTick>
 8000762:	eba0 0008 	sub.w	r0, r0, r8
 8000766:	2802      	cmp	r0, #2
 8000768:	d9ec      	bls.n	8000744 <HAL_RCC_OscConfig+0x1a4>
 800076a:	e780      	b.n	800066e <HAL_RCC_OscConfig+0xce>
 800076c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000770:	fab3 f383 	clz	r3, r3
 8000774:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000778:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800077c:	009b      	lsls	r3, r3, #2
 800077e:	2702      	movs	r7, #2
 8000780:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000782:	f7ff fd63 	bl	800024c <HAL_GetTick>
 8000786:	4680      	mov	r8, r0
 8000788:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800078c:	6822      	ldr	r2, [r4, #0]
 800078e:	fa97 f3a7 	rbit	r3, r7
 8000792:	fab3 f383 	clz	r3, r3
 8000796:	f003 031f 	and.w	r3, r3, #31
 800079a:	fa06 f303 	lsl.w	r3, r6, r3
 800079e:	4213      	tst	r3, r2
 80007a0:	f43f af0d 	beq.w	80005be <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007a4:	f7ff fd52 	bl	800024c <HAL_GetTick>
 80007a8:	eba0 0008 	sub.w	r0, r0, r8
 80007ac:	2802      	cmp	r0, #2
 80007ae:	d9eb      	bls.n	8000788 <HAL_RCC_OscConfig+0x1e8>
 80007b0:	e75d      	b.n	800066e <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80007b2:	69aa      	ldr	r2, [r5, #24]
 80007b4:	4e43      	ldr	r6, [pc, #268]	; (80008c4 <HAL_RCC_OscConfig+0x324>)
 80007b6:	4944      	ldr	r1, [pc, #272]	; (80008c8 <HAL_RCC_OscConfig+0x328>)
 80007b8:	2401      	movs	r4, #1
 80007ba:	b31a      	cbz	r2, 8000804 <HAL_RCC_OscConfig+0x264>
 80007bc:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80007c0:	fab3 f383 	clz	r3, r3
 80007c4:	440b      	add	r3, r1
 80007c6:	009b      	lsls	r3, r3, #2
 80007c8:	2702      	movs	r7, #2
 80007ca:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80007cc:	f7ff fd3e 	bl	800024c <HAL_GetTick>
 80007d0:	4680      	mov	r8, r0
 80007d2:	fa97 f3a7 	rbit	r3, r7
 80007d6:	fa97 f3a7 	rbit	r3, r7
 80007da:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80007de:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80007e0:	fa97 f3a7 	rbit	r3, r7
 80007e4:	fab3 f383 	clz	r3, r3
 80007e8:	f003 031f 	and.w	r3, r3, #31
 80007ec:	fa04 f303 	lsl.w	r3, r4, r3
 80007f0:	4213      	tst	r3, r2
 80007f2:	f47f aee8 	bne.w	80005c6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80007f6:	f7ff fd29 	bl	800024c <HAL_GetTick>
 80007fa:	eba0 0008 	sub.w	r0, r0, r8
 80007fe:	2802      	cmp	r0, #2
 8000800:	d9e7      	bls.n	80007d2 <HAL_RCC_OscConfig+0x232>
 8000802:	e734      	b.n	800066e <HAL_RCC_OscConfig+0xce>
 8000804:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000808:	fab3 f383 	clz	r3, r3
 800080c:	440b      	add	r3, r1
 800080e:	009b      	lsls	r3, r3, #2
 8000810:	2702      	movs	r7, #2
 8000812:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000814:	f7ff fd1a 	bl	800024c <HAL_GetTick>
 8000818:	4680      	mov	r8, r0
 800081a:	fa97 f3a7 	rbit	r3, r7
 800081e:	fa97 f3a7 	rbit	r3, r7
 8000822:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000826:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000828:	fa97 f3a7 	rbit	r3, r7
 800082c:	fab3 f383 	clz	r3, r3
 8000830:	f003 031f 	and.w	r3, r3, #31
 8000834:	fa04 f303 	lsl.w	r3, r4, r3
 8000838:	4213      	tst	r3, r2
 800083a:	f43f aec4 	beq.w	80005c6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800083e:	f7ff fd05 	bl	800024c <HAL_GetTick>
 8000842:	eba0 0008 	sub.w	r0, r0, r8
 8000846:	2802      	cmp	r0, #2
 8000848:	d9e7      	bls.n	800081a <HAL_RCC_OscConfig+0x27a>
 800084a:	e710      	b.n	800066e <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800084c:	4c1d      	ldr	r4, [pc, #116]	; (80008c4 <HAL_RCC_OscConfig+0x324>)
 800084e:	69e3      	ldr	r3, [r4, #28]
 8000850:	00d9      	lsls	r1, r3, #3
 8000852:	d434      	bmi.n	80008be <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000854:	69e3      	ldr	r3, [r4, #28]
 8000856:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800085a:	61e3      	str	r3, [r4, #28]
 800085c:	69e3      	ldr	r3, [r4, #28]
 800085e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000862:	9301      	str	r3, [sp, #4]
 8000864:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000866:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000868:	4f18      	ldr	r7, [pc, #96]	; (80008cc <HAL_RCC_OscConfig+0x32c>)
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	05da      	lsls	r2, r3, #23
 800086e:	d52f      	bpl.n	80008d0 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000870:	68eb      	ldr	r3, [r5, #12]
 8000872:	2b01      	cmp	r3, #1
 8000874:	d13d      	bne.n	80008f2 <HAL_RCC_OscConfig+0x352>
 8000876:	6a23      	ldr	r3, [r4, #32]
 8000878:	f043 0301 	orr.w	r3, r3, #1
 800087c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800087e:	f7ff fce5 	bl	800024c <HAL_GetTick>
 8000882:	2702      	movs	r7, #2
 8000884:	4682      	mov	sl, r0
 8000886:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000888:	f04f 0801 	mov.w	r8, #1
 800088c:	fa97 f3a7 	rbit	r3, r7
 8000890:	fa97 f3a7 	rbit	r3, r7
 8000894:	2b00      	cmp	r3, #0
 8000896:	d06c      	beq.n	8000972 <HAL_RCC_OscConfig+0x3d2>
 8000898:	6a22      	ldr	r2, [r4, #32]
 800089a:	fa99 f3a9 	rbit	r3, r9
 800089e:	fab3 f383 	clz	r3, r3
 80008a2:	f003 031f 	and.w	r3, r3, #31
 80008a6:	fa08 f303 	lsl.w	r3, r8, r3
 80008aa:	4213      	tst	r3, r2
 80008ac:	d058      	beq.n	8000960 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 80008ae:	2e00      	cmp	r6, #0
 80008b0:	f43f ae8d 	beq.w	80005ce <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80008b4:	69e3      	ldr	r3, [r4, #28]
 80008b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80008ba:	61e3      	str	r3, [r4, #28]
 80008bc:	e687      	b.n	80005ce <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80008be:	2600      	movs	r6, #0
 80008c0:	e7d2      	b.n	8000868 <HAL_RCC_OscConfig+0x2c8>
 80008c2:	bf00      	nop
 80008c4:	40021000 	.word	0x40021000
 80008c8:	10908120 	.word	0x10908120
 80008cc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80008d0:	683b      	ldr	r3, [r7, #0]
 80008d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80008d8:	f7ff fcb8 	bl	800024c <HAL_GetTick>
 80008dc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	05db      	lsls	r3, r3, #23
 80008e2:	d4c5      	bmi.n	8000870 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80008e4:	f7ff fcb2 	bl	800024c <HAL_GetTick>
 80008e8:	eba0 0008 	sub.w	r0, r0, r8
 80008ec:	2864      	cmp	r0, #100	; 0x64
 80008ee:	d9f6      	bls.n	80008de <HAL_RCC_OscConfig+0x33e>
 80008f0:	e6bd      	b.n	800066e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008f2:	bb3b      	cbnz	r3, 8000944 <HAL_RCC_OscConfig+0x3a4>
 80008f4:	6a23      	ldr	r3, [r4, #32]
 80008f6:	f023 0301 	bic.w	r3, r3, #1
 80008fa:	6223      	str	r3, [r4, #32]
 80008fc:	6a23      	ldr	r3, [r4, #32]
 80008fe:	f023 0304 	bic.w	r3, r3, #4
 8000902:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000904:	f7ff fca2 	bl	800024c <HAL_GetTick>
 8000908:	2702      	movs	r7, #2
 800090a:	4682      	mov	sl, r0
 800090c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800090e:	f04f 0801 	mov.w	r8, #1
 8000912:	fa97 f3a7 	rbit	r3, r7
 8000916:	fa97 f3a7 	rbit	r3, r7
 800091a:	b373      	cbz	r3, 800097a <HAL_RCC_OscConfig+0x3da>
 800091c:	6a22      	ldr	r2, [r4, #32]
 800091e:	fa99 f3a9 	rbit	r3, r9
 8000922:	fab3 f383 	clz	r3, r3
 8000926:	f003 031f 	and.w	r3, r3, #31
 800092a:	fa08 f303 	lsl.w	r3, r8, r3
 800092e:	4213      	tst	r3, r2
 8000930:	d0bd      	beq.n	80008ae <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000932:	f7ff fc8b 	bl	800024c <HAL_GetTick>
 8000936:	f241 3388 	movw	r3, #5000	; 0x1388
 800093a:	eba0 000a 	sub.w	r0, r0, sl
 800093e:	4298      	cmp	r0, r3
 8000940:	d9e7      	bls.n	8000912 <HAL_RCC_OscConfig+0x372>
 8000942:	e694      	b.n	800066e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000944:	2b05      	cmp	r3, #5
 8000946:	6a23      	ldr	r3, [r4, #32]
 8000948:	d103      	bne.n	8000952 <HAL_RCC_OscConfig+0x3b2>
 800094a:	f043 0304 	orr.w	r3, r3, #4
 800094e:	6223      	str	r3, [r4, #32]
 8000950:	e791      	b.n	8000876 <HAL_RCC_OscConfig+0x2d6>
 8000952:	f023 0301 	bic.w	r3, r3, #1
 8000956:	6223      	str	r3, [r4, #32]
 8000958:	6a23      	ldr	r3, [r4, #32]
 800095a:	f023 0304 	bic.w	r3, r3, #4
 800095e:	e78d      	b.n	800087c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000960:	f7ff fc74 	bl	800024c <HAL_GetTick>
 8000964:	f241 3388 	movw	r3, #5000	; 0x1388
 8000968:	eba0 000a 	sub.w	r0, r0, sl
 800096c:	4298      	cmp	r0, r3
 800096e:	d98d      	bls.n	800088c <HAL_RCC_OscConfig+0x2ec>
 8000970:	e67d      	b.n	800066e <HAL_RCC_OscConfig+0xce>
 8000972:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000976:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000978:	e78f      	b.n	800089a <HAL_RCC_OscConfig+0x2fa>
 800097a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800097e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000980:	e7cd      	b.n	800091e <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000982:	4c41      	ldr	r4, [pc, #260]	; (8000a88 <HAL_RCC_OscConfig+0x4e8>)
 8000984:	6863      	ldr	r3, [r4, #4]
 8000986:	f003 030c 	and.w	r3, r3, #12
 800098a:	2b08      	cmp	r3, #8
 800098c:	f43f ae0c 	beq.w	80005a8 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000990:	2a02      	cmp	r2, #2
 8000992:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000996:	d152      	bne.n	8000a3e <HAL_RCC_OscConfig+0x49e>
 8000998:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 800099c:	fab3 f383 	clz	r3, r3
 80009a0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009a4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009a8:	009b      	lsls	r3, r3, #2
 80009aa:	2200      	movs	r2, #0
 80009ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80009ae:	f7ff fc4d 	bl	800024c <HAL_GetTick>
 80009b2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80009b6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80009b8:	2601      	movs	r6, #1
 80009ba:	fa97 f3a7 	rbit	r3, r7
 80009be:	6822      	ldr	r2, [r4, #0]
 80009c0:	fa97 f3a7 	rbit	r3, r7
 80009c4:	fab3 f383 	clz	r3, r3
 80009c8:	f003 031f 	and.w	r3, r3, #31
 80009cc:	fa06 f303 	lsl.w	r3, r6, r3
 80009d0:	4213      	tst	r3, r2
 80009d2:	d12d      	bne.n	8000a30 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80009d4:	6862      	ldr	r2, [r4, #4]
 80009d6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80009d8:	6a29      	ldr	r1, [r5, #32]
 80009da:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80009de:	430b      	orrs	r3, r1
 80009e0:	4313      	orrs	r3, r2
 80009e2:	6063      	str	r3, [r4, #4]
 80009e4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009e8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80009ec:	fab3 f383 	clz	r3, r3
 80009f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80009f8:	009b      	lsls	r3, r3, #2
 80009fa:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 80009fe:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000a00:	f7ff fc24 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a04:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000a06:	4607      	mov	r7, r0
 8000a08:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a0c:	6822      	ldr	r2, [r4, #0]
 8000a0e:	fa95 f3a5 	rbit	r3, r5
 8000a12:	fab3 f383 	clz	r3, r3
 8000a16:	f003 031f 	and.w	r3, r3, #31
 8000a1a:	fa06 f303 	lsl.w	r3, r6, r3
 8000a1e:	4213      	tst	r3, r2
 8000a20:	f47f add9 	bne.w	80005d6 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a24:	f7ff fc12 	bl	800024c <HAL_GetTick>
 8000a28:	1bc0      	subs	r0, r0, r7
 8000a2a:	2802      	cmp	r0, #2
 8000a2c:	d9ec      	bls.n	8000a08 <HAL_RCC_OscConfig+0x468>
 8000a2e:	e61e      	b.n	800066e <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a30:	f7ff fc0c 	bl	800024c <HAL_GetTick>
 8000a34:	eba0 0008 	sub.w	r0, r0, r8
 8000a38:	2802      	cmp	r0, #2
 8000a3a:	d9be      	bls.n	80009ba <HAL_RCC_OscConfig+0x41a>
 8000a3c:	e617      	b.n	800066e <HAL_RCC_OscConfig+0xce>
 8000a3e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a42:	fab3 f383 	clz	r3, r3
 8000a46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a4e:	009b      	lsls	r3, r3, #2
 8000a50:	2200      	movs	r2, #0
 8000a52:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a54:	f7ff fbfa 	bl	800024c <HAL_GetTick>
 8000a58:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a5c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a5e:	2601      	movs	r6, #1
 8000a60:	fa95 f3a5 	rbit	r3, r5
 8000a64:	6822      	ldr	r2, [r4, #0]
 8000a66:	fa95 f3a5 	rbit	r3, r5
 8000a6a:	fab3 f383 	clz	r3, r3
 8000a6e:	f003 031f 	and.w	r3, r3, #31
 8000a72:	fa06 f303 	lsl.w	r3, r6, r3
 8000a76:	4213      	tst	r3, r2
 8000a78:	f43f adad 	beq.w	80005d6 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a7c:	f7ff fbe6 	bl	800024c <HAL_GetTick>
 8000a80:	1bc0      	subs	r0, r0, r7
 8000a82:	2802      	cmp	r0, #2
 8000a84:	d9ec      	bls.n	8000a60 <HAL_RCC_OscConfig+0x4c0>
 8000a86:	e5f2      	b.n	800066e <HAL_RCC_OscConfig+0xce>
 8000a88:	40021000 	.word	0x40021000

08000a8c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000a8c:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000a8e:	4c13      	ldr	r4, [pc, #76]	; (8000adc <HAL_RCC_GetSysClockFreq+0x50>)
 8000a90:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000a92:	f001 030c 	and.w	r3, r1, #12
 8000a96:	2b08      	cmp	r3, #8
 8000a98:	d11e      	bne.n	8000ad8 <HAL_RCC_GetSysClockFreq+0x4c>
 8000a9a:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000a9e:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000aa2:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8000aa6:	fab3 f383 	clz	r3, r3
 8000aaa:	fa22 f303 	lsr.w	r3, r2, r3
 8000aae:	4a0c      	ldr	r2, [pc, #48]	; (8000ae0 <HAL_RCC_GetSysClockFreq+0x54>)
 8000ab0:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000ab2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000ab4:	220f      	movs	r2, #15
 8000ab6:	fa92 f2a2 	rbit	r2, r2
 8000aba:	fab2 f282 	clz	r2, r2
 8000abe:	f003 030f 	and.w	r3, r3, #15
 8000ac2:	40d3      	lsrs	r3, r2
 8000ac4:	4a07      	ldr	r2, [pc, #28]	; (8000ae4 <HAL_RCC_GetSysClockFreq+0x58>)
 8000ac6:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000ac8:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000aca:	bf4a      	itet	mi
 8000acc:	4b06      	ldrmi	r3, [pc, #24]	; (8000ae8 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000ace:	4b07      	ldrpl	r3, [pc, #28]	; (8000aec <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000ad0:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000ad4:	4358      	muls	r0, r3
 8000ad6:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000ad8:	4803      	ldr	r0, [pc, #12]	; (8000ae8 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000ada:	bd10      	pop	{r4, pc}
 8000adc:	40021000 	.word	0x40021000
 8000ae0:	08001300 	.word	0x08001300
 8000ae4:	08001310 	.word	0x08001310
 8000ae8:	007a1200 	.word	0x007a1200
 8000aec:	003d0900 	.word	0x003d0900

08000af0 <HAL_RCC_ClockConfig>:
{
 8000af0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000af4:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000af6:	4604      	mov	r4, r0
 8000af8:	b910      	cbnz	r0, 8000b00 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000afa:	2001      	movs	r0, #1
 8000afc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b00:	4a4c      	ldr	r2, [pc, #304]	; (8000c34 <HAL_RCC_ClockConfig+0x144>)
 8000b02:	6813      	ldr	r3, [r2, #0]
 8000b04:	f003 0307 	and.w	r3, r3, #7
 8000b08:	428b      	cmp	r3, r1
 8000b0a:	d32e      	bcc.n	8000b6a <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b0c:	6822      	ldr	r2, [r4, #0]
 8000b0e:	0791      	lsls	r1, r2, #30
 8000b10:	d436      	bmi.n	8000b80 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b12:	07d2      	lsls	r2, r2, #31
 8000b14:	d43c      	bmi.n	8000b90 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b16:	4a47      	ldr	r2, [pc, #284]	; (8000c34 <HAL_RCC_ClockConfig+0x144>)
 8000b18:	6813      	ldr	r3, [r2, #0]
 8000b1a:	f003 0307 	and.w	r3, r3, #7
 8000b1e:	429d      	cmp	r5, r3
 8000b20:	d375      	bcc.n	8000c0e <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b22:	6822      	ldr	r2, [r4, #0]
 8000b24:	4d44      	ldr	r5, [pc, #272]	; (8000c38 <HAL_RCC_ClockConfig+0x148>)
 8000b26:	f012 0f04 	tst.w	r2, #4
 8000b2a:	d17c      	bne.n	8000c26 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b2c:	0713      	lsls	r3, r2, #28
 8000b2e:	d506      	bpl.n	8000b3e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b30:	686b      	ldr	r3, [r5, #4]
 8000b32:	6922      	ldr	r2, [r4, #16]
 8000b34:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b38:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b3c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b3e:	f7ff ffa5 	bl	8000a8c <HAL_RCC_GetSysClockFreq>
 8000b42:	686b      	ldr	r3, [r5, #4]
 8000b44:	22f0      	movs	r2, #240	; 0xf0
 8000b46:	fa92 f2a2 	rbit	r2, r2
 8000b4a:	fab2 f282 	clz	r2, r2
 8000b4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000b52:	40d3      	lsrs	r3, r2
 8000b54:	4a39      	ldr	r2, [pc, #228]	; (8000c3c <HAL_RCC_ClockConfig+0x14c>)
 8000b56:	5cd3      	ldrb	r3, [r2, r3]
 8000b58:	40d8      	lsrs	r0, r3
 8000b5a:	4b39      	ldr	r3, [pc, #228]	; (8000c40 <HAL_RCC_ClockConfig+0x150>)
 8000b5c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000b5e:	2000      	movs	r0, #0
 8000b60:	f7ff fb32 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000b64:	2000      	movs	r0, #0
 8000b66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b6a:	6813      	ldr	r3, [r2, #0]
 8000b6c:	f023 0307 	bic.w	r3, r3, #7
 8000b70:	430b      	orrs	r3, r1
 8000b72:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b74:	6813      	ldr	r3, [r2, #0]
 8000b76:	f003 0307 	and.w	r3, r3, #7
 8000b7a:	4299      	cmp	r1, r3
 8000b7c:	d1bd      	bne.n	8000afa <HAL_RCC_ClockConfig+0xa>
 8000b7e:	e7c5      	b.n	8000b0c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000b80:	492d      	ldr	r1, [pc, #180]	; (8000c38 <HAL_RCC_ClockConfig+0x148>)
 8000b82:	68a0      	ldr	r0, [r4, #8]
 8000b84:	684b      	ldr	r3, [r1, #4]
 8000b86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000b8a:	4303      	orrs	r3, r0
 8000b8c:	604b      	str	r3, [r1, #4]
 8000b8e:	e7c0      	b.n	8000b12 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000b90:	6862      	ldr	r2, [r4, #4]
 8000b92:	4e29      	ldr	r6, [pc, #164]	; (8000c38 <HAL_RCC_ClockConfig+0x148>)
 8000b94:	2a01      	cmp	r2, #1
 8000b96:	d127      	bne.n	8000be8 <HAL_RCC_ClockConfig+0xf8>
 8000b98:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000b9c:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ba0:	6831      	ldr	r1, [r6, #0]
 8000ba2:	fa93 f3a3 	rbit	r3, r3
 8000ba6:	fab3 f383 	clz	r3, r3
 8000baa:	f003 031f 	and.w	r3, r3, #31
 8000bae:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bb4:	d0a1      	beq.n	8000afa <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000bb6:	6873      	ldr	r3, [r6, #4]
 8000bb8:	f023 0303 	bic.w	r3, r3, #3
 8000bbc:	431a      	orrs	r2, r3
 8000bbe:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000bc0:	f7ff fb44 	bl	800024c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bc4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000bc8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000bca:	6873      	ldr	r3, [r6, #4]
 8000bcc:	6862      	ldr	r2, [r4, #4]
 8000bce:	f003 030c 	and.w	r3, r3, #12
 8000bd2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000bd6:	d09e      	beq.n	8000b16 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000bd8:	f7ff fb38 	bl	800024c <HAL_GetTick>
 8000bdc:	1bc0      	subs	r0, r0, r7
 8000bde:	4540      	cmp	r0, r8
 8000be0:	d9f3      	bls.n	8000bca <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000be2:	2003      	movs	r0, #3
}
 8000be4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000be8:	2a02      	cmp	r2, #2
 8000bea:	bf0c      	ite	eq
 8000bec:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000bf0:	2302      	movne	r3, #2
 8000bf2:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000bf6:	6830      	ldr	r0, [r6, #0]
 8000bf8:	fa93 f3a3 	rbit	r3, r3
 8000bfc:	fab3 f383 	clz	r3, r3
 8000c00:	f003 031f 	and.w	r3, r3, #31
 8000c04:	2101      	movs	r1, #1
 8000c06:	fa01 f303 	lsl.w	r3, r1, r3
 8000c0a:	4203      	tst	r3, r0
 8000c0c:	e7d2      	b.n	8000bb4 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c0e:	6813      	ldr	r3, [r2, #0]
 8000c10:	f023 0307 	bic.w	r3, r3, #7
 8000c14:	432b      	orrs	r3, r5
 8000c16:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c18:	6813      	ldr	r3, [r2, #0]
 8000c1a:	f003 0307 	and.w	r3, r3, #7
 8000c1e:	429d      	cmp	r5, r3
 8000c20:	f47f af6b 	bne.w	8000afa <HAL_RCC_ClockConfig+0xa>
 8000c24:	e77d      	b.n	8000b22 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c26:	686b      	ldr	r3, [r5, #4]
 8000c28:	68e1      	ldr	r1, [r4, #12]
 8000c2a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c2e:	430b      	orrs	r3, r1
 8000c30:	606b      	str	r3, [r5, #4]
 8000c32:	e77b      	b.n	8000b2c <HAL_RCC_ClockConfig+0x3c>
 8000c34:	40022000 	.word	0x40022000
 8000c38:	40021000 	.word	0x40021000
 8000c3c:	08001324 	.word	0x08001324
 8000c40:	20000008 	.word	0x20000008

08000c44 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000c44:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000c46:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000c4a:	685b      	ldr	r3, [r3, #4]
 8000c4c:	fa92 f2a2 	rbit	r2, r2
 8000c50:	fab2 f282 	clz	r2, r2
 8000c54:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000c58:	40d3      	lsrs	r3, r2
 8000c5a:	4a04      	ldr	r2, [pc, #16]	; (8000c6c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000c5c:	5cd3      	ldrb	r3, [r2, r3]
 8000c5e:	4a04      	ldr	r2, [pc, #16]	; (8000c70 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000c60:	6810      	ldr	r0, [r2, #0]
}    
 8000c62:	40d8      	lsrs	r0, r3
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	08001334 	.word	0x08001334
 8000c70:	20000008 	.word	0x20000008

08000c74 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000c74:	4b08      	ldr	r3, [pc, #32]	; (8000c98 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000c76:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000c7a:	685b      	ldr	r3, [r3, #4]
 8000c7c:	fa92 f2a2 	rbit	r2, r2
 8000c80:	fab2 f282 	clz	r2, r2
 8000c84:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000c88:	40d3      	lsrs	r3, r2
 8000c8a:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <HAL_RCC_GetPCLK2Freq+0x28>)
 8000c8c:	5cd3      	ldrb	r3, [r2, r3]
 8000c8e:	4a04      	ldr	r2, [pc, #16]	; (8000ca0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000c90:	6810      	ldr	r0, [r2, #0]
} 
 8000c92:	40d8      	lsrs	r0, r3
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	40021000 	.word	0x40021000
 8000c9c:	08001334 	.word	0x08001334
 8000ca0:	20000008 	.word	0x20000008

08000ca4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000ca4:	b538      	push	{r3, r4, r5, lr}
 8000ca6:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000ca8:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000caa:	6921      	ldr	r1, [r4, #16]
 8000cac:	68a3      	ldr	r3, [r4, #8]
 8000cae:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000cb0:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000cb2:	430b      	orrs	r3, r1
 8000cb4:	6961      	ldr	r1, [r4, #20]
 8000cb6:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000cb8:	4949      	ldr	r1, [pc, #292]	; (8000de0 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000cba:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000cbc:	4001      	ands	r1, r0
 8000cbe:	430b      	orrs	r3, r1
 8000cc0:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000cc2:	686b      	ldr	r3, [r5, #4]
 8000cc4:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000cc6:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000cc8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ccc:	430b      	orrs	r3, r1
 8000cce:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000cd0:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000cd2:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000cd4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000cd8:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000cda:	430b      	orrs	r3, r1
 8000cdc:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000cde:	4b41      	ldr	r3, [pc, #260]	; (8000de4 <UART_SetConfig+0x140>)
 8000ce0:	429d      	cmp	r5, r3
 8000ce2:	d112      	bne.n	8000d0a <UART_SetConfig+0x66>
 8000ce4:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8000ce8:	493f      	ldr	r1, [pc, #252]	; (8000de8 <UART_SetConfig+0x144>)
 8000cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cec:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000cf0:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000cf4:	5ccb      	ldrb	r3, [r1, r3]
 8000cf6:	d13b      	bne.n	8000d70 <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d836      	bhi.n	8000d6a <UART_SetConfig+0xc6>
 8000cfc:	e8df f003 	tbb	[pc, r3]
 8000d00:	3524210f 	.word	0x3524210f
 8000d04:	3535352d 	.word	0x3535352d
 8000d08:	30          	.byte	0x30
 8000d09:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8000d0a:	4b38      	ldr	r3, [pc, #224]	; (8000dec <UART_SetConfig+0x148>)
 8000d0c:	429d      	cmp	r5, r3
 8000d0e:	d003      	beq.n	8000d18 <UART_SetConfig+0x74>
 8000d10:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000d14:	429d      	cmp	r5, r3
 8000d16:	d15e      	bne.n	8000dd6 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000d18:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000d1c:	d131      	bne.n	8000d82 <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000d1e:	f7ff ff91 	bl	8000c44 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000d22:	6861      	ldr	r1, [r4, #4]
 8000d24:	084a      	lsrs	r2, r1, #1
 8000d26:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8000d2a:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000d2e:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8000d30:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8000d32:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 8000d36:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8000d38:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	60cb      	str	r3, [r1, #12]
 8000d40:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8000d42:	f7ff ff97 	bl	8000c74 <HAL_RCC_GetPCLK2Freq>
 8000d46:	e7ec      	b.n	8000d22 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8000d48:	6860      	ldr	r0, [r4, #4]
 8000d4a:	0843      	lsrs	r3, r0, #1
 8000d4c:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8000d50:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000d54:	fbb3 f3f0 	udiv	r3, r3, r0
 8000d58:	e7e9      	b.n	8000d2e <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000d5a:	f7ff fe97 	bl	8000a8c <HAL_RCC_GetSysClockFreq>
 8000d5e:	e7e0      	b.n	8000d22 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8000d60:	6860      	ldr	r0, [r4, #4]
 8000d62:	0843      	lsrs	r3, r0, #1
 8000d64:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8000d68:	e7f4      	b.n	8000d54 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8000d6a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	e7e0      	b.n	8000d32 <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 8000d70:	2b08      	cmp	r3, #8
 8000d72:	d833      	bhi.n	8000ddc <UART_SetConfig+0x138>
 8000d74:	e8df f003 	tbb	[pc, r3]
 8000d78:	321b1005 	.word	0x321b1005
 8000d7c:	32323227 	.word	0x32323227
 8000d80:	2a          	.byte	0x2a
 8000d81:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8000d82:	f7ff ff5f 	bl	8000c44 <HAL_RCC_GetPCLK1Freq>
 8000d86:	6863      	ldr	r3, [r4, #4]
 8000d88:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8000d8c:	fbb0 f0f3 	udiv	r0, r0, r3
 8000d90:	b280      	uxth	r0, r0
 8000d92:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8000d94:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 8000d96:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8000d98:	f7ff ff6c 	bl	8000c74 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000d9c:	6863      	ldr	r3, [r4, #4]
 8000d9e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8000da2:	fbb0 f0f3 	udiv	r0, r0, r3
 8000da6:	4b0f      	ldr	r3, [pc, #60]	; (8000de4 <UART_SetConfig+0x140>)
 8000da8:	b280      	uxth	r0, r0
 8000daa:	60d8      	str	r0, [r3, #12]
 8000dac:	e7f2      	b.n	8000d94 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8000dae:	6862      	ldr	r2, [r4, #4]
 8000db0:	0853      	lsrs	r3, r2, #1
 8000db2:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8000db6:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000dba:	fbb3 f3f2 	udiv	r3, r3, r2
 8000dbe:	4a09      	ldr	r2, [pc, #36]	; (8000de4 <UART_SetConfig+0x140>)
 8000dc0:	b29b      	uxth	r3, r3
 8000dc2:	60d3      	str	r3, [r2, #12]
 8000dc4:	e7e6      	b.n	8000d94 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8000dc6:	f7ff fe61 	bl	8000a8c <HAL_RCC_GetSysClockFreq>
 8000dca:	e7e7      	b.n	8000d9c <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8000dcc:	6862      	ldr	r2, [r4, #4]
 8000dce:	0853      	lsrs	r3, r2, #1
 8000dd0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8000dd4:	e7f1      	b.n	8000dba <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8000dd6:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8000dda:	d0c6      	beq.n	8000d6a <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8000ddc:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8000dde:	bd38      	pop	{r3, r4, r5, pc}
 8000de0:	efff69f3 	.word	0xefff69f3
 8000de4:	40013800 	.word	0x40013800
 8000de8:	08001320 	.word	0x08001320
 8000dec:	40004400 	.word	0x40004400

08000df0 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000df0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8000df2:	07da      	lsls	r2, r3, #31
{
 8000df4:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8000df6:	d506      	bpl.n	8000e06 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8000df8:	6801      	ldr	r1, [r0, #0]
 8000dfa:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8000dfc:	684a      	ldr	r2, [r1, #4]
 8000dfe:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8000e02:	4322      	orrs	r2, r4
 8000e04:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8000e06:	079c      	lsls	r4, r3, #30
 8000e08:	d506      	bpl.n	8000e18 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8000e0a:	6801      	ldr	r1, [r0, #0]
 8000e0c:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8000e0e:	684a      	ldr	r2, [r1, #4]
 8000e10:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8000e14:	4322      	orrs	r2, r4
 8000e16:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8000e18:	0759      	lsls	r1, r3, #29
 8000e1a:	d506      	bpl.n	8000e2a <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8000e1c:	6801      	ldr	r1, [r0, #0]
 8000e1e:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8000e20:	684a      	ldr	r2, [r1, #4]
 8000e22:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8000e26:	4322      	orrs	r2, r4
 8000e28:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8000e2a:	071a      	lsls	r2, r3, #28
 8000e2c:	d506      	bpl.n	8000e3c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8000e2e:	6801      	ldr	r1, [r0, #0]
 8000e30:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8000e32:	684a      	ldr	r2, [r1, #4]
 8000e34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000e38:	4322      	orrs	r2, r4
 8000e3a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8000e3c:	06dc      	lsls	r4, r3, #27
 8000e3e:	d506      	bpl.n	8000e4e <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8000e40:	6801      	ldr	r1, [r0, #0]
 8000e42:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8000e44:	688a      	ldr	r2, [r1, #8]
 8000e46:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000e4a:	4322      	orrs	r2, r4
 8000e4c:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8000e4e:	0699      	lsls	r1, r3, #26
 8000e50:	d506      	bpl.n	8000e60 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8000e52:	6801      	ldr	r1, [r0, #0]
 8000e54:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8000e56:	688a      	ldr	r2, [r1, #8]
 8000e58:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e5c:	4322      	orrs	r2, r4
 8000e5e:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8000e60:	065a      	lsls	r2, r3, #25
 8000e62:	d50f      	bpl.n	8000e84 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8000e64:	6801      	ldr	r1, [r0, #0]
 8000e66:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8000e68:	684a      	ldr	r2, [r1, #4]
 8000e6a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8000e6e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8000e70:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8000e74:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8000e76:	d105      	bne.n	8000e84 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8000e78:	684a      	ldr	r2, [r1, #4]
 8000e7a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8000e7c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8000e80:	4322      	orrs	r2, r4
 8000e82:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8000e84:	061b      	lsls	r3, r3, #24
 8000e86:	d506      	bpl.n	8000e96 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8000e88:	6802      	ldr	r2, [r0, #0]
 8000e8a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000e8c:	6853      	ldr	r3, [r2, #4]
 8000e8e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8000e92:	430b      	orrs	r3, r1
 8000e94:	6053      	str	r3, [r2, #4]
 8000e96:	bd10      	pop	{r4, pc}

08000e98 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8000e98:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e9c:	9d06      	ldr	r5, [sp, #24]
 8000e9e:	4604      	mov	r4, r0
 8000ea0:	460f      	mov	r7, r1
 8000ea2:	4616      	mov	r6, r2
 8000ea4:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8000ea6:	6821      	ldr	r1, [r4, #0]
 8000ea8:	69ca      	ldr	r2, [r1, #28]
 8000eaa:	ea37 0302 	bics.w	r3, r7, r2
 8000eae:	bf0c      	ite	eq
 8000eb0:	2201      	moveq	r2, #1
 8000eb2:	2200      	movne	r2, #0
 8000eb4:	42b2      	cmp	r2, r6
 8000eb6:	d002      	beq.n	8000ebe <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8000eb8:	2000      	movs	r0, #0
}
 8000eba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8000ebe:	1c6b      	adds	r3, r5, #1
 8000ec0:	d0f2      	beq.n	8000ea8 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000ec2:	b99d      	cbnz	r5, 8000eec <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8000ec4:	6823      	ldr	r3, [r4, #0]
 8000ec6:	681a      	ldr	r2, [r3, #0]
 8000ec8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8000ecc:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8000ece:	689a      	ldr	r2, [r3, #8]
 8000ed0:	f022 0201 	bic.w	r2, r2, #1
 8000ed4:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8000ed6:	2320      	movs	r3, #32
 8000ed8:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8000edc:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8000ee6:	2003      	movs	r0, #3
 8000ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8000eec:	f7ff f9ae 	bl	800024c <HAL_GetTick>
 8000ef0:	eba0 0008 	sub.w	r0, r0, r8
 8000ef4:	4285      	cmp	r5, r0
 8000ef6:	d2d6      	bcs.n	8000ea6 <UART_WaitOnFlagUntilTimeout+0xe>
 8000ef8:	e7e4      	b.n	8000ec4 <UART_WaitOnFlagUntilTimeout+0x2c>

08000efa <UART_CheckIdleState>:
{
 8000efa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000efc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8000efe:	2600      	movs	r6, #0
 8000f00:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8000f02:	f7ff f9a3 	bl	800024c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8000f06:	6823      	ldr	r3, [r4, #0]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8000f0c:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8000f0e:	d417      	bmi.n	8000f40 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8000f10:	6823      	ldr	r3, [r4, #0]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	075b      	lsls	r3, r3, #29
 8000f16:	d50a      	bpl.n	8000f2e <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8000f18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000f1c:	9300      	str	r3, [sp, #0]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	462b      	mov	r3, r5
 8000f22:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8000f26:	4620      	mov	r0, r4
 8000f28:	f7ff ffb6 	bl	8000e98 <UART_WaitOnFlagUntilTimeout>
 8000f2c:	b9a0      	cbnz	r0, 8000f58 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8000f2e:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8000f30:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8000f32:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8000f36:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8000f3a:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8000f3e:	e00c      	b.n	8000f5a <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8000f40:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8000f44:	9300      	str	r3, [sp, #0]
 8000f46:	4632      	mov	r2, r6
 8000f48:	4603      	mov	r3, r0
 8000f4a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8000f4e:	4620      	mov	r0, r4
 8000f50:	f7ff ffa2 	bl	8000e98 <UART_WaitOnFlagUntilTimeout>
 8000f54:	2800      	cmp	r0, #0
 8000f56:	d0db      	beq.n	8000f10 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8000f58:	2003      	movs	r0, #3
}
 8000f5a:	b002      	add	sp, #8
 8000f5c:	bd70      	pop	{r4, r5, r6, pc}

08000f5e <HAL_UART_Init>:
{
 8000f5e:	b510      	push	{r4, lr}
  if(huart == NULL)
 8000f60:	4604      	mov	r4, r0
 8000f62:	b360      	cbz	r0, 8000fbe <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8000f64:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8000f68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000f6c:	b91b      	cbnz	r3, 8000f76 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8000f6e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8000f72:	f000 f8f3 	bl	800115c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8000f76:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8000f78:	2324      	movs	r3, #36	; 0x24
 8000f7a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8000f7e:	6813      	ldr	r3, [r2, #0]
 8000f80:	f023 0301 	bic.w	r3, r3, #1
 8000f84:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8000f86:	4620      	mov	r0, r4
 8000f88:	f7ff fe8c 	bl	8000ca4 <UART_SetConfig>
 8000f8c:	2801      	cmp	r0, #1
 8000f8e:	d016      	beq.n	8000fbe <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8000f90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000f92:	b113      	cbz	r3, 8000f9a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8000f94:	4620      	mov	r0, r4
 8000f96:	f7ff ff2b 	bl	8000df0 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f9a:	6823      	ldr	r3, [r4, #0]
 8000f9c:	685a      	ldr	r2, [r3, #4]
 8000f9e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8000fa2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8000fa4:	689a      	ldr	r2, [r3, #8]
 8000fa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8000faa:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8000fac:	681a      	ldr	r2, [r3, #0]
 8000fae:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8000fb2:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8000fb4:	601a      	str	r2, [r3, #0]
}
 8000fb6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8000fba:	f7ff bf9e 	b.w	8000efa <UART_CheckIdleState>
}
 8000fbe:	2001      	movs	r0, #1
 8000fc0:	bd10      	pop	{r4, pc}

08000fc2 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fc2:	b510      	push	{r4, lr}
 8000fc4:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fc6:	2228      	movs	r2, #40	; 0x28
 8000fc8:	2100      	movs	r1, #0
 8000fca:	a806      	add	r0, sp, #24
 8000fcc:	f000 f984 	bl	80012d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fd0:	2214      	movs	r2, #20
 8000fd2:	2100      	movs	r1, #0
 8000fd4:	a801      	add	r0, sp, #4
 8000fd6:	f000 f97f 	bl	80012d8 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fda:	2301      	movs	r3, #1
 8000fdc:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fde:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fe0:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fe2:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe4:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000fe6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8000fea:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000fec:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fee:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ff0:	f7ff fad6 	bl	80005a0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ff4:	230f      	movs	r3, #15
 8000ff6:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000ff8:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ffc:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000ffe:	4621      	mov	r1, r4
 8001000:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001002:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001004:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001006:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001008:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800100a:	f7ff fd71 	bl	8000af0 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 800100e:	b010      	add	sp, #64	; 0x40
 8001010:	bd10      	pop	{r4, pc}
	...

08001014 <main>:
{
 8001014:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  HAL_Init();
 8001016:	f7ff f8fb 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 800101a:	f7ff ffd2 	bl	8000fc2 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800101e:	4b27      	ldr	r3, [pc, #156]	; (80010bc <main+0xa8>)
  huart2.Instance = USART2;
 8001020:	4827      	ldr	r0, [pc, #156]	; (80010c0 <main+0xac>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001022:	695a      	ldr	r2, [r3, #20]
  hdac1.Instance = DAC1;
 8001024:	4d27      	ldr	r5, [pc, #156]	; (80010c4 <main+0xb0>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800102a:	615a      	str	r2, [r3, #20]
 800102c:	695a      	ldr	r2, [r3, #20]
 800102e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001032:	9201      	str	r2, [sp, #4]
 8001034:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001036:	695a      	ldr	r2, [r3, #20]
 8001038:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800103c:	615a      	str	r2, [r3, #20]
 800103e:	695b      	ldr	r3, [r3, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001040:	4a21      	ldr	r2, [pc, #132]	; (80010c8 <main+0xb4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001042:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001046:	9302      	str	r3, [sp, #8]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001048:	2400      	movs	r4, #0
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800104a:	9b02      	ldr	r3, [sp, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800104c:	60c4      	str	r4, [r0, #12]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800104e:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8001052:	e880 001c 	stmia.w	r0, {r2, r3, r4}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001056:	230c      	movs	r3, #12
 8001058:	6143      	str	r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 800105a:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800105c:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800105e:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001060:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001062:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001064:	f7ff ff7b 	bl	8000f5e <HAL_UART_Init>
  hdac1.Instance = DAC1;
 8001068:	4b18      	ldr	r3, [pc, #96]	; (80010cc <main+0xb8>)
 800106a:	602b      	str	r3, [r5, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800106c:	4628      	mov	r0, r5
  DAC_ChannelConfTypeDef sConfig = {0};
 800106e:	9403      	str	r4, [sp, #12]
 8001070:	9404      	str	r4, [sp, #16]
 8001072:	9405      	str	r4, [sp, #20]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001074:	f7ff f960 	bl	8000338 <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001078:	a903      	add	r1, sp, #12
 800107a:	4622      	mov	r2, r4
 800107c:	4628      	mov	r0, r5
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 800107e:	9403      	str	r4, [sp, #12]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001080:	9404      	str	r4, [sp, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001082:	f7ff f9a5 	bl	80003d0 <HAL_DAC_ConfigChannel>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8001086:	4621      	mov	r1, r4
 8001088:	4628      	mov	r0, r5
 800108a:	f7ff f97a 	bl	8000382 <HAL_DAC_Start>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 2000);
 800108e:	2200      	movs	r2, #0
 8001090:	4611      	mov	r1, r2
 8001092:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8001096:	4628      	mov	r0, r5
 8001098:	f7ff f961 	bl	800035e <HAL_DAC_SetValue>
	  HAL_Delay(500);
 800109c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010a0:	f7ff f8da 	bl	8000258 <HAL_Delay>
	  HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, 4095);
 80010a4:	2200      	movs	r2, #0
 80010a6:	f640 73ff 	movw	r3, #4095	; 0xfff
 80010aa:	4611      	mov	r1, r2
 80010ac:	4628      	mov	r0, r5
 80010ae:	f7ff f956 	bl	800035e <HAL_DAC_SetValue>
	  HAL_Delay(500);
 80010b2:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80010b6:	f7ff f8cf 	bl	8000258 <HAL_Delay>
 80010ba:	e7e8      	b.n	800108e <main+0x7a>
 80010bc:	40021000 	.word	0x40021000
 80010c0:	20000040 	.word	0x20000040
 80010c4:	2000002c 	.word	0x2000002c
 80010c8:	40004400 	.word	0x40004400
 80010cc:	40007400 	.word	0x40007400

080010d0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d0:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <HAL_MspInit+0x2c>)
 80010d2:	699a      	ldr	r2, [r3, #24]
 80010d4:	f042 0201 	orr.w	r2, r2, #1
 80010d8:	619a      	str	r2, [r3, #24]
 80010da:	699a      	ldr	r2, [r3, #24]
{
 80010dc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010de:	f002 0201 	and.w	r2, r2, #1
 80010e2:	9200      	str	r2, [sp, #0]
 80010e4:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e6:	69da      	ldr	r2, [r3, #28]
 80010e8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80010ec:	61da      	str	r2, [r3, #28]
 80010ee:	69db      	ldr	r3, [r3, #28]
 80010f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010f4:	9301      	str	r3, [sp, #4]
 80010f6:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010f8:	b002      	add	sp, #8
 80010fa:	4770      	bx	lr
 80010fc:	40021000 	.word	0x40021000

08001100 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001100:	b510      	push	{r4, lr}
 8001102:	4604      	mov	r4, r0
 8001104:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001106:	2214      	movs	r2, #20
 8001108:	2100      	movs	r1, #0
 800110a:	a803      	add	r0, sp, #12
 800110c:	f000 f8e4 	bl	80012d8 <memset>
  if(hdac->Instance==DAC1)
 8001110:	6822      	ldr	r2, [r4, #0]
 8001112:	4b11      	ldr	r3, [pc, #68]	; (8001158 <HAL_DAC_MspInit+0x58>)
 8001114:	429a      	cmp	r2, r3
 8001116:	d11c      	bne.n	8001152 <HAL_DAC_MspInit+0x52>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001118:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = DAC_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 800111c:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 800111e:	69da      	ldr	r2, [r3, #28]
 8001120:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001124:	61da      	str	r2, [r3, #28]
 8001126:	69da      	ldr	r2, [r3, #28]
 8001128:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800112c:	9201      	str	r2, [sp, #4]
 800112e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001130:	695a      	ldr	r2, [r3, #20]
 8001132:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001136:	615a      	str	r2, [r3, #20]
 8001138:	695b      	ldr	r3, [r3, #20]
 800113a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800113e:	9302      	str	r3, [sp, #8]
 8001140:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = DAC_Pin;
 8001142:	2310      	movs	r3, #16
 8001144:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 8001146:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800114a:	2303      	movs	r3, #3
 800114c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(DAC_GPIO_Port, &GPIO_InitStruct);
 800114e:	f7ff f96d 	bl	800042c <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8001152:	b008      	add	sp, #32
 8001154:	bd10      	pop	{r4, pc}
 8001156:	bf00      	nop
 8001158:	40007400 	.word	0x40007400

0800115c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800115c:	b510      	push	{r4, lr}
 800115e:	4604      	mov	r4, r0
 8001160:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001162:	2214      	movs	r2, #20
 8001164:	2100      	movs	r1, #0
 8001166:	a803      	add	r0, sp, #12
 8001168:	f000 f8b6 	bl	80012d8 <memset>
  if(huart->Instance==USART2)
 800116c:	6822      	ldr	r2, [r4, #0]
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <HAL_UART_MspInit+0x60>)
 8001170:	429a      	cmp	r2, r3
 8001172:	d121      	bne.n	80011b8 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001174:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001178:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800117a:	69da      	ldr	r2, [r3, #28]
 800117c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001180:	61da      	str	r2, [r3, #28]
 8001182:	69da      	ldr	r2, [r3, #28]
 8001184:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001188:	9201      	str	r2, [sp, #4]
 800118a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	695a      	ldr	r2, [r3, #20]
 800118e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001192:	615a      	str	r2, [r3, #20]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800119a:	9302      	str	r3, [sp, #8]
 800119c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800119e:	f248 0304 	movw	r3, #32772	; 0x8004
 80011a2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a4:	2302      	movs	r3, #2
 80011a6:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80011a8:	2303      	movs	r3, #3
 80011aa:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80011b0:	2307      	movs	r3, #7
 80011b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011b4:	f7ff f93a 	bl	800042c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80011b8:	b008      	add	sp, #32
 80011ba:	bd10      	pop	{r4, pc}
 80011bc:	40004400 	.word	0x40004400

080011c0 <NMI_Handler>:
 80011c0:	4770      	bx	lr

080011c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	e7fe      	b.n	80011c4 <MemManage_Handler>

080011c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011c6:	e7fe      	b.n	80011c6 <BusFault_Handler>

080011c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c8:	e7fe      	b.n	80011c8 <UsageFault_Handler>

080011ca <SVC_Handler>:
 80011ca:	4770      	bx	lr

080011cc <DebugMon_Handler>:
 80011cc:	4770      	bx	lr

080011ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011ce:	4770      	bx	lr

080011d0 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011d0:	f7ff b830 	b.w	8000234 <HAL_IncTick>

080011d4 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80011d4:	4915      	ldr	r1, [pc, #84]	; (800122c <SystemInit+0x58>)
 80011d6:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 80011da:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80011de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 80011e2:	4b13      	ldr	r3, [pc, #76]	; (8001230 <SystemInit+0x5c>)
 80011e4:	681a      	ldr	r2, [r3, #0]
 80011e6:	f042 0201 	orr.w	r2, r2, #1
 80011ea:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 80011ec:	6858      	ldr	r0, [r3, #4]
 80011ee:	4a11      	ldr	r2, [pc, #68]	; (8001234 <SystemInit+0x60>)
 80011f0:	4002      	ands	r2, r0
 80011f2:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 80011f4:	681a      	ldr	r2, [r3, #0]
 80011f6:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 80011fa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80011fe:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001200:	681a      	ldr	r2, [r3, #0]
 8001202:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001206:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001208:	685a      	ldr	r2, [r3, #4]
 800120a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 800120e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001212:	f022 020f 	bic.w	r2, r2, #15
 8001216:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001218:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800121a:	4a07      	ldr	r2, [pc, #28]	; (8001238 <SystemInit+0x64>)
 800121c:	4002      	ands	r2, r0
 800121e:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001224:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001228:	608b      	str	r3, [r1, #8]
 800122a:	4770      	bx	lr
 800122c:	e000ed00 	.word	0xe000ed00
 8001230:	40021000 	.word	0x40021000
 8001234:	f87fc00c 	.word	0xf87fc00c
 8001238:	ff00fccc 	.word	0xff00fccc

0800123c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800123c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001274 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001240:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001242:	e003      	b.n	800124c <LoopCopyDataInit>

08001244 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001244:	4b0c      	ldr	r3, [pc, #48]	; (8001278 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001246:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001248:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800124a:	3104      	adds	r1, #4

0800124c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800124c:	480b      	ldr	r0, [pc, #44]	; (800127c <LoopForever+0xa>)
	ldr	r3, =_edata
 800124e:	4b0c      	ldr	r3, [pc, #48]	; (8001280 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001250:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001252:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001254:	d3f6      	bcc.n	8001244 <CopyDataInit>
	ldr	r2, =_sbss
 8001256:	4a0b      	ldr	r2, [pc, #44]	; (8001284 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001258:	e002      	b.n	8001260 <LoopFillZerobss>

0800125a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800125a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800125c:	f842 3b04 	str.w	r3, [r2], #4

08001260 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001260:	4b09      	ldr	r3, [pc, #36]	; (8001288 <LoopForever+0x16>)
	cmp	r2, r3
 8001262:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001264:	d3f9      	bcc.n	800125a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001266:	f7ff ffb5 	bl	80011d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800126a:	f000 f811 	bl	8001290 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800126e:	f7ff fed1 	bl	8001014 <main>

08001272 <LoopForever>:

LoopForever:
    b LoopForever
 8001272:	e7fe      	b.n	8001272 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001274:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001278:	08001344 	.word	0x08001344
	ldr	r0, =_sdata
 800127c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001280:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8001284:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001288:	200000b0 	.word	0x200000b0

0800128c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800128c:	e7fe      	b.n	800128c <ADC1_2_IRQHandler>
	...

08001290 <__libc_init_array>:
 8001290:	b570      	push	{r4, r5, r6, lr}
 8001292:	4e0d      	ldr	r6, [pc, #52]	; (80012c8 <__libc_init_array+0x38>)
 8001294:	4c0d      	ldr	r4, [pc, #52]	; (80012cc <__libc_init_array+0x3c>)
 8001296:	1ba4      	subs	r4, r4, r6
 8001298:	10a4      	asrs	r4, r4, #2
 800129a:	2500      	movs	r5, #0
 800129c:	42a5      	cmp	r5, r4
 800129e:	d109      	bne.n	80012b4 <__libc_init_array+0x24>
 80012a0:	4e0b      	ldr	r6, [pc, #44]	; (80012d0 <__libc_init_array+0x40>)
 80012a2:	4c0c      	ldr	r4, [pc, #48]	; (80012d4 <__libc_init_array+0x44>)
 80012a4:	f000 f820 	bl	80012e8 <_init>
 80012a8:	1ba4      	subs	r4, r4, r6
 80012aa:	10a4      	asrs	r4, r4, #2
 80012ac:	2500      	movs	r5, #0
 80012ae:	42a5      	cmp	r5, r4
 80012b0:	d105      	bne.n	80012be <__libc_init_array+0x2e>
 80012b2:	bd70      	pop	{r4, r5, r6, pc}
 80012b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012b8:	4798      	blx	r3
 80012ba:	3501      	adds	r5, #1
 80012bc:	e7ee      	b.n	800129c <__libc_init_array+0xc>
 80012be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80012c2:	4798      	blx	r3
 80012c4:	3501      	adds	r5, #1
 80012c6:	e7f2      	b.n	80012ae <__libc_init_array+0x1e>
 80012c8:	0800133c 	.word	0x0800133c
 80012cc:	0800133c 	.word	0x0800133c
 80012d0:	0800133c 	.word	0x0800133c
 80012d4:	08001340 	.word	0x08001340

080012d8 <memset>:
 80012d8:	4402      	add	r2, r0
 80012da:	4603      	mov	r3, r0
 80012dc:	4293      	cmp	r3, r2
 80012de:	d100      	bne.n	80012e2 <memset+0xa>
 80012e0:	4770      	bx	lr
 80012e2:	f803 1b01 	strb.w	r1, [r3], #1
 80012e6:	e7f9      	b.n	80012dc <memset+0x4>

080012e8 <_init>:
 80012e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012ea:	bf00      	nop
 80012ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012ee:	bc08      	pop	{r3}
 80012f0:	469e      	mov	lr, r3
 80012f2:	4770      	bx	lr

080012f4 <_fini>:
 80012f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012f6:	bf00      	nop
 80012f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80012fa:	bc08      	pop	{r3}
 80012fc:	469e      	mov	lr, r3
 80012fe:	4770      	bx	lr
