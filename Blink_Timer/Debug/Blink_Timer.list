
Blink_Timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000014d0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000003c  08001658  08001658  00011658  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001694  08001694  00011694  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001698  08001698  00011698  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  0800169c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          000000d0  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200000dc  200000dc  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   00011935  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 00001fad  00000000  00000000  00031971  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000067cc  00000000  00000000  0003391e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000880  00000000  00000000  0003a0f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000ba0  00000000  00000000  0003a970  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00004b23  00000000  00000000  0003b510  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0000364e  00000000  00000000  00040033  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  00043681  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00001930  00000000  00000000  00043700  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08001640 	.word	0x08001640

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08001640 	.word	0x08001640

080001c8 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80001c8:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001ca:	4a0e      	ldr	r2, [pc, #56]	; (8000204 <HAL_InitTick+0x3c>)
 80001cc:	4b0e      	ldr	r3, [pc, #56]	; (8000208 <HAL_InitTick+0x40>)
{
 80001ce:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80001d0:	7818      	ldrb	r0, [r3, #0]
 80001d2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80001d6:	fbb3 f3f0 	udiv	r3, r3, r0
 80001da:	6810      	ldr	r0, [r2, #0]
 80001dc:	fbb0 f0f3 	udiv	r0, r0, r3
 80001e0:	f000 f88c 	bl	80002fc <HAL_SYSTICK_Config>
 80001e4:	4604      	mov	r4, r0
 80001e6:	b958      	cbnz	r0, 8000200 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80001e8:	2d0f      	cmp	r5, #15
 80001ea:	d809      	bhi.n	8000200 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80001ec:	4602      	mov	r2, r0
 80001ee:	4629      	mov	r1, r5
 80001f0:	f04f 30ff 	mov.w	r0, #4294967295
 80001f4:	f000 f842 	bl	800027c <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80001f8:	4b04      	ldr	r3, [pc, #16]	; (800020c <HAL_InitTick+0x44>)
 80001fa:	4620      	mov	r0, r4
 80001fc:	601d      	str	r5, [r3, #0]
 80001fe:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000200:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000202:	bd38      	pop	{r3, r4, r5, pc}
 8000204:	20000008 	.word	0x20000008
 8000208:	20000000 	.word	0x20000000
 800020c:	20000004 	.word	0x20000004

08000210 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000210:	4a07      	ldr	r2, [pc, #28]	; (8000230 <HAL_Init+0x20>)
{
 8000212:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000214:	6813      	ldr	r3, [r2, #0]
 8000216:	f043 0310 	orr.w	r3, r3, #16
 800021a:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800021c:	2003      	movs	r0, #3
 800021e:	f000 f81b 	bl	8000258 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000222:	2000      	movs	r0, #0
 8000224:	f7ff ffd0 	bl	80001c8 <HAL_InitTick>
  HAL_MspInit();
 8000228:	f001 f902 	bl	8001430 <HAL_MspInit>
}
 800022c:	2000      	movs	r0, #0
 800022e:	bd08      	pop	{r3, pc}
 8000230:	40022000 	.word	0x40022000

08000234 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000234:	4a03      	ldr	r2, [pc, #12]	; (8000244 <HAL_IncTick+0x10>)
 8000236:	4b04      	ldr	r3, [pc, #16]	; (8000248 <HAL_IncTick+0x14>)
 8000238:	6811      	ldr	r1, [r2, #0]
 800023a:	781b      	ldrb	r3, [r3, #0]
 800023c:	440b      	add	r3, r1
 800023e:	6013      	str	r3, [r2, #0]
 8000240:	4770      	bx	lr
 8000242:	bf00      	nop
 8000244:	20000028 	.word	0x20000028
 8000248:	20000000 	.word	0x20000000

0800024c <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 800024c:	4b01      	ldr	r3, [pc, #4]	; (8000254 <HAL_GetTick+0x8>)
 800024e:	6818      	ldr	r0, [r3, #0]
}
 8000250:	4770      	bx	lr
 8000252:	bf00      	nop
 8000254:	20000028 	.word	0x20000028

08000258 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000258:	4a07      	ldr	r2, [pc, #28]	; (8000278 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800025a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800025c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000260:	041b      	lsls	r3, r3, #16
 8000262:	0c1b      	lsrs	r3, r3, #16
 8000264:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000268:	0200      	lsls	r0, r0, #8
 800026a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800026e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000272:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000274:	60d3      	str	r3, [r2, #12]
 8000276:	4770      	bx	lr
 8000278:	e000ed00 	.word	0xe000ed00

0800027c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800027c:	4b17      	ldr	r3, [pc, #92]	; (80002dc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800027e:	b530      	push	{r4, r5, lr}
 8000280:	68dc      	ldr	r4, [r3, #12]
 8000282:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000286:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800028a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800028c:	2b04      	cmp	r3, #4
 800028e:	bf28      	it	cs
 8000290:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000292:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000294:	f04f 0501 	mov.w	r5, #1
 8000298:	fa05 f303 	lsl.w	r3, r5, r3
 800029c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80002a0:	bf8c      	ite	hi
 80002a2:	3c03      	subhi	r4, #3
 80002a4:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002a6:	4019      	ands	r1, r3
 80002a8:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80002aa:	fa05 f404 	lsl.w	r4, r5, r4
 80002ae:	3c01      	subs	r4, #1
 80002b0:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 80002b2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80002b4:	ea42 0201 	orr.w	r2, r2, r1
 80002b8:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002bc:	bfaf      	iteee	ge
 80002be:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c2:	f000 000f 	andlt.w	r0, r0, #15
 80002c6:	4b06      	ldrlt	r3, [pc, #24]	; (80002e0 <HAL_NVIC_SetPriority+0x64>)
 80002c8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002ca:	bfa5      	ittet	ge
 80002cc:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80002d0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80002d8:	bd30      	pop	{r4, r5, pc}
 80002da:	bf00      	nop
 80002dc:	e000ed00 	.word	0xe000ed00
 80002e0:	e000ed14 	.word	0xe000ed14

080002e4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80002e4:	0942      	lsrs	r2, r0, #5
 80002e6:	2301      	movs	r3, #1
 80002e8:	f000 001f 	and.w	r0, r0, #31
 80002ec:	fa03 f000 	lsl.w	r0, r3, r0
 80002f0:	4b01      	ldr	r3, [pc, #4]	; (80002f8 <HAL_NVIC_EnableIRQ+0x14>)
 80002f2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80002f6:	4770      	bx	lr
 80002f8:	e000e100 	.word	0xe000e100

080002fc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80002fc:	3801      	subs	r0, #1
 80002fe:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000302:	d20a      	bcs.n	800031a <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000304:	4b06      	ldr	r3, [pc, #24]	; (8000320 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000306:	4a07      	ldr	r2, [pc, #28]	; (8000324 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000308:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800030a:	21f0      	movs	r1, #240	; 0xf0
 800030c:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000310:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000312:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000314:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000316:	601a      	str	r2, [r3, #0]
 8000318:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800031a:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 800031c:	4770      	bx	lr
 800031e:	bf00      	nop
 8000320:	e000e010 	.word	0xe000e010
 8000324:	e000ed00 	.word	0xe000ed00

08000328 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800032c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800032e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000330:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000498 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000334:	4a56      	ldr	r2, [pc, #344]	; (8000490 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000336:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000338:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 800033c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800033e:	9c01      	ldr	r4, [sp, #4]
 8000340:	40dc      	lsrs	r4, r3
 8000342:	d102      	bne.n	800034a <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000344:	b005      	add	sp, #20
 8000346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800034a:	2401      	movs	r4, #1
 800034c:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000350:	9c01      	ldr	r4, [sp, #4]
 8000352:	ea14 050a 	ands.w	r5, r4, sl
 8000356:	f000 8093 	beq.w	8000480 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800035a:	684c      	ldr	r4, [r1, #4]
 800035c:	f024 0b10 	bic.w	fp, r4, #16
 8000360:	f1bb 0f02 	cmp.w	fp, #2
 8000364:	d111      	bne.n	800038a <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000366:	08df      	lsrs	r7, r3, #3
 8000368:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800036c:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000370:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000372:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000376:	fa09 fc0e 	lsl.w	ip, r9, lr
 800037a:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800037e:	690e      	ldr	r6, [r1, #16]
 8000380:	fa06 f60e 	lsl.w	r6, r6, lr
 8000384:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000388:	623e      	str	r6, [r7, #32]
 800038a:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800038e:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000390:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000392:	fa07 f70c 	lsl.w	r7, r7, ip
 8000396:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000398:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800039c:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800039e:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003a2:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80003a6:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003aa:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80003ae:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80003b0:	d811      	bhi.n	80003d6 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80003b2:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80003b4:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 80003b8:	68ce      	ldr	r6, [r1, #12]
 80003ba:	fa06 fe0c 	lsl.w	lr, r6, ip
 80003be:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80003c2:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80003c4:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80003c6:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80003ca:	f3c4 1600 	ubfx	r6, r4, #4, #1
 80003ce:	409e      	lsls	r6, r3
 80003d0:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 80003d4:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 80003d6:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80003d8:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80003da:	688e      	ldr	r6, [r1, #8]
 80003dc:	fa06 f60c 	lsl.w	r6, r6, ip
 80003e0:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003e2:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 80003e4:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80003e6:	d54b      	bpl.n	8000480 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80003e8:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80003ec:	f046 0601 	orr.w	r6, r6, #1
 80003f0:	f8c8 6018 	str.w	r6, [r8, #24]
 80003f4:	f8d8 6018 	ldr.w	r6, [r8, #24]
 80003f8:	f023 0703 	bic.w	r7, r3, #3
 80003fc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000400:	f006 0601 	and.w	r6, r6, #1
 8000404:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000408:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800040a:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800040e:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000410:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000412:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000416:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800041a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800041e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000422:	d02f      	beq.n	8000484 <HAL_GPIO_Init+0x15c>
 8000424:	4e1b      	ldr	r6, [pc, #108]	; (8000494 <HAL_GPIO_Init+0x16c>)
 8000426:	42b0      	cmp	r0, r6
 8000428:	d02e      	beq.n	8000488 <HAL_GPIO_Init+0x160>
 800042a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800042e:	42b0      	cmp	r0, r6
 8000430:	d02c      	beq.n	800048c <HAL_GPIO_Init+0x164>
 8000432:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000436:	42b0      	cmp	r0, r6
 8000438:	bf14      	ite	ne
 800043a:	2605      	movne	r6, #5
 800043c:	2603      	moveq	r6, #3
 800043e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000442:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000446:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000448:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800044a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800044c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000450:	bf0c      	ite	eq
 8000452:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000454:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000456:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000458:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800045a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800045e:	bf0c      	ite	eq
 8000460:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000462:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000464:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000466:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000468:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800046c:	bf0c      	ite	eq
 800046e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000470:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000472:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000474:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000476:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000478:	bf54      	ite	pl
 800047a:	403e      	andpl	r6, r7
          temp |= iocurrent;
 800047c:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 800047e:	60d6      	str	r6, [r2, #12]
    position++;
 8000480:	3301      	adds	r3, #1
 8000482:	e75c      	b.n	800033e <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000484:	2600      	movs	r6, #0
 8000486:	e7da      	b.n	800043e <HAL_GPIO_Init+0x116>
 8000488:	2601      	movs	r6, #1
 800048a:	e7d8      	b.n	800043e <HAL_GPIO_Init+0x116>
 800048c:	2602      	movs	r6, #2
 800048e:	e7d6      	b.n	800043e <HAL_GPIO_Init+0x116>
 8000490:	40010400 	.word	0x40010400
 8000494:	48000400 	.word	0x48000400
 8000498:	40021000 	.word	0x40021000

0800049c <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800049c:	b10a      	cbz	r2, 80004a2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800049e:	6181      	str	r1, [r0, #24]
 80004a0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80004a2:	6281      	str	r1, [r0, #40]	; 0x28
 80004a4:	4770      	bx	lr

080004a6 <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80004a6:	6943      	ldr	r3, [r0, #20]
 80004a8:	4059      	eors	r1, r3
 80004aa:	6141      	str	r1, [r0, #20]
 80004ac:	4770      	bx	lr
	...

080004b0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80004b0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80004b4:	4605      	mov	r5, r0
 80004b6:	b918      	cbnz	r0, 80004c0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 80004b8:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 80004ba:	b002      	add	sp, #8
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004c0:	6803      	ldr	r3, [r0, #0]
 80004c2:	07da      	lsls	r2, r3, #31
 80004c4:	d411      	bmi.n	80004ea <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004c6:	682b      	ldr	r3, [r5, #0]
 80004c8:	079b      	lsls	r3, r3, #30
 80004ca:	f100 8085 	bmi.w	80005d8 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80004ce:	682b      	ldr	r3, [r5, #0]
 80004d0:	071c      	lsls	r4, r3, #28
 80004d2:	f100 80f6 	bmi.w	80006c2 <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80004d6:	682b      	ldr	r3, [r5, #0]
 80004d8:	0758      	lsls	r0, r3, #29
 80004da:	f100 813f 	bmi.w	800075c <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80004de:	69ea      	ldr	r2, [r5, #28]
 80004e0:	2a00      	cmp	r2, #0
 80004e2:	f040 81d6 	bne.w	8000892 <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 80004e6:	2000      	movs	r0, #0
 80004e8:	e7e7      	b.n	80004ba <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80004ea:	4cba      	ldr	r4, [pc, #744]	; (80007d4 <HAL_RCC_OscConfig+0x324>)
 80004ec:	6863      	ldr	r3, [r4, #4]
 80004ee:	f003 030c 	and.w	r3, r3, #12
 80004f2:	2b04      	cmp	r3, #4
 80004f4:	d007      	beq.n	8000506 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80004f6:	6863      	ldr	r3, [r4, #4]
 80004f8:	f003 030c 	and.w	r3, r3, #12
 80004fc:	2b08      	cmp	r3, #8
 80004fe:	d116      	bne.n	800052e <HAL_RCC_OscConfig+0x7e>
 8000500:	6863      	ldr	r3, [r4, #4]
 8000502:	03df      	lsls	r7, r3, #15
 8000504:	d513      	bpl.n	800052e <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000506:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800050a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800050e:	6821      	ldr	r1, [r4, #0]
 8000510:	fa93 f3a3 	rbit	r3, r3
 8000514:	fab3 f383 	clz	r3, r3
 8000518:	f003 031f 	and.w	r3, r3, #31
 800051c:	2201      	movs	r2, #1
 800051e:	fa02 f303 	lsl.w	r3, r2, r3
 8000522:	420b      	tst	r3, r1
 8000524:	d0cf      	beq.n	80004c6 <HAL_RCC_OscConfig+0x16>
 8000526:	686b      	ldr	r3, [r5, #4]
 8000528:	2b00      	cmp	r3, #0
 800052a:	d1cc      	bne.n	80004c6 <HAL_RCC_OscConfig+0x16>
 800052c:	e7c4      	b.n	80004b8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800052e:	686a      	ldr	r2, [r5, #4]
 8000530:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000534:	d125      	bne.n	8000582 <HAL_RCC_OscConfig+0xd2>
 8000536:	6823      	ldr	r3, [r4, #0]
 8000538:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800053c:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800053e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000540:	68a9      	ldr	r1, [r5, #8]
 8000542:	f023 030f 	bic.w	r3, r3, #15
 8000546:	430b      	orrs	r3, r1
 8000548:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800054a:	b352      	cbz	r2, 80005a2 <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 800054c:	f7ff fe7e 	bl	800024c <HAL_GetTick>
 8000550:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000554:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000556:	2701      	movs	r7, #1
 8000558:	fa96 f3a6 	rbit	r3, r6
 800055c:	6822      	ldr	r2, [r4, #0]
 800055e:	fa96 f3a6 	rbit	r3, r6
 8000562:	fab3 f383 	clz	r3, r3
 8000566:	f003 031f 	and.w	r3, r3, #31
 800056a:	fa07 f303 	lsl.w	r3, r7, r3
 800056e:	4213      	tst	r3, r2
 8000570:	d1a9      	bne.n	80004c6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000572:	f7ff fe6b 	bl	800024c <HAL_GetTick>
 8000576:	eba0 0008 	sub.w	r0, r0, r8
 800057a:	2864      	cmp	r0, #100	; 0x64
 800057c:	d9ec      	bls.n	8000558 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 800057e:	2003      	movs	r0, #3
 8000580:	e79b      	b.n	80004ba <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000582:	6823      	ldr	r3, [r4, #0]
 8000584:	b932      	cbnz	r2, 8000594 <HAL_RCC_OscConfig+0xe4>
 8000586:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800058a:	6023      	str	r3, [r4, #0]
 800058c:	6823      	ldr	r3, [r4, #0]
 800058e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000592:	e7d3      	b.n	800053c <HAL_RCC_OscConfig+0x8c>
 8000594:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000598:	d1f5      	bne.n	8000586 <HAL_RCC_OscConfig+0xd6>
 800059a:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800059e:	6023      	str	r3, [r4, #0]
 80005a0:	e7c9      	b.n	8000536 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80005a2:	f7ff fe53 	bl	800024c <HAL_GetTick>
 80005a6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80005aa:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80005ac:	2701      	movs	r7, #1
 80005ae:	fa96 f3a6 	rbit	r3, r6
 80005b2:	6822      	ldr	r2, [r4, #0]
 80005b4:	fa96 f3a6 	rbit	r3, r6
 80005b8:	fab3 f383 	clz	r3, r3
 80005bc:	f003 031f 	and.w	r3, r3, #31
 80005c0:	fa07 f303 	lsl.w	r3, r7, r3
 80005c4:	4213      	tst	r3, r2
 80005c6:	f43f af7e 	beq.w	80004c6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80005ca:	f7ff fe3f 	bl	800024c <HAL_GetTick>
 80005ce:	eba0 0008 	sub.w	r0, r0, r8
 80005d2:	2864      	cmp	r0, #100	; 0x64
 80005d4:	d9eb      	bls.n	80005ae <HAL_RCC_OscConfig+0xfe>
 80005d6:	e7d2      	b.n	800057e <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80005d8:	4c7e      	ldr	r4, [pc, #504]	; (80007d4 <HAL_RCC_OscConfig+0x324>)
 80005da:	6863      	ldr	r3, [r4, #4]
 80005dc:	f013 0f0c 	tst.w	r3, #12
 80005e0:	d007      	beq.n	80005f2 <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80005e2:	6863      	ldr	r3, [r4, #4]
 80005e4:	f003 030c 	and.w	r3, r3, #12
 80005e8:	2b08      	cmp	r3, #8
 80005ea:	d122      	bne.n	8000632 <HAL_RCC_OscConfig+0x182>
 80005ec:	6863      	ldr	r3, [r4, #4]
 80005ee:	03de      	lsls	r6, r3, #15
 80005f0:	d41f      	bmi.n	8000632 <HAL_RCC_OscConfig+0x182>
 80005f2:	2302      	movs	r3, #2
 80005f4:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80005f8:	6821      	ldr	r1, [r4, #0]
 80005fa:	fa93 f3a3 	rbit	r3, r3
 80005fe:	fab3 f383 	clz	r3, r3
 8000602:	f003 031f 	and.w	r3, r3, #31
 8000606:	2201      	movs	r2, #1
 8000608:	fa02 f303 	lsl.w	r3, r2, r3
 800060c:	420b      	tst	r3, r1
 800060e:	d003      	beq.n	8000618 <HAL_RCC_OscConfig+0x168>
 8000610:	692b      	ldr	r3, [r5, #16]
 8000612:	4293      	cmp	r3, r2
 8000614:	f47f af50 	bne.w	80004b8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000618:	6821      	ldr	r1, [r4, #0]
 800061a:	23f8      	movs	r3, #248	; 0xf8
 800061c:	fa93 f3a3 	rbit	r3, r3
 8000620:	fab3 f283 	clz	r2, r3
 8000624:	696b      	ldr	r3, [r5, #20]
 8000626:	4093      	lsls	r3, r2
 8000628:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800062c:	4313      	orrs	r3, r2
 800062e:	6023      	str	r3, [r4, #0]
 8000630:	e74d      	b.n	80004ce <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8000632:	692a      	ldr	r2, [r5, #16]
 8000634:	2601      	movs	r6, #1
 8000636:	b30a      	cbz	r2, 800067c <HAL_RCC_OscConfig+0x1cc>
 8000638:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800063c:	fab3 f383 	clz	r3, r3
 8000640:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000644:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000648:	009b      	lsls	r3, r3, #2
 800064a:	2702      	movs	r7, #2
 800064c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800064e:	f7ff fdfd 	bl	800024c <HAL_GetTick>
 8000652:	4680      	mov	r8, r0
 8000654:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000658:	6822      	ldr	r2, [r4, #0]
 800065a:	fa97 f3a7 	rbit	r3, r7
 800065e:	fab3 f383 	clz	r3, r3
 8000662:	f003 031f 	and.w	r3, r3, #31
 8000666:	fa06 f303 	lsl.w	r3, r6, r3
 800066a:	4213      	tst	r3, r2
 800066c:	d1d4      	bne.n	8000618 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800066e:	f7ff fded 	bl	800024c <HAL_GetTick>
 8000672:	eba0 0008 	sub.w	r0, r0, r8
 8000676:	2802      	cmp	r0, #2
 8000678:	d9ec      	bls.n	8000654 <HAL_RCC_OscConfig+0x1a4>
 800067a:	e780      	b.n	800057e <HAL_RCC_OscConfig+0xce>
 800067c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 8000680:	fab3 f383 	clz	r3, r3
 8000684:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000688:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800068c:	009b      	lsls	r3, r3, #2
 800068e:	2702      	movs	r7, #2
 8000690:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000692:	f7ff fddb 	bl	800024c <HAL_GetTick>
 8000696:	4680      	mov	r8, r0
 8000698:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800069c:	6822      	ldr	r2, [r4, #0]
 800069e:	fa97 f3a7 	rbit	r3, r7
 80006a2:	fab3 f383 	clz	r3, r3
 80006a6:	f003 031f 	and.w	r3, r3, #31
 80006aa:	fa06 f303 	lsl.w	r3, r6, r3
 80006ae:	4213      	tst	r3, r2
 80006b0:	f43f af0d 	beq.w	80004ce <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80006b4:	f7ff fdca 	bl	800024c <HAL_GetTick>
 80006b8:	eba0 0008 	sub.w	r0, r0, r8
 80006bc:	2802      	cmp	r0, #2
 80006be:	d9eb      	bls.n	8000698 <HAL_RCC_OscConfig+0x1e8>
 80006c0:	e75d      	b.n	800057e <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80006c2:	69aa      	ldr	r2, [r5, #24]
 80006c4:	4e43      	ldr	r6, [pc, #268]	; (80007d4 <HAL_RCC_OscConfig+0x324>)
 80006c6:	4944      	ldr	r1, [pc, #272]	; (80007d8 <HAL_RCC_OscConfig+0x328>)
 80006c8:	2401      	movs	r4, #1
 80006ca:	b31a      	cbz	r2, 8000714 <HAL_RCC_OscConfig+0x264>
 80006cc:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80006d0:	fab3 f383 	clz	r3, r3
 80006d4:	440b      	add	r3, r1
 80006d6:	009b      	lsls	r3, r3, #2
 80006d8:	2702      	movs	r7, #2
 80006da:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80006dc:	f7ff fdb6 	bl	800024c <HAL_GetTick>
 80006e0:	4680      	mov	r8, r0
 80006e2:	fa97 f3a7 	rbit	r3, r7
 80006e6:	fa97 f3a7 	rbit	r3, r7
 80006ea:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80006ee:	6a72      	ldr	r2, [r6, #36]	; 0x24
 80006f0:	fa97 f3a7 	rbit	r3, r7
 80006f4:	fab3 f383 	clz	r3, r3
 80006f8:	f003 031f 	and.w	r3, r3, #31
 80006fc:	fa04 f303 	lsl.w	r3, r4, r3
 8000700:	4213      	tst	r3, r2
 8000702:	f47f aee8 	bne.w	80004d6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000706:	f7ff fda1 	bl	800024c <HAL_GetTick>
 800070a:	eba0 0008 	sub.w	r0, r0, r8
 800070e:	2802      	cmp	r0, #2
 8000710:	d9e7      	bls.n	80006e2 <HAL_RCC_OscConfig+0x232>
 8000712:	e734      	b.n	800057e <HAL_RCC_OscConfig+0xce>
 8000714:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000718:	fab3 f383 	clz	r3, r3
 800071c:	440b      	add	r3, r1
 800071e:	009b      	lsls	r3, r3, #2
 8000720:	2702      	movs	r7, #2
 8000722:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000724:	f7ff fd92 	bl	800024c <HAL_GetTick>
 8000728:	4680      	mov	r8, r0
 800072a:	fa97 f3a7 	rbit	r3, r7
 800072e:	fa97 f3a7 	rbit	r3, r7
 8000732:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000736:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000738:	fa97 f3a7 	rbit	r3, r7
 800073c:	fab3 f383 	clz	r3, r3
 8000740:	f003 031f 	and.w	r3, r3, #31
 8000744:	fa04 f303 	lsl.w	r3, r4, r3
 8000748:	4213      	tst	r3, r2
 800074a:	f43f aec4 	beq.w	80004d6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800074e:	f7ff fd7d 	bl	800024c <HAL_GetTick>
 8000752:	eba0 0008 	sub.w	r0, r0, r8
 8000756:	2802      	cmp	r0, #2
 8000758:	d9e7      	bls.n	800072a <HAL_RCC_OscConfig+0x27a>
 800075a:	e710      	b.n	800057e <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800075c:	4c1d      	ldr	r4, [pc, #116]	; (80007d4 <HAL_RCC_OscConfig+0x324>)
 800075e:	69e3      	ldr	r3, [r4, #28]
 8000760:	00d9      	lsls	r1, r3, #3
 8000762:	d434      	bmi.n	80007ce <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8000764:	69e3      	ldr	r3, [r4, #28]
 8000766:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800076a:	61e3      	str	r3, [r4, #28]
 800076c:	69e3      	ldr	r3, [r4, #28]
 800076e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000772:	9301      	str	r3, [sp, #4]
 8000774:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000776:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000778:	4f18      	ldr	r7, [pc, #96]	; (80007dc <HAL_RCC_OscConfig+0x32c>)
 800077a:	683b      	ldr	r3, [r7, #0]
 800077c:	05da      	lsls	r2, r3, #23
 800077e:	d52f      	bpl.n	80007e0 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000780:	68eb      	ldr	r3, [r5, #12]
 8000782:	2b01      	cmp	r3, #1
 8000784:	d13d      	bne.n	8000802 <HAL_RCC_OscConfig+0x352>
 8000786:	6a23      	ldr	r3, [r4, #32]
 8000788:	f043 0301 	orr.w	r3, r3, #1
 800078c:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800078e:	f7ff fd5d 	bl	800024c <HAL_GetTick>
 8000792:	2702      	movs	r7, #2
 8000794:	4682      	mov	sl, r0
 8000796:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000798:	f04f 0801 	mov.w	r8, #1
 800079c:	fa97 f3a7 	rbit	r3, r7
 80007a0:	fa97 f3a7 	rbit	r3, r7
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d06c      	beq.n	8000882 <HAL_RCC_OscConfig+0x3d2>
 80007a8:	6a22      	ldr	r2, [r4, #32]
 80007aa:	fa99 f3a9 	rbit	r3, r9
 80007ae:	fab3 f383 	clz	r3, r3
 80007b2:	f003 031f 	and.w	r3, r3, #31
 80007b6:	fa08 f303 	lsl.w	r3, r8, r3
 80007ba:	4213      	tst	r3, r2
 80007bc:	d058      	beq.n	8000870 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 80007be:	2e00      	cmp	r6, #0
 80007c0:	f43f ae8d 	beq.w	80004de <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80007c4:	69e3      	ldr	r3, [r4, #28]
 80007c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80007ca:	61e3      	str	r3, [r4, #28]
 80007cc:	e687      	b.n	80004de <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80007ce:	2600      	movs	r6, #0
 80007d0:	e7d2      	b.n	8000778 <HAL_RCC_OscConfig+0x2c8>
 80007d2:	bf00      	nop
 80007d4:	40021000 	.word	0x40021000
 80007d8:	10908120 	.word	0x10908120
 80007dc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80007e0:	683b      	ldr	r3, [r7, #0]
 80007e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007e6:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 80007e8:	f7ff fd30 	bl	800024c <HAL_GetTick>
 80007ec:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80007ee:	683b      	ldr	r3, [r7, #0]
 80007f0:	05db      	lsls	r3, r3, #23
 80007f2:	d4c5      	bmi.n	8000780 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80007f4:	f7ff fd2a 	bl	800024c <HAL_GetTick>
 80007f8:	eba0 0008 	sub.w	r0, r0, r8
 80007fc:	2864      	cmp	r0, #100	; 0x64
 80007fe:	d9f6      	bls.n	80007ee <HAL_RCC_OscConfig+0x33e>
 8000800:	e6bd      	b.n	800057e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000802:	bb3b      	cbnz	r3, 8000854 <HAL_RCC_OscConfig+0x3a4>
 8000804:	6a23      	ldr	r3, [r4, #32]
 8000806:	f023 0301 	bic.w	r3, r3, #1
 800080a:	6223      	str	r3, [r4, #32]
 800080c:	6a23      	ldr	r3, [r4, #32]
 800080e:	f023 0304 	bic.w	r3, r3, #4
 8000812:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8000814:	f7ff fd1a 	bl	800024c <HAL_GetTick>
 8000818:	2702      	movs	r7, #2
 800081a:	4682      	mov	sl, r0
 800081c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800081e:	f04f 0801 	mov.w	r8, #1
 8000822:	fa97 f3a7 	rbit	r3, r7
 8000826:	fa97 f3a7 	rbit	r3, r7
 800082a:	b373      	cbz	r3, 800088a <HAL_RCC_OscConfig+0x3da>
 800082c:	6a22      	ldr	r2, [r4, #32]
 800082e:	fa99 f3a9 	rbit	r3, r9
 8000832:	fab3 f383 	clz	r3, r3
 8000836:	f003 031f 	and.w	r3, r3, #31
 800083a:	fa08 f303 	lsl.w	r3, r8, r3
 800083e:	4213      	tst	r3, r2
 8000840:	d0bd      	beq.n	80007be <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000842:	f7ff fd03 	bl	800024c <HAL_GetTick>
 8000846:	f241 3388 	movw	r3, #5000	; 0x1388
 800084a:	eba0 000a 	sub.w	r0, r0, sl
 800084e:	4298      	cmp	r0, r3
 8000850:	d9e7      	bls.n	8000822 <HAL_RCC_OscConfig+0x372>
 8000852:	e694      	b.n	800057e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000854:	2b05      	cmp	r3, #5
 8000856:	6a23      	ldr	r3, [r4, #32]
 8000858:	d103      	bne.n	8000862 <HAL_RCC_OscConfig+0x3b2>
 800085a:	f043 0304 	orr.w	r3, r3, #4
 800085e:	6223      	str	r3, [r4, #32]
 8000860:	e791      	b.n	8000786 <HAL_RCC_OscConfig+0x2d6>
 8000862:	f023 0301 	bic.w	r3, r3, #1
 8000866:	6223      	str	r3, [r4, #32]
 8000868:	6a23      	ldr	r3, [r4, #32]
 800086a:	f023 0304 	bic.w	r3, r3, #4
 800086e:	e78d      	b.n	800078c <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000870:	f7ff fcec 	bl	800024c <HAL_GetTick>
 8000874:	f241 3388 	movw	r3, #5000	; 0x1388
 8000878:	eba0 000a 	sub.w	r0, r0, sl
 800087c:	4298      	cmp	r0, r3
 800087e:	d98d      	bls.n	800079c <HAL_RCC_OscConfig+0x2ec>
 8000880:	e67d      	b.n	800057e <HAL_RCC_OscConfig+0xce>
 8000882:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000886:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000888:	e78f      	b.n	80007aa <HAL_RCC_OscConfig+0x2fa>
 800088a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800088e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000890:	e7cd      	b.n	800082e <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000892:	4c41      	ldr	r4, [pc, #260]	; (8000998 <HAL_RCC_OscConfig+0x4e8>)
 8000894:	6863      	ldr	r3, [r4, #4]
 8000896:	f003 030c 	and.w	r3, r3, #12
 800089a:	2b08      	cmp	r3, #8
 800089c:	f43f ae0c 	beq.w	80004b8 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80008a0:	2a02      	cmp	r2, #2
 80008a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008a6:	d152      	bne.n	800094e <HAL_RCC_OscConfig+0x49e>
 80008a8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80008ac:	fab3 f383 	clz	r3, r3
 80008b0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80008b4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80008b8:	009b      	lsls	r3, r3, #2
 80008ba:	2200      	movs	r2, #0
 80008bc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80008be:	f7ff fcc5 	bl	800024c <HAL_GetTick>
 80008c2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80008c6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80008c8:	2601      	movs	r6, #1
 80008ca:	fa97 f3a7 	rbit	r3, r7
 80008ce:	6822      	ldr	r2, [r4, #0]
 80008d0:	fa97 f3a7 	rbit	r3, r7
 80008d4:	fab3 f383 	clz	r3, r3
 80008d8:	f003 031f 	and.w	r3, r3, #31
 80008dc:	fa06 f303 	lsl.w	r3, r6, r3
 80008e0:	4213      	tst	r3, r2
 80008e2:	d12d      	bne.n	8000940 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80008e4:	6862      	ldr	r2, [r4, #4]
 80008e6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80008e8:	6a29      	ldr	r1, [r5, #32]
 80008ea:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 80008ee:	430b      	orrs	r3, r1
 80008f0:	4313      	orrs	r3, r2
 80008f2:	6063      	str	r3, [r4, #4]
 80008f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80008f8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 80008fc:	fab3 f383 	clz	r3, r3
 8000900:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000904:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000908:	009b      	lsls	r3, r3, #2
 800090a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800090e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000910:	f7ff fc9c 	bl	800024c <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000914:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000916:	4607      	mov	r7, r0
 8000918:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800091c:	6822      	ldr	r2, [r4, #0]
 800091e:	fa95 f3a5 	rbit	r3, r5
 8000922:	fab3 f383 	clz	r3, r3
 8000926:	f003 031f 	and.w	r3, r3, #31
 800092a:	fa06 f303 	lsl.w	r3, r6, r3
 800092e:	4213      	tst	r3, r2
 8000930:	f47f add9 	bne.w	80004e6 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000934:	f7ff fc8a 	bl	800024c <HAL_GetTick>
 8000938:	1bc0      	subs	r0, r0, r7
 800093a:	2802      	cmp	r0, #2
 800093c:	d9ec      	bls.n	8000918 <HAL_RCC_OscConfig+0x468>
 800093e:	e61e      	b.n	800057e <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000940:	f7ff fc84 	bl	800024c <HAL_GetTick>
 8000944:	eba0 0008 	sub.w	r0, r0, r8
 8000948:	2802      	cmp	r0, #2
 800094a:	d9be      	bls.n	80008ca <HAL_RCC_OscConfig+0x41a>
 800094c:	e617      	b.n	800057e <HAL_RCC_OscConfig+0xce>
 800094e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000952:	fab3 f383 	clz	r3, r3
 8000956:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800095a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800095e:	009b      	lsls	r3, r3, #2
 8000960:	2200      	movs	r2, #0
 8000962:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000964:	f7ff fc72 	bl	800024c <HAL_GetTick>
 8000968:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800096c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800096e:	2601      	movs	r6, #1
 8000970:	fa95 f3a5 	rbit	r3, r5
 8000974:	6822      	ldr	r2, [r4, #0]
 8000976:	fa95 f3a5 	rbit	r3, r5
 800097a:	fab3 f383 	clz	r3, r3
 800097e:	f003 031f 	and.w	r3, r3, #31
 8000982:	fa06 f303 	lsl.w	r3, r6, r3
 8000986:	4213      	tst	r3, r2
 8000988:	f43f adad 	beq.w	80004e6 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800098c:	f7ff fc5e 	bl	800024c <HAL_GetTick>
 8000990:	1bc0      	subs	r0, r0, r7
 8000992:	2802      	cmp	r0, #2
 8000994:	d9ec      	bls.n	8000970 <HAL_RCC_OscConfig+0x4c0>
 8000996:	e5f2      	b.n	800057e <HAL_RCC_OscConfig+0xce>
 8000998:	40021000 	.word	0x40021000

0800099c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800099c:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 800099e:	4c13      	ldr	r4, [pc, #76]	; (80009ec <HAL_RCC_GetSysClockFreq+0x50>)
 80009a0:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80009a2:	f001 030c 	and.w	r3, r1, #12
 80009a6:	2b08      	cmp	r3, #8
 80009a8:	d11e      	bne.n	80009e8 <HAL_RCC_GetSysClockFreq+0x4c>
 80009aa:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80009ae:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80009b2:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80009b6:	fab3 f383 	clz	r3, r3
 80009ba:	fa22 f303 	lsr.w	r3, r2, r3
 80009be:	4a0c      	ldr	r2, [pc, #48]	; (80009f0 <HAL_RCC_GetSysClockFreq+0x54>)
 80009c0:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80009c2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80009c4:	220f      	movs	r2, #15
 80009c6:	fa92 f2a2 	rbit	r2, r2
 80009ca:	fab2 f282 	clz	r2, r2
 80009ce:	f003 030f 	and.w	r3, r3, #15
 80009d2:	40d3      	lsrs	r3, r2
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_RCC_GetSysClockFreq+0x58>)
 80009d6:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80009d8:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009da:	bf4a      	itet	mi
 80009dc:	4b06      	ldrmi	r3, [pc, #24]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80009de:	4b07      	ldrpl	r3, [pc, #28]	; (80009fc <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80009e0:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80009e4:	4358      	muls	r0, r3
 80009e6:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 80009e8:	4803      	ldr	r0, [pc, #12]	; (80009f8 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80009ea:	bd10      	pop	{r4, pc}
 80009ec:	40021000 	.word	0x40021000
 80009f0:	08001658 	.word	0x08001658
 80009f4:	08001668 	.word	0x08001668
 80009f8:	007a1200 	.word	0x007a1200
 80009fc:	003d0900 	.word	0x003d0900

08000a00 <HAL_RCC_ClockConfig>:
{
 8000a00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a04:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000a06:	4604      	mov	r4, r0
 8000a08:	b910      	cbnz	r0, 8000a10 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000a0a:	2001      	movs	r0, #1
 8000a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000a10:	4a4c      	ldr	r2, [pc, #304]	; (8000b44 <HAL_RCC_ClockConfig+0x144>)
 8000a12:	6813      	ldr	r3, [r2, #0]
 8000a14:	f003 0307 	and.w	r3, r3, #7
 8000a18:	428b      	cmp	r3, r1
 8000a1a:	d32e      	bcc.n	8000a7a <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000a1c:	6822      	ldr	r2, [r4, #0]
 8000a1e:	0791      	lsls	r1, r2, #30
 8000a20:	d436      	bmi.n	8000a90 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000a22:	07d2      	lsls	r2, r2, #31
 8000a24:	d43c      	bmi.n	8000aa0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000a26:	4a47      	ldr	r2, [pc, #284]	; (8000b44 <HAL_RCC_ClockConfig+0x144>)
 8000a28:	6813      	ldr	r3, [r2, #0]
 8000a2a:	f003 0307 	and.w	r3, r3, #7
 8000a2e:	429d      	cmp	r5, r3
 8000a30:	d375      	bcc.n	8000b1e <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000a32:	6822      	ldr	r2, [r4, #0]
 8000a34:	4d44      	ldr	r5, [pc, #272]	; (8000b48 <HAL_RCC_ClockConfig+0x148>)
 8000a36:	f012 0f04 	tst.w	r2, #4
 8000a3a:	d17c      	bne.n	8000b36 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000a3c:	0713      	lsls	r3, r2, #28
 8000a3e:	d506      	bpl.n	8000a4e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000a40:	686b      	ldr	r3, [r5, #4]
 8000a42:	6922      	ldr	r2, [r4, #16]
 8000a44:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000a48:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000a4c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000a4e:	f7ff ffa5 	bl	800099c <HAL_RCC_GetSysClockFreq>
 8000a52:	686b      	ldr	r3, [r5, #4]
 8000a54:	22f0      	movs	r2, #240	; 0xf0
 8000a56:	fa92 f2a2 	rbit	r2, r2
 8000a5a:	fab2 f282 	clz	r2, r2
 8000a5e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000a62:	40d3      	lsrs	r3, r2
 8000a64:	4a39      	ldr	r2, [pc, #228]	; (8000b4c <HAL_RCC_ClockConfig+0x14c>)
 8000a66:	5cd3      	ldrb	r3, [r2, r3]
 8000a68:	40d8      	lsrs	r0, r3
 8000a6a:	4b39      	ldr	r3, [pc, #228]	; (8000b50 <HAL_RCC_ClockConfig+0x150>)
 8000a6c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000a6e:	2000      	movs	r0, #0
 8000a70:	f7ff fbaa 	bl	80001c8 <HAL_InitTick>
  return HAL_OK;
 8000a74:	2000      	movs	r0, #0
 8000a76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000a7a:	6813      	ldr	r3, [r2, #0]
 8000a7c:	f023 0307 	bic.w	r3, r3, #7
 8000a80:	430b      	orrs	r3, r1
 8000a82:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000a84:	6813      	ldr	r3, [r2, #0]
 8000a86:	f003 0307 	and.w	r3, r3, #7
 8000a8a:	4299      	cmp	r1, r3
 8000a8c:	d1bd      	bne.n	8000a0a <HAL_RCC_ClockConfig+0xa>
 8000a8e:	e7c5      	b.n	8000a1c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000a90:	492d      	ldr	r1, [pc, #180]	; (8000b48 <HAL_RCC_ClockConfig+0x148>)
 8000a92:	68a0      	ldr	r0, [r4, #8]
 8000a94:	684b      	ldr	r3, [r1, #4]
 8000a96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000a9a:	4303      	orrs	r3, r0
 8000a9c:	604b      	str	r3, [r1, #4]
 8000a9e:	e7c0      	b.n	8000a22 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000aa0:	6862      	ldr	r2, [r4, #4]
 8000aa2:	4e29      	ldr	r6, [pc, #164]	; (8000b48 <HAL_RCC_ClockConfig+0x148>)
 8000aa4:	2a01      	cmp	r2, #1
 8000aa6:	d127      	bne.n	8000af8 <HAL_RCC_ClockConfig+0xf8>
 8000aa8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000aac:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000ab0:	6831      	ldr	r1, [r6, #0]
 8000ab2:	fa93 f3a3 	rbit	r3, r3
 8000ab6:	fab3 f383 	clz	r3, r3
 8000aba:	f003 031f 	and.w	r3, r3, #31
 8000abe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000ac4:	d0a1      	beq.n	8000a0a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000ac6:	6873      	ldr	r3, [r6, #4]
 8000ac8:	f023 0303 	bic.w	r3, r3, #3
 8000acc:	431a      	orrs	r2, r3
 8000ace:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000ad0:	f7ff fbbc 	bl	800024c <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ad4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000ad8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000ada:	6873      	ldr	r3, [r6, #4]
 8000adc:	6862      	ldr	r2, [r4, #4]
 8000ade:	f003 030c 	and.w	r3, r3, #12
 8000ae2:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000ae6:	d09e      	beq.n	8000a26 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000ae8:	f7ff fbb0 	bl	800024c <HAL_GetTick>
 8000aec:	1bc0      	subs	r0, r0, r7
 8000aee:	4540      	cmp	r0, r8
 8000af0:	d9f3      	bls.n	8000ada <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000af2:	2003      	movs	r0, #3
}
 8000af4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000af8:	2a02      	cmp	r2, #2
 8000afa:	bf0c      	ite	eq
 8000afc:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000b00:	2302      	movne	r3, #2
 8000b02:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000b06:	6830      	ldr	r0, [r6, #0]
 8000b08:	fa93 f3a3 	rbit	r3, r3
 8000b0c:	fab3 f383 	clz	r3, r3
 8000b10:	f003 031f 	and.w	r3, r3, #31
 8000b14:	2101      	movs	r1, #1
 8000b16:	fa01 f303 	lsl.w	r3, r1, r3
 8000b1a:	4203      	tst	r3, r0
 8000b1c:	e7d2      	b.n	8000ac4 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000b1e:	6813      	ldr	r3, [r2, #0]
 8000b20:	f023 0307 	bic.w	r3, r3, #7
 8000b24:	432b      	orrs	r3, r5
 8000b26:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000b28:	6813      	ldr	r3, [r2, #0]
 8000b2a:	f003 0307 	and.w	r3, r3, #7
 8000b2e:	429d      	cmp	r5, r3
 8000b30:	f47f af6b 	bne.w	8000a0a <HAL_RCC_ClockConfig+0xa>
 8000b34:	e77d      	b.n	8000a32 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000b36:	686b      	ldr	r3, [r5, #4]
 8000b38:	68e1      	ldr	r1, [r4, #12]
 8000b3a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b3e:	430b      	orrs	r3, r1
 8000b40:	606b      	str	r3, [r5, #4]
 8000b42:	e77b      	b.n	8000a3c <HAL_RCC_ClockConfig+0x3c>
 8000b44:	40022000 	.word	0x40022000
 8000b48:	40021000 	.word	0x40021000
 8000b4c:	0800167c 	.word	0x0800167c
 8000b50:	20000008 	.word	0x20000008

08000b54 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000b54:	4b08      	ldr	r3, [pc, #32]	; (8000b78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000b56:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000b5a:	685b      	ldr	r3, [r3, #4]
 8000b5c:	fa92 f2a2 	rbit	r2, r2
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000b68:	40d3      	lsrs	r3, r2
 8000b6a:	4a04      	ldr	r2, [pc, #16]	; (8000b7c <HAL_RCC_GetPCLK1Freq+0x28>)
 8000b6c:	5cd3      	ldrb	r3, [r2, r3]
 8000b6e:	4a04      	ldr	r2, [pc, #16]	; (8000b80 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000b70:	6810      	ldr	r0, [r2, #0]
}    
 8000b72:	40d8      	lsrs	r0, r3
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	40021000 	.word	0x40021000
 8000b7c:	0800168c 	.word	0x0800168c
 8000b80:	20000008 	.word	0x20000008

08000b84 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000b84:	4b08      	ldr	r3, [pc, #32]	; (8000ba8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000b86:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000b8a:	685b      	ldr	r3, [r3, #4]
 8000b8c:	fa92 f2a2 	rbit	r2, r2
 8000b90:	fab2 f282 	clz	r2, r2
 8000b94:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000b98:	40d3      	lsrs	r3, r2
 8000b9a:	4a04      	ldr	r2, [pc, #16]	; (8000bac <HAL_RCC_GetPCLK2Freq+0x28>)
 8000b9c:	5cd3      	ldrb	r3, [r2, r3]
 8000b9e:	4a04      	ldr	r2, [pc, #16]	; (8000bb0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000ba0:	6810      	ldr	r0, [r2, #0]
} 
 8000ba2:	40d8      	lsrs	r0, r3
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000
 8000bac:	0800168c 	.word	0x0800168c
 8000bb0:	20000008 	.word	0x20000008

08000bb4 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8000bb4:	6803      	ldr	r3, [r0, #0]
 8000bb6:	68da      	ldr	r2, [r3, #12]
 8000bb8:	f042 0201 	orr.w	r2, r2, #1
 8000bbc:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8000bbe:	681a      	ldr	r2, [r3, #0]
 8000bc0:	f042 0201 	orr.w	r2, r2, #1
 8000bc4:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8000bc6:	2000      	movs	r0, #0
 8000bc8:	4770      	bx	lr

08000bca <HAL_TIM_PeriodElapsedCallback>:
 8000bca:	4770      	bx	lr

08000bcc <HAL_TIM_OC_DelayElapsedCallback>:
 8000bcc:	4770      	bx	lr

08000bce <HAL_TIM_IC_CaptureCallback>:
 8000bce:	4770      	bx	lr

08000bd0 <HAL_TIM_PWM_PulseFinishedCallback>:
 8000bd0:	4770      	bx	lr

08000bd2 <HAL_TIM_TriggerCallback>:
 8000bd2:	4770      	bx	lr

08000bd4 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000bd4:	6803      	ldr	r3, [r0, #0]
 8000bd6:	691a      	ldr	r2, [r3, #16]
 8000bd8:	0791      	lsls	r1, r2, #30
{
 8000bda:	b510      	push	{r4, lr}
 8000bdc:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000bde:	d50f      	bpl.n	8000c00 <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000be0:	68da      	ldr	r2, [r3, #12]
 8000be2:	0792      	lsls	r2, r2, #30
 8000be4:	d50c      	bpl.n	8000c00 <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8000be6:	f06f 0202 	mvn.w	r2, #2
 8000bea:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000bec:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000bee:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000bf0:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000bf2:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000bf4:	f000 8085 	beq.w	8000d02 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000bf8:	f7ff ffe9 	bl	8000bce <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000bfc:	2300      	movs	r3, #0
 8000bfe:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000c00:	6823      	ldr	r3, [r4, #0]
 8000c02:	691a      	ldr	r2, [r3, #16]
 8000c04:	0752      	lsls	r2, r2, #29
 8000c06:	d510      	bpl.n	8000c2a <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000c08:	68da      	ldr	r2, [r3, #12]
 8000c0a:	0750      	lsls	r0, r2, #29
 8000c0c:	d50d      	bpl.n	8000c2a <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8000c0e:	f06f 0204 	mvn.w	r2, #4
 8000c12:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000c14:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000c16:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000c18:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000c1c:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c1e:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000c20:	d075      	beq.n	8000d0e <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c22:	f7ff ffd4 	bl	8000bce <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c26:	2300      	movs	r3, #0
 8000c28:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000c2a:	6823      	ldr	r3, [r4, #0]
 8000c2c:	691a      	ldr	r2, [r3, #16]
 8000c2e:	0711      	lsls	r1, r2, #28
 8000c30:	d50f      	bpl.n	8000c52 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000c32:	68da      	ldr	r2, [r3, #12]
 8000c34:	0712      	lsls	r2, r2, #28
 8000c36:	d50c      	bpl.n	8000c52 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8000c38:	f06f 0208 	mvn.w	r2, #8
 8000c3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c3e:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c40:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c42:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000c44:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c46:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000c48:	d067      	beq.n	8000d1a <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c4a:	f7ff ffc0 	bl	8000bce <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000c52:	6823      	ldr	r3, [r4, #0]
 8000c54:	691a      	ldr	r2, [r3, #16]
 8000c56:	06d0      	lsls	r0, r2, #27
 8000c58:	d510      	bpl.n	8000c7c <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000c5a:	68da      	ldr	r2, [r3, #12]
 8000c5c:	06d1      	lsls	r1, r2, #27
 8000c5e:	d50d      	bpl.n	8000c7c <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8000c60:	f06f 0210 	mvn.w	r2, #16
 8000c64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c66:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c68:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c6a:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000c6e:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000c70:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000c72:	d058      	beq.n	8000d26 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8000c74:	f7ff ffab 	bl	8000bce <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000c7c:	6823      	ldr	r3, [r4, #0]
 8000c7e:	691a      	ldr	r2, [r3, #16]
 8000c80:	07d2      	lsls	r2, r2, #31
 8000c82:	d508      	bpl.n	8000c96 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000c84:	68da      	ldr	r2, [r3, #12]
 8000c86:	07d0      	lsls	r0, r2, #31
 8000c88:	d505      	bpl.n	8000c96 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8000c8a:	f06f 0201 	mvn.w	r2, #1
 8000c8e:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000c90:	4620      	mov	r0, r4
 8000c92:	f7ff ff9a 	bl	8000bca <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000c96:	6823      	ldr	r3, [r4, #0]
 8000c98:	691a      	ldr	r2, [r3, #16]
 8000c9a:	0611      	lsls	r1, r2, #24
 8000c9c:	d508      	bpl.n	8000cb0 <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000c9e:	68da      	ldr	r2, [r3, #12]
 8000ca0:	0612      	lsls	r2, r2, #24
 8000ca2:	d505      	bpl.n	8000cb0 <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8000ca4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000ca8:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000caa:	4620      	mov	r0, r4
 8000cac:	f000 f989 	bl	8000fc2 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8000cb0:	6823      	ldr	r3, [r4, #0]
 8000cb2:	691a      	ldr	r2, [r3, #16]
 8000cb4:	05d0      	lsls	r0, r2, #23
 8000cb6:	d508      	bpl.n	8000cca <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000cb8:	68da      	ldr	r2, [r3, #12]
 8000cba:	0611      	lsls	r1, r2, #24
 8000cbc:	d505      	bpl.n	8000cca <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8000cbe:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8000cc2:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8000cc4:	4620      	mov	r0, r4
 8000cc6:	f000 f97d 	bl	8000fc4 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000cca:	6823      	ldr	r3, [r4, #0]
 8000ccc:	691a      	ldr	r2, [r3, #16]
 8000cce:	0652      	lsls	r2, r2, #25
 8000cd0:	d508      	bpl.n	8000ce4 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000cd2:	68da      	ldr	r2, [r3, #12]
 8000cd4:	0650      	lsls	r0, r2, #25
 8000cd6:	d505      	bpl.n	8000ce4 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8000cd8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000cdc:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000cde:	4620      	mov	r0, r4
 8000ce0:	f7ff ff77 	bl	8000bd2 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000ce4:	6823      	ldr	r3, [r4, #0]
 8000ce6:	691a      	ldr	r2, [r3, #16]
 8000ce8:	0691      	lsls	r1, r2, #26
 8000cea:	d522      	bpl.n	8000d32 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000cec:	68da      	ldr	r2, [r3, #12]
 8000cee:	0692      	lsls	r2, r2, #26
 8000cf0:	d51f      	bpl.n	8000d32 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000cf2:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000cf6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000cf8:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000cfe:	f000 b95f 	b.w	8000fc0 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d02:	f7ff ff63 	bl	8000bcc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d06:	4620      	mov	r0, r4
 8000d08:	f7ff ff62 	bl	8000bd0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000d0c:	e776      	b.n	8000bfc <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d0e:	f7ff ff5d 	bl	8000bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d12:	4620      	mov	r0, r4
 8000d14:	f7ff ff5c 	bl	8000bd0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000d18:	e785      	b.n	8000c26 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d1a:	f7ff ff57 	bl	8000bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000d1e:	4620      	mov	r0, r4
 8000d20:	f7ff ff56 	bl	8000bd0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000d24:	e793      	b.n	8000c4e <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000d26:	f7ff ff51 	bl	8000bcc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000d2a:	4620      	mov	r0, r4
 8000d2c:	f7ff ff50 	bl	8000bd0 <HAL_TIM_PWM_PulseFinishedCallback>
 8000d30:	e7a2      	b.n	8000c78 <HAL_TIM_IRQHandler+0xa4>
 8000d32:	bd10      	pop	{r4, pc}

08000d34 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d34:	4a21      	ldr	r2, [pc, #132]	; (8000dbc <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 8000d36:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d38:	4290      	cmp	r0, r2
{
 8000d3a:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000d3c:	d005      	beq.n	8000d4a <TIM_Base_SetConfig+0x16>
 8000d3e:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d42:	d002      	beq.n	8000d4a <TIM_Base_SetConfig+0x16>
 8000d44:	4c1e      	ldr	r4, [pc, #120]	; (8000dc0 <TIM_Base_SetConfig+0x8c>)
 8000d46:	42a0      	cmp	r0, r4
 8000d48:	d10c      	bne.n	8000d64 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000d4a:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d50:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8000d52:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000d56:	d010      	beq.n	8000d7a <TIM_Base_SetConfig+0x46>
 8000d58:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000d5c:	d00d      	beq.n	8000d7a <TIM_Base_SetConfig+0x46>
 8000d5e:	4a18      	ldr	r2, [pc, #96]	; (8000dc0 <TIM_Base_SetConfig+0x8c>)
 8000d60:	4290      	cmp	r0, r2
 8000d62:	d00a      	beq.n	8000d7a <TIM_Base_SetConfig+0x46>
 8000d64:	4a17      	ldr	r2, [pc, #92]	; (8000dc4 <TIM_Base_SetConfig+0x90>)
 8000d66:	4290      	cmp	r0, r2
 8000d68:	d007      	beq.n	8000d7a <TIM_Base_SetConfig+0x46>
 8000d6a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d6e:	4290      	cmp	r0, r2
 8000d70:	d003      	beq.n	8000d7a <TIM_Base_SetConfig+0x46>
 8000d72:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000d76:	4290      	cmp	r0, r2
 8000d78:	d103      	bne.n	8000d82 <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d7a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8000d7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8000d80:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8000d82:	694a      	ldr	r2, [r1, #20]
 8000d84:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000d88:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8000d8a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8000d8c:	688b      	ldr	r3, [r1, #8]
 8000d8e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8000d90:	680b      	ldr	r3, [r1, #0]
 8000d92:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <TIM_Base_SetConfig+0x88>)
 8000d96:	4298      	cmp	r0, r3
 8000d98:	d00b      	beq.n	8000db2 <TIM_Base_SetConfig+0x7e>
 8000d9a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 8000d9e:	4298      	cmp	r0, r3
 8000da0:	d007      	beq.n	8000db2 <TIM_Base_SetConfig+0x7e>
 8000da2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000da6:	4298      	cmp	r0, r3
 8000da8:	d003      	beq.n	8000db2 <TIM_Base_SetConfig+0x7e>
 8000daa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8000dae:	4298      	cmp	r0, r3
 8000db0:	d101      	bne.n	8000db6 <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8000db2:	690b      	ldr	r3, [r1, #16]
 8000db4:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8000db6:	2301      	movs	r3, #1
 8000db8:	6143      	str	r3, [r0, #20]
 8000dba:	bd10      	pop	{r4, pc}
 8000dbc:	40012c00 	.word	0x40012c00
 8000dc0:	40000400 	.word	0x40000400
 8000dc4:	40014000 	.word	0x40014000

08000dc8 <HAL_TIM_Base_Init>:
{ 
 8000dc8:	b510      	push	{r4, lr}
  if(htim == NULL)
 8000dca:	4604      	mov	r4, r0
 8000dcc:	b1a0      	cbz	r0, 8000df8 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8000dce:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8000dd2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000dd6:	b91b      	cbnz	r3, 8000de0 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8000dd8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8000ddc:	f000 fb40 	bl	8001460 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8000de0:	2302      	movs	r3, #2
 8000de2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8000de6:	6820      	ldr	r0, [r4, #0]
 8000de8:	1d21      	adds	r1, r4, #4
 8000dea:	f7ff ffa3 	bl	8000d34 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 8000dee:	2301      	movs	r3, #1
 8000df0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8000df4:	2000      	movs	r0, #0
 8000df6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8000df8:	2001      	movs	r0, #1
}
 8000dfa:	bd10      	pop	{r4, pc}

08000dfc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8000dfc:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 8000dfe:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e00:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e02:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8000e06:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8000e0a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8000e0c:	6083      	str	r3, [r0, #8]
 8000e0e:	bd10      	pop	{r4, pc}

08000e10 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 8000e10:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000e14:	2b01      	cmp	r3, #1
{
 8000e16:	b570      	push	{r4, r5, r6, lr}
 8000e18:	4604      	mov	r4, r0
 8000e1a:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 8000e1e:	d01a      	beq.n	8000e56 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 8000e20:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 8000e24:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 8000e26:	2301      	movs	r3, #1
 8000e28:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 8000e2c:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8000e2e:	4b52      	ldr	r3, [pc, #328]	; (8000f78 <HAL_TIM_ConfigClockSource+0x168>)
 8000e30:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 8000e32:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 8000e34:	680b      	ldr	r3, [r1, #0]
 8000e36:	2b40      	cmp	r3, #64	; 0x40
 8000e38:	d075      	beq.n	8000f26 <HAL_TIM_ConfigClockSource+0x116>
 8000e3a:	d818      	bhi.n	8000e6e <HAL_TIM_ConfigClockSource+0x5e>
 8000e3c:	2b10      	cmp	r3, #16
 8000e3e:	f000 808f 	beq.w	8000f60 <HAL_TIM_ConfigClockSource+0x150>
 8000e42:	d809      	bhi.n	8000e58 <HAL_TIM_ConfigClockSource+0x48>
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	f000 8085 	beq.w	8000f54 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 8000e4a:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 8000e4c:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8000e4e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8000e52:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 8000e56:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 8000e58:	2b20      	cmp	r3, #32
 8000e5a:	f000 8087 	beq.w	8000f6c <HAL_TIM_ConfigClockSource+0x15c>
 8000e5e:	2b30      	cmp	r3, #48	; 0x30
 8000e60:	d1f3      	bne.n	8000e4a <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 8000e62:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000e68:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 8000e6c:	e033      	b.n	8000ed6 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8000e6e:	2b70      	cmp	r3, #112	; 0x70
 8000e70:	d033      	beq.n	8000eda <HAL_TIM_ConfigClockSource+0xca>
 8000e72:	d81b      	bhi.n	8000eac <HAL_TIM_ConfigClockSource+0x9c>
 8000e74:	2b50      	cmp	r3, #80	; 0x50
 8000e76:	d03f      	beq.n	8000ef8 <HAL_TIM_ConfigClockSource+0xe8>
 8000e78:	2b60      	cmp	r3, #96	; 0x60
 8000e7a:	d1e6      	bne.n	8000e4a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8000e7c:	684d      	ldr	r5, [r1, #4]
 8000e7e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8000e80:	6a01      	ldr	r1, [r0, #32]
 8000e82:	f021 0110 	bic.w	r1, r1, #16
 8000e86:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8000e88:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8000e8a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8000e8c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8000e90:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8000e94:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8000e98:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8000e9c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8000e9e:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000ea0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000ea2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000ea6:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8000eaa:	e014      	b.n	8000ed6 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8000eac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000eb0:	d00c      	beq.n	8000ecc <HAL_TIM_ConfigClockSource+0xbc>
 8000eb2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000eb6:	d1c8      	bne.n	8000e4a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8000eb8:	68cb      	ldr	r3, [r1, #12]
 8000eba:	684a      	ldr	r2, [r1, #4]
 8000ebc:	6889      	ldr	r1, [r1, #8]
 8000ebe:	f7ff ff9d 	bl	8000dfc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000ec2:	6822      	ldr	r2, [r4, #0]
 8000ec4:	6893      	ldr	r3, [r2, #8]
 8000ec6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000eca:	e013      	b.n	8000ef4 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8000ecc:	6883      	ldr	r3, [r0, #8]
 8000ece:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed2:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8000ed6:	6083      	str	r3, [r0, #8]
 8000ed8:	e7b7      	b.n	8000e4a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8000eda:	68cb      	ldr	r3, [r1, #12]
 8000edc:	684a      	ldr	r2, [r1, #4]
 8000ede:	6889      	ldr	r1, [r1, #8]
 8000ee0:	f7ff ff8c 	bl	8000dfc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8000ee4:	6822      	ldr	r2, [r4, #0]
 8000ee6:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8000ee8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000eec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8000ef0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8000ef4:	6093      	str	r3, [r2, #8]
    break;
 8000ef6:	e7a8      	b.n	8000e4a <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000ef8:	684a      	ldr	r2, [r1, #4]
 8000efa:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000efc:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000efe:	6a05      	ldr	r5, [r0, #32]
 8000f00:	f025 0501 	bic.w	r5, r5, #1
 8000f04:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000f06:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f08:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f0c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f10:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000f14:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000f16:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f18:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000f1a:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f1c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f20:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8000f24:	e7d7      	b.n	8000ed6 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8000f26:	684a      	ldr	r2, [r1, #4]
 8000f28:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8000f2a:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8000f2c:	6a05      	ldr	r5, [r0, #32]
 8000f2e:	f025 0501 	bic.w	r5, r5, #1
 8000f32:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8000f34:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8000f36:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8000f3a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8000f3e:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8000f42:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8000f44:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8000f46:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8000f48:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f4e:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8000f52:	e7c0      	b.n	8000ed6 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8000f54:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f56:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f5a:	f043 0307 	orr.w	r3, r3, #7
 8000f5e:	e7ba      	b.n	8000ed6 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8000f60:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f62:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f66:	f043 0317 	orr.w	r3, r3, #23
 8000f6a:	e7b4      	b.n	8000ed6 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8000f6c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8000f6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8000f72:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8000f76:	e7ae      	b.n	8000ed6 <HAL_TIM_ConfigClockSource+0xc6>
 8000f78:	fffe0088 	.word	0xfffe0088

08000f7c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8000f7c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8000f80:	2b01      	cmp	r3, #1
{
 8000f82:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8000f84:	d018      	beq.n	8000fb8 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8000f86:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8000f88:	4d0c      	ldr	r5, [pc, #48]	; (8000fbc <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8000f8a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8000f8c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8000f8e:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8000f90:	bf02      	ittt	eq
 8000f92:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8000f94:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8000f98:	432b      	orreq	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000f9a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000f9c:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8000f9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8000fa2:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8000fa4:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8000fa8:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8000faa:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8000fac:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8000fae:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8000fb0:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8000fb8:	2002      	movs	r0, #2
} 
 8000fba:	bd30      	pop	{r4, r5, pc}
 8000fbc:	40012c00 	.word	0x40012c00

08000fc0 <HAL_TIMEx_CommutationCallback>:
 8000fc0:	4770      	bx	lr

08000fc2 <HAL_TIMEx_BreakCallback>:
 8000fc2:	4770      	bx	lr

08000fc4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8000fc4:	4770      	bx	lr
	...

08000fc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8000fc8:	b538      	push	{r3, r4, r5, lr}
 8000fca:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000fcc:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000fce:	6921      	ldr	r1, [r4, #16]
 8000fd0:	68a3      	ldr	r3, [r4, #8]
 8000fd2:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000fd4:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000fd6:	430b      	orrs	r3, r1
 8000fd8:	6961      	ldr	r1, [r4, #20]
 8000fda:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000fdc:	4949      	ldr	r1, [pc, #292]	; (8001104 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8000fde:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8000fe0:	4001      	ands	r1, r0
 8000fe2:	430b      	orrs	r3, r1
 8000fe4:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000fe6:	686b      	ldr	r3, [r5, #4]
 8000fe8:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000fea:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8000fec:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000ff0:	430b      	orrs	r3, r1
 8000ff2:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000ff4:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000ff6:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000ff8:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8000ffc:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8000ffe:	430b      	orrs	r3, r1
 8001000:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001002:	4b41      	ldr	r3, [pc, #260]	; (8001108 <UART_SetConfig+0x140>)
 8001004:	429d      	cmp	r5, r3
 8001006:	d112      	bne.n	800102e <UART_SetConfig+0x66>
 8001008:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800100c:	493f      	ldr	r1, [pc, #252]	; (800110c <UART_SetConfig+0x144>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001014:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001018:	5ccb      	ldrb	r3, [r1, r3]
 800101a:	d13b      	bne.n	8001094 <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 800101c:	2b08      	cmp	r3, #8
 800101e:	d836      	bhi.n	800108e <UART_SetConfig+0xc6>
 8001020:	e8df f003 	tbb	[pc, r3]
 8001024:	3524210f 	.word	0x3524210f
 8001028:	3535352d 	.word	0x3535352d
 800102c:	30          	.byte	0x30
 800102d:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 800102e:	4b38      	ldr	r3, [pc, #224]	; (8001110 <UART_SetConfig+0x148>)
 8001030:	429d      	cmp	r5, r3
 8001032:	d003      	beq.n	800103c <UART_SetConfig+0x74>
 8001034:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001038:	429d      	cmp	r5, r3
 800103a:	d15e      	bne.n	80010fa <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800103c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001040:	d131      	bne.n	80010a6 <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001042:	f7ff fd87 	bl	8000b54 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001046:	6861      	ldr	r1, [r4, #4]
 8001048:	084a      	lsrs	r2, r1, #1
 800104a:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 800104e:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001052:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001054:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001056:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 800105a:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800105c:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001060:	4313      	orrs	r3, r2
 8001062:	60cb      	str	r3, [r1, #12]
 8001064:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001066:	f7ff fd8d 	bl	8000b84 <HAL_RCC_GetPCLK2Freq>
 800106a:	e7ec      	b.n	8001046 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800106c:	6860      	ldr	r0, [r4, #4]
 800106e:	0843      	lsrs	r3, r0, #1
 8001070:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001074:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001078:	fbb3 f3f0 	udiv	r3, r3, r0
 800107c:	e7e9      	b.n	8001052 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800107e:	f7ff fc8d 	bl	800099c <HAL_RCC_GetSysClockFreq>
 8001082:	e7e0      	b.n	8001046 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001084:	6860      	ldr	r0, [r4, #4]
 8001086:	0843      	lsrs	r3, r0, #1
 8001088:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800108c:	e7f4      	b.n	8001078 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 800108e:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001090:	2300      	movs	r3, #0
 8001092:	e7e0      	b.n	8001056 <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 8001094:	2b08      	cmp	r3, #8
 8001096:	d833      	bhi.n	8001100 <UART_SetConfig+0x138>
 8001098:	e8df f003 	tbb	[pc, r3]
 800109c:	321b1005 	.word	0x321b1005
 80010a0:	32323227 	.word	0x32323227
 80010a4:	2a          	.byte	0x2a
 80010a5:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80010a6:	f7ff fd55 	bl	8000b54 <HAL_RCC_GetPCLK1Freq>
 80010aa:	6863      	ldr	r3, [r4, #4]
 80010ac:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80010b0:	fbb0 f0f3 	udiv	r0, r0, r3
 80010b4:	b280      	uxth	r0, r0
 80010b6:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 80010b8:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 80010ba:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80010bc:	f7ff fd62 	bl	8000b84 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80010c0:	6863      	ldr	r3, [r4, #4]
 80010c2:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 80010c6:	fbb0 f0f3 	udiv	r0, r0, r3
 80010ca:	4b0f      	ldr	r3, [pc, #60]	; (8001108 <UART_SetConfig+0x140>)
 80010cc:	b280      	uxth	r0, r0
 80010ce:	60d8      	str	r0, [r3, #12]
 80010d0:	e7f2      	b.n	80010b8 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80010d2:	6862      	ldr	r2, [r4, #4]
 80010d4:	0853      	lsrs	r3, r2, #1
 80010d6:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 80010da:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80010de:	fbb3 f3f2 	udiv	r3, r3, r2
 80010e2:	4a09      	ldr	r2, [pc, #36]	; (8001108 <UART_SetConfig+0x140>)
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	60d3      	str	r3, [r2, #12]
 80010e8:	e7e6      	b.n	80010b8 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80010ea:	f7ff fc57 	bl	800099c <HAL_RCC_GetSysClockFreq>
 80010ee:	e7e7      	b.n	80010c0 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80010f0:	6862      	ldr	r2, [r4, #4]
 80010f2:	0853      	lsrs	r3, r2, #1
 80010f4:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80010f8:	e7f1      	b.n	80010de <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010fa:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80010fe:	d0c6      	beq.n	800108e <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001100:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001102:	bd38      	pop	{r3, r4, r5, pc}
 8001104:	efff69f3 	.word	0xefff69f3
 8001108:	40013800 	.word	0x40013800
 800110c:	08001678 	.word	0x08001678
 8001110:	40004400 	.word	0x40004400

08001114 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001114:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001116:	07da      	lsls	r2, r3, #31
{
 8001118:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800111a:	d506      	bpl.n	800112a <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800111c:	6801      	ldr	r1, [r0, #0]
 800111e:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001120:	684a      	ldr	r2, [r1, #4]
 8001122:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001126:	4322      	orrs	r2, r4
 8001128:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800112a:	079c      	lsls	r4, r3, #30
 800112c:	d506      	bpl.n	800113c <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800112e:	6801      	ldr	r1, [r0, #0]
 8001130:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001132:	684a      	ldr	r2, [r1, #4]
 8001134:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001138:	4322      	orrs	r2, r4
 800113a:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800113c:	0759      	lsls	r1, r3, #29
 800113e:	d506      	bpl.n	800114e <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001140:	6801      	ldr	r1, [r0, #0]
 8001142:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001144:	684a      	ldr	r2, [r1, #4]
 8001146:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800114a:	4322      	orrs	r2, r4
 800114c:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800114e:	071a      	lsls	r2, r3, #28
 8001150:	d506      	bpl.n	8001160 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001152:	6801      	ldr	r1, [r0, #0]
 8001154:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001156:	684a      	ldr	r2, [r1, #4]
 8001158:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800115c:	4322      	orrs	r2, r4
 800115e:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001160:	06dc      	lsls	r4, r3, #27
 8001162:	d506      	bpl.n	8001172 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001164:	6801      	ldr	r1, [r0, #0]
 8001166:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001168:	688a      	ldr	r2, [r1, #8]
 800116a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800116e:	4322      	orrs	r2, r4
 8001170:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001172:	0699      	lsls	r1, r3, #26
 8001174:	d506      	bpl.n	8001184 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001176:	6801      	ldr	r1, [r0, #0]
 8001178:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800117a:	688a      	ldr	r2, [r1, #8]
 800117c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001180:	4322      	orrs	r2, r4
 8001182:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001184:	065a      	lsls	r2, r3, #25
 8001186:	d50f      	bpl.n	80011a8 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001188:	6801      	ldr	r1, [r0, #0]
 800118a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800118c:	684a      	ldr	r2, [r1, #4]
 800118e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001192:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001194:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001198:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800119a:	d105      	bne.n	80011a8 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800119c:	684a      	ldr	r2, [r1, #4]
 800119e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 80011a0:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 80011a4:	4322      	orrs	r2, r4
 80011a6:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80011a8:	061b      	lsls	r3, r3, #24
 80011aa:	d506      	bpl.n	80011ba <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80011ac:	6802      	ldr	r2, [r0, #0]
 80011ae:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80011b0:	6853      	ldr	r3, [r2, #4]
 80011b2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80011b6:	430b      	orrs	r3, r1
 80011b8:	6053      	str	r3, [r2, #4]
 80011ba:	bd10      	pop	{r4, pc}

080011bc <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80011bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80011c0:	9d06      	ldr	r5, [sp, #24]
 80011c2:	4604      	mov	r4, r0
 80011c4:	460f      	mov	r7, r1
 80011c6:	4616      	mov	r6, r2
 80011c8:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80011ca:	6821      	ldr	r1, [r4, #0]
 80011cc:	69ca      	ldr	r2, [r1, #28]
 80011ce:	ea37 0302 	bics.w	r3, r7, r2
 80011d2:	bf0c      	ite	eq
 80011d4:	2201      	moveq	r2, #1
 80011d6:	2200      	movne	r2, #0
 80011d8:	42b2      	cmp	r2, r6
 80011da:	d002      	beq.n	80011e2 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 80011dc:	2000      	movs	r0, #0
}
 80011de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80011e2:	1c6b      	adds	r3, r5, #1
 80011e4:	d0f2      	beq.n	80011cc <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80011e6:	b99d      	cbnz	r5, 8001210 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80011e8:	6823      	ldr	r3, [r4, #0]
 80011ea:	681a      	ldr	r2, [r3, #0]
 80011ec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80011f0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80011f2:	689a      	ldr	r2, [r3, #8]
 80011f4:	f022 0201 	bic.w	r2, r2, #1
 80011f8:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 80011fa:	2320      	movs	r3, #32
 80011fc:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001200:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001204:	2300      	movs	r3, #0
 8001206:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800120a:	2003      	movs	r0, #3
 800120c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001210:	f7ff f81c 	bl	800024c <HAL_GetTick>
 8001214:	eba0 0008 	sub.w	r0, r0, r8
 8001218:	4285      	cmp	r5, r0
 800121a:	d2d6      	bcs.n	80011ca <UART_WaitOnFlagUntilTimeout+0xe>
 800121c:	e7e4      	b.n	80011e8 <UART_WaitOnFlagUntilTimeout+0x2c>

0800121e <UART_CheckIdleState>:
{
 800121e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001220:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001222:	2600      	movs	r6, #0
 8001224:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001226:	f7ff f811 	bl	800024c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800122a:	6823      	ldr	r3, [r4, #0]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001230:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001232:	d417      	bmi.n	8001264 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001234:	6823      	ldr	r3, [r4, #0]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	075b      	lsls	r3, r3, #29
 800123a:	d50a      	bpl.n	8001252 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800123c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001240:	9300      	str	r3, [sp, #0]
 8001242:	2200      	movs	r2, #0
 8001244:	462b      	mov	r3, r5
 8001246:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800124a:	4620      	mov	r0, r4
 800124c:	f7ff ffb6 	bl	80011bc <UART_WaitOnFlagUntilTimeout>
 8001250:	b9a0      	cbnz	r0, 800127c <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001252:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001254:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001256:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800125a:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 800125e:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001262:	e00c      	b.n	800127e <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001264:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001268:	9300      	str	r3, [sp, #0]
 800126a:	4632      	mov	r2, r6
 800126c:	4603      	mov	r3, r0
 800126e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001272:	4620      	mov	r0, r4
 8001274:	f7ff ffa2 	bl	80011bc <UART_WaitOnFlagUntilTimeout>
 8001278:	2800      	cmp	r0, #0
 800127a:	d0db      	beq.n	8001234 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 800127c:	2003      	movs	r0, #3
}
 800127e:	b002      	add	sp, #8
 8001280:	bd70      	pop	{r4, r5, r6, pc}

08001282 <HAL_UART_Init>:
{
 8001282:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001284:	4604      	mov	r4, r0
 8001286:	b360      	cbz	r0, 80012e2 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001288:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 800128c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001290:	b91b      	cbnz	r3, 800129a <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001292:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001296:	f000 f8ff 	bl	8001498 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800129a:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800129c:	2324      	movs	r3, #36	; 0x24
 800129e:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80012a2:	6813      	ldr	r3, [r2, #0]
 80012a4:	f023 0301 	bic.w	r3, r3, #1
 80012a8:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80012aa:	4620      	mov	r0, r4
 80012ac:	f7ff fe8c 	bl	8000fc8 <UART_SetConfig>
 80012b0:	2801      	cmp	r0, #1
 80012b2:	d016      	beq.n	80012e2 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80012b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80012b6:	b113      	cbz	r3, 80012be <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80012b8:	4620      	mov	r0, r4
 80012ba:	f7ff ff2b 	bl	8001114 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	685a      	ldr	r2, [r3, #4]
 80012c2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80012c6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80012c8:	689a      	ldr	r2, [r3, #8]
 80012ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80012ce:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80012d0:	681a      	ldr	r2, [r3, #0]
 80012d2:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80012d6:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80012d8:	601a      	str	r2, [r3, #0]
}
 80012da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80012de:	f7ff bf9e 	b.w	800121e <UART_CheckIdleState>
}
 80012e2:	2001      	movs	r0, #1
 80012e4:	bd10      	pop	{r4, pc}

080012e6 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012e6:	b510      	push	{r4, lr}
 80012e8:	b090      	sub	sp, #64	; 0x40
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012ea:	2228      	movs	r2, #40	; 0x28
 80012ec:	2100      	movs	r1, #0
 80012ee:	a806      	add	r0, sp, #24
 80012f0:	f000 f99e 	bl	8001630 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012f4:	2214      	movs	r2, #20
 80012f6:	2100      	movs	r1, #0
 80012f8:	a801      	add	r0, sp, #4
 80012fa:	f000 f999 	bl	8001630 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012fe:	2301      	movs	r3, #1
 8001300:	930a      	str	r3, [sp, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001302:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001304:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001306:	930b      	str	r3, [sp, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001308:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800130a:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800130e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001310:	9406      	str	r4, [sp, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001312:	940d      	str	r4, [sp, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001314:	f7ff f8cc 	bl	80004b0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001318:	230f      	movs	r3, #15
 800131a:	9301      	str	r3, [sp, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131c:	f44f 6280 	mov.w	r2, #1024	; 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001320:	2300      	movs	r3, #0
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001322:	4621      	mov	r1, r4
 8001324:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001326:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001328:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800132a:	9204      	str	r2, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800132c:	9305      	str	r3, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800132e:	f7ff fb67 	bl	8000a00 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
}
 8001332:	b010      	add	sp, #64	; 0x40
 8001334:	bd10      	pop	{r4, pc}
	...

08001338 <main>:
{
 8001338:	b500      	push	{lr}
 800133a:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 800133c:	f7fe ff68 	bl	8000210 <HAL_Init>
  SystemClock_Config();
 8001340:	f7ff ffd1 	bl	80012e6 <SystemClock_Config>
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001344:	2214      	movs	r2, #20
 8001346:	2100      	movs	r1, #0
 8001348:	a807      	add	r0, sp, #28
 800134a:	f000 f971 	bl	8001630 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800134e:	4b33      	ldr	r3, [pc, #204]	; (800141c <main+0xe4>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001350:	4833      	ldr	r0, [pc, #204]	; (8001420 <main+0xe8>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001352:	695a      	ldr	r2, [r3, #20]
  htim2.Instance = TIM2;
 8001354:	4d33      	ldr	r5, [pc, #204]	; (8001424 <main+0xec>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001356:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	695a      	ldr	r2, [r3, #20]
 800135e:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001362:	9201      	str	r2, [sp, #4]
 8001364:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001366:	695a      	ldr	r2, [r3, #20]
 8001368:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800136c:	615a      	str	r2, [r3, #20]
 800136e:	695a      	ldr	r2, [r3, #20]
 8001370:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001374:	9202      	str	r2, [sp, #8]
 8001376:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001378:	695a      	ldr	r2, [r3, #20]
 800137a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800137e:	615a      	str	r2, [r3, #20]
 8001380:	695b      	ldr	r3, [r3, #20]
 8001382:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001386:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800138a:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800138c:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800138e:	f7ff f885 	bl	800049c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8001392:	2308      	movs	r3, #8
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001394:	2400      	movs	r4, #0
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001396:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = LD3_Pin;
 8001398:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 800139a:	4821      	ldr	r0, [pc, #132]	; (8001420 <main+0xe8>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800139c:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800139e:	2301      	movs	r3, #1
 80013a0:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013a2:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80013a4:	f7fe ffc0 	bl	8000328 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 80013a8:	481f      	ldr	r0, [pc, #124]	; (8001428 <main+0xf0>)
  huart2.Init.BaudRate = 38400;
 80013aa:	4a20      	ldr	r2, [pc, #128]	; (800142c <main+0xf4>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80013ac:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 80013ae:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80013b2:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013b6:	230c      	movs	r3, #12
 80013b8:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80013ba:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013bc:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013be:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013c0:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013c2:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c4:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013c6:	f7ff ff5c 	bl	8001282 <HAL_UART_Init>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ca:	2210      	movs	r2, #16
 80013cc:	4621      	mov	r1, r4
 80013ce:	a807      	add	r0, sp, #28
 80013d0:	f000 f92e 	bl	8001630 <memset>
  htim2.Init.Prescaler = 31999;
 80013d4:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80013d8:	f647 43ff 	movw	r3, #31999	; 0x7cff
 80013dc:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013e0:	4628      	mov	r0, r5
  htim2.Init.Period = 999;
 80013e2:	f240 33e7 	movw	r3, #999	; 0x3e7
 80013e6:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e8:	9404      	str	r4, [sp, #16]
 80013ea:	9405      	str	r4, [sp, #20]
 80013ec:	9406      	str	r4, [sp, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ee:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f0:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f2:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013f4:	f7ff fce8 	bl	8000dc8 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013fc:	a907      	add	r1, sp, #28
 80013fe:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001400:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001402:	f7ff fd05 	bl	8000e10 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001406:	a904      	add	r1, sp, #16
 8001408:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800140a:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800140c:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800140e:	f7ff fdb5 	bl	8000f7c <HAL_TIMEx_MasterConfigSynchronization>
  HAL_TIM_Base_Start_IT(&htim2);
 8001412:	4628      	mov	r0, r5
 8001414:	f7ff fbce 	bl	8000bb4 <HAL_TIM_Base_Start_IT>
 8001418:	e7fe      	b.n	8001418 <main+0xe0>
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000
 8001420:	48000400 	.word	0x48000400
 8001424:	2000002c 	.word	0x2000002c
 8001428:	2000006c 	.word	0x2000006c
 800142c:	40004400 	.word	0x40004400

08001430 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001430:	4b0a      	ldr	r3, [pc, #40]	; (800145c <HAL_MspInit+0x2c>)
 8001432:	699a      	ldr	r2, [r3, #24]
 8001434:	f042 0201 	orr.w	r2, r2, #1
 8001438:	619a      	str	r2, [r3, #24]
 800143a:	699a      	ldr	r2, [r3, #24]
{
 800143c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800143e:	f002 0201 	and.w	r2, r2, #1
 8001442:	9200      	str	r2, [sp, #0]
 8001444:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001446:	69da      	ldr	r2, [r3, #28]
 8001448:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800144c:	61da      	str	r2, [r3, #28]
 800144e:	69db      	ldr	r3, [r3, #28]
 8001450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001454:	9301      	str	r3, [sp, #4]
 8001456:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001458:	b002      	add	sp, #8
 800145a:	4770      	bx	lr
 800145c:	40021000 	.word	0x40021000

08001460 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8001460:	6803      	ldr	r3, [r0, #0]
 8001462:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8001466:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8001468:	d112      	bne.n	8001490 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800146a:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800146e:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001470:	69da      	ldr	r2, [r3, #28]
 8001472:	f042 0201 	orr.w	r2, r2, #1
 8001476:	61da      	str	r2, [r3, #28]
 8001478:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800147a:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 800147c:	f003 0301 	and.w	r3, r3, #1
 8001480:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001482:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001484:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001486:	f7fe fef9 	bl	800027c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800148a:	201c      	movs	r0, #28
 800148c:	f7fe ff2a 	bl	80002e4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001490:	b003      	add	sp, #12
 8001492:	f85d fb04 	ldr.w	pc, [sp], #4
	...

08001498 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001498:	b510      	push	{r4, lr}
 800149a:	4604      	mov	r4, r0
 800149c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800149e:	2214      	movs	r2, #20
 80014a0:	2100      	movs	r1, #0
 80014a2:	a803      	add	r0, sp, #12
 80014a4:	f000 f8c4 	bl	8001630 <memset>
  if(huart->Instance==USART2)
 80014a8:	6822      	ldr	r2, [r4, #0]
 80014aa:	4b13      	ldr	r3, [pc, #76]	; (80014f8 <HAL_UART_MspInit+0x60>)
 80014ac:	429a      	cmp	r2, r3
 80014ae:	d121      	bne.n	80014f4 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b0:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014b4:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 80014b6:	69da      	ldr	r2, [r3, #28]
 80014b8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014bc:	61da      	str	r2, [r3, #28]
 80014be:	69da      	ldr	r2, [r3, #28]
 80014c0:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80014c4:	9201      	str	r2, [sp, #4]
 80014c6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014c8:	695a      	ldr	r2, [r3, #20]
 80014ca:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80014ce:	615a      	str	r2, [r3, #20]
 80014d0:	695b      	ldr	r3, [r3, #20]
 80014d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d6:	9302      	str	r3, [sp, #8]
 80014d8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80014da:	f248 0304 	movw	r3, #32772	; 0x8004
 80014de:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e0:	2302      	movs	r3, #2
 80014e2:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80014ec:	2307      	movs	r3, #7
 80014ee:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014f0:	f7fe ff1a 	bl	8000328 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80014f4:	b008      	add	sp, #32
 80014f6:	bd10      	pop	{r4, pc}
 80014f8:	40004400 	.word	0x40004400

080014fc <NMI_Handler>:
 80014fc:	4770      	bx	lr

080014fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80014fe:	e7fe      	b.n	80014fe <HardFault_Handler>

08001500 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001500:	e7fe      	b.n	8001500 <MemManage_Handler>

08001502 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001502:	e7fe      	b.n	8001502 <BusFault_Handler>

08001504 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001504:	e7fe      	b.n	8001504 <UsageFault_Handler>

08001506 <SVC_Handler>:
 8001506:	4770      	bx	lr

08001508 <DebugMon_Handler>:
 8001508:	4770      	bx	lr

0800150a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800150a:	4770      	bx	lr

0800150c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800150c:	f7fe be92 	b.w	8000234 <HAL_IncTick>

08001510 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001510:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8001512:	4804      	ldr	r0, [pc, #16]	; (8001524 <TIM2_IRQHandler+0x14>)
 8001514:	2108      	movs	r1, #8
 8001516:	f7fe ffc6 	bl	80004a6 <HAL_GPIO_TogglePin>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800151a:	4803      	ldr	r0, [pc, #12]	; (8001528 <TIM2_IRQHandler+0x18>)
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800151c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim2);
 8001520:	f7ff bb58 	b.w	8000bd4 <HAL_TIM_IRQHandler>
 8001524:	48000400 	.word	0x48000400
 8001528:	2000002c 	.word	0x2000002c

0800152c <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800152c:	4915      	ldr	r1, [pc, #84]	; (8001584 <SystemInit+0x58>)
 800152e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001532:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001536:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800153a:	4b13      	ldr	r3, [pc, #76]	; (8001588 <SystemInit+0x5c>)
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001544:	6858      	ldr	r0, [r3, #4]
 8001546:	4a11      	ldr	r2, [pc, #68]	; (800158c <SystemInit+0x60>)
 8001548:	4002      	ands	r2, r0
 800154a:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 800154c:	681a      	ldr	r2, [r3, #0]
 800154e:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001552:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001556:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800155e:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001560:	685a      	ldr	r2, [r3, #4]
 8001562:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001566:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001568:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800156a:	f022 020f 	bic.w	r2, r2, #15
 800156e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001570:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001572:	4a07      	ldr	r2, [pc, #28]	; (8001590 <SystemInit+0x64>)
 8001574:	4002      	ands	r2, r0
 8001576:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001578:	2200      	movs	r2, #0
 800157a:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800157c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001580:	608b      	str	r3, [r1, #8]
 8001582:	4770      	bx	lr
 8001584:	e000ed00 	.word	0xe000ed00
 8001588:	40021000 	.word	0x40021000
 800158c:	f87fc00c 	.word	0xf87fc00c
 8001590:	ff00fccc 	.word	0xff00fccc

08001594 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80015cc <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001598:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800159a:	e003      	b.n	80015a4 <LoopCopyDataInit>

0800159c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800159c:	4b0c      	ldr	r3, [pc, #48]	; (80015d0 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800159e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80015a0:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80015a2:	3104      	adds	r1, #4

080015a4 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80015a4:	480b      	ldr	r0, [pc, #44]	; (80015d4 <LoopForever+0xa>)
	ldr	r3, =_edata
 80015a6:	4b0c      	ldr	r3, [pc, #48]	; (80015d8 <LoopForever+0xe>)
	adds	r2, r0, r1
 80015a8:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80015aa:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80015ac:	d3f6      	bcc.n	800159c <CopyDataInit>
	ldr	r2, =_sbss
 80015ae:	4a0b      	ldr	r2, [pc, #44]	; (80015dc <LoopForever+0x12>)
	b	LoopFillZerobss
 80015b0:	e002      	b.n	80015b8 <LoopFillZerobss>

080015b2 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80015b2:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80015b4:	f842 3b04 	str.w	r3, [r2], #4

080015b8 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80015b8:	4b09      	ldr	r3, [pc, #36]	; (80015e0 <LoopForever+0x16>)
	cmp	r2, r3
 80015ba:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80015bc:	d3f9      	bcc.n	80015b2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015be:	f7ff ffb5 	bl	800152c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015c2:	f000 f811 	bl	80015e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80015c6:	f7ff feb7 	bl	8001338 <main>

080015ca <LoopForever>:

LoopForever:
    b LoopForever
 80015ca:	e7fe      	b.n	80015ca <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80015cc:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80015d0:	0800169c 	.word	0x0800169c
	ldr	r0, =_sdata
 80015d4:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80015d8:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 80015dc:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 80015e0:	200000dc 	.word	0x200000dc

080015e4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80015e4:	e7fe      	b.n	80015e4 <ADC1_2_IRQHandler>
	...

080015e8 <__libc_init_array>:
 80015e8:	b570      	push	{r4, r5, r6, lr}
 80015ea:	4e0d      	ldr	r6, [pc, #52]	; (8001620 <__libc_init_array+0x38>)
 80015ec:	4c0d      	ldr	r4, [pc, #52]	; (8001624 <__libc_init_array+0x3c>)
 80015ee:	1ba4      	subs	r4, r4, r6
 80015f0:	10a4      	asrs	r4, r4, #2
 80015f2:	2500      	movs	r5, #0
 80015f4:	42a5      	cmp	r5, r4
 80015f6:	d109      	bne.n	800160c <__libc_init_array+0x24>
 80015f8:	4e0b      	ldr	r6, [pc, #44]	; (8001628 <__libc_init_array+0x40>)
 80015fa:	4c0c      	ldr	r4, [pc, #48]	; (800162c <__libc_init_array+0x44>)
 80015fc:	f000 f820 	bl	8001640 <_init>
 8001600:	1ba4      	subs	r4, r4, r6
 8001602:	10a4      	asrs	r4, r4, #2
 8001604:	2500      	movs	r5, #0
 8001606:	42a5      	cmp	r5, r4
 8001608:	d105      	bne.n	8001616 <__libc_init_array+0x2e>
 800160a:	bd70      	pop	{r4, r5, r6, pc}
 800160c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001610:	4798      	blx	r3
 8001612:	3501      	adds	r5, #1
 8001614:	e7ee      	b.n	80015f4 <__libc_init_array+0xc>
 8001616:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800161a:	4798      	blx	r3
 800161c:	3501      	adds	r5, #1
 800161e:	e7f2      	b.n	8001606 <__libc_init_array+0x1e>
 8001620:	08001694 	.word	0x08001694
 8001624:	08001694 	.word	0x08001694
 8001628:	08001694 	.word	0x08001694
 800162c:	08001698 	.word	0x08001698

08001630 <memset>:
 8001630:	4402      	add	r2, r0
 8001632:	4603      	mov	r3, r0
 8001634:	4293      	cmp	r3, r2
 8001636:	d100      	bne.n	800163a <memset+0xa>
 8001638:	4770      	bx	lr
 800163a:	f803 1b01 	strb.w	r1, [r3], #1
 800163e:	e7f9      	b.n	8001634 <memset+0x4>

08001640 <_init>:
 8001640:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001642:	bf00      	nop
 8001644:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001646:	bc08      	pop	{r3}
 8001648:	469e      	mov	lr, r3
 800164a:	4770      	bx	lr

0800164c <_fini>:
 800164c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800164e:	bf00      	nop
 8001650:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001652:	bc08      	pop	{r3}
 8001654:	469e      	mov	lr, r3
 8001656:	4770      	bx	lr
