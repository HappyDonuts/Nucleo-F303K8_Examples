
F303_DAC_Signal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000492c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000210  08004ab8  08004ab8  00014ab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004cc8  08004cc8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08004cc8  08004cc8  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004cc8  08004cc8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004cc8  08004cc8  00014cc8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004ccc  08004ccc  00014ccc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08004cd0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000011c  2000000c  08004cdc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000128  08004cdc  00020128  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001244b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002032  00000000  00000000  00032487  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c70  00000000  00000000  000344c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b98  00000000  00000000  00035130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018d30  00000000  00000000  00035cc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a62e  00000000  00000000  0004e9f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000890d3  00000000  00000000  00059026  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000e20f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003828  00000000  00000000  000e2174  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08004a9c 	.word	0x08004a9c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08004a9c 	.word	0x08004a9c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_d2iz>:
 8000a74:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a78:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a7c:	d215      	bcs.n	8000aaa <__aeabi_d2iz+0x36>
 8000a7e:	d511      	bpl.n	8000aa4 <__aeabi_d2iz+0x30>
 8000a80:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a84:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a88:	d912      	bls.n	8000ab0 <__aeabi_d2iz+0x3c>
 8000a8a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a92:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a96:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a9a:	fa23 f002 	lsr.w	r0, r3, r2
 8000a9e:	bf18      	it	ne
 8000aa0:	4240      	negne	r0, r0
 8000aa2:	4770      	bx	lr
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aae:	d105      	bne.n	8000abc <__aeabi_d2iz+0x48>
 8000ab0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ab4:	bf08      	it	eq
 8000ab6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aba:	4770      	bx	lr
 8000abc:	f04f 0000 	mov.w	r0, #0
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop

08000ac4 <__aeabi_d2uiz>:
 8000ac4:	004a      	lsls	r2, r1, #1
 8000ac6:	d211      	bcs.n	8000aec <__aeabi_d2uiz+0x28>
 8000ac8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000acc:	d211      	bcs.n	8000af2 <__aeabi_d2uiz+0x2e>
 8000ace:	d50d      	bpl.n	8000aec <__aeabi_d2uiz+0x28>
 8000ad0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ad4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad8:	d40e      	bmi.n	8000af8 <__aeabi_d2uiz+0x34>
 8000ada:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ade:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ae2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ae6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aea:	4770      	bx	lr
 8000aec:	f04f 0000 	mov.w	r0, #0
 8000af0:	4770      	bx	lr
 8000af2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af6:	d102      	bne.n	8000afe <__aeabi_d2uiz+0x3a>
 8000af8:	f04f 30ff 	mov.w	r0, #4294967295
 8000afc:	4770      	bx	lr
 8000afe:	f04f 0000 	mov.w	r0, #0
 8000b02:	4770      	bx	lr

08000b04 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_Init+0x28>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a07      	ldr	r2, [pc, #28]	; (8000b2c <HAL_Init+0x28>)
 8000b0e:	f043 0310 	orr.w	r3, r3, #16
 8000b12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b14:	2003      	movs	r0, #3
 8000b16:	f000 f927 	bl	8000d68 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b1a:	2000      	movs	r0, #0
 8000b1c:	f000 f808 	bl	8000b30 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b20:	f002 fe08 	bl	8003734 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	bd80      	pop	{r7, pc}
 8000b2a:	bf00      	nop
 8000b2c:	40022000 	.word	0x40022000

08000b30 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b38:	4b12      	ldr	r3, [pc, #72]	; (8000b84 <HAL_InitTick+0x54>)
 8000b3a:	681a      	ldr	r2, [r3, #0]
 8000b3c:	4b12      	ldr	r3, [pc, #72]	; (8000b88 <HAL_InitTick+0x58>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	4619      	mov	r1, r3
 8000b42:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b46:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f000 f93f 	bl	8000dd2 <HAL_SYSTICK_Config>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d001      	beq.n	8000b5e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b5a:	2301      	movs	r3, #1
 8000b5c:	e00e      	b.n	8000b7c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	2b0f      	cmp	r3, #15
 8000b62:	d80a      	bhi.n	8000b7a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b64:	2200      	movs	r2, #0
 8000b66:	6879      	ldr	r1, [r7, #4]
 8000b68:	f04f 30ff 	mov.w	r0, #4294967295
 8000b6c:	f000 f907 	bl	8000d7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b70:	4a06      	ldr	r2, [pc, #24]	; (8000b8c <HAL_InitTick+0x5c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000b76:	2300      	movs	r3, #0
 8000b78:	e000      	b.n	8000b7c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b7a:	2301      	movs	r3, #1
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	3708      	adds	r7, #8
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000008 	.word	0x20000008
 8000b88:	20000004 	.word	0x20000004
 8000b8c:	20000000 	.word	0x20000000

08000b90 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b90:	b480      	push	{r7}
 8000b92:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b94:	4b06      	ldr	r3, [pc, #24]	; (8000bb0 <HAL_IncTick+0x20>)
 8000b96:	781b      	ldrb	r3, [r3, #0]
 8000b98:	461a      	mov	r2, r3
 8000b9a:	4b06      	ldr	r3, [pc, #24]	; (8000bb4 <HAL_IncTick+0x24>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <HAL_IncTick+0x24>)
 8000ba2:	6013      	str	r3, [r2, #0]
}
 8000ba4:	bf00      	nop
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	20000004 	.word	0x20000004
 8000bb4:	2000005c 	.word	0x2000005c

08000bb8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bb8:	b480      	push	{r7}
 8000bba:	af00      	add	r7, sp, #0
  return uwTick;  
 8000bbc:	4b03      	ldr	r3, [pc, #12]	; (8000bcc <HAL_GetTick+0x14>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	2000005c 	.word	0x2000005c

08000bd0 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	b085      	sub	sp, #20
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	f003 0307 	and.w	r3, r3, #7
 8000bde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000be0:	4b0c      	ldr	r3, [pc, #48]	; (8000c14 <NVIC_SetPriorityGrouping+0x44>)
 8000be2:	68db      	ldr	r3, [r3, #12]
 8000be4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bec:	4013      	ands	r3, r2
 8000bee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000bf8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bfc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c02:	4a04      	ldr	r2, [pc, #16]	; (8000c14 <NVIC_SetPriorityGrouping+0x44>)
 8000c04:	68bb      	ldr	r3, [r7, #8]
 8000c06:	60d3      	str	r3, [r2, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	e000ed00 	.word	0xe000ed00

08000c18 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c1c:	4b04      	ldr	r3, [pc, #16]	; (8000c30 <NVIC_GetPriorityGrouping+0x18>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	f003 0307 	and.w	r3, r3, #7
}
 8000c26:	4618      	mov	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	e000ed00 	.word	0xe000ed00

08000c34 <NVIC_EnableIRQ>:
  \brief   Enable External Interrupt
  \details Enables a device-specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b083      	sub	sp, #12
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c3e:	79fb      	ldrb	r3, [r7, #7]
 8000c40:	f003 021f 	and.w	r2, r3, #31
 8000c44:	4907      	ldr	r1, [pc, #28]	; (8000c64 <NVIC_EnableIRQ+0x30>)
 8000c46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c4a:	095b      	lsrs	r3, r3, #5
 8000c4c:	2001      	movs	r0, #1
 8000c4e:	fa00 f202 	lsl.w	r2, r0, r2
 8000c52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000c56:	bf00      	nop
 8000c58:	370c      	adds	r7, #12
 8000c5a:	46bd      	mov	sp, r7
 8000c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c60:	4770      	bx	lr
 8000c62:	bf00      	nop
 8000c64:	e000e100 	.word	0xe000e100

08000c68 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b083      	sub	sp, #12
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	4603      	mov	r3, r0
 8000c70:	6039      	str	r1, [r7, #0]
 8000c72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000c74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	da0b      	bge.n	8000c94 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c7c:	683b      	ldr	r3, [r7, #0]
 8000c7e:	b2da      	uxtb	r2, r3
 8000c80:	490c      	ldr	r1, [pc, #48]	; (8000cb4 <NVIC_SetPriority+0x4c>)
 8000c82:	79fb      	ldrb	r3, [r7, #7]
 8000c84:	f003 030f 	and.w	r3, r3, #15
 8000c88:	3b04      	subs	r3, #4
 8000c8a:	0112      	lsls	r2, r2, #4
 8000c8c:	b2d2      	uxtb	r2, r2
 8000c8e:	440b      	add	r3, r1
 8000c90:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c92:	e009      	b.n	8000ca8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	b2da      	uxtb	r2, r3
 8000c98:	4907      	ldr	r1, [pc, #28]	; (8000cb8 <NVIC_SetPriority+0x50>)
 8000c9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c9e:	0112      	lsls	r2, r2, #4
 8000ca0:	b2d2      	uxtb	r2, r2
 8000ca2:	440b      	add	r3, r1
 8000ca4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000ca8:	bf00      	nop
 8000caa:	370c      	adds	r7, #12
 8000cac:	46bd      	mov	sp, r7
 8000cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb2:	4770      	bx	lr
 8000cb4:	e000ed00 	.word	0xe000ed00
 8000cb8:	e000e100 	.word	0xe000e100

08000cbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b089      	sub	sp, #36	; 0x24
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	f003 0307 	and.w	r3, r3, #7
 8000cce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd0:	69fb      	ldr	r3, [r7, #28]
 8000cd2:	f1c3 0307 	rsb	r3, r3, #7
 8000cd6:	2b04      	cmp	r3, #4
 8000cd8:	bf28      	it	cs
 8000cda:	2304      	movcs	r3, #4
 8000cdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000cde:	69fb      	ldr	r3, [r7, #28]
 8000ce0:	3304      	adds	r3, #4
 8000ce2:	2b06      	cmp	r3, #6
 8000ce4:	d902      	bls.n	8000cec <NVIC_EncodePriority+0x30>
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3b03      	subs	r3, #3
 8000cea:	e000      	b.n	8000cee <NVIC_EncodePriority+0x32>
 8000cec:	2300      	movs	r3, #0
 8000cee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf0:	f04f 32ff 	mov.w	r2, #4294967295
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cfa:	43da      	mvns	r2, r3
 8000cfc:	68bb      	ldr	r3, [r7, #8]
 8000cfe:	401a      	ands	r2, r3
 8000d00:	697b      	ldr	r3, [r7, #20]
 8000d02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d04:	f04f 31ff 	mov.w	r1, #4294967295
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43d9      	mvns	r1, r3
 8000d10:	687b      	ldr	r3, [r7, #4]
 8000d12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d14:	4313      	orrs	r3, r2
         );
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3724      	adds	r7, #36	; 0x24
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
	...

08000d24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	3b01      	subs	r3, #1
 8000d30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d34:	d301      	bcc.n	8000d3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d36:	2301      	movs	r3, #1
 8000d38:	e00f      	b.n	8000d5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d3a:	4a0a      	ldr	r2, [pc, #40]	; (8000d64 <SysTick_Config+0x40>)
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	3b01      	subs	r3, #1
 8000d40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d42:	210f      	movs	r1, #15
 8000d44:	f04f 30ff 	mov.w	r0, #4294967295
 8000d48:	f7ff ff8e 	bl	8000c68 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <SysTick_Config+0x40>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d52:	4b04      	ldr	r3, [pc, #16]	; (8000d64 <SysTick_Config+0x40>)
 8000d54:	2207      	movs	r2, #7
 8000d56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d58:	2300      	movs	r3, #0
}
 8000d5a:	4618      	mov	r0, r3
 8000d5c:	3708      	adds	r7, #8
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	bd80      	pop	{r7, pc}
 8000d62:	bf00      	nop
 8000d64:	e000e010 	.word	0xe000e010

08000d68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b082      	sub	sp, #8
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d70:	6878      	ldr	r0, [r7, #4]
 8000d72:	f7ff ff2d 	bl	8000bd0 <NVIC_SetPriorityGrouping>
}
 8000d76:	bf00      	nop
 8000d78:	3708      	adds	r7, #8
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	4603      	mov	r3, r0
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
 8000d8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d90:	f7ff ff42 	bl	8000c18 <NVIC_GetPriorityGrouping>
 8000d94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d96:	687a      	ldr	r2, [r7, #4]
 8000d98:	68b9      	ldr	r1, [r7, #8]
 8000d9a:	6978      	ldr	r0, [r7, #20]
 8000d9c:	f7ff ff8e 	bl	8000cbc <NVIC_EncodePriority>
 8000da0:	4602      	mov	r2, r0
 8000da2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000da6:	4611      	mov	r1, r2
 8000da8:	4618      	mov	r0, r3
 8000daa:	f7ff ff5d 	bl	8000c68 <NVIC_SetPriority>
}
 8000dae:	bf00      	nop
 8000db0:	3718      	adds	r7, #24
 8000db2:	46bd      	mov	sp, r7
 8000db4:	bd80      	pop	{r7, pc}

08000db6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000db6:	b580      	push	{r7, lr}
 8000db8:	b082      	sub	sp, #8
 8000dba:	af00      	add	r7, sp, #0
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	f7ff ff35 	bl	8000c34 <NVIC_EnableIRQ>
}
 8000dca:	bf00      	nop
 8000dcc:	3708      	adds	r7, #8
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	bd80      	pop	{r7, pc}

08000dd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dd2:	b580      	push	{r7, lr}
 8000dd4:	b082      	sub	sp, #8
 8000dd6:	af00      	add	r7, sp, #0
 8000dd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dda:	6878      	ldr	r0, [r7, #4]
 8000ddc:	f7ff ffa2 	bl	8000d24 <SysTick_Config>
 8000de0:	4603      	mov	r3, r0
}
 8000de2:	4618      	mov	r0, r3
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b082      	sub	sp, #8
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if(hdac == NULL)
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d101      	bne.n	8000dfc <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8000df8:	2301      	movs	r3, #1
 8000dfa:	e014      	b.n	8000e26 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	791b      	ldrb	r3, [r3, #4]
 8000e00:	b2db      	uxtb	r3, r3
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d105      	bne.n	8000e12 <HAL_DAC_Init+0x28>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	2200      	movs	r2, #0
 8000e0a:	715a      	strb	r2, [r3, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000e0c:	6878      	ldr	r0, [r7, #4]
 8000e0e:	f002 fcb5 	bl	800377c <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	2202      	movs	r2, #2
 8000e16:	711a      	strb	r2, [r3, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	2201      	movs	r2, #1
 8000e22:	711a      	strb	r2, [r3, #4]
  
  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3708      	adds	r7, #8
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}

08000e2e <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8000e2e:	b480      	push	{r7}
 8000e30:	b087      	sub	sp, #28
 8000e32:	af00      	add	r7, sp, #0
 8000e34:	60f8      	str	r0, [r7, #12]
 8000e36:	60b9      	str	r1, [r7, #8]
 8000e38:	607a      	str	r2, [r7, #4]
 8000e3a:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0U;
 8000e3c:	2300      	movs	r3, #0
 8000e3e:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	617b      	str	r3, [r7, #20]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8000e46:	68bb      	ldr	r3, [r7, #8]
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d105      	bne.n	8000e58 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000e4c:	697a      	ldr	r2, [r7, #20]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	3308      	adds	r3, #8
 8000e54:	617b      	str	r3, [r7, #20]
 8000e56:	e004      	b.n	8000e62 <HAL_DAC_SetValue+0x34>
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000e58:	697a      	ldr	r2, [r7, #20]
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	4413      	add	r3, r2
 8000e5e:	3314      	adds	r3, #20
 8000e60:	617b      	str	r3, [r7, #20]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000e62:	697b      	ldr	r3, [r7, #20]
 8000e64:	461a      	mov	r2, r3
 8000e66:	683b      	ldr	r3, [r7, #0]
 8000e68:	6013      	str	r3, [r2, #0]
  
  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
}
 8000e6c:	4618      	mov	r0, r3
 8000e6e:	371c      	adds	r7, #28
 8000e70:	46bd      	mov	sp, r7
 8000e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e76:	4770      	bx	lr

08000e78 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC1 Channel1 or DAC2 Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC1 Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef* hdac, uint32_t Channel)
{
 8000e78:	b480      	push	{r7}
 8000e7a:	b083      	sub	sp, #12
 8000e7c:	af00      	add	r7, sp, #0
 8000e7e:	6078      	str	r0, [r7, #4]
 8000e80:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	795b      	ldrb	r3, [r3, #5]
 8000e86:	2b01      	cmp	r3, #1
 8000e88:	d101      	bne.n	8000e8e <HAL_DAC_Start+0x16>
 8000e8a:	2302      	movs	r3, #2
 8000e8c:	e039      	b.n	8000f02 <HAL_DAC_Start+0x8a>
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2201      	movs	r2, #1
 8000e92:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2202      	movs	r2, #2
 8000e98:	711a      	strb	r2, [r3, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000e9a:	687b      	ldr	r3, [r7, #4]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	6819      	ldr	r1, [r3, #0]
 8000ea0:	2201      	movs	r2, #1
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	409a      	lsls	r2, r3
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	681b      	ldr	r3, [r3, #0]
 8000eaa:	430a      	orrs	r2, r1
 8000eac:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d10f      	bne.n	8000ed4 <HAL_DAC_Start+0x5c>
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8000ebe:	2b3c      	cmp	r3, #60	; 0x3c
 8000ec0:	d118      	bne.n	8000ef4 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	685a      	ldr	r2, [r3, #4]
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	f042 0201 	orr.w	r2, r2, #1
 8000ed0:	605a      	str	r2, [r3, #4]
 8000ed2:	e00f      	b.n	8000ef4 <HAL_DAC_Start+0x7c>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8000ede:	f5b3 1f70 	cmp.w	r3, #3932160	; 0x3c0000
 8000ee2:	d107      	bne.n	8000ef4 <HAL_DAC_Start+0x7c>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	685a      	ldr	r2, [r3, #4]
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f042 0202 	orr.w	r2, r2, #2
 8000ef2:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	2201      	movs	r2, #1
 8000ef8:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	715a      	strb	r2, [r3, #5]
    
  /* Return function status */
  return HAL_OK;
 8000f00:	2300      	movs	r3, #0
}
 8000f02:	4618      	mov	r0, r3
 8000f04:	370c      	adds	r7, #12
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr
	...

08000f10 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC2 Channel1 selected 
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef* hdac, DAC_ChannelConfTypeDef* sConfig, uint32_t Channel)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	60f8      	str	r0, [r7, #12]
 8000f18:	60b9      	str	r1, [r7, #8]
 8000f1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1 = 0U, tmpreg2 = 0U;
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	617b      	str	r3, [r7, #20]
 8000f20:	2300      	movs	r3, #0
 8000f22:	613b      	str	r3, [r7, #16]
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000f24:	68fb      	ldr	r3, [r7, #12]
 8000f26:	795b      	ldrb	r3, [r3, #5]
 8000f28:	2b01      	cmp	r3, #1
 8000f2a:	d101      	bne.n	8000f30 <HAL_DAC_ConfigChannel+0x20>
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	e04e      	b.n	8000fce <HAL_DAC_ConfigChannel+0xbe>
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	2201      	movs	r2, #1
 8000f34:	715a      	strb	r2, [r3, #5]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000f36:	68fb      	ldr	r3, [r7, #12]
 8000f38:	2202      	movs	r2, #2
 8000f3a:	711a      	strb	r2, [r3, #4]
  
  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8000f3c:	68fb      	ldr	r3, [r7, #12]
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000f44:	68fb      	ldr	r3, [r7, #12]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	4a24      	ldr	r2, [pc, #144]	; (8000fdc <HAL_DAC_ConfigChannel+0xcc>)
 8000f4a:	4293      	cmp	r3, r2
 8000f4c:	d112      	bne.n	8000f74 <HAL_DAC_ConfigChannel+0x64>
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d10f      	bne.n	8000f74 <HAL_DAC_ConfigChannel+0x64>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000f54:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f5e:	43db      	mvns	r3, r3
 8000f60:	697a      	ldr	r2, [r7, #20]
 8000f62:	4013      	ands	r3, r2
 8000f64:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8000f66:	68bb      	ldr	r3, [r7, #8]
 8000f68:	681a      	ldr	r2, [r3, #0]
 8000f6a:	68bb      	ldr	r3, [r7, #8]
 8000f6c:	685b      	ldr	r3, [r3, #4]
 8000f6e:	4313      	orrs	r3, r2
 8000f70:	613b      	str	r3, [r7, #16]
 8000f72:	e00e      	b.n	8000f92 <HAL_DAC_ConfigChannel+0x82>
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8000f74:	f640 72fe 	movw	r2, #4094	; 0xffe
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7e:	43db      	mvns	r3, r3
 8000f80:	697a      	ldr	r2, [r7, #20]
 8000f82:	4013      	ands	r3, r2
 8000f84:	617b      	str	r3, [r7, #20]
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8000f86:	68bb      	ldr	r3, [r7, #8]
 8000f88:	681a      	ldr	r2, [r3, #0]
 8000f8a:	68bb      	ldr	r3, [r7, #8]
 8000f8c:	689b      	ldr	r3, [r3, #8]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	697a      	ldr	r2, [r7, #20]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	697a      	ldr	r2, [r7, #20]
 8000fa6:	601a      	str	r2, [r3, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000fa8:	68fb      	ldr	r3, [r7, #12]
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	6819      	ldr	r1, [r3, #0]
 8000fae:	22c0      	movs	r2, #192	; 0xc0
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fb6:	43da      	mvns	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	400a      	ands	r2, r1
 8000fbe:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000fc0:	68fb      	ldr	r3, [r7, #12]
 8000fc2:	2201      	movs	r2, #1
 8000fc4:	711a      	strb	r2, [r3, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000fc6:	68fb      	ldr	r3, [r7, #12]
 8000fc8:	2200      	movs	r2, #0
 8000fca:	715a      	strb	r2, [r3, #5]
  
  /* Return function status */
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	371c      	adds	r7, #28
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40007400 	.word	0x40007400

08000fe0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b087      	sub	sp, #28
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
 8000fe8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000ff6:	e14e      	b.n	8001296 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ff8:	683b      	ldr	r3, [r7, #0]
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	697b      	ldr	r3, [r7, #20]
 8001000:	fa01 f303 	lsl.w	r3, r1, r3
 8001004:	4013      	ands	r3, r2
 8001006:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	2b00      	cmp	r3, #0
 800100c:	f000 8140 	beq.w	8001290 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001010:	683b      	ldr	r3, [r7, #0]
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	2b02      	cmp	r3, #2
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x40>
 8001018:	683b      	ldr	r3, [r7, #0]
 800101a:	685b      	ldr	r3, [r3, #4]
 800101c:	2b12      	cmp	r3, #18
 800101e:	d123      	bne.n	8001068 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	08da      	lsrs	r2, r3, #3
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	3208      	adds	r2, #8
 8001028:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800102c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800102e:	697b      	ldr	r3, [r7, #20]
 8001030:	f003 0307 	and.w	r3, r3, #7
 8001034:	009b      	lsls	r3, r3, #2
 8001036:	220f      	movs	r2, #15
 8001038:	fa02 f303 	lsl.w	r3, r2, r3
 800103c:	43db      	mvns	r3, r3
 800103e:	693a      	ldr	r2, [r7, #16]
 8001040:	4013      	ands	r3, r2
 8001042:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	691a      	ldr	r2, [r3, #16]
 8001048:	697b      	ldr	r3, [r7, #20]
 800104a:	f003 0307 	and.w	r3, r3, #7
 800104e:	009b      	lsls	r3, r3, #2
 8001050:	fa02 f303 	lsl.w	r3, r2, r3
 8001054:	693a      	ldr	r2, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 800105a:	697b      	ldr	r3, [r7, #20]
 800105c:	08da      	lsrs	r2, r3, #3
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	3208      	adds	r2, #8
 8001062:	6939      	ldr	r1, [r7, #16]
 8001064:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800106e:	697b      	ldr	r3, [r7, #20]
 8001070:	005b      	lsls	r3, r3, #1
 8001072:	2203      	movs	r2, #3
 8001074:	fa02 f303 	lsl.w	r3, r2, r3
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f003 0203 	and.w	r2, r3, #3
 8001088:	697b      	ldr	r3, [r7, #20]
 800108a:	005b      	lsls	r3, r3, #1
 800108c:	fa02 f303 	lsl.w	r3, r2, r3
 8001090:	693a      	ldr	r2, [r7, #16]
 8001092:	4313      	orrs	r3, r2
 8001094:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	693a      	ldr	r2, [r7, #16]
 800109a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d00b      	beq.n	80010bc <HAL_GPIO_Init+0xdc>
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	685b      	ldr	r3, [r3, #4]
 80010a8:	2b02      	cmp	r3, #2
 80010aa:	d007      	beq.n	80010bc <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80010b0:	2b11      	cmp	r3, #17
 80010b2:	d003      	beq.n	80010bc <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	2b12      	cmp	r3, #18
 80010ba:	d130      	bne.n	800111e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	68da      	ldr	r2, [r3, #12]
 80010d8:	697b      	ldr	r3, [r7, #20]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	693a      	ldr	r2, [r7, #16]
 80010ea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010f2:	2201      	movs	r2, #1
 80010f4:	697b      	ldr	r3, [r7, #20]
 80010f6:	fa02 f303 	lsl.w	r3, r2, r3
 80010fa:	43db      	mvns	r3, r3
 80010fc:	693a      	ldr	r2, [r7, #16]
 80010fe:	4013      	ands	r3, r2
 8001100:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	091b      	lsrs	r3, r3, #4
 8001108:	f003 0201 	and.w	r2, r3, #1
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	fa02 f303 	lsl.w	r3, r2, r3
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	4313      	orrs	r3, r2
 8001116:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	693a      	ldr	r2, [r7, #16]
 800111c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	68db      	ldr	r3, [r3, #12]
 8001122:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	005b      	lsls	r3, r3, #1
 8001128:	2203      	movs	r2, #3
 800112a:	fa02 f303 	lsl.w	r3, r2, r3
 800112e:	43db      	mvns	r3, r3
 8001130:	693a      	ldr	r2, [r7, #16]
 8001132:	4013      	ands	r3, r2
 8001134:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	689a      	ldr	r2, [r3, #8]
 800113a:	697b      	ldr	r3, [r7, #20]
 800113c:	005b      	lsls	r3, r3, #1
 800113e:	fa02 f303 	lsl.w	r3, r2, r3
 8001142:	693a      	ldr	r2, [r7, #16]
 8001144:	4313      	orrs	r3, r2
 8001146:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	693a      	ldr	r2, [r7, #16]
 800114c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	685b      	ldr	r3, [r3, #4]
 8001152:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	f000 809a 	beq.w	8001290 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115c:	4b55      	ldr	r3, [pc, #340]	; (80012b4 <HAL_GPIO_Init+0x2d4>)
 800115e:	699b      	ldr	r3, [r3, #24]
 8001160:	4a54      	ldr	r2, [pc, #336]	; (80012b4 <HAL_GPIO_Init+0x2d4>)
 8001162:	f043 0301 	orr.w	r3, r3, #1
 8001166:	6193      	str	r3, [r2, #24]
 8001168:	4b52      	ldr	r3, [pc, #328]	; (80012b4 <HAL_GPIO_Init+0x2d4>)
 800116a:	699b      	ldr	r3, [r3, #24]
 800116c:	f003 0301 	and.w	r3, r3, #1
 8001170:	60bb      	str	r3, [r7, #8]
 8001172:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8001174:	4a50      	ldr	r2, [pc, #320]	; (80012b8 <HAL_GPIO_Init+0x2d8>)
 8001176:	697b      	ldr	r3, [r7, #20]
 8001178:	089b      	lsrs	r3, r3, #2
 800117a:	3302      	adds	r3, #2
 800117c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001180:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8001182:	697b      	ldr	r3, [r7, #20]
 8001184:	f003 0303 	and.w	r3, r3, #3
 8001188:	009b      	lsls	r3, r3, #2
 800118a:	220f      	movs	r2, #15
 800118c:	fa02 f303 	lsl.w	r3, r2, r3
 8001190:	43db      	mvns	r3, r3
 8001192:	693a      	ldr	r2, [r7, #16]
 8001194:	4013      	ands	r3, r2
 8001196:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800119e:	d013      	beq.n	80011c8 <HAL_GPIO_Init+0x1e8>
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	4a46      	ldr	r2, [pc, #280]	; (80012bc <HAL_GPIO_Init+0x2dc>)
 80011a4:	4293      	cmp	r3, r2
 80011a6:	d00d      	beq.n	80011c4 <HAL_GPIO_Init+0x1e4>
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	4a45      	ldr	r2, [pc, #276]	; (80012c0 <HAL_GPIO_Init+0x2e0>)
 80011ac:	4293      	cmp	r3, r2
 80011ae:	d007      	beq.n	80011c0 <HAL_GPIO_Init+0x1e0>
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	4a44      	ldr	r2, [pc, #272]	; (80012c4 <HAL_GPIO_Init+0x2e4>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d101      	bne.n	80011bc <HAL_GPIO_Init+0x1dc>
 80011b8:	2303      	movs	r3, #3
 80011ba:	e006      	b.n	80011ca <HAL_GPIO_Init+0x1ea>
 80011bc:	2305      	movs	r3, #5
 80011be:	e004      	b.n	80011ca <HAL_GPIO_Init+0x1ea>
 80011c0:	2302      	movs	r3, #2
 80011c2:	e002      	b.n	80011ca <HAL_GPIO_Init+0x1ea>
 80011c4:	2301      	movs	r3, #1
 80011c6:	e000      	b.n	80011ca <HAL_GPIO_Init+0x1ea>
 80011c8:	2300      	movs	r3, #0
 80011ca:	697a      	ldr	r2, [r7, #20]
 80011cc:	f002 0203 	and.w	r2, r2, #3
 80011d0:	0092      	lsls	r2, r2, #2
 80011d2:	4093      	lsls	r3, r2
 80011d4:	693a      	ldr	r2, [r7, #16]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80011da:	4937      	ldr	r1, [pc, #220]	; (80012b8 <HAL_GPIO_Init+0x2d8>)
 80011dc:	697b      	ldr	r3, [r7, #20]
 80011de:	089b      	lsrs	r3, r3, #2
 80011e0:	3302      	adds	r3, #2
 80011e2:	693a      	ldr	r2, [r7, #16]
 80011e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011e8:	4b37      	ldr	r3, [pc, #220]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80011ee:	68fb      	ldr	r3, [r7, #12]
 80011f0:	43db      	mvns	r3, r3
 80011f2:	693a      	ldr	r2, [r7, #16]
 80011f4:	4013      	ands	r3, r2
 80011f6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80011f8:	683b      	ldr	r3, [r7, #0]
 80011fa:	685b      	ldr	r3, [r3, #4]
 80011fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001200:	2b00      	cmp	r3, #0
 8001202:	d003      	beq.n	800120c <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001204:	693a      	ldr	r2, [r7, #16]
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	4313      	orrs	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800120c:	4a2e      	ldr	r2, [pc, #184]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 800120e:	693b      	ldr	r3, [r7, #16]
 8001210:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001212:	4b2d      	ldr	r3, [pc, #180]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 8001214:	685b      	ldr	r3, [r3, #4]
 8001216:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	43db      	mvns	r3, r3
 800121c:	693a      	ldr	r2, [r7, #16]
 800121e:	4013      	ands	r3, r2
 8001220:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	685b      	ldr	r3, [r3, #4]
 8001226:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800122a:	2b00      	cmp	r3, #0
 800122c:	d003      	beq.n	8001236 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800122e:	693a      	ldr	r2, [r7, #16]
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	4313      	orrs	r3, r2
 8001234:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001236:	4a24      	ldr	r2, [pc, #144]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123c:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	43db      	mvns	r3, r3
 8001246:	693a      	ldr	r2, [r7, #16]
 8001248:	4013      	ands	r3, r2
 800124a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001254:	2b00      	cmp	r3, #0
 8001256:	d003      	beq.n	8001260 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8001258:	693a      	ldr	r2, [r7, #16]
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	4313      	orrs	r3, r2
 800125e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001260:	4a19      	ldr	r2, [pc, #100]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001266:	4b18      	ldr	r3, [pc, #96]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 8001268:	68db      	ldr	r3, [r3, #12]
 800126a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	43db      	mvns	r3, r3
 8001270:	693a      	ldr	r2, [r7, #16]
 8001272:	4013      	ands	r3, r2
 8001274:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001276:	683b      	ldr	r3, [r7, #0]
 8001278:	685b      	ldr	r3, [r3, #4]
 800127a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800127e:	2b00      	cmp	r3, #0
 8001280:	d003      	beq.n	800128a <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 8001282:	693a      	ldr	r2, [r7, #16]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4313      	orrs	r3, r2
 8001288:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800128a:	4a0f      	ldr	r2, [pc, #60]	; (80012c8 <HAL_GPIO_Init+0x2e8>)
 800128c:	693b      	ldr	r3, [r7, #16]
 800128e:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	3301      	adds	r3, #1
 8001294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001296:	683b      	ldr	r3, [r7, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	fa22 f303 	lsr.w	r3, r2, r3
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f47f aea9 	bne.w	8000ff8 <HAL_GPIO_Init+0x18>
  }
}
 80012a6:	bf00      	nop
 80012a8:	371c      	adds	r7, #28
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
 80012b2:	bf00      	nop
 80012b4:	40021000 	.word	0x40021000
 80012b8:	40010000 	.word	0x40010000
 80012bc:	48000400 	.word	0x48000400
 80012c0:	48000800 	.word	0x48000800
 80012c4:	48000c00 	.word	0x48000c00
 80012c8:	40010400 	.word	0x40010400

080012cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012cc:	b480      	push	{r7}
 80012ce:	b083      	sub	sp, #12
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	460b      	mov	r3, r1
 80012d6:	807b      	strh	r3, [r7, #2]
 80012d8:	4613      	mov	r3, r2
 80012da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80012dc:	787b      	ldrb	r3, [r7, #1]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d003      	beq.n	80012ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80012e2:	887a      	ldrh	r2, [r7, #2]
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80012e8:	e002      	b.n	80012f0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80012ea:	887a      	ldrh	r2, [r7, #2]
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	629a      	str	r2, [r3, #40]	; 0x28
}
 80012f0:	bf00      	nop
 80012f2:	370c      	adds	r7, #12
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr

080012fc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80012fc:	b480      	push	{r7}
 80012fe:	b083      	sub	sp, #12
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
 8001304:	460b      	mov	r3, r1
 8001306:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	695a      	ldr	r2, [r3, #20]
 800130c:	887b      	ldrh	r3, [r7, #2]
 800130e:	405a      	eors	r2, r3
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	615a      	str	r2, [r3, #20]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr

08001320 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001326:	af00      	add	r7, sp, #0
 8001328:	1d3b      	adds	r3, r7, #4
 800132a:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800132c:	1d3b      	adds	r3, r7, #4
 800132e:	681b      	ldr	r3, [r3, #0]
 8001330:	2b00      	cmp	r3, #0
 8001332:	d102      	bne.n	800133a <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001334:	2301      	movs	r3, #1
 8001336:	f000 beda 	b.w	80020ee <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800133a:	1d3b      	adds	r3, r7, #4
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	2b00      	cmp	r3, #0
 8001346:	f000 816e 	beq.w	8001626 <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800134a:	4bb5      	ldr	r3, [pc, #724]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f003 030c 	and.w	r3, r3, #12
 8001352:	2b04      	cmp	r3, #4
 8001354:	d00c      	beq.n	8001370 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001356:	4bb2      	ldr	r3, [pc, #712]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 030c 	and.w	r3, r3, #12
 800135e:	2b08      	cmp	r3, #8
 8001360:	d15a      	bne.n	8001418 <HAL_RCC_OscConfig+0xf8>
 8001362:	4baf      	ldr	r3, [pc, #700]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800136a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800136e:	d153      	bne.n	8001418 <HAL_RCC_OscConfig+0xf8>
 8001370:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001374:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001378:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 800137c:	fa93 f3a3 	rbit	r3, r3
 8001380:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001384:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	095b      	lsrs	r3, r3, #5
 8001390:	b2db      	uxtb	r3, r3
 8001392:	f043 0301 	orr.w	r3, r3, #1
 8001396:	b2db      	uxtb	r3, r3
 8001398:	2b01      	cmp	r3, #1
 800139a:	d102      	bne.n	80013a2 <HAL_RCC_OscConfig+0x82>
 800139c:	4ba0      	ldr	r3, [pc, #640]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	e015      	b.n	80013ce <HAL_RCC_OscConfig+0xae>
 80013a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013a6:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013aa:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80013ae:	fa93 f3a3 	rbit	r3, r3
 80013b2:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80013b6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80013ba:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80013be:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80013c2:	fa93 f3a3 	rbit	r3, r3
 80013c6:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80013ca:	4b95      	ldr	r3, [pc, #596]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 80013cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013ce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80013d2:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80013d6:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80013da:	fa92 f2a2 	rbit	r2, r2
 80013de:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80013e2:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80013e6:	fab2 f282 	clz	r2, r2
 80013ea:	b252      	sxtb	r2, r2
 80013ec:	f042 0220 	orr.w	r2, r2, #32
 80013f0:	b252      	sxtb	r2, r2
 80013f2:	b2d2      	uxtb	r2, r2
 80013f4:	f002 021f 	and.w	r2, r2, #31
 80013f8:	2101      	movs	r1, #1
 80013fa:	fa01 f202 	lsl.w	r2, r1, r2
 80013fe:	4013      	ands	r3, r2
 8001400:	2b00      	cmp	r3, #0
 8001402:	f000 810f 	beq.w	8001624 <HAL_RCC_OscConfig+0x304>
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 8109 	bne.w	8001624 <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
 8001414:	f000 be6b 	b.w	80020ee <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001418:	1d3b      	adds	r3, r7, #4
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	685b      	ldr	r3, [r3, #4]
 800141e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001422:	d106      	bne.n	8001432 <HAL_RCC_OscConfig+0x112>
 8001424:	4b7e      	ldr	r3, [pc, #504]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a7d      	ldr	r2, [pc, #500]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800142a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800142e:	6013      	str	r3, [r2, #0]
 8001430:	e030      	b.n	8001494 <HAL_RCC_OscConfig+0x174>
 8001432:	1d3b      	adds	r3, r7, #4
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	2b00      	cmp	r3, #0
 800143a:	d10c      	bne.n	8001456 <HAL_RCC_OscConfig+0x136>
 800143c:	4b78      	ldr	r3, [pc, #480]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4a77      	ldr	r2, [pc, #476]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001446:	6013      	str	r3, [r2, #0]
 8001448:	4b75      	ldr	r3, [pc, #468]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	4a74      	ldr	r2, [pc, #464]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800144e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001452:	6013      	str	r3, [r2, #0]
 8001454:	e01e      	b.n	8001494 <HAL_RCC_OscConfig+0x174>
 8001456:	1d3b      	adds	r3, r7, #4
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001460:	d10c      	bne.n	800147c <HAL_RCC_OscConfig+0x15c>
 8001462:	4b6f      	ldr	r3, [pc, #444]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a6e      	ldr	r2, [pc, #440]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001468:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	4b6c      	ldr	r3, [pc, #432]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	4a6b      	ldr	r2, [pc, #428]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001474:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001478:	6013      	str	r3, [r2, #0]
 800147a:	e00b      	b.n	8001494 <HAL_RCC_OscConfig+0x174>
 800147c:	4b68      	ldr	r3, [pc, #416]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	4a67      	ldr	r2, [pc, #412]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001482:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001486:	6013      	str	r3, [r2, #0]
 8001488:	4b65      	ldr	r3, [pc, #404]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a64      	ldr	r2, [pc, #400]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800148e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001492:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001494:	4b62      	ldr	r3, [pc, #392]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001496:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001498:	f023 020f 	bic.w	r2, r3, #15
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	495f      	ldr	r1, [pc, #380]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 80014a4:	4313      	orrs	r3, r2
 80014a6:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	685b      	ldr	r3, [r3, #4]
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d05a      	beq.n	8001568 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b2:	f7ff fb81 	bl	8000bb8 <HAL_GetTick>
 80014b6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ba:	e00a      	b.n	80014d2 <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014bc:	f7ff fb7c 	bl	8000bb8 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b64      	cmp	r3, #100	; 0x64
 80014ca:	d902      	bls.n	80014d2 <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	f000 be0e 	b.w	80020ee <HAL_RCC_OscConfig+0xdce>
 80014d2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014d6:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014da:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80014de:	fa93 f3a3 	rbit	r3, r3
 80014e2:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80014e6:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014ea:	fab3 f383 	clz	r3, r3
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	095b      	lsrs	r3, r3, #5
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b01      	cmp	r3, #1
 80014fc:	d102      	bne.n	8001504 <HAL_RCC_OscConfig+0x1e4>
 80014fe:	4b48      	ldr	r3, [pc, #288]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	e015      	b.n	8001530 <HAL_RCC_OscConfig+0x210>
 8001504:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001508:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001510:	fa93 f3a3 	rbit	r3, r3
 8001514:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001518:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800151c:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001520:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001524:	fa93 f3a3 	rbit	r3, r3
 8001528:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 800152c:	4b3c      	ldr	r3, [pc, #240]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 800152e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001530:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001534:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001538:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 800153c:	fa92 f2a2 	rbit	r2, r2
 8001540:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001544:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001548:	fab2 f282 	clz	r2, r2
 800154c:	b252      	sxtb	r2, r2
 800154e:	f042 0220 	orr.w	r2, r2, #32
 8001552:	b252      	sxtb	r2, r2
 8001554:	b2d2      	uxtb	r2, r2
 8001556:	f002 021f 	and.w	r2, r2, #31
 800155a:	2101      	movs	r1, #1
 800155c:	fa01 f202 	lsl.w	r2, r1, r2
 8001560:	4013      	ands	r3, r2
 8001562:	2b00      	cmp	r3, #0
 8001564:	d0aa      	beq.n	80014bc <HAL_RCC_OscConfig+0x19c>
 8001566:	e05e      	b.n	8001626 <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001568:	f7ff fb26 	bl	8000bb8 <HAL_GetTick>
 800156c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001570:	e00a      	b.n	8001588 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001572:	f7ff fb21 	bl	8000bb8 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800157c:	1ad3      	subs	r3, r2, r3
 800157e:	2b64      	cmp	r3, #100	; 0x64
 8001580:	d902      	bls.n	8001588 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001582:	2303      	movs	r3, #3
 8001584:	f000 bdb3 	b.w	80020ee <HAL_RCC_OscConfig+0xdce>
 8001588:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800158c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001590:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001594:	fa93 f3a3 	rbit	r3, r3
 8001598:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 800159c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80015a0:	fab3 f383 	clz	r3, r3
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	095b      	lsrs	r3, r3, #5
 80015a8:	b2db      	uxtb	r3, r3
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	b2db      	uxtb	r3, r3
 80015b0:	2b01      	cmp	r3, #1
 80015b2:	d102      	bne.n	80015ba <HAL_RCC_OscConfig+0x29a>
 80015b4:	4b1a      	ldr	r3, [pc, #104]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	e015      	b.n	80015e6 <HAL_RCC_OscConfig+0x2c6>
 80015ba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015be:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015c2:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80015c6:	fa93 f3a3 	rbit	r3, r3
 80015ca:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80015ce:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80015d2:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80015d6:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80015da:	fa93 f3a3 	rbit	r3, r3
 80015de:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80015e2:	4b0f      	ldr	r3, [pc, #60]	; (8001620 <HAL_RCC_OscConfig+0x300>)
 80015e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80015ea:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80015ee:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80015f2:	fa92 f2a2 	rbit	r2, r2
 80015f6:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 80015fa:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80015fe:	fab2 f282 	clz	r2, r2
 8001602:	b252      	sxtb	r2, r2
 8001604:	f042 0220 	orr.w	r2, r2, #32
 8001608:	b252      	sxtb	r2, r2
 800160a:	b2d2      	uxtb	r2, r2
 800160c:	f002 021f 	and.w	r2, r2, #31
 8001610:	2101      	movs	r1, #1
 8001612:	fa01 f202 	lsl.w	r2, r1, r2
 8001616:	4013      	ands	r3, r2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1aa      	bne.n	8001572 <HAL_RCC_OscConfig+0x252>
 800161c:	e003      	b.n	8001626 <HAL_RCC_OscConfig+0x306>
 800161e:	bf00      	nop
 8001620:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001624:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001626:	1d3b      	adds	r3, r7, #4
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0302 	and.w	r3, r3, #2
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 8170 	beq.w	8001916 <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001636:	4bd0      	ldr	r3, [pc, #832]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 8001638:	685b      	ldr	r3, [r3, #4]
 800163a:	f003 030c 	and.w	r3, r3, #12
 800163e:	2b00      	cmp	r3, #0
 8001640:	d00b      	beq.n	800165a <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001642:	4bcd      	ldr	r3, [pc, #820]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 8001644:	685b      	ldr	r3, [r3, #4]
 8001646:	f003 030c 	and.w	r3, r3, #12
 800164a:	2b08      	cmp	r3, #8
 800164c:	d16d      	bne.n	800172a <HAL_RCC_OscConfig+0x40a>
 800164e:	4bca      	ldr	r3, [pc, #808]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 8001650:	685b      	ldr	r3, [r3, #4]
 8001652:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d167      	bne.n	800172a <HAL_RCC_OscConfig+0x40a>
 800165a:	2302      	movs	r3, #2
 800165c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001660:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001664:	fa93 f3a3 	rbit	r3, r3
 8001668:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 800166c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001670:	fab3 f383 	clz	r3, r3
 8001674:	b2db      	uxtb	r3, r3
 8001676:	095b      	lsrs	r3, r3, #5
 8001678:	b2db      	uxtb	r3, r3
 800167a:	f043 0301 	orr.w	r3, r3, #1
 800167e:	b2db      	uxtb	r3, r3
 8001680:	2b01      	cmp	r3, #1
 8001682:	d102      	bne.n	800168a <HAL_RCC_OscConfig+0x36a>
 8001684:	4bbc      	ldr	r3, [pc, #752]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	e013      	b.n	80016b2 <HAL_RCC_OscConfig+0x392>
 800168a:	2302      	movs	r3, #2
 800168c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001690:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001694:	fa93 f3a3 	rbit	r3, r3
 8001698:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800169c:	2302      	movs	r3, #2
 800169e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 80016a2:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 80016a6:	fa93 f3a3 	rbit	r3, r3
 80016aa:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80016ae:	4bb2      	ldr	r3, [pc, #712]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 80016b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b2:	2202      	movs	r2, #2
 80016b4:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80016b8:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80016bc:	fa92 f2a2 	rbit	r2, r2
 80016c0:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80016c4:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80016c8:	fab2 f282 	clz	r2, r2
 80016cc:	b252      	sxtb	r2, r2
 80016ce:	f042 0220 	orr.w	r2, r2, #32
 80016d2:	b252      	sxtb	r2, r2
 80016d4:	b2d2      	uxtb	r2, r2
 80016d6:	f002 021f 	and.w	r2, r2, #31
 80016da:	2101      	movs	r1, #1
 80016dc:	fa01 f202 	lsl.w	r2, r1, r2
 80016e0:	4013      	ands	r3, r2
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d007      	beq.n	80016f6 <HAL_RCC_OscConfig+0x3d6>
 80016e6:	1d3b      	adds	r3, r7, #4
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	691b      	ldr	r3, [r3, #16]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d002      	beq.n	80016f6 <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 80016f0:	2301      	movs	r3, #1
 80016f2:	f000 bcfc 	b.w	80020ee <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016f6:	4ba0      	ldr	r3, [pc, #640]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80016fe:	1d3b      	adds	r3, r7, #4
 8001700:	681b      	ldr	r3, [r3, #0]
 8001702:	6959      	ldr	r1, [r3, #20]
 8001704:	23f8      	movs	r3, #248	; 0xf8
 8001706:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800170a:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 800170e:	fa93 f3a3 	rbit	r3, r3
 8001712:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001716:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 800171a:	fab3 f383 	clz	r3, r3
 800171e:	fa01 f303 	lsl.w	r3, r1, r3
 8001722:	4995      	ldr	r1, [pc, #596]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 8001724:	4313      	orrs	r3, r2
 8001726:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001728:	e0f5      	b.n	8001916 <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800172a:	1d3b      	adds	r3, r7, #4
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	691b      	ldr	r3, [r3, #16]
 8001730:	2b00      	cmp	r3, #0
 8001732:	f000 8085 	beq.w	8001840 <HAL_RCC_OscConfig+0x520>
 8001736:	2301      	movs	r3, #1
 8001738:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800173c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001740:	fa93 f3a3 	rbit	r3, r3
 8001744:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001748:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800174c:	fab3 f383 	clz	r3, r3
 8001750:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001754:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001758:	009b      	lsls	r3, r3, #2
 800175a:	461a      	mov	r2, r3
 800175c:	2301      	movs	r3, #1
 800175e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001760:	f7ff fa2a 	bl	8000bb8 <HAL_GetTick>
 8001764:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	e00a      	b.n	8001780 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff fa25 	bl	8000bb8 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	2b02      	cmp	r3, #2
 8001778:	d902      	bls.n	8001780 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 800177a:	2303      	movs	r3, #3
 800177c:	f000 bcb7 	b.w	80020ee <HAL_RCC_OscConfig+0xdce>
 8001780:	2302      	movs	r3, #2
 8001782:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001786:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800178a:	fa93 f3a3 	rbit	r3, r3
 800178e:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8001792:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001796:	fab3 f383 	clz	r3, r3
 800179a:	b2db      	uxtb	r3, r3
 800179c:	095b      	lsrs	r3, r3, #5
 800179e:	b2db      	uxtb	r3, r3
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	b2db      	uxtb	r3, r3
 80017a6:	2b01      	cmp	r3, #1
 80017a8:	d102      	bne.n	80017b0 <HAL_RCC_OscConfig+0x490>
 80017aa:	4b73      	ldr	r3, [pc, #460]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	e013      	b.n	80017d8 <HAL_RCC_OscConfig+0x4b8>
 80017b0:	2302      	movs	r3, #2
 80017b2:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b6:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80017ba:	fa93 f3a3 	rbit	r3, r3
 80017be:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80017c2:	2302      	movs	r3, #2
 80017c4:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80017c8:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80017cc:	fa93 f3a3 	rbit	r3, r3
 80017d0:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80017d4:	4b68      	ldr	r3, [pc, #416]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 80017d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d8:	2202      	movs	r2, #2
 80017da:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80017de:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80017e2:	fa92 f2a2 	rbit	r2, r2
 80017e6:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 80017ea:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80017ee:	fab2 f282 	clz	r2, r2
 80017f2:	b252      	sxtb	r2, r2
 80017f4:	f042 0220 	orr.w	r2, r2, #32
 80017f8:	b252      	sxtb	r2, r2
 80017fa:	b2d2      	uxtb	r2, r2
 80017fc:	f002 021f 	and.w	r2, r2, #31
 8001800:	2101      	movs	r1, #1
 8001802:	fa01 f202 	lsl.w	r2, r1, r2
 8001806:	4013      	ands	r3, r2
 8001808:	2b00      	cmp	r3, #0
 800180a:	d0ae      	beq.n	800176a <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800180c:	4b5a      	ldr	r3, [pc, #360]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001814:	1d3b      	adds	r3, r7, #4
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	6959      	ldr	r1, [r3, #20]
 800181a:	23f8      	movs	r3, #248	; 0xf8
 800181c:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001820:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 8001824:	fa93 f3a3 	rbit	r3, r3
 8001828:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 800182c:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8001830:	fab3 f383 	clz	r3, r3
 8001834:	fa01 f303 	lsl.w	r3, r1, r3
 8001838:	494f      	ldr	r1, [pc, #316]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 800183a:	4313      	orrs	r3, r2
 800183c:	600b      	str	r3, [r1, #0]
 800183e:	e06a      	b.n	8001916 <HAL_RCC_OscConfig+0x5f6>
 8001840:	2301      	movs	r3, #1
 8001842:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001846:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 800184a:	fa93 f3a3 	rbit	r3, r3
 800184e:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 8001852:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001856:	fab3 f383 	clz	r3, r3
 800185a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800185e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001862:	009b      	lsls	r3, r3, #2
 8001864:	461a      	mov	r2, r3
 8001866:	2300      	movs	r3, #0
 8001868:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800186a:	f7ff f9a5 	bl	8000bb8 <HAL_GetTick>
 800186e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	e00a      	b.n	800188a <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001874:	f7ff f9a0 	bl	8000bb8 <HAL_GetTick>
 8001878:	4602      	mov	r2, r0
 800187a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800187e:	1ad3      	subs	r3, r2, r3
 8001880:	2b02      	cmp	r3, #2
 8001882:	d902      	bls.n	800188a <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 8001884:	2303      	movs	r3, #3
 8001886:	f000 bc32 	b.w	80020ee <HAL_RCC_OscConfig+0xdce>
 800188a:	2302      	movs	r3, #2
 800188c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001890:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001894:	fa93 f3a3 	rbit	r3, r3
 8001898:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 800189c:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80018a0:	fab3 f383 	clz	r3, r3
 80018a4:	b2db      	uxtb	r3, r3
 80018a6:	095b      	lsrs	r3, r3, #5
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	f043 0301 	orr.w	r3, r3, #1
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	2b01      	cmp	r3, #1
 80018b2:	d102      	bne.n	80018ba <HAL_RCC_OscConfig+0x59a>
 80018b4:	4b30      	ldr	r3, [pc, #192]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	e013      	b.n	80018e2 <HAL_RCC_OscConfig+0x5c2>
 80018ba:	2302      	movs	r3, #2
 80018bc:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018c0:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80018c4:	fa93 f3a3 	rbit	r3, r3
 80018c8:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80018cc:	2302      	movs	r3, #2
 80018ce:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80018d2:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80018d6:	fa93 f3a3 	rbit	r3, r3
 80018da:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80018de:	4b26      	ldr	r3, [pc, #152]	; (8001978 <HAL_RCC_OscConfig+0x658>)
 80018e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018e2:	2202      	movs	r2, #2
 80018e4:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80018e8:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80018ec:	fa92 f2a2 	rbit	r2, r2
 80018f0:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 80018f4:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80018f8:	fab2 f282 	clz	r2, r2
 80018fc:	b252      	sxtb	r2, r2
 80018fe:	f042 0220 	orr.w	r2, r2, #32
 8001902:	b252      	sxtb	r2, r2
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	f002 021f 	and.w	r2, r2, #31
 800190a:	2101      	movs	r1, #1
 800190c:	fa01 f202 	lsl.w	r2, r1, r2
 8001910:	4013      	ands	r3, r2
 8001912:	2b00      	cmp	r3, #0
 8001914:	d1ae      	bne.n	8001874 <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001916:	1d3b      	adds	r3, r7, #4
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0308 	and.w	r3, r3, #8
 8001920:	2b00      	cmp	r3, #0
 8001922:	f000 80d8 	beq.w	8001ad6 <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	699b      	ldr	r3, [r3, #24]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d067      	beq.n	8001a00 <HAL_RCC_OscConfig+0x6e0>
 8001930:	2301      	movs	r3, #1
 8001932:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001936:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 800193a:	fa93 f3a3 	rbit	r3, r3
 800193e:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 8001942:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	461a      	mov	r2, r3
 800194c:	4b0b      	ldr	r3, [pc, #44]	; (800197c <HAL_RCC_OscConfig+0x65c>)
 800194e:	4413      	add	r3, r2
 8001950:	009b      	lsls	r3, r3, #2
 8001952:	461a      	mov	r2, r3
 8001954:	2301      	movs	r3, #1
 8001956:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001958:	f7ff f92e 	bl	8000bb8 <HAL_GetTick>
 800195c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001960:	e00e      	b.n	8001980 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001962:	f7ff f929 	bl	8000bb8 <HAL_GetTick>
 8001966:	4602      	mov	r2, r0
 8001968:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800196c:	1ad3      	subs	r3, r2, r3
 800196e:	2b02      	cmp	r3, #2
 8001970:	d906      	bls.n	8001980 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e3bb      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
 8001976:	bf00      	nop
 8001978:	40021000 	.word	0x40021000
 800197c:	10908120 	.word	0x10908120
 8001980:	2302      	movs	r3, #2
 8001982:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800198a:	fa93 f3a3 	rbit	r3, r3
 800198e:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 8001992:	2302      	movs	r3, #2
 8001994:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8001998:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019aa:	2202      	movs	r2, #2
 80019ac:	601a      	str	r2, [r3, #0]
 80019ae:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	fa93 f2a3 	rbit	r2, r3
 80019b8:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80019bc:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019be:	4ba5      	ldr	r3, [pc, #660]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 80019c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019c6:	2102      	movs	r1, #2
 80019c8:	6019      	str	r1, [r3, #0]
 80019ca:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	fa93 f1a3 	rbit	r1, r3
 80019d4:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019d8:	6019      	str	r1, [r3, #0]
  return(result);
 80019da:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fab3 f383 	clz	r3, r3
 80019e4:	b25b      	sxtb	r3, r3
 80019e6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019ea:	b25b      	sxtb	r3, r3
 80019ec:	b2db      	uxtb	r3, r3
 80019ee:	f003 031f 	and.w	r3, r3, #31
 80019f2:	2101      	movs	r1, #1
 80019f4:	fa01 f303 	lsl.w	r3, r1, r3
 80019f8:	4013      	ands	r3, r2
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d0b1      	beq.n	8001962 <HAL_RCC_OscConfig+0x642>
 80019fe:	e06a      	b.n	8001ad6 <HAL_RCC_OscConfig+0x7b6>
 8001a00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a04:	2201      	movs	r2, #1
 8001a06:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a08:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	fa93 f2a3 	rbit	r2, r3
 8001a12:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a16:	601a      	str	r2, [r3, #0]
  return(result);
 8001a18:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8001a1c:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a1e:	fab3 f383 	clz	r3, r3
 8001a22:	461a      	mov	r2, r3
 8001a24:	4b8c      	ldr	r3, [pc, #560]	; (8001c58 <HAL_RCC_OscConfig+0x938>)
 8001a26:	4413      	add	r3, r2
 8001a28:	009b      	lsls	r3, r3, #2
 8001a2a:	461a      	mov	r2, r3
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001a30:	f7ff f8c2 	bl	8000bb8 <HAL_GetTick>
 8001a34:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a38:	e009      	b.n	8001a4e <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001a3a:	f7ff f8bd 	bl	8000bb8 <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001a44:	1ad3      	subs	r3, r2, r3
 8001a46:	2b02      	cmp	r3, #2
 8001a48:	d901      	bls.n	8001a4e <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8001a4a:	2303      	movs	r3, #3
 8001a4c:	e34f      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
 8001a4e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a52:	2202      	movs	r2, #2
 8001a54:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a56:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	fa93 f2a3 	rbit	r2, r3
 8001a60:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a6a:	2202      	movs	r2, #2
 8001a6c:	601a      	str	r2, [r3, #0]
 8001a6e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	fa93 f2a3 	rbit	r2, r3
 8001a78:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a82:	2202      	movs	r2, #2
 8001a84:	601a      	str	r2, [r3, #0]
 8001a86:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	fa93 f2a3 	rbit	r2, r3
 8001a90:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8001a94:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a96:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001a98:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001a9e:	2102      	movs	r1, #2
 8001aa0:	6019      	str	r1, [r3, #0]
 8001aa2:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	fa93 f1a3 	rbit	r1, r3
 8001aac:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ab0:	6019      	str	r1, [r3, #0]
  return(result);
 8001ab2:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	fab3 f383 	clz	r3, r3
 8001abc:	b25b      	sxtb	r3, r3
 8001abe:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001ac2:	b25b      	sxtb	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	f003 031f 	and.w	r3, r3, #31
 8001aca:	2101      	movs	r1, #1
 8001acc:	fa01 f303 	lsl.w	r3, r1, r3
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d1b1      	bne.n	8001a3a <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001ad6:	1d3b      	adds	r3, r7, #4
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0304 	and.w	r3, r3, #4
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	f000 8159 	beq.w	8001d98 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001aec:	4b59      	ldr	r3, [pc, #356]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001aee:	69db      	ldr	r3, [r3, #28]
 8001af0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d112      	bne.n	8001b1e <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001af8:	4b56      	ldr	r3, [pc, #344]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001afa:	69db      	ldr	r3, [r3, #28]
 8001afc:	4a55      	ldr	r2, [pc, #340]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001afe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b02:	61d3      	str	r3, [r2, #28]
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8001b0c:	f107 030c 	add.w	r3, r7, #12
 8001b10:	601a      	str	r2, [r3, #0]
 8001b12:	f107 030c 	add.w	r3, r7, #12
 8001b16:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b1e:	4b4f      	ldr	r3, [pc, #316]	; (8001c5c <HAL_RCC_OscConfig+0x93c>)
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d11a      	bne.n	8001b60 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001b2a:	4b4c      	ldr	r3, [pc, #304]	; (8001c5c <HAL_RCC_OscConfig+0x93c>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	4a4b      	ldr	r2, [pc, #300]	; (8001c5c <HAL_RCC_OscConfig+0x93c>)
 8001b30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b34:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001b36:	f7ff f83f 	bl	8000bb8 <HAL_GetTick>
 8001b3a:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b3e:	e009      	b.n	8001b54 <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b40:	f7ff f83a 	bl	8000bb8 <HAL_GetTick>
 8001b44:	4602      	mov	r2, r0
 8001b46:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	2b64      	cmp	r3, #100	; 0x64
 8001b4e:	d901      	bls.n	8001b54 <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8001b50:	2303      	movs	r3, #3
 8001b52:	e2cc      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001b54:	4b41      	ldr	r3, [pc, #260]	; (8001c5c <HAL_RCC_OscConfig+0x93c>)
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ef      	beq.n	8001b40 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b60:	1d3b      	adds	r3, r7, #4
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	68db      	ldr	r3, [r3, #12]
 8001b66:	2b01      	cmp	r3, #1
 8001b68:	d106      	bne.n	8001b78 <HAL_RCC_OscConfig+0x858>
 8001b6a:	4b3a      	ldr	r3, [pc, #232]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001b6c:	6a1b      	ldr	r3, [r3, #32]
 8001b6e:	4a39      	ldr	r2, [pc, #228]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001b70:	f043 0301 	orr.w	r3, r3, #1
 8001b74:	6213      	str	r3, [r2, #32]
 8001b76:	e02f      	b.n	8001bd8 <HAL_RCC_OscConfig+0x8b8>
 8001b78:	1d3b      	adds	r3, r7, #4
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	68db      	ldr	r3, [r3, #12]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d10c      	bne.n	8001b9c <HAL_RCC_OscConfig+0x87c>
 8001b82:	4b34      	ldr	r3, [pc, #208]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001b84:	6a1b      	ldr	r3, [r3, #32]
 8001b86:	4a33      	ldr	r2, [pc, #204]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001b88:	f023 0301 	bic.w	r3, r3, #1
 8001b8c:	6213      	str	r3, [r2, #32]
 8001b8e:	4b31      	ldr	r3, [pc, #196]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001b90:	6a1b      	ldr	r3, [r3, #32]
 8001b92:	4a30      	ldr	r2, [pc, #192]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001b94:	f023 0304 	bic.w	r3, r3, #4
 8001b98:	6213      	str	r3, [r2, #32]
 8001b9a:	e01d      	b.n	8001bd8 <HAL_RCC_OscConfig+0x8b8>
 8001b9c:	1d3b      	adds	r3, r7, #4
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	68db      	ldr	r3, [r3, #12]
 8001ba2:	2b05      	cmp	r3, #5
 8001ba4:	d10c      	bne.n	8001bc0 <HAL_RCC_OscConfig+0x8a0>
 8001ba6:	4b2b      	ldr	r3, [pc, #172]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4a2a      	ldr	r2, [pc, #168]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001bac:	f043 0304 	orr.w	r3, r3, #4
 8001bb0:	6213      	str	r3, [r2, #32]
 8001bb2:	4b28      	ldr	r3, [pc, #160]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001bb4:	6a1b      	ldr	r3, [r3, #32]
 8001bb6:	4a27      	ldr	r2, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001bb8:	f043 0301 	orr.w	r3, r3, #1
 8001bbc:	6213      	str	r3, [r2, #32]
 8001bbe:	e00b      	b.n	8001bd8 <HAL_RCC_OscConfig+0x8b8>
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001bc2:	6a1b      	ldr	r3, [r3, #32]
 8001bc4:	4a23      	ldr	r2, [pc, #140]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	6213      	str	r3, [r2, #32]
 8001bcc:	4b21      	ldr	r3, [pc, #132]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001bce:	6a1b      	ldr	r3, [r3, #32]
 8001bd0:	4a20      	ldr	r2, [pc, #128]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001bd2:	f023 0304 	bic.w	r3, r3, #4
 8001bd6:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001bd8:	1d3b      	adds	r3, r7, #4
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d06b      	beq.n	8001cba <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001be2:	f7fe ffe9 	bl	8000bb8 <HAL_GetTick>
 8001be6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001bea:	e00b      	b.n	8001c04 <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001bec:	f7fe ffe4 	bl	8000bb8 <HAL_GetTick>
 8001bf0:	4602      	mov	r2, r0
 8001bf2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d901      	bls.n	8001c04 <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8001c00:	2303      	movs	r3, #3
 8001c02:	e274      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
 8001c04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c08:	2202      	movs	r2, #2
 8001c0a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c0c:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	fa93 f2a3 	rbit	r2, r3
 8001c16:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8001c1a:	601a      	str	r2, [r3, #0]
 8001c1c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c20:	2202      	movs	r2, #2
 8001c22:	601a      	str	r2, [r3, #0]
 8001c24:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	fa93 f2a3 	rbit	r2, r3
 8001c2e:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c32:	601a      	str	r2, [r3, #0]
  return(result);
 8001c34:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8001c38:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001c3a:	fab3 f383 	clz	r3, r3
 8001c3e:	b2db      	uxtb	r3, r3
 8001c40:	095b      	lsrs	r3, r3, #5
 8001c42:	b2db      	uxtb	r3, r3
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d108      	bne.n	8001c60 <HAL_RCC_OscConfig+0x940>
 8001c4e:	4b01      	ldr	r3, [pc, #4]	; (8001c54 <HAL_RCC_OscConfig+0x934>)
 8001c50:	6a1b      	ldr	r3, [r3, #32]
 8001c52:	e013      	b.n	8001c7c <HAL_RCC_OscConfig+0x95c>
 8001c54:	40021000 	.word	0x40021000
 8001c58:	10908120 	.word	0x10908120
 8001c5c:	40007000 	.word	0x40007000
 8001c60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c64:	2202      	movs	r2, #2
 8001c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c68:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	fa93 f2a3 	rbit	r2, r3
 8001c72:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8001c76:	601a      	str	r2, [r3, #0]
 8001c78:	4bbb      	ldr	r3, [pc, #748]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001c7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c7c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001c80:	2102      	movs	r1, #2
 8001c82:	6011      	str	r1, [r2, #0]
 8001c84:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8001c88:	6812      	ldr	r2, [r2, #0]
 8001c8a:	fa92 f1a2 	rbit	r1, r2
 8001c8e:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c92:	6011      	str	r1, [r2, #0]
  return(result);
 8001c94:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	fab2 f282 	clz	r2, r2
 8001c9e:	b252      	sxtb	r2, r2
 8001ca0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001ca4:	b252      	sxtb	r2, r2
 8001ca6:	b2d2      	uxtb	r2, r2
 8001ca8:	f002 021f 	and.w	r2, r2, #31
 8001cac:	2101      	movs	r1, #1
 8001cae:	fa01 f202 	lsl.w	r2, r1, r2
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d099      	beq.n	8001bec <HAL_RCC_OscConfig+0x8cc>
 8001cb8:	e064      	b.n	8001d84 <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001cba:	f7fe ff7d 	bl	8000bb8 <HAL_GetTick>
 8001cbe:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001cc2:	e00b      	b.n	8001cdc <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001cc4:	f7fe ff78 	bl	8000bb8 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cce:	1ad3      	subs	r3, r2, r3
 8001cd0:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cd4:	4293      	cmp	r3, r2
 8001cd6:	d901      	bls.n	8001cdc <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8001cd8:	2303      	movs	r3, #3
 8001cda:	e208      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
 8001cdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ce0:	2202      	movs	r2, #2
 8001ce2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ce4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	fa93 f2a3 	rbit	r2, r3
 8001cee:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8001cf2:	601a      	str	r2, [r3, #0]
 8001cf4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001cf8:	2202      	movs	r2, #2
 8001cfa:	601a      	str	r2, [r3, #0]
 8001cfc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	fa93 f2a3 	rbit	r2, r3
 8001d06:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d0a:	601a      	str	r2, [r3, #0]
  return(result);
 8001d0c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8001d10:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001d12:	fab3 f383 	clz	r3, r3
 8001d16:	b2db      	uxtb	r3, r3
 8001d18:	095b      	lsrs	r3, r3, #5
 8001d1a:	b2db      	uxtb	r3, r3
 8001d1c:	f043 0302 	orr.w	r3, r3, #2
 8001d20:	b2db      	uxtb	r3, r3
 8001d22:	2b02      	cmp	r3, #2
 8001d24:	d102      	bne.n	8001d2c <HAL_RCC_OscConfig+0xa0c>
 8001d26:	4b90      	ldr	r3, [pc, #576]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001d28:	6a1b      	ldr	r3, [r3, #32]
 8001d2a:	e00d      	b.n	8001d48 <HAL_RCC_OscConfig+0xa28>
 8001d2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d30:	2202      	movs	r2, #2
 8001d32:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d34:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	fa93 f2a3 	rbit	r2, r3
 8001d3e:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8001d42:	601a      	str	r2, [r3, #0]
 8001d44:	4b88      	ldr	r3, [pc, #544]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d4c:	2102      	movs	r1, #2
 8001d4e:	6011      	str	r1, [r2, #0]
 8001d50:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8001d54:	6812      	ldr	r2, [r2, #0]
 8001d56:	fa92 f1a2 	rbit	r1, r2
 8001d5a:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d5e:	6011      	str	r1, [r2, #0]
  return(result);
 8001d60:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8001d64:	6812      	ldr	r2, [r2, #0]
 8001d66:	fab2 f282 	clz	r2, r2
 8001d6a:	b252      	sxtb	r2, r2
 8001d6c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d70:	b252      	sxtb	r2, r2
 8001d72:	b2d2      	uxtb	r2, r2
 8001d74:	f002 021f 	and.w	r2, r2, #31
 8001d78:	2101      	movs	r1, #1
 8001d7a:	fa01 f202 	lsl.w	r2, r1, r2
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d19f      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001d84:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d8c:	4b76      	ldr	r3, [pc, #472]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001d8e:	69db      	ldr	r3, [r3, #28]
 8001d90:	4a75      	ldr	r2, [pc, #468]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001d92:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d96:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001d98:	1d3b      	adds	r3, r7, #4
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	69db      	ldr	r3, [r3, #28]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 81a4 	beq.w	80020ec <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001da4:	4b70      	ldr	r3, [pc, #448]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	f000 819b 	beq.w	80020e8 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001db2:	1d3b      	adds	r3, r7, #4
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	69db      	ldr	r3, [r3, #28]
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	f040 8113 	bne.w	8001fe4 <HAL_RCC_OscConfig+0xcc4>
 8001dbe:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001dc2:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001dc6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dc8:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	fa93 f2a3 	rbit	r2, r3
 8001dd2:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001dd6:	601a      	str	r2, [r3, #0]
  return(result);
 8001dd8:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001ddc:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dde:	fab3 f383 	clz	r3, r3
 8001de2:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001de6:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	461a      	mov	r2, r3
 8001dee:	2300      	movs	r3, #0
 8001df0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df2:	f7fe fee1 	bl	8000bb8 <HAL_GetTick>
 8001df6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001dfa:	e009      	b.n	8001e10 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001dfc:	f7fe fedc 	bl	8000bb8 <HAL_GetTick>
 8001e00:	4602      	mov	r2, r0
 8001e02:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e06:	1ad3      	subs	r3, r2, r3
 8001e08:	2b02      	cmp	r3, #2
 8001e0a:	d901      	bls.n	8001e10 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8001e0c:	2303      	movs	r3, #3
 8001e0e:	e16e      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
 8001e10:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e14:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e18:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e1a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	fa93 f2a3 	rbit	r2, r3
 8001e24:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e28:	601a      	str	r2, [r3, #0]
  return(result);
 8001e2a:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8001e2e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001e30:	fab3 f383 	clz	r3, r3
 8001e34:	b2db      	uxtb	r3, r3
 8001e36:	095b      	lsrs	r3, r3, #5
 8001e38:	b2db      	uxtb	r3, r3
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	2b01      	cmp	r3, #1
 8001e42:	d102      	bne.n	8001e4a <HAL_RCC_OscConfig+0xb2a>
 8001e44:	4b48      	ldr	r3, [pc, #288]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	e01b      	b.n	8001e82 <HAL_RCC_OscConfig+0xb62>
 8001e4a:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e4e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e52:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	fa93 f2a3 	rbit	r2, r3
 8001e5e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e62:	601a      	str	r2, [r3, #0]
 8001e64:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e6c:	601a      	str	r2, [r3, #0]
 8001e6e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	fa93 f2a3 	rbit	r2, r3
 8001e78:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001e7c:	601a      	str	r2, [r3, #0]
 8001e7e:	4b3a      	ldr	r3, [pc, #232]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e82:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001e86:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001e8a:	6011      	str	r1, [r2, #0]
 8001e8c:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8001e90:	6812      	ldr	r2, [r2, #0]
 8001e92:	fa92 f1a2 	rbit	r1, r2
 8001e96:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001e9a:	6011      	str	r1, [r2, #0]
  return(result);
 8001e9c:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8001ea0:	6812      	ldr	r2, [r2, #0]
 8001ea2:	fab2 f282 	clz	r2, r2
 8001ea6:	b252      	sxtb	r2, r2
 8001ea8:	f042 0220 	orr.w	r2, r2, #32
 8001eac:	b252      	sxtb	r2, r2
 8001eae:	b2d2      	uxtb	r2, r2
 8001eb0:	f002 021f 	and.w	r2, r2, #31
 8001eb4:	2101      	movs	r1, #1
 8001eb6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eba:	4013      	ands	r3, r2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d19d      	bne.n	8001dfc <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ec0:	4b29      	ldr	r3, [pc, #164]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8001ec8:	1d3b      	adds	r3, r7, #4
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	6a1b      	ldr	r3, [r3, #32]
 8001ed4:	430b      	orrs	r3, r1
 8001ed6:	4924      	ldr	r1, [pc, #144]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	604b      	str	r3, [r1, #4]
 8001edc:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001ee0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001ee4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ee6:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	fa93 f2a3 	rbit	r2, r3
 8001ef0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ef4:	601a      	str	r2, [r3, #0]
  return(result);
 8001ef6:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001efa:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001efc:	fab3 f383 	clz	r3, r3
 8001f00:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f04:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f08:	009b      	lsls	r3, r3, #2
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f10:	f7fe fe52 	bl	8000bb8 <HAL_GetTick>
 8001f14:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f18:	e009      	b.n	8001f2e <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001f1a:	f7fe fe4d 	bl	8000bb8 <HAL_GetTick>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e0df      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
 8001f2e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f36:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f38:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	fa93 f2a3 	rbit	r2, r3
 8001f42:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f46:	601a      	str	r2, [r3, #0]
  return(result);
 8001f48:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f4c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001f4e:	fab3 f383 	clz	r3, r3
 8001f52:	b2db      	uxtb	r3, r3
 8001f54:	095b      	lsrs	r3, r3, #5
 8001f56:	b2db      	uxtb	r3, r3
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	b2db      	uxtb	r3, r3
 8001f5e:	2b01      	cmp	r3, #1
 8001f60:	d104      	bne.n	8001f6c <HAL_RCC_OscConfig+0xc4c>
 8001f62:	4b01      	ldr	r3, [pc, #4]	; (8001f68 <HAL_RCC_OscConfig+0xc48>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	e01d      	b.n	8001fa4 <HAL_RCC_OscConfig+0xc84>
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f70:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f76:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	fa93 f2a3 	rbit	r2, r3
 8001f80:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001f84:	601a      	str	r2, [r3, #0]
 8001f86:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f8a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f8e:	601a      	str	r2, [r3, #0]
 8001f90:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	fa93 f2a3 	rbit	r2, r3
 8001f9a:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001f9e:	601a      	str	r2, [r3, #0]
 8001fa0:	4b55      	ldr	r3, [pc, #340]	; (80020f8 <HAL_RCC_OscConfig+0xdd8>)
 8001fa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fa4:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fa8:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001fac:	6011      	str	r1, [r2, #0]
 8001fae:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8001fb2:	6812      	ldr	r2, [r2, #0]
 8001fb4:	fa92 f1a2 	rbit	r1, r2
 8001fb8:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fbc:	6011      	str	r1, [r2, #0]
  return(result);
 8001fbe:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001fc2:	6812      	ldr	r2, [r2, #0]
 8001fc4:	fab2 f282 	clz	r2, r2
 8001fc8:	b252      	sxtb	r2, r2
 8001fca:	f042 0220 	orr.w	r2, r2, #32
 8001fce:	b252      	sxtb	r2, r2
 8001fd0:	b2d2      	uxtb	r2, r2
 8001fd2:	f002 021f 	and.w	r2, r2, #31
 8001fd6:	2101      	movs	r1, #1
 8001fd8:	fa01 f202 	lsl.w	r2, r1, r2
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d09b      	beq.n	8001f1a <HAL_RCC_OscConfig+0xbfa>
 8001fe2:	e083      	b.n	80020ec <HAL_RCC_OscConfig+0xdcc>
 8001fe4:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001fe8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001fec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	fa93 f2a3 	rbit	r2, r3
 8001ff8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001ffc:	601a      	str	r2, [r3, #0]
  return(result);
 8001ffe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002002:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002004:	fab3 f383 	clz	r3, r3
 8002008:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800200c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002010:	009b      	lsls	r3, r3, #2
 8002012:	461a      	mov	r2, r3
 8002014:	2300      	movs	r3, #0
 8002016:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7fe fdce 	bl	8000bb8 <HAL_GetTick>
 800201c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002020:	e009      	b.n	8002036 <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002022:	f7fe fdc9 	bl	8000bb8 <HAL_GetTick>
 8002026:	4602      	mov	r2, r0
 8002028:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800202c:	1ad3      	subs	r3, r2, r3
 800202e:	2b02      	cmp	r3, #2
 8002030:	d901      	bls.n	8002036 <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8002032:	2303      	movs	r3, #3
 8002034:	e05b      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
 8002036:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800203a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800203e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002040:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	fa93 f2a3 	rbit	r2, r3
 800204a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800204e:	601a      	str	r2, [r3, #0]
  return(result);
 8002050:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002054:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002056:	fab3 f383 	clz	r3, r3
 800205a:	b2db      	uxtb	r3, r3
 800205c:	095b      	lsrs	r3, r3, #5
 800205e:	b2db      	uxtb	r3, r3
 8002060:	f043 0301 	orr.w	r3, r3, #1
 8002064:	b2db      	uxtb	r3, r3
 8002066:	2b01      	cmp	r3, #1
 8002068:	d102      	bne.n	8002070 <HAL_RCC_OscConfig+0xd50>
 800206a:	4b23      	ldr	r3, [pc, #140]	; (80020f8 <HAL_RCC_OscConfig+0xdd8>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	e01b      	b.n	80020a8 <HAL_RCC_OscConfig+0xd88>
 8002070:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002074:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002078:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800207a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	fa93 f2a3 	rbit	r2, r3
 8002084:	f107 0320 	add.w	r3, r7, #32
 8002088:	601a      	str	r2, [r3, #0]
 800208a:	f107 031c 	add.w	r3, r7, #28
 800208e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002092:	601a      	str	r2, [r3, #0]
 8002094:	f107 031c 	add.w	r3, r7, #28
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	fa93 f2a3 	rbit	r2, r3
 800209e:	f107 0318 	add.w	r3, r7, #24
 80020a2:	601a      	str	r2, [r3, #0]
 80020a4:	4b14      	ldr	r3, [pc, #80]	; (80020f8 <HAL_RCC_OscConfig+0xdd8>)
 80020a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a8:	f107 0214 	add.w	r2, r7, #20
 80020ac:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80020b0:	6011      	str	r1, [r2, #0]
 80020b2:	f107 0214 	add.w	r2, r7, #20
 80020b6:	6812      	ldr	r2, [r2, #0]
 80020b8:	fa92 f1a2 	rbit	r1, r2
 80020bc:	f107 0210 	add.w	r2, r7, #16
 80020c0:	6011      	str	r1, [r2, #0]
  return(result);
 80020c2:	f107 0210 	add.w	r2, r7, #16
 80020c6:	6812      	ldr	r2, [r2, #0]
 80020c8:	fab2 f282 	clz	r2, r2
 80020cc:	b252      	sxtb	r2, r2
 80020ce:	f042 0220 	orr.w	r2, r2, #32
 80020d2:	b252      	sxtb	r2, r2
 80020d4:	b2d2      	uxtb	r2, r2
 80020d6:	f002 021f 	and.w	r2, r2, #31
 80020da:	2101      	movs	r1, #1
 80020dc:	fa01 f202 	lsl.w	r2, r1, r2
 80020e0:	4013      	ands	r3, r2
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d19d      	bne.n	8002022 <HAL_RCC_OscConfig+0xd02>
 80020e6:	e001      	b.n	80020ec <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80020e8:	2301      	movs	r3, #1
 80020ea:	e000      	b.n	80020ee <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80020ec:	2300      	movs	r3, #0
}
 80020ee:	4618      	mov	r0, r3
 80020f0:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	40021000 	.word	0x40021000

080020fc <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b09e      	sub	sp, #120	; 0x78
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
 8002104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002106:	2300      	movs	r3, #0
 8002108:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d101      	bne.n	8002114 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002110:	2301      	movs	r3, #1
 8002112:	e164      	b.n	80023de <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002114:	4b92      	ldr	r3, [pc, #584]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f003 0307 	and.w	r3, r3, #7
 800211c:	683a      	ldr	r2, [r7, #0]
 800211e:	429a      	cmp	r2, r3
 8002120:	d910      	bls.n	8002144 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002122:	4b8f      	ldr	r3, [pc, #572]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f023 0207 	bic.w	r2, r3, #7
 800212a:	498d      	ldr	r1, [pc, #564]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	4313      	orrs	r3, r2
 8002130:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002132:	4b8b      	ldr	r3, [pc, #556]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0307 	and.w	r3, r3, #7
 800213a:	683a      	ldr	r2, [r7, #0]
 800213c:	429a      	cmp	r2, r3
 800213e:	d001      	beq.n	8002144 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002140:	2301      	movs	r3, #1
 8002142:	e14c      	b.n	80023de <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0302 	and.w	r3, r3, #2
 800214c:	2b00      	cmp	r3, #0
 800214e:	d008      	beq.n	8002162 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002150:	4b84      	ldr	r3, [pc, #528]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	4981      	ldr	r1, [pc, #516]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 800215e:	4313      	orrs	r3, r2
 8002160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	f003 0301 	and.w	r3, r3, #1
 800216a:	2b00      	cmp	r3, #0
 800216c:	f000 80df 	beq.w	800232e <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	685b      	ldr	r3, [r3, #4]
 8002174:	2b01      	cmp	r3, #1
 8002176:	d13d      	bne.n	80021f4 <HAL_RCC_ClockConfig+0xf8>
 8002178:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800217c:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800217e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002180:	fa93 f3a3 	rbit	r3, r3
 8002184:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 8002186:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	095b      	lsrs	r3, r3, #5
 8002190:	b2db      	uxtb	r3, r3
 8002192:	f043 0301 	orr.w	r3, r3, #1
 8002196:	b2db      	uxtb	r3, r3
 8002198:	2b01      	cmp	r3, #1
 800219a:	d102      	bne.n	80021a2 <HAL_RCC_ClockConfig+0xa6>
 800219c:	4b71      	ldr	r3, [pc, #452]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	e00f      	b.n	80021c2 <HAL_RCC_ClockConfig+0xc6>
 80021a2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021a6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021a8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80021aa:	fa93 f3a3 	rbit	r3, r3
 80021ae:	667b      	str	r3, [r7, #100]	; 0x64
 80021b0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80021b4:	663b      	str	r3, [r7, #96]	; 0x60
 80021b6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80021b8:	fa93 f3a3 	rbit	r3, r3
 80021bc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80021be:	4b69      	ldr	r3, [pc, #420]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80021c6:	65ba      	str	r2, [r7, #88]	; 0x58
 80021c8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80021ca:	fa92 f2a2 	rbit	r2, r2
 80021ce:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80021d0:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80021d2:	fab2 f282 	clz	r2, r2
 80021d6:	b252      	sxtb	r2, r2
 80021d8:	f042 0220 	orr.w	r2, r2, #32
 80021dc:	b252      	sxtb	r2, r2
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	f002 021f 	and.w	r2, r2, #31
 80021e4:	2101      	movs	r1, #1
 80021e6:	fa01 f202 	lsl.w	r2, r1, r2
 80021ea:	4013      	ands	r3, r2
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d17d      	bne.n	80022ec <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0f4      	b.n	80023de <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d13d      	bne.n	8002278 <HAL_RCC_ClockConfig+0x17c>
 80021fc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002200:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002202:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002204:	fa93 f3a3 	rbit	r3, r3
 8002208:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 800220a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800220c:	fab3 f383 	clz	r3, r3
 8002210:	b2db      	uxtb	r3, r3
 8002212:	095b      	lsrs	r3, r3, #5
 8002214:	b2db      	uxtb	r3, r3
 8002216:	f043 0301 	orr.w	r3, r3, #1
 800221a:	b2db      	uxtb	r3, r3
 800221c:	2b01      	cmp	r3, #1
 800221e:	d102      	bne.n	8002226 <HAL_RCC_ClockConfig+0x12a>
 8002220:	4b50      	ldr	r3, [pc, #320]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	e00f      	b.n	8002246 <HAL_RCC_ClockConfig+0x14a>
 8002226:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800222a:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800222e:	fa93 f3a3 	rbit	r3, r3
 8002232:	647b      	str	r3, [r7, #68]	; 0x44
 8002234:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002238:	643b      	str	r3, [r7, #64]	; 0x40
 800223a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800223c:	fa93 f3a3 	rbit	r3, r3
 8002240:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002242:	4b48      	ldr	r3, [pc, #288]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 8002244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002246:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800224a:	63ba      	str	r2, [r7, #56]	; 0x38
 800224c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800224e:	fa92 f2a2 	rbit	r2, r2
 8002252:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002254:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002256:	fab2 f282 	clz	r2, r2
 800225a:	b252      	sxtb	r2, r2
 800225c:	f042 0220 	orr.w	r2, r2, #32
 8002260:	b252      	sxtb	r2, r2
 8002262:	b2d2      	uxtb	r2, r2
 8002264:	f002 021f 	and.w	r2, r2, #31
 8002268:	2101      	movs	r1, #1
 800226a:	fa01 f202 	lsl.w	r2, r1, r2
 800226e:	4013      	ands	r3, r2
 8002270:	2b00      	cmp	r3, #0
 8002272:	d13b      	bne.n	80022ec <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	e0b2      	b.n	80023de <HAL_RCC_ClockConfig+0x2e2>
 8002278:	2302      	movs	r3, #2
 800227a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	fa93 f3a3 	rbit	r3, r3
 8002282:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002284:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002286:	fab3 f383 	clz	r3, r3
 800228a:	b2db      	uxtb	r3, r3
 800228c:	095b      	lsrs	r3, r3, #5
 800228e:	b2db      	uxtb	r3, r3
 8002290:	f043 0301 	orr.w	r3, r3, #1
 8002294:	b2db      	uxtb	r3, r3
 8002296:	2b01      	cmp	r3, #1
 8002298:	d102      	bne.n	80022a0 <HAL_RCC_ClockConfig+0x1a4>
 800229a:	4b32      	ldr	r3, [pc, #200]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	e00d      	b.n	80022bc <HAL_RCC_ClockConfig+0x1c0>
 80022a0:	2302      	movs	r3, #2
 80022a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022a6:	fa93 f3a3 	rbit	r3, r3
 80022aa:	627b      	str	r3, [r7, #36]	; 0x24
 80022ac:	2302      	movs	r3, #2
 80022ae:	623b      	str	r3, [r7, #32]
 80022b0:	6a3b      	ldr	r3, [r7, #32]
 80022b2:	fa93 f3a3 	rbit	r3, r3
 80022b6:	61fb      	str	r3, [r7, #28]
 80022b8:	4b2a      	ldr	r3, [pc, #168]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 80022ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022bc:	2202      	movs	r2, #2
 80022be:	61ba      	str	r2, [r7, #24]
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	fa92 f2a2 	rbit	r2, r2
 80022c6:	617a      	str	r2, [r7, #20]
  return(result);
 80022c8:	697a      	ldr	r2, [r7, #20]
 80022ca:	fab2 f282 	clz	r2, r2
 80022ce:	b252      	sxtb	r2, r2
 80022d0:	f042 0220 	orr.w	r2, r2, #32
 80022d4:	b252      	sxtb	r2, r2
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	f002 021f 	and.w	r2, r2, #31
 80022dc:	2101      	movs	r1, #1
 80022de:	fa01 f202 	lsl.w	r2, r1, r2
 80022e2:	4013      	ands	r3, r2
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e078      	b.n	80023de <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ec:	4b1d      	ldr	r3, [pc, #116]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 80022ee:	685b      	ldr	r3, [r3, #4]
 80022f0:	f023 0203 	bic.w	r2, r3, #3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	491a      	ldr	r1, [pc, #104]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 80022fa:	4313      	orrs	r3, r2
 80022fc:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022fe:	f7fe fc5b 	bl	8000bb8 <HAL_GetTick>
 8002302:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002304:	e00a      	b.n	800231c <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002306:	f7fe fc57 	bl	8000bb8 <HAL_GetTick>
 800230a:	4602      	mov	r2, r0
 800230c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800230e:	1ad3      	subs	r3, r2, r3
 8002310:	f241 3288 	movw	r2, #5000	; 0x1388
 8002314:	4293      	cmp	r3, r2
 8002316:	d901      	bls.n	800231c <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e060      	b.n	80023de <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800231c:	4b11      	ldr	r3, [pc, #68]	; (8002364 <HAL_RCC_ClockConfig+0x268>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	f003 020c 	and.w	r2, r3, #12
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	685b      	ldr	r3, [r3, #4]
 8002328:	009b      	lsls	r3, r3, #2
 800232a:	429a      	cmp	r2, r3
 800232c:	d1eb      	bne.n	8002306 <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800232e:	4b0c      	ldr	r3, [pc, #48]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0307 	and.w	r3, r3, #7
 8002336:	683a      	ldr	r2, [r7, #0]
 8002338:	429a      	cmp	r2, r3
 800233a:	d215      	bcs.n	8002368 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800233c:	4b08      	ldr	r3, [pc, #32]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f023 0207 	bic.w	r2, r3, #7
 8002344:	4906      	ldr	r1, [pc, #24]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	4313      	orrs	r3, r2
 800234a:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800234c:	4b04      	ldr	r3, [pc, #16]	; (8002360 <HAL_RCC_ClockConfig+0x264>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f003 0307 	and.w	r3, r3, #7
 8002354:	683a      	ldr	r2, [r7, #0]
 8002356:	429a      	cmp	r2, r3
 8002358:	d006      	beq.n	8002368 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 800235a:	2301      	movs	r3, #1
 800235c:	e03f      	b.n	80023de <HAL_RCC_ClockConfig+0x2e2>
 800235e:	bf00      	nop
 8002360:	40022000 	.word	0x40022000
 8002364:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f003 0304 	and.w	r3, r3, #4
 8002370:	2b00      	cmp	r3, #0
 8002372:	d008      	beq.n	8002386 <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002374:	4b1c      	ldr	r3, [pc, #112]	; (80023e8 <HAL_RCC_ClockConfig+0x2ec>)
 8002376:	685b      	ldr	r3, [r3, #4]
 8002378:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	68db      	ldr	r3, [r3, #12]
 8002380:	4919      	ldr	r1, [pc, #100]	; (80023e8 <HAL_RCC_ClockConfig+0x2ec>)
 8002382:	4313      	orrs	r3, r2
 8002384:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f003 0308 	and.w	r3, r3, #8
 800238e:	2b00      	cmp	r3, #0
 8002390:	d009      	beq.n	80023a6 <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002392:	4b15      	ldr	r3, [pc, #84]	; (80023e8 <HAL_RCC_ClockConfig+0x2ec>)
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	00db      	lsls	r3, r3, #3
 80023a0:	4911      	ldr	r1, [pc, #68]	; (80023e8 <HAL_RCC_ClockConfig+0x2ec>)
 80023a2:	4313      	orrs	r3, r2
 80023a4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80023a6:	f000 f825 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 80023aa:	4601      	mov	r1, r0
 80023ac:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <HAL_RCC_ClockConfig+0x2ec>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80023b4:	23f0      	movs	r3, #240	; 0xf0
 80023b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023b8:	693b      	ldr	r3, [r7, #16]
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	60fb      	str	r3, [r7, #12]
  return(result);
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	fab3 f383 	clz	r3, r3
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	4a08      	ldr	r2, [pc, #32]	; (80023ec <HAL_RCC_ClockConfig+0x2f0>)
 80023cc:	5cd3      	ldrb	r3, [r2, r3]
 80023ce:	fa21 f303 	lsr.w	r3, r1, r3
 80023d2:	4a07      	ldr	r2, [pc, #28]	; (80023f0 <HAL_RCC_ClockConfig+0x2f4>)
 80023d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80023d6:	2000      	movs	r0, #0
 80023d8:	f7fe fbaa 	bl	8000b30 <HAL_InitTick>
  
  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3778      	adds	r7, #120	; 0x78
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40021000 	.word	0x40021000
 80023ec:	08004ad8 	.word	0x08004ad8
 80023f0:	20000008 	.word	0x20000008

080023f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b08b      	sub	sp, #44	; 0x2c
 80023f8:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
 80023fe:	2300      	movs	r3, #0
 8002400:	61bb      	str	r3, [r7, #24]
 8002402:	2300      	movs	r3, #0
 8002404:	627b      	str	r3, [r7, #36]	; 0x24
 8002406:	2300      	movs	r3, #0
 8002408:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800240a:	2300      	movs	r3, #0
 800240c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800240e:	4b29      	ldr	r3, [pc, #164]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b04      	cmp	r3, #4
 800241c:	d002      	beq.n	8002424 <HAL_RCC_GetSysClockFreq+0x30>
 800241e:	2b08      	cmp	r3, #8
 8002420:	d003      	beq.n	800242a <HAL_RCC_GetSysClockFreq+0x36>
 8002422:	e03c      	b.n	800249e <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002424:	4b24      	ldr	r3, [pc, #144]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002426:	623b      	str	r3, [r7, #32]
      break;
 8002428:	e03c      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002430:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002434:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	fa93 f3a3 	rbit	r3, r3
 800243c:	607b      	str	r3, [r7, #4]
  return(result);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	fab3 f383 	clz	r3, r3
 8002444:	fa22 f303 	lsr.w	r3, r2, r3
 8002448:	4a1c      	ldr	r2, [pc, #112]	; (80024bc <HAL_RCC_GetSysClockFreq+0xc8>)
 800244a:	5cd3      	ldrb	r3, [r2, r3]
 800244c:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xc0>)
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	f003 020f 	and.w	r2, r3, #15
 8002456:	230f      	movs	r3, #15
 8002458:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	fa93 f3a3 	rbit	r3, r3
 8002460:	60fb      	str	r3, [r7, #12]
  return(result);
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	fab3 f383 	clz	r3, r3
 8002468:	fa22 f303 	lsr.w	r3, r2, r3
 800246c:	4a14      	ldr	r2, [pc, #80]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xcc>)
 800246e:	5cd3      	ldrb	r3, [r2, r3]
 8002470:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002472:	69fb      	ldr	r3, [r7, #28]
 8002474:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002478:	2b00      	cmp	r3, #0
 800247a:	d008      	beq.n	800248e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 800247c:	4a0e      	ldr	r2, [pc, #56]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	fbb2 f2f3 	udiv	r2, r2, r3
 8002484:	697b      	ldr	r3, [r7, #20]
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	627b      	str	r3, [r7, #36]	; 0x24
 800248c:	e004      	b.n	8002498 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 800248e:	697b      	ldr	r3, [r7, #20]
 8002490:	4a0c      	ldr	r2, [pc, #48]	; (80024c4 <HAL_RCC_GetSysClockFreq+0xd0>)
 8002492:	fb02 f303 	mul.w	r3, r2, r3
 8002496:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002498:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249a:	623b      	str	r3, [r7, #32]
      break;
 800249c:	e002      	b.n	80024a4 <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 800249e:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xc4>)
 80024a0:	623b      	str	r3, [r7, #32]
      break;
 80024a2:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a4:	6a3b      	ldr	r3, [r7, #32]
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	372c      	adds	r7, #44	; 0x2c
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	40021000 	.word	0x40021000
 80024b8:	007a1200 	.word	0x007a1200
 80024bc:	08004ab8 	.word	0x08004ab8
 80024c0:	08004ac8 	.word	0x08004ac8
 80024c4:	003d0900 	.word	0x003d0900

080024c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c8:	b480      	push	{r7}
 80024ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024cc:	4b03      	ldr	r3, [pc, #12]	; (80024dc <HAL_RCC_GetHCLKFreq+0x14>)
 80024ce:	681b      	ldr	r3, [r3, #0]
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	20000008 	.word	0x20000008

080024e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80024e6:	f7ff ffef 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 80024ea:	4601      	mov	r1, r0
 80024ec:	4b0b      	ldr	r3, [pc, #44]	; (800251c <HAL_RCC_GetPCLK1Freq+0x3c>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80024f4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80024f8:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	fa93 f3a3 	rbit	r3, r3
 8002500:	603b      	str	r3, [r7, #0]
  return(result);
 8002502:	683b      	ldr	r3, [r7, #0]
 8002504:	fab3 f383 	clz	r3, r3
 8002508:	fa22 f303 	lsr.w	r3, r2, r3
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <HAL_RCC_GetPCLK1Freq+0x40>)
 800250e:	5cd3      	ldrb	r3, [r2, r3]
 8002510:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002514:	4618      	mov	r0, r3
 8002516:	3708      	adds	r7, #8
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000
 8002520:	08004ae8 	.word	0x08004ae8

08002524 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b082      	sub	sp, #8
 8002528:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800252a:	f7ff ffcd 	bl	80024c8 <HAL_RCC_GetHCLKFreq>
 800252e:	4601      	mov	r1, r0
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002532:	685b      	ldr	r3, [r3, #4]
 8002534:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8002538:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 800253c:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	fa93 f3a3 	rbit	r3, r3
 8002544:	603b      	str	r3, [r7, #0]
  return(result);
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
 8002550:	4a04      	ldr	r2, [pc, #16]	; (8002564 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002552:	5cd3      	ldrb	r3, [r2, r3]
 8002554:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8002558:	4618      	mov	r0, r3
 800255a:	3708      	adds	r7, #8
 800255c:	46bd      	mov	sp, r7
 800255e:	bd80      	pop	{r7, pc}
 8002560:	40021000 	.word	0x40021000
 8002564:	08004ae8 	.word	0x08004ae8

08002568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{ 
 8002568:	b580      	push	{r7, lr}
 800256a:	b082      	sub	sp, #8
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if(htim == NULL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d101      	bne.n	800257a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002576:	2301      	movs	r3, #1
 8002578:	e01d      	b.n	80025b6 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance)); 
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  
  if(htim->State == HAL_TIM_STATE_RESET)
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002580:	b2db      	uxtb	r3, r3
 8002582:	2b00      	cmp	r3, #0
 8002584:	d106      	bne.n	8002594 <HAL_TIM_Base_Init+0x2c>
  {  
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	2200      	movs	r2, #0
 800258a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f001 f932 	bl	80037f8 <HAL_TIM_Base_MspInit>
  }
  
  /* Set the TIM state */
  htim->State= HAL_TIM_STATE_BUSY;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	2202      	movs	r2, #2
 8002598:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	3304      	adds	r3, #4
 80025a4:	4619      	mov	r1, r3
 80025a6:	4610      	mov	r0, r2
 80025a8:	f000 fa4e 	bl	8002a48 <TIM_Base_SetConfig>
  
  /* Initialize the TIM state*/
  htim->State= HAL_TIM_STATE_READY;
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  return HAL_OK;
 80025b4:	2300      	movs	r3, #0
}
 80025b6:	4618      	mov	r0, r3
 80025b8:	3708      	adds	r7, #8
 80025ba:	46bd      	mov	sp, r7
 80025bc:	bd80      	pop	{r7, pc}

080025be <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM handle
  * @retval HAL status
*/
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025be:	b480      	push	{r7}
 80025c0:	b083      	sub	sp, #12
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	68da      	ldr	r2, [r3, #12]
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f042 0201 	orr.w	r2, r2, #1
 80025d4:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f042 0201 	orr.w	r2, r2, #1
 80025e4:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
 80025e6:	2300      	movs	r3, #0
}
 80025e8:	4618      	mov	r0, r3
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f2:	4770      	bx	lr

080025f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b082      	sub	sp, #8
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	691b      	ldr	r3, [r3, #16]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b02      	cmp	r3, #2
 8002608:	d122      	bne.n	8002650 <HAL_TIM_IRQHandler+0x5c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	68db      	ldr	r3, [r3, #12]
 8002610:	f003 0302 	and.w	r3, r3, #2
 8002614:	2b02      	cmp	r3, #2
 8002616:	d11b      	bne.n	8002650 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f06f 0202 	mvn.w	r2, #2
 8002620:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	2201      	movs	r2, #1
 8002626:	771a      	strb	r2, [r3, #28]
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	699b      	ldr	r3, [r3, #24]
 800262e:	f003 0303 	and.w	r3, r3, #3
 8002632:	2b00      	cmp	r3, #0
 8002634:	d003      	beq.n	800263e <HAL_TIM_IRQHandler+0x4a>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8002636:	6878      	ldr	r0, [r7, #4]
 8002638:	f000 f9e7 	bl	8002a0a <HAL_TIM_IC_CaptureCallback>
 800263c:	e005      	b.n	800264a <HAL_TIM_IRQHandler+0x56>
        }
        /* Output compare event */
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f000 f9d9 	bl	80029f6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002644:	6878      	ldr	r0, [r7, #4]
 8002646:	f000 f9ea 	bl	8002a1e <HAL_TIM_PWM_PulseFinishedCallback>
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2200      	movs	r2, #0
 800264e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	f003 0304 	and.w	r3, r3, #4
 800265a:	2b04      	cmp	r3, #4
 800265c:	d122      	bne.n	80026a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	f003 0304 	and.w	r3, r3, #4
 8002668:	2b04      	cmp	r3, #4
 800266a:	d11b      	bne.n	80026a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f06f 0204 	mvn.w	r2, #4
 8002674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2202      	movs	r2, #2
 800267a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	699b      	ldr	r3, [r3, #24]
 8002682:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002686:	2b00      	cmp	r3, #0
 8002688:	d003      	beq.n	8002692 <HAL_TIM_IRQHandler+0x9e>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 800268a:	6878      	ldr	r0, [r7, #4]
 800268c:	f000 f9bd 	bl	8002a0a <HAL_TIM_IC_CaptureCallback>
 8002690:	e005      	b.n	800269e <HAL_TIM_IRQHandler+0xaa>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f000 f9af 	bl	80029f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002698:	6878      	ldr	r0, [r7, #4]
 800269a:	f000 f9c0 	bl	8002a1e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	691b      	ldr	r3, [r3, #16]
 80026aa:	f003 0308 	and.w	r3, r3, #8
 80026ae:	2b08      	cmp	r3, #8
 80026b0:	d122      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x104>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	f003 0308 	and.w	r3, r3, #8
 80026bc:	2b08      	cmp	r3, #8
 80026be:	d11b      	bne.n	80026f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f06f 0208 	mvn.w	r2, #8
 80026c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	2204      	movs	r2, #4
 80026ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	69db      	ldr	r3, [r3, #28]
 80026d6:	f003 0303 	and.w	r3, r3, #3
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d003      	beq.n	80026e6 <HAL_TIM_IRQHandler+0xf2>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f993 	bl	8002a0a <HAL_TIM_IC_CaptureCallback>
 80026e4:	e005      	b.n	80026f2 <HAL_TIM_IRQHandler+0xfe>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026e6:	6878      	ldr	r0, [r7, #4]
 80026e8:	f000 f985 	bl	80029f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f000 f996 	bl	8002a1e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2200      	movs	r2, #0
 80026f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	691b      	ldr	r3, [r3, #16]
 80026fe:	f003 0310 	and.w	r3, r3, #16
 8002702:	2b10      	cmp	r3, #16
 8002704:	d122      	bne.n	800274c <HAL_TIM_IRQHandler+0x158>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	f003 0310 	and.w	r3, r3, #16
 8002710:	2b10      	cmp	r3, #16
 8002712:	d11b      	bne.n	800274c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f06f 0210 	mvn.w	r2, #16
 800271c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2208      	movs	r2, #8
 8002722:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800272e:	2b00      	cmp	r3, #0
 8002730:	d003      	beq.n	800273a <HAL_TIM_IRQHandler+0x146>
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f000 f969 	bl	8002a0a <HAL_TIM_IC_CaptureCallback>
 8002738:	e005      	b.n	8002746 <HAL_TIM_IRQHandler+0x152>
      }
      /* Output compare event */
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800273a:	6878      	ldr	r0, [r7, #4]
 800273c:	f000 f95b 	bl	80029f6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002740:	6878      	ldr	r0, [r7, #4]
 8002742:	f000 f96c 	bl	8002a1e <HAL_TIM_PWM_PulseFinishedCallback>
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2200      	movs	r2, #0
 800274a:	771a      	strb	r2, [r3, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	691b      	ldr	r3, [r3, #16]
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	2b01      	cmp	r3, #1
 8002758:	d10e      	bne.n	8002778 <HAL_TIM_IRQHandler+0x184>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	f003 0301 	and.w	r3, r3, #1
 8002764:	2b01      	cmp	r3, #1
 8002766:	d107      	bne.n	8002778 <HAL_TIM_IRQHandler+0x184>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	f06f 0201 	mvn.w	r2, #1
 8002770:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8002772:	6878      	ldr	r0, [r7, #4]
 8002774:	f000 ffc0 	bl	80036f8 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	691b      	ldr	r3, [r3, #16]
 800277e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002782:	2b80      	cmp	r3, #128	; 0x80
 8002784:	d10e      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68db      	ldr	r3, [r3, #12]
 800278c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002790:	2b80      	cmp	r3, #128	; 0x80
 8002792:	d107      	bne.n	80027a4 <HAL_TIM_IRQHandler+0x1b0>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800279c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800279e:	6878      	ldr	r0, [r7, #4]
 80027a0:	f000 face 	bl	8002d40 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	691b      	ldr	r3, [r3, #16]
 80027aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b2:	d10e      	bne.n	80027d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	68db      	ldr	r3, [r3, #12]
 80027ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027be:	2b80      	cmp	r3, #128	; 0x80
 80027c0:	d107      	bne.n	80027d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80027ca:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 80027cc:	6878      	ldr	r0, [r7, #4]
 80027ce:	f000 fac1 	bl	8002d54 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027dc:	2b40      	cmp	r3, #64	; 0x40
 80027de:	d10e      	bne.n	80027fe <HAL_TIM_IRQHandler+0x20a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68db      	ldr	r3, [r3, #12]
 80027e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027ea:	2b40      	cmp	r3, #64	; 0x40
 80027ec:	d107      	bne.n	80027fe <HAL_TIM_IRQHandler+0x20a>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80027f6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f000 f91a 	bl	8002a32 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	691b      	ldr	r3, [r3, #16]
 8002804:	f003 0320 	and.w	r3, r3, #32
 8002808:	2b20      	cmp	r3, #32
 800280a:	d10e      	bne.n	800282a <HAL_TIM_IRQHandler+0x236>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f003 0320 	and.w	r3, r3, #32
 8002816:	2b20      	cmp	r3, #32
 8002818:	d107      	bne.n	800282a <HAL_TIM_IRQHandler+0x236>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f06f 0220 	mvn.w	r2, #32
 8002822:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutationCallback(htim);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fa81 	bl	8002d2c <HAL_TIMEx_CommutationCallback>
    }
  }
}
 800282a:	bf00      	nop
 800282c:	3708      	adds	r7, #8
 800282e:	46bd      	mov	sp, r7
 8002830:	bd80      	pop	{r7, pc}

08002832 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral. 
  * @retval HAL status
  */ 
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef * sClockSourceConfig)    
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b084      	sub	sp, #16
 8002836:	af00      	add	r7, sp, #0
 8002838:	6078      	str	r0, [r7, #4]
 800283a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr = 0U;
 800283c:	2300      	movs	r3, #0
 800283e:	60fb      	str	r3, [r7, #12]
  
  /* Process Locked */
  __HAL_LOCK(htim);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002846:	2b01      	cmp	r3, #1
 8002848:	d101      	bne.n	800284e <HAL_TIM_ConfigClockSource+0x1c>
 800284a:	2302      	movs	r3, #2
 800284c:	e0cf      	b.n	80029ee <HAL_TIM_ConfigClockSource+0x1bc>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2201      	movs	r2, #1
 8002852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  htim->State = HAL_TIM_STATE_BUSY;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	2202      	movs	r2, #2
 800285a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));
  
  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	689b      	ldr	r3, [r3, #8]
 8002864:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800286c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002870:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002878:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68fa      	ldr	r2, [r7, #12]
 8002880:	609a      	str	r2, [r3, #8]
  
  switch (sClockSourceConfig->ClockSource)
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	2b40      	cmp	r3, #64	; 0x40
 8002888:	d07c      	beq.n	8002984 <HAL_TIM_ConfigClockSource+0x152>
 800288a:	2b40      	cmp	r3, #64	; 0x40
 800288c:	d80f      	bhi.n	80028ae <HAL_TIM_ConfigClockSource+0x7c>
 800288e:	2b10      	cmp	r3, #16
 8002890:	f000 808f 	beq.w	80029b2 <HAL_TIM_ConfigClockSource+0x180>
 8002894:	2b10      	cmp	r3, #16
 8002896:	d803      	bhi.n	80028a0 <HAL_TIM_ConfigClockSource+0x6e>
 8002898:	2b00      	cmp	r3, #0
 800289a:	f000 8083 	beq.w	80029a4 <HAL_TIM_ConfigClockSource+0x172>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
    }
    break;
    
  default:
    break;    
 800289e:	e09d      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 80028a0:	2b20      	cmp	r3, #32
 80028a2:	f000 808d 	beq.w	80029c0 <HAL_TIM_ConfigClockSource+0x18e>
 80028a6:	2b30      	cmp	r3, #48	; 0x30
 80028a8:	f000 8091 	beq.w	80029ce <HAL_TIM_ConfigClockSource+0x19c>
    break;    
 80028ac:	e096      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 80028ae:	2b70      	cmp	r3, #112	; 0x70
 80028b0:	d018      	beq.n	80028e4 <HAL_TIM_ConfigClockSource+0xb2>
 80028b2:	2b70      	cmp	r3, #112	; 0x70
 80028b4:	d804      	bhi.n	80028c0 <HAL_TIM_ConfigClockSource+0x8e>
 80028b6:	2b50      	cmp	r3, #80	; 0x50
 80028b8:	d044      	beq.n	8002944 <HAL_TIM_ConfigClockSource+0x112>
 80028ba:	2b60      	cmp	r3, #96	; 0x60
 80028bc:	d052      	beq.n	8002964 <HAL_TIM_ConfigClockSource+0x132>
    break;    
 80028be:	e08d      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x1aa>
  switch (sClockSourceConfig->ClockSource)
 80028c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80028c4:	d003      	beq.n	80028ce <HAL_TIM_ConfigClockSource+0x9c>
 80028c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80028ca:	d028      	beq.n	800291e <HAL_TIM_ConfigClockSource+0xec>
    break;    
 80028cc:	e086      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x1aa>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	689b      	ldr	r3, [r3, #8]
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	6812      	ldr	r2, [r2, #0]
 80028d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028dc:	f023 0307 	bic.w	r3, r3, #7
 80028e0:	6093      	str	r3, [r2, #8]
    break;
 80028e2:	e07b      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	683b      	ldr	r3, [r7, #0]
 80028ea:	6899      	ldr	r1, [r3, #8]
 80028ec:	683b      	ldr	r3, [r7, #0]
 80028ee:	685a      	ldr	r2, [r3, #4]
 80028f0:	683b      	ldr	r3, [r7, #0]
 80028f2:	68db      	ldr	r3, [r3, #12]
 80028f4:	f000 f9a9 	bl	8002c4a <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	60fb      	str	r3, [r7, #12]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002906:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800290a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002912:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	609a      	str	r2, [r3, #8]
    break;
 800291c:	e05e      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ETR_SetConfig(htim->Instance, 
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6818      	ldr	r0, [r3, #0]
 8002922:	683b      	ldr	r3, [r7, #0]
 8002924:	6899      	ldr	r1, [r3, #8]
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	68db      	ldr	r3, [r3, #12]
 800292e:	f000 f98c 	bl	8002c4a <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689a      	ldr	r2, [r3, #8]
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002940:	609a      	str	r2, [r3, #8]
    break;
 8002942:	e04b      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	6818      	ldr	r0, [r3, #0]
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6859      	ldr	r1, [r3, #4]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	461a      	mov	r2, r3
 8002952:	f000 f8f3 	bl	8002b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	2150      	movs	r1, #80	; 0x50
 800295c:	4618      	mov	r0, r3
 800295e:	f000 f954 	bl	8002c0a <TIM_ITRx_SetConfig>
    break;
 8002962:	e03b      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	6859      	ldr	r1, [r3, #4]
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	461a      	mov	r2, r3
 8002972:	f000 f916 	bl	8002ba2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	2160      	movs	r1, #96	; 0x60
 800297c:	4618      	mov	r0, r3
 800297e:	f000 f944 	bl	8002c0a <TIM_ITRx_SetConfig>
    break;
 8002982:	e02b      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	6818      	ldr	r0, [r3, #0]
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	6859      	ldr	r1, [r3, #4]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	68db      	ldr	r3, [r3, #12]
 8002990:	461a      	mov	r2, r3
 8002992:	f000 f8d3 	bl	8002b3c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	2140      	movs	r1, #64	; 0x40
 800299c:	4618      	mov	r0, r3
 800299e:	f000 f934 	bl	8002c0a <TIM_ITRx_SetConfig>
    break;
 80029a2:	e01b      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR0);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	2100      	movs	r1, #0
 80029aa:	4618      	mov	r0, r3
 80029ac:	f000 f92d 	bl	8002c0a <TIM_ITRx_SetConfig>
    break;
 80029b0:	e014      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR1);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2110      	movs	r1, #16
 80029b8:	4618      	mov	r0, r3
 80029ba:	f000 f926 	bl	8002c0a <TIM_ITRx_SetConfig>
    break;
 80029be:	e00d      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR2);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	2120      	movs	r1, #32
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 f91f 	bl	8002c0a <TIM_ITRx_SetConfig>
    break;
 80029cc:	e006      	b.n	80029dc <HAL_TIM_ConfigClockSource+0x1aa>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_ITR3);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	2130      	movs	r1, #48	; 0x30
 80029d4:	4618      	mov	r0, r3
 80029d6:	f000 f918 	bl	8002c0a <TIM_ITRx_SetConfig>
    break;
 80029da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2201      	movs	r2, #1
 80029e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  
  __HAL_UNLOCK(htim);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 80029ec:	2300      	movs	r3, #0
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	3710      	adds	r7, #16
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}

080029f6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non blocking mode 
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029f6:	b480      	push	{r7}
 80029f8:	b083      	sub	sp, #12
 80029fa:	af00      	add	r7, sp, #0
 80029fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029fe:	bf00      	nop
 8002a00:	370c      	adds	r7, #12
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr

08002a0a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non blocking mode 
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002a0a:	b480      	push	{r7}
 8002a0c:	b083      	sub	sp, #12
 8002a0e:	af00      	add	r7, sp, #0
 8002a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002a12:	bf00      	nop
 8002a14:	370c      	adds	r7, #12
 8002a16:	46bd      	mov	sp, r7
 8002a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1c:	4770      	bx	lr

08002a1e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002a1e:	b480      	push	{r7}
 8002a20:	b083      	sub	sp, #12
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the __HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr

08002a32 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002a32:	b480      	push	{r7}
 8002a34:	b083      	sub	sp, #12
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
	...

08002a48 <TIM_Base_SetConfig>:
  * @param  TIMx TIM periheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	b085      	sub	sp, #20
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
 8002a50:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1 = 0U;
 8002a52:	2300      	movs	r3, #0
 8002a54:	60fb      	str	r3, [r7, #12]
  tmpcr1 = TIMx->CR1;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	60fb      	str	r3, [r7, #12]
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	4a32      	ldr	r2, [pc, #200]	; (8002b28 <TIM_Base_SetConfig+0xe0>)
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d007      	beq.n	8002a74 <TIM_Base_SetConfig+0x2c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a6a:	d003      	beq.n	8002a74 <TIM_Base_SetConfig+0x2c>
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	4a2f      	ldr	r2, [pc, #188]	; (8002b2c <TIM_Base_SetConfig+0xe4>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d108      	bne.n	8002a86 <TIM_Base_SetConfig+0x3e>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	68fa      	ldr	r2, [r7, #12]
 8002a82:	4313      	orrs	r3, r2
 8002a84:	60fb      	str	r3, [r7, #12]
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	4a27      	ldr	r2, [pc, #156]	; (8002b28 <TIM_Base_SetConfig+0xe0>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d013      	beq.n	8002ab6 <TIM_Base_SetConfig+0x6e>
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a94:	d00f      	beq.n	8002ab6 <TIM_Base_SetConfig+0x6e>
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	4a24      	ldr	r2, [pc, #144]	; (8002b2c <TIM_Base_SetConfig+0xe4>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d00b      	beq.n	8002ab6 <TIM_Base_SetConfig+0x6e>
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	4a23      	ldr	r2, [pc, #140]	; (8002b30 <TIM_Base_SetConfig+0xe8>)
 8002aa2:	4293      	cmp	r3, r2
 8002aa4:	d007      	beq.n	8002ab6 <TIM_Base_SetConfig+0x6e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	4a22      	ldr	r2, [pc, #136]	; (8002b34 <TIM_Base_SetConfig+0xec>)
 8002aaa:	4293      	cmp	r3, r2
 8002aac:	d003      	beq.n	8002ab6 <TIM_Base_SetConfig+0x6e>
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	4a21      	ldr	r2, [pc, #132]	; (8002b38 <TIM_Base_SetConfig+0xf0>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d108      	bne.n	8002ac8 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002abc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002abe:	683b      	ldr	r3, [r7, #0]
 8002ac0:	68db      	ldr	r3, [r3, #12]
 8002ac2:	68fa      	ldr	r2, [r7, #12]
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ace:	683b      	ldr	r3, [r7, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	4313      	orrs	r3, r2
 8002ad4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	68fa      	ldr	r2, [r7, #12]
 8002ada:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002adc:	683b      	ldr	r3, [r7, #0]
 8002ade:	689a      	ldr	r2, [r3, #8]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	62da      	str	r2, [r3, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	681a      	ldr	r2, [r3, #0]
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a0e      	ldr	r2, [pc, #56]	; (8002b28 <TIM_Base_SetConfig+0xe0>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d00b      	beq.n	8002b0c <TIM_Base_SetConfig+0xc4>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	4a0e      	ldr	r2, [pc, #56]	; (8002b30 <TIM_Base_SetConfig+0xe8>)
 8002af8:	4293      	cmp	r3, r2
 8002afa:	d007      	beq.n	8002b0c <TIM_Base_SetConfig+0xc4>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	4a0d      	ldr	r2, [pc, #52]	; (8002b34 <TIM_Base_SetConfig+0xec>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d003      	beq.n	8002b0c <TIM_Base_SetConfig+0xc4>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	4a0c      	ldr	r2, [pc, #48]	; (8002b38 <TIM_Base_SetConfig+0xf0>)
 8002b08:	4293      	cmp	r3, r2
 8002b0a:	d103      	bne.n	8002b14 <TIM_Base_SetConfig+0xcc>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	691a      	ldr	r2, [r3, #16]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	615a      	str	r2, [r3, #20]
}
 8002b1a:	bf00      	nop
 8002b1c:	3714      	adds	r7, #20
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	40012c00 	.word	0x40012c00
 8002b2c:	40000400 	.word	0x40000400
 8002b30:	40014000 	.word	0x40014000
 8002b34:	40014400 	.word	0x40014400
 8002b38:	40014800 	.word	0x40014800

08002b3c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b087      	sub	sp, #28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	60f8      	str	r0, [r7, #12]
 8002b44:	60b9      	str	r1, [r7, #8]
 8002b46:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002b48:	2300      	movs	r3, #0
 8002b4a:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002b4c:	2300      	movs	r3, #0
 8002b4e:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	6a1b      	ldr	r3, [r3, #32]
 8002b54:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	6a1b      	ldr	r3, [r3, #32]
 8002b5a:	f023 0201 	bic.w	r2, r3, #1
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	699b      	ldr	r3, [r3, #24]
 8002b66:	617b      	str	r3, [r7, #20]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002b68:	697b      	ldr	r3, [r7, #20]
 8002b6a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b6e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	011b      	lsls	r3, r3, #4
 8002b74:	697a      	ldr	r2, [r7, #20]
 8002b76:	4313      	orrs	r3, r2
 8002b78:	617b      	str	r3, [r7, #20]
  
  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002b7a:	693b      	ldr	r3, [r7, #16]
 8002b7c:	f023 030a 	bic.w	r3, r3, #10
 8002b80:	613b      	str	r3, [r7, #16]
  tmpccer |= TIM_ICPolarity;
 8002b82:	693a      	ldr	r2, [r7, #16]
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	613b      	str	r3, [r7, #16]
  
  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	697a      	ldr	r2, [r7, #20]
 8002b8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	693a      	ldr	r2, [r7, #16]
 8002b94:	621a      	str	r2, [r3, #32]
}
 8002b96:	bf00      	nop
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b087      	sub	sp, #28
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	60f8      	str	r0, [r7, #12]
 8002baa:	60b9      	str	r1, [r7, #8]
 8002bac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1 = 0U;
 8002bae:	2300      	movs	r3, #0
 8002bb0:	617b      	str	r3, [r7, #20]
  uint32_t tmpccer = 0U;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	613b      	str	r3, [r7, #16]
  
  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a1b      	ldr	r3, [r3, #32]
 8002bba:	f023 0210 	bic.w	r2, r3, #16
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	6a1b      	ldr	r3, [r3, #32]
 8002bcc:	613b      	str	r3, [r7, #16]
  
  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002bce:	697b      	ldr	r3, [r7, #20]
 8002bd0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002bd4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	031b      	lsls	r3, r3, #12
 8002bda:	697a      	ldr	r2, [r7, #20]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002be0:	693b      	ldr	r3, [r7, #16]
 8002be2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002be6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	011b      	lsls	r3, r3, #4
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	697a      	ldr	r2, [r7, #20]
 8002bf6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	693a      	ldr	r2, [r7, #16]
 8002bfc:	621a      	str	r2, [r3, #32]
}
 8002bfe:	bf00      	nop
 8002c00:	371c      	adds	r7, #28
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr

08002c0a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint16_t InputTriggerSource)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	b085      	sub	sp, #20
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
 8002c12:	460b      	mov	r3, r1
 8002c14:	807b      	strh	r3, [r7, #2]
  uint32_t tmpsmcr = 0U;
 8002c16:	2300      	movs	r3, #0
 8002c18:	60fb      	str	r3, [r7, #12]
  
   /* Get the TIMx SMCR register value */
   tmpsmcr = TIMx->SMCR;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	60fb      	str	r3, [r7, #12]
   /* Reset the TS Bits */
   tmpsmcr &= ~TIM_SMCR_TS;
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c26:	60fb      	str	r3, [r7, #12]
   /* Set the Input Trigger source and the slave mode*/
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8002c28:	887b      	ldrh	r3, [r7, #2]
 8002c2a:	f043 0307 	orr.w	r3, r3, #7
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]
   /* Write to TIMx SMCR */
   TIMx->SMCR = tmpsmcr;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	609a      	str	r2, [r3, #8]
}
 8002c3e:	bf00      	nop
 8002c40:	3714      	adds	r7, #20
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr

08002c4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	b087      	sub	sp, #28
 8002c4e:	af00      	add	r7, sp, #0
 8002c50:	60f8      	str	r0, [r7, #12]
 8002c52:	60b9      	str	r1, [r7, #8]
 8002c54:	607a      	str	r2, [r7, #4]
 8002c56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr = 0U;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]

  tmpsmcr = TIMx->SMCR;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	689b      	ldr	r3, [r3, #8]
 8002c60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002c62:	697b      	ldr	r3, [r7, #20]
 8002c64:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002c68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	021a      	lsls	r2, r3, #8
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	431a      	orrs	r2, r3
 8002c72:	68bb      	ldr	r3, [r7, #8]
 8002c74:	4313      	orrs	r3, r2
 8002c76:	697a      	ldr	r2, [r7, #20]
 8002c78:	4313      	orrs	r3, r2
 8002c7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	697a      	ldr	r2, [r7, #20]
 8002c80:	609a      	str	r2, [r3, #8]
} 
 8002c82:	bf00      	nop
 8002c84:	371c      	adds	r7, #28
 8002c86:	46bd      	mov	sp, r7
 8002c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c8c:	4770      	bx	lr
	...

08002c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim, 
                                                      TIM_MasterConfigTypeDef * sMasterConfig)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d101      	bne.n	8002ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ca4:	2302      	movs	r3, #2
 8002ca6:	e038      	b.n	8002d1a <HAL_TIMEx_MasterConfigSynchronization+0x8a>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	2201      	movs	r2, #1
 8002cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	685b      	ldr	r3, [r3, #4]
 8002cb6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	4a18      	ldr	r2, [pc, #96]	; (8002d28 <HAL_TIMEx_MasterConfigSynchronization+0x98>)
 8002cc6:	4293      	cmp	r3, r2
 8002cc8:	d108      	bne.n	8002cdc <HAL_TIMEx_MasterConfigSynchronization+0x4c>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002cd0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	68fa      	ldr	r2, [r7, #12]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	60fb      	str	r3, [r7, #12]
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ce2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002ce4:	683b      	ldr	r3, [r7, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	68fa      	ldr	r2, [r7, #12]
 8002cea:	4313      	orrs	r3, r2
 8002cec:	60fb      	str	r3, [r7, #12]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
 8002cee:	68bb      	ldr	r3, [r7, #8]
 8002cf0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002cf4:	60bb      	str	r3, [r7, #8]
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	60bb      	str	r3, [r7, #8]
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	68fa      	ldr	r2, [r7, #12]
 8002d06:	605a      	str	r2, [r3, #4]
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	68ba      	ldr	r2, [r7, #8]
 8002d0e:	609a      	str	r2, [r3, #8]

  __HAL_UNLOCK(htim);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  return HAL_OK;
 8002d18:	2300      	movs	r3, #0
} 
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3714      	adds	r7, #20
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	40012c00 	.word	0x40012c00

08002d2c <HAL_TIMEx_CommutationCallback>:
  * @brief  Hall commutation changed callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutationCallback(TIM_HandleTypeDef *htim)
{
 8002d2c:	b480      	push	{r7}
 8002d2e:	b083      	sub	sp, #12
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutationCallback could be implemented in the user file
   */
}
 8002d34:	bf00      	nop
 8002d36:	370c      	adds	r7, #12
 8002d38:	46bd      	mov	sp, r7
 8002d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3e:	4770      	bx	lr

08002d40 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non blocking mode 
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d40:	b480      	push	{r7}
 8002d42:	b083      	sub	sp, #12
 8002d44:	af00      	add	r7, sp, #0
 8002d46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d48:	bf00      	nop
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d5c:	bf00      	nop
 8002d5e:	370c      	adds	r7, #12
 8002d60:	46bd      	mov	sp, r7
 8002d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d66:	4770      	bx	lr

08002d68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d101      	bne.n	8002d7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d76:	2301      	movs	r3, #1
 8002d78:	e043      	b.n	8002e02 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8002d80:	b2db      	uxtb	r3, r3
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d106      	bne.n	8002d94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	2200      	movs	r2, #0
 8002d8a:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d8e:	6878      	ldr	r0, [r7, #4]
 8002d90:	f000 fd56 	bl	8003840 <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2224      	movs	r2, #36	; 0x24
 8002d98:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	681a      	ldr	r2, [r3, #0]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	f022 0201 	bic.w	r2, r2, #1
 8002daa:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002dac:	6878      	ldr	r0, [r7, #4]
 8002dae:	f000 f82d 	bl	8002e0c <UART_SetConfig>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e022      	b.n	8002e02 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d002      	beq.n	8002dca <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8002dc4:	6878      	ldr	r0, [r7, #4]
 8002dc6:	f000 f987 	bl	80030d8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	685a      	ldr	r2, [r3, #4]
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dd8:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	689a      	ldr	r2, [r3, #8]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002de8:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f042 0201 	orr.w	r2, r2, #1
 8002df8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fa0e 	bl	800321c <UART_CheckIdleState>
 8002e00:	4603      	mov	r3, r0
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	3708      	adds	r7, #8
 8002e06:	46bd      	mov	sp, r7
 8002e08:	bd80      	pop	{r7, pc}
	...

08002e0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b086      	sub	sp, #24
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8002e14:	2300      	movs	r3, #0
 8002e16:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8002e18:	2310      	movs	r3, #16
 8002e1a:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 8002e20:	2300      	movs	r3, #0
 8002e22:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e24:	2300      	movs	r3, #0
 8002e26:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	689a      	ldr	r2, [r3, #8]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	431a      	orrs	r2, r3
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	695b      	ldr	r3, [r3, #20]
 8002e36:	431a      	orrs	r2, r3
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	69db      	ldr	r3, [r3, #28]
 8002e3c:	4313      	orrs	r3, r2
 8002e3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	4b9f      	ldr	r3, [pc, #636]	; (80030c4 <UART_SetConfig+0x2b8>)
 8002e48:	4013      	ands	r3, r2
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6812      	ldr	r2, [r2, #0]
 8002e4e:	68f9      	ldr	r1, [r7, #12]
 8002e50:	430b      	orrs	r3, r1
 8002e52:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	68da      	ldr	r2, [r3, #12]
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	430a      	orrs	r2, r1
 8002e68:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6a1b      	ldr	r3, [r3, #32]
 8002e72:	4313      	orrs	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	430a      	orrs	r2, r1
 8002e88:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a8e      	ldr	r2, [pc, #568]	; (80030c8 <UART_SetConfig+0x2bc>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d121      	bne.n	8002ed8 <UART_SetConfig+0xcc>
 8002e94:	4b8d      	ldr	r3, [pc, #564]	; (80030cc <UART_SetConfig+0x2c0>)
 8002e96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e98:	f003 0303 	and.w	r3, r3, #3
 8002e9c:	2b03      	cmp	r3, #3
 8002e9e:	d817      	bhi.n	8002ed0 <UART_SetConfig+0xc4>
 8002ea0:	a201      	add	r2, pc, #4	; (adr r2, 8002ea8 <UART_SetConfig+0x9c>)
 8002ea2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ea6:	bf00      	nop
 8002ea8:	08002eb9 	.word	0x08002eb9
 8002eac:	08002ec5 	.word	0x08002ec5
 8002eb0:	08002ecb 	.word	0x08002ecb
 8002eb4:	08002ebf 	.word	0x08002ebf
 8002eb8:	2300      	movs	r3, #0
 8002eba:	75fb      	strb	r3, [r7, #23]
 8002ebc:	e01e      	b.n	8002efc <UART_SetConfig+0xf0>
 8002ebe:	2302      	movs	r3, #2
 8002ec0:	75fb      	strb	r3, [r7, #23]
 8002ec2:	e01b      	b.n	8002efc <UART_SetConfig+0xf0>
 8002ec4:	2304      	movs	r3, #4
 8002ec6:	75fb      	strb	r3, [r7, #23]
 8002ec8:	e018      	b.n	8002efc <UART_SetConfig+0xf0>
 8002eca:	2308      	movs	r3, #8
 8002ecc:	75fb      	strb	r3, [r7, #23]
 8002ece:	e015      	b.n	8002efc <UART_SetConfig+0xf0>
 8002ed0:	2310      	movs	r3, #16
 8002ed2:	75fb      	strb	r3, [r7, #23]
 8002ed4:	bf00      	nop
 8002ed6:	e011      	b.n	8002efc <UART_SetConfig+0xf0>
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4a7c      	ldr	r2, [pc, #496]	; (80030d0 <UART_SetConfig+0x2c4>)
 8002ede:	4293      	cmp	r3, r2
 8002ee0:	d102      	bne.n	8002ee8 <UART_SetConfig+0xdc>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	75fb      	strb	r3, [r7, #23]
 8002ee6:	e009      	b.n	8002efc <UART_SetConfig+0xf0>
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	4a79      	ldr	r2, [pc, #484]	; (80030d4 <UART_SetConfig+0x2c8>)
 8002eee:	4293      	cmp	r3, r2
 8002ef0:	d102      	bne.n	8002ef8 <UART_SetConfig+0xec>
 8002ef2:	2300      	movs	r3, #0
 8002ef4:	75fb      	strb	r3, [r7, #23]
 8002ef6:	e001      	b.n	8002efc <UART_SetConfig+0xf0>
 8002ef8:	2310      	movs	r3, #16
 8002efa:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	69db      	ldr	r3, [r3, #28]
 8002f00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f04:	d16f      	bne.n	8002fe6 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8002f06:	7dfb      	ldrb	r3, [r7, #23]
 8002f08:	2b08      	cmp	r3, #8
 8002f0a:	d857      	bhi.n	8002fbc <UART_SetConfig+0x1b0>
 8002f0c:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <UART_SetConfig+0x108>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f39 	.word	0x08002f39
 8002f18:	08002f55 	.word	0x08002f55
 8002f1c:	08002f71 	.word	0x08002f71
 8002f20:	08002fbd 	.word	0x08002fbd
 8002f24:	08002f8b 	.word	0x08002f8b
 8002f28:	08002fbd 	.word	0x08002fbd
 8002f2c:	08002fbd 	.word	0x08002fbd
 8002f30:	08002fbd 	.word	0x08002fbd
 8002f34:	08002fa7 	.word	0x08002fa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002f38:	f7ff fad2 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 8002f3c:	4603      	mov	r3, r0
 8002f3e:	005a      	lsls	r2, r3, #1
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	685b      	ldr	r3, [r3, #4]
 8002f44:	085b      	lsrs	r3, r3, #1
 8002f46:	441a      	add	r2, r3
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f50:	82bb      	strh	r3, [r7, #20]
        break;
 8002f52:	e036      	b.n	8002fc2 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002f54:	f7ff fae6 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	005a      	lsls	r2, r3, #1
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	685b      	ldr	r3, [r3, #4]
 8002f60:	085b      	lsrs	r3, r3, #1
 8002f62:	441a      	add	r2, r3
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f6c:	82bb      	strh	r3, [r7, #20]
        break;
 8002f6e:	e028      	b.n	8002fc2 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8002f7a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002f7e:	687a      	ldr	r2, [r7, #4]
 8002f80:	6852      	ldr	r2, [r2, #4]
 8002f82:	fbb3 f3f2 	udiv	r3, r3, r2
 8002f86:	82bb      	strh	r3, [r7, #20]
        break;
 8002f88:	e01b      	b.n	8002fc2 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002f8a:	f7ff fa33 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 8002f8e:	4603      	mov	r3, r0
 8002f90:	005a      	lsls	r2, r3, #1
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	685b      	ldr	r3, [r3, #4]
 8002f96:	085b      	lsrs	r3, r3, #1
 8002f98:	441a      	add	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fa2:	82bb      	strh	r3, [r7, #20]
        break;
 8002fa4:	e00d      	b.n	8002fc2 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	685b      	ldr	r3, [r3, #4]
 8002faa:	085b      	lsrs	r3, r3, #1
 8002fac:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fb8:	82bb      	strh	r3, [r7, #20]
        break;
 8002fba:	e002      	b.n	8002fc2 <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	74fb      	strb	r3, [r7, #19]
        break;
 8002fc0:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8002fc2:	8abb      	ldrh	r3, [r7, #20]
 8002fc4:	f023 030f 	bic.w	r3, r3, #15
 8002fc8:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002fca:	8abb      	ldrh	r3, [r7, #20]
 8002fcc:	105b      	asrs	r3, r3, #1
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	f003 0307 	and.w	r3, r3, #7
 8002fd4:	b29a      	uxth	r2, r3
 8002fd6:	897b      	ldrh	r3, [r7, #10]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	897a      	ldrh	r2, [r7, #10]
 8002fe2:	60da      	str	r2, [r3, #12]
 8002fe4:	e069      	b.n	80030ba <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8002fe6:	7dfb      	ldrb	r3, [r7, #23]
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	d863      	bhi.n	80030b4 <UART_SetConfig+0x2a8>
 8002fec:	a201      	add	r2, pc, #4	; (adr r2, 8002ff4 <UART_SetConfig+0x1e8>)
 8002fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ff2:	bf00      	nop
 8002ff4:	08003019 	.word	0x08003019
 8002ff8:	08003039 	.word	0x08003039
 8002ffc:	08003059 	.word	0x08003059
 8003000:	080030b5 	.word	0x080030b5
 8003004:	08003079 	.word	0x08003079
 8003008:	080030b5 	.word	0x080030b5
 800300c:	080030b5 	.word	0x080030b5
 8003010:	080030b5 	.word	0x080030b5
 8003014:	08003099 	.word	0x08003099
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003018:	f7ff fa62 	bl	80024e0 <HAL_RCC_GetPCLK1Freq>
 800301c:	4602      	mov	r2, r0
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	085b      	lsrs	r3, r3, #1
 8003024:	441a      	add	r2, r3
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	fbb2 f3f3 	udiv	r3, r2, r3
 800302e:	b29a      	uxth	r2, r3
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	60da      	str	r2, [r3, #12]
        break;
 8003036:	e040      	b.n	80030ba <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003038:	f7ff fa74 	bl	8002524 <HAL_RCC_GetPCLK2Freq>
 800303c:	4602      	mov	r2, r0
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	085b      	lsrs	r3, r3, #1
 8003044:	441a      	add	r2, r3
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	fbb2 f3f3 	udiv	r3, r2, r3
 800304e:	b29a      	uxth	r2, r3
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	60da      	str	r2, [r3, #12]
        break;
 8003056:	e030      	b.n	80030ba <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	685b      	ldr	r3, [r3, #4]
 800305c:	085b      	lsrs	r3, r3, #1
 800305e:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003062:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003066:	687a      	ldr	r2, [r7, #4]
 8003068:	6852      	ldr	r2, [r2, #4]
 800306a:	fbb3 f3f2 	udiv	r3, r3, r2
 800306e:	b29a      	uxth	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	60da      	str	r2, [r3, #12]
        break;
 8003076:	e020      	b.n	80030ba <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003078:	f7ff f9bc 	bl	80023f4 <HAL_RCC_GetSysClockFreq>
 800307c:	4602      	mov	r2, r0
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	685b      	ldr	r3, [r3, #4]
 8003082:	085b      	lsrs	r3, r3, #1
 8003084:	441a      	add	r2, r3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	fbb2 f3f3 	udiv	r3, r2, r3
 800308e:	b29a      	uxth	r2, r3
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60da      	str	r2, [r3, #12]
        break;
 8003096:	e010      	b.n	80030ba <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	085b      	lsrs	r3, r3, #1
 800309e:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	685b      	ldr	r3, [r3, #4]
 80030a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030aa:	b29a      	uxth	r2, r3
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	60da      	str	r2, [r3, #12]
        break;
 80030b2:	e002      	b.n	80030ba <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	74fb      	strb	r3, [r7, #19]
        break;
 80030b8:	bf00      	nop
    }
  }

  return ret;
 80030ba:	7cfb      	ldrb	r3, [r7, #19]

}
 80030bc:	4618      	mov	r0, r3
 80030be:	3718      	adds	r7, #24
 80030c0:	46bd      	mov	sp, r7
 80030c2:	bd80      	pop	{r7, pc}
 80030c4:	efff69f3 	.word	0xefff69f3
 80030c8:	40013800 	.word	0x40013800
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40004400 	.word	0x40004400
 80030d4:	40004800 	.word	0x40004800

080030d8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80030d8:	b480      	push	{r7}
 80030da:	b083      	sub	sp, #12
 80030dc:	af00      	add	r7, sp, #0
 80030de:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030e4:	f003 0301 	and.w	r3, r3, #1
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d00a      	beq.n	8003102 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	430a      	orrs	r2, r1
 8003100:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003106:	f003 0302 	and.w	r3, r3, #2
 800310a:	2b00      	cmp	r3, #0
 800310c:	d00a      	beq.n	8003124 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	430a      	orrs	r2, r1
 8003122:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003128:	f003 0304 	and.w	r3, r3, #4
 800312c:	2b00      	cmp	r3, #0
 800312e:	d00a      	beq.n	8003146 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	f003 0308 	and.w	r3, r3, #8
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00a      	beq.n	8003168 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	430a      	orrs	r2, r1
 8003166:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316c:	f003 0310 	and.w	r3, r3, #16
 8003170:	2b00      	cmp	r3, #0
 8003172:	d00a      	beq.n	800318a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689b      	ldr	r3, [r3, #8]
 800317a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	f003 0320 	and.w	r3, r3, #32
 8003192:	2b00      	cmp	r3, #0
 8003194:	d00a      	beq.n	80031ac <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	430a      	orrs	r2, r1
 80031aa:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	d01a      	beq.n	80031ee <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	685b      	ldr	r3, [r3, #4]
 80031be:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	430a      	orrs	r2, r1
 80031cc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031d6:	d10a      	bne.n	80031ee <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	685b      	ldr	r3, [r3, #4]
 80031de:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	430a      	orrs	r2, r1
 80031ec:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d00a      	beq.n	8003210 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	430a      	orrs	r2, r1
 800320e:	605a      	str	r2, [r3, #4]
  }
}
 8003210:	bf00      	nop
 8003212:	370c      	adds	r7, #12
 8003214:	46bd      	mov	sp, r7
 8003216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321a:	4770      	bx	lr

0800321c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af02      	add	r7, sp, #8
 8003222:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003224:	2300      	movs	r3, #0
 8003226:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800322e:	f7fd fcc3 	bl	8000bb8 <HAL_GetTick>
 8003232:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b08      	cmp	r3, #8
 8003240:	d10e      	bne.n	8003260 <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003242:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003246:	9300      	str	r3, [sp, #0]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2200      	movs	r2, #0
 800324c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003250:	6878      	ldr	r0, [r7, #4]
 8003252:	f000 f82c 	bl	80032ae <UART_WaitOnFlagUntilTimeout>
 8003256:	4603      	mov	r3, r0
 8003258:	2b00      	cmp	r3, #0
 800325a:	d001      	beq.n	8003260 <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 800325c:	2303      	movs	r3, #3
 800325e:	e022      	b.n	80032a6 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f003 0304 	and.w	r3, r3, #4
 800326a:	2b04      	cmp	r3, #4
 800326c:	d10e      	bne.n	800328c <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800326e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003272:	9300      	str	r3, [sp, #0]
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	2200      	movs	r2, #0
 8003278:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 f816 	bl	80032ae <UART_WaitOnFlagUntilTimeout>
 8003282:	4603      	mov	r3, r0
 8003284:	2b00      	cmp	r3, #0
 8003286:	d001      	beq.n	800328c <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003288:	2303      	movs	r3, #3
 800328a:	e00c      	b.n	80032a6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	2220      	movs	r2, #32
 8003290:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2220      	movs	r2, #32
 8003298:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2200      	movs	r2, #0
 80032a0:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 80032a4:	2300      	movs	r3, #0
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3710      	adds	r7, #16
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b084      	sub	sp, #16
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	60f8      	str	r0, [r7, #12]
 80032b6:	60b9      	str	r1, [r7, #8]
 80032b8:	603b      	str	r3, [r7, #0]
 80032ba:	4613      	mov	r3, r2
 80032bc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80032be:	e02c      	b.n	800331a <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80032c0:	69bb      	ldr	r3, [r7, #24]
 80032c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80032c6:	d028      	beq.n	800331a <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80032c8:	69bb      	ldr	r3, [r7, #24]
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d007      	beq.n	80032de <UART_WaitOnFlagUntilTimeout+0x30>
 80032ce:	f7fd fc73 	bl	8000bb8 <HAL_GetTick>
 80032d2:	4602      	mov	r2, r0
 80032d4:	683b      	ldr	r3, [r7, #0]
 80032d6:	1ad3      	subs	r3, r2, r3
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	429a      	cmp	r2, r3
 80032dc:	d21d      	bcs.n	800331a <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	681a      	ldr	r2, [r3, #0]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80032ec:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	689a      	ldr	r2, [r3, #8]
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f022 0201 	bic.w	r2, r2, #1
 80032fc:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2220      	movs	r2, #32
 8003302:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2220      	movs	r2, #32
 800330a:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003316:	2303      	movs	r3, #3
 8003318:	e00f      	b.n	800333a <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	69da      	ldr	r2, [r3, #28]
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	4013      	ands	r3, r2
 8003324:	68ba      	ldr	r2, [r7, #8]
 8003326:	429a      	cmp	r2, r3
 8003328:	bf0c      	ite	eq
 800332a:	2301      	moveq	r3, #1
 800332c:	2300      	movne	r3, #0
 800332e:	b2db      	uxtb	r3, r3
 8003330:	461a      	mov	r2, r3
 8003332:	79fb      	ldrb	r3, [r7, #7]
 8003334:	429a      	cmp	r2, r3
 8003336:	d0c3      	beq.n	80032c0 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003338:	2300      	movs	r3, #0
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003348:	f7fd fbdc 	bl	8000b04 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800334c:	f000 f816 	bl	800337c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003350:	f000 f8fe 	bl	8003550 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003354:	f000 f8cc 	bl	80034f0 <MX_USART2_UART_Init>
  MX_DAC1_Init();
 8003358:	f000 f852 	bl	8003400 <MX_DAC1_Init>
  MX_TIM2_Init();
 800335c:	f000 f87a 	bl	8003454 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  calculo_senal();
 8003360:	f000 f942 	bl	80035e8 <calculo_senal>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8003364:	2100      	movs	r1, #0
 8003366:	4803      	ldr	r0, [pc, #12]	; (8003374 <main+0x30>)
 8003368:	f7fd fd86 	bl	8000e78 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 800336c:	4802      	ldr	r0, [pc, #8]	; (8003378 <main+0x34>)
 800336e:	f7ff f926 	bl	80025be <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003372:	e7fe      	b.n	8003372 <main+0x2e>
 8003374:	20000060 	.word	0x20000060
 8003378:	20000078 	.word	0x20000078

0800337c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b090      	sub	sp, #64	; 0x40
 8003380:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003382:	f107 0318 	add.w	r3, r7, #24
 8003386:	2228      	movs	r2, #40	; 0x28
 8003388:	2100      	movs	r1, #0
 800338a:	4618      	mov	r0, r3
 800338c:	f000 fb6c 	bl	8003a68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003390:	1d3b      	adds	r3, r7, #4
 8003392:	2200      	movs	r2, #0
 8003394:	601a      	str	r2, [r3, #0]
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	609a      	str	r2, [r3, #8]
 800339a:	60da      	str	r2, [r3, #12]
 800339c:	611a      	str	r2, [r3, #16]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800339e:	2302      	movs	r3, #2
 80033a0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80033a2:	2301      	movs	r3, #1
 80033a4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80033a6:	2310      	movs	r3, #16
 80033a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80033aa:	2302      	movs	r3, #2
 80033ac:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80033ae:	2300      	movs	r3, #0
 80033b0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80033b2:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80033b6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80033b8:	f107 0318 	add.w	r3, r7, #24
 80033bc:	4618      	mov	r0, r3
 80033be:	f7fd ffaf 	bl	8001320 <HAL_RCC_OscConfig>
 80033c2:	4603      	mov	r3, r0
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d001      	beq.n	80033cc <SystemClock_Config+0x50>
  {
    Error_Handler();
 80033c8:	f000 f9ac 	bl	8003724 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80033cc:	230f      	movs	r3, #15
 80033ce:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80033d0:	2302      	movs	r3, #2
 80033d2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80033d4:	2300      	movs	r3, #0
 80033d6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80033d8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80033dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80033de:	2300      	movs	r3, #0
 80033e0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80033e2:	1d3b      	adds	r3, r7, #4
 80033e4:	2102      	movs	r1, #2
 80033e6:	4618      	mov	r0, r3
 80033e8:	f7fe fe88 	bl	80020fc <HAL_RCC_ClockConfig>
 80033ec:	4603      	mov	r3, r0
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d001      	beq.n	80033f6 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80033f2:	f000 f997 	bl	8003724 <Error_Handler>
  }
}
 80033f6:	bf00      	nop
 80033f8:	3740      	adds	r7, #64	; 0x40
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b084      	sub	sp, #16
 8003404:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003406:	1d3b      	adds	r3, r7, #4
 8003408:	2200      	movs	r2, #0
 800340a:	601a      	str	r2, [r3, #0]
 800340c:	605a      	str	r2, [r3, #4]
 800340e:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN DAC1_Init 1 */

  /* USER CODE END DAC1_Init 1 */
  /** DAC Initialization 
  */
  hdac1.Instance = DAC1;
 8003410:	4b0e      	ldr	r3, [pc, #56]	; (800344c <MX_DAC1_Init+0x4c>)
 8003412:	4a0f      	ldr	r2, [pc, #60]	; (8003450 <MX_DAC1_Init+0x50>)
 8003414:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003416:	480d      	ldr	r0, [pc, #52]	; (800344c <MX_DAC1_Init+0x4c>)
 8003418:	f7fd fce7 	bl	8000dea <HAL_DAC_Init>
 800341c:	4603      	mov	r3, r0
 800341e:	2b00      	cmp	r3, #0
 8003420:	d001      	beq.n	8003426 <MX_DAC1_Init+0x26>
  {
    Error_Handler();
 8003422:	f000 f97f 	bl	8003724 <Error_Handler>
  }
  /** DAC channel OUT1 config 
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8003426:	2300      	movs	r3, #0
 8003428:	607b      	str	r3, [r7, #4]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800342e:	1d3b      	adds	r3, r7, #4
 8003430:	2200      	movs	r2, #0
 8003432:	4619      	mov	r1, r3
 8003434:	4805      	ldr	r0, [pc, #20]	; (800344c <MX_DAC1_Init+0x4c>)
 8003436:	f7fd fd6b 	bl	8000f10 <HAL_DAC_ConfigChannel>
 800343a:	4603      	mov	r3, r0
 800343c:	2b00      	cmp	r3, #0
 800343e:	d001      	beq.n	8003444 <MX_DAC1_Init+0x44>
  {
    Error_Handler();
 8003440:	f000 f970 	bl	8003724 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003444:	bf00      	nop
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	20000060 	.word	0x20000060
 8003450:	40007400 	.word	0x40007400

08003454 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b088      	sub	sp, #32
 8003458:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800345a:	f107 0310 	add.w	r3, r7, #16
 800345e:	2200      	movs	r2, #0
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	605a      	str	r2, [r3, #4]
 8003464:	609a      	str	r2, [r3, #8]
 8003466:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003468:	1d3b      	adds	r3, r7, #4
 800346a:	2200      	movs	r2, #0
 800346c:	601a      	str	r2, [r3, #0]
 800346e:	605a      	str	r2, [r3, #4]
 8003470:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003472:	4b1e      	ldr	r3, [pc, #120]	; (80034ec <MX_TIM2_Init+0x98>)
 8003474:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003478:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63999;
 800347a:	4b1c      	ldr	r3, [pc, #112]	; (80034ec <MX_TIM2_Init+0x98>)
 800347c:	f64f 12ff 	movw	r2, #63999	; 0xf9ff
 8003480:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003482:	4b1a      	ldr	r3, [pc, #104]	; (80034ec <MX_TIM2_Init+0x98>)
 8003484:	2200      	movs	r2, #0
 8003486:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 8003488:	4b18      	ldr	r3, [pc, #96]	; (80034ec <MX_TIM2_Init+0x98>)
 800348a:	2209      	movs	r2, #9
 800348c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800348e:	4b17      	ldr	r3, [pc, #92]	; (80034ec <MX_TIM2_Init+0x98>)
 8003490:	2200      	movs	r2, #0
 8003492:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003494:	4b15      	ldr	r3, [pc, #84]	; (80034ec <MX_TIM2_Init+0x98>)
 8003496:	2200      	movs	r2, #0
 8003498:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800349a:	4814      	ldr	r0, [pc, #80]	; (80034ec <MX_TIM2_Init+0x98>)
 800349c:	f7ff f864 	bl	8002568 <HAL_TIM_Base_Init>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d001      	beq.n	80034aa <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80034a6:	f000 f93d 	bl	8003724 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80034aa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80034ae:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80034b0:	f107 0310 	add.w	r3, r7, #16
 80034b4:	4619      	mov	r1, r3
 80034b6:	480d      	ldr	r0, [pc, #52]	; (80034ec <MX_TIM2_Init+0x98>)
 80034b8:	f7ff f9bb 	bl	8002832 <HAL_TIM_ConfigClockSource>
 80034bc:	4603      	mov	r3, r0
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d001      	beq.n	80034c6 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80034c2:	f000 f92f 	bl	8003724 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80034c6:	2300      	movs	r3, #0
 80034c8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80034ca:	2300      	movs	r3, #0
 80034cc:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80034ce:	1d3b      	adds	r3, r7, #4
 80034d0:	4619      	mov	r1, r3
 80034d2:	4806      	ldr	r0, [pc, #24]	; (80034ec <MX_TIM2_Init+0x98>)
 80034d4:	f7ff fbdc 	bl	8002c90 <HAL_TIMEx_MasterConfigSynchronization>
 80034d8:	4603      	mov	r3, r0
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d001      	beq.n	80034e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80034de:	f000 f921 	bl	8003724 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80034e2:	bf00      	nop
 80034e4:	3720      	adds	r7, #32
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	20000078 	.word	0x20000078

080034f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80034f4:	4b14      	ldr	r3, [pc, #80]	; (8003548 <MX_USART2_UART_Init+0x58>)
 80034f6:	4a15      	ldr	r2, [pc, #84]	; (800354c <MX_USART2_UART_Init+0x5c>)
 80034f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <MX_USART2_UART_Init+0x58>)
 80034fc:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8003500:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003502:	4b11      	ldr	r3, [pc, #68]	; (8003548 <MX_USART2_UART_Init+0x58>)
 8003504:	2200      	movs	r2, #0
 8003506:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003508:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <MX_USART2_UART_Init+0x58>)
 800350a:	2200      	movs	r2, #0
 800350c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800350e:	4b0e      	ldr	r3, [pc, #56]	; (8003548 <MX_USART2_UART_Init+0x58>)
 8003510:	2200      	movs	r2, #0
 8003512:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003514:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <MX_USART2_UART_Init+0x58>)
 8003516:	220c      	movs	r2, #12
 8003518:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800351a:	4b0b      	ldr	r3, [pc, #44]	; (8003548 <MX_USART2_UART_Init+0x58>)
 800351c:	2200      	movs	r2, #0
 800351e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003520:	4b09      	ldr	r3, [pc, #36]	; (8003548 <MX_USART2_UART_Init+0x58>)
 8003522:	2200      	movs	r2, #0
 8003524:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003526:	4b08      	ldr	r3, [pc, #32]	; (8003548 <MX_USART2_UART_Init+0x58>)
 8003528:	2200      	movs	r2, #0
 800352a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800352c:	4b06      	ldr	r3, [pc, #24]	; (8003548 <MX_USART2_UART_Init+0x58>)
 800352e:	2200      	movs	r2, #0
 8003530:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003532:	4805      	ldr	r0, [pc, #20]	; (8003548 <MX_USART2_UART_Init+0x58>)
 8003534:	f7ff fc18 	bl	8002d68 <HAL_UART_Init>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d001      	beq.n	8003542 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800353e:	f000 f8f1 	bl	8003724 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}
 8003546:	bf00      	nop
 8003548:	200000b8 	.word	0x200000b8
 800354c:	40004400 	.word	0x40004400

08003550 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b088      	sub	sp, #32
 8003554:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003556:	f107 030c 	add.w	r3, r7, #12
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
 800355e:	605a      	str	r2, [r3, #4]
 8003560:	609a      	str	r2, [r3, #8]
 8003562:	60da      	str	r2, [r3, #12]
 8003564:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003566:	4b1d      	ldr	r3, [pc, #116]	; (80035dc <MX_GPIO_Init+0x8c>)
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	4a1c      	ldr	r2, [pc, #112]	; (80035dc <MX_GPIO_Init+0x8c>)
 800356c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003570:	6153      	str	r3, [r2, #20]
 8003572:	4b1a      	ldr	r3, [pc, #104]	; (80035dc <MX_GPIO_Init+0x8c>)
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800357a:	60bb      	str	r3, [r7, #8]
 800357c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800357e:	4b17      	ldr	r3, [pc, #92]	; (80035dc <MX_GPIO_Init+0x8c>)
 8003580:	695b      	ldr	r3, [r3, #20]
 8003582:	4a16      	ldr	r2, [pc, #88]	; (80035dc <MX_GPIO_Init+0x8c>)
 8003584:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003588:	6153      	str	r3, [r2, #20]
 800358a:	4b14      	ldr	r3, [pc, #80]	; (80035dc <MX_GPIO_Init+0x8c>)
 800358c:	695b      	ldr	r3, [r3, #20]
 800358e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003592:	607b      	str	r3, [r7, #4]
 8003594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003596:	4b11      	ldr	r3, [pc, #68]	; (80035dc <MX_GPIO_Init+0x8c>)
 8003598:	695b      	ldr	r3, [r3, #20]
 800359a:	4a10      	ldr	r2, [pc, #64]	; (80035dc <MX_GPIO_Init+0x8c>)
 800359c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80035a0:	6153      	str	r3, [r2, #20]
 80035a2:	4b0e      	ldr	r3, [pc, #56]	; (80035dc <MX_GPIO_Init+0x8c>)
 80035a4:	695b      	ldr	r3, [r3, #20]
 80035a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80035aa:	603b      	str	r3, [r7, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80035ae:	2200      	movs	r2, #0
 80035b0:	2108      	movs	r1, #8
 80035b2:	480b      	ldr	r0, [pc, #44]	; (80035e0 <MX_GPIO_Init+0x90>)
 80035b4:	f7fd fe8a 	bl	80012cc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80035b8:	2308      	movs	r3, #8
 80035ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80035bc:	2301      	movs	r3, #1
 80035be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c0:	2300      	movs	r3, #0
 80035c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035c4:	2300      	movs	r3, #0
 80035c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80035c8:	f107 030c 	add.w	r3, r7, #12
 80035cc:	4619      	mov	r1, r3
 80035ce:	4804      	ldr	r0, [pc, #16]	; (80035e0 <MX_GPIO_Init+0x90>)
 80035d0:	f7fd fd06 	bl	8000fe0 <HAL_GPIO_Init>

}
 80035d4:	bf00      	nop
 80035d6:	3720      	adds	r7, #32
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}
 80035dc:	40021000 	.word	0x40021000
 80035e0:	48000400 	.word	0x48000400
 80035e4:	00000000 	.word	0x00000000

080035e8 <calculo_senal>:

/* USER CODE BEGIN 4 */
void calculo_senal(void){
 80035e8:	b590      	push	{r4, r7, lr}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
	for (uint8_t i=0; i<N_MUESTRAS;i++){
 80035ee:	2300      	movs	r3, #0
 80035f0:	71fb      	strb	r3, [r7, #7]
 80035f2:	e046      	b.n	8003682 <calculo_senal+0x9a>
			signal[i] = (sin(i*2*PI/N_MUESTRAS)+1)*(4095+1)/2;
 80035f4:	79fb      	ldrb	r3, [r7, #7]
 80035f6:	005b      	lsls	r3, r3, #1
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc ff37 	bl	800046c <__aeabi_i2d>
 80035fe:	a328      	add	r3, pc, #160	; (adr r3, 80036a0 <calculo_senal+0xb8>)
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f7fc ff9c 	bl	8000540 <__aeabi_dmul>
 8003608:	4603      	mov	r3, r0
 800360a:	460c      	mov	r4, r1
 800360c:	4618      	mov	r0, r3
 800360e:	4621      	mov	r1, r4
 8003610:	f04f 0200 	mov.w	r2, #0
 8003614:	4b1e      	ldr	r3, [pc, #120]	; (8003690 <calculo_senal+0xa8>)
 8003616:	f7fd f8bd 	bl	8000794 <__aeabi_ddiv>
 800361a:	4603      	mov	r3, r0
 800361c:	460c      	mov	r4, r1
 800361e:	ec44 3b17 	vmov	d7, r3, r4
 8003622:	eeb0 0a47 	vmov.f32	s0, s14
 8003626:	eef0 0a67 	vmov.f32	s1, s15
 800362a:	f000 fa25 	bl	8003a78 <sin>
 800362e:	ec51 0b10 	vmov	r0, r1, d0
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	4b17      	ldr	r3, [pc, #92]	; (8003694 <calculo_senal+0xac>)
 8003638:	f7fc fdcc 	bl	80001d4 <__adddf3>
 800363c:	4603      	mov	r3, r0
 800363e:	460c      	mov	r4, r1
 8003640:	4618      	mov	r0, r3
 8003642:	4621      	mov	r1, r4
 8003644:	f04f 0200 	mov.w	r2, #0
 8003648:	4b13      	ldr	r3, [pc, #76]	; (8003698 <calculo_senal+0xb0>)
 800364a:	f7fc ff79 	bl	8000540 <__aeabi_dmul>
 800364e:	4603      	mov	r3, r0
 8003650:	460c      	mov	r4, r1
 8003652:	4618      	mov	r0, r3
 8003654:	4621      	mov	r1, r4
 8003656:	f04f 0200 	mov.w	r2, #0
 800365a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800365e:	f7fd f899 	bl	8000794 <__aeabi_ddiv>
 8003662:	4603      	mov	r3, r0
 8003664:	460c      	mov	r4, r1
 8003666:	461a      	mov	r2, r3
 8003668:	4623      	mov	r3, r4
 800366a:	79fc      	ldrb	r4, [r7, #7]
 800366c:	4610      	mov	r0, r2
 800366e:	4619      	mov	r1, r3
 8003670:	f7fd fa28 	bl	8000ac4 <__aeabi_d2uiz>
 8003674:	4603      	mov	r3, r0
 8003676:	b2da      	uxtb	r2, r3
 8003678:	4b08      	ldr	r3, [pc, #32]	; (800369c <calculo_senal+0xb4>)
 800367a:	551a      	strb	r2, [r3, r4]
	for (uint8_t i=0; i<N_MUESTRAS;i++){
 800367c:	79fb      	ldrb	r3, [r7, #7]
 800367e:	3301      	adds	r3, #1
 8003680:	71fb      	strb	r3, [r7, #7]
 8003682:	79fb      	ldrb	r3, [r7, #7]
 8003684:	2b31      	cmp	r3, #49	; 0x31
 8003686:	d9b5      	bls.n	80035f4 <calculo_senal+0xc>
	}
}
 8003688:	bf00      	nop
 800368a:	370c      	adds	r7, #12
 800368c:	46bd      	mov	sp, r7
 800368e:	bd90      	pop	{r4, r7, pc}
 8003690:	40490000 	.word	0x40490000
 8003694:	3ff00000 	.word	0x3ff00000
 8003698:	40b00000 	.word	0x40b00000
 800369c:	20000028 	.word	0x20000028
 80036a0:	f01b866e 	.word	0xf01b866e
 80036a4:	400921f9 	.word	0x400921f9

080036a8 <dac_signal>:

void dac_signal(void) {
 80036a8:	b580      	push	{r7, lr}
 80036aa:	af00      	add	r7, sp, #0

//	uint8_t data;
	data=signal[indice];
 80036ac:	4b0e      	ldr	r3, [pc, #56]	; (80036e8 <dac_signal+0x40>)
 80036ae:	781b      	ldrb	r3, [r3, #0]
 80036b0:	461a      	mov	r2, r3
 80036b2:	4b0e      	ldr	r3, [pc, #56]	; (80036ec <dac_signal+0x44>)
 80036b4:	5c9a      	ldrb	r2, [r3, r2]
 80036b6:	4b0e      	ldr	r3, [pc, #56]	; (80036f0 <dac_signal+0x48>)
 80036b8:	701a      	strb	r2, [r3, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 80036ba:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <dac_signal+0x48>)
 80036bc:	781b      	ldrb	r3, [r3, #0]
 80036be:	2200      	movs	r2, #0
 80036c0:	2100      	movs	r1, #0
 80036c2:	480c      	ldr	r0, [pc, #48]	; (80036f4 <dac_signal+0x4c>)
 80036c4:	f7fd fbb3 	bl	8000e2e <HAL_DAC_SetValue>
	indice++;
 80036c8:	4b07      	ldr	r3, [pc, #28]	; (80036e8 <dac_signal+0x40>)
 80036ca:	781b      	ldrb	r3, [r3, #0]
 80036cc:	3301      	adds	r3, #1
 80036ce:	b2da      	uxtb	r2, r3
 80036d0:	4b05      	ldr	r3, [pc, #20]	; (80036e8 <dac_signal+0x40>)
 80036d2:	701a      	strb	r2, [r3, #0]
	if (indice >= N_MUESTRAS) {
 80036d4:	4b04      	ldr	r3, [pc, #16]	; (80036e8 <dac_signal+0x40>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b31      	cmp	r3, #49	; 0x31
 80036da:	d902      	bls.n	80036e2 <dac_signal+0x3a>
		indice = 0;
 80036dc:	4b02      	ldr	r3, [pc, #8]	; (80036e8 <dac_signal+0x40>)
 80036de:	2200      	movs	r2, #0
 80036e0:	701a      	strb	r2, [r3, #0]
	}
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	2000005a 	.word	0x2000005a
 80036ec:	20000028 	.word	0x20000028
 80036f0:	20000074 	.word	0x20000074
 80036f4:	20000060 	.word	0x20000060

080036f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b082      	sub	sp, #8
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
	if(htim==&htim2){
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a06      	ldr	r2, [pc, #24]	; (800371c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d105      	bne.n	8003714 <HAL_TIM_PeriodElapsedCallback+0x1c>
//		dac_signal();
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8003708:	2108      	movs	r1, #8
 800370a:	4805      	ldr	r0, [pc, #20]	; (8003720 <HAL_TIM_PeriodElapsedCallback+0x28>)
 800370c:	f7fd fdf6 	bl	80012fc <HAL_GPIO_TogglePin>
		dac_signal();
 8003710:	f7ff ffca 	bl	80036a8 <dac_signal>
	}
}
 8003714:	bf00      	nop
 8003716:	3708      	adds	r7, #8
 8003718:	46bd      	mov	sp, r7
 800371a:	bd80      	pop	{r7, pc}
 800371c:	20000078 	.word	0x20000078
 8003720:	48000400 	.word	0x48000400

08003724 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003728:	bf00      	nop
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
	...

08003734 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800373a:	4b0f      	ldr	r3, [pc, #60]	; (8003778 <HAL_MspInit+0x44>)
 800373c:	699b      	ldr	r3, [r3, #24]
 800373e:	4a0e      	ldr	r2, [pc, #56]	; (8003778 <HAL_MspInit+0x44>)
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	6193      	str	r3, [r2, #24]
 8003746:	4b0c      	ldr	r3, [pc, #48]	; (8003778 <HAL_MspInit+0x44>)
 8003748:	699b      	ldr	r3, [r3, #24]
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	607b      	str	r3, [r7, #4]
 8003750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003752:	4b09      	ldr	r3, [pc, #36]	; (8003778 <HAL_MspInit+0x44>)
 8003754:	69db      	ldr	r3, [r3, #28]
 8003756:	4a08      	ldr	r2, [pc, #32]	; (8003778 <HAL_MspInit+0x44>)
 8003758:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800375c:	61d3      	str	r3, [r2, #28]
 800375e:	4b06      	ldr	r3, [pc, #24]	; (8003778 <HAL_MspInit+0x44>)
 8003760:	69db      	ldr	r3, [r3, #28]
 8003762:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003766:	603b      	str	r3, [r7, #0]
 8003768:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800376a:	bf00      	nop
 800376c:	370c      	adds	r7, #12
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000

0800377c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b08a      	sub	sp, #40	; 0x28
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003784:	f107 0314 	add.w	r3, r7, #20
 8003788:	2200      	movs	r2, #0
 800378a:	601a      	str	r2, [r3, #0]
 800378c:	605a      	str	r2, [r3, #4]
 800378e:	609a      	str	r2, [r3, #8]
 8003790:	60da      	str	r2, [r3, #12]
 8003792:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a15      	ldr	r2, [pc, #84]	; (80037f0 <HAL_DAC_MspInit+0x74>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d124      	bne.n	80037e8 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <HAL_DAC_MspInit+0x78>)
 80037a0:	69db      	ldr	r3, [r3, #28]
 80037a2:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <HAL_DAC_MspInit+0x78>)
 80037a4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80037a8:	61d3      	str	r3, [r2, #28]
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_DAC_MspInit+0x78>)
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80037b2:	613b      	str	r3, [r7, #16]
 80037b4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <HAL_DAC_MspInit+0x78>)
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	4a0e      	ldr	r2, [pc, #56]	; (80037f4 <HAL_DAC_MspInit+0x78>)
 80037bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80037c0:	6153      	str	r3, [r2, #20]
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <HAL_DAC_MspInit+0x78>)
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ca:	60fb      	str	r3, [r7, #12]
 80037cc:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration    
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80037ce:	2310      	movs	r3, #16
 80037d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80037d2:	2303      	movs	r3, #3
 80037d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037da:	f107 0314 	add.w	r3, r7, #20
 80037de:	4619      	mov	r1, r3
 80037e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037e4:	f7fd fbfc 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80037e8:	bf00      	nop
 80037ea:	3728      	adds	r7, #40	; 0x28
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	40007400 	.word	0x40007400
 80037f4:	40021000 	.word	0x40021000

080037f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b084      	sub	sp, #16
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003808:	d113      	bne.n	8003832 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800380a:	4b0c      	ldr	r3, [pc, #48]	; (800383c <HAL_TIM_Base_MspInit+0x44>)
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	4a0b      	ldr	r2, [pc, #44]	; (800383c <HAL_TIM_Base_MspInit+0x44>)
 8003810:	f043 0301 	orr.w	r3, r3, #1
 8003814:	61d3      	str	r3, [r2, #28]
 8003816:	4b09      	ldr	r3, [pc, #36]	; (800383c <HAL_TIM_Base_MspInit+0x44>)
 8003818:	69db      	ldr	r3, [r3, #28]
 800381a:	f003 0301 	and.w	r3, r3, #1
 800381e:	60fb      	str	r3, [r7, #12]
 8003820:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003822:	2200      	movs	r2, #0
 8003824:	2100      	movs	r1, #0
 8003826:	201c      	movs	r0, #28
 8003828:	f7fd faa9 	bl	8000d7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800382c:	201c      	movs	r0, #28
 800382e:	f7fd fac2 	bl	8000db6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8003832:	bf00      	nop
 8003834:	3710      	adds	r7, #16
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	40021000 	.word	0x40021000

08003840 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b08a      	sub	sp, #40	; 0x28
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003848:	f107 0314 	add.w	r3, r7, #20
 800384c:	2200      	movs	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
 8003850:	605a      	str	r2, [r3, #4]
 8003852:	609a      	str	r2, [r3, #8]
 8003854:	60da      	str	r2, [r3, #12]
 8003856:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	4a18      	ldr	r2, [pc, #96]	; (80038c0 <HAL_UART_MspInit+0x80>)
 800385e:	4293      	cmp	r3, r2
 8003860:	d129      	bne.n	80038b6 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003862:	4b18      	ldr	r3, [pc, #96]	; (80038c4 <HAL_UART_MspInit+0x84>)
 8003864:	69db      	ldr	r3, [r3, #28]
 8003866:	4a17      	ldr	r2, [pc, #92]	; (80038c4 <HAL_UART_MspInit+0x84>)
 8003868:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800386c:	61d3      	str	r3, [r2, #28]
 800386e:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <HAL_UART_MspInit+0x84>)
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003876:	613b      	str	r3, [r7, #16]
 8003878:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800387a:	4b12      	ldr	r3, [pc, #72]	; (80038c4 <HAL_UART_MspInit+0x84>)
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	4a11      	ldr	r2, [pc, #68]	; (80038c4 <HAL_UART_MspInit+0x84>)
 8003880:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003884:	6153      	str	r3, [r2, #20]
 8003886:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <HAL_UART_MspInit+0x84>)
 8003888:	695b      	ldr	r3, [r3, #20]
 800388a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800388e:	60fb      	str	r3, [r7, #12]
 8003890:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8003892:	f248 0304 	movw	r3, #32772	; 0x8004
 8003896:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003898:	2302      	movs	r3, #2
 800389a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800389c:	2300      	movs	r3, #0
 800389e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80038a0:	2303      	movs	r3, #3
 80038a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038a4:	2307      	movs	r3, #7
 80038a6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038a8:	f107 0314 	add.w	r3, r7, #20
 80038ac:	4619      	mov	r1, r3
 80038ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038b2:	f7fd fb95 	bl	8000fe0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80038b6:	bf00      	nop
 80038b8:	3728      	adds	r7, #40	; 0x28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	40004400 	.word	0x40004400
 80038c4:	40021000 	.word	0x40021000

080038c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80038cc:	bf00      	nop
 80038ce:	46bd      	mov	sp, r7
 80038d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d4:	4770      	bx	lr

080038d6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80038d6:	b480      	push	{r7}
 80038d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80038da:	e7fe      	b.n	80038da <HardFault_Handler+0x4>

080038dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80038e0:	e7fe      	b.n	80038e0 <MemManage_Handler+0x4>

080038e2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80038e2:	b480      	push	{r7}
 80038e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80038e6:	e7fe      	b.n	80038e6 <BusFault_Handler+0x4>

080038e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80038ec:	e7fe      	b.n	80038ec <UsageFault_Handler+0x4>

080038ee <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80038ee:	b480      	push	{r7}
 80038f0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80038f2:	bf00      	nop
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003900:	bf00      	nop
 8003902:	46bd      	mov	sp, r7
 8003904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003908:	4770      	bx	lr

0800390a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800390a:	b480      	push	{r7}
 800390c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800390e:	bf00      	nop
 8003910:	46bd      	mov	sp, r7
 8003912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003916:	4770      	bx	lr

08003918 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800391c:	f7fd f938 	bl	8000b90 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003920:	bf00      	nop
 8003922:	bd80      	pop	{r7, pc}

08003924 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003924:	b580      	push	{r7, lr}
 8003926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003928:	4802      	ldr	r0, [pc, #8]	; (8003934 <TIM2_IRQHandler+0x10>)
 800392a:	f7fe fe63 	bl	80025f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	20000078 	.word	0x20000078

08003938 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800393c:	4b1f      	ldr	r3, [pc, #124]	; (80039bc <SystemInit+0x84>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003942:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <SystemInit+0x84>)
 8003944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800394c:	4b1c      	ldr	r3, [pc, #112]	; (80039c0 <SystemInit+0x88>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a1b      	ldr	r2, [pc, #108]	; (80039c0 <SystemInit+0x88>)
 8003952:	f043 0301 	orr.w	r3, r3, #1
 8003956:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003958:	4b19      	ldr	r3, [pc, #100]	; (80039c0 <SystemInit+0x88>)
 800395a:	685a      	ldr	r2, [r3, #4]
 800395c:	4918      	ldr	r1, [pc, #96]	; (80039c0 <SystemInit+0x88>)
 800395e:	4b19      	ldr	r3, [pc, #100]	; (80039c4 <SystemInit+0x8c>)
 8003960:	4013      	ands	r3, r2
 8003962:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003964:	4b16      	ldr	r3, [pc, #88]	; (80039c0 <SystemInit+0x88>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a15      	ldr	r2, [pc, #84]	; (80039c0 <SystemInit+0x88>)
 800396a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800396e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003972:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003974:	4b12      	ldr	r3, [pc, #72]	; (80039c0 <SystemInit+0x88>)
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	4a11      	ldr	r2, [pc, #68]	; (80039c0 <SystemInit+0x88>)
 800397a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800397e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003980:	4b0f      	ldr	r3, [pc, #60]	; (80039c0 <SystemInit+0x88>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	4a0e      	ldr	r2, [pc, #56]	; (80039c0 <SystemInit+0x88>)
 8003986:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800398a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800398c:	4b0c      	ldr	r3, [pc, #48]	; (80039c0 <SystemInit+0x88>)
 800398e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003990:	4a0b      	ldr	r2, [pc, #44]	; (80039c0 <SystemInit+0x88>)
 8003992:	f023 030f 	bic.w	r3, r3, #15
 8003996:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003998:	4b09      	ldr	r3, [pc, #36]	; (80039c0 <SystemInit+0x88>)
 800399a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800399c:	4908      	ldr	r1, [pc, #32]	; (80039c0 <SystemInit+0x88>)
 800399e:	4b0a      	ldr	r3, [pc, #40]	; (80039c8 <SystemInit+0x90>)
 80039a0:	4013      	ands	r3, r2
 80039a2:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80039a4:	4b06      	ldr	r3, [pc, #24]	; (80039c0 <SystemInit+0x88>)
 80039a6:	2200      	movs	r2, #0
 80039a8:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80039aa:	4b04      	ldr	r3, [pc, #16]	; (80039bc <SystemInit+0x84>)
 80039ac:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80039b0:	609a      	str	r2, [r3, #8]
#endif
}
 80039b2:	bf00      	nop
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr
 80039bc:	e000ed00 	.word	0xe000ed00
 80039c0:	40021000 	.word	0x40021000
 80039c4:	f87fc00c 	.word	0xf87fc00c
 80039c8:	ff00fccc 	.word	0xff00fccc

080039cc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80039cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003a04 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80039d0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80039d2:	e003      	b.n	80039dc <LoopCopyDataInit>

080039d4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80039d4:	4b0c      	ldr	r3, [pc, #48]	; (8003a08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80039d6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80039d8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80039da:	3104      	adds	r1, #4

080039dc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80039dc:	480b      	ldr	r0, [pc, #44]	; (8003a0c <LoopForever+0xa>)
	ldr	r3, =_edata
 80039de:	4b0c      	ldr	r3, [pc, #48]	; (8003a10 <LoopForever+0xe>)
	adds	r2, r0, r1
 80039e0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80039e2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80039e4:	d3f6      	bcc.n	80039d4 <CopyDataInit>
	ldr	r2, =_sbss
 80039e6:	4a0b      	ldr	r2, [pc, #44]	; (8003a14 <LoopForever+0x12>)
	b	LoopFillZerobss
 80039e8:	e002      	b.n	80039f0 <LoopFillZerobss>

080039ea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80039ea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80039ec:	f842 3b04 	str.w	r3, [r2], #4

080039f0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80039f0:	4b09      	ldr	r3, [pc, #36]	; (8003a18 <LoopForever+0x16>)
	cmp	r2, r3
 80039f2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80039f4:	d3f9      	bcc.n	80039ea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80039f6:	f7ff ff9f 	bl	8003938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039fa:	f000 f811 	bl	8003a20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80039fe:	f7ff fca1 	bl	8003344 <main>

08003a02 <LoopForever>:

LoopForever:
    b LoopForever
 8003a02:	e7fe      	b.n	8003a02 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003a04:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003a08:	08004cd0 	.word	0x08004cd0
	ldr	r0, =_sdata
 8003a0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003a10:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8003a14:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8003a18:	20000128 	.word	0x20000128

08003a1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003a1c:	e7fe      	b.n	8003a1c <ADC1_2_IRQHandler>
	...

08003a20 <__libc_init_array>:
 8003a20:	b570      	push	{r4, r5, r6, lr}
 8003a22:	4e0d      	ldr	r6, [pc, #52]	; (8003a58 <__libc_init_array+0x38>)
 8003a24:	4c0d      	ldr	r4, [pc, #52]	; (8003a5c <__libc_init_array+0x3c>)
 8003a26:	1ba4      	subs	r4, r4, r6
 8003a28:	10a4      	asrs	r4, r4, #2
 8003a2a:	2500      	movs	r5, #0
 8003a2c:	42a5      	cmp	r5, r4
 8003a2e:	d109      	bne.n	8003a44 <__libc_init_array+0x24>
 8003a30:	4e0b      	ldr	r6, [pc, #44]	; (8003a60 <__libc_init_array+0x40>)
 8003a32:	4c0c      	ldr	r4, [pc, #48]	; (8003a64 <__libc_init_array+0x44>)
 8003a34:	f001 f832 	bl	8004a9c <_init>
 8003a38:	1ba4      	subs	r4, r4, r6
 8003a3a:	10a4      	asrs	r4, r4, #2
 8003a3c:	2500      	movs	r5, #0
 8003a3e:	42a5      	cmp	r5, r4
 8003a40:	d105      	bne.n	8003a4e <__libc_init_array+0x2e>
 8003a42:	bd70      	pop	{r4, r5, r6, pc}
 8003a44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a48:	4798      	blx	r3
 8003a4a:	3501      	adds	r5, #1
 8003a4c:	e7ee      	b.n	8003a2c <__libc_init_array+0xc>
 8003a4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003a52:	4798      	blx	r3
 8003a54:	3501      	adds	r5, #1
 8003a56:	e7f2      	b.n	8003a3e <__libc_init_array+0x1e>
 8003a58:	08004cc8 	.word	0x08004cc8
 8003a5c:	08004cc8 	.word	0x08004cc8
 8003a60:	08004cc8 	.word	0x08004cc8
 8003a64:	08004ccc 	.word	0x08004ccc

08003a68 <memset>:
 8003a68:	4402      	add	r2, r0
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	4293      	cmp	r3, r2
 8003a6e:	d100      	bne.n	8003a72 <memset+0xa>
 8003a70:	4770      	bx	lr
 8003a72:	f803 1b01 	strb.w	r1, [r3], #1
 8003a76:	e7f9      	b.n	8003a6c <memset+0x4>

08003a78 <sin>:
 8003a78:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8003a7a:	ec51 0b10 	vmov	r0, r1, d0
 8003a7e:	4a20      	ldr	r2, [pc, #128]	; (8003b00 <sin+0x88>)
 8003a80:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003a84:	4293      	cmp	r3, r2
 8003a86:	dc07      	bgt.n	8003a98 <sin+0x20>
 8003a88:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8003af8 <sin+0x80>
 8003a8c:	2000      	movs	r0, #0
 8003a8e:	f000 fe37 	bl	8004700 <__kernel_sin>
 8003a92:	ec51 0b10 	vmov	r0, r1, d0
 8003a96:	e007      	b.n	8003aa8 <sin+0x30>
 8003a98:	4a1a      	ldr	r2, [pc, #104]	; (8003b04 <sin+0x8c>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	dd09      	ble.n	8003ab2 <sin+0x3a>
 8003a9e:	ee10 2a10 	vmov	r2, s0
 8003aa2:	460b      	mov	r3, r1
 8003aa4:	f7fc fb94 	bl	80001d0 <__aeabi_dsub>
 8003aa8:	ec41 0b10 	vmov	d0, r0, r1
 8003aac:	b005      	add	sp, #20
 8003aae:	f85d fb04 	ldr.w	pc, [sp], #4
 8003ab2:	4668      	mov	r0, sp
 8003ab4:	f000 f828 	bl	8003b08 <__ieee754_rem_pio2>
 8003ab8:	f000 0003 	and.w	r0, r0, #3
 8003abc:	2801      	cmp	r0, #1
 8003abe:	ed9d 1b02 	vldr	d1, [sp, #8]
 8003ac2:	ed9d 0b00 	vldr	d0, [sp]
 8003ac6:	d004      	beq.n	8003ad2 <sin+0x5a>
 8003ac8:	2802      	cmp	r0, #2
 8003aca:	d005      	beq.n	8003ad8 <sin+0x60>
 8003acc:	b970      	cbnz	r0, 8003aec <sin+0x74>
 8003ace:	2001      	movs	r0, #1
 8003ad0:	e7dd      	b.n	8003a8e <sin+0x16>
 8003ad2:	f000 fa0d 	bl	8003ef0 <__kernel_cos>
 8003ad6:	e7dc      	b.n	8003a92 <sin+0x1a>
 8003ad8:	2001      	movs	r0, #1
 8003ada:	f000 fe11 	bl	8004700 <__kernel_sin>
 8003ade:	ec53 2b10 	vmov	r2, r3, d0
 8003ae2:	ee10 0a10 	vmov	r0, s0
 8003ae6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8003aea:	e7dd      	b.n	8003aa8 <sin+0x30>
 8003aec:	f000 fa00 	bl	8003ef0 <__kernel_cos>
 8003af0:	e7f5      	b.n	8003ade <sin+0x66>
 8003af2:	bf00      	nop
 8003af4:	f3af 8000 	nop.w
	...
 8003b00:	3fe921fb 	.word	0x3fe921fb
 8003b04:	7fefffff 	.word	0x7fefffff

08003b08 <__ieee754_rem_pio2>:
 8003b08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b0c:	ec57 6b10 	vmov	r6, r7, d0
 8003b10:	4bc3      	ldr	r3, [pc, #780]	; (8003e20 <__ieee754_rem_pio2+0x318>)
 8003b12:	b08d      	sub	sp, #52	; 0x34
 8003b14:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8003b18:	4598      	cmp	r8, r3
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	9704      	str	r7, [sp, #16]
 8003b1e:	dc07      	bgt.n	8003b30 <__ieee754_rem_pio2+0x28>
 8003b20:	2200      	movs	r2, #0
 8003b22:	2300      	movs	r3, #0
 8003b24:	ed84 0b00 	vstr	d0, [r4]
 8003b28:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8003b2c:	2500      	movs	r5, #0
 8003b2e:	e027      	b.n	8003b80 <__ieee754_rem_pio2+0x78>
 8003b30:	4bbc      	ldr	r3, [pc, #752]	; (8003e24 <__ieee754_rem_pio2+0x31c>)
 8003b32:	4598      	cmp	r8, r3
 8003b34:	dc75      	bgt.n	8003c22 <__ieee754_rem_pio2+0x11a>
 8003b36:	9b04      	ldr	r3, [sp, #16]
 8003b38:	4dbb      	ldr	r5, [pc, #748]	; (8003e28 <__ieee754_rem_pio2+0x320>)
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	ee10 0a10 	vmov	r0, s0
 8003b40:	a3a9      	add	r3, pc, #676	; (adr r3, 8003de8 <__ieee754_rem_pio2+0x2e0>)
 8003b42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b46:	4639      	mov	r1, r7
 8003b48:	dd36      	ble.n	8003bb8 <__ieee754_rem_pio2+0xb0>
 8003b4a:	f7fc fb41 	bl	80001d0 <__aeabi_dsub>
 8003b4e:	45a8      	cmp	r8, r5
 8003b50:	4606      	mov	r6, r0
 8003b52:	460f      	mov	r7, r1
 8003b54:	d018      	beq.n	8003b88 <__ieee754_rem_pio2+0x80>
 8003b56:	a3a6      	add	r3, pc, #664	; (adr r3, 8003df0 <__ieee754_rem_pio2+0x2e8>)
 8003b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5c:	f7fc fb38 	bl	80001d0 <__aeabi_dsub>
 8003b60:	4602      	mov	r2, r0
 8003b62:	460b      	mov	r3, r1
 8003b64:	e9c4 2300 	strd	r2, r3, [r4]
 8003b68:	4630      	mov	r0, r6
 8003b6a:	4639      	mov	r1, r7
 8003b6c:	f7fc fb30 	bl	80001d0 <__aeabi_dsub>
 8003b70:	a39f      	add	r3, pc, #636	; (adr r3, 8003df0 <__ieee754_rem_pio2+0x2e8>)
 8003b72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b76:	f7fc fb2b 	bl	80001d0 <__aeabi_dsub>
 8003b7a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003b7e:	2501      	movs	r5, #1
 8003b80:	4628      	mov	r0, r5
 8003b82:	b00d      	add	sp, #52	; 0x34
 8003b84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003b88:	a39b      	add	r3, pc, #620	; (adr r3, 8003df8 <__ieee754_rem_pio2+0x2f0>)
 8003b8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b8e:	f7fc fb1f 	bl	80001d0 <__aeabi_dsub>
 8003b92:	a39b      	add	r3, pc, #620	; (adr r3, 8003e00 <__ieee754_rem_pio2+0x2f8>)
 8003b94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b98:	4606      	mov	r6, r0
 8003b9a:	460f      	mov	r7, r1
 8003b9c:	f7fc fb18 	bl	80001d0 <__aeabi_dsub>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	e9c4 2300 	strd	r2, r3, [r4]
 8003ba8:	4630      	mov	r0, r6
 8003baa:	4639      	mov	r1, r7
 8003bac:	f7fc fb10 	bl	80001d0 <__aeabi_dsub>
 8003bb0:	a393      	add	r3, pc, #588	; (adr r3, 8003e00 <__ieee754_rem_pio2+0x2f8>)
 8003bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bb6:	e7de      	b.n	8003b76 <__ieee754_rem_pio2+0x6e>
 8003bb8:	f7fc fb0c 	bl	80001d4 <__adddf3>
 8003bbc:	45a8      	cmp	r8, r5
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	460f      	mov	r7, r1
 8003bc2:	d016      	beq.n	8003bf2 <__ieee754_rem_pio2+0xea>
 8003bc4:	a38a      	add	r3, pc, #552	; (adr r3, 8003df0 <__ieee754_rem_pio2+0x2e8>)
 8003bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bca:	f7fc fb03 	bl	80001d4 <__adddf3>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	460b      	mov	r3, r1
 8003bd2:	e9c4 2300 	strd	r2, r3, [r4]
 8003bd6:	4630      	mov	r0, r6
 8003bd8:	4639      	mov	r1, r7
 8003bda:	f7fc faf9 	bl	80001d0 <__aeabi_dsub>
 8003bde:	a384      	add	r3, pc, #528	; (adr r3, 8003df0 <__ieee754_rem_pio2+0x2e8>)
 8003be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be4:	f7fc faf6 	bl	80001d4 <__adddf3>
 8003be8:	f04f 35ff 	mov.w	r5, #4294967295
 8003bec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003bf0:	e7c6      	b.n	8003b80 <__ieee754_rem_pio2+0x78>
 8003bf2:	a381      	add	r3, pc, #516	; (adr r3, 8003df8 <__ieee754_rem_pio2+0x2f0>)
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	f7fc faec 	bl	80001d4 <__adddf3>
 8003bfc:	a380      	add	r3, pc, #512	; (adr r3, 8003e00 <__ieee754_rem_pio2+0x2f8>)
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	4606      	mov	r6, r0
 8003c04:	460f      	mov	r7, r1
 8003c06:	f7fc fae5 	bl	80001d4 <__adddf3>
 8003c0a:	4602      	mov	r2, r0
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	e9c4 2300 	strd	r2, r3, [r4]
 8003c12:	4630      	mov	r0, r6
 8003c14:	4639      	mov	r1, r7
 8003c16:	f7fc fadb 	bl	80001d0 <__aeabi_dsub>
 8003c1a:	a379      	add	r3, pc, #484	; (adr r3, 8003e00 <__ieee754_rem_pio2+0x2f8>)
 8003c1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c20:	e7e0      	b.n	8003be4 <__ieee754_rem_pio2+0xdc>
 8003c22:	4b82      	ldr	r3, [pc, #520]	; (8003e2c <__ieee754_rem_pio2+0x324>)
 8003c24:	4598      	cmp	r8, r3
 8003c26:	f300 80d0 	bgt.w	8003dca <__ieee754_rem_pio2+0x2c2>
 8003c2a:	f000 fe23 	bl	8004874 <fabs>
 8003c2e:	ec57 6b10 	vmov	r6, r7, d0
 8003c32:	ee10 0a10 	vmov	r0, s0
 8003c36:	a374      	add	r3, pc, #464	; (adr r3, 8003e08 <__ieee754_rem_pio2+0x300>)
 8003c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c3c:	4639      	mov	r1, r7
 8003c3e:	f7fc fc7f 	bl	8000540 <__aeabi_dmul>
 8003c42:	2200      	movs	r2, #0
 8003c44:	4b7a      	ldr	r3, [pc, #488]	; (8003e30 <__ieee754_rem_pio2+0x328>)
 8003c46:	f7fc fac5 	bl	80001d4 <__adddf3>
 8003c4a:	f7fc ff13 	bl	8000a74 <__aeabi_d2iz>
 8003c4e:	4605      	mov	r5, r0
 8003c50:	f7fc fc0c 	bl	800046c <__aeabi_i2d>
 8003c54:	a364      	add	r3, pc, #400	; (adr r3, 8003de8 <__ieee754_rem_pio2+0x2e0>)
 8003c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c5a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003c5e:	f7fc fc6f 	bl	8000540 <__aeabi_dmul>
 8003c62:	4602      	mov	r2, r0
 8003c64:	460b      	mov	r3, r1
 8003c66:	4630      	mov	r0, r6
 8003c68:	4639      	mov	r1, r7
 8003c6a:	f7fc fab1 	bl	80001d0 <__aeabi_dsub>
 8003c6e:	a360      	add	r3, pc, #384	; (adr r3, 8003df0 <__ieee754_rem_pio2+0x2e8>)
 8003c70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c74:	4682      	mov	sl, r0
 8003c76:	468b      	mov	fp, r1
 8003c78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003c7c:	f7fc fc60 	bl	8000540 <__aeabi_dmul>
 8003c80:	2d1f      	cmp	r5, #31
 8003c82:	4606      	mov	r6, r0
 8003c84:	460f      	mov	r7, r1
 8003c86:	dc0c      	bgt.n	8003ca2 <__ieee754_rem_pio2+0x19a>
 8003c88:	1e6a      	subs	r2, r5, #1
 8003c8a:	4b6a      	ldr	r3, [pc, #424]	; (8003e34 <__ieee754_rem_pio2+0x32c>)
 8003c8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003c90:	4543      	cmp	r3, r8
 8003c92:	d006      	beq.n	8003ca2 <__ieee754_rem_pio2+0x19a>
 8003c94:	4632      	mov	r2, r6
 8003c96:	463b      	mov	r3, r7
 8003c98:	4650      	mov	r0, sl
 8003c9a:	4659      	mov	r1, fp
 8003c9c:	f7fc fa98 	bl	80001d0 <__aeabi_dsub>
 8003ca0:	e00e      	b.n	8003cc0 <__ieee754_rem_pio2+0x1b8>
 8003ca2:	4632      	mov	r2, r6
 8003ca4:	463b      	mov	r3, r7
 8003ca6:	4650      	mov	r0, sl
 8003ca8:	4659      	mov	r1, fp
 8003caa:	f7fc fa91 	bl	80001d0 <__aeabi_dsub>
 8003cae:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003cb2:	9305      	str	r3, [sp, #20]
 8003cb4:	9a05      	ldr	r2, [sp, #20]
 8003cb6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003cba:	1ad3      	subs	r3, r2, r3
 8003cbc:	2b10      	cmp	r3, #16
 8003cbe:	dc02      	bgt.n	8003cc6 <__ieee754_rem_pio2+0x1be>
 8003cc0:	e9c4 0100 	strd	r0, r1, [r4]
 8003cc4:	e039      	b.n	8003d3a <__ieee754_rem_pio2+0x232>
 8003cc6:	a34c      	add	r3, pc, #304	; (adr r3, 8003df8 <__ieee754_rem_pio2+0x2f0>)
 8003cc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ccc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003cd0:	f7fc fc36 	bl	8000540 <__aeabi_dmul>
 8003cd4:	4606      	mov	r6, r0
 8003cd6:	460f      	mov	r7, r1
 8003cd8:	4602      	mov	r2, r0
 8003cda:	460b      	mov	r3, r1
 8003cdc:	4650      	mov	r0, sl
 8003cde:	4659      	mov	r1, fp
 8003ce0:	f7fc fa76 	bl	80001d0 <__aeabi_dsub>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	460b      	mov	r3, r1
 8003ce8:	4680      	mov	r8, r0
 8003cea:	4689      	mov	r9, r1
 8003cec:	4650      	mov	r0, sl
 8003cee:	4659      	mov	r1, fp
 8003cf0:	f7fc fa6e 	bl	80001d0 <__aeabi_dsub>
 8003cf4:	4632      	mov	r2, r6
 8003cf6:	463b      	mov	r3, r7
 8003cf8:	f7fc fa6a 	bl	80001d0 <__aeabi_dsub>
 8003cfc:	a340      	add	r3, pc, #256	; (adr r3, 8003e00 <__ieee754_rem_pio2+0x2f8>)
 8003cfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d02:	4606      	mov	r6, r0
 8003d04:	460f      	mov	r7, r1
 8003d06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d0a:	f7fc fc19 	bl	8000540 <__aeabi_dmul>
 8003d0e:	4632      	mov	r2, r6
 8003d10:	463b      	mov	r3, r7
 8003d12:	f7fc fa5d 	bl	80001d0 <__aeabi_dsub>
 8003d16:	4602      	mov	r2, r0
 8003d18:	460b      	mov	r3, r1
 8003d1a:	4606      	mov	r6, r0
 8003d1c:	460f      	mov	r7, r1
 8003d1e:	4640      	mov	r0, r8
 8003d20:	4649      	mov	r1, r9
 8003d22:	f7fc fa55 	bl	80001d0 <__aeabi_dsub>
 8003d26:	9a05      	ldr	r2, [sp, #20]
 8003d28:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8003d2c:	1ad3      	subs	r3, r2, r3
 8003d2e:	2b31      	cmp	r3, #49	; 0x31
 8003d30:	dc20      	bgt.n	8003d74 <__ieee754_rem_pio2+0x26c>
 8003d32:	e9c4 0100 	strd	r0, r1, [r4]
 8003d36:	46c2      	mov	sl, r8
 8003d38:	46cb      	mov	fp, r9
 8003d3a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8003d3e:	4650      	mov	r0, sl
 8003d40:	4642      	mov	r2, r8
 8003d42:	464b      	mov	r3, r9
 8003d44:	4659      	mov	r1, fp
 8003d46:	f7fc fa43 	bl	80001d0 <__aeabi_dsub>
 8003d4a:	463b      	mov	r3, r7
 8003d4c:	4632      	mov	r2, r6
 8003d4e:	f7fc fa3f 	bl	80001d0 <__aeabi_dsub>
 8003d52:	9b04      	ldr	r3, [sp, #16]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003d5a:	f6bf af11 	bge.w	8003b80 <__ieee754_rem_pio2+0x78>
 8003d5e:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8003d62:	6063      	str	r3, [r4, #4]
 8003d64:	f8c4 8000 	str.w	r8, [r4]
 8003d68:	60a0      	str	r0, [r4, #8]
 8003d6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003d6e:	60e3      	str	r3, [r4, #12]
 8003d70:	426d      	negs	r5, r5
 8003d72:	e705      	b.n	8003b80 <__ieee754_rem_pio2+0x78>
 8003d74:	a326      	add	r3, pc, #152	; (adr r3, 8003e10 <__ieee754_rem_pio2+0x308>)
 8003d76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003d7e:	f7fc fbdf 	bl	8000540 <__aeabi_dmul>
 8003d82:	4606      	mov	r6, r0
 8003d84:	460f      	mov	r7, r1
 8003d86:	4602      	mov	r2, r0
 8003d88:	460b      	mov	r3, r1
 8003d8a:	4640      	mov	r0, r8
 8003d8c:	4649      	mov	r1, r9
 8003d8e:	f7fc fa1f 	bl	80001d0 <__aeabi_dsub>
 8003d92:	4602      	mov	r2, r0
 8003d94:	460b      	mov	r3, r1
 8003d96:	4682      	mov	sl, r0
 8003d98:	468b      	mov	fp, r1
 8003d9a:	4640      	mov	r0, r8
 8003d9c:	4649      	mov	r1, r9
 8003d9e:	f7fc fa17 	bl	80001d0 <__aeabi_dsub>
 8003da2:	4632      	mov	r2, r6
 8003da4:	463b      	mov	r3, r7
 8003da6:	f7fc fa13 	bl	80001d0 <__aeabi_dsub>
 8003daa:	a31b      	add	r3, pc, #108	; (adr r3, 8003e18 <__ieee754_rem_pio2+0x310>)
 8003dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db0:	4606      	mov	r6, r0
 8003db2:	460f      	mov	r7, r1
 8003db4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003db8:	f7fc fbc2 	bl	8000540 <__aeabi_dmul>
 8003dbc:	4632      	mov	r2, r6
 8003dbe:	463b      	mov	r3, r7
 8003dc0:	f7fc fa06 	bl	80001d0 <__aeabi_dsub>
 8003dc4:	4606      	mov	r6, r0
 8003dc6:	460f      	mov	r7, r1
 8003dc8:	e764      	b.n	8003c94 <__ieee754_rem_pio2+0x18c>
 8003dca:	4b1b      	ldr	r3, [pc, #108]	; (8003e38 <__ieee754_rem_pio2+0x330>)
 8003dcc:	4598      	cmp	r8, r3
 8003dce:	dd35      	ble.n	8003e3c <__ieee754_rem_pio2+0x334>
 8003dd0:	ee10 2a10 	vmov	r2, s0
 8003dd4:	463b      	mov	r3, r7
 8003dd6:	4630      	mov	r0, r6
 8003dd8:	4639      	mov	r1, r7
 8003dda:	f7fc f9f9 	bl	80001d0 <__aeabi_dsub>
 8003dde:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003de2:	e9c4 0100 	strd	r0, r1, [r4]
 8003de6:	e6a1      	b.n	8003b2c <__ieee754_rem_pio2+0x24>
 8003de8:	54400000 	.word	0x54400000
 8003dec:	3ff921fb 	.word	0x3ff921fb
 8003df0:	1a626331 	.word	0x1a626331
 8003df4:	3dd0b461 	.word	0x3dd0b461
 8003df8:	1a600000 	.word	0x1a600000
 8003dfc:	3dd0b461 	.word	0x3dd0b461
 8003e00:	2e037073 	.word	0x2e037073
 8003e04:	3ba3198a 	.word	0x3ba3198a
 8003e08:	6dc9c883 	.word	0x6dc9c883
 8003e0c:	3fe45f30 	.word	0x3fe45f30
 8003e10:	2e000000 	.word	0x2e000000
 8003e14:	3ba3198a 	.word	0x3ba3198a
 8003e18:	252049c1 	.word	0x252049c1
 8003e1c:	397b839a 	.word	0x397b839a
 8003e20:	3fe921fb 	.word	0x3fe921fb
 8003e24:	4002d97b 	.word	0x4002d97b
 8003e28:	3ff921fb 	.word	0x3ff921fb
 8003e2c:	413921fb 	.word	0x413921fb
 8003e30:	3fe00000 	.word	0x3fe00000
 8003e34:	08004af0 	.word	0x08004af0
 8003e38:	7fefffff 	.word	0x7fefffff
 8003e3c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8003e40:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8003e44:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8003e48:	4630      	mov	r0, r6
 8003e4a:	460f      	mov	r7, r1
 8003e4c:	f7fc fe12 	bl	8000a74 <__aeabi_d2iz>
 8003e50:	f7fc fb0c 	bl	800046c <__aeabi_i2d>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4630      	mov	r0, r6
 8003e5a:	4639      	mov	r1, r7
 8003e5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8003e60:	f7fc f9b6 	bl	80001d0 <__aeabi_dsub>
 8003e64:	2200      	movs	r2, #0
 8003e66:	4b1f      	ldr	r3, [pc, #124]	; (8003ee4 <__ieee754_rem_pio2+0x3dc>)
 8003e68:	f7fc fb6a 	bl	8000540 <__aeabi_dmul>
 8003e6c:	460f      	mov	r7, r1
 8003e6e:	4606      	mov	r6, r0
 8003e70:	f7fc fe00 	bl	8000a74 <__aeabi_d2iz>
 8003e74:	f7fc fafa 	bl	800046c <__aeabi_i2d>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4630      	mov	r0, r6
 8003e7e:	4639      	mov	r1, r7
 8003e80:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8003e84:	f7fc f9a4 	bl	80001d0 <__aeabi_dsub>
 8003e88:	2200      	movs	r2, #0
 8003e8a:	4b16      	ldr	r3, [pc, #88]	; (8003ee4 <__ieee754_rem_pio2+0x3dc>)
 8003e8c:	f7fc fb58 	bl	8000540 <__aeabi_dmul>
 8003e90:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8003e94:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8003e98:	f04f 0803 	mov.w	r8, #3
 8003e9c:	2600      	movs	r6, #0
 8003e9e:	2700      	movs	r7, #0
 8003ea0:	4632      	mov	r2, r6
 8003ea2:	463b      	mov	r3, r7
 8003ea4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8003ea8:	f108 3aff 	add.w	sl, r8, #4294967295
 8003eac:	f7fc fdb0 	bl	8000a10 <__aeabi_dcmpeq>
 8003eb0:	b9b0      	cbnz	r0, 8003ee0 <__ieee754_rem_pio2+0x3d8>
 8003eb2:	4b0d      	ldr	r3, [pc, #52]	; (8003ee8 <__ieee754_rem_pio2+0x3e0>)
 8003eb4:	9301      	str	r3, [sp, #4]
 8003eb6:	2302      	movs	r3, #2
 8003eb8:	9300      	str	r3, [sp, #0]
 8003eba:	462a      	mov	r2, r5
 8003ebc:	4643      	mov	r3, r8
 8003ebe:	4621      	mov	r1, r4
 8003ec0:	a806      	add	r0, sp, #24
 8003ec2:	f000 f8dd 	bl	8004080 <__kernel_rem_pio2>
 8003ec6:	9b04      	ldr	r3, [sp, #16]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	4605      	mov	r5, r0
 8003ecc:	f6bf ae58 	bge.w	8003b80 <__ieee754_rem_pio2+0x78>
 8003ed0:	6863      	ldr	r3, [r4, #4]
 8003ed2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003ed6:	6063      	str	r3, [r4, #4]
 8003ed8:	68e3      	ldr	r3, [r4, #12]
 8003eda:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003ede:	e746      	b.n	8003d6e <__ieee754_rem_pio2+0x266>
 8003ee0:	46d0      	mov	r8, sl
 8003ee2:	e7dd      	b.n	8003ea0 <__ieee754_rem_pio2+0x398>
 8003ee4:	41700000 	.word	0x41700000
 8003ee8:	08004b70 	.word	0x08004b70
 8003eec:	00000000 	.word	0x00000000

08003ef0 <__kernel_cos>:
 8003ef0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ef4:	ec59 8b10 	vmov	r8, r9, d0
 8003ef8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 8003efc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 8003f00:	ed2d 8b02 	vpush	{d8}
 8003f04:	eeb0 8a41 	vmov.f32	s16, s2
 8003f08:	eef0 8a61 	vmov.f32	s17, s3
 8003f0c:	da07      	bge.n	8003f1e <__kernel_cos+0x2e>
 8003f0e:	ee10 0a10 	vmov	r0, s0
 8003f12:	4649      	mov	r1, r9
 8003f14:	f7fc fdae 	bl	8000a74 <__aeabi_d2iz>
 8003f18:	2800      	cmp	r0, #0
 8003f1a:	f000 8089 	beq.w	8004030 <__kernel_cos+0x140>
 8003f1e:	4642      	mov	r2, r8
 8003f20:	464b      	mov	r3, r9
 8003f22:	4640      	mov	r0, r8
 8003f24:	4649      	mov	r1, r9
 8003f26:	f7fc fb0b 	bl	8000540 <__aeabi_dmul>
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	4b4e      	ldr	r3, [pc, #312]	; (8004068 <__kernel_cos+0x178>)
 8003f2e:	4604      	mov	r4, r0
 8003f30:	460d      	mov	r5, r1
 8003f32:	f7fc fb05 	bl	8000540 <__aeabi_dmul>
 8003f36:	a340      	add	r3, pc, #256	; (adr r3, 8004038 <__kernel_cos+0x148>)
 8003f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f3c:	4682      	mov	sl, r0
 8003f3e:	468b      	mov	fp, r1
 8003f40:	4620      	mov	r0, r4
 8003f42:	4629      	mov	r1, r5
 8003f44:	f7fc fafc 	bl	8000540 <__aeabi_dmul>
 8003f48:	a33d      	add	r3, pc, #244	; (adr r3, 8004040 <__kernel_cos+0x150>)
 8003f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f4e:	f7fc f941 	bl	80001d4 <__adddf3>
 8003f52:	4622      	mov	r2, r4
 8003f54:	462b      	mov	r3, r5
 8003f56:	f7fc faf3 	bl	8000540 <__aeabi_dmul>
 8003f5a:	a33b      	add	r3, pc, #236	; (adr r3, 8004048 <__kernel_cos+0x158>)
 8003f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f60:	f7fc f936 	bl	80001d0 <__aeabi_dsub>
 8003f64:	4622      	mov	r2, r4
 8003f66:	462b      	mov	r3, r5
 8003f68:	f7fc faea 	bl	8000540 <__aeabi_dmul>
 8003f6c:	a338      	add	r3, pc, #224	; (adr r3, 8004050 <__kernel_cos+0x160>)
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f7fc f92f 	bl	80001d4 <__adddf3>
 8003f76:	4622      	mov	r2, r4
 8003f78:	462b      	mov	r3, r5
 8003f7a:	f7fc fae1 	bl	8000540 <__aeabi_dmul>
 8003f7e:	a336      	add	r3, pc, #216	; (adr r3, 8004058 <__kernel_cos+0x168>)
 8003f80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f84:	f7fc f924 	bl	80001d0 <__aeabi_dsub>
 8003f88:	4622      	mov	r2, r4
 8003f8a:	462b      	mov	r3, r5
 8003f8c:	f7fc fad8 	bl	8000540 <__aeabi_dmul>
 8003f90:	a333      	add	r3, pc, #204	; (adr r3, 8004060 <__kernel_cos+0x170>)
 8003f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f96:	f7fc f91d 	bl	80001d4 <__adddf3>
 8003f9a:	4622      	mov	r2, r4
 8003f9c:	462b      	mov	r3, r5
 8003f9e:	f7fc facf 	bl	8000540 <__aeabi_dmul>
 8003fa2:	4622      	mov	r2, r4
 8003fa4:	462b      	mov	r3, r5
 8003fa6:	f7fc facb 	bl	8000540 <__aeabi_dmul>
 8003faa:	ec53 2b18 	vmov	r2, r3, d8
 8003fae:	4604      	mov	r4, r0
 8003fb0:	460d      	mov	r5, r1
 8003fb2:	4640      	mov	r0, r8
 8003fb4:	4649      	mov	r1, r9
 8003fb6:	f7fc fac3 	bl	8000540 <__aeabi_dmul>
 8003fba:	460b      	mov	r3, r1
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	4629      	mov	r1, r5
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	f7fc f905 	bl	80001d0 <__aeabi_dsub>
 8003fc6:	4b29      	ldr	r3, [pc, #164]	; (800406c <__kernel_cos+0x17c>)
 8003fc8:	429e      	cmp	r6, r3
 8003fca:	4680      	mov	r8, r0
 8003fcc:	4689      	mov	r9, r1
 8003fce:	dc11      	bgt.n	8003ff4 <__kernel_cos+0x104>
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	460b      	mov	r3, r1
 8003fd4:	4650      	mov	r0, sl
 8003fd6:	4659      	mov	r1, fp
 8003fd8:	f7fc f8fa 	bl	80001d0 <__aeabi_dsub>
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4924      	ldr	r1, [pc, #144]	; (8004070 <__kernel_cos+0x180>)
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	2000      	movs	r0, #0
 8003fe4:	f7fc f8f4 	bl	80001d0 <__aeabi_dsub>
 8003fe8:	ecbd 8b02 	vpop	{d8}
 8003fec:	ec41 0b10 	vmov	d0, r0, r1
 8003ff0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ff4:	4b1f      	ldr	r3, [pc, #124]	; (8004074 <__kernel_cos+0x184>)
 8003ff6:	491e      	ldr	r1, [pc, #120]	; (8004070 <__kernel_cos+0x180>)
 8003ff8:	429e      	cmp	r6, r3
 8003ffa:	bfcc      	ite	gt
 8003ffc:	4d1e      	ldrgt	r5, [pc, #120]	; (8004078 <__kernel_cos+0x188>)
 8003ffe:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 8004002:	2400      	movs	r4, #0
 8004004:	4622      	mov	r2, r4
 8004006:	462b      	mov	r3, r5
 8004008:	2000      	movs	r0, #0
 800400a:	f7fc f8e1 	bl	80001d0 <__aeabi_dsub>
 800400e:	4622      	mov	r2, r4
 8004010:	4606      	mov	r6, r0
 8004012:	460f      	mov	r7, r1
 8004014:	462b      	mov	r3, r5
 8004016:	4650      	mov	r0, sl
 8004018:	4659      	mov	r1, fp
 800401a:	f7fc f8d9 	bl	80001d0 <__aeabi_dsub>
 800401e:	4642      	mov	r2, r8
 8004020:	464b      	mov	r3, r9
 8004022:	f7fc f8d5 	bl	80001d0 <__aeabi_dsub>
 8004026:	4602      	mov	r2, r0
 8004028:	460b      	mov	r3, r1
 800402a:	4630      	mov	r0, r6
 800402c:	4639      	mov	r1, r7
 800402e:	e7d9      	b.n	8003fe4 <__kernel_cos+0xf4>
 8004030:	2000      	movs	r0, #0
 8004032:	490f      	ldr	r1, [pc, #60]	; (8004070 <__kernel_cos+0x180>)
 8004034:	e7d8      	b.n	8003fe8 <__kernel_cos+0xf8>
 8004036:	bf00      	nop
 8004038:	be8838d4 	.word	0xbe8838d4
 800403c:	bda8fae9 	.word	0xbda8fae9
 8004040:	bdb4b1c4 	.word	0xbdb4b1c4
 8004044:	3e21ee9e 	.word	0x3e21ee9e
 8004048:	809c52ad 	.word	0x809c52ad
 800404c:	3e927e4f 	.word	0x3e927e4f
 8004050:	19cb1590 	.word	0x19cb1590
 8004054:	3efa01a0 	.word	0x3efa01a0
 8004058:	16c15177 	.word	0x16c15177
 800405c:	3f56c16c 	.word	0x3f56c16c
 8004060:	5555554c 	.word	0x5555554c
 8004064:	3fa55555 	.word	0x3fa55555
 8004068:	3fe00000 	.word	0x3fe00000
 800406c:	3fd33332 	.word	0x3fd33332
 8004070:	3ff00000 	.word	0x3ff00000
 8004074:	3fe90000 	.word	0x3fe90000
 8004078:	3fd20000 	.word	0x3fd20000
 800407c:	00000000 	.word	0x00000000

08004080 <__kernel_rem_pio2>:
 8004080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004084:	ed2d 8b02 	vpush	{d8}
 8004088:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800408c:	1ed4      	subs	r4, r2, #3
 800408e:	9308      	str	r3, [sp, #32]
 8004090:	9101      	str	r1, [sp, #4]
 8004092:	4bc5      	ldr	r3, [pc, #788]	; (80043a8 <__kernel_rem_pio2+0x328>)
 8004094:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004096:	9009      	str	r0, [sp, #36]	; 0x24
 8004098:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800409c:	9304      	str	r3, [sp, #16]
 800409e:	9b08      	ldr	r3, [sp, #32]
 80040a0:	3b01      	subs	r3, #1
 80040a2:	9307      	str	r3, [sp, #28]
 80040a4:	2318      	movs	r3, #24
 80040a6:	fb94 f4f3 	sdiv	r4, r4, r3
 80040aa:	f06f 0317 	mvn.w	r3, #23
 80040ae:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 80040b2:	fb04 3303 	mla	r3, r4, r3, r3
 80040b6:	eb03 0a02 	add.w	sl, r3, r2
 80040ba:	9b04      	ldr	r3, [sp, #16]
 80040bc:	9a07      	ldr	r2, [sp, #28]
 80040be:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8004398 <__kernel_rem_pio2+0x318>
 80040c2:	eb03 0802 	add.w	r8, r3, r2
 80040c6:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 80040c8:	1aa7      	subs	r7, r4, r2
 80040ca:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80040ce:	ae22      	add	r6, sp, #136	; 0x88
 80040d0:	2500      	movs	r5, #0
 80040d2:	4545      	cmp	r5, r8
 80040d4:	dd13      	ble.n	80040fe <__kernel_rem_pio2+0x7e>
 80040d6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8004398 <__kernel_rem_pio2+0x318>
 80040da:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80040de:	2600      	movs	r6, #0
 80040e0:	9b04      	ldr	r3, [sp, #16]
 80040e2:	429e      	cmp	r6, r3
 80040e4:	dc32      	bgt.n	800414c <__kernel_rem_pio2+0xcc>
 80040e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80040e8:	9302      	str	r3, [sp, #8]
 80040ea:	9b08      	ldr	r3, [sp, #32]
 80040ec:	199d      	adds	r5, r3, r6
 80040ee:	ab22      	add	r3, sp, #136	; 0x88
 80040f0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80040f4:	9306      	str	r3, [sp, #24]
 80040f6:	ec59 8b18 	vmov	r8, r9, d8
 80040fa:	2700      	movs	r7, #0
 80040fc:	e01f      	b.n	800413e <__kernel_rem_pio2+0xbe>
 80040fe:	42ef      	cmn	r7, r5
 8004100:	d407      	bmi.n	8004112 <__kernel_rem_pio2+0x92>
 8004102:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004106:	f7fc f9b1 	bl	800046c <__aeabi_i2d>
 800410a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800410e:	3501      	adds	r5, #1
 8004110:	e7df      	b.n	80040d2 <__kernel_rem_pio2+0x52>
 8004112:	ec51 0b18 	vmov	r0, r1, d8
 8004116:	e7f8      	b.n	800410a <__kernel_rem_pio2+0x8a>
 8004118:	9906      	ldr	r1, [sp, #24]
 800411a:	9d02      	ldr	r5, [sp, #8]
 800411c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8004120:	9106      	str	r1, [sp, #24]
 8004122:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8004126:	9502      	str	r5, [sp, #8]
 8004128:	f7fc fa0a 	bl	8000540 <__aeabi_dmul>
 800412c:	4602      	mov	r2, r0
 800412e:	460b      	mov	r3, r1
 8004130:	4640      	mov	r0, r8
 8004132:	4649      	mov	r1, r9
 8004134:	f7fc f84e 	bl	80001d4 <__adddf3>
 8004138:	3701      	adds	r7, #1
 800413a:	4680      	mov	r8, r0
 800413c:	4689      	mov	r9, r1
 800413e:	9b07      	ldr	r3, [sp, #28]
 8004140:	429f      	cmp	r7, r3
 8004142:	dde9      	ble.n	8004118 <__kernel_rem_pio2+0x98>
 8004144:	e8eb 8902 	strd	r8, r9, [fp], #8
 8004148:	3601      	adds	r6, #1
 800414a:	e7c9      	b.n	80040e0 <__kernel_rem_pio2+0x60>
 800414c:	9b04      	ldr	r3, [sp, #16]
 800414e:	aa0e      	add	r2, sp, #56	; 0x38
 8004150:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004154:	930c      	str	r3, [sp, #48]	; 0x30
 8004156:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004158:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800415c:	9c04      	ldr	r4, [sp, #16]
 800415e:	930b      	str	r3, [sp, #44]	; 0x2c
 8004160:	ab9a      	add	r3, sp, #616	; 0x268
 8004162:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8004166:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800416a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800416e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8004172:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8004176:	ab9a      	add	r3, sp, #616	; 0x268
 8004178:	445b      	add	r3, fp
 800417a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800417e:	2500      	movs	r5, #0
 8004180:	1b63      	subs	r3, r4, r5
 8004182:	2b00      	cmp	r3, #0
 8004184:	dc78      	bgt.n	8004278 <__kernel_rem_pio2+0x1f8>
 8004186:	4650      	mov	r0, sl
 8004188:	ec49 8b10 	vmov	d0, r8, r9
 800418c:	f000 fc00 	bl	8004990 <scalbn>
 8004190:	ec57 6b10 	vmov	r6, r7, d0
 8004194:	2200      	movs	r2, #0
 8004196:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800419a:	ee10 0a10 	vmov	r0, s0
 800419e:	4639      	mov	r1, r7
 80041a0:	f7fc f9ce 	bl	8000540 <__aeabi_dmul>
 80041a4:	ec41 0b10 	vmov	d0, r0, r1
 80041a8:	f000 fb6e 	bl	8004888 <floor>
 80041ac:	2200      	movs	r2, #0
 80041ae:	ec51 0b10 	vmov	r0, r1, d0
 80041b2:	4b7e      	ldr	r3, [pc, #504]	; (80043ac <__kernel_rem_pio2+0x32c>)
 80041b4:	f7fc f9c4 	bl	8000540 <__aeabi_dmul>
 80041b8:	4602      	mov	r2, r0
 80041ba:	460b      	mov	r3, r1
 80041bc:	4630      	mov	r0, r6
 80041be:	4639      	mov	r1, r7
 80041c0:	f7fc f806 	bl	80001d0 <__aeabi_dsub>
 80041c4:	460f      	mov	r7, r1
 80041c6:	4606      	mov	r6, r0
 80041c8:	f7fc fc54 	bl	8000a74 <__aeabi_d2iz>
 80041cc:	9006      	str	r0, [sp, #24]
 80041ce:	f7fc f94d 	bl	800046c <__aeabi_i2d>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4630      	mov	r0, r6
 80041d8:	4639      	mov	r1, r7
 80041da:	f7fb fff9 	bl	80001d0 <__aeabi_dsub>
 80041de:	f1ba 0f00 	cmp.w	sl, #0
 80041e2:	4606      	mov	r6, r0
 80041e4:	460f      	mov	r7, r1
 80041e6:	dd6c      	ble.n	80042c2 <__kernel_rem_pio2+0x242>
 80041e8:	1e62      	subs	r2, r4, #1
 80041ea:	ab0e      	add	r3, sp, #56	; 0x38
 80041ec:	f1ca 0118 	rsb	r1, sl, #24
 80041f0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80041f4:	9d06      	ldr	r5, [sp, #24]
 80041f6:	fa40 f301 	asr.w	r3, r0, r1
 80041fa:	441d      	add	r5, r3
 80041fc:	408b      	lsls	r3, r1
 80041fe:	1ac0      	subs	r0, r0, r3
 8004200:	ab0e      	add	r3, sp, #56	; 0x38
 8004202:	9506      	str	r5, [sp, #24]
 8004204:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004208:	f1ca 0317 	rsb	r3, sl, #23
 800420c:	fa40 f303 	asr.w	r3, r0, r3
 8004210:	9302      	str	r3, [sp, #8]
 8004212:	9b02      	ldr	r3, [sp, #8]
 8004214:	2b00      	cmp	r3, #0
 8004216:	dd62      	ble.n	80042de <__kernel_rem_pio2+0x25e>
 8004218:	9b06      	ldr	r3, [sp, #24]
 800421a:	2200      	movs	r2, #0
 800421c:	3301      	adds	r3, #1
 800421e:	9306      	str	r3, [sp, #24]
 8004220:	4615      	mov	r5, r2
 8004222:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8004226:	4294      	cmp	r4, r2
 8004228:	f300 8095 	bgt.w	8004356 <__kernel_rem_pio2+0x2d6>
 800422c:	f1ba 0f00 	cmp.w	sl, #0
 8004230:	dd07      	ble.n	8004242 <__kernel_rem_pio2+0x1c2>
 8004232:	f1ba 0f01 	cmp.w	sl, #1
 8004236:	f000 80a2 	beq.w	800437e <__kernel_rem_pio2+0x2fe>
 800423a:	f1ba 0f02 	cmp.w	sl, #2
 800423e:	f000 80c1 	beq.w	80043c4 <__kernel_rem_pio2+0x344>
 8004242:	9b02      	ldr	r3, [sp, #8]
 8004244:	2b02      	cmp	r3, #2
 8004246:	d14a      	bne.n	80042de <__kernel_rem_pio2+0x25e>
 8004248:	4632      	mov	r2, r6
 800424a:	463b      	mov	r3, r7
 800424c:	2000      	movs	r0, #0
 800424e:	4958      	ldr	r1, [pc, #352]	; (80043b0 <__kernel_rem_pio2+0x330>)
 8004250:	f7fb ffbe 	bl	80001d0 <__aeabi_dsub>
 8004254:	4606      	mov	r6, r0
 8004256:	460f      	mov	r7, r1
 8004258:	2d00      	cmp	r5, #0
 800425a:	d040      	beq.n	80042de <__kernel_rem_pio2+0x25e>
 800425c:	4650      	mov	r0, sl
 800425e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 80043a0 <__kernel_rem_pio2+0x320>
 8004262:	f000 fb95 	bl	8004990 <scalbn>
 8004266:	4630      	mov	r0, r6
 8004268:	4639      	mov	r1, r7
 800426a:	ec53 2b10 	vmov	r2, r3, d0
 800426e:	f7fb ffaf 	bl	80001d0 <__aeabi_dsub>
 8004272:	4606      	mov	r6, r0
 8004274:	460f      	mov	r7, r1
 8004276:	e032      	b.n	80042de <__kernel_rem_pio2+0x25e>
 8004278:	2200      	movs	r2, #0
 800427a:	4b4e      	ldr	r3, [pc, #312]	; (80043b4 <__kernel_rem_pio2+0x334>)
 800427c:	4640      	mov	r0, r8
 800427e:	4649      	mov	r1, r9
 8004280:	f7fc f95e 	bl	8000540 <__aeabi_dmul>
 8004284:	f7fc fbf6 	bl	8000a74 <__aeabi_d2iz>
 8004288:	f7fc f8f0 	bl	800046c <__aeabi_i2d>
 800428c:	2200      	movs	r2, #0
 800428e:	4b4a      	ldr	r3, [pc, #296]	; (80043b8 <__kernel_rem_pio2+0x338>)
 8004290:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004294:	f7fc f954 	bl	8000540 <__aeabi_dmul>
 8004298:	4602      	mov	r2, r0
 800429a:	460b      	mov	r3, r1
 800429c:	4640      	mov	r0, r8
 800429e:	4649      	mov	r1, r9
 80042a0:	f7fb ff96 	bl	80001d0 <__aeabi_dsub>
 80042a4:	f7fc fbe6 	bl	8000a74 <__aeabi_d2iz>
 80042a8:	ab0e      	add	r3, sp, #56	; 0x38
 80042aa:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 80042ae:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 80042b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80042b6:	f7fb ff8d 	bl	80001d4 <__adddf3>
 80042ba:	3501      	adds	r5, #1
 80042bc:	4680      	mov	r8, r0
 80042be:	4689      	mov	r9, r1
 80042c0:	e75e      	b.n	8004180 <__kernel_rem_pio2+0x100>
 80042c2:	d105      	bne.n	80042d0 <__kernel_rem_pio2+0x250>
 80042c4:	1e63      	subs	r3, r4, #1
 80042c6:	aa0e      	add	r2, sp, #56	; 0x38
 80042c8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80042cc:	15c3      	asrs	r3, r0, #23
 80042ce:	e79f      	b.n	8004210 <__kernel_rem_pio2+0x190>
 80042d0:	2200      	movs	r2, #0
 80042d2:	4b3a      	ldr	r3, [pc, #232]	; (80043bc <__kernel_rem_pio2+0x33c>)
 80042d4:	f7fc fbba 	bl	8000a4c <__aeabi_dcmpge>
 80042d8:	2800      	cmp	r0, #0
 80042da:	d139      	bne.n	8004350 <__kernel_rem_pio2+0x2d0>
 80042dc:	9002      	str	r0, [sp, #8]
 80042de:	2200      	movs	r2, #0
 80042e0:	2300      	movs	r3, #0
 80042e2:	4630      	mov	r0, r6
 80042e4:	4639      	mov	r1, r7
 80042e6:	f7fc fb93 	bl	8000a10 <__aeabi_dcmpeq>
 80042ea:	2800      	cmp	r0, #0
 80042ec:	f000 80c7 	beq.w	800447e <__kernel_rem_pio2+0x3fe>
 80042f0:	1e65      	subs	r5, r4, #1
 80042f2:	462b      	mov	r3, r5
 80042f4:	2200      	movs	r2, #0
 80042f6:	9904      	ldr	r1, [sp, #16]
 80042f8:	428b      	cmp	r3, r1
 80042fa:	da6a      	bge.n	80043d2 <__kernel_rem_pio2+0x352>
 80042fc:	2a00      	cmp	r2, #0
 80042fe:	f000 8088 	beq.w	8004412 <__kernel_rem_pio2+0x392>
 8004302:	ab0e      	add	r3, sp, #56	; 0x38
 8004304:	f1aa 0a18 	sub.w	sl, sl, #24
 8004308:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80b4 	beq.w	800447a <__kernel_rem_pio2+0x3fa>
 8004312:	4650      	mov	r0, sl
 8004314:	ed9f 0b22 	vldr	d0, [pc, #136]	; 80043a0 <__kernel_rem_pio2+0x320>
 8004318:	f000 fb3a 	bl	8004990 <scalbn>
 800431c:	00ec      	lsls	r4, r5, #3
 800431e:	ab72      	add	r3, sp, #456	; 0x1c8
 8004320:	191e      	adds	r6, r3, r4
 8004322:	ec59 8b10 	vmov	r8, r9, d0
 8004326:	f106 0a08 	add.w	sl, r6, #8
 800432a:	462f      	mov	r7, r5
 800432c:	2f00      	cmp	r7, #0
 800432e:	f280 80df 	bge.w	80044f0 <__kernel_rem_pio2+0x470>
 8004332:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8004398 <__kernel_rem_pio2+0x318>
 8004336:	f04f 0a00 	mov.w	sl, #0
 800433a:	eba5 030a 	sub.w	r3, r5, sl
 800433e:	2b00      	cmp	r3, #0
 8004340:	f2c0 810a 	blt.w	8004558 <__kernel_rem_pio2+0x4d8>
 8004344:	f8df b078 	ldr.w	fp, [pc, #120]	; 80043c0 <__kernel_rem_pio2+0x340>
 8004348:	ec59 8b18 	vmov	r8, r9, d8
 800434c:	2700      	movs	r7, #0
 800434e:	e0f5      	b.n	800453c <__kernel_rem_pio2+0x4bc>
 8004350:	2302      	movs	r3, #2
 8004352:	9302      	str	r3, [sp, #8]
 8004354:	e760      	b.n	8004218 <__kernel_rem_pio2+0x198>
 8004356:	ab0e      	add	r3, sp, #56	; 0x38
 8004358:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800435c:	b94d      	cbnz	r5, 8004372 <__kernel_rem_pio2+0x2f2>
 800435e:	b12b      	cbz	r3, 800436c <__kernel_rem_pio2+0x2ec>
 8004360:	a80e      	add	r0, sp, #56	; 0x38
 8004362:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004366:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800436a:	2301      	movs	r3, #1
 800436c:	3201      	adds	r2, #1
 800436e:	461d      	mov	r5, r3
 8004370:	e759      	b.n	8004226 <__kernel_rem_pio2+0x1a6>
 8004372:	a80e      	add	r0, sp, #56	; 0x38
 8004374:	1acb      	subs	r3, r1, r3
 8004376:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 800437a:	462b      	mov	r3, r5
 800437c:	e7f6      	b.n	800436c <__kernel_rem_pio2+0x2ec>
 800437e:	1e62      	subs	r2, r4, #1
 8004380:	ab0e      	add	r3, sp, #56	; 0x38
 8004382:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004386:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800438a:	a90e      	add	r1, sp, #56	; 0x38
 800438c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004390:	e757      	b.n	8004242 <__kernel_rem_pio2+0x1c2>
 8004392:	bf00      	nop
 8004394:	f3af 8000 	nop.w
	...
 80043a4:	3ff00000 	.word	0x3ff00000
 80043a8:	08004cb8 	.word	0x08004cb8
 80043ac:	40200000 	.word	0x40200000
 80043b0:	3ff00000 	.word	0x3ff00000
 80043b4:	3e700000 	.word	0x3e700000
 80043b8:	41700000 	.word	0x41700000
 80043bc:	3fe00000 	.word	0x3fe00000
 80043c0:	08004c78 	.word	0x08004c78
 80043c4:	1e62      	subs	r2, r4, #1
 80043c6:	ab0e      	add	r3, sp, #56	; 0x38
 80043c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80043cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80043d0:	e7db      	b.n	800438a <__kernel_rem_pio2+0x30a>
 80043d2:	a90e      	add	r1, sp, #56	; 0x38
 80043d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80043d8:	3b01      	subs	r3, #1
 80043da:	430a      	orrs	r2, r1
 80043dc:	e78b      	b.n	80042f6 <__kernel_rem_pio2+0x276>
 80043de:	3301      	adds	r3, #1
 80043e0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 80043e4:	2900      	cmp	r1, #0
 80043e6:	d0fa      	beq.n	80043de <__kernel_rem_pio2+0x35e>
 80043e8:	9a08      	ldr	r2, [sp, #32]
 80043ea:	4422      	add	r2, r4
 80043ec:	00d2      	lsls	r2, r2, #3
 80043ee:	a922      	add	r1, sp, #136	; 0x88
 80043f0:	18e3      	adds	r3, r4, r3
 80043f2:	9206      	str	r2, [sp, #24]
 80043f4:	440a      	add	r2, r1
 80043f6:	9302      	str	r3, [sp, #8]
 80043f8:	f10b 0108 	add.w	r1, fp, #8
 80043fc:	f102 0308 	add.w	r3, r2, #8
 8004400:	1c66      	adds	r6, r4, #1
 8004402:	910a      	str	r1, [sp, #40]	; 0x28
 8004404:	2500      	movs	r5, #0
 8004406:	930d      	str	r3, [sp, #52]	; 0x34
 8004408:	9b02      	ldr	r3, [sp, #8]
 800440a:	42b3      	cmp	r3, r6
 800440c:	da04      	bge.n	8004418 <__kernel_rem_pio2+0x398>
 800440e:	461c      	mov	r4, r3
 8004410:	e6a6      	b.n	8004160 <__kernel_rem_pio2+0xe0>
 8004412:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004414:	2301      	movs	r3, #1
 8004416:	e7e3      	b.n	80043e0 <__kernel_rem_pio2+0x360>
 8004418:	9b06      	ldr	r3, [sp, #24]
 800441a:	18ef      	adds	r7, r5, r3
 800441c:	ab22      	add	r3, sp, #136	; 0x88
 800441e:	441f      	add	r7, r3
 8004420:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004422:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8004426:	f7fc f821 	bl	800046c <__aeabi_i2d>
 800442a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800442c:	461c      	mov	r4, r3
 800442e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004430:	e9c7 0100 	strd	r0, r1, [r7]
 8004434:	eb03 0b05 	add.w	fp, r3, r5
 8004438:	2700      	movs	r7, #0
 800443a:	f04f 0800 	mov.w	r8, #0
 800443e:	f04f 0900 	mov.w	r9, #0
 8004442:	9b07      	ldr	r3, [sp, #28]
 8004444:	429f      	cmp	r7, r3
 8004446:	dd08      	ble.n	800445a <__kernel_rem_pio2+0x3da>
 8004448:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800444a:	aa72      	add	r2, sp, #456	; 0x1c8
 800444c:	18eb      	adds	r3, r5, r3
 800444e:	4413      	add	r3, r2
 8004450:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8004454:	3601      	adds	r6, #1
 8004456:	3508      	adds	r5, #8
 8004458:	e7d6      	b.n	8004408 <__kernel_rem_pio2+0x388>
 800445a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800445e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004462:	f7fc f86d 	bl	8000540 <__aeabi_dmul>
 8004466:	4602      	mov	r2, r0
 8004468:	460b      	mov	r3, r1
 800446a:	4640      	mov	r0, r8
 800446c:	4649      	mov	r1, r9
 800446e:	f7fb feb1 	bl	80001d4 <__adddf3>
 8004472:	3701      	adds	r7, #1
 8004474:	4680      	mov	r8, r0
 8004476:	4689      	mov	r9, r1
 8004478:	e7e3      	b.n	8004442 <__kernel_rem_pio2+0x3c2>
 800447a:	3d01      	subs	r5, #1
 800447c:	e741      	b.n	8004302 <__kernel_rem_pio2+0x282>
 800447e:	f1ca 0000 	rsb	r0, sl, #0
 8004482:	ec47 6b10 	vmov	d0, r6, r7
 8004486:	f000 fa83 	bl	8004990 <scalbn>
 800448a:	ec57 6b10 	vmov	r6, r7, d0
 800448e:	2200      	movs	r2, #0
 8004490:	4b99      	ldr	r3, [pc, #612]	; (80046f8 <__kernel_rem_pio2+0x678>)
 8004492:	ee10 0a10 	vmov	r0, s0
 8004496:	4639      	mov	r1, r7
 8004498:	f7fc fad8 	bl	8000a4c <__aeabi_dcmpge>
 800449c:	b1f8      	cbz	r0, 80044de <__kernel_rem_pio2+0x45e>
 800449e:	2200      	movs	r2, #0
 80044a0:	4b96      	ldr	r3, [pc, #600]	; (80046fc <__kernel_rem_pio2+0x67c>)
 80044a2:	4630      	mov	r0, r6
 80044a4:	4639      	mov	r1, r7
 80044a6:	f7fc f84b 	bl	8000540 <__aeabi_dmul>
 80044aa:	f7fc fae3 	bl	8000a74 <__aeabi_d2iz>
 80044ae:	4680      	mov	r8, r0
 80044b0:	f7fb ffdc 	bl	800046c <__aeabi_i2d>
 80044b4:	2200      	movs	r2, #0
 80044b6:	4b90      	ldr	r3, [pc, #576]	; (80046f8 <__kernel_rem_pio2+0x678>)
 80044b8:	f7fc f842 	bl	8000540 <__aeabi_dmul>
 80044bc:	460b      	mov	r3, r1
 80044be:	4602      	mov	r2, r0
 80044c0:	4639      	mov	r1, r7
 80044c2:	4630      	mov	r0, r6
 80044c4:	f7fb fe84 	bl	80001d0 <__aeabi_dsub>
 80044c8:	f7fc fad4 	bl	8000a74 <__aeabi_d2iz>
 80044cc:	1c65      	adds	r5, r4, #1
 80044ce:	ab0e      	add	r3, sp, #56	; 0x38
 80044d0:	f10a 0a18 	add.w	sl, sl, #24
 80044d4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80044d8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 80044dc:	e719      	b.n	8004312 <__kernel_rem_pio2+0x292>
 80044de:	4630      	mov	r0, r6
 80044e0:	4639      	mov	r1, r7
 80044e2:	f7fc fac7 	bl	8000a74 <__aeabi_d2iz>
 80044e6:	ab0e      	add	r3, sp, #56	; 0x38
 80044e8:	4625      	mov	r5, r4
 80044ea:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 80044ee:	e710      	b.n	8004312 <__kernel_rem_pio2+0x292>
 80044f0:	ab0e      	add	r3, sp, #56	; 0x38
 80044f2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 80044f6:	f7fb ffb9 	bl	800046c <__aeabi_i2d>
 80044fa:	4642      	mov	r2, r8
 80044fc:	464b      	mov	r3, r9
 80044fe:	f7fc f81f 	bl	8000540 <__aeabi_dmul>
 8004502:	2200      	movs	r2, #0
 8004504:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8004508:	4b7c      	ldr	r3, [pc, #496]	; (80046fc <__kernel_rem_pio2+0x67c>)
 800450a:	4640      	mov	r0, r8
 800450c:	4649      	mov	r1, r9
 800450e:	f7fc f817 	bl	8000540 <__aeabi_dmul>
 8004512:	3f01      	subs	r7, #1
 8004514:	4680      	mov	r8, r0
 8004516:	4689      	mov	r9, r1
 8004518:	e708      	b.n	800432c <__kernel_rem_pio2+0x2ac>
 800451a:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 800451e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004522:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8004526:	f7fc f80b 	bl	8000540 <__aeabi_dmul>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4640      	mov	r0, r8
 8004530:	4649      	mov	r1, r9
 8004532:	f7fb fe4f 	bl	80001d4 <__adddf3>
 8004536:	3701      	adds	r7, #1
 8004538:	4680      	mov	r8, r0
 800453a:	4689      	mov	r9, r1
 800453c:	9b04      	ldr	r3, [sp, #16]
 800453e:	429f      	cmp	r7, r3
 8004540:	dc01      	bgt.n	8004546 <__kernel_rem_pio2+0x4c6>
 8004542:	45ba      	cmp	sl, r7
 8004544:	dae9      	bge.n	800451a <__kernel_rem_pio2+0x49a>
 8004546:	ab4a      	add	r3, sp, #296	; 0x128
 8004548:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800454c:	e9c3 8900 	strd	r8, r9, [r3]
 8004550:	f10a 0a01 	add.w	sl, sl, #1
 8004554:	3e08      	subs	r6, #8
 8004556:	e6f0      	b.n	800433a <__kernel_rem_pio2+0x2ba>
 8004558:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800455a:	2b03      	cmp	r3, #3
 800455c:	d85b      	bhi.n	8004616 <__kernel_rem_pio2+0x596>
 800455e:	e8df f003 	tbb	[pc, r3]
 8004562:	264a      	.short	0x264a
 8004564:	0226      	.short	0x0226
 8004566:	ab9a      	add	r3, sp, #616	; 0x268
 8004568:	441c      	add	r4, r3
 800456a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800456e:	46a2      	mov	sl, r4
 8004570:	46ab      	mov	fp, r5
 8004572:	f1bb 0f00 	cmp.w	fp, #0
 8004576:	dc6c      	bgt.n	8004652 <__kernel_rem_pio2+0x5d2>
 8004578:	46a2      	mov	sl, r4
 800457a:	46ab      	mov	fp, r5
 800457c:	f1bb 0f01 	cmp.w	fp, #1
 8004580:	f300 8086 	bgt.w	8004690 <__kernel_rem_pio2+0x610>
 8004584:	2000      	movs	r0, #0
 8004586:	2100      	movs	r1, #0
 8004588:	2d01      	cmp	r5, #1
 800458a:	f300 80a0 	bgt.w	80046ce <__kernel_rem_pio2+0x64e>
 800458e:	9b02      	ldr	r3, [sp, #8]
 8004590:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8004594:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8004598:	2b00      	cmp	r3, #0
 800459a:	f040 809e 	bne.w	80046da <__kernel_rem_pio2+0x65a>
 800459e:	9b01      	ldr	r3, [sp, #4]
 80045a0:	e9c3 7800 	strd	r7, r8, [r3]
 80045a4:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80045a8:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80045ac:	e033      	b.n	8004616 <__kernel_rem_pio2+0x596>
 80045ae:	3408      	adds	r4, #8
 80045b0:	ab4a      	add	r3, sp, #296	; 0x128
 80045b2:	441c      	add	r4, r3
 80045b4:	462e      	mov	r6, r5
 80045b6:	2000      	movs	r0, #0
 80045b8:	2100      	movs	r1, #0
 80045ba:	2e00      	cmp	r6, #0
 80045bc:	da3a      	bge.n	8004634 <__kernel_rem_pio2+0x5b4>
 80045be:	9b02      	ldr	r3, [sp, #8]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d03d      	beq.n	8004640 <__kernel_rem_pio2+0x5c0>
 80045c4:	4602      	mov	r2, r0
 80045c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80045ca:	9c01      	ldr	r4, [sp, #4]
 80045cc:	e9c4 2300 	strd	r2, r3, [r4]
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 80045d8:	f7fb fdfa 	bl	80001d0 <__aeabi_dsub>
 80045dc:	ae4c      	add	r6, sp, #304	; 0x130
 80045de:	2401      	movs	r4, #1
 80045e0:	42a5      	cmp	r5, r4
 80045e2:	da30      	bge.n	8004646 <__kernel_rem_pio2+0x5c6>
 80045e4:	9b02      	ldr	r3, [sp, #8]
 80045e6:	b113      	cbz	r3, 80045ee <__kernel_rem_pio2+0x56e>
 80045e8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80045ec:	4619      	mov	r1, r3
 80045ee:	9b01      	ldr	r3, [sp, #4]
 80045f0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80045f4:	e00f      	b.n	8004616 <__kernel_rem_pio2+0x596>
 80045f6:	ab9a      	add	r3, sp, #616	; 0x268
 80045f8:	441c      	add	r4, r3
 80045fa:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80045fe:	2000      	movs	r0, #0
 8004600:	2100      	movs	r1, #0
 8004602:	2d00      	cmp	r5, #0
 8004604:	da10      	bge.n	8004628 <__kernel_rem_pio2+0x5a8>
 8004606:	9b02      	ldr	r3, [sp, #8]
 8004608:	b113      	cbz	r3, 8004610 <__kernel_rem_pio2+0x590>
 800460a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800460e:	4619      	mov	r1, r3
 8004610:	9b01      	ldr	r3, [sp, #4]
 8004612:	e9c3 0100 	strd	r0, r1, [r3]
 8004616:	9b06      	ldr	r3, [sp, #24]
 8004618:	f003 0007 	and.w	r0, r3, #7
 800461c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004620:	ecbd 8b02 	vpop	{d8}
 8004624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004628:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800462c:	f7fb fdd2 	bl	80001d4 <__adddf3>
 8004630:	3d01      	subs	r5, #1
 8004632:	e7e6      	b.n	8004602 <__kernel_rem_pio2+0x582>
 8004634:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004638:	f7fb fdcc 	bl	80001d4 <__adddf3>
 800463c:	3e01      	subs	r6, #1
 800463e:	e7bc      	b.n	80045ba <__kernel_rem_pio2+0x53a>
 8004640:	4602      	mov	r2, r0
 8004642:	460b      	mov	r3, r1
 8004644:	e7c1      	b.n	80045ca <__kernel_rem_pio2+0x54a>
 8004646:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800464a:	f7fb fdc3 	bl	80001d4 <__adddf3>
 800464e:	3401      	adds	r4, #1
 8004650:	e7c6      	b.n	80045e0 <__kernel_rem_pio2+0x560>
 8004652:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8004656:	ed3a 7b02 	vldmdb	sl!, {d7}
 800465a:	4640      	mov	r0, r8
 800465c:	ec53 2b17 	vmov	r2, r3, d7
 8004660:	4649      	mov	r1, r9
 8004662:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004666:	f7fb fdb5 	bl	80001d4 <__adddf3>
 800466a:	4602      	mov	r2, r0
 800466c:	460b      	mov	r3, r1
 800466e:	4606      	mov	r6, r0
 8004670:	460f      	mov	r7, r1
 8004672:	4640      	mov	r0, r8
 8004674:	4649      	mov	r1, r9
 8004676:	f7fb fdab 	bl	80001d0 <__aeabi_dsub>
 800467a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800467e:	f7fb fda9 	bl	80001d4 <__adddf3>
 8004682:	f10b 3bff 	add.w	fp, fp, #4294967295
 8004686:	e9ca 0100 	strd	r0, r1, [sl]
 800468a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 800468e:	e770      	b.n	8004572 <__kernel_rem_pio2+0x4f2>
 8004690:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8004694:	ed3a 7b02 	vldmdb	sl!, {d7}
 8004698:	4630      	mov	r0, r6
 800469a:	ec53 2b17 	vmov	r2, r3, d7
 800469e:	4639      	mov	r1, r7
 80046a0:	ed8d 7b04 	vstr	d7, [sp, #16]
 80046a4:	f7fb fd96 	bl	80001d4 <__adddf3>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4680      	mov	r8, r0
 80046ae:	4689      	mov	r9, r1
 80046b0:	4630      	mov	r0, r6
 80046b2:	4639      	mov	r1, r7
 80046b4:	f7fb fd8c 	bl	80001d0 <__aeabi_dsub>
 80046b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80046bc:	f7fb fd8a 	bl	80001d4 <__adddf3>
 80046c0:	f10b 3bff 	add.w	fp, fp, #4294967295
 80046c4:	e9ca 0100 	strd	r0, r1, [sl]
 80046c8:	e94a 8902 	strd	r8, r9, [sl, #-8]
 80046cc:	e756      	b.n	800457c <__kernel_rem_pio2+0x4fc>
 80046ce:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80046d2:	f7fb fd7f 	bl	80001d4 <__adddf3>
 80046d6:	3d01      	subs	r5, #1
 80046d8:	e756      	b.n	8004588 <__kernel_rem_pio2+0x508>
 80046da:	9b01      	ldr	r3, [sp, #4]
 80046dc:	9a01      	ldr	r2, [sp, #4]
 80046de:	601f      	str	r7, [r3, #0]
 80046e0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 80046e4:	605c      	str	r4, [r3, #4]
 80046e6:	609d      	str	r5, [r3, #8]
 80046e8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80046ec:	60d3      	str	r3, [r2, #12]
 80046ee:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80046f2:	6110      	str	r0, [r2, #16]
 80046f4:	6153      	str	r3, [r2, #20]
 80046f6:	e78e      	b.n	8004616 <__kernel_rem_pio2+0x596>
 80046f8:	41700000 	.word	0x41700000
 80046fc:	3e700000 	.word	0x3e700000

08004700 <__kernel_sin>:
 8004700:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004704:	ec55 4b10 	vmov	r4, r5, d0
 8004708:	b085      	sub	sp, #20
 800470a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800470e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004712:	ed8d 1b00 	vstr	d1, [sp]
 8004716:	9002      	str	r0, [sp, #8]
 8004718:	da06      	bge.n	8004728 <__kernel_sin+0x28>
 800471a:	ee10 0a10 	vmov	r0, s0
 800471e:	4629      	mov	r1, r5
 8004720:	f7fc f9a8 	bl	8000a74 <__aeabi_d2iz>
 8004724:	2800      	cmp	r0, #0
 8004726:	d051      	beq.n	80047cc <__kernel_sin+0xcc>
 8004728:	4622      	mov	r2, r4
 800472a:	462b      	mov	r3, r5
 800472c:	4620      	mov	r0, r4
 800472e:	4629      	mov	r1, r5
 8004730:	f7fb ff06 	bl	8000540 <__aeabi_dmul>
 8004734:	4682      	mov	sl, r0
 8004736:	468b      	mov	fp, r1
 8004738:	4602      	mov	r2, r0
 800473a:	460b      	mov	r3, r1
 800473c:	4620      	mov	r0, r4
 800473e:	4629      	mov	r1, r5
 8004740:	f7fb fefe 	bl	8000540 <__aeabi_dmul>
 8004744:	a341      	add	r3, pc, #260	; (adr r3, 800484c <__kernel_sin+0x14c>)
 8004746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800474a:	4680      	mov	r8, r0
 800474c:	4689      	mov	r9, r1
 800474e:	4650      	mov	r0, sl
 8004750:	4659      	mov	r1, fp
 8004752:	f7fb fef5 	bl	8000540 <__aeabi_dmul>
 8004756:	a33f      	add	r3, pc, #252	; (adr r3, 8004854 <__kernel_sin+0x154>)
 8004758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800475c:	f7fb fd38 	bl	80001d0 <__aeabi_dsub>
 8004760:	4652      	mov	r2, sl
 8004762:	465b      	mov	r3, fp
 8004764:	f7fb feec 	bl	8000540 <__aeabi_dmul>
 8004768:	a33c      	add	r3, pc, #240	; (adr r3, 800485c <__kernel_sin+0x15c>)
 800476a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800476e:	f7fb fd31 	bl	80001d4 <__adddf3>
 8004772:	4652      	mov	r2, sl
 8004774:	465b      	mov	r3, fp
 8004776:	f7fb fee3 	bl	8000540 <__aeabi_dmul>
 800477a:	a33a      	add	r3, pc, #232	; (adr r3, 8004864 <__kernel_sin+0x164>)
 800477c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004780:	f7fb fd26 	bl	80001d0 <__aeabi_dsub>
 8004784:	4652      	mov	r2, sl
 8004786:	465b      	mov	r3, fp
 8004788:	f7fb feda 	bl	8000540 <__aeabi_dmul>
 800478c:	a337      	add	r3, pc, #220	; (adr r3, 800486c <__kernel_sin+0x16c>)
 800478e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004792:	f7fb fd1f 	bl	80001d4 <__adddf3>
 8004796:	9b02      	ldr	r3, [sp, #8]
 8004798:	4606      	mov	r6, r0
 800479a:	460f      	mov	r7, r1
 800479c:	b9db      	cbnz	r3, 80047d6 <__kernel_sin+0xd6>
 800479e:	4602      	mov	r2, r0
 80047a0:	460b      	mov	r3, r1
 80047a2:	4650      	mov	r0, sl
 80047a4:	4659      	mov	r1, fp
 80047a6:	f7fb fecb 	bl	8000540 <__aeabi_dmul>
 80047aa:	a325      	add	r3, pc, #148	; (adr r3, 8004840 <__kernel_sin+0x140>)
 80047ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80047b0:	f7fb fd0e 	bl	80001d0 <__aeabi_dsub>
 80047b4:	4642      	mov	r2, r8
 80047b6:	464b      	mov	r3, r9
 80047b8:	f7fb fec2 	bl	8000540 <__aeabi_dmul>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	4620      	mov	r0, r4
 80047c2:	4629      	mov	r1, r5
 80047c4:	f7fb fd06 	bl	80001d4 <__adddf3>
 80047c8:	4604      	mov	r4, r0
 80047ca:	460d      	mov	r5, r1
 80047cc:	ec45 4b10 	vmov	d0, r4, r5
 80047d0:	b005      	add	sp, #20
 80047d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047d6:	2200      	movs	r2, #0
 80047d8:	4b1b      	ldr	r3, [pc, #108]	; (8004848 <__kernel_sin+0x148>)
 80047da:	e9dd 0100 	ldrd	r0, r1, [sp]
 80047de:	f7fb feaf 	bl	8000540 <__aeabi_dmul>
 80047e2:	4632      	mov	r2, r6
 80047e4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80047e8:	463b      	mov	r3, r7
 80047ea:	4640      	mov	r0, r8
 80047ec:	4649      	mov	r1, r9
 80047ee:	f7fb fea7 	bl	8000540 <__aeabi_dmul>
 80047f2:	4602      	mov	r2, r0
 80047f4:	460b      	mov	r3, r1
 80047f6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80047fa:	f7fb fce9 	bl	80001d0 <__aeabi_dsub>
 80047fe:	4652      	mov	r2, sl
 8004800:	465b      	mov	r3, fp
 8004802:	f7fb fe9d 	bl	8000540 <__aeabi_dmul>
 8004806:	e9dd 2300 	ldrd	r2, r3, [sp]
 800480a:	f7fb fce1 	bl	80001d0 <__aeabi_dsub>
 800480e:	a30c      	add	r3, pc, #48	; (adr r3, 8004840 <__kernel_sin+0x140>)
 8004810:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004814:	4606      	mov	r6, r0
 8004816:	460f      	mov	r7, r1
 8004818:	4640      	mov	r0, r8
 800481a:	4649      	mov	r1, r9
 800481c:	f7fb fe90 	bl	8000540 <__aeabi_dmul>
 8004820:	4602      	mov	r2, r0
 8004822:	460b      	mov	r3, r1
 8004824:	4630      	mov	r0, r6
 8004826:	4639      	mov	r1, r7
 8004828:	f7fb fcd4 	bl	80001d4 <__adddf3>
 800482c:	4602      	mov	r2, r0
 800482e:	460b      	mov	r3, r1
 8004830:	4620      	mov	r0, r4
 8004832:	4629      	mov	r1, r5
 8004834:	f7fb fccc 	bl	80001d0 <__aeabi_dsub>
 8004838:	e7c6      	b.n	80047c8 <__kernel_sin+0xc8>
 800483a:	bf00      	nop
 800483c:	f3af 8000 	nop.w
 8004840:	55555549 	.word	0x55555549
 8004844:	3fc55555 	.word	0x3fc55555
 8004848:	3fe00000 	.word	0x3fe00000
 800484c:	5acfd57c 	.word	0x5acfd57c
 8004850:	3de5d93a 	.word	0x3de5d93a
 8004854:	8a2b9ceb 	.word	0x8a2b9ceb
 8004858:	3e5ae5e6 	.word	0x3e5ae5e6
 800485c:	57b1fe7d 	.word	0x57b1fe7d
 8004860:	3ec71de3 	.word	0x3ec71de3
 8004864:	19c161d5 	.word	0x19c161d5
 8004868:	3f2a01a0 	.word	0x3f2a01a0
 800486c:	1110f8a6 	.word	0x1110f8a6
 8004870:	3f811111 	.word	0x3f811111

08004874 <fabs>:
 8004874:	ec51 0b10 	vmov	r0, r1, d0
 8004878:	ee10 2a10 	vmov	r2, s0
 800487c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004880:	ec43 2b10 	vmov	d0, r2, r3
 8004884:	4770      	bx	lr
	...

08004888 <floor>:
 8004888:	ec51 0b10 	vmov	r0, r1, d0
 800488c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004890:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004894:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004898:	2e13      	cmp	r6, #19
 800489a:	460c      	mov	r4, r1
 800489c:	ee10 5a10 	vmov	r5, s0
 80048a0:	4680      	mov	r8, r0
 80048a2:	dc34      	bgt.n	800490e <floor+0x86>
 80048a4:	2e00      	cmp	r6, #0
 80048a6:	da16      	bge.n	80048d6 <floor+0x4e>
 80048a8:	a335      	add	r3, pc, #212	; (adr r3, 8004980 <floor+0xf8>)
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	f7fb fc91 	bl	80001d4 <__adddf3>
 80048b2:	2200      	movs	r2, #0
 80048b4:	2300      	movs	r3, #0
 80048b6:	f7fc f8d3 	bl	8000a60 <__aeabi_dcmpgt>
 80048ba:	b148      	cbz	r0, 80048d0 <floor+0x48>
 80048bc:	2c00      	cmp	r4, #0
 80048be:	da59      	bge.n	8004974 <floor+0xec>
 80048c0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80048c4:	4a30      	ldr	r2, [pc, #192]	; (8004988 <floor+0x100>)
 80048c6:	432b      	orrs	r3, r5
 80048c8:	2500      	movs	r5, #0
 80048ca:	42ab      	cmp	r3, r5
 80048cc:	bf18      	it	ne
 80048ce:	4614      	movne	r4, r2
 80048d0:	4621      	mov	r1, r4
 80048d2:	4628      	mov	r0, r5
 80048d4:	e025      	b.n	8004922 <floor+0x9a>
 80048d6:	4f2d      	ldr	r7, [pc, #180]	; (800498c <floor+0x104>)
 80048d8:	4137      	asrs	r7, r6
 80048da:	ea01 0307 	and.w	r3, r1, r7
 80048de:	4303      	orrs	r3, r0
 80048e0:	d01f      	beq.n	8004922 <floor+0x9a>
 80048e2:	a327      	add	r3, pc, #156	; (adr r3, 8004980 <floor+0xf8>)
 80048e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048e8:	f7fb fc74 	bl	80001d4 <__adddf3>
 80048ec:	2200      	movs	r2, #0
 80048ee:	2300      	movs	r3, #0
 80048f0:	f7fc f8b6 	bl	8000a60 <__aeabi_dcmpgt>
 80048f4:	2800      	cmp	r0, #0
 80048f6:	d0eb      	beq.n	80048d0 <floor+0x48>
 80048f8:	2c00      	cmp	r4, #0
 80048fa:	bfbe      	ittt	lt
 80048fc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004900:	fa43 f606 	asrlt.w	r6, r3, r6
 8004904:	19a4      	addlt	r4, r4, r6
 8004906:	ea24 0407 	bic.w	r4, r4, r7
 800490a:	2500      	movs	r5, #0
 800490c:	e7e0      	b.n	80048d0 <floor+0x48>
 800490e:	2e33      	cmp	r6, #51	; 0x33
 8004910:	dd0b      	ble.n	800492a <floor+0xa2>
 8004912:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004916:	d104      	bne.n	8004922 <floor+0x9a>
 8004918:	ee10 2a10 	vmov	r2, s0
 800491c:	460b      	mov	r3, r1
 800491e:	f7fb fc59 	bl	80001d4 <__adddf3>
 8004922:	ec41 0b10 	vmov	d0, r0, r1
 8004926:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800492a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800492e:	f04f 33ff 	mov.w	r3, #4294967295
 8004932:	fa23 f707 	lsr.w	r7, r3, r7
 8004936:	4207      	tst	r7, r0
 8004938:	d0f3      	beq.n	8004922 <floor+0x9a>
 800493a:	a311      	add	r3, pc, #68	; (adr r3, 8004980 <floor+0xf8>)
 800493c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004940:	f7fb fc48 	bl	80001d4 <__adddf3>
 8004944:	2200      	movs	r2, #0
 8004946:	2300      	movs	r3, #0
 8004948:	f7fc f88a 	bl	8000a60 <__aeabi_dcmpgt>
 800494c:	2800      	cmp	r0, #0
 800494e:	d0bf      	beq.n	80048d0 <floor+0x48>
 8004950:	2c00      	cmp	r4, #0
 8004952:	da02      	bge.n	800495a <floor+0xd2>
 8004954:	2e14      	cmp	r6, #20
 8004956:	d103      	bne.n	8004960 <floor+0xd8>
 8004958:	3401      	adds	r4, #1
 800495a:	ea25 0507 	bic.w	r5, r5, r7
 800495e:	e7b7      	b.n	80048d0 <floor+0x48>
 8004960:	2301      	movs	r3, #1
 8004962:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004966:	fa03 f606 	lsl.w	r6, r3, r6
 800496a:	4435      	add	r5, r6
 800496c:	4545      	cmp	r5, r8
 800496e:	bf38      	it	cc
 8004970:	18e4      	addcc	r4, r4, r3
 8004972:	e7f2      	b.n	800495a <floor+0xd2>
 8004974:	2500      	movs	r5, #0
 8004976:	462c      	mov	r4, r5
 8004978:	e7aa      	b.n	80048d0 <floor+0x48>
 800497a:	bf00      	nop
 800497c:	f3af 8000 	nop.w
 8004980:	8800759c 	.word	0x8800759c
 8004984:	7e37e43c 	.word	0x7e37e43c
 8004988:	bff00000 	.word	0xbff00000
 800498c:	000fffff 	.word	0x000fffff

08004990 <scalbn>:
 8004990:	b570      	push	{r4, r5, r6, lr}
 8004992:	ec55 4b10 	vmov	r4, r5, d0
 8004996:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800499a:	4606      	mov	r6, r0
 800499c:	462b      	mov	r3, r5
 800499e:	b9aa      	cbnz	r2, 80049cc <scalbn+0x3c>
 80049a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80049a4:	4323      	orrs	r3, r4
 80049a6:	d03b      	beq.n	8004a20 <scalbn+0x90>
 80049a8:	4b31      	ldr	r3, [pc, #196]	; (8004a70 <scalbn+0xe0>)
 80049aa:	4629      	mov	r1, r5
 80049ac:	2200      	movs	r2, #0
 80049ae:	ee10 0a10 	vmov	r0, s0
 80049b2:	f7fb fdc5 	bl	8000540 <__aeabi_dmul>
 80049b6:	4b2f      	ldr	r3, [pc, #188]	; (8004a74 <scalbn+0xe4>)
 80049b8:	429e      	cmp	r6, r3
 80049ba:	4604      	mov	r4, r0
 80049bc:	460d      	mov	r5, r1
 80049be:	da12      	bge.n	80049e6 <scalbn+0x56>
 80049c0:	a327      	add	r3, pc, #156	; (adr r3, 8004a60 <scalbn+0xd0>)
 80049c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049c6:	f7fb fdbb 	bl	8000540 <__aeabi_dmul>
 80049ca:	e009      	b.n	80049e0 <scalbn+0x50>
 80049cc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80049d0:	428a      	cmp	r2, r1
 80049d2:	d10c      	bne.n	80049ee <scalbn+0x5e>
 80049d4:	ee10 2a10 	vmov	r2, s0
 80049d8:	4620      	mov	r0, r4
 80049da:	4629      	mov	r1, r5
 80049dc:	f7fb fbfa 	bl	80001d4 <__adddf3>
 80049e0:	4604      	mov	r4, r0
 80049e2:	460d      	mov	r5, r1
 80049e4:	e01c      	b.n	8004a20 <scalbn+0x90>
 80049e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80049ea:	460b      	mov	r3, r1
 80049ec:	3a36      	subs	r2, #54	; 0x36
 80049ee:	4432      	add	r2, r6
 80049f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80049f4:	428a      	cmp	r2, r1
 80049f6:	dd0b      	ble.n	8004a10 <scalbn+0x80>
 80049f8:	ec45 4b11 	vmov	d1, r4, r5
 80049fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8004a68 <scalbn+0xd8>
 8004a00:	f000 f83c 	bl	8004a7c <copysign>
 8004a04:	a318      	add	r3, pc, #96	; (adr r3, 8004a68 <scalbn+0xd8>)
 8004a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a0a:	ec51 0b10 	vmov	r0, r1, d0
 8004a0e:	e7da      	b.n	80049c6 <scalbn+0x36>
 8004a10:	2a00      	cmp	r2, #0
 8004a12:	dd08      	ble.n	8004a26 <scalbn+0x96>
 8004a14:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a18:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a1c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a20:	ec45 4b10 	vmov	d0, r4, r5
 8004a24:	bd70      	pop	{r4, r5, r6, pc}
 8004a26:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8004a2a:	da0d      	bge.n	8004a48 <scalbn+0xb8>
 8004a2c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004a30:	429e      	cmp	r6, r3
 8004a32:	ec45 4b11 	vmov	d1, r4, r5
 8004a36:	dce1      	bgt.n	80049fc <scalbn+0x6c>
 8004a38:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8004a60 <scalbn+0xd0>
 8004a3c:	f000 f81e 	bl	8004a7c <copysign>
 8004a40:	a307      	add	r3, pc, #28	; (adr r3, 8004a60 <scalbn+0xd0>)
 8004a42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a46:	e7e0      	b.n	8004a0a <scalbn+0x7a>
 8004a48:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004a4c:	3236      	adds	r2, #54	; 0x36
 8004a4e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8004a52:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004a56:	4620      	mov	r0, r4
 8004a58:	4629      	mov	r1, r5
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	4b06      	ldr	r3, [pc, #24]	; (8004a78 <scalbn+0xe8>)
 8004a5e:	e7b2      	b.n	80049c6 <scalbn+0x36>
 8004a60:	c2f8f359 	.word	0xc2f8f359
 8004a64:	01a56e1f 	.word	0x01a56e1f
 8004a68:	8800759c 	.word	0x8800759c
 8004a6c:	7e37e43c 	.word	0x7e37e43c
 8004a70:	43500000 	.word	0x43500000
 8004a74:	ffff3cb0 	.word	0xffff3cb0
 8004a78:	3c900000 	.word	0x3c900000

08004a7c <copysign>:
 8004a7c:	ec51 0b10 	vmov	r0, r1, d0
 8004a80:	ee11 0a90 	vmov	r0, s3
 8004a84:	ee10 2a10 	vmov	r2, s0
 8004a88:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8004a8c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8004a90:	ea41 0300 	orr.w	r3, r1, r0
 8004a94:	ec43 2b10 	vmov	d0, r2, r3
 8004a98:	4770      	bx	lr
	...

08004a9c <_init>:
 8004a9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a9e:	bf00      	nop
 8004aa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aa2:	bc08      	pop	{r3}
 8004aa4:	469e      	mov	lr, r3
 8004aa6:	4770      	bx	lr

08004aa8 <_fini>:
 8004aa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aaa:	bf00      	nop
 8004aac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004aae:	bc08      	pop	{r3}
 8004ab0:	469e      	mov	lr, r3
 8004ab2:	4770      	bx	lr
