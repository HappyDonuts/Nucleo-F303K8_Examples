
F303_I2C_OLED.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e9c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001590  08006030  08006030  00016030  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080075c0  080075c0  00020084  2**0
                  CONTENTS
  4 .ARM          00000000  080075c0  080075c0  00020084  2**0
                  CONTENTS
  5 .preinit_array 00000000  080075c0  080075c0  00020084  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080075c0  080075c0  000175c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080075c4  080075c4  000175c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000084  20000000  080075c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004f8  20000084  0800764c  00020084  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000057c  0800764c  0002057c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010002  00000000  00000000  000200b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002117  00000000  00000000  000300b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e0  00000000  00000000  000321d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000006f8  00000000  00000000  000329b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00017f15  00000000  00000000  000330a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009547  00000000  00000000  0004afbd  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c8d2  00000000  00000000  00054504  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000d0dd6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002724  00000000  00000000  000d0e54  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000084 	.word	0x20000084
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006014 	.word	0x08006014

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000088 	.word	0x20000088
 80001cc:	08006014 	.word	0x08006014

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_Init+0x28>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_Init+0x28>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f000 f90d 	bl	8000ea8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 f808 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f003 f876 	bl	8003d84 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40022000 	.word	0x40022000

08000ca4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x54>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x58>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f000 f917 	bl	8000ef6 <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f000 f8ed 	bl	8000ebe <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_InitTick+0x5c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000018 	.word	0x20000018
 8000cfc:	20000004 	.word	0x20000004
 8000d00:	20000000 	.word	0x20000000

08000d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000004 	.word	0x20000004
 8000d28:	200004d8 	.word	0x200004d8

08000d2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	200004d8 	.word	0x200004d8

08000d44 <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	f003 0307 	and.w	r3, r3, #7
 8000d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d54:	4b0c      	ldr	r3, [pc, #48]	; (8000d88 <NVIC_SetPriorityGrouping+0x44>)
 8000d56:	68db      	ldr	r3, [r3, #12]
 8000d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d5a:	68ba      	ldr	r2, [r7, #8]
 8000d5c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d60:	4013      	ands	r3, r2
 8000d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d68:	68bb      	ldr	r3, [r7, #8]
 8000d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d6c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d70:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d76:	4a04      	ldr	r2, [pc, #16]	; (8000d88 <NVIC_SetPriorityGrouping+0x44>)
 8000d78:	68bb      	ldr	r3, [r7, #8]
 8000d7a:	60d3      	str	r3, [r2, #12]
}
 8000d7c:	bf00      	nop
 8000d7e:	3714      	adds	r7, #20
 8000d80:	46bd      	mov	sp, r7
 8000d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d86:	4770      	bx	lr
 8000d88:	e000ed00 	.word	0xe000ed00

08000d8c <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d90:	4b04      	ldr	r3, [pc, #16]	; (8000da4 <NVIC_GetPriorityGrouping+0x18>)
 8000d92:	68db      	ldr	r3, [r3, #12]
 8000d94:	0a1b      	lsrs	r3, r3, #8
 8000d96:	f003 0307 	and.w	r3, r3, #7
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b083      	sub	sp, #12
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	4603      	mov	r3, r0
 8000db0:	6039      	str	r1, [r7, #0]
 8000db2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8000db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	da0b      	bge.n	8000dd4 <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dbc:	683b      	ldr	r3, [r7, #0]
 8000dbe:	b2da      	uxtb	r2, r3
 8000dc0:	490c      	ldr	r1, [pc, #48]	; (8000df4 <NVIC_SetPriority+0x4c>)
 8000dc2:	79fb      	ldrb	r3, [r7, #7]
 8000dc4:	f003 030f 	and.w	r3, r3, #15
 8000dc8:	3b04      	subs	r3, #4
 8000dca:	0112      	lsls	r2, r2, #4
 8000dcc:	b2d2      	uxtb	r2, r2
 8000dce:	440b      	add	r3, r1
 8000dd0:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dd2:	e009      	b.n	8000de8 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dd4:	683b      	ldr	r3, [r7, #0]
 8000dd6:	b2da      	uxtb	r2, r3
 8000dd8:	4907      	ldr	r1, [pc, #28]	; (8000df8 <NVIC_SetPriority+0x50>)
 8000dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dde:	0112      	lsls	r2, r2, #4
 8000de0:	b2d2      	uxtb	r2, r2
 8000de2:	440b      	add	r3, r1
 8000de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000de8:	bf00      	nop
 8000dea:	370c      	adds	r7, #12
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr
 8000df4:	e000ed00 	.word	0xe000ed00
 8000df8:	e000e100 	.word	0xe000e100

08000dfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dfc:	b480      	push	{r7}
 8000dfe:	b089      	sub	sp, #36	; 0x24
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	60f8      	str	r0, [r7, #12]
 8000e04:	60b9      	str	r1, [r7, #8]
 8000e06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e08:	68fb      	ldr	r3, [r7, #12]
 8000e0a:	f003 0307 	and.w	r3, r3, #7
 8000e0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e10:	69fb      	ldr	r3, [r7, #28]
 8000e12:	f1c3 0307 	rsb	r3, r3, #7
 8000e16:	2b04      	cmp	r3, #4
 8000e18:	bf28      	it	cs
 8000e1a:	2304      	movcs	r3, #4
 8000e1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e1e:	69fb      	ldr	r3, [r7, #28]
 8000e20:	3304      	adds	r3, #4
 8000e22:	2b06      	cmp	r3, #6
 8000e24:	d902      	bls.n	8000e2c <NVIC_EncodePriority+0x30>
 8000e26:	69fb      	ldr	r3, [r7, #28]
 8000e28:	3b03      	subs	r3, #3
 8000e2a:	e000      	b.n	8000e2e <NVIC_EncodePriority+0x32>
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	f04f 32ff 	mov.w	r2, #4294967295
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43da      	mvns	r2, r3
 8000e3c:	68bb      	ldr	r3, [r7, #8]
 8000e3e:	401a      	ands	r2, r3
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e44:	f04f 31ff 	mov.w	r1, #4294967295
 8000e48:	697b      	ldr	r3, [r7, #20]
 8000e4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000e4e:	43d9      	mvns	r1, r3
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e54:	4313      	orrs	r3, r2
         );
}
 8000e56:	4618      	mov	r0, r3
 8000e58:	3724      	adds	r7, #36	; 0x24
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr
	...

08000e64 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b082      	sub	sp, #8
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	3b01      	subs	r3, #1
 8000e70:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e74:	d301      	bcc.n	8000e7a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e76:	2301      	movs	r3, #1
 8000e78:	e00f      	b.n	8000e9a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e7a:	4a0a      	ldr	r2, [pc, #40]	; (8000ea4 <SysTick_Config+0x40>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	3b01      	subs	r3, #1
 8000e80:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e82:	210f      	movs	r1, #15
 8000e84:	f04f 30ff 	mov.w	r0, #4294967295
 8000e88:	f7ff ff8e 	bl	8000da8 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e8c:	4b05      	ldr	r3, [pc, #20]	; (8000ea4 <SysTick_Config+0x40>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e92:	4b04      	ldr	r3, [pc, #16]	; (8000ea4 <SysTick_Config+0x40>)
 8000e94:	2207      	movs	r2, #7
 8000e96:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e98:	2300      	movs	r3, #0
}
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	e000e010 	.word	0xe000e010

08000ea8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b082      	sub	sp, #8
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000eb0:	6878      	ldr	r0, [r7, #4]
 8000eb2:	f7ff ff47 	bl	8000d44 <NVIC_SetPriorityGrouping>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b086      	sub	sp, #24
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	60b9      	str	r1, [r7, #8]
 8000ec8:	607a      	str	r2, [r7, #4]
 8000eca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ed0:	f7ff ff5c 	bl	8000d8c <NVIC_GetPriorityGrouping>
 8000ed4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ed6:	687a      	ldr	r2, [r7, #4]
 8000ed8:	68b9      	ldr	r1, [r7, #8]
 8000eda:	6978      	ldr	r0, [r7, #20]
 8000edc:	f7ff ff8e 	bl	8000dfc <NVIC_EncodePriority>
 8000ee0:	4602      	mov	r2, r0
 8000ee2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ee6:	4611      	mov	r1, r2
 8000ee8:	4618      	mov	r0, r3
 8000eea:	f7ff ff5d 	bl	8000da8 <NVIC_SetPriority>
}
 8000eee:	bf00      	nop
 8000ef0:	3718      	adds	r7, #24
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b082      	sub	sp, #8
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000efe:	6878      	ldr	r0, [r7, #4]
 8000f00:	f7ff ffb0 	bl	8000e64 <SysTick_Config>
 8000f04:	4603      	mov	r3, r0
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3708      	adds	r7, #8
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
	...

08000f10 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b087      	sub	sp, #28
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
 8000f18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8000f22:	2300      	movs	r3, #0
 8000f24:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000f26:	e14e      	b.n	80011c6 <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	697b      	ldr	r3, [r7, #20]
 8000f30:	fa01 f303 	lsl.w	r3, r1, r3
 8000f34:	4013      	ands	r3, r2
 8000f36:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	2b00      	cmp	r3, #0
 8000f3c:	f000 8140 	beq.w	80011c0 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000f40:	683b      	ldr	r3, [r7, #0]
 8000f42:	685b      	ldr	r3, [r3, #4]
 8000f44:	2b02      	cmp	r3, #2
 8000f46:	d003      	beq.n	8000f50 <HAL_GPIO_Init+0x40>
 8000f48:	683b      	ldr	r3, [r7, #0]
 8000f4a:	685b      	ldr	r3, [r3, #4]
 8000f4c:	2b12      	cmp	r3, #18
 8000f4e:	d123      	bne.n	8000f98 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8000f50:	697b      	ldr	r3, [r7, #20]
 8000f52:	08da      	lsrs	r2, r3, #3
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	3208      	adds	r2, #8
 8000f58:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f5c:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000f5e:	697b      	ldr	r3, [r7, #20]
 8000f60:	f003 0307 	and.w	r3, r3, #7
 8000f64:	009b      	lsls	r3, r3, #2
 8000f66:	220f      	movs	r2, #15
 8000f68:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6c:	43db      	mvns	r3, r3
 8000f6e:	693a      	ldr	r2, [r7, #16]
 8000f70:	4013      	ands	r3, r2
 8000f72:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000f74:	683b      	ldr	r3, [r7, #0]
 8000f76:	691a      	ldr	r2, [r3, #16]
 8000f78:	697b      	ldr	r3, [r7, #20]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	fa02 f303 	lsl.w	r3, r2, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	08da      	lsrs	r2, r3, #3
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	3208      	adds	r2, #8
 8000f92:	6939      	ldr	r1, [r7, #16]
 8000f94:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	005b      	lsls	r3, r3, #1
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	693a      	ldr	r2, [r7, #16]
 8000fac:	4013      	ands	r3, r2
 8000fae:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685b      	ldr	r3, [r3, #4]
 8000fb4:	f003 0203 	and.w	r2, r3, #3
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	005b      	lsls	r3, r3, #1
 8000fbc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4313      	orrs	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	693a      	ldr	r2, [r7, #16]
 8000fca:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fcc:	683b      	ldr	r3, [r7, #0]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b01      	cmp	r3, #1
 8000fd2:	d00b      	beq.n	8000fec <HAL_GPIO_Init+0xdc>
 8000fd4:	683b      	ldr	r3, [r7, #0]
 8000fd6:	685b      	ldr	r3, [r3, #4]
 8000fd8:	2b02      	cmp	r3, #2
 8000fda:	d007      	beq.n	8000fec <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000fe0:	2b11      	cmp	r3, #17
 8000fe2:	d003      	beq.n	8000fec <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	2b12      	cmp	r3, #18
 8000fea:	d130      	bne.n	800104e <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	689b      	ldr	r3, [r3, #8]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	2203      	movs	r2, #3
 8000ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffc:	43db      	mvns	r3, r3
 8000ffe:	693a      	ldr	r2, [r7, #16]
 8001000:	4013      	ands	r3, r2
 8001002:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001004:	683b      	ldr	r3, [r7, #0]
 8001006:	68da      	ldr	r2, [r3, #12]
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	fa02 f303 	lsl.w	r3, r2, r3
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	4313      	orrs	r3, r2
 8001014:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001022:	2201      	movs	r2, #1
 8001024:	697b      	ldr	r3, [r7, #20]
 8001026:	fa02 f303 	lsl.w	r3, r2, r3
 800102a:	43db      	mvns	r3, r3
 800102c:	693a      	ldr	r2, [r7, #16]
 800102e:	4013      	ands	r3, r2
 8001030:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001032:	683b      	ldr	r3, [r7, #0]
 8001034:	685b      	ldr	r3, [r3, #4]
 8001036:	091b      	lsrs	r3, r3, #4
 8001038:	f003 0201 	and.w	r2, r3, #1
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	fa02 f303 	lsl.w	r3, r2, r3
 8001042:	693a      	ldr	r2, [r7, #16]
 8001044:	4313      	orrs	r3, r2
 8001046:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	693a      	ldr	r2, [r7, #16]
 800104c:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	68db      	ldr	r3, [r3, #12]
 8001052:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001054:	697b      	ldr	r3, [r7, #20]
 8001056:	005b      	lsls	r3, r3, #1
 8001058:	2203      	movs	r2, #3
 800105a:	fa02 f303 	lsl.w	r3, r2, r3
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	689a      	ldr	r2, [r3, #8]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	005b      	lsls	r3, r3, #1
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	4313      	orrs	r3, r2
 8001076:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
 8001082:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001086:	2b00      	cmp	r3, #0
 8001088:	f000 809a 	beq.w	80011c0 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800108c:	4b55      	ldr	r3, [pc, #340]	; (80011e4 <HAL_GPIO_Init+0x2d4>)
 800108e:	699b      	ldr	r3, [r3, #24]
 8001090:	4a54      	ldr	r2, [pc, #336]	; (80011e4 <HAL_GPIO_Init+0x2d4>)
 8001092:	f043 0301 	orr.w	r3, r3, #1
 8001096:	6193      	str	r3, [r2, #24]
 8001098:	4b52      	ldr	r3, [pc, #328]	; (80011e4 <HAL_GPIO_Init+0x2d4>)
 800109a:	699b      	ldr	r3, [r3, #24]
 800109c:	f003 0301 	and.w	r3, r3, #1
 80010a0:	60bb      	str	r3, [r7, #8]
 80010a2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 80010a4:	4a50      	ldr	r2, [pc, #320]	; (80011e8 <HAL_GPIO_Init+0x2d8>)
 80010a6:	697b      	ldr	r3, [r7, #20]
 80010a8:	089b      	lsrs	r3, r3, #2
 80010aa:	3302      	adds	r3, #2
 80010ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010b0:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 80010b2:	697b      	ldr	r3, [r7, #20]
 80010b4:	f003 0303 	and.w	r3, r3, #3
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	220f      	movs	r2, #15
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	43db      	mvns	r3, r3
 80010c2:	693a      	ldr	r2, [r7, #16]
 80010c4:	4013      	ands	r3, r2
 80010c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010ce:	d013      	beq.n	80010f8 <HAL_GPIO_Init+0x1e8>
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4a46      	ldr	r2, [pc, #280]	; (80011ec <HAL_GPIO_Init+0x2dc>)
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d00d      	beq.n	80010f4 <HAL_GPIO_Init+0x1e4>
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	4a45      	ldr	r2, [pc, #276]	; (80011f0 <HAL_GPIO_Init+0x2e0>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	d007      	beq.n	80010f0 <HAL_GPIO_Init+0x1e0>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a44      	ldr	r2, [pc, #272]	; (80011f4 <HAL_GPIO_Init+0x2e4>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d101      	bne.n	80010ec <HAL_GPIO_Init+0x1dc>
 80010e8:	2303      	movs	r3, #3
 80010ea:	e006      	b.n	80010fa <HAL_GPIO_Init+0x1ea>
 80010ec:	2305      	movs	r3, #5
 80010ee:	e004      	b.n	80010fa <HAL_GPIO_Init+0x1ea>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e002      	b.n	80010fa <HAL_GPIO_Init+0x1ea>
 80010f4:	2301      	movs	r3, #1
 80010f6:	e000      	b.n	80010fa <HAL_GPIO_Init+0x1ea>
 80010f8:	2300      	movs	r3, #0
 80010fa:	697a      	ldr	r2, [r7, #20]
 80010fc:	f002 0203 	and.w	r2, r2, #3
 8001100:	0092      	lsls	r2, r2, #2
 8001102:	4093      	lsls	r3, r2
 8001104:	693a      	ldr	r2, [r7, #16]
 8001106:	4313      	orrs	r3, r2
 8001108:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800110a:	4937      	ldr	r1, [pc, #220]	; (80011e8 <HAL_GPIO_Init+0x2d8>)
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	089b      	lsrs	r3, r3, #2
 8001110:	3302      	adds	r3, #2
 8001112:	693a      	ldr	r2, [r7, #16]
 8001114:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001118:	4b37      	ldr	r3, [pc, #220]	; (80011f8 <HAL_GPIO_Init+0x2e8>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	43db      	mvns	r3, r3
 8001122:	693a      	ldr	r2, [r7, #16]
 8001124:	4013      	ands	r3, r2
 8001126:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001130:	2b00      	cmp	r3, #0
 8001132:	d003      	beq.n	800113c <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 8001134:	693a      	ldr	r2, [r7, #16]
 8001136:	68fb      	ldr	r3, [r7, #12]
 8001138:	4313      	orrs	r3, r2
 800113a:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800113c:	4a2e      	ldr	r2, [pc, #184]	; (80011f8 <HAL_GPIO_Init+0x2e8>)
 800113e:	693b      	ldr	r3, [r7, #16]
 8001140:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001142:	4b2d      	ldr	r3, [pc, #180]	; (80011f8 <HAL_GPIO_Init+0x2e8>)
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001148:	68fb      	ldr	r3, [r7, #12]
 800114a:	43db      	mvns	r3, r3
 800114c:	693a      	ldr	r2, [r7, #16]
 800114e:	4013      	ands	r3, r2
 8001150:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	685b      	ldr	r3, [r3, #4]
 8001156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800115a:	2b00      	cmp	r3, #0
 800115c:	d003      	beq.n	8001166 <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 800115e:	693a      	ldr	r2, [r7, #16]
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	4313      	orrs	r3, r2
 8001164:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8001166:	4a24      	ldr	r2, [pc, #144]	; (80011f8 <HAL_GPIO_Init+0x2e8>)
 8001168:	693b      	ldr	r3, [r7, #16]
 800116a:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800116c:	4b22      	ldr	r3, [pc, #136]	; (80011f8 <HAL_GPIO_Init+0x2e8>)
 800116e:	689b      	ldr	r3, [r3, #8]
 8001170:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	43db      	mvns	r3, r3
 8001176:	693a      	ldr	r2, [r7, #16]
 8001178:	4013      	ands	r3, r2
 800117a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001184:	2b00      	cmp	r3, #0
 8001186:	d003      	beq.n	8001190 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8001188:	693a      	ldr	r2, [r7, #16]
 800118a:	68fb      	ldr	r3, [r7, #12]
 800118c:	4313      	orrs	r3, r2
 800118e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8001190:	4a19      	ldr	r2, [pc, #100]	; (80011f8 <HAL_GPIO_Init+0x2e8>)
 8001192:	693b      	ldr	r3, [r7, #16]
 8001194:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001196:	4b18      	ldr	r3, [pc, #96]	; (80011f8 <HAL_GPIO_Init+0x2e8>)
 8001198:	68db      	ldr	r3, [r3, #12]
 800119a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	43db      	mvns	r3, r3
 80011a0:	693a      	ldr	r2, [r7, #16]
 80011a2:	4013      	ands	r3, r2
 80011a4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d003      	beq.n	80011ba <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 80011b2:	693a      	ldr	r2, [r7, #16]
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80011ba:	4a0f      	ldr	r2, [pc, #60]	; (80011f8 <HAL_GPIO_Init+0x2e8>)
 80011bc:	693b      	ldr	r3, [r7, #16]
 80011be:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	3301      	adds	r3, #1
 80011c4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	681a      	ldr	r2, [r3, #0]
 80011ca:	697b      	ldr	r3, [r7, #20]
 80011cc:	fa22 f303 	lsr.w	r3, r2, r3
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	f47f aea9 	bne.w	8000f28 <HAL_GPIO_Init+0x18>
  }
}
 80011d6:	bf00      	nop
 80011d8:	371c      	adds	r7, #28
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40021000 	.word	0x40021000
 80011e8:	40010000 	.word	0x40010000
 80011ec:	48000400 	.word	0x48000400
 80011f0:	48000800 	.word	0x48000800
 80011f4:	48000c00 	.word	0x48000c00
 80011f8:	40010400 	.word	0x40010400

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001218:	e002      	b.n	8001220 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b082      	sub	sp, #8
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	2b00      	cmp	r3, #0
 8001238:	d101      	bne.n	800123e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800123a:	2301      	movs	r3, #1
 800123c:	e081      	b.n	8001342 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001244:	b2db      	uxtb	r3, r3
 8001246:	2b00      	cmp	r3, #0
 8001248:	d106      	bne.n	8001258 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2200      	movs	r2, #0
 800124e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f002 fdba 	bl	8003dcc <HAL_I2C_MspInit>
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	2224      	movs	r2, #36	; 0x24
 800125c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	681a      	ldr	r2, [r3, #0]
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	f022 0201 	bic.w	r2, r2, #1
 800126e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	685a      	ldr	r2, [r3, #4]
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800127c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	689a      	ldr	r2, [r3, #8]
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800128c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	68db      	ldr	r3, [r3, #12]
 8001292:	2b01      	cmp	r3, #1
 8001294:	d107      	bne.n	80012a6 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	689a      	ldr	r2, [r3, #8]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80012a2:	609a      	str	r2, [r3, #8]
 80012a4:	e006      	b.n	80012b4 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80012b2:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	68db      	ldr	r3, [r3, #12]
 80012b8:	2b02      	cmp	r3, #2
 80012ba:	d104      	bne.n	80012c6 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012c4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	687a      	ldr	r2, [r7, #4]
 80012ce:	6812      	ldr	r2, [r2, #0]
 80012d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80012d4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80012d8:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	68da      	ldr	r2, [r3, #12]
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80012e8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	691a      	ldr	r2, [r3, #16]
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	695b      	ldr	r3, [r3, #20]
 80012f2:	ea42 0103 	orr.w	r1, r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	699b      	ldr	r3, [r3, #24]
 80012fa:	021a      	lsls	r2, r3, #8
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	430a      	orrs	r2, r1
 8001302:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	69d9      	ldr	r1, [r3, #28]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	6a1a      	ldr	r2, [r3, #32]
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	430a      	orrs	r2, r1
 8001312:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	681a      	ldr	r2, [r3, #0]
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	681b      	ldr	r3, [r3, #0]
 800131e:	f042 0201 	orr.w	r2, r2, #1
 8001322:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	2200      	movs	r2, #0
 8001328:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	2220      	movs	r2, #32
 800132e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	2200      	movs	r2, #0
 8001336:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	2200      	movs	r2, #0
 800133c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
	...

0800134c <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b088      	sub	sp, #32
 8001350:	af02      	add	r7, sp, #8
 8001352:	60f8      	str	r0, [r7, #12]
 8001354:	607a      	str	r2, [r7, #4]
 8001356:	461a      	mov	r2, r3
 8001358:	460b      	mov	r3, r1
 800135a:	817b      	strh	r3, [r7, #10]
 800135c:	4613      	mov	r3, r2
 800135e:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart = 0U;
 8001360:	2300      	movs	r3, #0
 8001362:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b20      	cmp	r3, #32
 800136e:	f040 80e4 	bne.w	800153a <HAL_I2C_Master_Transmit+0x1ee>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001372:	68fb      	ldr	r3, [r7, #12]
 8001374:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <HAL_I2C_Master_Transmit+0x34>
 800137c:	2302      	movs	r3, #2
 800137e:	e0dd      	b.n	800153c <HAL_I2C_Master_Transmit+0x1f0>
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2201      	movs	r2, #1
 8001384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001388:	f7ff fcd0 	bl	8000d2c <HAL_GetTick>
 800138c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800138e:	697b      	ldr	r3, [r7, #20]
 8001390:	9300      	str	r3, [sp, #0]
 8001392:	2319      	movs	r3, #25
 8001394:	2201      	movs	r2, #1
 8001396:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800139a:	68f8      	ldr	r0, [r7, #12]
 800139c:	f000 f9d8 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <HAL_I2C_Master_Transmit+0x5e>
    {
      return HAL_TIMEOUT;
 80013a6:	2303      	movs	r3, #3
 80013a8:	e0c8      	b.n	800153c <HAL_I2C_Master_Transmit+0x1f0>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80013aa:	68fb      	ldr	r3, [r7, #12]
 80013ac:	2221      	movs	r2, #33	; 0x21
 80013ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80013b2:	68fb      	ldr	r3, [r7, #12]
 80013b4:	2210      	movs	r2, #16
 80013b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	2200      	movs	r2, #0
 80013be:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	893a      	ldrh	r2, [r7, #8]
 80013ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80013cc:	68fb      	ldr	r3, [r7, #12]
 80013ce:	2200      	movs	r2, #0
 80013d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013d6:	b29b      	uxth	r3, r3
 80013d8:	2bff      	cmp	r3, #255	; 0xff
 80013da:	d90e      	bls.n	80013fa <HAL_I2C_Master_Transmit+0xae>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	22ff      	movs	r2, #255	; 0xff
 80013e0:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80013e6:	b2da      	uxtb	r2, r3
 80013e8:	8979      	ldrh	r1, [r7, #10]
 80013ea:	4b56      	ldr	r3, [pc, #344]	; (8001544 <HAL_I2C_Master_Transmit+0x1f8>)
 80013ec:	9300      	str	r3, [sp, #0]
 80013ee:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80013f2:	68f8      	ldr	r0, [r7, #12]
 80013f4:	f000 fac0 	bl	8001978 <I2C_TransferConfig>
 80013f8:	e070      	b.n	80014dc <HAL_I2C_Master_Transmit+0x190>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80013fe:	b29a      	uxth	r2, r3
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001404:	68fb      	ldr	r3, [r7, #12]
 8001406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001408:	b2da      	uxtb	r2, r3
 800140a:	8979      	ldrh	r1, [r7, #10]
 800140c:	4b4d      	ldr	r3, [pc, #308]	; (8001544 <HAL_I2C_Master_Transmit+0x1f8>)
 800140e:	9300      	str	r3, [sp, #0]
 8001410:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001414:	68f8      	ldr	r0, [r7, #12]
 8001416:	f000 faaf 	bl	8001978 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 800141a:	e05f      	b.n	80014dc <HAL_I2C_Master_Transmit+0x190>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800141c:	697a      	ldr	r2, [r7, #20]
 800141e:	6a39      	ldr	r1, [r7, #32]
 8001420:	68f8      	ldr	r0, [r7, #12]
 8001422:	f000 f9cf 	bl	80017c4 <I2C_WaitOnTXISFlagUntilTimeout>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d007      	beq.n	800143c <HAL_I2C_Master_Transmit+0xf0>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001430:	2b04      	cmp	r3, #4
 8001432:	d101      	bne.n	8001438 <HAL_I2C_Master_Transmit+0xec>
        {
          return HAL_ERROR;
 8001434:	2301      	movs	r3, #1
 8001436:	e081      	b.n	800153c <HAL_I2C_Master_Transmit+0x1f0>
        }
        else
        {
          return HAL_TIMEOUT;
 8001438:	2303      	movs	r3, #3
 800143a:	e07f      	b.n	800153c <HAL_I2C_Master_Transmit+0x1f0>
        }
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = (*hi2c->pBuffPtr++);
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001440:	1c59      	adds	r1, r3, #1
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	6251      	str	r1, [r2, #36]	; 0x24
 8001446:	781a      	ldrb	r2, [r3, #0]
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	681b      	ldr	r3, [r3, #0]
 800144c:	629a      	str	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001452:	b29b      	uxth	r3, r3
 8001454:	3b01      	subs	r3, #1
 8001456:	b29a      	uxth	r2, r3
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800145c:	68fb      	ldr	r3, [r7, #12]
 800145e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001460:	3b01      	subs	r3, #1
 8001462:	b29a      	uxth	r2, r3
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferSize == 0U) && (hi2c->XferCount != 0U))
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800146c:	2b00      	cmp	r3, #0
 800146e:	d135      	bne.n	80014dc <HAL_I2C_Master_Transmit+0x190>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001474:	b29b      	uxth	r3, r3
 8001476:	2b00      	cmp	r3, #0
 8001478:	d030      	beq.n	80014dc <HAL_I2C_Master_Transmit+0x190>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	9300      	str	r3, [sp, #0]
 800147e:	6a3b      	ldr	r3, [r7, #32]
 8001480:	2200      	movs	r2, #0
 8001482:	2180      	movs	r1, #128	; 0x80
 8001484:	68f8      	ldr	r0, [r7, #12]
 8001486:	f000 f963 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 800148a:	4603      	mov	r3, r0
 800148c:	2b00      	cmp	r3, #0
 800148e:	d001      	beq.n	8001494 <HAL_I2C_Master_Transmit+0x148>
        {
          return HAL_TIMEOUT;
 8001490:	2303      	movs	r3, #3
 8001492:	e053      	b.n	800153c <HAL_I2C_Master_Transmit+0x1f0>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001498:	b29b      	uxth	r3, r3
 800149a:	2bff      	cmp	r3, #255	; 0xff
 800149c:	d90e      	bls.n	80014bc <HAL_I2C_Master_Transmit+0x170>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	22ff      	movs	r2, #255	; 0xff
 80014a2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80014a4:	68fb      	ldr	r3, [r7, #12]
 80014a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014a8:	b2da      	uxtb	r2, r3
 80014aa:	8979      	ldrh	r1, [r7, #10]
 80014ac:	2300      	movs	r3, #0
 80014ae:	9300      	str	r3, [sp, #0]
 80014b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80014b4:	68f8      	ldr	r0, [r7, #12]
 80014b6:	f000 fa5f 	bl	8001978 <I2C_TransferConfig>
 80014ba:	e00f      	b.n	80014dc <HAL_I2C_Master_Transmit+0x190>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80014bc:	68fb      	ldr	r3, [r7, #12]
 80014be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014c0:	b29a      	uxth	r2, r3
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80014ca:	b2da      	uxtb	r2, r3
 80014cc:	8979      	ldrh	r1, [r7, #10]
 80014ce:	2300      	movs	r3, #0
 80014d0:	9300      	str	r3, [sp, #0]
 80014d2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80014d6:	68f8      	ldr	r0, [r7, #12]
 80014d8:	f000 fa4e 	bl	8001978 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80014e0:	b29b      	uxth	r3, r3
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d19a      	bne.n	800141c <HAL_I2C_Master_Transmit+0xd0>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80014e6:	697a      	ldr	r2, [r7, #20]
 80014e8:	6a39      	ldr	r1, [r7, #32]
 80014ea:	68f8      	ldr	r0, [r7, #12]
 80014ec:	f000 f9aa 	bl	8001844 <I2C_WaitOnSTOPFlagUntilTimeout>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d007      	beq.n	8001506 <HAL_I2C_Master_Transmit+0x1ba>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fa:	2b04      	cmp	r3, #4
 80014fc:	d101      	bne.n	8001502 <HAL_I2C_Master_Transmit+0x1b6>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e01c      	b.n	800153c <HAL_I2C_Master_Transmit+0x1f0>
      }
      else
      {
        return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e01a      	b.n	800153c <HAL_I2C_Master_Transmit+0x1f0>
      }
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	2220      	movs	r2, #32
 800150c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800150e:	68fb      	ldr	r3, [r7, #12]
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	6859      	ldr	r1, [r3, #4]
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	4b0b      	ldr	r3, [pc, #44]	; (8001548 <HAL_I2C_Master_Transmit+0x1fc>)
 800151a:	400b      	ands	r3, r1
 800151c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	2220      	movs	r2, #32
 8001522:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001526:	68fb      	ldr	r3, [r7, #12]
 8001528:	2200      	movs	r2, #0
 800152a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	2200      	movs	r2, #0
 8001532:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001536:	2300      	movs	r3, #0
 8001538:	e000      	b.n	800153c <HAL_I2C_Master_Transmit+0x1f0>
  }
  else
  {
    return HAL_BUSY;
 800153a:	2302      	movs	r3, #2
  }
}
 800153c:	4618      	mov	r0, r3
 800153e:	3718      	adds	r7, #24
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	80002000 	.word	0x80002000
 8001548:	fe00e800 	.word	0xfe00e800

0800154c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b088      	sub	sp, #32
 8001550:	af02      	add	r7, sp, #8
 8001552:	60f8      	str	r0, [r7, #12]
 8001554:	607a      	str	r2, [r7, #4]
 8001556:	603b      	str	r3, [r7, #0]
 8001558:	460b      	mov	r3, r1
 800155a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = 0U;
 800155c:	2300      	movs	r3, #0
 800155e:	617b      	str	r3, [r7, #20]

  __IO uint32_t I2C_Trials = 0U;
 8001560:	2300      	movs	r3, #0
 8001562:	613b      	str	r3, [r7, #16]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001564:	68fb      	ldr	r3, [r7, #12]
 8001566:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800156a:	b2db      	uxtb	r3, r3
 800156c:	2b20      	cmp	r3, #32
 800156e:	f040 80c6 	bne.w	80016fe <HAL_I2C_IsDeviceReady+0x1b2>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	699b      	ldr	r3, [r3, #24]
 8001578:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800157c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001580:	d101      	bne.n	8001586 <HAL_I2C_IsDeviceReady+0x3a>
    {
      return HAL_BUSY;
 8001582:	2302      	movs	r3, #2
 8001584:	e0bc      	b.n	8001700 <HAL_I2C_IsDeviceReady+0x1b4>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800158c:	2b01      	cmp	r3, #1
 800158e:	d101      	bne.n	8001594 <HAL_I2C_IsDeviceReady+0x48>
 8001590:	2302      	movs	r3, #2
 8001592:	e0b5      	b.n	8001700 <HAL_I2C_IsDeviceReady+0x1b4>
 8001594:	68fb      	ldr	r3, [r7, #12]
 8001596:	2201      	movs	r2, #1
 8001598:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2224      	movs	r2, #36	; 0x24
 80015a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2200      	movs	r2, #0
 80015a8:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	68db      	ldr	r3, [r3, #12]
 80015ae:	2b01      	cmp	r3, #1
 80015b0:	d107      	bne.n	80015c2 <HAL_I2C_IsDeviceReady+0x76>
 80015b2:	897b      	ldrh	r3, [r7, #10]
 80015b4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015b8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80015bc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80015c0:	e004      	b.n	80015cc <HAL_I2C_IsDeviceReady+0x80>
 80015c2:	897b      	ldrh	r3, [r7, #10]
 80015c4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015c8:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80015cc:	68fa      	ldr	r2, [r7, #12]
 80015ce:	6812      	ldr	r2, [r2, #0]
 80015d0:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80015d2:	f7ff fbab 	bl	8000d2c <HAL_GetTick>
 80015d6:	6178      	str	r0, [r7, #20]
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 80015d8:	e018      	b.n	800160c <HAL_I2C_IsDeviceReady+0xc0>
      {
        if (Timeout != HAL_MAX_DELAY)
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e0:	d014      	beq.n	800160c <HAL_I2C_IsDeviceReady+0xc0>
        {
          if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d007      	beq.n	80015f8 <HAL_I2C_IsDeviceReady+0xac>
 80015e8:	f7ff fba0 	bl	8000d2c <HAL_GetTick>
 80015ec:	4602      	mov	r2, r0
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	1ad3      	subs	r3, r2, r3
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	429a      	cmp	r2, r3
 80015f6:	d209      	bcs.n	800160c <HAL_I2C_IsDeviceReady+0xc0>
          {
            /* Device is ready */
            hi2c->State = HAL_I2C_STATE_READY;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	2220      	movs	r2, #32
 80015fc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	2200      	movs	r2, #0
 8001604:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
            return HAL_TIMEOUT;
 8001608:	2303      	movs	r3, #3
 800160a:	e079      	b.n	8001700 <HAL_I2C_IsDeviceReady+0x1b4>
      while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET) && (hi2c->State != HAL_I2C_STATE_TIMEOUT))
 800160c:	68fb      	ldr	r3, [r7, #12]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	699b      	ldr	r3, [r3, #24]
 8001612:	f003 0320 	and.w	r3, r3, #32
 8001616:	2b20      	cmp	r3, #32
 8001618:	d00c      	beq.n	8001634 <HAL_I2C_IsDeviceReady+0xe8>
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	699b      	ldr	r3, [r3, #24]
 8001620:	f003 0310 	and.w	r3, r3, #16
 8001624:	2b10      	cmp	r3, #16
 8001626:	d005      	beq.n	8001634 <HAL_I2C_IsDeviceReady+0xe8>
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800162e:	b2db      	uxtb	r3, r3
 8001630:	2ba0      	cmp	r3, #160	; 0xa0
 8001632:	d1d2      	bne.n	80015da <HAL_I2C_IsDeviceReady+0x8e>
          }
        }
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	699b      	ldr	r3, [r3, #24]
 800163a:	f003 0310 	and.w	r3, r3, #16
 800163e:	2b10      	cmp	r3, #16
 8001640:	d01a      	beq.n	8001678 <HAL_I2C_IsDeviceReady+0x12c>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	2200      	movs	r2, #0
 800164a:	2120      	movs	r1, #32
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f000 f87f 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <HAL_I2C_IsDeviceReady+0x110>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e051      	b.n	8001700 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	2220      	movs	r2, #32
 8001662:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001664:	68fb      	ldr	r3, [r7, #12]
 8001666:	2220      	movs	r2, #32
 8001668:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	2200      	movs	r2, #0
 8001670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001674:	2300      	movs	r3, #0
 8001676:	e043      	b.n	8001700 <HAL_I2C_IsDeviceReady+0x1b4>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	9300      	str	r3, [sp, #0]
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	2200      	movs	r2, #0
 8001680:	2120      	movs	r1, #32
 8001682:	68f8      	ldr	r0, [r7, #12]
 8001684:	f000 f864 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <HAL_I2C_IsDeviceReady+0x146>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e036      	b.n	8001700 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	2210      	movs	r2, #16
 8001698:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	2220      	movs	r2, #32
 80016a0:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials++ == Trials)
 80016a2:	693b      	ldr	r3, [r7, #16]
 80016a4:	1c5a      	adds	r2, r3, #1
 80016a6:	613a      	str	r2, [r7, #16]
 80016a8:	687a      	ldr	r2, [r7, #4]
 80016aa:	429a      	cmp	r2, r3
 80016ac:	d118      	bne.n	80016e0 <HAL_I2C_IsDeviceReady+0x194>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	685a      	ldr	r2, [r3, #4]
 80016b4:	68fb      	ldr	r3, [r7, #12]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80016bc:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	9300      	str	r3, [sp, #0]
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	2200      	movs	r2, #0
 80016c6:	2120      	movs	r1, #32
 80016c8:	68f8      	ldr	r0, [r7, #12]
 80016ca:	f000 f841 	bl	8001750 <I2C_WaitOnFlagUntilTimeout>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <HAL_I2C_IsDeviceReady+0x18c>
        {
          return HAL_TIMEOUT;
 80016d4:	2303      	movs	r3, #3
 80016d6:	e013      	b.n	8001700 <HAL_I2C_IsDeviceReady+0x1b4>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	2220      	movs	r2, #32
 80016de:	61da      	str	r2, [r3, #28]
      }
    }
    while (I2C_Trials < Trials);
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	687a      	ldr	r2, [r7, #4]
 80016e4:	429a      	cmp	r2, r3
 80016e6:	f63f af60 	bhi.w	80015aa <HAL_I2C_IsDeviceReady+0x5e>

    hi2c->State = HAL_I2C_STATE_READY;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	2220      	movs	r2, #32
 80016ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2200      	movs	r2, #0
 80016f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_TIMEOUT;
 80016fa:	2303      	movs	r3, #3
 80016fc:	e000      	b.n	8001700 <HAL_I2C_IsDeviceReady+0x1b4>
  }
  else
  {
    return HAL_BUSY;
 80016fe:	2302      	movs	r3, #2
  }
}
 8001700:	4618      	mov	r0, r3
 8001702:	3718      	adds	r7, #24
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}

08001708 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	699b      	ldr	r3, [r3, #24]
 8001716:	f003 0302 	and.w	r3, r3, #2
 800171a:	2b02      	cmp	r3, #2
 800171c:	d103      	bne.n	8001726 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	2200      	movs	r2, #0
 8001724:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	699b      	ldr	r3, [r3, #24]
 800172c:	f003 0301 	and.w	r3, r3, #1
 8001730:	2b01      	cmp	r3, #1
 8001732:	d007      	beq.n	8001744 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	699a      	ldr	r2, [r3, #24]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f042 0201 	orr.w	r2, r2, #1
 8001742:	619a      	str	r2, [r3, #24]
  }
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b084      	sub	sp, #16
 8001754:	af00      	add	r7, sp, #0
 8001756:	60f8      	str	r0, [r7, #12]
 8001758:	60b9      	str	r1, [r7, #8]
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	4613      	mov	r3, r2
 800175e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001760:	e01c      	b.n	800179c <I2C_WaitOnFlagUntilTimeout+0x4c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001762:	683b      	ldr	r3, [r7, #0]
 8001764:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001768:	d018      	beq.n	800179c <I2C_WaitOnFlagUntilTimeout+0x4c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	2b00      	cmp	r3, #0
 800176e:	d007      	beq.n	8001780 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001770:	f7ff fadc 	bl	8000d2c <HAL_GetTick>
 8001774:	4602      	mov	r2, r0
 8001776:	69bb      	ldr	r3, [r7, #24]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	683a      	ldr	r2, [r7, #0]
 800177c:	429a      	cmp	r2, r3
 800177e:	d20d      	bcs.n	800179c <I2C_WaitOnFlagUntilTimeout+0x4c>
      {
        hi2c->State = HAL_I2C_STATE_READY;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	2220      	movs	r2, #32
 8001784:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001790:	68fb      	ldr	r3, [r7, #12]
 8001792:	2200      	movs	r2, #0
 8001794:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e00f      	b.n	80017bc <I2C_WaitOnFlagUntilTimeout+0x6c>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	699a      	ldr	r2, [r3, #24]
 80017a2:	68bb      	ldr	r3, [r7, #8]
 80017a4:	4013      	ands	r3, r2
 80017a6:	68ba      	ldr	r2, [r7, #8]
 80017a8:	429a      	cmp	r2, r3
 80017aa:	bf0c      	ite	eq
 80017ac:	2301      	moveq	r3, #1
 80017ae:	2300      	movne	r3, #0
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	461a      	mov	r2, r3
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	429a      	cmp	r2, r3
 80017b8:	d0d3      	beq.n	8001762 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80017ba:	2300      	movs	r3, #0
}
 80017bc:	4618      	mov	r0, r3
 80017be:	3710      	adds	r7, #16
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}

080017c4 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b084      	sub	sp, #16
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	60f8      	str	r0, [r7, #12]
 80017cc:	60b9      	str	r1, [r7, #8]
 80017ce:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80017d0:	e02c      	b.n	800182c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80017d2:	687a      	ldr	r2, [r7, #4]
 80017d4:	68b9      	ldr	r1, [r7, #8]
 80017d6:	68f8      	ldr	r0, [r7, #12]
 80017d8:	f000 f870 	bl	80018bc <I2C_IsAcknowledgeFailed>
 80017dc:	4603      	mov	r3, r0
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d001      	beq.n	80017e6 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e02a      	b.n	800183c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017ec:	d01e      	beq.n	800182c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d007      	beq.n	8001804 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80017f4:	f7ff fa9a 	bl	8000d2c <HAL_GetTick>
 80017f8:	4602      	mov	r2, r0
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	1ad3      	subs	r3, r2, r3
 80017fe:	68ba      	ldr	r2, [r7, #8]
 8001800:	429a      	cmp	r2, r3
 8001802:	d213      	bcs.n	800182c <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001808:	f043 0220 	orr.w	r2, r3, #32
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	2220      	movs	r2, #32
 8001814:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	2200      	movs	r2, #0
 800181c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	2200      	movs	r2, #0
 8001824:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e007      	b.n	800183c <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	699b      	ldr	r3, [r3, #24]
 8001832:	f003 0302 	and.w	r3, r3, #2
 8001836:	2b02      	cmp	r3, #2
 8001838:	d1cb      	bne.n	80017d2 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800183a:	2300      	movs	r3, #0
}
 800183c:	4618      	mov	r0, r3
 800183e:	3710      	adds	r7, #16
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001850:	e028      	b.n	80018a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001852:	687a      	ldr	r2, [r7, #4]
 8001854:	68b9      	ldr	r1, [r7, #8]
 8001856:	68f8      	ldr	r0, [r7, #12]
 8001858:	f000 f830 	bl	80018bc <I2C_IsAcknowledgeFailed>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001862:	2301      	movs	r3, #1
 8001864:	e026      	b.n	80018b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001866:	68bb      	ldr	r3, [r7, #8]
 8001868:	2b00      	cmp	r3, #0
 800186a:	d007      	beq.n	800187c <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800186c:	f7ff fa5e 	bl	8000d2c <HAL_GetTick>
 8001870:	4602      	mov	r2, r0
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	68ba      	ldr	r2, [r7, #8]
 8001878:	429a      	cmp	r2, r3
 800187a:	d213      	bcs.n	80018a4 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001880:	f043 0220 	orr.w	r2, r3, #32
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001888:	68fb      	ldr	r3, [r7, #12]
 800188a:	2220      	movs	r2, #32
 800188c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	2200      	movs	r2, #0
 8001894:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	2200      	movs	r2, #0
 800189c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_TIMEOUT;
 80018a0:	2303      	movs	r3, #3
 80018a2:	e007      	b.n	80018b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018a4:	68fb      	ldr	r3, [r7, #12]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	f003 0320 	and.w	r3, r3, #32
 80018ae:	2b20      	cmp	r3, #32
 80018b0:	d1cf      	bne.n	8001852 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3710      	adds	r7, #16
 80018b8:	46bd      	mov	sp, r7
 80018ba:	bd80      	pop	{r7, pc}

080018bc <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b084      	sub	sp, #16
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	60f8      	str	r0, [r7, #12]
 80018c4:	60b9      	str	r1, [r7, #8]
 80018c6:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	699b      	ldr	r3, [r3, #24]
 80018ce:	f003 0310 	and.w	r3, r3, #16
 80018d2:	2b10      	cmp	r3, #16
 80018d4:	d148      	bne.n	8001968 <I2C_IsAcknowledgeFailed+0xac>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80018d6:	e01c      	b.n	8001912 <I2C_IsAcknowledgeFailed+0x56>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018de:	d018      	beq.n	8001912 <I2C_IsAcknowledgeFailed+0x56>
      {
        if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80018e0:	68bb      	ldr	r3, [r7, #8]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d007      	beq.n	80018f6 <I2C_IsAcknowledgeFailed+0x3a>
 80018e6:	f7ff fa21 	bl	8000d2c <HAL_GetTick>
 80018ea:	4602      	mov	r2, r0
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	1ad3      	subs	r3, r2, r3
 80018f0:	68ba      	ldr	r2, [r7, #8]
 80018f2:	429a      	cmp	r2, r3
 80018f4:	d20d      	bcs.n	8001912 <I2C_IsAcknowledgeFailed+0x56>
        {
          hi2c->State = HAL_I2C_STATE_READY;
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	2220      	movs	r2, #32
 80018fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	2200      	movs	r2, #0
 8001902:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
          return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e02b      	b.n	800196a <I2C_IsAcknowledgeFailed+0xae>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	699b      	ldr	r3, [r3, #24]
 8001918:	f003 0320 	and.w	r3, r3, #32
 800191c:	2b20      	cmp	r3, #32
 800191e:	d1db      	bne.n	80018d8 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	2210      	movs	r2, #16
 8001926:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	2220      	movs	r2, #32
 800192e:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001930:	68f8      	ldr	r0, [r7, #12]
 8001932:	f7ff fee9 	bl	8001708 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	6859      	ldr	r1, [r3, #4]
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	4b0c      	ldr	r3, [pc, #48]	; (8001974 <I2C_IsAcknowledgeFailed+0xb8>)
 8001942:	400b      	ands	r3, r1
 8001944:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	2204      	movs	r2, #4
 800194a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	2220      	movs	r2, #32
 8001950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001954:	68fb      	ldr	r3, [r7, #12]
 8001956:	2200      	movs	r2, #0
 8001958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	2200      	movs	r2, #0
 8001960:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001964:	2301      	movs	r3, #1
 8001966:	e000      	b.n	800196a <I2C_IsAcknowledgeFailed+0xae>
  }
  return HAL_OK;
 8001968:	2300      	movs	r3, #0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3710      	adds	r7, #16
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	fe00e800 	.word	0xfe00e800

08001978 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c,  uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001978:	b480      	push	{r7}
 800197a:	b085      	sub	sp, #20
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	607b      	str	r3, [r7, #4]
 8001982:	460b      	mov	r3, r1
 8001984:	817b      	strh	r3, [r7, #10]
 8001986:	4613      	mov	r3, r2
 8001988:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 800198a:	68fb      	ldr	r3, [r7, #12]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	685a      	ldr	r2, [r3, #4]
 8001990:	69bb      	ldr	r3, [r7, #24]
 8001992:	0d5b      	lsrs	r3, r3, #21
 8001994:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001998:	4b0d      	ldr	r3, [pc, #52]	; (80019d0 <I2C_TransferConfig+0x58>)
 800199a:	430b      	orrs	r3, r1
 800199c:	43db      	mvns	r3, r3
 800199e:	ea02 0103 	and.w	r1, r2, r3
 80019a2:	897b      	ldrh	r3, [r7, #10]
 80019a4:	f3c3 0209 	ubfx	r2, r3, #0, #10
 80019a8:	7a7b      	ldrb	r3, [r7, #9]
 80019aa:	041b      	lsls	r3, r3, #16
 80019ac:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 80019b0:	431a      	orrs	r2, r3
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	431a      	orrs	r2, r3
 80019b6:	69bb      	ldr	r3, [r7, #24]
 80019b8:	431a      	orrs	r2, r3
 80019ba:	68fb      	ldr	r3, [r7, #12]
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	430a      	orrs	r2, r1
 80019c0:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 80019c2:	bf00      	nop
 80019c4:	3714      	adds	r7, #20
 80019c6:	46bd      	mov	sp, r7
 80019c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019cc:	4770      	bx	lr
 80019ce:	bf00      	nop
 80019d0:	03ff63ff 	.word	0x03ff63ff

080019d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b083      	sub	sp, #12
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019e4:	b2db      	uxtb	r3, r3
 80019e6:	2b20      	cmp	r3, #32
 80019e8:	d138      	bne.n	8001a5c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019f0:	2b01      	cmp	r3, #1
 80019f2:	d101      	bne.n	80019f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80019f4:	2302      	movs	r3, #2
 80019f6:	e032      	b.n	8001a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	2201      	movs	r2, #1
 80019fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2224      	movs	r2, #36	; 0x24
 8001a04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001a26:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6819      	ldr	r1, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	683a      	ldr	r2, [r7, #0]
 8001a34:	430a      	orrs	r2, r1
 8001a36:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	681a      	ldr	r2, [r3, #0]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f042 0201 	orr.w	r2, r2, #1
 8001a46:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	2220      	movs	r2, #32
 8001a4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	2200      	movs	r2, #0
 8001a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001a58:	2300      	movs	r3, #0
 8001a5a:	e000      	b.n	8001a5e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001a5c:	2302      	movs	r3, #2
  }
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr

08001a6a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001a6a:	b480      	push	{r7}
 8001a6c:	b085      	sub	sp, #20
 8001a6e:	af00      	add	r7, sp, #0
 8001a70:	6078      	str	r0, [r7, #4]
 8001a72:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8001a74:	2300      	movs	r3, #0
 8001a76:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	2b20      	cmp	r3, #32
 8001a82:	d139      	bne.n	8001af8 <HAL_I2CEx_ConfigDigitalFilter+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a8a:	2b01      	cmp	r3, #1
 8001a8c:	d101      	bne.n	8001a92 <HAL_I2CEx_ConfigDigitalFilter+0x28>
 8001a8e:	2302      	movs	r3, #2
 8001a90:	e033      	b.n	8001afa <HAL_I2CEx_ConfigDigitalFilter+0x90>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	2224      	movs	r2, #36	; 0x24
 8001a9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	681a      	ldr	r2, [r3, #0]
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f022 0201 	bic.w	r2, r2, #1
 8001ab0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001ac0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ac2:	683b      	ldr	r3, [r7, #0]
 8001ac4:	021b      	lsls	r3, r3, #8
 8001ac6:	68fa      	ldr	r2, [r7, #12]
 8001ac8:	4313      	orrs	r3, r2
 8001aca:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	68fa      	ldr	r2, [r7, #12]
 8001ad2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f042 0201 	orr.w	r2, r2, #1
 8001ae2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2220      	movs	r2, #32
 8001ae8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001af4:	2300      	movs	r3, #0
 8001af6:	e000      	b.n	8001afa <HAL_I2CEx_ConfigDigitalFilter+0x90>
  }
  else
  {
    return HAL_BUSY;
 8001af8:	2302      	movs	r3, #2
  }
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	3714      	adds	r7, #20
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
	...

08001b08 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 8001b0e:	af00      	add	r7, sp, #0
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001b14:	1d3b      	adds	r3, r7, #4
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d102      	bne.n	8001b22 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	f000 beda 	b.w	80028d6 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001b22:	1d3b      	adds	r3, r7, #4
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0301 	and.w	r3, r3, #1
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 816e 	beq.w	8001e0e <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8001b32:	4bb5      	ldr	r3, [pc, #724]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	f003 030c 	and.w	r3, r3, #12
 8001b3a:	2b04      	cmp	r3, #4
 8001b3c:	d00c      	beq.n	8001b58 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001b3e:	4bb2      	ldr	r3, [pc, #712]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001b40:	685b      	ldr	r3, [r3, #4]
 8001b42:	f003 030c 	and.w	r3, r3, #12
 8001b46:	2b08      	cmp	r3, #8
 8001b48:	d15a      	bne.n	8001c00 <HAL_RCC_OscConfig+0xf8>
 8001b4a:	4baf      	ldr	r3, [pc, #700]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001b4c:	685b      	ldr	r3, [r3, #4]
 8001b4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001b56:	d153      	bne.n	8001c00 <HAL_RCC_OscConfig+0xf8>
 8001b58:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b5c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b60:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8001b64:	fa93 f3a3 	rbit	r3, r3
 8001b68:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 8001b6c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b70:	fab3 f383 	clz	r3, r3
 8001b74:	b2db      	uxtb	r3, r3
 8001b76:	095b      	lsrs	r3, r3, #5
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	f043 0301 	orr.w	r3, r3, #1
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	2b01      	cmp	r3, #1
 8001b82:	d102      	bne.n	8001b8a <HAL_RCC_OscConfig+0x82>
 8001b84:	4ba0      	ldr	r3, [pc, #640]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	e015      	b.n	8001bb6 <HAL_RCC_OscConfig+0xae>
 8001b8a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001b8e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8001b96:	fa93 f3a3 	rbit	r3, r3
 8001b9a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8001b9e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ba2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8001ba6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8001baa:	fa93 f3a3 	rbit	r3, r3
 8001bae:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8001bb2:	4b95      	ldr	r3, [pc, #596]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001bba:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8001bbe:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8001bc2:	fa92 f2a2 	rbit	r2, r2
 8001bc6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 8001bca:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8001bce:	fab2 f282 	clz	r2, r2
 8001bd2:	b252      	sxtb	r2, r2
 8001bd4:	f042 0220 	orr.w	r2, r2, #32
 8001bd8:	b252      	sxtb	r2, r2
 8001bda:	b2d2      	uxtb	r2, r2
 8001bdc:	f002 021f 	and.w	r2, r2, #31
 8001be0:	2101      	movs	r1, #1
 8001be2:	fa01 f202 	lsl.w	r2, r1, r2
 8001be6:	4013      	ands	r3, r2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 810f 	beq.w	8001e0c <HAL_RCC_OscConfig+0x304>
 8001bee:	1d3b      	adds	r3, r7, #4
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f040 8109 	bne.w	8001e0c <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	f000 be6b 	b.w	80028d6 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c00:	1d3b      	adds	r3, r7, #4
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	685b      	ldr	r3, [r3, #4]
 8001c06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001c0a:	d106      	bne.n	8001c1a <HAL_RCC_OscConfig+0x112>
 8001c0c:	4b7e      	ldr	r3, [pc, #504]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a7d      	ldr	r2, [pc, #500]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c16:	6013      	str	r3, [r2, #0]
 8001c18:	e030      	b.n	8001c7c <HAL_RCC_OscConfig+0x174>
 8001c1a:	1d3b      	adds	r3, r7, #4
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	685b      	ldr	r3, [r3, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d10c      	bne.n	8001c3e <HAL_RCC_OscConfig+0x136>
 8001c24:	4b78      	ldr	r3, [pc, #480]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a77      	ldr	r2, [pc, #476]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c2a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c2e:	6013      	str	r3, [r2, #0]
 8001c30:	4b75      	ldr	r3, [pc, #468]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	4a74      	ldr	r2, [pc, #464]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c36:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c3a:	6013      	str	r3, [r2, #0]
 8001c3c:	e01e      	b.n	8001c7c <HAL_RCC_OscConfig+0x174>
 8001c3e:	1d3b      	adds	r3, r7, #4
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001c48:	d10c      	bne.n	8001c64 <HAL_RCC_OscConfig+0x15c>
 8001c4a:	4b6f      	ldr	r3, [pc, #444]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	4a6e      	ldr	r2, [pc, #440]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c50:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001c54:	6013      	str	r3, [r2, #0]
 8001c56:	4b6c      	ldr	r3, [pc, #432]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a6b      	ldr	r2, [pc, #428]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001c60:	6013      	str	r3, [r2, #0]
 8001c62:	e00b      	b.n	8001c7c <HAL_RCC_OscConfig+0x174>
 8001c64:	4b68      	ldr	r3, [pc, #416]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a67      	ldr	r2, [pc, #412]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c6a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001c6e:	6013      	str	r3, [r2, #0]
 8001c70:	4b65      	ldr	r3, [pc, #404]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a64      	ldr	r2, [pc, #400]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001c7a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001c7c:	4b62      	ldr	r3, [pc, #392]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c80:	f023 020f 	bic.w	r2, r3, #15
 8001c84:	1d3b      	adds	r3, r7, #4
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	495f      	ldr	r1, [pc, #380]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001c8c:	4313      	orrs	r3, r2
 8001c8e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d05a      	beq.n	8001d50 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c9a:	f7ff f847 	bl	8000d2c <HAL_GetTick>
 8001c9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ca2:	e00a      	b.n	8001cba <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ca4:	f7ff f842 	bl	8000d2c <HAL_GetTick>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001cae:	1ad3      	subs	r3, r2, r3
 8001cb0:	2b64      	cmp	r3, #100	; 0x64
 8001cb2:	d902      	bls.n	8001cba <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	f000 be0e 	b.w	80028d6 <HAL_RCC_OscConfig+0xdce>
 8001cba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cbe:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cc2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8001cc6:	fa93 f3a3 	rbit	r3, r3
 8001cca:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 8001cce:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001cd2:	fab3 f383 	clz	r3, r3
 8001cd6:	b2db      	uxtb	r3, r3
 8001cd8:	095b      	lsrs	r3, r3, #5
 8001cda:	b2db      	uxtb	r3, r3
 8001cdc:	f043 0301 	orr.w	r3, r3, #1
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	2b01      	cmp	r3, #1
 8001ce4:	d102      	bne.n	8001cec <HAL_RCC_OscConfig+0x1e4>
 8001ce6:	4b48      	ldr	r3, [pc, #288]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	e015      	b.n	8001d18 <HAL_RCC_OscConfig+0x210>
 8001cec:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001cf0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cf4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8001cf8:	fa93 f3a3 	rbit	r3, r3
 8001cfc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8001d00:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d04:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8001d08:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8001d0c:	fa93 f3a3 	rbit	r3, r3
 8001d10:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8001d14:	4b3c      	ldr	r3, [pc, #240]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d18:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001d1c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8001d20:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8001d24:	fa92 f2a2 	rbit	r2, r2
 8001d28:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 8001d2c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8001d30:	fab2 f282 	clz	r2, r2
 8001d34:	b252      	sxtb	r2, r2
 8001d36:	f042 0220 	orr.w	r2, r2, #32
 8001d3a:	b252      	sxtb	r2, r2
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	f002 021f 	and.w	r2, r2, #31
 8001d42:	2101      	movs	r1, #1
 8001d44:	fa01 f202 	lsl.w	r2, r1, r2
 8001d48:	4013      	ands	r3, r2
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d0aa      	beq.n	8001ca4 <HAL_RCC_OscConfig+0x19c>
 8001d4e:	e05e      	b.n	8001e0e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001d50:	f7fe ffec 	bl	8000d2c <HAL_GetTick>
 8001d54:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d58:	e00a      	b.n	8001d70 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001d5a:	f7fe ffe7 	bl	8000d2c <HAL_GetTick>
 8001d5e:	4602      	mov	r2, r0
 8001d60:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	2b64      	cmp	r3, #100	; 0x64
 8001d68:	d902      	bls.n	8001d70 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 8001d6a:	2303      	movs	r3, #3
 8001d6c:	f000 bdb3 	b.w	80028d6 <HAL_RCC_OscConfig+0xdce>
 8001d70:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001d74:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d78:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001d7c:	fa93 f3a3 	rbit	r3, r3
 8001d80:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8001d84:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001d88:	fab3 f383 	clz	r3, r3
 8001d8c:	b2db      	uxtb	r3, r3
 8001d8e:	095b      	lsrs	r3, r3, #5
 8001d90:	b2db      	uxtb	r3, r3
 8001d92:	f043 0301 	orr.w	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b01      	cmp	r3, #1
 8001d9a:	d102      	bne.n	8001da2 <HAL_RCC_OscConfig+0x29a>
 8001d9c:	4b1a      	ldr	r3, [pc, #104]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	e015      	b.n	8001dce <HAL_RCC_OscConfig+0x2c6>
 8001da2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001da6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001daa:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001dae:	fa93 f3a3 	rbit	r3, r3
 8001db2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8001db6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dba:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001dbe:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8001dc2:	fa93 f3a3 	rbit	r3, r3
 8001dc6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001dca:	4b0f      	ldr	r3, [pc, #60]	; (8001e08 <HAL_RCC_OscConfig+0x300>)
 8001dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dce:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001dd2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8001dd6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001dda:	fa92 f2a2 	rbit	r2, r2
 8001dde:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 8001de2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8001de6:	fab2 f282 	clz	r2, r2
 8001dea:	b252      	sxtb	r2, r2
 8001dec:	f042 0220 	orr.w	r2, r2, #32
 8001df0:	b252      	sxtb	r2, r2
 8001df2:	b2d2      	uxtb	r2, r2
 8001df4:	f002 021f 	and.w	r2, r2, #31
 8001df8:	2101      	movs	r1, #1
 8001dfa:	fa01 f202 	lsl.w	r2, r1, r2
 8001dfe:	4013      	ands	r3, r2
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1aa      	bne.n	8001d5a <HAL_RCC_OscConfig+0x252>
 8001e04:	e003      	b.n	8001e0e <HAL_RCC_OscConfig+0x306>
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e0c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e0e:	1d3b      	adds	r3, r7, #4
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0302 	and.w	r3, r3, #2
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	f000 8170 	beq.w	80020fe <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001e1e:	4bd0      	ldr	r3, [pc, #832]	; (8002160 <HAL_RCC_OscConfig+0x658>)
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f003 030c 	and.w	r3, r3, #12
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d00b      	beq.n	8001e42 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001e2a:	4bcd      	ldr	r3, [pc, #820]	; (8002160 <HAL_RCC_OscConfig+0x658>)
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f003 030c 	and.w	r3, r3, #12
 8001e32:	2b08      	cmp	r3, #8
 8001e34:	d16d      	bne.n	8001f12 <HAL_RCC_OscConfig+0x40a>
 8001e36:	4bca      	ldr	r3, [pc, #808]	; (8002160 <HAL_RCC_OscConfig+0x658>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d167      	bne.n	8001f12 <HAL_RCC_OscConfig+0x40a>
 8001e42:	2302      	movs	r3, #2
 8001e44:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e48:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001e4c:	fa93 f3a3 	rbit	r3, r3
 8001e50:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8001e54:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e58:	fab3 f383 	clz	r3, r3
 8001e5c:	b2db      	uxtb	r3, r3
 8001e5e:	095b      	lsrs	r3, r3, #5
 8001e60:	b2db      	uxtb	r3, r3
 8001e62:	f043 0301 	orr.w	r3, r3, #1
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	2b01      	cmp	r3, #1
 8001e6a:	d102      	bne.n	8001e72 <HAL_RCC_OscConfig+0x36a>
 8001e6c:	4bbc      	ldr	r3, [pc, #752]	; (8002160 <HAL_RCC_OscConfig+0x658>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	e013      	b.n	8001e9a <HAL_RCC_OscConfig+0x392>
 8001e72:	2302      	movs	r3, #2
 8001e74:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e78:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001e84:	2302      	movs	r3, #2
 8001e86:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001e8a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001e96:	4bb2      	ldr	r3, [pc, #712]	; (8002160 <HAL_RCC_OscConfig+0x658>)
 8001e98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e9a:	2202      	movs	r2, #2
 8001e9c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001ea0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001ea4:	fa92 f2a2 	rbit	r2, r2
 8001ea8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 8001eac:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001eb0:	fab2 f282 	clz	r2, r2
 8001eb4:	b252      	sxtb	r2, r2
 8001eb6:	f042 0220 	orr.w	r2, r2, #32
 8001eba:	b252      	sxtb	r2, r2
 8001ebc:	b2d2      	uxtb	r2, r2
 8001ebe:	f002 021f 	and.w	r2, r2, #31
 8001ec2:	2101      	movs	r1, #1
 8001ec4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ec8:	4013      	ands	r3, r2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d007      	beq.n	8001ede <HAL_RCC_OscConfig+0x3d6>
 8001ece:	1d3b      	adds	r3, r7, #4
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	691b      	ldr	r3, [r3, #16]
 8001ed4:	2b01      	cmp	r3, #1
 8001ed6:	d002      	beq.n	8001ede <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	f000 bcfc 	b.w	80028d6 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ede:	4ba0      	ldr	r3, [pc, #640]	; (8002160 <HAL_RCC_OscConfig+0x658>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ee6:	1d3b      	adds	r3, r7, #4
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	6959      	ldr	r1, [r3, #20]
 8001eec:	23f8      	movs	r3, #248	; 0xf8
 8001eee:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 8001efe:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	fa01 f303 	lsl.w	r3, r1, r3
 8001f0a:	4995      	ldr	r1, [pc, #596]	; (8002160 <HAL_RCC_OscConfig+0x658>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f10:	e0f5      	b.n	80020fe <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f12:	1d3b      	adds	r3, r7, #4
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	f000 8085 	beq.w	8002028 <HAL_RCC_OscConfig+0x520>
 8001f1e:	2301      	movs	r3, #1
 8001f20:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001f28:	fa93 f3a3 	rbit	r3, r3
 8001f2c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8001f30:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f34:	fab3 f383 	clz	r3, r3
 8001f38:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001f3c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001f40:	009b      	lsls	r3, r3, #2
 8001f42:	461a      	mov	r2, r3
 8001f44:	2301      	movs	r3, #1
 8001f46:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f48:	f7fe fef0 	bl	8000d2c <HAL_GetTick>
 8001f4c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f50:	e00a      	b.n	8001f68 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f52:	f7fe feeb 	bl	8000d2c <HAL_GetTick>
 8001f56:	4602      	mov	r2, r0
 8001f58:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d902      	bls.n	8001f68 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	f000 bcb7 	b.w	80028d6 <HAL_RCC_OscConfig+0xdce>
 8001f68:	2302      	movs	r3, #2
 8001f6a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f6e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 8001f7a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f7e:	fab3 f383 	clz	r3, r3
 8001f82:	b2db      	uxtb	r3, r3
 8001f84:	095b      	lsrs	r3, r3, #5
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	f043 0301 	orr.w	r3, r3, #1
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d102      	bne.n	8001f98 <HAL_RCC_OscConfig+0x490>
 8001f92:	4b73      	ldr	r3, [pc, #460]	; (8002160 <HAL_RCC_OscConfig+0x658>)
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	e013      	b.n	8001fc0 <HAL_RCC_OscConfig+0x4b8>
 8001f98:	2302      	movs	r3, #2
 8001f9a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001fa2:	fa93 f3a3 	rbit	r3, r3
 8001fa6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001faa:	2302      	movs	r3, #2
 8001fac:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8001fb0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001fb4:	fa93 f3a3 	rbit	r3, r3
 8001fb8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 8001fbc:	4b68      	ldr	r3, [pc, #416]	; (8002160 <HAL_RCC_OscConfig+0x658>)
 8001fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc0:	2202      	movs	r2, #2
 8001fc2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001fc6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001fca:	fa92 f2a2 	rbit	r2, r2
 8001fce:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8001fd2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001fd6:	fab2 f282 	clz	r2, r2
 8001fda:	b252      	sxtb	r2, r2
 8001fdc:	f042 0220 	orr.w	r2, r2, #32
 8001fe0:	b252      	sxtb	r2, r2
 8001fe2:	b2d2      	uxtb	r2, r2
 8001fe4:	f002 021f 	and.w	r2, r2, #31
 8001fe8:	2101      	movs	r1, #1
 8001fea:	fa01 f202 	lsl.w	r2, r1, r2
 8001fee:	4013      	ands	r3, r2
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d0ae      	beq.n	8001f52 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ff4:	4b5a      	ldr	r3, [pc, #360]	; (8002160 <HAL_RCC_OscConfig+0x658>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ffc:	1d3b      	adds	r3, r7, #4
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	6959      	ldr	r1, [r3, #20]
 8002002:	23f8      	movs	r3, #248	; 0xf8
 8002004:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002008:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800200c:	fa93 f3a3 	rbit	r3, r3
 8002010:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8002014:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002018:	fab3 f383 	clz	r3, r3
 800201c:	fa01 f303 	lsl.w	r3, r1, r3
 8002020:	494f      	ldr	r1, [pc, #316]	; (8002160 <HAL_RCC_OscConfig+0x658>)
 8002022:	4313      	orrs	r3, r2
 8002024:	600b      	str	r3, [r1, #0]
 8002026:	e06a      	b.n	80020fe <HAL_RCC_OscConfig+0x5f6>
 8002028:	2301      	movs	r3, #1
 800202a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800202e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002032:	fa93 f3a3 	rbit	r3, r3
 8002036:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 800203a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800203e:	fab3 f383 	clz	r3, r3
 8002042:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002046:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800204a:	009b      	lsls	r3, r3, #2
 800204c:	461a      	mov	r2, r3
 800204e:	2300      	movs	r3, #0
 8002050:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002052:	f7fe fe6b 	bl	8000d2c <HAL_GetTick>
 8002056:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800205a:	e00a      	b.n	8002072 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800205c:	f7fe fe66 	bl	8000d2c <HAL_GetTick>
 8002060:	4602      	mov	r2, r0
 8002062:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	2b02      	cmp	r3, #2
 800206a:	d902      	bls.n	8002072 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 800206c:	2303      	movs	r3, #3
 800206e:	f000 bc32 	b.w	80028d6 <HAL_RCC_OscConfig+0xdce>
 8002072:	2302      	movs	r3, #2
 8002074:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002078:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800207c:	fa93 f3a3 	rbit	r3, r3
 8002080:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8002084:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002088:	fab3 f383 	clz	r3, r3
 800208c:	b2db      	uxtb	r3, r3
 800208e:	095b      	lsrs	r3, r3, #5
 8002090:	b2db      	uxtb	r3, r3
 8002092:	f043 0301 	orr.w	r3, r3, #1
 8002096:	b2db      	uxtb	r3, r3
 8002098:	2b01      	cmp	r3, #1
 800209a:	d102      	bne.n	80020a2 <HAL_RCC_OscConfig+0x59a>
 800209c:	4b30      	ldr	r3, [pc, #192]	; (8002160 <HAL_RCC_OscConfig+0x658>)
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	e013      	b.n	80020ca <HAL_RCC_OscConfig+0x5c2>
 80020a2:	2302      	movs	r3, #2
 80020a4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020a8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80020ac:	fa93 f3a3 	rbit	r3, r3
 80020b0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80020b4:	2302      	movs	r3, #2
 80020b6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80020ba:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80020be:	fa93 f3a3 	rbit	r3, r3
 80020c2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80020c6:	4b26      	ldr	r3, [pc, #152]	; (8002160 <HAL_RCC_OscConfig+0x658>)
 80020c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020ca:	2202      	movs	r2, #2
 80020cc:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80020d0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80020d4:	fa92 f2a2 	rbit	r2, r2
 80020d8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 80020dc:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80020e0:	fab2 f282 	clz	r2, r2
 80020e4:	b252      	sxtb	r2, r2
 80020e6:	f042 0220 	orr.w	r2, r2, #32
 80020ea:	b252      	sxtb	r2, r2
 80020ec:	b2d2      	uxtb	r2, r2
 80020ee:	f002 021f 	and.w	r2, r2, #31
 80020f2:	2101      	movs	r1, #1
 80020f4:	fa01 f202 	lsl.w	r2, r1, r2
 80020f8:	4013      	ands	r3, r2
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d1ae      	bne.n	800205c <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020fe:	1d3b      	adds	r3, r7, #4
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f003 0308 	and.w	r3, r3, #8
 8002108:	2b00      	cmp	r3, #0
 800210a:	f000 80d8 	beq.w	80022be <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d067      	beq.n	80021e8 <HAL_RCC_OscConfig+0x6e0>
 8002118:	2301      	movs	r3, #1
 800211a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800211e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002122:	fa93 f3a3 	rbit	r3, r3
 8002126:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 800212a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	461a      	mov	r2, r3
 8002134:	4b0b      	ldr	r3, [pc, #44]	; (8002164 <HAL_RCC_OscConfig+0x65c>)
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	461a      	mov	r2, r3
 800213c:	2301      	movs	r3, #1
 800213e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002140:	f7fe fdf4 	bl	8000d2c <HAL_GetTick>
 8002144:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002148:	e00e      	b.n	8002168 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800214a:	f7fe fdef 	bl	8000d2c <HAL_GetTick>
 800214e:	4602      	mov	r2, r0
 8002150:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002154:	1ad3      	subs	r3, r2, r3
 8002156:	2b02      	cmp	r3, #2
 8002158:	d906      	bls.n	8002168 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 800215a:	2303      	movs	r3, #3
 800215c:	e3bb      	b.n	80028d6 <HAL_RCC_OscConfig+0xdce>
 800215e:	bf00      	nop
 8002160:	40021000 	.word	0x40021000
 8002164:	10908120 	.word	0x10908120
 8002168:	2302      	movs	r3, #2
 800216a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800217a:	2302      	movs	r3, #2
 800217c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002180:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002184:	fa93 f2a3 	rbit	r2, r3
 8002188:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800218c:	601a      	str	r2, [r3, #0]
 800218e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002192:	2202      	movs	r2, #2
 8002194:	601a      	str	r2, [r3, #0]
 8002196:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	fa93 f2a3 	rbit	r2, r3
 80021a0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80021a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021a6:	4ba5      	ldr	r3, [pc, #660]	; (800243c <HAL_RCC_OscConfig+0x934>)
 80021a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80021aa:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021ae:	2102      	movs	r1, #2
 80021b0:	6019      	str	r1, [r3, #0]
 80021b2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	fa93 f1a3 	rbit	r1, r3
 80021bc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80021c0:	6019      	str	r1, [r3, #0]
  return(result);
 80021c2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	fab3 f383 	clz	r3, r3
 80021cc:	b25b      	sxtb	r3, r3
 80021ce:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80021d2:	b25b      	sxtb	r3, r3
 80021d4:	b2db      	uxtb	r3, r3
 80021d6:	f003 031f 	and.w	r3, r3, #31
 80021da:	2101      	movs	r1, #1
 80021dc:	fa01 f303 	lsl.w	r3, r1, r3
 80021e0:	4013      	ands	r3, r2
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d0b1      	beq.n	800214a <HAL_RCC_OscConfig+0x642>
 80021e6:	e06a      	b.n	80022be <HAL_RCC_OscConfig+0x7b6>
 80021e8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021ec:	2201      	movs	r2, #1
 80021ee:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021f0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	fa93 f2a3 	rbit	r2, r3
 80021fa:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80021fe:	601a      	str	r2, [r3, #0]
  return(result);
 8002200:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002204:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	461a      	mov	r2, r3
 800220c:	4b8c      	ldr	r3, [pc, #560]	; (8002440 <HAL_RCC_OscConfig+0x938>)
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	461a      	mov	r2, r3
 8002214:	2300      	movs	r3, #0
 8002216:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002218:	f7fe fd88 	bl	8000d2c <HAL_GetTick>
 800221c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002220:	e009      	b.n	8002236 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002222:	f7fe fd83 	bl	8000d2c <HAL_GetTick>
 8002226:	4602      	mov	r2, r0
 8002228:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d901      	bls.n	8002236 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e34f      	b.n	80028d6 <HAL_RCC_OscConfig+0xdce>
 8002236:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 800223a:	2202      	movs	r2, #2
 800223c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	fa93 f2a3 	rbit	r2, r3
 8002248:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 800224c:	601a      	str	r2, [r3, #0]
 800224e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002252:	2202      	movs	r2, #2
 8002254:	601a      	str	r2, [r3, #0]
 8002256:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	fa93 f2a3 	rbit	r2, r3
 8002260:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002264:	601a      	str	r2, [r3, #0]
 8002266:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 800226a:	2202      	movs	r2, #2
 800226c:	601a      	str	r2, [r3, #0]
 800226e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	fa93 f2a3 	rbit	r2, r3
 8002278:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 800227c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800227e:	4b6f      	ldr	r3, [pc, #444]	; (800243c <HAL_RCC_OscConfig+0x934>)
 8002280:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002282:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002286:	2102      	movs	r1, #2
 8002288:	6019      	str	r1, [r3, #0]
 800228a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	fa93 f1a3 	rbit	r1, r3
 8002294:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002298:	6019      	str	r1, [r3, #0]
  return(result);
 800229a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	fab3 f383 	clz	r3, r3
 80022a4:	b25b      	sxtb	r3, r3
 80022a6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	b2db      	uxtb	r3, r3
 80022ae:	f003 031f 	and.w	r3, r3, #31
 80022b2:	2101      	movs	r1, #1
 80022b4:	fa01 f303 	lsl.w	r3, r1, r3
 80022b8:	4013      	ands	r3, r2
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d1b1      	bne.n	8002222 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022be:	1d3b      	adds	r3, r7, #4
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0304 	and.w	r3, r3, #4
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	f000 8159 	beq.w	8002580 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ce:	2300      	movs	r3, #0
 80022d0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022d4:	4b59      	ldr	r3, [pc, #356]	; (800243c <HAL_RCC_OscConfig+0x934>)
 80022d6:	69db      	ldr	r3, [r3, #28]
 80022d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d112      	bne.n	8002306 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022e0:	4b56      	ldr	r3, [pc, #344]	; (800243c <HAL_RCC_OscConfig+0x934>)
 80022e2:	69db      	ldr	r3, [r3, #28]
 80022e4:	4a55      	ldr	r2, [pc, #340]	; (800243c <HAL_RCC_OscConfig+0x934>)
 80022e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022ea:	61d3      	str	r3, [r2, #28]
 80022ec:	4b53      	ldr	r3, [pc, #332]	; (800243c <HAL_RCC_OscConfig+0x934>)
 80022ee:	69db      	ldr	r3, [r3, #28]
 80022f0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 80022f4:	f107 030c 	add.w	r3, r7, #12
 80022f8:	601a      	str	r2, [r3, #0]
 80022fa:	f107 030c 	add.w	r3, r7, #12
 80022fe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002300:	2301      	movs	r3, #1
 8002302:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002306:	4b4f      	ldr	r3, [pc, #316]	; (8002444 <HAL_RCC_OscConfig+0x93c>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800230e:	2b00      	cmp	r3, #0
 8002310:	d11a      	bne.n	8002348 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002312:	4b4c      	ldr	r3, [pc, #304]	; (8002444 <HAL_RCC_OscConfig+0x93c>)
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	4a4b      	ldr	r2, [pc, #300]	; (8002444 <HAL_RCC_OscConfig+0x93c>)
 8002318:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800231c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800231e:	f7fe fd05 	bl	8000d2c <HAL_GetTick>
 8002322:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002326:	e009      	b.n	800233c <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002328:	f7fe fd00 	bl	8000d2c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002332:	1ad3      	subs	r3, r2, r3
 8002334:	2b64      	cmp	r3, #100	; 0x64
 8002336:	d901      	bls.n	800233c <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8002338:	2303      	movs	r3, #3
 800233a:	e2cc      	b.n	80028d6 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800233c:	4b41      	ldr	r3, [pc, #260]	; (8002444 <HAL_RCC_OscConfig+0x93c>)
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002344:	2b00      	cmp	r3, #0
 8002346:	d0ef      	beq.n	8002328 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002348:	1d3b      	adds	r3, r7, #4
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	68db      	ldr	r3, [r3, #12]
 800234e:	2b01      	cmp	r3, #1
 8002350:	d106      	bne.n	8002360 <HAL_RCC_OscConfig+0x858>
 8002352:	4b3a      	ldr	r3, [pc, #232]	; (800243c <HAL_RCC_OscConfig+0x934>)
 8002354:	6a1b      	ldr	r3, [r3, #32]
 8002356:	4a39      	ldr	r2, [pc, #228]	; (800243c <HAL_RCC_OscConfig+0x934>)
 8002358:	f043 0301 	orr.w	r3, r3, #1
 800235c:	6213      	str	r3, [r2, #32]
 800235e:	e02f      	b.n	80023c0 <HAL_RCC_OscConfig+0x8b8>
 8002360:	1d3b      	adds	r3, r7, #4
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	68db      	ldr	r3, [r3, #12]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x87c>
 800236a:	4b34      	ldr	r3, [pc, #208]	; (800243c <HAL_RCC_OscConfig+0x934>)
 800236c:	6a1b      	ldr	r3, [r3, #32]
 800236e:	4a33      	ldr	r2, [pc, #204]	; (800243c <HAL_RCC_OscConfig+0x934>)
 8002370:	f023 0301 	bic.w	r3, r3, #1
 8002374:	6213      	str	r3, [r2, #32]
 8002376:	4b31      	ldr	r3, [pc, #196]	; (800243c <HAL_RCC_OscConfig+0x934>)
 8002378:	6a1b      	ldr	r3, [r3, #32]
 800237a:	4a30      	ldr	r2, [pc, #192]	; (800243c <HAL_RCC_OscConfig+0x934>)
 800237c:	f023 0304 	bic.w	r3, r3, #4
 8002380:	6213      	str	r3, [r2, #32]
 8002382:	e01d      	b.n	80023c0 <HAL_RCC_OscConfig+0x8b8>
 8002384:	1d3b      	adds	r3, r7, #4
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	68db      	ldr	r3, [r3, #12]
 800238a:	2b05      	cmp	r3, #5
 800238c:	d10c      	bne.n	80023a8 <HAL_RCC_OscConfig+0x8a0>
 800238e:	4b2b      	ldr	r3, [pc, #172]	; (800243c <HAL_RCC_OscConfig+0x934>)
 8002390:	6a1b      	ldr	r3, [r3, #32]
 8002392:	4a2a      	ldr	r2, [pc, #168]	; (800243c <HAL_RCC_OscConfig+0x934>)
 8002394:	f043 0304 	orr.w	r3, r3, #4
 8002398:	6213      	str	r3, [r2, #32]
 800239a:	4b28      	ldr	r3, [pc, #160]	; (800243c <HAL_RCC_OscConfig+0x934>)
 800239c:	6a1b      	ldr	r3, [r3, #32]
 800239e:	4a27      	ldr	r2, [pc, #156]	; (800243c <HAL_RCC_OscConfig+0x934>)
 80023a0:	f043 0301 	orr.w	r3, r3, #1
 80023a4:	6213      	str	r3, [r2, #32]
 80023a6:	e00b      	b.n	80023c0 <HAL_RCC_OscConfig+0x8b8>
 80023a8:	4b24      	ldr	r3, [pc, #144]	; (800243c <HAL_RCC_OscConfig+0x934>)
 80023aa:	6a1b      	ldr	r3, [r3, #32]
 80023ac:	4a23      	ldr	r2, [pc, #140]	; (800243c <HAL_RCC_OscConfig+0x934>)
 80023ae:	f023 0301 	bic.w	r3, r3, #1
 80023b2:	6213      	str	r3, [r2, #32]
 80023b4:	4b21      	ldr	r3, [pc, #132]	; (800243c <HAL_RCC_OscConfig+0x934>)
 80023b6:	6a1b      	ldr	r3, [r3, #32]
 80023b8:	4a20      	ldr	r2, [pc, #128]	; (800243c <HAL_RCC_OscConfig+0x934>)
 80023ba:	f023 0304 	bic.w	r3, r3, #4
 80023be:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	68db      	ldr	r3, [r3, #12]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d06b      	beq.n	80024a2 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023ca:	f7fe fcaf 	bl	8000d2c <HAL_GetTick>
 80023ce:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023d2:	e00b      	b.n	80023ec <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023d4:	f7fe fcaa 	bl	8000d2c <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e4:	4293      	cmp	r3, r2
 80023e6:	d901      	bls.n	80023ec <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 80023e8:	2303      	movs	r3, #3
 80023ea:	e274      	b.n	80028d6 <HAL_RCC_OscConfig+0xdce>
 80023ec:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023f0:	2202      	movs	r2, #2
 80023f2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023f4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	fa93 f2a3 	rbit	r2, r3
 80023fe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002408:	2202      	movs	r2, #2
 800240a:	601a      	str	r2, [r3, #0]
 800240c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	fa93 f2a3 	rbit	r2, r3
 8002416:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 800241a:	601a      	str	r2, [r3, #0]
  return(result);
 800241c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002420:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002422:	fab3 f383 	clz	r3, r3
 8002426:	b2db      	uxtb	r3, r3
 8002428:	095b      	lsrs	r3, r3, #5
 800242a:	b2db      	uxtb	r3, r3
 800242c:	f043 0302 	orr.w	r3, r3, #2
 8002430:	b2db      	uxtb	r3, r3
 8002432:	2b02      	cmp	r3, #2
 8002434:	d108      	bne.n	8002448 <HAL_RCC_OscConfig+0x940>
 8002436:	4b01      	ldr	r3, [pc, #4]	; (800243c <HAL_RCC_OscConfig+0x934>)
 8002438:	6a1b      	ldr	r3, [r3, #32]
 800243a:	e013      	b.n	8002464 <HAL_RCC_OscConfig+0x95c>
 800243c:	40021000 	.word	0x40021000
 8002440:	10908120 	.word	0x10908120
 8002444:	40007000 	.word	0x40007000
 8002448:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800244c:	2202      	movs	r2, #2
 800244e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002450:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	fa93 f2a3 	rbit	r2, r3
 800245a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800245e:	601a      	str	r2, [r3, #0]
 8002460:	4bbb      	ldr	r3, [pc, #748]	; (8002750 <HAL_RCC_OscConfig+0xc48>)
 8002462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002464:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002468:	2102      	movs	r1, #2
 800246a:	6011      	str	r1, [r2, #0]
 800246c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002470:	6812      	ldr	r2, [r2, #0]
 8002472:	fa92 f1a2 	rbit	r1, r2
 8002476:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 800247a:	6011      	str	r1, [r2, #0]
  return(result);
 800247c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002480:	6812      	ldr	r2, [r2, #0]
 8002482:	fab2 f282 	clz	r2, r2
 8002486:	b252      	sxtb	r2, r2
 8002488:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800248c:	b252      	sxtb	r2, r2
 800248e:	b2d2      	uxtb	r2, r2
 8002490:	f002 021f 	and.w	r2, r2, #31
 8002494:	2101      	movs	r1, #1
 8002496:	fa01 f202 	lsl.w	r2, r1, r2
 800249a:	4013      	ands	r3, r2
 800249c:	2b00      	cmp	r3, #0
 800249e:	d099      	beq.n	80023d4 <HAL_RCC_OscConfig+0x8cc>
 80024a0:	e064      	b.n	800256c <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80024a2:	f7fe fc43 	bl	8000d2c <HAL_GetTick>
 80024a6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024aa:	e00b      	b.n	80024c4 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80024ac:	f7fe fc3e 	bl	8000d2c <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024bc:	4293      	cmp	r3, r2
 80024be:	d901      	bls.n	80024c4 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 80024c0:	2303      	movs	r3, #3
 80024c2:	e208      	b.n	80028d6 <HAL_RCC_OscConfig+0xdce>
 80024c4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024c8:	2202      	movs	r2, #2
 80024ca:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024cc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	fa93 f2a3 	rbit	r2, r3
 80024d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80024da:	601a      	str	r2, [r3, #0]
 80024dc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024e0:	2202      	movs	r2, #2
 80024e2:	601a      	str	r2, [r3, #0]
 80024e4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	fa93 f2a3 	rbit	r2, r3
 80024ee:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024f2:	601a      	str	r2, [r3, #0]
  return(result);
 80024f4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80024f8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80024fa:	fab3 f383 	clz	r3, r3
 80024fe:	b2db      	uxtb	r3, r3
 8002500:	095b      	lsrs	r3, r3, #5
 8002502:	b2db      	uxtb	r3, r3
 8002504:	f043 0302 	orr.w	r3, r3, #2
 8002508:	b2db      	uxtb	r3, r3
 800250a:	2b02      	cmp	r3, #2
 800250c:	d102      	bne.n	8002514 <HAL_RCC_OscConfig+0xa0c>
 800250e:	4b90      	ldr	r3, [pc, #576]	; (8002750 <HAL_RCC_OscConfig+0xc48>)
 8002510:	6a1b      	ldr	r3, [r3, #32]
 8002512:	e00d      	b.n	8002530 <HAL_RCC_OscConfig+0xa28>
 8002514:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002518:	2202      	movs	r2, #2
 800251a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800251c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	fa93 f2a3 	rbit	r2, r3
 8002526:	f107 0390 	add.w	r3, r7, #144	; 0x90
 800252a:	601a      	str	r2, [r3, #0]
 800252c:	4b88      	ldr	r3, [pc, #544]	; (8002750 <HAL_RCC_OscConfig+0xc48>)
 800252e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002530:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002534:	2102      	movs	r1, #2
 8002536:	6011      	str	r1, [r2, #0]
 8002538:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	fa92 f1a2 	rbit	r1, r2
 8002542:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002546:	6011      	str	r1, [r2, #0]
  return(result);
 8002548:	f107 0288 	add.w	r2, r7, #136	; 0x88
 800254c:	6812      	ldr	r2, [r2, #0]
 800254e:	fab2 f282 	clz	r2, r2
 8002552:	b252      	sxtb	r2, r2
 8002554:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002558:	b252      	sxtb	r2, r2
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	f002 021f 	and.w	r2, r2, #31
 8002560:	2101      	movs	r1, #1
 8002562:	fa01 f202 	lsl.w	r2, r1, r2
 8002566:	4013      	ands	r3, r2
 8002568:	2b00      	cmp	r3, #0
 800256a:	d19f      	bne.n	80024ac <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800256c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002570:	2b01      	cmp	r3, #1
 8002572:	d105      	bne.n	8002580 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002574:	4b76      	ldr	r3, [pc, #472]	; (8002750 <HAL_RCC_OscConfig+0xc48>)
 8002576:	69db      	ldr	r3, [r3, #28]
 8002578:	4a75      	ldr	r2, [pc, #468]	; (8002750 <HAL_RCC_OscConfig+0xc48>)
 800257a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800257e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002580:	1d3b      	adds	r3, r7, #4
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	69db      	ldr	r3, [r3, #28]
 8002586:	2b00      	cmp	r3, #0
 8002588:	f000 81a4 	beq.w	80028d4 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800258c:	4b70      	ldr	r3, [pc, #448]	; (8002750 <HAL_RCC_OscConfig+0xc48>)
 800258e:	685b      	ldr	r3, [r3, #4]
 8002590:	f003 030c 	and.w	r3, r3, #12
 8002594:	2b08      	cmp	r3, #8
 8002596:	f000 819b 	beq.w	80028d0 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800259a:	1d3b      	adds	r3, r7, #4
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	69db      	ldr	r3, [r3, #28]
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	f040 8113 	bne.w	80027cc <HAL_RCC_OscConfig+0xcc4>
 80025a6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025aa:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80025ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025b0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	fa93 f2a3 	rbit	r2, r3
 80025ba:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025be:	601a      	str	r2, [r3, #0]
  return(result);
 80025c0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80025c4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c6:	fab3 f383 	clz	r3, r3
 80025ca:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80025ce:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	461a      	mov	r2, r3
 80025d6:	2300      	movs	r3, #0
 80025d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7fe fba7 	bl	8000d2c <HAL_GetTick>
 80025de:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80025e2:	e009      	b.n	80025f8 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80025e4:	f7fe fba2 	bl	8000d2c <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	2b02      	cmp	r3, #2
 80025f2:	d901      	bls.n	80025f8 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 80025f4:	2303      	movs	r3, #3
 80025f6:	e16e      	b.n	80028d6 <HAL_RCC_OscConfig+0xdce>
 80025f8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80025fc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002600:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002602:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	fa93 f2a3 	rbit	r2, r3
 800260c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002610:	601a      	str	r2, [r3, #0]
  return(result);
 8002612:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002616:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d102      	bne.n	8002632 <HAL_RCC_OscConfig+0xb2a>
 800262c:	4b48      	ldr	r3, [pc, #288]	; (8002750 <HAL_RCC_OscConfig+0xc48>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	e01b      	b.n	800266a <HAL_RCC_OscConfig+0xb62>
 8002632:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002636:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800263a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800263c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	fa93 f2a3 	rbit	r2, r3
 8002646:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800264a:	601a      	str	r2, [r3, #0]
 800264c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002650:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	fa93 f2a3 	rbit	r2, r3
 8002660:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002664:	601a      	str	r2, [r3, #0]
 8002666:	4b3a      	ldr	r3, [pc, #232]	; (8002750 <HAL_RCC_OscConfig+0xc48>)
 8002668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800266a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 800266e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002672:	6011      	str	r1, [r2, #0]
 8002674:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002678:	6812      	ldr	r2, [r2, #0]
 800267a:	fa92 f1a2 	rbit	r1, r2
 800267e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002682:	6011      	str	r1, [r2, #0]
  return(result);
 8002684:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002688:	6812      	ldr	r2, [r2, #0]
 800268a:	fab2 f282 	clz	r2, r2
 800268e:	b252      	sxtb	r2, r2
 8002690:	f042 0220 	orr.w	r2, r2, #32
 8002694:	b252      	sxtb	r2, r2
 8002696:	b2d2      	uxtb	r2, r2
 8002698:	f002 021f 	and.w	r2, r2, #31
 800269c:	2101      	movs	r1, #1
 800269e:	fa01 f202 	lsl.w	r2, r1, r2
 80026a2:	4013      	ands	r3, r2
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	d19d      	bne.n	80025e4 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80026a8:	4b29      	ldr	r3, [pc, #164]	; (8002750 <HAL_RCC_OscConfig+0xc48>)
 80026aa:	685b      	ldr	r3, [r3, #4]
 80026ac:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 80026b0:	1d3b      	adds	r3, r7, #4
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80026b6:	1d3b      	adds	r3, r7, #4
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	6a1b      	ldr	r3, [r3, #32]
 80026bc:	430b      	orrs	r3, r1
 80026be:	4924      	ldr	r1, [pc, #144]	; (8002750 <HAL_RCC_OscConfig+0xc48>)
 80026c0:	4313      	orrs	r3, r2
 80026c2:	604b      	str	r3, [r1, #4]
 80026c4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80026cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	fa93 f2a3 	rbit	r2, r3
 80026d8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026dc:	601a      	str	r2, [r3, #0]
  return(result);
 80026de:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80026e2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026e4:	fab3 f383 	clz	r3, r3
 80026e8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026ec:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	461a      	mov	r2, r3
 80026f4:	2301      	movs	r3, #1
 80026f6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026f8:	f7fe fb18 	bl	8000d2c <HAL_GetTick>
 80026fc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002700:	e009      	b.n	8002716 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002702:	f7fe fb13 	bl	8000d2c <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e0df      	b.n	80028d6 <HAL_RCC_OscConfig+0xdce>
 8002716:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800271a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800271e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002720:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	fa93 f2a3 	rbit	r2, r3
 800272a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 800272e:	601a      	str	r2, [r3, #0]
  return(result);
 8002730:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002734:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002736:	fab3 f383 	clz	r3, r3
 800273a:	b2db      	uxtb	r3, r3
 800273c:	095b      	lsrs	r3, r3, #5
 800273e:	b2db      	uxtb	r3, r3
 8002740:	f043 0301 	orr.w	r3, r3, #1
 8002744:	b2db      	uxtb	r3, r3
 8002746:	2b01      	cmp	r3, #1
 8002748:	d104      	bne.n	8002754 <HAL_RCC_OscConfig+0xc4c>
 800274a:	4b01      	ldr	r3, [pc, #4]	; (8002750 <HAL_RCC_OscConfig+0xc48>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	e01d      	b.n	800278c <HAL_RCC_OscConfig+0xc84>
 8002750:	40021000 	.word	0x40021000
 8002754:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002758:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800275c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	fa93 f2a3 	rbit	r2, r3
 8002768:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800276c:	601a      	str	r2, [r3, #0]
 800276e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002772:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002776:	601a      	str	r2, [r3, #0]
 8002778:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	fa93 f2a3 	rbit	r2, r3
 8002782:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	4b55      	ldr	r3, [pc, #340]	; (80028e0 <HAL_RCC_OscConfig+0xdd8>)
 800278a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800278c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002790:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002794:	6011      	str	r1, [r2, #0]
 8002796:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 800279a:	6812      	ldr	r2, [r2, #0]
 800279c:	fa92 f1a2 	rbit	r1, r2
 80027a0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027a4:	6011      	str	r1, [r2, #0]
  return(result);
 80027a6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80027aa:	6812      	ldr	r2, [r2, #0]
 80027ac:	fab2 f282 	clz	r2, r2
 80027b0:	b252      	sxtb	r2, r2
 80027b2:	f042 0220 	orr.w	r2, r2, #32
 80027b6:	b252      	sxtb	r2, r2
 80027b8:	b2d2      	uxtb	r2, r2
 80027ba:	f002 021f 	and.w	r2, r2, #31
 80027be:	2101      	movs	r1, #1
 80027c0:	fa01 f202 	lsl.w	r2, r1, r2
 80027c4:	4013      	ands	r3, r2
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d09b      	beq.n	8002702 <HAL_RCC_OscConfig+0xbfa>
 80027ca:	e083      	b.n	80028d4 <HAL_RCC_OscConfig+0xdcc>
 80027cc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80027d4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027d6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	fa93 f2a3 	rbit	r2, r3
 80027e0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027e4:	601a      	str	r2, [r3, #0]
  return(result);
 80027e6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80027ea:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ec:	fab3 f383 	clz	r3, r3
 80027f0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80027f4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80027f8:	009b      	lsls	r3, r3, #2
 80027fa:	461a      	mov	r2, r3
 80027fc:	2300      	movs	r3, #0
 80027fe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002800:	f7fe fa94 	bl	8000d2c <HAL_GetTick>
 8002804:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002808:	e009      	b.n	800281e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800280a:	f7fe fa8f 	bl	8000d2c <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002814:	1ad3      	subs	r3, r2, r3
 8002816:	2b02      	cmp	r3, #2
 8002818:	d901      	bls.n	800281e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e05b      	b.n	80028d6 <HAL_RCC_OscConfig+0xdce>
 800281e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002822:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002826:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002828:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	fa93 f2a3 	rbit	r2, r3
 8002832:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002836:	601a      	str	r2, [r3, #0]
  return(result);
 8002838:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800283c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800283e:	fab3 f383 	clz	r3, r3
 8002842:	b2db      	uxtb	r3, r3
 8002844:	095b      	lsrs	r3, r3, #5
 8002846:	b2db      	uxtb	r3, r3
 8002848:	f043 0301 	orr.w	r3, r3, #1
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b01      	cmp	r3, #1
 8002850:	d102      	bne.n	8002858 <HAL_RCC_OscConfig+0xd50>
 8002852:	4b23      	ldr	r3, [pc, #140]	; (80028e0 <HAL_RCC_OscConfig+0xdd8>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	e01b      	b.n	8002890 <HAL_RCC_OscConfig+0xd88>
 8002858:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800285c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002860:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002862:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	fa93 f2a3 	rbit	r2, r3
 800286c:	f107 0320 	add.w	r3, r7, #32
 8002870:	601a      	str	r2, [r3, #0]
 8002872:	f107 031c 	add.w	r3, r7, #28
 8002876:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800287a:	601a      	str	r2, [r3, #0]
 800287c:	f107 031c 	add.w	r3, r7, #28
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	fa93 f2a3 	rbit	r2, r3
 8002886:	f107 0318 	add.w	r3, r7, #24
 800288a:	601a      	str	r2, [r3, #0]
 800288c:	4b14      	ldr	r3, [pc, #80]	; (80028e0 <HAL_RCC_OscConfig+0xdd8>)
 800288e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002890:	f107 0214 	add.w	r2, r7, #20
 8002894:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002898:	6011      	str	r1, [r2, #0]
 800289a:	f107 0214 	add.w	r2, r7, #20
 800289e:	6812      	ldr	r2, [r2, #0]
 80028a0:	fa92 f1a2 	rbit	r1, r2
 80028a4:	f107 0210 	add.w	r2, r7, #16
 80028a8:	6011      	str	r1, [r2, #0]
  return(result);
 80028aa:	f107 0210 	add.w	r2, r7, #16
 80028ae:	6812      	ldr	r2, [r2, #0]
 80028b0:	fab2 f282 	clz	r2, r2
 80028b4:	b252      	sxtb	r2, r2
 80028b6:	f042 0220 	orr.w	r2, r2, #32
 80028ba:	b252      	sxtb	r2, r2
 80028bc:	b2d2      	uxtb	r2, r2
 80028be:	f002 021f 	and.w	r2, r2, #31
 80028c2:	2101      	movs	r1, #1
 80028c4:	fa01 f202 	lsl.w	r2, r1, r2
 80028c8:	4013      	ands	r3, r2
 80028ca:	2b00      	cmp	r3, #0
 80028cc:	d19d      	bne.n	800280a <HAL_RCC_OscConfig+0xd02>
 80028ce:	e001      	b.n	80028d4 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e000      	b.n	80028d6 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80028d4:	2300      	movs	r3, #0
}
 80028d6:	4618      	mov	r0, r3
 80028d8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40021000 	.word	0x40021000

080028e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b09e      	sub	sp, #120	; 0x78
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028ee:	2300      	movs	r3, #0
 80028f0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e164      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b92      	ldr	r3, [pc, #584]	; (8002b48 <HAL_RCC_ClockConfig+0x264>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d910      	bls.n	800292c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b8f      	ldr	r3, [pc, #572]	; (8002b48 <HAL_RCC_ClockConfig+0x264>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f023 0207 	bic.w	r2, r3, #7
 8002912:	498d      	ldr	r1, [pc, #564]	; (8002b48 <HAL_RCC_ClockConfig+0x264>)
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	4313      	orrs	r3, r2
 8002918:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800291a:	4b8b      	ldr	r3, [pc, #556]	; (8002b48 <HAL_RCC_ClockConfig+0x264>)
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f003 0307 	and.w	r3, r3, #7
 8002922:	683a      	ldr	r2, [r7, #0]
 8002924:	429a      	cmp	r2, r3
 8002926:	d001      	beq.n	800292c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002928:	2301      	movs	r3, #1
 800292a:	e14c      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0302 	and.w	r3, r3, #2
 8002934:	2b00      	cmp	r3, #0
 8002936:	d008      	beq.n	800294a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002938:	4b84      	ldr	r3, [pc, #528]	; (8002b4c <HAL_RCC_ClockConfig+0x268>)
 800293a:	685b      	ldr	r3, [r3, #4]
 800293c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4981      	ldr	r1, [pc, #516]	; (8002b4c <HAL_RCC_ClockConfig+0x268>)
 8002946:	4313      	orrs	r3, r2
 8002948:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	2b00      	cmp	r3, #0
 8002954:	f000 80df 	beq.w	8002b16 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	2b01      	cmp	r3, #1
 800295e:	d13d      	bne.n	80029dc <HAL_RCC_ClockConfig+0xf8>
 8002960:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002964:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002966:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002968:	fa93 f3a3 	rbit	r3, r3
 800296c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800296e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002970:	fab3 f383 	clz	r3, r3
 8002974:	b2db      	uxtb	r3, r3
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	b2db      	uxtb	r3, r3
 800297a:	f043 0301 	orr.w	r3, r3, #1
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	d102      	bne.n	800298a <HAL_RCC_ClockConfig+0xa6>
 8002984:	4b71      	ldr	r3, [pc, #452]	; (8002b4c <HAL_RCC_ClockConfig+0x268>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	e00f      	b.n	80029aa <HAL_RCC_ClockConfig+0xc6>
 800298a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800298e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002990:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002992:	fa93 f3a3 	rbit	r3, r3
 8002996:	667b      	str	r3, [r7, #100]	; 0x64
 8002998:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800299c:	663b      	str	r3, [r7, #96]	; 0x60
 800299e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80029a0:	fa93 f3a3 	rbit	r3, r3
 80029a4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80029a6:	4b69      	ldr	r3, [pc, #420]	; (8002b4c <HAL_RCC_ClockConfig+0x268>)
 80029a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029aa:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80029ae:	65ba      	str	r2, [r7, #88]	; 0x58
 80029b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80029b2:	fa92 f2a2 	rbit	r2, r2
 80029b6:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80029b8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80029ba:	fab2 f282 	clz	r2, r2
 80029be:	b252      	sxtb	r2, r2
 80029c0:	f042 0220 	orr.w	r2, r2, #32
 80029c4:	b252      	sxtb	r2, r2
 80029c6:	b2d2      	uxtb	r2, r2
 80029c8:	f002 021f 	and.w	r2, r2, #31
 80029cc:	2101      	movs	r1, #1
 80029ce:	fa01 f202 	lsl.w	r2, r1, r2
 80029d2:	4013      	ands	r3, r2
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d17d      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e0f4      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	685b      	ldr	r3, [r3, #4]
 80029e0:	2b02      	cmp	r3, #2
 80029e2:	d13d      	bne.n	8002a60 <HAL_RCC_ClockConfig+0x17c>
 80029e4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80029e8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029ea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80029ec:	fa93 f3a3 	rbit	r3, r3
 80029f0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80029f2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029f4:	fab3 f383 	clz	r3, r3
 80029f8:	b2db      	uxtb	r3, r3
 80029fa:	095b      	lsrs	r3, r3, #5
 80029fc:	b2db      	uxtb	r3, r3
 80029fe:	f043 0301 	orr.w	r3, r3, #1
 8002a02:	b2db      	uxtb	r3, r3
 8002a04:	2b01      	cmp	r3, #1
 8002a06:	d102      	bne.n	8002a0e <HAL_RCC_ClockConfig+0x12a>
 8002a08:	4b50      	ldr	r3, [pc, #320]	; (8002b4c <HAL_RCC_ClockConfig+0x268>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	e00f      	b.n	8002a2e <HAL_RCC_ClockConfig+0x14a>
 8002a0e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a12:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a14:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002a16:	fa93 f3a3 	rbit	r3, r3
 8002a1a:	647b      	str	r3, [r7, #68]	; 0x44
 8002a1c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002a20:	643b      	str	r3, [r7, #64]	; 0x40
 8002a22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002a24:	fa93 f3a3 	rbit	r3, r3
 8002a28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002a2a:	4b48      	ldr	r3, [pc, #288]	; (8002b4c <HAL_RCC_ClockConfig+0x268>)
 8002a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a2e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002a32:	63ba      	str	r2, [r7, #56]	; 0x38
 8002a34:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8002a36:	fa92 f2a2 	rbit	r2, r2
 8002a3a:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 8002a3c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002a3e:	fab2 f282 	clz	r2, r2
 8002a42:	b252      	sxtb	r2, r2
 8002a44:	f042 0220 	orr.w	r2, r2, #32
 8002a48:	b252      	sxtb	r2, r2
 8002a4a:	b2d2      	uxtb	r2, r2
 8002a4c:	f002 021f 	and.w	r2, r2, #31
 8002a50:	2101      	movs	r1, #1
 8002a52:	fa01 f202 	lsl.w	r2, r1, r2
 8002a56:	4013      	ands	r3, r2
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d13b      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0b2      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x2e2>
 8002a60:	2302      	movs	r3, #2
 8002a62:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a66:	fa93 f3a3 	rbit	r3, r3
 8002a6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002a6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a6e:	fab3 f383 	clz	r3, r3
 8002a72:	b2db      	uxtb	r3, r3
 8002a74:	095b      	lsrs	r3, r3, #5
 8002a76:	b2db      	uxtb	r3, r3
 8002a78:	f043 0301 	orr.w	r3, r3, #1
 8002a7c:	b2db      	uxtb	r3, r3
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d102      	bne.n	8002a88 <HAL_RCC_ClockConfig+0x1a4>
 8002a82:	4b32      	ldr	r3, [pc, #200]	; (8002b4c <HAL_RCC_ClockConfig+0x268>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	e00d      	b.n	8002aa4 <HAL_RCC_ClockConfig+0x1c0>
 8002a88:	2302      	movs	r3, #2
 8002a8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8e:	fa93 f3a3 	rbit	r3, r3
 8002a92:	627b      	str	r3, [r7, #36]	; 0x24
 8002a94:	2302      	movs	r3, #2
 8002a96:	623b      	str	r3, [r7, #32]
 8002a98:	6a3b      	ldr	r3, [r7, #32]
 8002a9a:	fa93 f3a3 	rbit	r3, r3
 8002a9e:	61fb      	str	r3, [r7, #28]
 8002aa0:	4b2a      	ldr	r3, [pc, #168]	; (8002b4c <HAL_RCC_ClockConfig+0x268>)
 8002aa2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aa4:	2202      	movs	r2, #2
 8002aa6:	61ba      	str	r2, [r7, #24]
 8002aa8:	69ba      	ldr	r2, [r7, #24]
 8002aaa:	fa92 f2a2 	rbit	r2, r2
 8002aae:	617a      	str	r2, [r7, #20]
  return(result);
 8002ab0:	697a      	ldr	r2, [r7, #20]
 8002ab2:	fab2 f282 	clz	r2, r2
 8002ab6:	b252      	sxtb	r2, r2
 8002ab8:	f042 0220 	orr.w	r2, r2, #32
 8002abc:	b252      	sxtb	r2, r2
 8002abe:	b2d2      	uxtb	r2, r2
 8002ac0:	f002 021f 	and.w	r2, r2, #31
 8002ac4:	2101      	movs	r1, #1
 8002ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8002aca:	4013      	ands	r3, r2
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d101      	bne.n	8002ad4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8002ad0:	2301      	movs	r3, #1
 8002ad2:	e078      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ad4:	4b1d      	ldr	r3, [pc, #116]	; (8002b4c <HAL_RCC_ClockConfig+0x268>)
 8002ad6:	685b      	ldr	r3, [r3, #4]
 8002ad8:	f023 0203 	bic.w	r2, r3, #3
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	491a      	ldr	r1, [pc, #104]	; (8002b4c <HAL_RCC_ClockConfig+0x268>)
 8002ae2:	4313      	orrs	r3, r2
 8002ae4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002ae6:	f7fe f921 	bl	8000d2c <HAL_GetTick>
 8002aea:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002aec:	e00a      	b.n	8002b04 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002aee:	f7fe f91d 	bl	8000d2c <HAL_GetTick>
 8002af2:	4602      	mov	r2, r0
 8002af4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002af6:	1ad3      	subs	r3, r2, r3
 8002af8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002afc:	4293      	cmp	r3, r2
 8002afe:	d901      	bls.n	8002b04 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8002b00:	2303      	movs	r3, #3
 8002b02:	e060      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002b04:	4b11      	ldr	r3, [pc, #68]	; (8002b4c <HAL_RCC_ClockConfig+0x268>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f003 020c 	and.w	r2, r3, #12
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	009b      	lsls	r3, r3, #2
 8002b12:	429a      	cmp	r2, r3
 8002b14:	d1eb      	bne.n	8002aee <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b16:	4b0c      	ldr	r3, [pc, #48]	; (8002b48 <HAL_RCC_ClockConfig+0x264>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0307 	and.w	r3, r3, #7
 8002b1e:	683a      	ldr	r2, [r7, #0]
 8002b20:	429a      	cmp	r2, r3
 8002b22:	d215      	bcs.n	8002b50 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002b24:	4b08      	ldr	r3, [pc, #32]	; (8002b48 <HAL_RCC_ClockConfig+0x264>)
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f023 0207 	bic.w	r2, r3, #7
 8002b2c:	4906      	ldr	r1, [pc, #24]	; (8002b48 <HAL_RCC_ClockConfig+0x264>)
 8002b2e:	683b      	ldr	r3, [r7, #0]
 8002b30:	4313      	orrs	r3, r2
 8002b32:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002b34:	4b04      	ldr	r3, [pc, #16]	; (8002b48 <HAL_RCC_ClockConfig+0x264>)
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0307 	and.w	r3, r3, #7
 8002b3c:	683a      	ldr	r2, [r7, #0]
 8002b3e:	429a      	cmp	r2, r3
 8002b40:	d006      	beq.n	8002b50 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e03f      	b.n	8002bc6 <HAL_RCC_ClockConfig+0x2e2>
 8002b46:	bf00      	nop
 8002b48:	40022000 	.word	0x40022000
 8002b4c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 0304 	and.w	r3, r3, #4
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d008      	beq.n	8002b6e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002b5c:	4b1c      	ldr	r3, [pc, #112]	; (8002bd0 <HAL_RCC_ClockConfig+0x2ec>)
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	68db      	ldr	r3, [r3, #12]
 8002b68:	4919      	ldr	r1, [pc, #100]	; (8002bd0 <HAL_RCC_ClockConfig+0x2ec>)
 8002b6a:	4313      	orrs	r3, r2
 8002b6c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f003 0308 	and.w	r3, r3, #8
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d009      	beq.n	8002b8e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002b7a:	4b15      	ldr	r3, [pc, #84]	; (8002bd0 <HAL_RCC_ClockConfig+0x2ec>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	691b      	ldr	r3, [r3, #16]
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	4911      	ldr	r1, [pc, #68]	; (8002bd0 <HAL_RCC_ClockConfig+0x2ec>)
 8002b8a:	4313      	orrs	r3, r2
 8002b8c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8002b8e:	f000 f825 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
 8002b92:	4601      	mov	r1, r0
 8002b94:	4b0e      	ldr	r3, [pc, #56]	; (8002bd0 <HAL_RCC_ClockConfig+0x2ec>)
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b9c:	23f0      	movs	r3, #240	; 0xf0
 8002b9e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ba0:	693b      	ldr	r3, [r7, #16]
 8002ba2:	fa93 f3a3 	rbit	r3, r3
 8002ba6:	60fb      	str	r3, [r7, #12]
  return(result);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	fab3 f383 	clz	r3, r3
 8002bae:	fa22 f303 	lsr.w	r3, r2, r3
 8002bb2:	4a08      	ldr	r2, [pc, #32]	; (8002bd4 <HAL_RCC_ClockConfig+0x2f0>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	fa21 f303 	lsr.w	r3, r1, r3
 8002bba:	4a07      	ldr	r2, [pc, #28]	; (8002bd8 <HAL_RCC_ClockConfig+0x2f4>)
 8002bbc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	f7fe f870 	bl	8000ca4 <HAL_InitTick>
  
  return HAL_OK;
 8002bc4:	2300      	movs	r3, #0
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3778      	adds	r7, #120	; 0x78
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	40021000 	.word	0x40021000
 8002bd4:	08007530 	.word	0x08007530
 8002bd8:	20000018 	.word	0x20000018

08002bdc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b08b      	sub	sp, #44	; 0x2c
 8002be0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002be2:	2300      	movs	r3, #0
 8002be4:	61fb      	str	r3, [r7, #28]
 8002be6:	2300      	movs	r3, #0
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	2300      	movs	r3, #0
 8002bec:	627b      	str	r3, [r7, #36]	; 0x24
 8002bee:	2300      	movs	r3, #0
 8002bf0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002bf6:	4b29      	ldr	r3, [pc, #164]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002bfc:	69fb      	ldr	r3, [r7, #28]
 8002bfe:	f003 030c 	and.w	r3, r3, #12
 8002c02:	2b04      	cmp	r3, #4
 8002c04:	d002      	beq.n	8002c0c <HAL_RCC_GetSysClockFreq+0x30>
 8002c06:	2b08      	cmp	r3, #8
 8002c08:	d003      	beq.n	8002c12 <HAL_RCC_GetSysClockFreq+0x36>
 8002c0a:	e03c      	b.n	8002c86 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002c0c:	4b24      	ldr	r3, [pc, #144]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c0e:	623b      	str	r3, [r7, #32]
      break;
 8002c10:	e03c      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8002c12:	69fb      	ldr	r3, [r7, #28]
 8002c14:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c18:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8002c1c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c1e:	68bb      	ldr	r3, [r7, #8]
 8002c20:	fa93 f3a3 	rbit	r3, r3
 8002c24:	607b      	str	r3, [r7, #4]
  return(result);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	fab3 f383 	clz	r3, r3
 8002c2c:	fa22 f303 	lsr.w	r3, r2, r3
 8002c30:	4a1c      	ldr	r2, [pc, #112]	; (8002ca4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8002c32:	5cd3      	ldrb	r3, [r2, r3]
 8002c34:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002c36:	4b19      	ldr	r3, [pc, #100]	; (8002c9c <HAL_RCC_GetSysClockFreq+0xc0>)
 8002c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c3a:	f003 020f 	and.w	r2, r3, #15
 8002c3e:	230f      	movs	r3, #15
 8002c40:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c42:	693b      	ldr	r3, [r7, #16]
 8002c44:	fa93 f3a3 	rbit	r3, r3
 8002c48:	60fb      	str	r3, [r7, #12]
  return(result);
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	fab3 f383 	clz	r3, r3
 8002c50:	fa22 f303 	lsr.w	r3, r2, r3
 8002c54:	4a14      	ldr	r2, [pc, #80]	; (8002ca8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8002c56:	5cd3      	ldrb	r3, [r2, r3]
 8002c58:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d008      	beq.n	8002c76 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8002c64:	4a0e      	ldr	r2, [pc, #56]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c66:	69bb      	ldr	r3, [r7, #24]
 8002c68:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c6c:	697b      	ldr	r3, [r7, #20]
 8002c6e:	fb02 f303 	mul.w	r3, r2, r3
 8002c72:	627b      	str	r3, [r7, #36]	; 0x24
 8002c74:	e004      	b.n	8002c80 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	4a0c      	ldr	r2, [pc, #48]	; (8002cac <HAL_RCC_GetSysClockFreq+0xd0>)
 8002c7a:	fb02 f303 	mul.w	r3, r2, r3
 8002c7e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8002c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c82:	623b      	str	r3, [r7, #32]
      break;
 8002c84:	e002      	b.n	8002c8c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002c86:	4b06      	ldr	r3, [pc, #24]	; (8002ca0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002c88:	623b      	str	r3, [r7, #32]
      break;
 8002c8a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002c8c:	6a3b      	ldr	r3, [r7, #32]
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	372c      	adds	r7, #44	; 0x2c
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
 8002c9a:	bf00      	nop
 8002c9c:	40021000 	.word	0x40021000
 8002ca0:	007a1200 	.word	0x007a1200
 8002ca4:	08006048 	.word	0x08006048
 8002ca8:	08006058 	.word	0x08006058
 8002cac:	003d0900 	.word	0x003d0900

08002cb0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b092      	sub	sp, #72	; 0x48
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	f000 80cf 	beq.w	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002cd4:	4b86      	ldr	r3, [pc, #536]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cd6:	69db      	ldr	r3, [r3, #28]
 8002cd8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d10e      	bne.n	8002cfe <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002ce0:	4b83      	ldr	r3, [pc, #524]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	4a82      	ldr	r2, [pc, #520]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ce6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cea:	61d3      	str	r3, [r2, #28]
 8002cec:	4b80      	ldr	r3, [pc, #512]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002cee:	69db      	ldr	r3, [r3, #28]
 8002cf0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cf4:	60bb      	str	r3, [r7, #8]
 8002cf6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cfe:	4b7d      	ldr	r3, [pc, #500]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d118      	bne.n	8002d3c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d0a:	4b7a      	ldr	r3, [pc, #488]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a79      	ldr	r2, [pc, #484]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d14:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d16:	f7fe f809 	bl	8000d2c <HAL_GetTick>
 8002d1a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d1c:	e008      	b.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d1e:	f7fe f805 	bl	8000d2c <HAL_GetTick>
 8002d22:	4602      	mov	r2, r0
 8002d24:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d26:	1ad3      	subs	r3, r2, r3
 8002d28:	2b64      	cmp	r3, #100	; 0x64
 8002d2a:	d901      	bls.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002d2c:	2303      	movs	r3, #3
 8002d2e:	e0da      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d30:	4b70      	ldr	r3, [pc, #448]	; (8002ef4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d0f0      	beq.n	8002d1e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002d3c:	4b6c      	ldr	r3, [pc, #432]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d3e:	6a1b      	ldr	r3, [r3, #32]
 8002d40:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d44:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002d46:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d07c      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002d54:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002d56:	429a      	cmp	r2, r3
 8002d58:	d075      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002d5a:	4b65      	ldr	r3, [pc, #404]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002d5c:	6a1b      	ldr	r3, [r3, #32]
 8002d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002d62:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d64:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d68:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6c:	fa93 f3a3 	rbit	r3, r3
 8002d70:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8002d72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002d74:	fab3 f383 	clz	r3, r3
 8002d78:	461a      	mov	r2, r3
 8002d7a:	4b5f      	ldr	r3, [pc, #380]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d7c:	4413      	add	r3, r2
 8002d7e:	009b      	lsls	r3, r3, #2
 8002d80:	461a      	mov	r2, r3
 8002d82:	2301      	movs	r3, #1
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002d8a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d8e:	fa93 f3a3 	rbit	r3, r3
 8002d92:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8002d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002d96:	fab3 f383 	clz	r3, r3
 8002d9a:	461a      	mov	r2, r3
 8002d9c:	4b56      	ldr	r3, [pc, #344]	; (8002ef8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 8002d9e:	4413      	add	r3, r2
 8002da0:	009b      	lsls	r3, r3, #2
 8002da2:	461a      	mov	r2, r3
 8002da4:	2300      	movs	r3, #0
 8002da6:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002da8:	4a51      	ldr	r2, [pc, #324]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002daa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002dac:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002dae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002db0:	f003 0301 	and.w	r3, r3, #1
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d046      	beq.n	8002e46 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002db8:	f7fd ffb8 	bl	8000d2c <HAL_GetTick>
 8002dbc:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002dc0:	f7fd ffb4 	bl	8000d2c <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e087      	b.n	8002ee6 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8002dd6:	2302      	movs	r3, #2
 8002dd8:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ddc:	fa93 f3a3 	rbit	r3, r3
 8002de0:	627b      	str	r3, [r7, #36]	; 0x24
 8002de2:	2302      	movs	r3, #2
 8002de4:	623b      	str	r3, [r7, #32]
 8002de6:	6a3b      	ldr	r3, [r7, #32]
 8002de8:	fa93 f3a3 	rbit	r3, r3
 8002dec:	61fb      	str	r3, [r7, #28]
  return(result);
 8002dee:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002df0:	fab3 f383 	clz	r3, r3
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	095b      	lsrs	r3, r3, #5
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	f043 0302 	orr.w	r3, r3, #2
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d102      	bne.n	8002e0a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8002e04:	4b3a      	ldr	r3, [pc, #232]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e06:	6a1b      	ldr	r3, [r3, #32]
 8002e08:	e007      	b.n	8002e1a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	fa93 f3a3 	rbit	r3, r3
 8002e14:	617b      	str	r3, [r7, #20]
 8002e16:	4b36      	ldr	r3, [pc, #216]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	613a      	str	r2, [r7, #16]
 8002e1e:	693a      	ldr	r2, [r7, #16]
 8002e20:	fa92 f2a2 	rbit	r2, r2
 8002e24:	60fa      	str	r2, [r7, #12]
  return(result);
 8002e26:	68fa      	ldr	r2, [r7, #12]
 8002e28:	fab2 f282 	clz	r2, r2
 8002e2c:	b252      	sxtb	r2, r2
 8002e2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002e32:	b252      	sxtb	r2, r2
 8002e34:	b2d2      	uxtb	r2, r2
 8002e36:	f002 021f 	and.w	r2, r2, #31
 8002e3a:	2101      	movs	r1, #1
 8002e3c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e40:	4013      	ands	r3, r2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0bc      	beq.n	8002dc0 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002e46:	4b2a      	ldr	r3, [pc, #168]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e48:	6a1b      	ldr	r3, [r3, #32]
 8002e4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4927      	ldr	r1, [pc, #156]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e54:	4313      	orrs	r3, r2
 8002e56:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002e58:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002e5c:	2b01      	cmp	r3, #1
 8002e5e:	d105      	bne.n	8002e6c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e60:	4b23      	ldr	r3, [pc, #140]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e62:	69db      	ldr	r3, [r3, #28]
 8002e64:	4a22      	ldr	r2, [pc, #136]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002e6a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	f003 0301 	and.w	r3, r3, #1
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d008      	beq.n	8002e8a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002e78:	4b1d      	ldr	r3, [pc, #116]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e7c:	f023 0203 	bic.w	r2, r3, #3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	491a      	ldr	r1, [pc, #104]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e86:	4313      	orrs	r3, r2
 8002e88:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f003 0320 	and.w	r3, r3, #32
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d008      	beq.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002e96:	4b16      	ldr	r3, [pc, #88]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e9a:	f023 0210 	bic.w	r2, r3, #16
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	68db      	ldr	r3, [r3, #12]
 8002ea2:	4913      	ldr	r1, [pc, #76]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ea4:	4313      	orrs	r3, r2
 8002ea6:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d008      	beq.n	8002ec6 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002eb4:	4b0e      	ldr	r3, [pc, #56]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002eb8:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	691b      	ldr	r3, [r3, #16]
 8002ec0:	490b      	ldr	r1, [pc, #44]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d008      	beq.n	8002ee4 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002ed2:	4b07      	ldr	r3, [pc, #28]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ed4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	4904      	ldr	r1, [pc, #16]	; (8002ef0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002ee4:	2300      	movs	r3, #0
}
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	3748      	adds	r7, #72	; 0x48
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	40007000 	.word	0x40007000
 8002ef8:	10908100 	.word	0x10908100
 8002efc:	00000000 	.word	0x00000000

08002f00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f00:	b590      	push	{r4, r7, lr}
 8002f02:	b085      	sub	sp, #20
 8002f04:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f06:	f7fd feb7 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f0a:	f000 f855 	bl	8002fb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f0e:	f000 f8e7 	bl	80030e0 <MX_GPIO_Init>
  MX_I2C1_Init();
 8002f12:	f000 f8a7 	bl	8003064 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  set_oled_addr(0x78);
 8002f16:	2078      	movs	r0, #120	; 0x78
 8002f18:	f000 f934 	bl	8003184 <set_oled_addr>
  ssd1306_sel_I2C(&hi2c1);
 8002f1c:	4824      	ldr	r0, [pc, #144]	; (8002fb0 <main+0xb0>)
 8002f1e:	f000 fea7 	bl	8003c70 <ssd1306_sel_I2C>
  SSD1306_Init ();
 8002f22:	f000 f93f 	bl	80031a4 <SSD1306_Init>

double data = -3.0004;
 8002f26:	a420      	add	r4, pc, #128	; (adr r4, 8002fa8 <main+0xa8>)
 8002f28:	e9d4 3400 	ldrd	r3, r4, [r4]
 8002f2c:	e9c7 3402 	strd	r3, r4, [r7, #8]
int data_i = -12003;
 8002f30:	4b20      	ldr	r3, [pc, #128]	; (8002fb4 <main+0xb4>)
 8002f32:	607b      	str	r3, [r7, #4]
uint8_t decimales = 4;
 8002f34:	2304      	movs	r3, #4
 8002f36:	70fb      	strb	r3, [r7, #3]

SSD1306_Putdouble(data, decimales, 1);
 8002f38:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f3c:	f7fd fe4c 	bl	8000bd8 <__aeabi_d2f>
 8002f40:	4602      	mov	r2, r0
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	2101      	movs	r1, #1
 8002f46:	4618      	mov	r0, r3
 8002f48:	ee00 2a10 	vmov	s0, r2
 8002f4c:	f000 fdb0 	bl	8003ab0 <SSD1306_Putdouble>
SSD1306_Putdouble(data, decimales, 2);
 8002f50:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f54:	f7fd fe40 	bl	8000bd8 <__aeabi_d2f>
 8002f58:	4602      	mov	r2, r0
 8002f5a:	78fb      	ldrb	r3, [r7, #3]
 8002f5c:	2102      	movs	r1, #2
 8002f5e:	4618      	mov	r0, r3
 8002f60:	ee00 2a10 	vmov	s0, r2
 8002f64:	f000 fda4 	bl	8003ab0 <SSD1306_Putdouble>
SSD1306_Putint(data_i, 3);
 8002f68:	2103      	movs	r1, #3
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f000 fb66 	bl	800363c <SSD1306_Putint>
SSD1306_Putdouble(data, decimales, 4);
 8002f70:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f74:	f7fd fe30 	bl	8000bd8 <__aeabi_d2f>
 8002f78:	4602      	mov	r2, r0
 8002f7a:	78fb      	ldrb	r3, [r7, #3]
 8002f7c:	2104      	movs	r1, #4
 8002f7e:	4618      	mov	r0, r3
 8002f80:	ee00 2a10 	vmov	s0, r2
 8002f84:	f000 fd94 	bl	8003ab0 <SSD1306_Putdouble>
SSD1306_Putdouble(data, decimales, 5);
 8002f88:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002f8c:	f7fd fe24 	bl	8000bd8 <__aeabi_d2f>
 8002f90:	4602      	mov	r2, r0
 8002f92:	78fb      	ldrb	r3, [r7, #3]
 8002f94:	2105      	movs	r1, #5
 8002f96:	4618      	mov	r0, r3
 8002f98:	ee00 2a10 	vmov	s0, r2
 8002f9c:	f000 fd88 	bl	8003ab0 <SSD1306_Putdouble>
SSD1306_UpdateScreen();
 8002fa0:	f000 f9f6 	bl	8003390 <SSD1306_UpdateScreen>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002fa4:	e7fe      	b.n	8002fa4 <main+0xa4>
 8002fa6:	bf00      	nop
 8002fa8:	b71758e2 	.word	0xb71758e2
 8002fac:	c00800d1 	.word	0xc00800d1
 8002fb0:	200004dc 	.word	0x200004dc
 8002fb4:	ffffd11d 	.word	0xffffd11d

08002fb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b096      	sub	sp, #88	; 0x58
 8002fbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fbe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fc2:	2228      	movs	r2, #40	; 0x28
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f001 f847 	bl	800405a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fcc:	f107 031c 	add.w	r3, r7, #28
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	601a      	str	r2, [r3, #0]
 8002fd4:	605a      	str	r2, [r3, #4]
 8002fd6:	609a      	str	r2, [r3, #8]
 8002fd8:	60da      	str	r2, [r3, #12]
 8002fda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002fdc:	1d3b      	adds	r3, r7, #4
 8002fde:	2200      	movs	r2, #0
 8002fe0:	601a      	str	r2, [r3, #0]
 8002fe2:	605a      	str	r2, [r3, #4]
 8002fe4:	609a      	str	r2, [r3, #8]
 8002fe6:	60da      	str	r2, [r3, #12]
 8002fe8:	611a      	str	r2, [r3, #16]
 8002fea:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8002fec:	2303      	movs	r3, #3
 8002fee:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002ff0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ff4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002ff6:	2301      	movs	r3, #1
 8002ff8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002ffa:	2310      	movs	r3, #16
 8002ffc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8002ffe:	2300      	movs	r3, #0
 8003000:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003002:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003006:	4618      	mov	r0, r3
 8003008:	f7fe fd7e 	bl	8001b08 <HAL_RCC_OscConfig>
 800300c:	4603      	mov	r3, r0
 800300e:	2b00      	cmp	r3, #0
 8003010:	d001      	beq.n	8003016 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003012:	f000 f8af 	bl	8003174 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003016:	230f      	movs	r3, #15
 8003018:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 800301a:	2301      	movs	r3, #1
 800301c:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800301e:	2300      	movs	r3, #0
 8003020:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003022:	2300      	movs	r3, #0
 8003024:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003026:	2300      	movs	r3, #0
 8003028:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800302a:	f107 031c 	add.w	r3, r7, #28
 800302e:	2100      	movs	r1, #0
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff fc57 	bl	80028e4 <HAL_RCC_ClockConfig>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800303c:	f000 f89a 	bl	8003174 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003040:	2320      	movs	r3, #32
 8003042:	607b      	str	r3, [r7, #4]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8003044:	2300      	movs	r3, #0
 8003046:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003048:	1d3b      	adds	r3, r7, #4
 800304a:	4618      	mov	r0, r3
 800304c:	f7ff fe30 	bl	8002cb0 <HAL_RCCEx_PeriphCLKConfig>
 8003050:	4603      	mov	r3, r0
 8003052:	2b00      	cmp	r3, #0
 8003054:	d001      	beq.n	800305a <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8003056:	f000 f88d 	bl	8003174 <Error_Handler>
  }
}
 800305a:	bf00      	nop
 800305c:	3758      	adds	r7, #88	; 0x58
 800305e:	46bd      	mov	sp, r7
 8003060:	bd80      	pop	{r7, pc}
	...

08003064 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003068:	4b1b      	ldr	r3, [pc, #108]	; (80030d8 <MX_I2C1_Init+0x74>)
 800306a:	4a1c      	ldr	r2, [pc, #112]	; (80030dc <MX_I2C1_Init+0x78>)
 800306c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x0000020B;
 800306e:	4b1a      	ldr	r3, [pc, #104]	; (80030d8 <MX_I2C1_Init+0x74>)
 8003070:	f240 220b 	movw	r2, #523	; 0x20b
 8003074:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8003076:	4b18      	ldr	r3, [pc, #96]	; (80030d8 <MX_I2C1_Init+0x74>)
 8003078:	2200      	movs	r2, #0
 800307a:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800307c:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <MX_I2C1_Init+0x74>)
 800307e:	2201      	movs	r2, #1
 8003080:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003082:	4b15      	ldr	r3, [pc, #84]	; (80030d8 <MX_I2C1_Init+0x74>)
 8003084:	2200      	movs	r2, #0
 8003086:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003088:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <MX_I2C1_Init+0x74>)
 800308a:	2200      	movs	r2, #0
 800308c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800308e:	4b12      	ldr	r3, [pc, #72]	; (80030d8 <MX_I2C1_Init+0x74>)
 8003090:	2200      	movs	r2, #0
 8003092:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003094:	4b10      	ldr	r3, [pc, #64]	; (80030d8 <MX_I2C1_Init+0x74>)
 8003096:	2200      	movs	r2, #0
 8003098:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800309a:	4b0f      	ldr	r3, [pc, #60]	; (80030d8 <MX_I2C1_Init+0x74>)
 800309c:	2200      	movs	r2, #0
 800309e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80030a0:	480d      	ldr	r0, [pc, #52]	; (80030d8 <MX_I2C1_Init+0x74>)
 80030a2:	f7fe f8c3 	bl	800122c <HAL_I2C_Init>
 80030a6:	4603      	mov	r3, r0
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d001      	beq.n	80030b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80030ac:	f000 f862 	bl	8003174 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80030b0:	2100      	movs	r1, #0
 80030b2:	4809      	ldr	r0, [pc, #36]	; (80030d8 <MX_I2C1_Init+0x74>)
 80030b4:	f7fe fc8e 	bl	80019d4 <HAL_I2CEx_ConfigAnalogFilter>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 80030be:	f000 f859 	bl	8003174 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80030c2:	2100      	movs	r1, #0
 80030c4:	4804      	ldr	r0, [pc, #16]	; (80030d8 <MX_I2C1_Init+0x74>)
 80030c6:	f7fe fcd0 	bl	8001a6a <HAL_I2CEx_ConfigDigitalFilter>
 80030ca:	4603      	mov	r3, r0
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d001      	beq.n	80030d4 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 80030d0:	f000 f850 	bl	8003174 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80030d4:	bf00      	nop
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	200004dc 	.word	0x200004dc
 80030dc:	40005400 	.word	0x40005400

080030e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b088      	sub	sp, #32
 80030e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e6:	f107 030c 	add.w	r3, r7, #12
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	609a      	str	r2, [r3, #8]
 80030f2:	60da      	str	r2, [r3, #12]
 80030f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80030f6:	4b1d      	ldr	r3, [pc, #116]	; (800316c <MX_GPIO_Init+0x8c>)
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	4a1c      	ldr	r2, [pc, #112]	; (800316c <MX_GPIO_Init+0x8c>)
 80030fc:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003100:	6153      	str	r3, [r2, #20]
 8003102:	4b1a      	ldr	r3, [pc, #104]	; (800316c <MX_GPIO_Init+0x8c>)
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800310a:	60bb      	str	r3, [r7, #8]
 800310c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800310e:	4b17      	ldr	r3, [pc, #92]	; (800316c <MX_GPIO_Init+0x8c>)
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	4a16      	ldr	r2, [pc, #88]	; (800316c <MX_GPIO_Init+0x8c>)
 8003114:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003118:	6153      	str	r3, [r2, #20]
 800311a:	4b14      	ldr	r3, [pc, #80]	; (800316c <MX_GPIO_Init+0x8c>)
 800311c:	695b      	ldr	r3, [r3, #20]
 800311e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003122:	607b      	str	r3, [r7, #4]
 8003124:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003126:	4b11      	ldr	r3, [pc, #68]	; (800316c <MX_GPIO_Init+0x8c>)
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	4a10      	ldr	r2, [pc, #64]	; (800316c <MX_GPIO_Init+0x8c>)
 800312c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003130:	6153      	str	r3, [r2, #20]
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <MX_GPIO_Init+0x8c>)
 8003134:	695b      	ldr	r3, [r3, #20]
 8003136:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800313a:	603b      	str	r3, [r7, #0]
 800313c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_3, GPIO_PIN_RESET);
 800313e:	2200      	movs	r2, #0
 8003140:	2108      	movs	r1, #8
 8003142:	480b      	ldr	r0, [pc, #44]	; (8003170 <MX_GPIO_Init+0x90>)
 8003144:	f7fe f85a 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003148:	2308      	movs	r3, #8
 800314a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800314c:	2301      	movs	r3, #1
 800314e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003150:	2300      	movs	r3, #0
 8003152:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003154:	2300      	movs	r3, #0
 8003156:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003158:	f107 030c 	add.w	r3, r7, #12
 800315c:	4619      	mov	r1, r3
 800315e:	4804      	ldr	r0, [pc, #16]	; (8003170 <MX_GPIO_Init+0x90>)
 8003160:	f7fd fed6 	bl	8000f10 <HAL_GPIO_Init>

}
 8003164:	bf00      	nop
 8003166:	3720      	adds	r7, #32
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	40021000 	.word	0x40021000
 8003170:	48000400 	.word	0x48000400

08003174 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003178:	bf00      	nop
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr
	...

08003184 <set_oled_addr>:
} SSD1306_t;

/* Private variable */
static SSD1306_t SSD1306;

void set_oled_addr(uint8_t addr){
 8003184:	b480      	push	{r7}
 8003186:	b083      	sub	sp, #12
 8003188:	af00      	add	r7, sp, #0
 800318a:	4603      	mov	r3, r0
 800318c:	71fb      	strb	r3, [r7, #7]
	oled_addr = addr;
 800318e:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <set_oled_addr+0x1c>)
 8003190:	79fb      	ldrb	r3, [r7, #7]
 8003192:	7013      	strb	r3, [r2, #0]
}
 8003194:	bf00      	nop
 8003196:	370c      	adds	r7, #12
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	20000574 	.word	0x20000574

080031a4 <SSD1306_Init>:
uint8_t SSD1306_Init(void) {
 80031a4:	b580      	push	{r7, lr}
 80031a6:	b082      	sub	sp, #8
 80031a8:	af00      	add	r7, sp, #0

	/* Init I2C */
//	ssd1306_I2C_Init();
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c_current, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80031aa:	f644 6320 	movw	r3, #20000	; 0x4e20
 80031ae:	2201      	movs	r2, #1
 80031b0:	2178      	movs	r1, #120	; 0x78
 80031b2:	4874      	ldr	r0, [pc, #464]	; (8003384 <SSD1306_Init+0x1e0>)
 80031b4:	f7fe f9ca 	bl	800154c <HAL_I2C_IsDeviceReady>
 80031b8:	4603      	mov	r3, r0
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d001      	beq.n	80031c2 <SSD1306_Init+0x1e>
		/* Return false */
		return 0;
 80031be:	2300      	movs	r3, #0
 80031c0:	e0dc      	b.n	800337c <SSD1306_Init+0x1d8>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80031c2:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80031c6:	607b      	str	r3, [r7, #4]
	while(p>0)
 80031c8:	e002      	b.n	80031d0 <SSD1306_Init+0x2c>
		p--;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	3b01      	subs	r3, #1
 80031ce:	607b      	str	r3, [r7, #4]
	while(p>0)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d1f9      	bne.n	80031ca <SSD1306_Init+0x26>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 80031d6:	4b6c      	ldr	r3, [pc, #432]	; (8003388 <SSD1306_Init+0x1e4>)
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	22ae      	movs	r2, #174	; 0xae
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f000 fdb2 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 80031e4:	4b68      	ldr	r3, [pc, #416]	; (8003388 <SSD1306_Init+0x1e4>)
 80031e6:	781b      	ldrb	r3, [r3, #0]
 80031e8:	2220      	movs	r2, #32
 80031ea:	2100      	movs	r1, #0
 80031ec:	4618      	mov	r0, r3
 80031ee:	f000 fdab 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 80031f2:	4b65      	ldr	r3, [pc, #404]	; (8003388 <SSD1306_Init+0x1e4>)
 80031f4:	781b      	ldrb	r3, [r3, #0]
 80031f6:	2210      	movs	r2, #16
 80031f8:	2100      	movs	r1, #0
 80031fa:	4618      	mov	r0, r3
 80031fc:	f000 fda4 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8003200:	4b61      	ldr	r3, [pc, #388]	; (8003388 <SSD1306_Init+0x1e4>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	22b0      	movs	r2, #176	; 0xb0
 8003206:	2100      	movs	r1, #0
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fd9d 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 800320e:	4b5e      	ldr	r3, [pc, #376]	; (8003388 <SSD1306_Init+0x1e4>)
 8003210:	781b      	ldrb	r3, [r3, #0]
 8003212:	22c8      	movs	r2, #200	; 0xc8
 8003214:	2100      	movs	r1, #0
 8003216:	4618      	mov	r0, r3
 8003218:	f000 fd96 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 800321c:	4b5a      	ldr	r3, [pc, #360]	; (8003388 <SSD1306_Init+0x1e4>)
 800321e:	781b      	ldrb	r3, [r3, #0]
 8003220:	2200      	movs	r2, #0
 8003222:	2100      	movs	r1, #0
 8003224:	4618      	mov	r0, r3
 8003226:	f000 fd8f 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800322a:	4b57      	ldr	r3, [pc, #348]	; (8003388 <SSD1306_Init+0x1e4>)
 800322c:	781b      	ldrb	r3, [r3, #0]
 800322e:	2210      	movs	r2, #16
 8003230:	2100      	movs	r1, #0
 8003232:	4618      	mov	r0, r3
 8003234:	f000 fd88 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8003238:	4b53      	ldr	r3, [pc, #332]	; (8003388 <SSD1306_Init+0x1e4>)
 800323a:	781b      	ldrb	r3, [r3, #0]
 800323c:	2240      	movs	r2, #64	; 0x40
 800323e:	2100      	movs	r1, #0
 8003240:	4618      	mov	r0, r3
 8003242:	f000 fd81 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 8003246:	4b50      	ldr	r3, [pc, #320]	; (8003388 <SSD1306_Init+0x1e4>)
 8003248:	781b      	ldrb	r3, [r3, #0]
 800324a:	2281      	movs	r2, #129	; 0x81
 800324c:	2100      	movs	r1, #0
 800324e:	4618      	mov	r0, r3
 8003250:	f000 fd7a 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8003254:	4b4c      	ldr	r3, [pc, #304]	; (8003388 <SSD1306_Init+0x1e4>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	22ff      	movs	r2, #255	; 0xff
 800325a:	2100      	movs	r1, #0
 800325c:	4618      	mov	r0, r3
 800325e:	f000 fd73 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8003262:	4b49      	ldr	r3, [pc, #292]	; (8003388 <SSD1306_Init+0x1e4>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	22a1      	movs	r2, #161	; 0xa1
 8003268:	2100      	movs	r1, #0
 800326a:	4618      	mov	r0, r3
 800326c:	f000 fd6c 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 8003270:	4b45      	ldr	r3, [pc, #276]	; (8003388 <SSD1306_Init+0x1e4>)
 8003272:	781b      	ldrb	r3, [r3, #0]
 8003274:	22a6      	movs	r2, #166	; 0xa6
 8003276:	2100      	movs	r1, #0
 8003278:	4618      	mov	r0, r3
 800327a:	f000 fd65 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 800327e:	4b42      	ldr	r3, [pc, #264]	; (8003388 <SSD1306_Init+0x1e4>)
 8003280:	781b      	ldrb	r3, [r3, #0]
 8003282:	22a8      	movs	r2, #168	; 0xa8
 8003284:	2100      	movs	r1, #0
 8003286:	4618      	mov	r0, r3
 8003288:	f000 fd5e 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 800328c:	4b3e      	ldr	r3, [pc, #248]	; (8003388 <SSD1306_Init+0x1e4>)
 800328e:	781b      	ldrb	r3, [r3, #0]
 8003290:	223f      	movs	r2, #63	; 0x3f
 8003292:	2100      	movs	r1, #0
 8003294:	4618      	mov	r0, r3
 8003296:	f000 fd57 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800329a:	4b3b      	ldr	r3, [pc, #236]	; (8003388 <SSD1306_Init+0x1e4>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	22a4      	movs	r2, #164	; 0xa4
 80032a0:	2100      	movs	r1, #0
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fd50 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80032a8:	4b37      	ldr	r3, [pc, #220]	; (8003388 <SSD1306_Init+0x1e4>)
 80032aa:	781b      	ldrb	r3, [r3, #0]
 80032ac:	22d3      	movs	r2, #211	; 0xd3
 80032ae:	2100      	movs	r1, #0
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 fd49 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80032b6:	4b34      	ldr	r3, [pc, #208]	; (8003388 <SSD1306_Init+0x1e4>)
 80032b8:	781b      	ldrb	r3, [r3, #0]
 80032ba:	2200      	movs	r2, #0
 80032bc:	2100      	movs	r1, #0
 80032be:	4618      	mov	r0, r3
 80032c0:	f000 fd42 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80032c4:	4b30      	ldr	r3, [pc, #192]	; (8003388 <SSD1306_Init+0x1e4>)
 80032c6:	781b      	ldrb	r3, [r3, #0]
 80032c8:	22d5      	movs	r2, #213	; 0xd5
 80032ca:	2100      	movs	r1, #0
 80032cc:	4618      	mov	r0, r3
 80032ce:	f000 fd3b 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80032d2:	4b2d      	ldr	r3, [pc, #180]	; (8003388 <SSD1306_Init+0x1e4>)
 80032d4:	781b      	ldrb	r3, [r3, #0]
 80032d6:	22f0      	movs	r2, #240	; 0xf0
 80032d8:	2100      	movs	r1, #0
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fd34 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80032e0:	4b29      	ldr	r3, [pc, #164]	; (8003388 <SSD1306_Init+0x1e4>)
 80032e2:	781b      	ldrb	r3, [r3, #0]
 80032e4:	22d9      	movs	r2, #217	; 0xd9
 80032e6:	2100      	movs	r1, #0
 80032e8:	4618      	mov	r0, r3
 80032ea:	f000 fd2d 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80032ee:	4b26      	ldr	r3, [pc, #152]	; (8003388 <SSD1306_Init+0x1e4>)
 80032f0:	781b      	ldrb	r3, [r3, #0]
 80032f2:	2222      	movs	r2, #34	; 0x22
 80032f4:	2100      	movs	r1, #0
 80032f6:	4618      	mov	r0, r3
 80032f8:	f000 fd26 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80032fc:	4b22      	ldr	r3, [pc, #136]	; (8003388 <SSD1306_Init+0x1e4>)
 80032fe:	781b      	ldrb	r3, [r3, #0]
 8003300:	22da      	movs	r2, #218	; 0xda
 8003302:	2100      	movs	r1, #0
 8003304:	4618      	mov	r0, r3
 8003306:	f000 fd1f 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800330a:	4b1f      	ldr	r3, [pc, #124]	; (8003388 <SSD1306_Init+0x1e4>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	2212      	movs	r2, #18
 8003310:	2100      	movs	r1, #0
 8003312:	4618      	mov	r0, r3
 8003314:	f000 fd18 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003318:	4b1b      	ldr	r3, [pc, #108]	; (8003388 <SSD1306_Init+0x1e4>)
 800331a:	781b      	ldrb	r3, [r3, #0]
 800331c:	22db      	movs	r2, #219	; 0xdb
 800331e:	2100      	movs	r1, #0
 8003320:	4618      	mov	r0, r3
 8003322:	f000 fd11 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003326:	4b18      	ldr	r3, [pc, #96]	; (8003388 <SSD1306_Init+0x1e4>)
 8003328:	781b      	ldrb	r3, [r3, #0]
 800332a:	2220      	movs	r2, #32
 800332c:	2100      	movs	r1, #0
 800332e:	4618      	mov	r0, r3
 8003330:	f000 fd0a 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8003334:	4b14      	ldr	r3, [pc, #80]	; (8003388 <SSD1306_Init+0x1e4>)
 8003336:	781b      	ldrb	r3, [r3, #0]
 8003338:	228d      	movs	r2, #141	; 0x8d
 800333a:	2100      	movs	r1, #0
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fd03 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003342:	4b11      	ldr	r3, [pc, #68]	; (8003388 <SSD1306_Init+0x1e4>)
 8003344:	781b      	ldrb	r3, [r3, #0]
 8003346:	2214      	movs	r2, #20
 8003348:	2100      	movs	r1, #0
 800334a:	4618      	mov	r0, r3
 800334c:	f000 fcfc 	bl	8003d48 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003350:	4b0d      	ldr	r3, [pc, #52]	; (8003388 <SSD1306_Init+0x1e4>)
 8003352:	781b      	ldrb	r3, [r3, #0]
 8003354:	22af      	movs	r2, #175	; 0xaf
 8003356:	2100      	movs	r1, #0
 8003358:	4618      	mov	r0, r3
 800335a:	f000 fcf5 	bl	8003d48 <ssd1306_I2C_Write>
	
	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 800335e:	2000      	movs	r0, #0
 8003360:	f000 f850 	bl	8003404 <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8003364:	f000 f814 	bl	8003390 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 8003368:	4b08      	ldr	r3, [pc, #32]	; (800338c <SSD1306_Init+0x1e8>)
 800336a:	2200      	movs	r2, #0
 800336c:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 800336e:	4b07      	ldr	r3, [pc, #28]	; (800338c <SSD1306_Init+0x1e8>)
 8003370:	2200      	movs	r2, #0
 8003372:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8003374:	4b05      	ldr	r3, [pc, #20]	; (800338c <SSD1306_Init+0x1e8>)
 8003376:	2201      	movs	r2, #1
 8003378:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800337a:	2301      	movs	r3, #1
}
 800337c:	4618      	mov	r0, r3
 800337e:	3708      	adds	r7, #8
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	20000528 	.word	0x20000528
 8003388:	20000574 	.word	0x20000574
 800338c:	200004b8 	.word	0x200004b8

08003390 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8003390:	b580      	push	{r7, lr}
 8003392:	b082      	sub	sp, #8
 8003394:	af00      	add	r7, sp, #0
	uint8_t m;

	for (m = 0; m < 8; m++) {
 8003396:	2300      	movs	r3, #0
 8003398:	71fb      	strb	r3, [r7, #7]
 800339a:	e027      	b.n	80033ec <SSD1306_UpdateScreen+0x5c>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800339c:	4b17      	ldr	r3, [pc, #92]	; (80033fc <SSD1306_UpdateScreen+0x6c>)
 800339e:	7818      	ldrb	r0, [r3, #0]
 80033a0:	79fb      	ldrb	r3, [r7, #7]
 80033a2:	3b50      	subs	r3, #80	; 0x50
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	2100      	movs	r1, #0
 80033aa:	f000 fccd 	bl	8003d48 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80033ae:	4b13      	ldr	r3, [pc, #76]	; (80033fc <SSD1306_UpdateScreen+0x6c>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2200      	movs	r2, #0
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fcc6 	bl	8003d48 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80033bc:	4b0f      	ldr	r3, [pc, #60]	; (80033fc <SSD1306_UpdateScreen+0x6c>)
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	2210      	movs	r2, #16
 80033c2:	2100      	movs	r1, #0
 80033c4:	4618      	mov	r0, r3
 80033c6:	f000 fcbf 	bl	8003d48 <ssd1306_I2C_Write>

		/* Write multi data */
		ssd1306_I2C_WriteMulti(oled_addr, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 80033ca:	4b0c      	ldr	r3, [pc, #48]	; (80033fc <SSD1306_UpdateScreen+0x6c>)
 80033cc:	7818      	ldrb	r0, [r3, #0]
 80033ce:	79fa      	ldrb	r2, [r7, #7]
 80033d0:	4613      	mov	r3, r2
 80033d2:	019b      	lsls	r3, r3, #6
 80033d4:	4413      	add	r3, r2
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	4413      	add	r3, r2
 80033da:	4a09      	ldr	r2, [pc, #36]	; (8003400 <SSD1306_UpdateScreen+0x70>)
 80033dc:	441a      	add	r2, r3
 80033de:	2383      	movs	r3, #131	; 0x83
 80033e0:	2140      	movs	r1, #64	; 0x40
 80033e2:	f000 fc57 	bl	8003c94 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80033e6:	79fb      	ldrb	r3, [r7, #7]
 80033e8:	3301      	adds	r3, #1
 80033ea:	71fb      	strb	r3, [r7, #7]
 80033ec:	79fb      	ldrb	r3, [r7, #7]
 80033ee:	2b07      	cmp	r3, #7
 80033f0:	d9d4      	bls.n	800339c <SSD1306_UpdateScreen+0xc>
	}
}
 80033f2:	bf00      	nop
 80033f4:	3708      	adds	r7, #8
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}
 80033fa:	bf00      	nop
 80033fc:	20000574 	.word	0x20000574
 8003400:	200000a0 	.word	0x200000a0

08003404 <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 8003404:	b580      	push	{r7, lr}
 8003406:	b082      	sub	sp, #8
 8003408:	af00      	add	r7, sp, #0
 800340a:	4603      	mov	r3, r0
 800340c:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800340e:	79fb      	ldrb	r3, [r7, #7]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d101      	bne.n	8003418 <SSD1306_Fill+0x14>
 8003414:	2300      	movs	r3, #0
 8003416:	e000      	b.n	800341a <SSD1306_Fill+0x16>
 8003418:	23ff      	movs	r3, #255	; 0xff
 800341a:	f44f 6283 	mov.w	r2, #1048	; 0x418
 800341e:	4619      	mov	r1, r3
 8003420:	4803      	ldr	r0, [pc, #12]	; (8003430 <SSD1306_Fill+0x2c>)
 8003422:	f000 fe1a 	bl	800405a <memset>
}
 8003426:	bf00      	nop
 8003428:	3708      	adds	r7, #8
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
 800342e:	bf00      	nop
 8003430:	200000a0 	.word	0x200000a0

08003434 <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 8003434:	b490      	push	{r4, r7}
 8003436:	b082      	sub	sp, #8
 8003438:	af00      	add	r7, sp, #0
 800343a:	4603      	mov	r3, r0
 800343c:	80fb      	strh	r3, [r7, #6]
 800343e:	460b      	mov	r3, r1
 8003440:	80bb      	strh	r3, [r7, #4]
 8003442:	4613      	mov	r3, r2
 8003444:	70fb      	strb	r3, [r7, #3]
	if (
 8003446:	88fb      	ldrh	r3, [r7, #6]
 8003448:	2b82      	cmp	r3, #130	; 0x82
 800344a:	d858      	bhi.n	80034fe <SSD1306_DrawPixel+0xca>
		x >= SSD1306_WIDTH ||
 800344c:	88bb      	ldrh	r3, [r7, #4]
 800344e:	2b3f      	cmp	r3, #63	; 0x3f
 8003450:	d855      	bhi.n	80034fe <SSD1306_DrawPixel+0xca>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 8003452:	4b2d      	ldr	r3, [pc, #180]	; (8003508 <SSD1306_DrawPixel+0xd4>)
 8003454:	791b      	ldrb	r3, [r3, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d006      	beq.n	8003468 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 800345a:	78fb      	ldrb	r3, [r7, #3]
 800345c:	2b00      	cmp	r3, #0
 800345e:	bf0c      	ite	eq
 8003460:	2301      	moveq	r3, #1
 8003462:	2300      	movne	r3, #0
 8003464:	b2db      	uxtb	r3, r3
 8003466:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003468:	78fb      	ldrb	r3, [r7, #3]
 800346a:	2b01      	cmp	r3, #1
 800346c:	d122      	bne.n	80034b4 <SSD1306_DrawPixel+0x80>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800346e:	88f9      	ldrh	r1, [r7, #6]
 8003470:	88bb      	ldrh	r3, [r7, #4]
 8003472:	08db      	lsrs	r3, r3, #3
 8003474:	b298      	uxth	r0, r3
 8003476:	4602      	mov	r2, r0
 8003478:	4613      	mov	r3, r2
 800347a:	019b      	lsls	r3, r3, #6
 800347c:	4413      	add	r3, r2
 800347e:	005b      	lsls	r3, r3, #1
 8003480:	4413      	add	r3, r2
 8003482:	440b      	add	r3, r1
 8003484:	4a21      	ldr	r2, [pc, #132]	; (800350c <SSD1306_DrawPixel+0xd8>)
 8003486:	5cd3      	ldrb	r3, [r2, r3]
 8003488:	b25a      	sxtb	r2, r3
 800348a:	88bb      	ldrh	r3, [r7, #4]
 800348c:	f003 0307 	and.w	r3, r3, #7
 8003490:	2101      	movs	r1, #1
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	b25b      	sxtb	r3, r3
 8003498:	4313      	orrs	r3, r2
 800349a:	b25c      	sxtb	r4, r3
 800349c:	88f9      	ldrh	r1, [r7, #6]
 800349e:	4602      	mov	r2, r0
 80034a0:	4613      	mov	r3, r2
 80034a2:	019b      	lsls	r3, r3, #6
 80034a4:	4413      	add	r3, r2
 80034a6:	005b      	lsls	r3, r3, #1
 80034a8:	4413      	add	r3, r2
 80034aa:	440b      	add	r3, r1
 80034ac:	b2e1      	uxtb	r1, r4
 80034ae:	4a17      	ldr	r2, [pc, #92]	; (800350c <SSD1306_DrawPixel+0xd8>)
 80034b0:	54d1      	strb	r1, [r2, r3]
 80034b2:	e025      	b.n	8003500 <SSD1306_DrawPixel+0xcc>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80034b4:	88f9      	ldrh	r1, [r7, #6]
 80034b6:	88bb      	ldrh	r3, [r7, #4]
 80034b8:	08db      	lsrs	r3, r3, #3
 80034ba:	b298      	uxth	r0, r3
 80034bc:	4602      	mov	r2, r0
 80034be:	4613      	mov	r3, r2
 80034c0:	019b      	lsls	r3, r3, #6
 80034c2:	4413      	add	r3, r2
 80034c4:	005b      	lsls	r3, r3, #1
 80034c6:	4413      	add	r3, r2
 80034c8:	440b      	add	r3, r1
 80034ca:	4a10      	ldr	r2, [pc, #64]	; (800350c <SSD1306_DrawPixel+0xd8>)
 80034cc:	5cd3      	ldrb	r3, [r2, r3]
 80034ce:	b25a      	sxtb	r2, r3
 80034d0:	88bb      	ldrh	r3, [r7, #4]
 80034d2:	f003 0307 	and.w	r3, r3, #7
 80034d6:	2101      	movs	r1, #1
 80034d8:	fa01 f303 	lsl.w	r3, r1, r3
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	43db      	mvns	r3, r3
 80034e0:	b25b      	sxtb	r3, r3
 80034e2:	4013      	ands	r3, r2
 80034e4:	b25c      	sxtb	r4, r3
 80034e6:	88f9      	ldrh	r1, [r7, #6]
 80034e8:	4602      	mov	r2, r0
 80034ea:	4613      	mov	r3, r2
 80034ec:	019b      	lsls	r3, r3, #6
 80034ee:	4413      	add	r3, r2
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	4413      	add	r3, r2
 80034f4:	440b      	add	r3, r1
 80034f6:	b2e1      	uxtb	r1, r4
 80034f8:	4a04      	ldr	r2, [pc, #16]	; (800350c <SSD1306_DrawPixel+0xd8>)
 80034fa:	54d1      	strb	r1, [r2, r3]
 80034fc:	e000      	b.n	8003500 <SSD1306_DrawPixel+0xcc>
		return;
 80034fe:	bf00      	nop
	}
}
 8003500:	3708      	adds	r7, #8
 8003502:	46bd      	mov	sp, r7
 8003504:	bc90      	pop	{r4, r7}
 8003506:	4770      	bx	lr
 8003508:	200004b8 	.word	0x200004b8
 800350c:	200000a0 	.word	0x200000a0

08003510 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 8003510:	b480      	push	{r7}
 8003512:	b083      	sub	sp, #12
 8003514:	af00      	add	r7, sp, #0
 8003516:	4603      	mov	r3, r0
 8003518:	460a      	mov	r2, r1
 800351a:	80fb      	strh	r3, [r7, #6]
 800351c:	4613      	mov	r3, r2
 800351e:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 8003520:	4a05      	ldr	r2, [pc, #20]	; (8003538 <SSD1306_GotoXY+0x28>)
 8003522:	88fb      	ldrh	r3, [r7, #6]
 8003524:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 8003526:	4a04      	ldr	r2, [pc, #16]	; (8003538 <SSD1306_GotoXY+0x28>)
 8003528:	88bb      	ldrh	r3, [r7, #4]
 800352a:	8053      	strh	r3, [r2, #2]
}
 800352c:	bf00      	nop
 800352e:	370c      	adds	r7, #12
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	200004b8 	.word	0x200004b8

0800353c <SSD1306_Putc>:

char SSD1306_Putc(uint8_t ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 800353c:	b580      	push	{r7, lr}
 800353e:	b086      	sub	sp, #24
 8003540:	af00      	add	r7, sp, #0
 8003542:	4603      	mov	r3, r0
 8003544:	6039      	str	r1, [r7, #0]
 8003546:	71fb      	strb	r3, [r7, #7]
 8003548:	4613      	mov	r3, r2
 800354a:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 800354c:	4b3a      	ldr	r3, [pc, #232]	; (8003638 <SSD1306_Putc+0xfc>)
 800354e:	881b      	ldrh	r3, [r3, #0]
 8003550:	461a      	mov	r2, r3
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	781b      	ldrb	r3, [r3, #0]
 8003556:	4413      	add	r3, r2
	if (
 8003558:	2b82      	cmp	r3, #130	; 0x82
 800355a:	dc07      	bgt.n	800356c <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 800355c:	4b36      	ldr	r3, [pc, #216]	; (8003638 <SSD1306_Putc+0xfc>)
 800355e:	885b      	ldrh	r3, [r3, #2]
 8003560:	461a      	mov	r2, r3
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	785b      	ldrb	r3, [r3, #1]
 8003566:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8003568:	2b3f      	cmp	r3, #63	; 0x3f
 800356a:	dd01      	ble.n	8003570 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 800356c:	2300      	movs	r3, #0
 800356e:	e05e      	b.n	800362e <SSD1306_Putc+0xf2>
	}

	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8003570:	2300      	movs	r3, #0
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	e04b      	b.n	800360e <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	685a      	ldr	r2, [r3, #4]
 800357a:	79fb      	ldrb	r3, [r7, #7]
 800357c:	3b20      	subs	r3, #32
 800357e:	6839      	ldr	r1, [r7, #0]
 8003580:	7849      	ldrb	r1, [r1, #1]
 8003582:	fb01 f303 	mul.w	r3, r1, r3
 8003586:	4619      	mov	r1, r3
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	440b      	add	r3, r1
 800358c:	005b      	lsls	r3, r3, #1
 800358e:	4413      	add	r3, r2
 8003590:	881b      	ldrh	r3, [r3, #0]
 8003592:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 8003594:	2300      	movs	r3, #0
 8003596:	613b      	str	r3, [r7, #16]
 8003598:	e030      	b.n	80035fc <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 800359a:	68fa      	ldr	r2, [r7, #12]
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	fa02 f303 	lsl.w	r3, r2, r3
 80035a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d010      	beq.n	80035cc <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 80035aa:	4b23      	ldr	r3, [pc, #140]	; (8003638 <SSD1306_Putc+0xfc>)
 80035ac:	881a      	ldrh	r2, [r3, #0]
 80035ae:	693b      	ldr	r3, [r7, #16]
 80035b0:	b29b      	uxth	r3, r3
 80035b2:	4413      	add	r3, r2
 80035b4:	b298      	uxth	r0, r3
 80035b6:	4b20      	ldr	r3, [pc, #128]	; (8003638 <SSD1306_Putc+0xfc>)
 80035b8:	885a      	ldrh	r2, [r3, #2]
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	b29b      	uxth	r3, r3
 80035be:	4413      	add	r3, r2
 80035c0:	b29b      	uxth	r3, r3
 80035c2:	79ba      	ldrb	r2, [r7, #6]
 80035c4:	4619      	mov	r1, r3
 80035c6:	f7ff ff35 	bl	8003434 <SSD1306_DrawPixel>
 80035ca:	e014      	b.n	80035f6 <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 80035cc:	4b1a      	ldr	r3, [pc, #104]	; (8003638 <SSD1306_Putc+0xfc>)
 80035ce:	881a      	ldrh	r2, [r3, #0]
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	b29b      	uxth	r3, r3
 80035d4:	4413      	add	r3, r2
 80035d6:	b298      	uxth	r0, r3
 80035d8:	4b17      	ldr	r3, [pc, #92]	; (8003638 <SSD1306_Putc+0xfc>)
 80035da:	885a      	ldrh	r2, [r3, #2]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	b29b      	uxth	r3, r3
 80035e0:	4413      	add	r3, r2
 80035e2:	b299      	uxth	r1, r3
 80035e4:	79bb      	ldrb	r3, [r7, #6]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	bf0c      	ite	eq
 80035ea:	2301      	moveq	r3, #1
 80035ec:	2300      	movne	r3, #0
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	461a      	mov	r2, r3
 80035f2:	f7ff ff1f 	bl	8003434 <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	3301      	adds	r3, #1
 80035fa:	613b      	str	r3, [r7, #16]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	781b      	ldrb	r3, [r3, #0]
 8003600:	461a      	mov	r2, r3
 8003602:	693b      	ldr	r3, [r7, #16]
 8003604:	4293      	cmp	r3, r2
 8003606:	d3c8      	bcc.n	800359a <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 8003608:	697b      	ldr	r3, [r7, #20]
 800360a:	3301      	adds	r3, #1
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	785b      	ldrb	r3, [r3, #1]
 8003612:	461a      	mov	r2, r3
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	4293      	cmp	r3, r2
 8003618:	d3ad      	bcc.n	8003576 <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 800361a:	4b07      	ldr	r3, [pc, #28]	; (8003638 <SSD1306_Putc+0xfc>)
 800361c:	881a      	ldrh	r2, [r3, #0]
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	781b      	ldrb	r3, [r3, #0]
 8003622:	b29b      	uxth	r3, r3
 8003624:	4413      	add	r3, r2
 8003626:	b29a      	uxth	r2, r3
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <SSD1306_Putc+0xfc>)
 800362a:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 800362c:	79fb      	ldrb	r3, [r7, #7]
}
 800362e:	4618      	mov	r0, r3
 8003630:	3718      	adds	r7, #24
 8003632:	46bd      	mov	sp, r7
 8003634:	bd80      	pop	{r7, pc}
 8003636:	bf00      	nop
 8003638:	200004b8 	.word	0x200004b8

0800363c <SSD1306_Putint>:

void SSD1306_Putint(int data, uint8_t slot) {
 800363c:	b5b0      	push	{r4, r5, r7, lr}
 800363e:	b088      	sub	sp, #32
 8003640:	af00      	add	r7, sp, #0
 8003642:	6078      	str	r0, [r7, #4]
 8003644:	460b      	mov	r3, r1
 8003646:	70fb      	strb	r3, [r7, #3]
 8003648:	466b      	mov	r3, sp
 800364a:	461d      	mov	r5, r3

	char menos_char = ' ';
 800364c:	2320      	movs	r3, #32
 800364e:	767b      	strb	r3, [r7, #25]
	if (data < 0) {
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	da04      	bge.n	8003660 <SSD1306_Putint+0x24>
		data = -data;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	425b      	negs	r3, r3
 800365a:	607b      	str	r3, [r7, #4]
		menos_char = '-';
 800365c:	232d      	movs	r3, #45	; 0x2d
 800365e:	767b      	strb	r3, [r7, #25]
	}

	int size = size_int(data);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 faab 	bl	8003bbc <size_int>
 8003666:	4603      	mov	r3, r0
 8003668:	617b      	str	r3, [r7, #20]
	char data_char[size];		// String de chars=
 800366a:	6978      	ldr	r0, [r7, #20]
 800366c:	1e43      	subs	r3, r0, #1
 800366e:	613b      	str	r3, [r7, #16]
 8003670:	4603      	mov	r3, r0
 8003672:	4619      	mov	r1, r3
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	f04f 0300 	mov.w	r3, #0
 800367c:	f04f 0400 	mov.w	r4, #0
 8003680:	00d4      	lsls	r4, r2, #3
 8003682:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003686:	00cb      	lsls	r3, r1, #3
 8003688:	4603      	mov	r3, r0
 800368a:	4619      	mov	r1, r3
 800368c:	f04f 0200 	mov.w	r2, #0
 8003690:	f04f 0300 	mov.w	r3, #0
 8003694:	f04f 0400 	mov.w	r4, #0
 8003698:	00d4      	lsls	r4, r2, #3
 800369a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800369e:	00cb      	lsls	r3, r1, #3
 80036a0:	4603      	mov	r3, r0
 80036a2:	3307      	adds	r3, #7
 80036a4:	08db      	lsrs	r3, r3, #3
 80036a6:	00db      	lsls	r3, r3, #3
 80036a8:	ebad 0d03 	sub.w	sp, sp, r3
 80036ac:	466b      	mov	r3, sp
 80036ae:	3300      	adds	r3, #0
 80036b0:	60fb      	str	r3, [r7, #12]
	sprintf(data_char,"%d", data);	// Cada numero del int en un char
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	4946      	ldr	r1, [pc, #280]	; (80037d0 <SSD1306_Putint+0x194>)
 80036b8:	4618      	mov	r0, r3
 80036ba:	f000 fcd7 	bl	800406c <siprintf>

	uint16_t x_slot = 0;
 80036be:	2300      	movs	r3, #0
 80036c0:	837b      	strh	r3, [r7, #26]
	uint16_t y_slot = 0;
 80036c2:	2300      	movs	r3, #0
 80036c4:	83bb      	strh	r3, [r7, #28]
	uint8_t slot_mini = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	77fb      	strb	r3, [r7, #31]
	switch (slot) {
 80036ca:	78fb      	ldrb	r3, [r7, #3]
 80036cc:	3b01      	subs	r3, #1
 80036ce:	2b04      	cmp	r3, #4
 80036d0:	d829      	bhi.n	8003726 <SSD1306_Putint+0xea>
 80036d2:	a201      	add	r2, pc, #4	; (adr r2, 80036d8 <SSD1306_Putint+0x9c>)
 80036d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036d8:	080036ed 	.word	0x080036ed
 80036dc:	080036f7 	.word	0x080036f7
 80036e0:	08003701 	.word	0x08003701
 80036e4:	0800370b 	.word	0x0800370b
 80036e8:	08003719 	.word	0x08003719
	case 1:
		x_slot = 2;
 80036ec:	2302      	movs	r3, #2
 80036ee:	837b      	strh	r3, [r7, #26]
		y_slot = 0;
 80036f0:	2300      	movs	r3, #0
 80036f2:	83bb      	strh	r3, [r7, #28]
		break;
 80036f4:	e017      	b.n	8003726 <SSD1306_Putint+0xea>
	case 2:
		x_slot = 2;
 80036f6:	2302      	movs	r3, #2
 80036f8:	837b      	strh	r3, [r7, #26]
		y_slot = 17;
 80036fa:	2311      	movs	r3, #17
 80036fc:	83bb      	strh	r3, [r7, #28]
		break;
 80036fe:	e012      	b.n	8003726 <SSD1306_Putint+0xea>
	case 3:
		x_slot = 2;
 8003700:	2302      	movs	r3, #2
 8003702:	837b      	strh	r3, [r7, #26]
		y_slot = 35;
 8003704:	2323      	movs	r3, #35	; 0x23
 8003706:	83bb      	strh	r3, [r7, #28]
		break;
 8003708:	e00d      	b.n	8003726 <SSD1306_Putint+0xea>
	case 4:
		x_slot = 22;
 800370a:	2316      	movs	r3, #22
 800370c:	837b      	strh	r3, [r7, #26]
		y_slot = 53;
 800370e:	2335      	movs	r3, #53	; 0x35
 8003710:	83bb      	strh	r3, [r7, #28]
		slot_mini = 1;
 8003712:	2301      	movs	r3, #1
 8003714:	77fb      	strb	r3, [r7, #31]
		break;
 8003716:	e006      	b.n	8003726 <SSD1306_Putint+0xea>
	case 5:
		x_slot = 70;
 8003718:	2346      	movs	r3, #70	; 0x46
 800371a:	837b      	strh	r3, [r7, #26]
		y_slot = 53;
 800371c:	2335      	movs	r3, #53	; 0x35
 800371e:	83bb      	strh	r3, [r7, #28]
		slot_mini = 1;
 8003720:	2301      	movs	r3, #1
 8003722:	77fb      	strb	r3, [r7, #31]
		break;
 8003724:	bf00      	nop
	}
	if (slot_mini == 1){
 8003726:	7ffb      	ldrb	r3, [r7, #31]
 8003728:	2b01      	cmp	r3, #1
 800372a:	d127      	bne.n	800377c <SSD1306_Putint+0x140>
		SSD1306_GotoXY (x_slot,y_slot);				// Select x and y from the selected slot
 800372c:	8bba      	ldrh	r2, [r7, #28]
 800372e:	8b7b      	ldrh	r3, [r7, #26]
 8003730:	4611      	mov	r1, r2
 8003732:	4618      	mov	r0, r3
 8003734:	f7ff feec 	bl	8003510 <SSD1306_GotoXY>
		SSD1306_Puts ("       ", &Font_7x10, 1);	// Reset the slot before writing (7 blank chars for small slots)
 8003738:	2201      	movs	r2, #1
 800373a:	4926      	ldr	r1, [pc, #152]	; (80037d4 <SSD1306_Putint+0x198>)
 800373c:	4826      	ldr	r0, [pc, #152]	; (80037d8 <SSD1306_Putint+0x19c>)
 800373e:	f000 fa71 	bl	8003c24 <SSD1306_Puts>
		SSD1306_GotoXY (x_slot,y_slot);				// Come back to the initial position
 8003742:	8bba      	ldrh	r2, [r7, #28]
 8003744:	8b7b      	ldrh	r3, [r7, #26]
 8003746:	4611      	mov	r1, r2
 8003748:	4618      	mov	r0, r3
 800374a:	f7ff fee1 	bl	8003510 <SSD1306_GotoXY>
		SSD1306_Putc (menos_char, &Font_7x10, 1);	// Write minus char if necessary
 800374e:	7e7b      	ldrb	r3, [r7, #25]
 8003750:	2201      	movs	r2, #1
 8003752:	4920      	ldr	r1, [pc, #128]	; (80037d4 <SSD1306_Putint+0x198>)
 8003754:	4618      	mov	r0, r3
 8003756:	f7ff fef1 	bl	800353c <SSD1306_Putc>
		SSD1306_GotoXY (x_slot+7,y_slot);			// Shif a char correspondig to the minus char
 800375a:	8b7b      	ldrh	r3, [r7, #26]
 800375c:	3307      	adds	r3, #7
 800375e:	b29b      	uxth	r3, r3
 8003760:	8bba      	ldrh	r2, [r7, #28]
 8003762:	4611      	mov	r1, r2
 8003764:	4618      	mov	r0, r3
 8003766:	f7ff fed3 	bl	8003510 <SSD1306_GotoXY>
		SSD1306_Puts (data_char, &Font_7x10, 1);	// Write the value
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	2201      	movs	r2, #1
 800376e:	4919      	ldr	r1, [pc, #100]	; (80037d4 <SSD1306_Putint+0x198>)
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fa57 	bl	8003c24 <SSD1306_Puts>
//		SSD1306_UpdateScreen();						// Update the screen
		return;
 8003776:	bf00      	nop
 8003778:	46ad      	mov	sp, r5
 800377a:	e025      	b.n	80037c8 <SSD1306_Putint+0x18c>
	}
	SSD1306_GotoXY (x_slot,y_slot);
 800377c:	8bba      	ldrh	r2, [r7, #28]
 800377e:	8b7b      	ldrh	r3, [r7, #26]
 8003780:	4611      	mov	r1, r2
 8003782:	4618      	mov	r0, r3
 8003784:	f7ff fec4 	bl	8003510 <SSD1306_GotoXY>
	SSD1306_Puts ("         ", &Font_11x18, 1);		// Reset the slot before writing (9 blank chars for small slots)
 8003788:	2201      	movs	r2, #1
 800378a:	4914      	ldr	r1, [pc, #80]	; (80037dc <SSD1306_Putint+0x1a0>)
 800378c:	4814      	ldr	r0, [pc, #80]	; (80037e0 <SSD1306_Putint+0x1a4>)
 800378e:	f000 fa49 	bl	8003c24 <SSD1306_Puts>
	SSD1306_GotoXY (x_slot,y_slot);
 8003792:	8bba      	ldrh	r2, [r7, #28]
 8003794:	8b7b      	ldrh	r3, [r7, #26]
 8003796:	4611      	mov	r1, r2
 8003798:	4618      	mov	r0, r3
 800379a:	f7ff feb9 	bl	8003510 <SSD1306_GotoXY>
	SSD1306_Putc (menos_char, &Font_11x18, 1);
 800379e:	7e7b      	ldrb	r3, [r7, #25]
 80037a0:	2201      	movs	r2, #1
 80037a2:	490e      	ldr	r1, [pc, #56]	; (80037dc <SSD1306_Putint+0x1a0>)
 80037a4:	4618      	mov	r0, r3
 80037a6:	f7ff fec9 	bl	800353c <SSD1306_Putc>
	SSD1306_GotoXY (x_slot+11,y_slot);
 80037aa:	8b7b      	ldrh	r3, [r7, #26]
 80037ac:	330b      	adds	r3, #11
 80037ae:	b29b      	uxth	r3, r3
 80037b0:	8bba      	ldrh	r2, [r7, #28]
 80037b2:	4611      	mov	r1, r2
 80037b4:	4618      	mov	r0, r3
 80037b6:	f7ff feab 	bl	8003510 <SSD1306_GotoXY>
	SSD1306_Puts (data_char, &Font_11x18, 1);
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	2201      	movs	r2, #1
 80037be:	4907      	ldr	r1, [pc, #28]	; (80037dc <SSD1306_Putint+0x1a0>)
 80037c0:	4618      	mov	r0, r3
 80037c2:	f000 fa2f 	bl	8003c24 <SSD1306_Puts>
 80037c6:	46ad      	mov	sp, r5
//	SSD1306_UpdateScreen();
}
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bdb0      	pop	{r4, r5, r7, pc}
 80037ce:	bf00      	nop
 80037d0:	08006030 	.word	0x08006030
 80037d4:	20000008 	.word	0x20000008
 80037d8:	08006034 	.word	0x08006034
 80037dc:	20000010 	.word	0x20000010
 80037e0:	0800603c 	.word	0x0800603c
 80037e4:	00000000 	.word	0x00000000

080037e8 <double_str>:

char* double_str(double data, uint8_t decimales){
 80037e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80037ec:	b095      	sub	sp, #84	; 0x54
 80037ee:	af00      	add	r7, sp, #0
 80037f0:	ed87 0b02 	vstr	d0, [r7, #8]
 80037f4:	4603      	mov	r3, r0
 80037f6:	71fb      	strb	r3, [r7, #7]
 80037f8:	466b      	mov	r3, sp
 80037fa:	461e      	mov	r6, r3
	char negativo = ' ';
 80037fc:	2320      	movs	r3, #32
 80037fe:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	if (data < 0) {
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	f04f 0300 	mov.w	r3, #0
 800380a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800380e:	f7fd f95d 	bl	8000acc <__aeabi_dcmplt>
 8003812:	4603      	mov	r3, r0
 8003814:	2b00      	cmp	r3, #0
 8003816:	d008      	beq.n	800382a <double_str+0x42>
		data = -data;
 8003818:	68bb      	ldr	r3, [r7, #8]
 800381a:	60bb      	str	r3, [r7, #8]
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 8003822:	60fb      	str	r3, [r7, #12]
		negativo = '-';
 8003824:	232d      	movs	r3, #45	; 0x2d
 8003826:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	}

	int potencia_10 = pow(10, decimales);
 800382a:	79fb      	ldrb	r3, [r7, #7]
 800382c:	4618      	mov	r0, r3
 800382e:	f7fc fe61 	bl	80004f4 <__aeabi_ui2d>
 8003832:	4603      	mov	r3, r0
 8003834:	460c      	mov	r4, r1
 8003836:	ec44 3b11 	vmov	d1, r3, r4
 800383a:	ed9f 0b99 	vldr	d0, [pc, #612]	; 8003aa0 <double_str+0x2b8>
 800383e:	f001 f951 	bl	8004ae4 <pow>
 8003842:	ec54 3b10 	vmov	r3, r4, d0
 8003846:	4618      	mov	r0, r3
 8003848:	4621      	mov	r1, r4
 800384a:	f7fd f97d 	bl	8000b48 <__aeabi_d2iz>
 800384e:	4603      	mov	r3, r0
 8003850:	643b      	str	r3, [r7, #64]	; 0x40
	double p_entera_f = trunc(data);
 8003852:	ed97 0b02 	vldr	d0, [r7, #8]
 8003856:	f001 f88b 	bl	8004970 <trunc>
 800385a:	ed87 0b0e 	vstr	d0, [r7, #56]	; 0x38
	double p_decimal_f = data*potencia_10 - p_entera_f*potencia_10;
 800385e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003860:	f7fc fe58 	bl	8000514 <__aeabi_i2d>
 8003864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003868:	f7fc febe 	bl	80005e8 <__aeabi_dmul>
 800386c:	4603      	mov	r3, r0
 800386e:	460c      	mov	r4, r1
 8003870:	4625      	mov	r5, r4
 8003872:	461c      	mov	r4, r3
 8003874:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003876:	f7fc fe4d 	bl	8000514 <__aeabi_i2d>
 800387a:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800387e:	f7fc feb3 	bl	80005e8 <__aeabi_dmul>
 8003882:	4602      	mov	r2, r0
 8003884:	460b      	mov	r3, r1
 8003886:	4620      	mov	r0, r4
 8003888:	4629      	mov	r1, r5
 800388a:	f7fc fcf5 	bl	8000278 <__aeabi_dsub>
 800388e:	4603      	mov	r3, r0
 8003890:	460c      	mov	r4, r1
 8003892:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
	int p_entera = p_entera_f;
 8003896:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800389a:	f7fd f955 	bl	8000b48 <__aeabi_d2iz>
 800389e:	4603      	mov	r3, r0
 80038a0:	62fb      	str	r3, [r7, #44]	; 0x2c
	int p_decimal = p_decimal_f;
 80038a2:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80038a6:	f7fd f94f 	bl	8000b48 <__aeabi_d2iz>
 80038aa:	4603      	mov	r3, r0
 80038ac:	64bb      	str	r3, [r7, #72]	; 0x48

	int size = size_int(p_entera);
 80038ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80038b0:	f000 f984 	bl	8003bbc <size_int>
 80038b4:	4603      	mov	r3, r0
 80038b6:	62bb      	str	r3, [r7, #40]	; 0x28
	char p_entera_char[size];		// String de chars
 80038b8:	6abd      	ldr	r5, [r7, #40]	; 0x28
 80038ba:	1e6b      	subs	r3, r5, #1
 80038bc:	627b      	str	r3, [r7, #36]	; 0x24
 80038be:	462b      	mov	r3, r5
 80038c0:	4619      	mov	r1, r3
 80038c2:	f04f 0200 	mov.w	r2, #0
 80038c6:	f04f 0300 	mov.w	r3, #0
 80038ca:	f04f 0400 	mov.w	r4, #0
 80038ce:	00d4      	lsls	r4, r2, #3
 80038d0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80038d4:	00cb      	lsls	r3, r1, #3
 80038d6:	462b      	mov	r3, r5
 80038d8:	4619      	mov	r1, r3
 80038da:	f04f 0200 	mov.w	r2, #0
 80038de:	f04f 0300 	mov.w	r3, #0
 80038e2:	f04f 0400 	mov.w	r4, #0
 80038e6:	00d4      	lsls	r4, r2, #3
 80038e8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80038ec:	00cb      	lsls	r3, r1, #3
 80038ee:	462b      	mov	r3, r5
 80038f0:	3307      	adds	r3, #7
 80038f2:	08db      	lsrs	r3, r3, #3
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	ebad 0d03 	sub.w	sp, sp, r3
 80038fa:	466b      	mov	r3, sp
 80038fc:	3300      	adds	r3, #0
 80038fe:	623b      	str	r3, [r7, #32]
	sprintf(p_entera_char,"%d", p_entera);	// Cada numero del int en un char
 8003900:	6a3b      	ldr	r3, [r7, #32]
 8003902:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003904:	4968      	ldr	r1, [pc, #416]	; (8003aa8 <double_str+0x2c0>)
 8003906:	4618      	mov	r0, r3
 8003908:	f000 fbb0 	bl	800406c <siprintf>

	char p_decimal_char[decimales];
 800390c:	79f8      	ldrb	r0, [r7, #7]
 800390e:	4603      	mov	r3, r0
 8003910:	3b01      	subs	r3, #1
 8003912:	61fb      	str	r3, [r7, #28]
 8003914:	b2c1      	uxtb	r1, r0
 8003916:	f04f 0200 	mov.w	r2, #0
 800391a:	f04f 0300 	mov.w	r3, #0
 800391e:	f04f 0400 	mov.w	r4, #0
 8003922:	00d4      	lsls	r4, r2, #3
 8003924:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003928:	00cb      	lsls	r3, r1, #3
 800392a:	b2c1      	uxtb	r1, r0
 800392c:	f04f 0200 	mov.w	r2, #0
 8003930:	f04f 0300 	mov.w	r3, #0
 8003934:	f04f 0400 	mov.w	r4, #0
 8003938:	00d4      	lsls	r4, r2, #3
 800393a:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 800393e:	00cb      	lsls	r3, r1, #3
 8003940:	4603      	mov	r3, r0
 8003942:	3307      	adds	r3, #7
 8003944:	08db      	lsrs	r3, r3, #3
 8003946:	00db      	lsls	r3, r3, #3
 8003948:	ebad 0d03 	sub.w	sp, sp, r3
 800394c:	466b      	mov	r3, sp
 800394e:	3300      	adds	r3, #0
 8003950:	61bb      	str	r3, [r7, #24]
	size = size_int(p_decimal);
 8003952:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003954:	f000 f932 	bl	8003bbc <size_int>
 8003958:	4603      	mov	r3, r0
 800395a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (decimales>size){
 800395c:	79fb      	ldrb	r3, [r7, #7]
 800395e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003960:	429a      	cmp	r2, r3
 8003962:	da21      	bge.n	80039a8 <double_str+0x1c0>
		p_decimal = p_decimal + pow(10,decimales-1);
 8003964:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8003966:	f7fc fdd5 	bl	8000514 <__aeabi_i2d>
 800396a:	4680      	mov	r8, r0
 800396c:	4689      	mov	r9, r1
 800396e:	79fb      	ldrb	r3, [r7, #7]
 8003970:	3b01      	subs	r3, #1
 8003972:	4618      	mov	r0, r3
 8003974:	f7fc fdce 	bl	8000514 <__aeabi_i2d>
 8003978:	4603      	mov	r3, r0
 800397a:	460c      	mov	r4, r1
 800397c:	ec44 3b11 	vmov	d1, r3, r4
 8003980:	ed9f 0b47 	vldr	d0, [pc, #284]	; 8003aa0 <double_str+0x2b8>
 8003984:	f001 f8ae 	bl	8004ae4 <pow>
 8003988:	ec54 3b10 	vmov	r3, r4, d0
 800398c:	461a      	mov	r2, r3
 800398e:	4623      	mov	r3, r4
 8003990:	4640      	mov	r0, r8
 8003992:	4649      	mov	r1, r9
 8003994:	f7fc fc72 	bl	800027c <__adddf3>
 8003998:	4603      	mov	r3, r0
 800399a:	460c      	mov	r4, r1
 800399c:	4618      	mov	r0, r3
 800399e:	4621      	mov	r1, r4
 80039a0:	f7fd f8d2 	bl	8000b48 <__aeabi_d2iz>
 80039a4:	4603      	mov	r3, r0
 80039a6:	64bb      	str	r3, [r7, #72]	; 0x48
	}
	sprintf(p_decimal_char,"%d", p_decimal);
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80039ac:	493e      	ldr	r1, [pc, #248]	; (8003aa8 <double_str+0x2c0>)
 80039ae:	4618      	mov	r0, r3
 80039b0:	f000 fb5c 	bl	800406c <siprintf>
	for(uint8_t i=0; i<(decimales-size);i++){
 80039b4:	2300      	movs	r3, #0
 80039b6:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80039ba:	e009      	b.n	80039d0 <double_str+0x1e8>
		p_decimal_char[i] = '0';
 80039bc:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80039c0:	69ba      	ldr	r2, [r7, #24]
 80039c2:	2130      	movs	r1, #48	; 0x30
 80039c4:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<(decimales-size);i++){
 80039c6:	f897 304e 	ldrb.w	r3, [r7, #78]	; 0x4e
 80039ca:	3301      	adds	r3, #1
 80039cc:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
 80039d0:	f897 204e 	ldrb.w	r2, [r7, #78]	; 0x4e
 80039d4:	79f9      	ldrb	r1, [r7, #7]
 80039d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039d8:	1acb      	subs	r3, r1, r3
 80039da:	429a      	cmp	r2, r3
 80039dc:	dbee      	blt.n	80039bc <double_str+0x1d4>
	}

	uint8_t total_size = sizeof(p_entera_char)+decimales+2;
 80039de:	b2ea      	uxtb	r2, r5
 80039e0:	79fb      	ldrb	r3, [r7, #7]
 80039e2:	4413      	add	r3, r2
 80039e4:	b2db      	uxtb	r3, r3
 80039e6:	3302      	adds	r3, #2
 80039e8:	75fb      	strb	r3, [r7, #23]
	static char float_str[10];

	for(uint8_t i= 0; i<11; i++){
 80039ea:	2300      	movs	r3, #0
 80039ec:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80039f0:	e04b      	b.n	8003a8a <double_str+0x2a2>
		if (i==0){
 80039f2:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d106      	bne.n	8003a08 <double_str+0x220>
			float_str[i] = negativo;
 80039fa:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80039fe:	492b      	ldr	r1, [pc, #172]	; (8003aac <double_str+0x2c4>)
 8003a00:	f897 2047 	ldrb.w	r2, [r7, #71]	; 0x47
 8003a04:	54ca      	strb	r2, [r1, r3]
 8003a06:	e03b      	b.n	8003a80 <double_str+0x298>
		} else if((i>0) && (i<sizeof(p_entera_char)+1)){
 8003a08:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00f      	beq.n	8003a30 <double_str+0x248>
 8003a10:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003a14:	462b      	mov	r3, r5
 8003a16:	3301      	adds	r3, #1
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d209      	bcs.n	8003a30 <double_str+0x248>
			float_str[i] = p_entera_char[i-1];
 8003a1c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a20:	1e5a      	subs	r2, r3, #1
 8003a22:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a26:	6a39      	ldr	r1, [r7, #32]
 8003a28:	5c89      	ldrb	r1, [r1, r2]
 8003a2a:	4a20      	ldr	r2, [pc, #128]	; (8003aac <double_str+0x2c4>)
 8003a2c:	54d1      	strb	r1, [r2, r3]
 8003a2e:	e027      	b.n	8003a80 <double_str+0x298>
		} else if (i == sizeof(p_entera_char)+1){
 8003a30:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003a34:	462b      	mov	r3, r5
 8003a36:	3301      	adds	r3, #1
 8003a38:	429a      	cmp	r2, r3
 8003a3a:	d105      	bne.n	8003a48 <double_str+0x260>
			float_str[i] = '.';
 8003a3c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a40:	4a1a      	ldr	r2, [pc, #104]	; (8003aac <double_str+0x2c4>)
 8003a42:	212e      	movs	r1, #46	; 0x2e
 8003a44:	54d1      	strb	r1, [r2, r3]
 8003a46:	e01b      	b.n	8003a80 <double_str+0x298>
		} else if ((i> sizeof(p_entera_char)+1) && (i<total_size)){
 8003a48:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003a4c:	462b      	mov	r3, r5
 8003a4e:	3301      	adds	r3, #1
 8003a50:	429a      	cmp	r2, r3
 8003a52:	d910      	bls.n	8003a76 <double_str+0x28e>
 8003a54:	f897 204f 	ldrb.w	r2, [r7, #79]	; 0x4f
 8003a58:	7dfb      	ldrb	r3, [r7, #23]
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d20b      	bcs.n	8003a76 <double_str+0x28e>
			float_str[i] = p_decimal_char[i-(sizeof(p_entera_char)+2)];
 8003a5e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a62:	462a      	mov	r2, r5
 8003a64:	1a9b      	subs	r3, r3, r2
 8003a66:	1e9a      	subs	r2, r3, #2
 8003a68:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a6c:	69b9      	ldr	r1, [r7, #24]
 8003a6e:	5c89      	ldrb	r1, [r1, r2]
 8003a70:	4a0e      	ldr	r2, [pc, #56]	; (8003aac <double_str+0x2c4>)
 8003a72:	54d1      	strb	r1, [r2, r3]
 8003a74:	e004      	b.n	8003a80 <double_str+0x298>
		} else {float_str[i] = ' ';}
 8003a76:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a7a:	4a0c      	ldr	r2, [pc, #48]	; (8003aac <double_str+0x2c4>)
 8003a7c:	2120      	movs	r1, #32
 8003a7e:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i= 0; i<11; i++){
 8003a80:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a84:	3301      	adds	r3, #1
 8003a86:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8003a8a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003a8e:	2b0a      	cmp	r3, #10
 8003a90:	d9af      	bls.n	80039f2 <double_str+0x20a>
	}
	return float_str;
 8003a92:	4b06      	ldr	r3, [pc, #24]	; (8003aac <double_str+0x2c4>)
 8003a94:	46b5      	mov	sp, r6
}
 8003a96:	4618      	mov	r0, r3
 8003a98:	3754      	adds	r7, #84	; 0x54
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003aa0:	00000000 	.word	0x00000000
 8003aa4:	40240000 	.word	0x40240000
 8003aa8:	08006030 	.word	0x08006030
 8003aac:	200004c0 	.word	0x200004c0

08003ab0 <SSD1306_Putdouble>:

void SSD1306_Putdouble(float data, uint8_t decimales, uint8_t slot) {
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b086      	sub	sp, #24
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	ed87 0a01 	vstr	s0, [r7, #4]
 8003aba:	4603      	mov	r3, r0
 8003abc:	460a      	mov	r2, r1
 8003abe:	70fb      	strb	r3, [r7, #3]
 8003ac0:	4613      	mov	r3, r2
 8003ac2:	70bb      	strb	r3, [r7, #2]
	char* float_str = double_str(data, decimales);
 8003ac4:	6878      	ldr	r0, [r7, #4]
 8003ac6:	f7fc fd37 	bl	8000538 <__aeabi_f2d>
 8003aca:	460a      	mov	r2, r1
 8003acc:	4601      	mov	r1, r0
 8003ace:	78fb      	ldrb	r3, [r7, #3]
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	ec42 1b10 	vmov	d0, r1, r2
 8003ad6:	f7ff fe87 	bl	80037e8 <double_str>
 8003ada:	60f8      	str	r0, [r7, #12]

	uint16_t x_slot = 0;
 8003adc:	2300      	movs	r3, #0
 8003ade:	82fb      	strh	r3, [r7, #22]
	uint16_t y_slot = 0;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	82bb      	strh	r3, [r7, #20]
	uint8_t slot_mini = 0;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	74fb      	strb	r3, [r7, #19]
	switch (slot) {
 8003ae8:	78bb      	ldrb	r3, [r7, #2]
 8003aea:	3b01      	subs	r3, #1
 8003aec:	2b04      	cmp	r3, #4
 8003aee:	d82a      	bhi.n	8003b46 <SSD1306_Putdouble+0x96>
 8003af0:	a201      	add	r2, pc, #4	; (adr r2, 8003af8 <SSD1306_Putdouble+0x48>)
 8003af2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003af6:	bf00      	nop
 8003af8:	08003b0d 	.word	0x08003b0d
 8003afc:	08003b17 	.word	0x08003b17
 8003b00:	08003b21 	.word	0x08003b21
 8003b04:	08003b2b 	.word	0x08003b2b
 8003b08:	08003b39 	.word	0x08003b39
	case 1:
		x_slot = 2;
 8003b0c:	2302      	movs	r3, #2
 8003b0e:	82fb      	strh	r3, [r7, #22]
		y_slot = 0;
 8003b10:	2300      	movs	r3, #0
 8003b12:	82bb      	strh	r3, [r7, #20]
		break;
 8003b14:	e017      	b.n	8003b46 <SSD1306_Putdouble+0x96>
	case 2:
		x_slot = 2;
 8003b16:	2302      	movs	r3, #2
 8003b18:	82fb      	strh	r3, [r7, #22]
		y_slot = 17;
 8003b1a:	2311      	movs	r3, #17
 8003b1c:	82bb      	strh	r3, [r7, #20]
		break;
 8003b1e:	e012      	b.n	8003b46 <SSD1306_Putdouble+0x96>
	case 3:
		x_slot = 2;
 8003b20:	2302      	movs	r3, #2
 8003b22:	82fb      	strh	r3, [r7, #22]
		y_slot = 35;
 8003b24:	2323      	movs	r3, #35	; 0x23
 8003b26:	82bb      	strh	r3, [r7, #20]
		break;
 8003b28:	e00d      	b.n	8003b46 <SSD1306_Putdouble+0x96>
	case 4:
		x_slot = 2;
 8003b2a:	2302      	movs	r3, #2
 8003b2c:	82fb      	strh	r3, [r7, #22]
		y_slot = 53;
 8003b2e:	2335      	movs	r3, #53	; 0x35
 8003b30:	82bb      	strh	r3, [r7, #20]
		slot_mini = 1;
 8003b32:	2301      	movs	r3, #1
 8003b34:	74fb      	strb	r3, [r7, #19]
		break;
 8003b36:	e006      	b.n	8003b46 <SSD1306_Putdouble+0x96>
	case 5:
		x_slot = 60;
 8003b38:	233c      	movs	r3, #60	; 0x3c
 8003b3a:	82fb      	strh	r3, [r7, #22]
		y_slot = 53;
 8003b3c:	2335      	movs	r3, #53	; 0x35
 8003b3e:	82bb      	strh	r3, [r7, #20]
		slot_mini = 1;
 8003b40:	2301      	movs	r3, #1
 8003b42:	74fb      	strb	r3, [r7, #19]
		break;
 8003b44:	bf00      	nop
	}
	if (slot_mini == 1){
 8003b46:	7cfb      	ldrb	r3, [r7, #19]
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d116      	bne.n	8003b7a <SSD1306_Putdouble+0xca>
		SSD1306_GotoXY (x_slot,y_slot);				// Select x and y from the selected slot
 8003b4c:	8aba      	ldrh	r2, [r7, #20]
 8003b4e:	8afb      	ldrh	r3, [r7, #22]
 8003b50:	4611      	mov	r1, r2
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7ff fcdc 	bl	8003510 <SSD1306_GotoXY>
		SSD1306_Puts ("       ", &Font_7x10, 1);	// Reset the slot before writing (7 blank chars for small slots)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	4914      	ldr	r1, [pc, #80]	; (8003bac <SSD1306_Putdouble+0xfc>)
 8003b5c:	4814      	ldr	r0, [pc, #80]	; (8003bb0 <SSD1306_Putdouble+0x100>)
 8003b5e:	f000 f861 	bl	8003c24 <SSD1306_Puts>
		SSD1306_GotoXY (x_slot,y_slot);				// Come back to the initial position
 8003b62:	8aba      	ldrh	r2, [r7, #20]
 8003b64:	8afb      	ldrh	r3, [r7, #22]
 8003b66:	4611      	mov	r1, r2
 8003b68:	4618      	mov	r0, r3
 8003b6a:	f7ff fcd1 	bl	8003510 <SSD1306_GotoXY>
		SSD1306_Puts (float_str, &Font_7x10, 1);	// Write the value
 8003b6e:	2201      	movs	r2, #1
 8003b70:	490e      	ldr	r1, [pc, #56]	; (8003bac <SSD1306_Putdouble+0xfc>)
 8003b72:	68f8      	ldr	r0, [r7, #12]
 8003b74:	f000 f856 	bl	8003c24 <SSD1306_Puts>
//		SSD1306_UpdateScreen();						// Update the screen
		return;
 8003b78:	e015      	b.n	8003ba6 <SSD1306_Putdouble+0xf6>
	}
	SSD1306_GotoXY (x_slot,y_slot);
 8003b7a:	8aba      	ldrh	r2, [r7, #20]
 8003b7c:	8afb      	ldrh	r3, [r7, #22]
 8003b7e:	4611      	mov	r1, r2
 8003b80:	4618      	mov	r0, r3
 8003b82:	f7ff fcc5 	bl	8003510 <SSD1306_GotoXY>
	SSD1306_Puts ("         ", &Font_11x18, 1);		// Reset the slot before writing (9 blank chars for small slots)
 8003b86:	2201      	movs	r2, #1
 8003b88:	490a      	ldr	r1, [pc, #40]	; (8003bb4 <SSD1306_Putdouble+0x104>)
 8003b8a:	480b      	ldr	r0, [pc, #44]	; (8003bb8 <SSD1306_Putdouble+0x108>)
 8003b8c:	f000 f84a 	bl	8003c24 <SSD1306_Puts>
	SSD1306_GotoXY (x_slot,y_slot);
 8003b90:	8aba      	ldrh	r2, [r7, #20]
 8003b92:	8afb      	ldrh	r3, [r7, #22]
 8003b94:	4611      	mov	r1, r2
 8003b96:	4618      	mov	r0, r3
 8003b98:	f7ff fcba 	bl	8003510 <SSD1306_GotoXY>
	SSD1306_Puts (float_str, &Font_11x18, 1);
 8003b9c:	2201      	movs	r2, #1
 8003b9e:	4905      	ldr	r1, [pc, #20]	; (8003bb4 <SSD1306_Putdouble+0x104>)
 8003ba0:	68f8      	ldr	r0, [r7, #12]
 8003ba2:	f000 f83f 	bl	8003c24 <SSD1306_Puts>
//	SSD1306_UpdateScreen();
}
 8003ba6:	3718      	adds	r7, #24
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}
 8003bac:	20000008 	.word	0x20000008
 8003bb0:	08006034 	.word	0x08006034
 8003bb4:	20000010 	.word	0x20000010
 8003bb8:	0800603c 	.word	0x0800603c

08003bbc <size_int>:

uint8_t size_int(int data){
 8003bbc:	b590      	push	{r4, r7, lr}
 8003bbe:	b085      	sub	sp, #20
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
	uint8_t size;
	if (data==0){
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <size_int+0x14>
		size = 1;
 8003bca:	2301      	movs	r3, #1
 8003bcc:	73fb      	strb	r3, [r7, #15]
 8003bce:	e021      	b.n	8003c14 <size_int+0x58>
	}
	else {
		size = floor(log10(data))+1;
 8003bd0:	6878      	ldr	r0, [r7, #4]
 8003bd2:	f7fc fc9f 	bl	8000514 <__aeabi_i2d>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	460c      	mov	r4, r1
 8003bda:	ec44 3b10 	vmov	d0, r3, r4
 8003bde:	f000 ff01 	bl	80049e4 <log10>
 8003be2:	eeb0 7a40 	vmov.f32	s14, s0
 8003be6:	eef0 7a60 	vmov.f32	s15, s1
 8003bea:	eeb0 0a47 	vmov.f32	s0, s14
 8003bee:	eef0 0a67 	vmov.f32	s1, s15
 8003bf2:	f000 fe39 	bl	8004868 <floor>
 8003bf6:	ec51 0b10 	vmov	r0, r1, d0
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	4b08      	ldr	r3, [pc, #32]	; (8003c20 <size_int+0x64>)
 8003c00:	f7fc fb3c 	bl	800027c <__adddf3>
 8003c04:	4603      	mov	r3, r0
 8003c06:	460c      	mov	r4, r1
 8003c08:	4618      	mov	r0, r3
 8003c0a:	4621      	mov	r1, r4
 8003c0c:	f7fc ffc4 	bl	8000b98 <__aeabi_d2uiz>
 8003c10:	4603      	mov	r3, r0
 8003c12:	73fb      	strb	r3, [r7, #15]
	}
	return size;
 8003c14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003c16:	4618      	mov	r0, r3
 8003c18:	3714      	adds	r7, #20
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	bd90      	pop	{r4, r7, pc}
 8003c1e:	bf00      	nop
 8003c20:	3ff00000 	.word	0x3ff00000

08003c24 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	60f8      	str	r0, [r7, #12]
 8003c2c:	60b9      	str	r1, [r7, #8]
 8003c2e:	4613      	mov	r3, r2
 8003c30:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 8003c32:	e012      	b.n	8003c5a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	79fa      	ldrb	r2, [r7, #7]
 8003c3a:	68b9      	ldr	r1, [r7, #8]
 8003c3c:	4618      	mov	r0, r3
 8003c3e:	f7ff fc7d 	bl	800353c <SSD1306_Putc>
 8003c42:	4603      	mov	r3, r0
 8003c44:	461a      	mov	r2, r3
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	781b      	ldrb	r3, [r3, #0]
 8003c4a:	429a      	cmp	r2, r3
 8003c4c:	d002      	beq.n	8003c54 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	781b      	ldrb	r3, [r3, #0]
 8003c52:	e008      	b.n	8003c66 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3301      	adds	r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]
	while (*str) {
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	781b      	ldrb	r3, [r3, #0]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d1e8      	bne.n	8003c34 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	781b      	ldrb	r3, [r3, #0]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <ssd1306_sel_I2C>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_sel_I2C(I2C_HandleTypeDef *hi2c) {
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
	hi2c_current = *hi2c;
 8003c78:	4a05      	ldr	r2, [pc, #20]	; (8003c90 <ssd1306_sel_I2C+0x20>)
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	4610      	mov	r0, r2
 8003c7e:	4619      	mov	r1, r3
 8003c80:	234c      	movs	r3, #76	; 0x4c
 8003c82:	461a      	mov	r2, r3
 8003c84:	f000 f9de 	bl	8004044 <memcpy>
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}
 8003c90:	20000528 	.word	0x20000528

08003c94 <ssd1306_I2C_WriteMulti>:
//	//while(p>0)
//	//	p--;
//	//MX_I2C1_Init();
//}

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003c94:	b5b0      	push	{r4, r5, r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af02      	add	r7, sp, #8
 8003c9a:	603a      	str	r2, [r7, #0]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	71fb      	strb	r3, [r7, #7]
 8003ca2:	460b      	mov	r3, r1
 8003ca4:	71bb      	strb	r3, [r7, #6]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80bb      	strh	r3, [r7, #4]
 8003caa:	466b      	mov	r3, sp
 8003cac:	461d      	mov	r5, r3
	uint8_t dt[count + 1];
 8003cae:	88bb      	ldrh	r3, [r7, #4]
 8003cb0:	1c58      	adds	r0, r3, #1
 8003cb2:	1e43      	subs	r3, r0, #1
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	4603      	mov	r3, r0
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	f04f 0300 	mov.w	r3, #0
 8003cc2:	f04f 0400 	mov.w	r4, #0
 8003cc6:	00d4      	lsls	r4, r2, #3
 8003cc8:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003ccc:	00cb      	lsls	r3, r1, #3
 8003cce:	4603      	mov	r3, r0
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	f04f 0200 	mov.w	r2, #0
 8003cd6:	f04f 0300 	mov.w	r3, #0
 8003cda:	f04f 0400 	mov.w	r4, #0
 8003cde:	00d4      	lsls	r4, r2, #3
 8003ce0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8003ce4:	00cb      	lsls	r3, r1, #3
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	3307      	adds	r3, #7
 8003cea:	08db      	lsrs	r3, r3, #3
 8003cec:	00db      	lsls	r3, r3, #3
 8003cee:	ebad 0d03 	sub.w	sp, sp, r3
 8003cf2:	ab02      	add	r3, sp, #8
 8003cf4:	3300      	adds	r3, #0
 8003cf6:	60fb      	str	r3, [r7, #12]
	dt[0] = reg;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	79ba      	ldrb	r2, [r7, #6]
 8003cfc:	701a      	strb	r2, [r3, #0]
	uint8_t i;
	for(i = 1; i <= count; i++)
 8003cfe:	2301      	movs	r3, #1
 8003d00:	75fb      	strb	r3, [r7, #23]
 8003d02:	e00a      	b.n	8003d1a <ssd1306_I2C_WriteMulti+0x86>
		dt[i] = data[i-1];
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
 8003d06:	3b01      	subs	r3, #1
 8003d08:	683a      	ldr	r2, [r7, #0]
 8003d0a:	441a      	add	r2, r3
 8003d0c:	7dfb      	ldrb	r3, [r7, #23]
 8003d0e:	7811      	ldrb	r1, [r2, #0]
 8003d10:	68fa      	ldr	r2, [r7, #12]
 8003d12:	54d1      	strb	r1, [r2, r3]
	for(i = 1; i <= count; i++)
 8003d14:	7dfb      	ldrb	r3, [r7, #23]
 8003d16:	3301      	adds	r3, #1
 8003d18:	75fb      	strb	r3, [r7, #23]
 8003d1a:	7dfb      	ldrb	r3, [r7, #23]
 8003d1c:	b29b      	uxth	r3, r3
 8003d1e:	88ba      	ldrh	r2, [r7, #4]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	d2ef      	bcs.n	8003d04 <ssd1306_I2C_WriteMulti+0x70>
	HAL_I2C_Master_Transmit(&hi2c_current, address, dt, count, 10);
 8003d24:	79fb      	ldrb	r3, [r7, #7]
 8003d26:	b299      	uxth	r1, r3
 8003d28:	68fa      	ldr	r2, [r7, #12]
 8003d2a:	88b8      	ldrh	r0, [r7, #4]
 8003d2c:	230a      	movs	r3, #10
 8003d2e:	9300      	str	r3, [sp, #0]
 8003d30:	4603      	mov	r3, r0
 8003d32:	4804      	ldr	r0, [pc, #16]	; (8003d44 <ssd1306_I2C_WriteMulti+0xb0>)
 8003d34:	f7fd fb0a 	bl	800134c <HAL_I2C_Master_Transmit>
 8003d38:	46ad      	mov	sp, r5
}
 8003d3a:	bf00      	nop
 8003d3c:	3718      	adds	r7, #24
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bdb0      	pop	{r4, r5, r7, pc}
 8003d42:	bf00      	nop
 8003d44:	20000528 	.word	0x20000528

08003d48 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8003d48:	b580      	push	{r7, lr}
 8003d4a:	b086      	sub	sp, #24
 8003d4c:	af02      	add	r7, sp, #8
 8003d4e:	4603      	mov	r3, r0
 8003d50:	71fb      	strb	r3, [r7, #7]
 8003d52:	460b      	mov	r3, r1
 8003d54:	71bb      	strb	r3, [r7, #6]
 8003d56:	4613      	mov	r3, r2
 8003d58:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8003d5a:	79bb      	ldrb	r3, [r7, #6]
 8003d5c:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 8003d5e:	797b      	ldrb	r3, [r7, #5]
 8003d60:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c_current, address, dt, 2, 10);
 8003d62:	79fb      	ldrb	r3, [r7, #7]
 8003d64:	b299      	uxth	r1, r3
 8003d66:	f107 020c 	add.w	r2, r7, #12
 8003d6a:	230a      	movs	r3, #10
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	2302      	movs	r3, #2
 8003d70:	4803      	ldr	r0, [pc, #12]	; (8003d80 <ssd1306_I2C_Write+0x38>)
 8003d72:	f7fd faeb 	bl	800134c <HAL_I2C_Master_Transmit>
}
 8003d76:	bf00      	nop
 8003d78:	3710      	adds	r7, #16
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000528 	.word	0x20000528

08003d84 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003d84:	b480      	push	{r7}
 8003d86:	b083      	sub	sp, #12
 8003d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d8a:	4b0f      	ldr	r3, [pc, #60]	; (8003dc8 <HAL_MspInit+0x44>)
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	4a0e      	ldr	r2, [pc, #56]	; (8003dc8 <HAL_MspInit+0x44>)
 8003d90:	f043 0301 	orr.w	r3, r3, #1
 8003d94:	6193      	str	r3, [r2, #24]
 8003d96:	4b0c      	ldr	r3, [pc, #48]	; (8003dc8 <HAL_MspInit+0x44>)
 8003d98:	699b      	ldr	r3, [r3, #24]
 8003d9a:	f003 0301 	and.w	r3, r3, #1
 8003d9e:	607b      	str	r3, [r7, #4]
 8003da0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003da2:	4b09      	ldr	r3, [pc, #36]	; (8003dc8 <HAL_MspInit+0x44>)
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	4a08      	ldr	r2, [pc, #32]	; (8003dc8 <HAL_MspInit+0x44>)
 8003da8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dac:	61d3      	str	r3, [r2, #28]
 8003dae:	4b06      	ldr	r3, [pc, #24]	; (8003dc8 <HAL_MspInit+0x44>)
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003db6:	603b      	str	r3, [r7, #0]
 8003db8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dba:	bf00      	nop
 8003dbc:	370c      	adds	r7, #12
 8003dbe:	46bd      	mov	sp, r7
 8003dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc4:	4770      	bx	lr
 8003dc6:	bf00      	nop
 8003dc8:	40021000 	.word	0x40021000

08003dcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003dcc:	b580      	push	{r7, lr}
 8003dce:	b08a      	sub	sp, #40	; 0x28
 8003dd0:	af00      	add	r7, sp, #0
 8003dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003dd4:	f107 0314 	add.w	r3, r7, #20
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]
 8003ddc:	605a      	str	r2, [r3, #4]
 8003dde:	609a      	str	r2, [r3, #8]
 8003de0:	60da      	str	r2, [r3, #12]
 8003de2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	4a17      	ldr	r2, [pc, #92]	; (8003e48 <HAL_I2C_MspInit+0x7c>)
 8003dea:	4293      	cmp	r3, r2
 8003dec:	d127      	bne.n	8003e3e <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003dee:	4b17      	ldr	r3, [pc, #92]	; (8003e4c <HAL_I2C_MspInit+0x80>)
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	4a16      	ldr	r2, [pc, #88]	; (8003e4c <HAL_I2C_MspInit+0x80>)
 8003df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003df8:	6153      	str	r3, [r2, #20]
 8003dfa:	4b14      	ldr	r3, [pc, #80]	; (8003e4c <HAL_I2C_MspInit+0x80>)
 8003dfc:	695b      	ldr	r3, [r3, #20]
 8003dfe:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003e02:	613b      	str	r3, [r7, #16]
 8003e04:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003e06:	23c0      	movs	r3, #192	; 0xc0
 8003e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e0a:	2312      	movs	r3, #18
 8003e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8003e12:	2303      	movs	r3, #3
 8003e14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e16:	2304      	movs	r3, #4
 8003e18:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e1a:	f107 0314 	add.w	r3, r7, #20
 8003e1e:	4619      	mov	r1, r3
 8003e20:	480b      	ldr	r0, [pc, #44]	; (8003e50 <HAL_I2C_MspInit+0x84>)
 8003e22:	f7fd f875 	bl	8000f10 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <HAL_I2C_MspInit+0x80>)
 8003e28:	69db      	ldr	r3, [r3, #28]
 8003e2a:	4a08      	ldr	r2, [pc, #32]	; (8003e4c <HAL_I2C_MspInit+0x80>)
 8003e2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003e30:	61d3      	str	r3, [r2, #28]
 8003e32:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <HAL_I2C_MspInit+0x80>)
 8003e34:	69db      	ldr	r3, [r3, #28]
 8003e36:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003e3a:	60fb      	str	r3, [r7, #12]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003e3e:	bf00      	nop
 8003e40:	3728      	adds	r7, #40	; 0x28
 8003e42:	46bd      	mov	sp, r7
 8003e44:	bd80      	pop	{r7, pc}
 8003e46:	bf00      	nop
 8003e48:	40005400 	.word	0x40005400
 8003e4c:	40021000 	.word	0x40021000
 8003e50:	48000400 	.word	0x48000400

08003e54 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003e58:	bf00      	nop
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e62:	b480      	push	{r7}
 8003e64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e66:	e7fe      	b.n	8003e66 <HardFault_Handler+0x4>

08003e68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e6c:	e7fe      	b.n	8003e6c <MemManage_Handler+0x4>

08003e6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e72:	e7fe      	b.n	8003e72 <BusFault_Handler+0x4>

08003e74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e78:	e7fe      	b.n	8003e78 <UsageFault_Handler+0x4>

08003e7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e7e:	bf00      	nop
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e8c:	bf00      	nop
 8003e8e:	46bd      	mov	sp, r7
 8003e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e94:	4770      	bx	lr

08003e96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e96:	b480      	push	{r7}
 8003e98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e9a:	bf00      	nop
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003ea8:	f7fc ff2c 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003eac:	bf00      	nop
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003eb8:	4b11      	ldr	r3, [pc, #68]	; (8003f00 <_sbrk+0x50>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d102      	bne.n	8003ec6 <_sbrk+0x16>
		heap_end = &end;
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <_sbrk+0x50>)
 8003ec2:	4a10      	ldr	r2, [pc, #64]	; (8003f04 <_sbrk+0x54>)
 8003ec4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8003ec6:	4b0e      	ldr	r3, [pc, #56]	; (8003f00 <_sbrk+0x50>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8003ecc:	4b0c      	ldr	r3, [pc, #48]	; (8003f00 <_sbrk+0x50>)
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	466a      	mov	r2, sp
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d907      	bls.n	8003eea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8003eda:	f000 f889 	bl	8003ff0 <__errno>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	230c      	movs	r3, #12
 8003ee2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8003ee4:	f04f 33ff 	mov.w	r3, #4294967295
 8003ee8:	e006      	b.n	8003ef8 <_sbrk+0x48>
	}

	heap_end += incr;
 8003eea:	4b05      	ldr	r3, [pc, #20]	; (8003f00 <_sbrk+0x50>)
 8003eec:	681a      	ldr	r2, [r3, #0]
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4413      	add	r3, r2
 8003ef2:	4a03      	ldr	r2, [pc, #12]	; (8003f00 <_sbrk+0x50>)
 8003ef4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8003ef6:	68fb      	ldr	r3, [r7, #12]
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3710      	adds	r7, #16
 8003efc:	46bd      	mov	sp, r7
 8003efe:	bd80      	pop	{r7, pc}
 8003f00:	200004cc 	.word	0x200004cc
 8003f04:	20000580 	.word	0x20000580

08003f08 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f08:	b480      	push	{r7}
 8003f0a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f0c:	4b1f      	ldr	r3, [pc, #124]	; (8003f8c <SystemInit+0x84>)
 8003f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f12:	4a1e      	ldr	r2, [pc, #120]	; (8003f8c <SystemInit+0x84>)
 8003f14:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f18:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8003f1c:	4b1c      	ldr	r3, [pc, #112]	; (8003f90 <SystemInit+0x88>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4a1b      	ldr	r2, [pc, #108]	; (8003f90 <SystemInit+0x88>)
 8003f22:	f043 0301 	orr.w	r3, r3, #1
 8003f26:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8003f28:	4b19      	ldr	r3, [pc, #100]	; (8003f90 <SystemInit+0x88>)
 8003f2a:	685a      	ldr	r2, [r3, #4]
 8003f2c:	4918      	ldr	r1, [pc, #96]	; (8003f90 <SystemInit+0x88>)
 8003f2e:	4b19      	ldr	r3, [pc, #100]	; (8003f94 <SystemInit+0x8c>)
 8003f30:	4013      	ands	r3, r2
 8003f32:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8003f34:	4b16      	ldr	r3, [pc, #88]	; (8003f90 <SystemInit+0x88>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4a15      	ldr	r2, [pc, #84]	; (8003f90 <SystemInit+0x88>)
 8003f3a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8003f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f42:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f44:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <SystemInit+0x88>)
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	4a11      	ldr	r2, [pc, #68]	; (8003f90 <SystemInit+0x88>)
 8003f4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003f4e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8003f50:	4b0f      	ldr	r3, [pc, #60]	; (8003f90 <SystemInit+0x88>)
 8003f52:	685b      	ldr	r3, [r3, #4]
 8003f54:	4a0e      	ldr	r2, [pc, #56]	; (8003f90 <SystemInit+0x88>)
 8003f56:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 8003f5a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8003f5c:	4b0c      	ldr	r3, [pc, #48]	; (8003f90 <SystemInit+0x88>)
 8003f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f60:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <SystemInit+0x88>)
 8003f62:	f023 030f 	bic.w	r3, r3, #15
 8003f66:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8003f68:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <SystemInit+0x88>)
 8003f6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f6c:	4908      	ldr	r1, [pc, #32]	; (8003f90 <SystemInit+0x88>)
 8003f6e:	4b0a      	ldr	r3, [pc, #40]	; (8003f98 <SystemInit+0x90>)
 8003f70:	4013      	ands	r3, r2
 8003f72:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8003f74:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <SystemInit+0x88>)
 8003f76:	2200      	movs	r2, #0
 8003f78:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f7a:	4b04      	ldr	r3, [pc, #16]	; (8003f8c <SystemInit+0x84>)
 8003f7c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003f80:	609a      	str	r2, [r3, #8]
#endif
}
 8003f82:	bf00      	nop
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr
 8003f8c:	e000ed00 	.word	0xe000ed00
 8003f90:	40021000 	.word	0x40021000
 8003f94:	f87fc00c 	.word	0xf87fc00c
 8003f98:	ff00fccc 	.word	0xff00fccc

08003f9c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003f9c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003fd4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003fa0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003fa2:	e003      	b.n	8003fac <LoopCopyDataInit>

08003fa4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003fa4:	4b0c      	ldr	r3, [pc, #48]	; (8003fd8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003fa6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003fa8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003faa:	3104      	adds	r1, #4

08003fac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003fac:	480b      	ldr	r0, [pc, #44]	; (8003fdc <LoopForever+0xa>)
	ldr	r3, =_edata
 8003fae:	4b0c      	ldr	r3, [pc, #48]	; (8003fe0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003fb0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003fb2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003fb4:	d3f6      	bcc.n	8003fa4 <CopyDataInit>
	ldr	r2, =_sbss
 8003fb6:	4a0b      	ldr	r2, [pc, #44]	; (8003fe4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003fb8:	e002      	b.n	8003fc0 <LoopFillZerobss>

08003fba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003fba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003fbc:	f842 3b04 	str.w	r3, [r2], #4

08003fc0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003fc0:	4b09      	ldr	r3, [pc, #36]	; (8003fe8 <LoopForever+0x16>)
	cmp	r2, r3
 8003fc2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003fc4:	d3f9      	bcc.n	8003fba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003fc6:	f7ff ff9f 	bl	8003f08 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003fca:	f000 f817 	bl	8003ffc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003fce:	f7fe ff97 	bl	8002f00 <main>

08003fd2 <LoopForever>:

LoopForever:
    b LoopForever
 8003fd2:	e7fe      	b.n	8003fd2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003fd4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8003fd8:	080075c8 	.word	0x080075c8
	ldr	r0, =_sdata
 8003fdc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003fe0:	20000084 	.word	0x20000084
	ldr	r2, =_sbss
 8003fe4:	20000084 	.word	0x20000084
	ldr	r3, = _ebss
 8003fe8:	2000057c 	.word	0x2000057c

08003fec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003fec:	e7fe      	b.n	8003fec <ADC1_2_IRQHandler>
	...

08003ff0 <__errno>:
 8003ff0:	4b01      	ldr	r3, [pc, #4]	; (8003ff8 <__errno+0x8>)
 8003ff2:	6818      	ldr	r0, [r3, #0]
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	2000001c 	.word	0x2000001c

08003ffc <__libc_init_array>:
 8003ffc:	b570      	push	{r4, r5, r6, lr}
 8003ffe:	4e0d      	ldr	r6, [pc, #52]	; (8004034 <__libc_init_array+0x38>)
 8004000:	4c0d      	ldr	r4, [pc, #52]	; (8004038 <__libc_init_array+0x3c>)
 8004002:	1ba4      	subs	r4, r4, r6
 8004004:	10a4      	asrs	r4, r4, #2
 8004006:	2500      	movs	r5, #0
 8004008:	42a5      	cmp	r5, r4
 800400a:	d109      	bne.n	8004020 <__libc_init_array+0x24>
 800400c:	4e0b      	ldr	r6, [pc, #44]	; (800403c <__libc_init_array+0x40>)
 800400e:	4c0c      	ldr	r4, [pc, #48]	; (8004040 <__libc_init_array+0x44>)
 8004010:	f002 f800 	bl	8006014 <_init>
 8004014:	1ba4      	subs	r4, r4, r6
 8004016:	10a4      	asrs	r4, r4, #2
 8004018:	2500      	movs	r5, #0
 800401a:	42a5      	cmp	r5, r4
 800401c:	d105      	bne.n	800402a <__libc_init_array+0x2e>
 800401e:	bd70      	pop	{r4, r5, r6, pc}
 8004020:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004024:	4798      	blx	r3
 8004026:	3501      	adds	r5, #1
 8004028:	e7ee      	b.n	8004008 <__libc_init_array+0xc>
 800402a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800402e:	4798      	blx	r3
 8004030:	3501      	adds	r5, #1
 8004032:	e7f2      	b.n	800401a <__libc_init_array+0x1e>
 8004034:	080075c0 	.word	0x080075c0
 8004038:	080075c0 	.word	0x080075c0
 800403c:	080075c0 	.word	0x080075c0
 8004040:	080075c4 	.word	0x080075c4

08004044 <memcpy>:
 8004044:	b510      	push	{r4, lr}
 8004046:	1e43      	subs	r3, r0, #1
 8004048:	440a      	add	r2, r1
 800404a:	4291      	cmp	r1, r2
 800404c:	d100      	bne.n	8004050 <memcpy+0xc>
 800404e:	bd10      	pop	{r4, pc}
 8004050:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004054:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004058:	e7f7      	b.n	800404a <memcpy+0x6>

0800405a <memset>:
 800405a:	4402      	add	r2, r0
 800405c:	4603      	mov	r3, r0
 800405e:	4293      	cmp	r3, r2
 8004060:	d100      	bne.n	8004064 <memset+0xa>
 8004062:	4770      	bx	lr
 8004064:	f803 1b01 	strb.w	r1, [r3], #1
 8004068:	e7f9      	b.n	800405e <memset+0x4>
	...

0800406c <siprintf>:
 800406c:	b40e      	push	{r1, r2, r3}
 800406e:	b500      	push	{lr}
 8004070:	b09c      	sub	sp, #112	; 0x70
 8004072:	ab1d      	add	r3, sp, #116	; 0x74
 8004074:	9002      	str	r0, [sp, #8]
 8004076:	9006      	str	r0, [sp, #24]
 8004078:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800407c:	4809      	ldr	r0, [pc, #36]	; (80040a4 <siprintf+0x38>)
 800407e:	9107      	str	r1, [sp, #28]
 8004080:	9104      	str	r1, [sp, #16]
 8004082:	4909      	ldr	r1, [pc, #36]	; (80040a8 <siprintf+0x3c>)
 8004084:	f853 2b04 	ldr.w	r2, [r3], #4
 8004088:	9105      	str	r1, [sp, #20]
 800408a:	6800      	ldr	r0, [r0, #0]
 800408c:	9301      	str	r3, [sp, #4]
 800408e:	a902      	add	r1, sp, #8
 8004090:	f000 f866 	bl	8004160 <_svfiprintf_r>
 8004094:	9b02      	ldr	r3, [sp, #8]
 8004096:	2200      	movs	r2, #0
 8004098:	701a      	strb	r2, [r3, #0]
 800409a:	b01c      	add	sp, #112	; 0x70
 800409c:	f85d eb04 	ldr.w	lr, [sp], #4
 80040a0:	b003      	add	sp, #12
 80040a2:	4770      	bx	lr
 80040a4:	2000001c 	.word	0x2000001c
 80040a8:	ffff0208 	.word	0xffff0208

080040ac <__ssputs_r>:
 80040ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80040b0:	688e      	ldr	r6, [r1, #8]
 80040b2:	429e      	cmp	r6, r3
 80040b4:	4682      	mov	sl, r0
 80040b6:	460c      	mov	r4, r1
 80040b8:	4690      	mov	r8, r2
 80040ba:	4699      	mov	r9, r3
 80040bc:	d837      	bhi.n	800412e <__ssputs_r+0x82>
 80040be:	898a      	ldrh	r2, [r1, #12]
 80040c0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80040c4:	d031      	beq.n	800412a <__ssputs_r+0x7e>
 80040c6:	6825      	ldr	r5, [r4, #0]
 80040c8:	6909      	ldr	r1, [r1, #16]
 80040ca:	1a6f      	subs	r7, r5, r1
 80040cc:	6965      	ldr	r5, [r4, #20]
 80040ce:	2302      	movs	r3, #2
 80040d0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80040d4:	fb95 f5f3 	sdiv	r5, r5, r3
 80040d8:	f109 0301 	add.w	r3, r9, #1
 80040dc:	443b      	add	r3, r7
 80040de:	429d      	cmp	r5, r3
 80040e0:	bf38      	it	cc
 80040e2:	461d      	movcc	r5, r3
 80040e4:	0553      	lsls	r3, r2, #21
 80040e6:	d530      	bpl.n	800414a <__ssputs_r+0x9e>
 80040e8:	4629      	mov	r1, r5
 80040ea:	f000 fb21 	bl	8004730 <_malloc_r>
 80040ee:	4606      	mov	r6, r0
 80040f0:	b950      	cbnz	r0, 8004108 <__ssputs_r+0x5c>
 80040f2:	230c      	movs	r3, #12
 80040f4:	f8ca 3000 	str.w	r3, [sl]
 80040f8:	89a3      	ldrh	r3, [r4, #12]
 80040fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040fe:	81a3      	strh	r3, [r4, #12]
 8004100:	f04f 30ff 	mov.w	r0, #4294967295
 8004104:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004108:	463a      	mov	r2, r7
 800410a:	6921      	ldr	r1, [r4, #16]
 800410c:	f7ff ff9a 	bl	8004044 <memcpy>
 8004110:	89a3      	ldrh	r3, [r4, #12]
 8004112:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8004116:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800411a:	81a3      	strh	r3, [r4, #12]
 800411c:	6126      	str	r6, [r4, #16]
 800411e:	6165      	str	r5, [r4, #20]
 8004120:	443e      	add	r6, r7
 8004122:	1bed      	subs	r5, r5, r7
 8004124:	6026      	str	r6, [r4, #0]
 8004126:	60a5      	str	r5, [r4, #8]
 8004128:	464e      	mov	r6, r9
 800412a:	454e      	cmp	r6, r9
 800412c:	d900      	bls.n	8004130 <__ssputs_r+0x84>
 800412e:	464e      	mov	r6, r9
 8004130:	4632      	mov	r2, r6
 8004132:	4641      	mov	r1, r8
 8004134:	6820      	ldr	r0, [r4, #0]
 8004136:	f000 fa93 	bl	8004660 <memmove>
 800413a:	68a3      	ldr	r3, [r4, #8]
 800413c:	1b9b      	subs	r3, r3, r6
 800413e:	60a3      	str	r3, [r4, #8]
 8004140:	6823      	ldr	r3, [r4, #0]
 8004142:	441e      	add	r6, r3
 8004144:	6026      	str	r6, [r4, #0]
 8004146:	2000      	movs	r0, #0
 8004148:	e7dc      	b.n	8004104 <__ssputs_r+0x58>
 800414a:	462a      	mov	r2, r5
 800414c:	f000 fb4a 	bl	80047e4 <_realloc_r>
 8004150:	4606      	mov	r6, r0
 8004152:	2800      	cmp	r0, #0
 8004154:	d1e2      	bne.n	800411c <__ssputs_r+0x70>
 8004156:	6921      	ldr	r1, [r4, #16]
 8004158:	4650      	mov	r0, sl
 800415a:	f000 fa9b 	bl	8004694 <_free_r>
 800415e:	e7c8      	b.n	80040f2 <__ssputs_r+0x46>

08004160 <_svfiprintf_r>:
 8004160:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004164:	461d      	mov	r5, r3
 8004166:	898b      	ldrh	r3, [r1, #12]
 8004168:	061f      	lsls	r7, r3, #24
 800416a:	b09d      	sub	sp, #116	; 0x74
 800416c:	4680      	mov	r8, r0
 800416e:	460c      	mov	r4, r1
 8004170:	4616      	mov	r6, r2
 8004172:	d50f      	bpl.n	8004194 <_svfiprintf_r+0x34>
 8004174:	690b      	ldr	r3, [r1, #16]
 8004176:	b96b      	cbnz	r3, 8004194 <_svfiprintf_r+0x34>
 8004178:	2140      	movs	r1, #64	; 0x40
 800417a:	f000 fad9 	bl	8004730 <_malloc_r>
 800417e:	6020      	str	r0, [r4, #0]
 8004180:	6120      	str	r0, [r4, #16]
 8004182:	b928      	cbnz	r0, 8004190 <_svfiprintf_r+0x30>
 8004184:	230c      	movs	r3, #12
 8004186:	f8c8 3000 	str.w	r3, [r8]
 800418a:	f04f 30ff 	mov.w	r0, #4294967295
 800418e:	e0c8      	b.n	8004322 <_svfiprintf_r+0x1c2>
 8004190:	2340      	movs	r3, #64	; 0x40
 8004192:	6163      	str	r3, [r4, #20]
 8004194:	2300      	movs	r3, #0
 8004196:	9309      	str	r3, [sp, #36]	; 0x24
 8004198:	2320      	movs	r3, #32
 800419a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800419e:	2330      	movs	r3, #48	; 0x30
 80041a0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041a4:	9503      	str	r5, [sp, #12]
 80041a6:	f04f 0b01 	mov.w	fp, #1
 80041aa:	4637      	mov	r7, r6
 80041ac:	463d      	mov	r5, r7
 80041ae:	f815 3b01 	ldrb.w	r3, [r5], #1
 80041b2:	b10b      	cbz	r3, 80041b8 <_svfiprintf_r+0x58>
 80041b4:	2b25      	cmp	r3, #37	; 0x25
 80041b6:	d13e      	bne.n	8004236 <_svfiprintf_r+0xd6>
 80041b8:	ebb7 0a06 	subs.w	sl, r7, r6
 80041bc:	d00b      	beq.n	80041d6 <_svfiprintf_r+0x76>
 80041be:	4653      	mov	r3, sl
 80041c0:	4632      	mov	r2, r6
 80041c2:	4621      	mov	r1, r4
 80041c4:	4640      	mov	r0, r8
 80041c6:	f7ff ff71 	bl	80040ac <__ssputs_r>
 80041ca:	3001      	adds	r0, #1
 80041cc:	f000 80a4 	beq.w	8004318 <_svfiprintf_r+0x1b8>
 80041d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041d2:	4453      	add	r3, sl
 80041d4:	9309      	str	r3, [sp, #36]	; 0x24
 80041d6:	783b      	ldrb	r3, [r7, #0]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 809d 	beq.w	8004318 <_svfiprintf_r+0x1b8>
 80041de:	2300      	movs	r3, #0
 80041e0:	f04f 32ff 	mov.w	r2, #4294967295
 80041e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041e8:	9304      	str	r3, [sp, #16]
 80041ea:	9307      	str	r3, [sp, #28]
 80041ec:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80041f0:	931a      	str	r3, [sp, #104]	; 0x68
 80041f2:	462f      	mov	r7, r5
 80041f4:	2205      	movs	r2, #5
 80041f6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80041fa:	4850      	ldr	r0, [pc, #320]	; (800433c <_svfiprintf_r+0x1dc>)
 80041fc:	f7fb ffe8 	bl	80001d0 <memchr>
 8004200:	9b04      	ldr	r3, [sp, #16]
 8004202:	b9d0      	cbnz	r0, 800423a <_svfiprintf_r+0xda>
 8004204:	06d9      	lsls	r1, r3, #27
 8004206:	bf44      	itt	mi
 8004208:	2220      	movmi	r2, #32
 800420a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800420e:	071a      	lsls	r2, r3, #28
 8004210:	bf44      	itt	mi
 8004212:	222b      	movmi	r2, #43	; 0x2b
 8004214:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004218:	782a      	ldrb	r2, [r5, #0]
 800421a:	2a2a      	cmp	r2, #42	; 0x2a
 800421c:	d015      	beq.n	800424a <_svfiprintf_r+0xea>
 800421e:	9a07      	ldr	r2, [sp, #28]
 8004220:	462f      	mov	r7, r5
 8004222:	2000      	movs	r0, #0
 8004224:	250a      	movs	r5, #10
 8004226:	4639      	mov	r1, r7
 8004228:	f811 3b01 	ldrb.w	r3, [r1], #1
 800422c:	3b30      	subs	r3, #48	; 0x30
 800422e:	2b09      	cmp	r3, #9
 8004230:	d94d      	bls.n	80042ce <_svfiprintf_r+0x16e>
 8004232:	b1b8      	cbz	r0, 8004264 <_svfiprintf_r+0x104>
 8004234:	e00f      	b.n	8004256 <_svfiprintf_r+0xf6>
 8004236:	462f      	mov	r7, r5
 8004238:	e7b8      	b.n	80041ac <_svfiprintf_r+0x4c>
 800423a:	4a40      	ldr	r2, [pc, #256]	; (800433c <_svfiprintf_r+0x1dc>)
 800423c:	1a80      	subs	r0, r0, r2
 800423e:	fa0b f000 	lsl.w	r0, fp, r0
 8004242:	4318      	orrs	r0, r3
 8004244:	9004      	str	r0, [sp, #16]
 8004246:	463d      	mov	r5, r7
 8004248:	e7d3      	b.n	80041f2 <_svfiprintf_r+0x92>
 800424a:	9a03      	ldr	r2, [sp, #12]
 800424c:	1d11      	adds	r1, r2, #4
 800424e:	6812      	ldr	r2, [r2, #0]
 8004250:	9103      	str	r1, [sp, #12]
 8004252:	2a00      	cmp	r2, #0
 8004254:	db01      	blt.n	800425a <_svfiprintf_r+0xfa>
 8004256:	9207      	str	r2, [sp, #28]
 8004258:	e004      	b.n	8004264 <_svfiprintf_r+0x104>
 800425a:	4252      	negs	r2, r2
 800425c:	f043 0302 	orr.w	r3, r3, #2
 8004260:	9207      	str	r2, [sp, #28]
 8004262:	9304      	str	r3, [sp, #16]
 8004264:	783b      	ldrb	r3, [r7, #0]
 8004266:	2b2e      	cmp	r3, #46	; 0x2e
 8004268:	d10c      	bne.n	8004284 <_svfiprintf_r+0x124>
 800426a:	787b      	ldrb	r3, [r7, #1]
 800426c:	2b2a      	cmp	r3, #42	; 0x2a
 800426e:	d133      	bne.n	80042d8 <_svfiprintf_r+0x178>
 8004270:	9b03      	ldr	r3, [sp, #12]
 8004272:	1d1a      	adds	r2, r3, #4
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	9203      	str	r2, [sp, #12]
 8004278:	2b00      	cmp	r3, #0
 800427a:	bfb8      	it	lt
 800427c:	f04f 33ff 	movlt.w	r3, #4294967295
 8004280:	3702      	adds	r7, #2
 8004282:	9305      	str	r3, [sp, #20]
 8004284:	4d2e      	ldr	r5, [pc, #184]	; (8004340 <_svfiprintf_r+0x1e0>)
 8004286:	7839      	ldrb	r1, [r7, #0]
 8004288:	2203      	movs	r2, #3
 800428a:	4628      	mov	r0, r5
 800428c:	f7fb ffa0 	bl	80001d0 <memchr>
 8004290:	b138      	cbz	r0, 80042a2 <_svfiprintf_r+0x142>
 8004292:	2340      	movs	r3, #64	; 0x40
 8004294:	1b40      	subs	r0, r0, r5
 8004296:	fa03 f000 	lsl.w	r0, r3, r0
 800429a:	9b04      	ldr	r3, [sp, #16]
 800429c:	4303      	orrs	r3, r0
 800429e:	3701      	adds	r7, #1
 80042a0:	9304      	str	r3, [sp, #16]
 80042a2:	7839      	ldrb	r1, [r7, #0]
 80042a4:	4827      	ldr	r0, [pc, #156]	; (8004344 <_svfiprintf_r+0x1e4>)
 80042a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80042aa:	2206      	movs	r2, #6
 80042ac:	1c7e      	adds	r6, r7, #1
 80042ae:	f7fb ff8f 	bl	80001d0 <memchr>
 80042b2:	2800      	cmp	r0, #0
 80042b4:	d038      	beq.n	8004328 <_svfiprintf_r+0x1c8>
 80042b6:	4b24      	ldr	r3, [pc, #144]	; (8004348 <_svfiprintf_r+0x1e8>)
 80042b8:	bb13      	cbnz	r3, 8004300 <_svfiprintf_r+0x1a0>
 80042ba:	9b03      	ldr	r3, [sp, #12]
 80042bc:	3307      	adds	r3, #7
 80042be:	f023 0307 	bic.w	r3, r3, #7
 80042c2:	3308      	adds	r3, #8
 80042c4:	9303      	str	r3, [sp, #12]
 80042c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80042c8:	444b      	add	r3, r9
 80042ca:	9309      	str	r3, [sp, #36]	; 0x24
 80042cc:	e76d      	b.n	80041aa <_svfiprintf_r+0x4a>
 80042ce:	fb05 3202 	mla	r2, r5, r2, r3
 80042d2:	2001      	movs	r0, #1
 80042d4:	460f      	mov	r7, r1
 80042d6:	e7a6      	b.n	8004226 <_svfiprintf_r+0xc6>
 80042d8:	2300      	movs	r3, #0
 80042da:	3701      	adds	r7, #1
 80042dc:	9305      	str	r3, [sp, #20]
 80042de:	4619      	mov	r1, r3
 80042e0:	250a      	movs	r5, #10
 80042e2:	4638      	mov	r0, r7
 80042e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042e8:	3a30      	subs	r2, #48	; 0x30
 80042ea:	2a09      	cmp	r2, #9
 80042ec:	d903      	bls.n	80042f6 <_svfiprintf_r+0x196>
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d0c8      	beq.n	8004284 <_svfiprintf_r+0x124>
 80042f2:	9105      	str	r1, [sp, #20]
 80042f4:	e7c6      	b.n	8004284 <_svfiprintf_r+0x124>
 80042f6:	fb05 2101 	mla	r1, r5, r1, r2
 80042fa:	2301      	movs	r3, #1
 80042fc:	4607      	mov	r7, r0
 80042fe:	e7f0      	b.n	80042e2 <_svfiprintf_r+0x182>
 8004300:	ab03      	add	r3, sp, #12
 8004302:	9300      	str	r3, [sp, #0]
 8004304:	4622      	mov	r2, r4
 8004306:	4b11      	ldr	r3, [pc, #68]	; (800434c <_svfiprintf_r+0x1ec>)
 8004308:	a904      	add	r1, sp, #16
 800430a:	4640      	mov	r0, r8
 800430c:	f3af 8000 	nop.w
 8004310:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004314:	4681      	mov	r9, r0
 8004316:	d1d6      	bne.n	80042c6 <_svfiprintf_r+0x166>
 8004318:	89a3      	ldrh	r3, [r4, #12]
 800431a:	065b      	lsls	r3, r3, #25
 800431c:	f53f af35 	bmi.w	800418a <_svfiprintf_r+0x2a>
 8004320:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004322:	b01d      	add	sp, #116	; 0x74
 8004324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004328:	ab03      	add	r3, sp, #12
 800432a:	9300      	str	r3, [sp, #0]
 800432c:	4622      	mov	r2, r4
 800432e:	4b07      	ldr	r3, [pc, #28]	; (800434c <_svfiprintf_r+0x1ec>)
 8004330:	a904      	add	r1, sp, #16
 8004332:	4640      	mov	r0, r8
 8004334:	f000 f882 	bl	800443c <_printf_i>
 8004338:	e7ea      	b.n	8004310 <_svfiprintf_r+0x1b0>
 800433a:	bf00      	nop
 800433c:	08007540 	.word	0x08007540
 8004340:	08007546 	.word	0x08007546
 8004344:	0800754a 	.word	0x0800754a
 8004348:	00000000 	.word	0x00000000
 800434c:	080040ad 	.word	0x080040ad

08004350 <_printf_common>:
 8004350:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004354:	4691      	mov	r9, r2
 8004356:	461f      	mov	r7, r3
 8004358:	688a      	ldr	r2, [r1, #8]
 800435a:	690b      	ldr	r3, [r1, #16]
 800435c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004360:	4293      	cmp	r3, r2
 8004362:	bfb8      	it	lt
 8004364:	4613      	movlt	r3, r2
 8004366:	f8c9 3000 	str.w	r3, [r9]
 800436a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800436e:	4606      	mov	r6, r0
 8004370:	460c      	mov	r4, r1
 8004372:	b112      	cbz	r2, 800437a <_printf_common+0x2a>
 8004374:	3301      	adds	r3, #1
 8004376:	f8c9 3000 	str.w	r3, [r9]
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	0699      	lsls	r1, r3, #26
 800437e:	bf42      	ittt	mi
 8004380:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004384:	3302      	addmi	r3, #2
 8004386:	f8c9 3000 	strmi.w	r3, [r9]
 800438a:	6825      	ldr	r5, [r4, #0]
 800438c:	f015 0506 	ands.w	r5, r5, #6
 8004390:	d107      	bne.n	80043a2 <_printf_common+0x52>
 8004392:	f104 0a19 	add.w	sl, r4, #25
 8004396:	68e3      	ldr	r3, [r4, #12]
 8004398:	f8d9 2000 	ldr.w	r2, [r9]
 800439c:	1a9b      	subs	r3, r3, r2
 800439e:	42ab      	cmp	r3, r5
 80043a0:	dc28      	bgt.n	80043f4 <_printf_common+0xa4>
 80043a2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80043a6:	6822      	ldr	r2, [r4, #0]
 80043a8:	3300      	adds	r3, #0
 80043aa:	bf18      	it	ne
 80043ac:	2301      	movne	r3, #1
 80043ae:	0692      	lsls	r2, r2, #26
 80043b0:	d42d      	bmi.n	800440e <_printf_common+0xbe>
 80043b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80043b6:	4639      	mov	r1, r7
 80043b8:	4630      	mov	r0, r6
 80043ba:	47c0      	blx	r8
 80043bc:	3001      	adds	r0, #1
 80043be:	d020      	beq.n	8004402 <_printf_common+0xb2>
 80043c0:	6823      	ldr	r3, [r4, #0]
 80043c2:	68e5      	ldr	r5, [r4, #12]
 80043c4:	f8d9 2000 	ldr.w	r2, [r9]
 80043c8:	f003 0306 	and.w	r3, r3, #6
 80043cc:	2b04      	cmp	r3, #4
 80043ce:	bf08      	it	eq
 80043d0:	1aad      	subeq	r5, r5, r2
 80043d2:	68a3      	ldr	r3, [r4, #8]
 80043d4:	6922      	ldr	r2, [r4, #16]
 80043d6:	bf0c      	ite	eq
 80043d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80043dc:	2500      	movne	r5, #0
 80043de:	4293      	cmp	r3, r2
 80043e0:	bfc4      	itt	gt
 80043e2:	1a9b      	subgt	r3, r3, r2
 80043e4:	18ed      	addgt	r5, r5, r3
 80043e6:	f04f 0900 	mov.w	r9, #0
 80043ea:	341a      	adds	r4, #26
 80043ec:	454d      	cmp	r5, r9
 80043ee:	d11a      	bne.n	8004426 <_printf_common+0xd6>
 80043f0:	2000      	movs	r0, #0
 80043f2:	e008      	b.n	8004406 <_printf_common+0xb6>
 80043f4:	2301      	movs	r3, #1
 80043f6:	4652      	mov	r2, sl
 80043f8:	4639      	mov	r1, r7
 80043fa:	4630      	mov	r0, r6
 80043fc:	47c0      	blx	r8
 80043fe:	3001      	adds	r0, #1
 8004400:	d103      	bne.n	800440a <_printf_common+0xba>
 8004402:	f04f 30ff 	mov.w	r0, #4294967295
 8004406:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800440a:	3501      	adds	r5, #1
 800440c:	e7c3      	b.n	8004396 <_printf_common+0x46>
 800440e:	18e1      	adds	r1, r4, r3
 8004410:	1c5a      	adds	r2, r3, #1
 8004412:	2030      	movs	r0, #48	; 0x30
 8004414:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004418:	4422      	add	r2, r4
 800441a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800441e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004422:	3302      	adds	r3, #2
 8004424:	e7c5      	b.n	80043b2 <_printf_common+0x62>
 8004426:	2301      	movs	r3, #1
 8004428:	4622      	mov	r2, r4
 800442a:	4639      	mov	r1, r7
 800442c:	4630      	mov	r0, r6
 800442e:	47c0      	blx	r8
 8004430:	3001      	adds	r0, #1
 8004432:	d0e6      	beq.n	8004402 <_printf_common+0xb2>
 8004434:	f109 0901 	add.w	r9, r9, #1
 8004438:	e7d8      	b.n	80043ec <_printf_common+0x9c>
	...

0800443c <_printf_i>:
 800443c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004440:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004444:	460c      	mov	r4, r1
 8004446:	7e09      	ldrb	r1, [r1, #24]
 8004448:	b085      	sub	sp, #20
 800444a:	296e      	cmp	r1, #110	; 0x6e
 800444c:	4617      	mov	r7, r2
 800444e:	4606      	mov	r6, r0
 8004450:	4698      	mov	r8, r3
 8004452:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004454:	f000 80b3 	beq.w	80045be <_printf_i+0x182>
 8004458:	d822      	bhi.n	80044a0 <_printf_i+0x64>
 800445a:	2963      	cmp	r1, #99	; 0x63
 800445c:	d036      	beq.n	80044cc <_printf_i+0x90>
 800445e:	d80a      	bhi.n	8004476 <_printf_i+0x3a>
 8004460:	2900      	cmp	r1, #0
 8004462:	f000 80b9 	beq.w	80045d8 <_printf_i+0x19c>
 8004466:	2958      	cmp	r1, #88	; 0x58
 8004468:	f000 8083 	beq.w	8004572 <_printf_i+0x136>
 800446c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004470:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004474:	e032      	b.n	80044dc <_printf_i+0xa0>
 8004476:	2964      	cmp	r1, #100	; 0x64
 8004478:	d001      	beq.n	800447e <_printf_i+0x42>
 800447a:	2969      	cmp	r1, #105	; 0x69
 800447c:	d1f6      	bne.n	800446c <_printf_i+0x30>
 800447e:	6820      	ldr	r0, [r4, #0]
 8004480:	6813      	ldr	r3, [r2, #0]
 8004482:	0605      	lsls	r5, r0, #24
 8004484:	f103 0104 	add.w	r1, r3, #4
 8004488:	d52a      	bpl.n	80044e0 <_printf_i+0xa4>
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	6011      	str	r1, [r2, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	da03      	bge.n	800449a <_printf_i+0x5e>
 8004492:	222d      	movs	r2, #45	; 0x2d
 8004494:	425b      	negs	r3, r3
 8004496:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800449a:	486f      	ldr	r0, [pc, #444]	; (8004658 <_printf_i+0x21c>)
 800449c:	220a      	movs	r2, #10
 800449e:	e039      	b.n	8004514 <_printf_i+0xd8>
 80044a0:	2973      	cmp	r1, #115	; 0x73
 80044a2:	f000 809d 	beq.w	80045e0 <_printf_i+0x1a4>
 80044a6:	d808      	bhi.n	80044ba <_printf_i+0x7e>
 80044a8:	296f      	cmp	r1, #111	; 0x6f
 80044aa:	d020      	beq.n	80044ee <_printf_i+0xb2>
 80044ac:	2970      	cmp	r1, #112	; 0x70
 80044ae:	d1dd      	bne.n	800446c <_printf_i+0x30>
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	f043 0320 	orr.w	r3, r3, #32
 80044b6:	6023      	str	r3, [r4, #0]
 80044b8:	e003      	b.n	80044c2 <_printf_i+0x86>
 80044ba:	2975      	cmp	r1, #117	; 0x75
 80044bc:	d017      	beq.n	80044ee <_printf_i+0xb2>
 80044be:	2978      	cmp	r1, #120	; 0x78
 80044c0:	d1d4      	bne.n	800446c <_printf_i+0x30>
 80044c2:	2378      	movs	r3, #120	; 0x78
 80044c4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044c8:	4864      	ldr	r0, [pc, #400]	; (800465c <_printf_i+0x220>)
 80044ca:	e055      	b.n	8004578 <_printf_i+0x13c>
 80044cc:	6813      	ldr	r3, [r2, #0]
 80044ce:	1d19      	adds	r1, r3, #4
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	6011      	str	r1, [r2, #0]
 80044d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80044dc:	2301      	movs	r3, #1
 80044de:	e08c      	b.n	80045fa <_printf_i+0x1be>
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6011      	str	r1, [r2, #0]
 80044e4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80044e8:	bf18      	it	ne
 80044ea:	b21b      	sxthne	r3, r3
 80044ec:	e7cf      	b.n	800448e <_printf_i+0x52>
 80044ee:	6813      	ldr	r3, [r2, #0]
 80044f0:	6825      	ldr	r5, [r4, #0]
 80044f2:	1d18      	adds	r0, r3, #4
 80044f4:	6010      	str	r0, [r2, #0]
 80044f6:	0628      	lsls	r0, r5, #24
 80044f8:	d501      	bpl.n	80044fe <_printf_i+0xc2>
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	e002      	b.n	8004504 <_printf_i+0xc8>
 80044fe:	0668      	lsls	r0, r5, #25
 8004500:	d5fb      	bpl.n	80044fa <_printf_i+0xbe>
 8004502:	881b      	ldrh	r3, [r3, #0]
 8004504:	4854      	ldr	r0, [pc, #336]	; (8004658 <_printf_i+0x21c>)
 8004506:	296f      	cmp	r1, #111	; 0x6f
 8004508:	bf14      	ite	ne
 800450a:	220a      	movne	r2, #10
 800450c:	2208      	moveq	r2, #8
 800450e:	2100      	movs	r1, #0
 8004510:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004514:	6865      	ldr	r5, [r4, #4]
 8004516:	60a5      	str	r5, [r4, #8]
 8004518:	2d00      	cmp	r5, #0
 800451a:	f2c0 8095 	blt.w	8004648 <_printf_i+0x20c>
 800451e:	6821      	ldr	r1, [r4, #0]
 8004520:	f021 0104 	bic.w	r1, r1, #4
 8004524:	6021      	str	r1, [r4, #0]
 8004526:	2b00      	cmp	r3, #0
 8004528:	d13d      	bne.n	80045a6 <_printf_i+0x16a>
 800452a:	2d00      	cmp	r5, #0
 800452c:	f040 808e 	bne.w	800464c <_printf_i+0x210>
 8004530:	4665      	mov	r5, ip
 8004532:	2a08      	cmp	r2, #8
 8004534:	d10b      	bne.n	800454e <_printf_i+0x112>
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	07db      	lsls	r3, r3, #31
 800453a:	d508      	bpl.n	800454e <_printf_i+0x112>
 800453c:	6923      	ldr	r3, [r4, #16]
 800453e:	6862      	ldr	r2, [r4, #4]
 8004540:	429a      	cmp	r2, r3
 8004542:	bfde      	ittt	le
 8004544:	2330      	movle	r3, #48	; 0x30
 8004546:	f805 3c01 	strble.w	r3, [r5, #-1]
 800454a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800454e:	ebac 0305 	sub.w	r3, ip, r5
 8004552:	6123      	str	r3, [r4, #16]
 8004554:	f8cd 8000 	str.w	r8, [sp]
 8004558:	463b      	mov	r3, r7
 800455a:	aa03      	add	r2, sp, #12
 800455c:	4621      	mov	r1, r4
 800455e:	4630      	mov	r0, r6
 8004560:	f7ff fef6 	bl	8004350 <_printf_common>
 8004564:	3001      	adds	r0, #1
 8004566:	d14d      	bne.n	8004604 <_printf_i+0x1c8>
 8004568:	f04f 30ff 	mov.w	r0, #4294967295
 800456c:	b005      	add	sp, #20
 800456e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004572:	4839      	ldr	r0, [pc, #228]	; (8004658 <_printf_i+0x21c>)
 8004574:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004578:	6813      	ldr	r3, [r2, #0]
 800457a:	6821      	ldr	r1, [r4, #0]
 800457c:	1d1d      	adds	r5, r3, #4
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	6015      	str	r5, [r2, #0]
 8004582:	060a      	lsls	r2, r1, #24
 8004584:	d50b      	bpl.n	800459e <_printf_i+0x162>
 8004586:	07ca      	lsls	r2, r1, #31
 8004588:	bf44      	itt	mi
 800458a:	f041 0120 	orrmi.w	r1, r1, #32
 800458e:	6021      	strmi	r1, [r4, #0]
 8004590:	b91b      	cbnz	r3, 800459a <_printf_i+0x15e>
 8004592:	6822      	ldr	r2, [r4, #0]
 8004594:	f022 0220 	bic.w	r2, r2, #32
 8004598:	6022      	str	r2, [r4, #0]
 800459a:	2210      	movs	r2, #16
 800459c:	e7b7      	b.n	800450e <_printf_i+0xd2>
 800459e:	064d      	lsls	r5, r1, #25
 80045a0:	bf48      	it	mi
 80045a2:	b29b      	uxthmi	r3, r3
 80045a4:	e7ef      	b.n	8004586 <_printf_i+0x14a>
 80045a6:	4665      	mov	r5, ip
 80045a8:	fbb3 f1f2 	udiv	r1, r3, r2
 80045ac:	fb02 3311 	mls	r3, r2, r1, r3
 80045b0:	5cc3      	ldrb	r3, [r0, r3]
 80045b2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80045b6:	460b      	mov	r3, r1
 80045b8:	2900      	cmp	r1, #0
 80045ba:	d1f5      	bne.n	80045a8 <_printf_i+0x16c>
 80045bc:	e7b9      	b.n	8004532 <_printf_i+0xf6>
 80045be:	6813      	ldr	r3, [r2, #0]
 80045c0:	6825      	ldr	r5, [r4, #0]
 80045c2:	6961      	ldr	r1, [r4, #20]
 80045c4:	1d18      	adds	r0, r3, #4
 80045c6:	6010      	str	r0, [r2, #0]
 80045c8:	0628      	lsls	r0, r5, #24
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	d501      	bpl.n	80045d2 <_printf_i+0x196>
 80045ce:	6019      	str	r1, [r3, #0]
 80045d0:	e002      	b.n	80045d8 <_printf_i+0x19c>
 80045d2:	066a      	lsls	r2, r5, #25
 80045d4:	d5fb      	bpl.n	80045ce <_printf_i+0x192>
 80045d6:	8019      	strh	r1, [r3, #0]
 80045d8:	2300      	movs	r3, #0
 80045da:	6123      	str	r3, [r4, #16]
 80045dc:	4665      	mov	r5, ip
 80045de:	e7b9      	b.n	8004554 <_printf_i+0x118>
 80045e0:	6813      	ldr	r3, [r2, #0]
 80045e2:	1d19      	adds	r1, r3, #4
 80045e4:	6011      	str	r1, [r2, #0]
 80045e6:	681d      	ldr	r5, [r3, #0]
 80045e8:	6862      	ldr	r2, [r4, #4]
 80045ea:	2100      	movs	r1, #0
 80045ec:	4628      	mov	r0, r5
 80045ee:	f7fb fdef 	bl	80001d0 <memchr>
 80045f2:	b108      	cbz	r0, 80045f8 <_printf_i+0x1bc>
 80045f4:	1b40      	subs	r0, r0, r5
 80045f6:	6060      	str	r0, [r4, #4]
 80045f8:	6863      	ldr	r3, [r4, #4]
 80045fa:	6123      	str	r3, [r4, #16]
 80045fc:	2300      	movs	r3, #0
 80045fe:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004602:	e7a7      	b.n	8004554 <_printf_i+0x118>
 8004604:	6923      	ldr	r3, [r4, #16]
 8004606:	462a      	mov	r2, r5
 8004608:	4639      	mov	r1, r7
 800460a:	4630      	mov	r0, r6
 800460c:	47c0      	blx	r8
 800460e:	3001      	adds	r0, #1
 8004610:	d0aa      	beq.n	8004568 <_printf_i+0x12c>
 8004612:	6823      	ldr	r3, [r4, #0]
 8004614:	079b      	lsls	r3, r3, #30
 8004616:	d413      	bmi.n	8004640 <_printf_i+0x204>
 8004618:	68e0      	ldr	r0, [r4, #12]
 800461a:	9b03      	ldr	r3, [sp, #12]
 800461c:	4298      	cmp	r0, r3
 800461e:	bfb8      	it	lt
 8004620:	4618      	movlt	r0, r3
 8004622:	e7a3      	b.n	800456c <_printf_i+0x130>
 8004624:	2301      	movs	r3, #1
 8004626:	464a      	mov	r2, r9
 8004628:	4639      	mov	r1, r7
 800462a:	4630      	mov	r0, r6
 800462c:	47c0      	blx	r8
 800462e:	3001      	adds	r0, #1
 8004630:	d09a      	beq.n	8004568 <_printf_i+0x12c>
 8004632:	3501      	adds	r5, #1
 8004634:	68e3      	ldr	r3, [r4, #12]
 8004636:	9a03      	ldr	r2, [sp, #12]
 8004638:	1a9b      	subs	r3, r3, r2
 800463a:	42ab      	cmp	r3, r5
 800463c:	dcf2      	bgt.n	8004624 <_printf_i+0x1e8>
 800463e:	e7eb      	b.n	8004618 <_printf_i+0x1dc>
 8004640:	2500      	movs	r5, #0
 8004642:	f104 0919 	add.w	r9, r4, #25
 8004646:	e7f5      	b.n	8004634 <_printf_i+0x1f8>
 8004648:	2b00      	cmp	r3, #0
 800464a:	d1ac      	bne.n	80045a6 <_printf_i+0x16a>
 800464c:	7803      	ldrb	r3, [r0, #0]
 800464e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004652:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004656:	e76c      	b.n	8004532 <_printf_i+0xf6>
 8004658:	08007551 	.word	0x08007551
 800465c:	08007562 	.word	0x08007562

08004660 <memmove>:
 8004660:	4288      	cmp	r0, r1
 8004662:	b510      	push	{r4, lr}
 8004664:	eb01 0302 	add.w	r3, r1, r2
 8004668:	d807      	bhi.n	800467a <memmove+0x1a>
 800466a:	1e42      	subs	r2, r0, #1
 800466c:	4299      	cmp	r1, r3
 800466e:	d00a      	beq.n	8004686 <memmove+0x26>
 8004670:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004674:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004678:	e7f8      	b.n	800466c <memmove+0xc>
 800467a:	4283      	cmp	r3, r0
 800467c:	d9f5      	bls.n	800466a <memmove+0xa>
 800467e:	1881      	adds	r1, r0, r2
 8004680:	1ad2      	subs	r2, r2, r3
 8004682:	42d3      	cmn	r3, r2
 8004684:	d100      	bne.n	8004688 <memmove+0x28>
 8004686:	bd10      	pop	{r4, pc}
 8004688:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800468c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004690:	e7f7      	b.n	8004682 <memmove+0x22>
	...

08004694 <_free_r>:
 8004694:	b538      	push	{r3, r4, r5, lr}
 8004696:	4605      	mov	r5, r0
 8004698:	2900      	cmp	r1, #0
 800469a:	d045      	beq.n	8004728 <_free_r+0x94>
 800469c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80046a0:	1f0c      	subs	r4, r1, #4
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	bfb8      	it	lt
 80046a6:	18e4      	addlt	r4, r4, r3
 80046a8:	f000 f8d2 	bl	8004850 <__malloc_lock>
 80046ac:	4a1f      	ldr	r2, [pc, #124]	; (800472c <_free_r+0x98>)
 80046ae:	6813      	ldr	r3, [r2, #0]
 80046b0:	4610      	mov	r0, r2
 80046b2:	b933      	cbnz	r3, 80046c2 <_free_r+0x2e>
 80046b4:	6063      	str	r3, [r4, #4]
 80046b6:	6014      	str	r4, [r2, #0]
 80046b8:	4628      	mov	r0, r5
 80046ba:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80046be:	f000 b8c8 	b.w	8004852 <__malloc_unlock>
 80046c2:	42a3      	cmp	r3, r4
 80046c4:	d90c      	bls.n	80046e0 <_free_r+0x4c>
 80046c6:	6821      	ldr	r1, [r4, #0]
 80046c8:	1862      	adds	r2, r4, r1
 80046ca:	4293      	cmp	r3, r2
 80046cc:	bf04      	itt	eq
 80046ce:	681a      	ldreq	r2, [r3, #0]
 80046d0:	685b      	ldreq	r3, [r3, #4]
 80046d2:	6063      	str	r3, [r4, #4]
 80046d4:	bf04      	itt	eq
 80046d6:	1852      	addeq	r2, r2, r1
 80046d8:	6022      	streq	r2, [r4, #0]
 80046da:	6004      	str	r4, [r0, #0]
 80046dc:	e7ec      	b.n	80046b8 <_free_r+0x24>
 80046de:	4613      	mov	r3, r2
 80046e0:	685a      	ldr	r2, [r3, #4]
 80046e2:	b10a      	cbz	r2, 80046e8 <_free_r+0x54>
 80046e4:	42a2      	cmp	r2, r4
 80046e6:	d9fa      	bls.n	80046de <_free_r+0x4a>
 80046e8:	6819      	ldr	r1, [r3, #0]
 80046ea:	1858      	adds	r0, r3, r1
 80046ec:	42a0      	cmp	r0, r4
 80046ee:	d10b      	bne.n	8004708 <_free_r+0x74>
 80046f0:	6820      	ldr	r0, [r4, #0]
 80046f2:	4401      	add	r1, r0
 80046f4:	1858      	adds	r0, r3, r1
 80046f6:	4282      	cmp	r2, r0
 80046f8:	6019      	str	r1, [r3, #0]
 80046fa:	d1dd      	bne.n	80046b8 <_free_r+0x24>
 80046fc:	6810      	ldr	r0, [r2, #0]
 80046fe:	6852      	ldr	r2, [r2, #4]
 8004700:	605a      	str	r2, [r3, #4]
 8004702:	4401      	add	r1, r0
 8004704:	6019      	str	r1, [r3, #0]
 8004706:	e7d7      	b.n	80046b8 <_free_r+0x24>
 8004708:	d902      	bls.n	8004710 <_free_r+0x7c>
 800470a:	230c      	movs	r3, #12
 800470c:	602b      	str	r3, [r5, #0]
 800470e:	e7d3      	b.n	80046b8 <_free_r+0x24>
 8004710:	6820      	ldr	r0, [r4, #0]
 8004712:	1821      	adds	r1, r4, r0
 8004714:	428a      	cmp	r2, r1
 8004716:	bf04      	itt	eq
 8004718:	6811      	ldreq	r1, [r2, #0]
 800471a:	6852      	ldreq	r2, [r2, #4]
 800471c:	6062      	str	r2, [r4, #4]
 800471e:	bf04      	itt	eq
 8004720:	1809      	addeq	r1, r1, r0
 8004722:	6021      	streq	r1, [r4, #0]
 8004724:	605c      	str	r4, [r3, #4]
 8004726:	e7c7      	b.n	80046b8 <_free_r+0x24>
 8004728:	bd38      	pop	{r3, r4, r5, pc}
 800472a:	bf00      	nop
 800472c:	200004d0 	.word	0x200004d0

08004730 <_malloc_r>:
 8004730:	b570      	push	{r4, r5, r6, lr}
 8004732:	1ccd      	adds	r5, r1, #3
 8004734:	f025 0503 	bic.w	r5, r5, #3
 8004738:	3508      	adds	r5, #8
 800473a:	2d0c      	cmp	r5, #12
 800473c:	bf38      	it	cc
 800473e:	250c      	movcc	r5, #12
 8004740:	2d00      	cmp	r5, #0
 8004742:	4606      	mov	r6, r0
 8004744:	db01      	blt.n	800474a <_malloc_r+0x1a>
 8004746:	42a9      	cmp	r1, r5
 8004748:	d903      	bls.n	8004752 <_malloc_r+0x22>
 800474a:	230c      	movs	r3, #12
 800474c:	6033      	str	r3, [r6, #0]
 800474e:	2000      	movs	r0, #0
 8004750:	bd70      	pop	{r4, r5, r6, pc}
 8004752:	f000 f87d 	bl	8004850 <__malloc_lock>
 8004756:	4a21      	ldr	r2, [pc, #132]	; (80047dc <_malloc_r+0xac>)
 8004758:	6814      	ldr	r4, [r2, #0]
 800475a:	4621      	mov	r1, r4
 800475c:	b991      	cbnz	r1, 8004784 <_malloc_r+0x54>
 800475e:	4c20      	ldr	r4, [pc, #128]	; (80047e0 <_malloc_r+0xb0>)
 8004760:	6823      	ldr	r3, [r4, #0]
 8004762:	b91b      	cbnz	r3, 800476c <_malloc_r+0x3c>
 8004764:	4630      	mov	r0, r6
 8004766:	f000 f863 	bl	8004830 <_sbrk_r>
 800476a:	6020      	str	r0, [r4, #0]
 800476c:	4629      	mov	r1, r5
 800476e:	4630      	mov	r0, r6
 8004770:	f000 f85e 	bl	8004830 <_sbrk_r>
 8004774:	1c43      	adds	r3, r0, #1
 8004776:	d124      	bne.n	80047c2 <_malloc_r+0x92>
 8004778:	230c      	movs	r3, #12
 800477a:	6033      	str	r3, [r6, #0]
 800477c:	4630      	mov	r0, r6
 800477e:	f000 f868 	bl	8004852 <__malloc_unlock>
 8004782:	e7e4      	b.n	800474e <_malloc_r+0x1e>
 8004784:	680b      	ldr	r3, [r1, #0]
 8004786:	1b5b      	subs	r3, r3, r5
 8004788:	d418      	bmi.n	80047bc <_malloc_r+0x8c>
 800478a:	2b0b      	cmp	r3, #11
 800478c:	d90f      	bls.n	80047ae <_malloc_r+0x7e>
 800478e:	600b      	str	r3, [r1, #0]
 8004790:	50cd      	str	r5, [r1, r3]
 8004792:	18cc      	adds	r4, r1, r3
 8004794:	4630      	mov	r0, r6
 8004796:	f000 f85c 	bl	8004852 <__malloc_unlock>
 800479a:	f104 000b 	add.w	r0, r4, #11
 800479e:	1d23      	adds	r3, r4, #4
 80047a0:	f020 0007 	bic.w	r0, r0, #7
 80047a4:	1ac3      	subs	r3, r0, r3
 80047a6:	d0d3      	beq.n	8004750 <_malloc_r+0x20>
 80047a8:	425a      	negs	r2, r3
 80047aa:	50e2      	str	r2, [r4, r3]
 80047ac:	e7d0      	b.n	8004750 <_malloc_r+0x20>
 80047ae:	428c      	cmp	r4, r1
 80047b0:	684b      	ldr	r3, [r1, #4]
 80047b2:	bf16      	itet	ne
 80047b4:	6063      	strne	r3, [r4, #4]
 80047b6:	6013      	streq	r3, [r2, #0]
 80047b8:	460c      	movne	r4, r1
 80047ba:	e7eb      	b.n	8004794 <_malloc_r+0x64>
 80047bc:	460c      	mov	r4, r1
 80047be:	6849      	ldr	r1, [r1, #4]
 80047c0:	e7cc      	b.n	800475c <_malloc_r+0x2c>
 80047c2:	1cc4      	adds	r4, r0, #3
 80047c4:	f024 0403 	bic.w	r4, r4, #3
 80047c8:	42a0      	cmp	r0, r4
 80047ca:	d005      	beq.n	80047d8 <_malloc_r+0xa8>
 80047cc:	1a21      	subs	r1, r4, r0
 80047ce:	4630      	mov	r0, r6
 80047d0:	f000 f82e 	bl	8004830 <_sbrk_r>
 80047d4:	3001      	adds	r0, #1
 80047d6:	d0cf      	beq.n	8004778 <_malloc_r+0x48>
 80047d8:	6025      	str	r5, [r4, #0]
 80047da:	e7db      	b.n	8004794 <_malloc_r+0x64>
 80047dc:	200004d0 	.word	0x200004d0
 80047e0:	200004d4 	.word	0x200004d4

080047e4 <_realloc_r>:
 80047e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047e6:	4607      	mov	r7, r0
 80047e8:	4614      	mov	r4, r2
 80047ea:	460e      	mov	r6, r1
 80047ec:	b921      	cbnz	r1, 80047f8 <_realloc_r+0x14>
 80047ee:	4611      	mov	r1, r2
 80047f0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80047f4:	f7ff bf9c 	b.w	8004730 <_malloc_r>
 80047f8:	b922      	cbnz	r2, 8004804 <_realloc_r+0x20>
 80047fa:	f7ff ff4b 	bl	8004694 <_free_r>
 80047fe:	4625      	mov	r5, r4
 8004800:	4628      	mov	r0, r5
 8004802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004804:	f000 f826 	bl	8004854 <_malloc_usable_size_r>
 8004808:	42a0      	cmp	r0, r4
 800480a:	d20f      	bcs.n	800482c <_realloc_r+0x48>
 800480c:	4621      	mov	r1, r4
 800480e:	4638      	mov	r0, r7
 8004810:	f7ff ff8e 	bl	8004730 <_malloc_r>
 8004814:	4605      	mov	r5, r0
 8004816:	2800      	cmp	r0, #0
 8004818:	d0f2      	beq.n	8004800 <_realloc_r+0x1c>
 800481a:	4631      	mov	r1, r6
 800481c:	4622      	mov	r2, r4
 800481e:	f7ff fc11 	bl	8004044 <memcpy>
 8004822:	4631      	mov	r1, r6
 8004824:	4638      	mov	r0, r7
 8004826:	f7ff ff35 	bl	8004694 <_free_r>
 800482a:	e7e9      	b.n	8004800 <_realloc_r+0x1c>
 800482c:	4635      	mov	r5, r6
 800482e:	e7e7      	b.n	8004800 <_realloc_r+0x1c>

08004830 <_sbrk_r>:
 8004830:	b538      	push	{r3, r4, r5, lr}
 8004832:	4c06      	ldr	r4, [pc, #24]	; (800484c <_sbrk_r+0x1c>)
 8004834:	2300      	movs	r3, #0
 8004836:	4605      	mov	r5, r0
 8004838:	4608      	mov	r0, r1
 800483a:	6023      	str	r3, [r4, #0]
 800483c:	f7ff fb38 	bl	8003eb0 <_sbrk>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d102      	bne.n	800484a <_sbrk_r+0x1a>
 8004844:	6823      	ldr	r3, [r4, #0]
 8004846:	b103      	cbz	r3, 800484a <_sbrk_r+0x1a>
 8004848:	602b      	str	r3, [r5, #0]
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	20000578 	.word	0x20000578

08004850 <__malloc_lock>:
 8004850:	4770      	bx	lr

08004852 <__malloc_unlock>:
 8004852:	4770      	bx	lr

08004854 <_malloc_usable_size_r>:
 8004854:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004858:	1f18      	subs	r0, r3, #4
 800485a:	2b00      	cmp	r3, #0
 800485c:	bfbc      	itt	lt
 800485e:	580b      	ldrlt	r3, [r1, r0]
 8004860:	18c0      	addlt	r0, r0, r3
 8004862:	4770      	bx	lr
 8004864:	0000      	movs	r0, r0
	...

08004868 <floor>:
 8004868:	ec51 0b10 	vmov	r0, r1, d0
 800486c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004870:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004874:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004878:	2e13      	cmp	r6, #19
 800487a:	460c      	mov	r4, r1
 800487c:	ee10 5a10 	vmov	r5, s0
 8004880:	4680      	mov	r8, r0
 8004882:	dc34      	bgt.n	80048ee <floor+0x86>
 8004884:	2e00      	cmp	r6, #0
 8004886:	da16      	bge.n	80048b6 <floor+0x4e>
 8004888:	a335      	add	r3, pc, #212	; (adr r3, 8004960 <floor+0xf8>)
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	f7fb fcf5 	bl	800027c <__adddf3>
 8004892:	2200      	movs	r2, #0
 8004894:	2300      	movs	r3, #0
 8004896:	f7fc f937 	bl	8000b08 <__aeabi_dcmpgt>
 800489a:	b148      	cbz	r0, 80048b0 <floor+0x48>
 800489c:	2c00      	cmp	r4, #0
 800489e:	da59      	bge.n	8004954 <floor+0xec>
 80048a0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80048a4:	4a30      	ldr	r2, [pc, #192]	; (8004968 <floor+0x100>)
 80048a6:	432b      	orrs	r3, r5
 80048a8:	2500      	movs	r5, #0
 80048aa:	42ab      	cmp	r3, r5
 80048ac:	bf18      	it	ne
 80048ae:	4614      	movne	r4, r2
 80048b0:	4621      	mov	r1, r4
 80048b2:	4628      	mov	r0, r5
 80048b4:	e025      	b.n	8004902 <floor+0x9a>
 80048b6:	4f2d      	ldr	r7, [pc, #180]	; (800496c <floor+0x104>)
 80048b8:	4137      	asrs	r7, r6
 80048ba:	ea01 0307 	and.w	r3, r1, r7
 80048be:	4303      	orrs	r3, r0
 80048c0:	d01f      	beq.n	8004902 <floor+0x9a>
 80048c2:	a327      	add	r3, pc, #156	; (adr r3, 8004960 <floor+0xf8>)
 80048c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048c8:	f7fb fcd8 	bl	800027c <__adddf3>
 80048cc:	2200      	movs	r2, #0
 80048ce:	2300      	movs	r3, #0
 80048d0:	f7fc f91a 	bl	8000b08 <__aeabi_dcmpgt>
 80048d4:	2800      	cmp	r0, #0
 80048d6:	d0eb      	beq.n	80048b0 <floor+0x48>
 80048d8:	2c00      	cmp	r4, #0
 80048da:	bfbe      	ittt	lt
 80048dc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80048e0:	fa43 f606 	asrlt.w	r6, r3, r6
 80048e4:	19a4      	addlt	r4, r4, r6
 80048e6:	ea24 0407 	bic.w	r4, r4, r7
 80048ea:	2500      	movs	r5, #0
 80048ec:	e7e0      	b.n	80048b0 <floor+0x48>
 80048ee:	2e33      	cmp	r6, #51	; 0x33
 80048f0:	dd0b      	ble.n	800490a <floor+0xa2>
 80048f2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80048f6:	d104      	bne.n	8004902 <floor+0x9a>
 80048f8:	ee10 2a10 	vmov	r2, s0
 80048fc:	460b      	mov	r3, r1
 80048fe:	f7fb fcbd 	bl	800027c <__adddf3>
 8004902:	ec41 0b10 	vmov	d0, r0, r1
 8004906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800490a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800490e:	f04f 33ff 	mov.w	r3, #4294967295
 8004912:	fa23 f707 	lsr.w	r7, r3, r7
 8004916:	4207      	tst	r7, r0
 8004918:	d0f3      	beq.n	8004902 <floor+0x9a>
 800491a:	a311      	add	r3, pc, #68	; (adr r3, 8004960 <floor+0xf8>)
 800491c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004920:	f7fb fcac 	bl	800027c <__adddf3>
 8004924:	2200      	movs	r2, #0
 8004926:	2300      	movs	r3, #0
 8004928:	f7fc f8ee 	bl	8000b08 <__aeabi_dcmpgt>
 800492c:	2800      	cmp	r0, #0
 800492e:	d0bf      	beq.n	80048b0 <floor+0x48>
 8004930:	2c00      	cmp	r4, #0
 8004932:	da02      	bge.n	800493a <floor+0xd2>
 8004934:	2e14      	cmp	r6, #20
 8004936:	d103      	bne.n	8004940 <floor+0xd8>
 8004938:	3401      	adds	r4, #1
 800493a:	ea25 0507 	bic.w	r5, r5, r7
 800493e:	e7b7      	b.n	80048b0 <floor+0x48>
 8004940:	2301      	movs	r3, #1
 8004942:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8004946:	fa03 f606 	lsl.w	r6, r3, r6
 800494a:	4435      	add	r5, r6
 800494c:	4545      	cmp	r5, r8
 800494e:	bf38      	it	cc
 8004950:	18e4      	addcc	r4, r4, r3
 8004952:	e7f2      	b.n	800493a <floor+0xd2>
 8004954:	2500      	movs	r5, #0
 8004956:	462c      	mov	r4, r5
 8004958:	e7aa      	b.n	80048b0 <floor+0x48>
 800495a:	bf00      	nop
 800495c:	f3af 8000 	nop.w
 8004960:	8800759c 	.word	0x8800759c
 8004964:	7e37e43c 	.word	0x7e37e43c
 8004968:	bff00000 	.word	0xbff00000
 800496c:	000fffff 	.word	0x000fffff

08004970 <trunc>:
 8004970:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 8004974:	ec5c bb10 	vmov	fp, ip, d0
 8004978:	f3cc 500a 	ubfx	r0, ip, #20, #11
 800497c:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8004980:	2913      	cmp	r1, #19
 8004982:	4664      	mov	r4, ip
 8004984:	dc11      	bgt.n	80049aa <trunc+0x3a>
 8004986:	2900      	cmp	r1, #0
 8004988:	bfa7      	ittee	ge
 800498a:	4b15      	ldrge	r3, [pc, #84]	; (80049e0 <trunc+0x70>)
 800498c:	fa43 f101 	asrge.w	r1, r3, r1
 8004990:	2200      	movlt	r2, #0
 8004992:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 8004996:	bfa4      	itt	ge
 8004998:	2200      	movge	r2, #0
 800499a:	ea2c 0301 	bicge.w	r3, ip, r1
 800499e:	4693      	mov	fp, r2
 80049a0:	469c      	mov	ip, r3
 80049a2:	ec4c bb10 	vmov	d0, fp, ip
 80049a6:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 80049aa:	2933      	cmp	r1, #51	; 0x33
 80049ac:	dd0d      	ble.n	80049ca <trunc+0x5a>
 80049ae:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80049b2:	d1f6      	bne.n	80049a2 <trunc+0x32>
 80049b4:	4663      	mov	r3, ip
 80049b6:	ee10 2a10 	vmov	r2, s0
 80049ba:	ee10 0a10 	vmov	r0, s0
 80049be:	4621      	mov	r1, r4
 80049c0:	f7fb fc5c 	bl	800027c <__adddf3>
 80049c4:	4683      	mov	fp, r0
 80049c6:	468c      	mov	ip, r1
 80049c8:	e7eb      	b.n	80049a2 <trunc+0x32>
 80049ca:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 80049ce:	f04f 33ff 	mov.w	r3, #4294967295
 80049d2:	fa23 f000 	lsr.w	r0, r3, r0
 80049d6:	ea2b 0600 	bic.w	r6, fp, r0
 80049da:	46b3      	mov	fp, r6
 80049dc:	46a4      	mov	ip, r4
 80049de:	e7e0      	b.n	80049a2 <trunc+0x32>
 80049e0:	000fffff 	.word	0x000fffff

080049e4 <log10>:
 80049e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049e6:	ed2d 8b02 	vpush	{d8}
 80049ea:	b08b      	sub	sp, #44	; 0x2c
 80049ec:	ec55 4b10 	vmov	r4, r5, d0
 80049f0:	f000 f9ea 	bl	8004dc8 <__ieee754_log10>
 80049f4:	4b36      	ldr	r3, [pc, #216]	; (8004ad0 <log10+0xec>)
 80049f6:	eeb0 8a40 	vmov.f32	s16, s0
 80049fa:	eef0 8a60 	vmov.f32	s17, s1
 80049fe:	f993 6000 	ldrsb.w	r6, [r3]
 8004a02:	1c73      	adds	r3, r6, #1
 8004a04:	d05c      	beq.n	8004ac0 <log10+0xdc>
 8004a06:	4622      	mov	r2, r4
 8004a08:	462b      	mov	r3, r5
 8004a0a:	4620      	mov	r0, r4
 8004a0c:	4629      	mov	r1, r5
 8004a0e:	f7fc f885 	bl	8000b1c <__aeabi_dcmpun>
 8004a12:	4607      	mov	r7, r0
 8004a14:	2800      	cmp	r0, #0
 8004a16:	d153      	bne.n	8004ac0 <log10+0xdc>
 8004a18:	2200      	movs	r2, #0
 8004a1a:	2300      	movs	r3, #0
 8004a1c:	4620      	mov	r0, r4
 8004a1e:	4629      	mov	r1, r5
 8004a20:	f7fc f85e 	bl	8000ae0 <__aeabi_dcmple>
 8004a24:	2800      	cmp	r0, #0
 8004a26:	d04b      	beq.n	8004ac0 <log10+0xdc>
 8004a28:	4b2a      	ldr	r3, [pc, #168]	; (8004ad4 <log10+0xf0>)
 8004a2a:	9301      	str	r3, [sp, #4]
 8004a2c:	9708      	str	r7, [sp, #32]
 8004a2e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8004a32:	e9cd 4504 	strd	r4, r5, [sp, #16]
 8004a36:	b9a6      	cbnz	r6, 8004a62 <log10+0x7e>
 8004a38:	4b27      	ldr	r3, [pc, #156]	; (8004ad8 <log10+0xf4>)
 8004a3a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004a3e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a42:	4620      	mov	r0, r4
 8004a44:	2200      	movs	r2, #0
 8004a46:	2300      	movs	r3, #0
 8004a48:	4629      	mov	r1, r5
 8004a4a:	f7fc f835 	bl	8000ab8 <__aeabi_dcmpeq>
 8004a4e:	bb40      	cbnz	r0, 8004aa2 <log10+0xbe>
 8004a50:	2301      	movs	r3, #1
 8004a52:	2e02      	cmp	r6, #2
 8004a54:	9300      	str	r3, [sp, #0]
 8004a56:	d119      	bne.n	8004a8c <log10+0xa8>
 8004a58:	f7ff faca 	bl	8003ff0 <__errno>
 8004a5c:	2321      	movs	r3, #33	; 0x21
 8004a5e:	6003      	str	r3, [r0, #0]
 8004a60:	e019      	b.n	8004a96 <log10+0xb2>
 8004a62:	4b1e      	ldr	r3, [pc, #120]	; (8004adc <log10+0xf8>)
 8004a64:	2200      	movs	r2, #0
 8004a66:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	2300      	movs	r3, #0
 8004a70:	4629      	mov	r1, r5
 8004a72:	f7fc f821 	bl	8000ab8 <__aeabi_dcmpeq>
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d0ea      	beq.n	8004a50 <log10+0x6c>
 8004a7a:	2302      	movs	r3, #2
 8004a7c:	429e      	cmp	r6, r3
 8004a7e:	9300      	str	r3, [sp, #0]
 8004a80:	d111      	bne.n	8004aa6 <log10+0xc2>
 8004a82:	f7ff fab5 	bl	8003ff0 <__errno>
 8004a86:	2322      	movs	r3, #34	; 0x22
 8004a88:	6003      	str	r3, [r0, #0]
 8004a8a:	e011      	b.n	8004ab0 <log10+0xcc>
 8004a8c:	4668      	mov	r0, sp
 8004a8e:	f000 fff6 	bl	8005a7e <matherr>
 8004a92:	2800      	cmp	r0, #0
 8004a94:	d0e0      	beq.n	8004a58 <log10+0x74>
 8004a96:	4812      	ldr	r0, [pc, #72]	; (8004ae0 <log10+0xfc>)
 8004a98:	f000 fff6 	bl	8005a88 <nan>
 8004a9c:	ed8d 0b06 	vstr	d0, [sp, #24]
 8004aa0:	e006      	b.n	8004ab0 <log10+0xcc>
 8004aa2:	2302      	movs	r3, #2
 8004aa4:	9300      	str	r3, [sp, #0]
 8004aa6:	4668      	mov	r0, sp
 8004aa8:	f000 ffe9 	bl	8005a7e <matherr>
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d0e8      	beq.n	8004a82 <log10+0x9e>
 8004ab0:	9b08      	ldr	r3, [sp, #32]
 8004ab2:	b11b      	cbz	r3, 8004abc <log10+0xd8>
 8004ab4:	f7ff fa9c 	bl	8003ff0 <__errno>
 8004ab8:	9b08      	ldr	r3, [sp, #32]
 8004aba:	6003      	str	r3, [r0, #0]
 8004abc:	ed9d 8b06 	vldr	d8, [sp, #24]
 8004ac0:	eeb0 0a48 	vmov.f32	s0, s16
 8004ac4:	eef0 0a68 	vmov.f32	s1, s17
 8004ac8:	b00b      	add	sp, #44	; 0x2c
 8004aca:	ecbd 8b02 	vpop	{d8}
 8004ace:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004ad0:	20000080 	.word	0x20000080
 8004ad4:	08007573 	.word	0x08007573
 8004ad8:	c7efffff 	.word	0xc7efffff
 8004adc:	fff00000 	.word	0xfff00000
 8004ae0:	08007545 	.word	0x08007545

08004ae4 <pow>:
 8004ae4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ae8:	ed2d 8b04 	vpush	{d8-d9}
 8004aec:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8004dc0 <pow+0x2dc>
 8004af0:	b08d      	sub	sp, #52	; 0x34
 8004af2:	ec57 6b10 	vmov	r6, r7, d0
 8004af6:	ec55 4b11 	vmov	r4, r5, d1
 8004afa:	f000 f9f1 	bl	8004ee0 <__ieee754_pow>
 8004afe:	f999 3000 	ldrsb.w	r3, [r9]
 8004b02:	9300      	str	r3, [sp, #0]
 8004b04:	3301      	adds	r3, #1
 8004b06:	eeb0 8a40 	vmov.f32	s16, s0
 8004b0a:	eef0 8a60 	vmov.f32	s17, s1
 8004b0e:	46c8      	mov	r8, r9
 8004b10:	d05f      	beq.n	8004bd2 <pow+0xee>
 8004b12:	4622      	mov	r2, r4
 8004b14:	462b      	mov	r3, r5
 8004b16:	4620      	mov	r0, r4
 8004b18:	4629      	mov	r1, r5
 8004b1a:	f7fb ffff 	bl	8000b1c <__aeabi_dcmpun>
 8004b1e:	4683      	mov	fp, r0
 8004b20:	2800      	cmp	r0, #0
 8004b22:	d156      	bne.n	8004bd2 <pow+0xee>
 8004b24:	4632      	mov	r2, r6
 8004b26:	463b      	mov	r3, r7
 8004b28:	4630      	mov	r0, r6
 8004b2a:	4639      	mov	r1, r7
 8004b2c:	f7fb fff6 	bl	8000b1c <__aeabi_dcmpun>
 8004b30:	9001      	str	r0, [sp, #4]
 8004b32:	b1e8      	cbz	r0, 8004b70 <pow+0x8c>
 8004b34:	2200      	movs	r2, #0
 8004b36:	2300      	movs	r3, #0
 8004b38:	4620      	mov	r0, r4
 8004b3a:	4629      	mov	r1, r5
 8004b3c:	f7fb ffbc 	bl	8000ab8 <__aeabi_dcmpeq>
 8004b40:	2800      	cmp	r0, #0
 8004b42:	d046      	beq.n	8004bd2 <pow+0xee>
 8004b44:	2301      	movs	r3, #1
 8004b46:	9302      	str	r3, [sp, #8]
 8004b48:	4b96      	ldr	r3, [pc, #600]	; (8004da4 <pow+0x2c0>)
 8004b4a:	9303      	str	r3, [sp, #12]
 8004b4c:	4b96      	ldr	r3, [pc, #600]	; (8004da8 <pow+0x2c4>)
 8004b4e:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004b52:	2200      	movs	r2, #0
 8004b54:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004b58:	9b00      	ldr	r3, [sp, #0]
 8004b5a:	2b02      	cmp	r3, #2
 8004b5c:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b60:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004b64:	d033      	beq.n	8004bce <pow+0xea>
 8004b66:	a802      	add	r0, sp, #8
 8004b68:	f000 ff89 	bl	8005a7e <matherr>
 8004b6c:	bb48      	cbnz	r0, 8004bc2 <pow+0xde>
 8004b6e:	e05d      	b.n	8004c2c <pow+0x148>
 8004b70:	f04f 0a00 	mov.w	sl, #0
 8004b74:	f04f 0b00 	mov.w	fp, #0
 8004b78:	4652      	mov	r2, sl
 8004b7a:	465b      	mov	r3, fp
 8004b7c:	4630      	mov	r0, r6
 8004b7e:	4639      	mov	r1, r7
 8004b80:	f7fb ff9a 	bl	8000ab8 <__aeabi_dcmpeq>
 8004b84:	ec4b ab19 	vmov	d9, sl, fp
 8004b88:	2800      	cmp	r0, #0
 8004b8a:	d054      	beq.n	8004c36 <pow+0x152>
 8004b8c:	4652      	mov	r2, sl
 8004b8e:	465b      	mov	r3, fp
 8004b90:	4620      	mov	r0, r4
 8004b92:	4629      	mov	r1, r5
 8004b94:	f7fb ff90 	bl	8000ab8 <__aeabi_dcmpeq>
 8004b98:	4680      	mov	r8, r0
 8004b9a:	b318      	cbz	r0, 8004be4 <pow+0x100>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	9302      	str	r3, [sp, #8]
 8004ba0:	4b80      	ldr	r3, [pc, #512]	; (8004da4 <pow+0x2c0>)
 8004ba2:	9303      	str	r3, [sp, #12]
 8004ba4:	9b01      	ldr	r3, [sp, #4]
 8004ba6:	930a      	str	r3, [sp, #40]	; 0x28
 8004ba8:	9b00      	ldr	r3, [sp, #0]
 8004baa:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004bae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004bb2:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d0d5      	beq.n	8004b66 <pow+0x82>
 8004bba:	4b7b      	ldr	r3, [pc, #492]	; (8004da8 <pow+0x2c4>)
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004bc2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bc4:	b11b      	cbz	r3, 8004bce <pow+0xea>
 8004bc6:	f7ff fa13 	bl	8003ff0 <__errno>
 8004bca:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004bcc:	6003      	str	r3, [r0, #0]
 8004bce:	ed9d 8b08 	vldr	d8, [sp, #32]
 8004bd2:	eeb0 0a48 	vmov.f32	s0, s16
 8004bd6:	eef0 0a68 	vmov.f32	s1, s17
 8004bda:	b00d      	add	sp, #52	; 0x34
 8004bdc:	ecbd 8b04 	vpop	{d8-d9}
 8004be0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004be4:	ec45 4b10 	vmov	d0, r4, r5
 8004be8:	f000 ff41 	bl	8005a6e <finite>
 8004bec:	2800      	cmp	r0, #0
 8004bee:	d0f0      	beq.n	8004bd2 <pow+0xee>
 8004bf0:	4652      	mov	r2, sl
 8004bf2:	465b      	mov	r3, fp
 8004bf4:	4620      	mov	r0, r4
 8004bf6:	4629      	mov	r1, r5
 8004bf8:	f7fb ff68 	bl	8000acc <__aeabi_dcmplt>
 8004bfc:	2800      	cmp	r0, #0
 8004bfe:	d0e8      	beq.n	8004bd2 <pow+0xee>
 8004c00:	2301      	movs	r3, #1
 8004c02:	9302      	str	r3, [sp, #8]
 8004c04:	4b67      	ldr	r3, [pc, #412]	; (8004da4 <pow+0x2c0>)
 8004c06:	9303      	str	r3, [sp, #12]
 8004c08:	f999 3000 	ldrsb.w	r3, [r9]
 8004c0c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8004c10:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c14:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004c18:	b913      	cbnz	r3, 8004c20 <pow+0x13c>
 8004c1a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004c1e:	e7a2      	b.n	8004b66 <pow+0x82>
 8004c20:	4962      	ldr	r1, [pc, #392]	; (8004dac <pow+0x2c8>)
 8004c22:	2000      	movs	r0, #0
 8004c24:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004c28:	2b02      	cmp	r3, #2
 8004c2a:	d19c      	bne.n	8004b66 <pow+0x82>
 8004c2c:	f7ff f9e0 	bl	8003ff0 <__errno>
 8004c30:	2321      	movs	r3, #33	; 0x21
 8004c32:	6003      	str	r3, [r0, #0]
 8004c34:	e7c5      	b.n	8004bc2 <pow+0xde>
 8004c36:	eeb0 0a48 	vmov.f32	s0, s16
 8004c3a:	eef0 0a68 	vmov.f32	s1, s17
 8004c3e:	f000 ff16 	bl	8005a6e <finite>
 8004c42:	9000      	str	r0, [sp, #0]
 8004c44:	2800      	cmp	r0, #0
 8004c46:	f040 8081 	bne.w	8004d4c <pow+0x268>
 8004c4a:	ec47 6b10 	vmov	d0, r6, r7
 8004c4e:	f000 ff0e 	bl	8005a6e <finite>
 8004c52:	2800      	cmp	r0, #0
 8004c54:	d07a      	beq.n	8004d4c <pow+0x268>
 8004c56:	ec45 4b10 	vmov	d0, r4, r5
 8004c5a:	f000 ff08 	bl	8005a6e <finite>
 8004c5e:	2800      	cmp	r0, #0
 8004c60:	d074      	beq.n	8004d4c <pow+0x268>
 8004c62:	ec53 2b18 	vmov	r2, r3, d8
 8004c66:	ee18 0a10 	vmov	r0, s16
 8004c6a:	4619      	mov	r1, r3
 8004c6c:	f7fb ff56 	bl	8000b1c <__aeabi_dcmpun>
 8004c70:	f999 9000 	ldrsb.w	r9, [r9]
 8004c74:	4b4b      	ldr	r3, [pc, #300]	; (8004da4 <pow+0x2c0>)
 8004c76:	b1b0      	cbz	r0, 8004ca6 <pow+0x1c2>
 8004c78:	2201      	movs	r2, #1
 8004c7a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c7e:	9b00      	ldr	r3, [sp, #0]
 8004c80:	930a      	str	r3, [sp, #40]	; 0x28
 8004c82:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c86:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004c8a:	f1b9 0f00 	cmp.w	r9, #0
 8004c8e:	d0c4      	beq.n	8004c1a <pow+0x136>
 8004c90:	4652      	mov	r2, sl
 8004c92:	465b      	mov	r3, fp
 8004c94:	4650      	mov	r0, sl
 8004c96:	4659      	mov	r1, fp
 8004c98:	f7fb fdd0 	bl	800083c <__aeabi_ddiv>
 8004c9c:	f1b9 0f02 	cmp.w	r9, #2
 8004ca0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ca4:	e7c1      	b.n	8004c2a <pow+0x146>
 8004ca6:	2203      	movs	r2, #3
 8004ca8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004cac:	900a      	str	r0, [sp, #40]	; 0x28
 8004cae:	4629      	mov	r1, r5
 8004cb0:	4620      	mov	r0, r4
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	4b3e      	ldr	r3, [pc, #248]	; (8004db0 <pow+0x2cc>)
 8004cb6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004cba:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004cbe:	f7fb fc93 	bl	80005e8 <__aeabi_dmul>
 8004cc2:	4604      	mov	r4, r0
 8004cc4:	460d      	mov	r5, r1
 8004cc6:	f1b9 0f00 	cmp.w	r9, #0
 8004cca:	d124      	bne.n	8004d16 <pow+0x232>
 8004ccc:	4b39      	ldr	r3, [pc, #228]	; (8004db4 <pow+0x2d0>)
 8004cce:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004cd2:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	4652      	mov	r2, sl
 8004cda:	465b      	mov	r3, fp
 8004cdc:	4639      	mov	r1, r7
 8004cde:	f7fb fef5 	bl	8000acc <__aeabi_dcmplt>
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	d056      	beq.n	8004d94 <pow+0x2b0>
 8004ce6:	ec45 4b10 	vmov	d0, r4, r5
 8004cea:	f000 fed5 	bl	8005a98 <rint>
 8004cee:	4622      	mov	r2, r4
 8004cf0:	462b      	mov	r3, r5
 8004cf2:	ec51 0b10 	vmov	r0, r1, d0
 8004cf6:	f7fb fedf 	bl	8000ab8 <__aeabi_dcmpeq>
 8004cfa:	b920      	cbnz	r0, 8004d06 <pow+0x222>
 8004cfc:	4b2e      	ldr	r3, [pc, #184]	; (8004db8 <pow+0x2d4>)
 8004cfe:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004d02:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004d06:	f998 3000 	ldrsb.w	r3, [r8]
 8004d0a:	2b02      	cmp	r3, #2
 8004d0c:	d142      	bne.n	8004d94 <pow+0x2b0>
 8004d0e:	f7ff f96f 	bl	8003ff0 <__errno>
 8004d12:	2322      	movs	r3, #34	; 0x22
 8004d14:	e78d      	b.n	8004c32 <pow+0x14e>
 8004d16:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <pow+0x2d8>)
 8004d18:	2200      	movs	r2, #0
 8004d1a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004d1e:	4630      	mov	r0, r6
 8004d20:	4652      	mov	r2, sl
 8004d22:	465b      	mov	r3, fp
 8004d24:	4639      	mov	r1, r7
 8004d26:	f7fb fed1 	bl	8000acc <__aeabi_dcmplt>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d0eb      	beq.n	8004d06 <pow+0x222>
 8004d2e:	ec45 4b10 	vmov	d0, r4, r5
 8004d32:	f000 feb1 	bl	8005a98 <rint>
 8004d36:	4622      	mov	r2, r4
 8004d38:	462b      	mov	r3, r5
 8004d3a:	ec51 0b10 	vmov	r0, r1, d0
 8004d3e:	f7fb febb 	bl	8000ab8 <__aeabi_dcmpeq>
 8004d42:	2800      	cmp	r0, #0
 8004d44:	d1df      	bne.n	8004d06 <pow+0x222>
 8004d46:	2200      	movs	r2, #0
 8004d48:	4b18      	ldr	r3, [pc, #96]	; (8004dac <pow+0x2c8>)
 8004d4a:	e7da      	b.n	8004d02 <pow+0x21e>
 8004d4c:	2200      	movs	r2, #0
 8004d4e:	2300      	movs	r3, #0
 8004d50:	ec51 0b18 	vmov	r0, r1, d8
 8004d54:	f7fb feb0 	bl	8000ab8 <__aeabi_dcmpeq>
 8004d58:	2800      	cmp	r0, #0
 8004d5a:	f43f af3a 	beq.w	8004bd2 <pow+0xee>
 8004d5e:	ec47 6b10 	vmov	d0, r6, r7
 8004d62:	f000 fe84 	bl	8005a6e <finite>
 8004d66:	2800      	cmp	r0, #0
 8004d68:	f43f af33 	beq.w	8004bd2 <pow+0xee>
 8004d6c:	ec45 4b10 	vmov	d0, r4, r5
 8004d70:	f000 fe7d 	bl	8005a6e <finite>
 8004d74:	2800      	cmp	r0, #0
 8004d76:	f43f af2c 	beq.w	8004bd2 <pow+0xee>
 8004d7a:	2304      	movs	r3, #4
 8004d7c:	9302      	str	r3, [sp, #8]
 8004d7e:	4b09      	ldr	r3, [pc, #36]	; (8004da4 <pow+0x2c0>)
 8004d80:	9303      	str	r3, [sp, #12]
 8004d82:	2300      	movs	r3, #0
 8004d84:	930a      	str	r3, [sp, #40]	; 0x28
 8004d86:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d8a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004d8e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8004d92:	e7b8      	b.n	8004d06 <pow+0x222>
 8004d94:	a802      	add	r0, sp, #8
 8004d96:	f000 fe72 	bl	8005a7e <matherr>
 8004d9a:	2800      	cmp	r0, #0
 8004d9c:	f47f af11 	bne.w	8004bc2 <pow+0xde>
 8004da0:	e7b5      	b.n	8004d0e <pow+0x22a>
 8004da2:	bf00      	nop
 8004da4:	08007579 	.word	0x08007579
 8004da8:	3ff00000 	.word	0x3ff00000
 8004dac:	fff00000 	.word	0xfff00000
 8004db0:	3fe00000 	.word	0x3fe00000
 8004db4:	47efffff 	.word	0x47efffff
 8004db8:	c7efffff 	.word	0xc7efffff
 8004dbc:	7ff00000 	.word	0x7ff00000
 8004dc0:	20000080 	.word	0x20000080
 8004dc4:	00000000 	.word	0x00000000

08004dc8 <__ieee754_log10>:
 8004dc8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8004dcc:	ec55 4b10 	vmov	r4, r5, d0
 8004dd0:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8004dd4:	462b      	mov	r3, r5
 8004dd6:	da2f      	bge.n	8004e38 <__ieee754_log10+0x70>
 8004dd8:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8004ddc:	4322      	orrs	r2, r4
 8004dde:	d10a      	bne.n	8004df6 <__ieee754_log10+0x2e>
 8004de0:	493b      	ldr	r1, [pc, #236]	; (8004ed0 <__ieee754_log10+0x108>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	2300      	movs	r3, #0
 8004de6:	2000      	movs	r0, #0
 8004de8:	f7fb fd28 	bl	800083c <__aeabi_ddiv>
 8004dec:	ec41 0b10 	vmov	d0, r0, r1
 8004df0:	b003      	add	sp, #12
 8004df2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004df6:	2d00      	cmp	r5, #0
 8004df8:	da08      	bge.n	8004e0c <__ieee754_log10+0x44>
 8004dfa:	ee10 2a10 	vmov	r2, s0
 8004dfe:	4620      	mov	r0, r4
 8004e00:	4629      	mov	r1, r5
 8004e02:	f7fb fa39 	bl	8000278 <__aeabi_dsub>
 8004e06:	2200      	movs	r2, #0
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e7ed      	b.n	8004de8 <__ieee754_log10+0x20>
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	4b31      	ldr	r3, [pc, #196]	; (8004ed4 <__ieee754_log10+0x10c>)
 8004e10:	4629      	mov	r1, r5
 8004e12:	ee10 0a10 	vmov	r0, s0
 8004e16:	f7fb fbe7 	bl	80005e8 <__aeabi_dmul>
 8004e1a:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8004e1e:	4604      	mov	r4, r0
 8004e20:	460d      	mov	r5, r1
 8004e22:	460b      	mov	r3, r1
 8004e24:	492c      	ldr	r1, [pc, #176]	; (8004ed8 <__ieee754_log10+0x110>)
 8004e26:	428b      	cmp	r3, r1
 8004e28:	dd08      	ble.n	8004e3c <__ieee754_log10+0x74>
 8004e2a:	4622      	mov	r2, r4
 8004e2c:	462b      	mov	r3, r5
 8004e2e:	4620      	mov	r0, r4
 8004e30:	4629      	mov	r1, r5
 8004e32:	f7fb fa23 	bl	800027c <__adddf3>
 8004e36:	e7d9      	b.n	8004dec <__ieee754_log10+0x24>
 8004e38:	2200      	movs	r2, #0
 8004e3a:	e7f3      	b.n	8004e24 <__ieee754_log10+0x5c>
 8004e3c:	1518      	asrs	r0, r3, #20
 8004e3e:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8004e42:	4410      	add	r0, r2
 8004e44:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8004e48:	4448      	add	r0, r9
 8004e4a:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8004e4e:	f7fb fb61 	bl	8000514 <__aeabi_i2d>
 8004e52:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 8004e56:	3303      	adds	r3, #3
 8004e58:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8004e5c:	ec45 4b10 	vmov	d0, r4, r5
 8004e60:	4606      	mov	r6, r0
 8004e62:	460f      	mov	r7, r1
 8004e64:	f000 ff14 	bl	8005c90 <__ieee754_log>
 8004e68:	a313      	add	r3, pc, #76	; (adr r3, 8004eb8 <__ieee754_log10+0xf0>)
 8004e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6e:	4630      	mov	r0, r6
 8004e70:	4639      	mov	r1, r7
 8004e72:	ed8d 0b00 	vstr	d0, [sp]
 8004e76:	f7fb fbb7 	bl	80005e8 <__aeabi_dmul>
 8004e7a:	ed9d 0b00 	vldr	d0, [sp]
 8004e7e:	4604      	mov	r4, r0
 8004e80:	460d      	mov	r5, r1
 8004e82:	a30f      	add	r3, pc, #60	; (adr r3, 8004ec0 <__ieee754_log10+0xf8>)
 8004e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e88:	ec51 0b10 	vmov	r0, r1, d0
 8004e8c:	f7fb fbac 	bl	80005e8 <__aeabi_dmul>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4620      	mov	r0, r4
 8004e96:	4629      	mov	r1, r5
 8004e98:	f7fb f9f0 	bl	800027c <__adddf3>
 8004e9c:	a30a      	add	r3, pc, #40	; (adr r3, 8004ec8 <__ieee754_log10+0x100>)
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	4604      	mov	r4, r0
 8004ea4:	460d      	mov	r5, r1
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	4639      	mov	r1, r7
 8004eaa:	f7fb fb9d 	bl	80005e8 <__aeabi_dmul>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4620      	mov	r0, r4
 8004eb4:	4629      	mov	r1, r5
 8004eb6:	e7bc      	b.n	8004e32 <__ieee754_log10+0x6a>
 8004eb8:	11f12b36 	.word	0x11f12b36
 8004ebc:	3d59fef3 	.word	0x3d59fef3
 8004ec0:	1526e50e 	.word	0x1526e50e
 8004ec4:	3fdbcb7b 	.word	0x3fdbcb7b
 8004ec8:	509f6000 	.word	0x509f6000
 8004ecc:	3fd34413 	.word	0x3fd34413
 8004ed0:	c3500000 	.word	0xc3500000
 8004ed4:	43500000 	.word	0x43500000
 8004ed8:	7fefffff 	.word	0x7fefffff
 8004edc:	00000000 	.word	0x00000000

08004ee0 <__ieee754_pow>:
 8004ee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ee4:	b091      	sub	sp, #68	; 0x44
 8004ee6:	ed8d 1b00 	vstr	d1, [sp]
 8004eea:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004eee:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004ef2:	ea58 0302 	orrs.w	r3, r8, r2
 8004ef6:	ec57 6b10 	vmov	r6, r7, d0
 8004efa:	f000 84be 	beq.w	800587a <__ieee754_pow+0x99a>
 8004efe:	4b7a      	ldr	r3, [pc, #488]	; (80050e8 <__ieee754_pow+0x208>)
 8004f00:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004f04:	429c      	cmp	r4, r3
 8004f06:	463d      	mov	r5, r7
 8004f08:	ee10 aa10 	vmov	sl, s0
 8004f0c:	dc09      	bgt.n	8004f22 <__ieee754_pow+0x42>
 8004f0e:	d103      	bne.n	8004f18 <__ieee754_pow+0x38>
 8004f10:	b93e      	cbnz	r6, 8004f22 <__ieee754_pow+0x42>
 8004f12:	45a0      	cmp	r8, r4
 8004f14:	dc0d      	bgt.n	8004f32 <__ieee754_pow+0x52>
 8004f16:	e001      	b.n	8004f1c <__ieee754_pow+0x3c>
 8004f18:	4598      	cmp	r8, r3
 8004f1a:	dc02      	bgt.n	8004f22 <__ieee754_pow+0x42>
 8004f1c:	4598      	cmp	r8, r3
 8004f1e:	d10e      	bne.n	8004f3e <__ieee754_pow+0x5e>
 8004f20:	b16a      	cbz	r2, 8004f3e <__ieee754_pow+0x5e>
 8004f22:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004f26:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004f2a:	ea54 030a 	orrs.w	r3, r4, sl
 8004f2e:	f000 84a4 	beq.w	800587a <__ieee754_pow+0x99a>
 8004f32:	486e      	ldr	r0, [pc, #440]	; (80050ec <__ieee754_pow+0x20c>)
 8004f34:	b011      	add	sp, #68	; 0x44
 8004f36:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f3a:	f000 bda5 	b.w	8005a88 <nan>
 8004f3e:	2d00      	cmp	r5, #0
 8004f40:	da53      	bge.n	8004fea <__ieee754_pow+0x10a>
 8004f42:	4b6b      	ldr	r3, [pc, #428]	; (80050f0 <__ieee754_pow+0x210>)
 8004f44:	4598      	cmp	r8, r3
 8004f46:	dc4d      	bgt.n	8004fe4 <__ieee754_pow+0x104>
 8004f48:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004f4c:	4598      	cmp	r8, r3
 8004f4e:	dd4c      	ble.n	8004fea <__ieee754_pow+0x10a>
 8004f50:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004f54:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004f58:	2b14      	cmp	r3, #20
 8004f5a:	dd26      	ble.n	8004faa <__ieee754_pow+0xca>
 8004f5c:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004f60:	fa22 f103 	lsr.w	r1, r2, r3
 8004f64:	fa01 f303 	lsl.w	r3, r1, r3
 8004f68:	4293      	cmp	r3, r2
 8004f6a:	d13e      	bne.n	8004fea <__ieee754_pow+0x10a>
 8004f6c:	f001 0101 	and.w	r1, r1, #1
 8004f70:	f1c1 0b02 	rsb	fp, r1, #2
 8004f74:	2a00      	cmp	r2, #0
 8004f76:	d15b      	bne.n	8005030 <__ieee754_pow+0x150>
 8004f78:	4b5b      	ldr	r3, [pc, #364]	; (80050e8 <__ieee754_pow+0x208>)
 8004f7a:	4598      	cmp	r8, r3
 8004f7c:	d124      	bne.n	8004fc8 <__ieee754_pow+0xe8>
 8004f7e:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004f82:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004f86:	ea53 030a 	orrs.w	r3, r3, sl
 8004f8a:	f000 8476 	beq.w	800587a <__ieee754_pow+0x99a>
 8004f8e:	4b59      	ldr	r3, [pc, #356]	; (80050f4 <__ieee754_pow+0x214>)
 8004f90:	429c      	cmp	r4, r3
 8004f92:	dd2d      	ble.n	8004ff0 <__ieee754_pow+0x110>
 8004f94:	f1b9 0f00 	cmp.w	r9, #0
 8004f98:	f280 8473 	bge.w	8005882 <__ieee754_pow+0x9a2>
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	2100      	movs	r1, #0
 8004fa0:	ec41 0b10 	vmov	d0, r0, r1
 8004fa4:	b011      	add	sp, #68	; 0x44
 8004fa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004faa:	2a00      	cmp	r2, #0
 8004fac:	d13e      	bne.n	800502c <__ieee754_pow+0x14c>
 8004fae:	f1c3 0314 	rsb	r3, r3, #20
 8004fb2:	fa48 f103 	asr.w	r1, r8, r3
 8004fb6:	fa01 f303 	lsl.w	r3, r1, r3
 8004fba:	4543      	cmp	r3, r8
 8004fbc:	f040 8469 	bne.w	8005892 <__ieee754_pow+0x9b2>
 8004fc0:	f001 0101 	and.w	r1, r1, #1
 8004fc4:	f1c1 0b02 	rsb	fp, r1, #2
 8004fc8:	4b4b      	ldr	r3, [pc, #300]	; (80050f8 <__ieee754_pow+0x218>)
 8004fca:	4598      	cmp	r8, r3
 8004fcc:	d118      	bne.n	8005000 <__ieee754_pow+0x120>
 8004fce:	f1b9 0f00 	cmp.w	r9, #0
 8004fd2:	f280 845a 	bge.w	800588a <__ieee754_pow+0x9aa>
 8004fd6:	4948      	ldr	r1, [pc, #288]	; (80050f8 <__ieee754_pow+0x218>)
 8004fd8:	4632      	mov	r2, r6
 8004fda:	463b      	mov	r3, r7
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f7fb fc2d 	bl	800083c <__aeabi_ddiv>
 8004fe2:	e7dd      	b.n	8004fa0 <__ieee754_pow+0xc0>
 8004fe4:	f04f 0b02 	mov.w	fp, #2
 8004fe8:	e7c4      	b.n	8004f74 <__ieee754_pow+0x94>
 8004fea:	f04f 0b00 	mov.w	fp, #0
 8004fee:	e7c1      	b.n	8004f74 <__ieee754_pow+0x94>
 8004ff0:	f1b9 0f00 	cmp.w	r9, #0
 8004ff4:	dad2      	bge.n	8004f9c <__ieee754_pow+0xbc>
 8004ff6:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004ffa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004ffe:	e7cf      	b.n	8004fa0 <__ieee754_pow+0xc0>
 8005000:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8005004:	d106      	bne.n	8005014 <__ieee754_pow+0x134>
 8005006:	4632      	mov	r2, r6
 8005008:	463b      	mov	r3, r7
 800500a:	4610      	mov	r0, r2
 800500c:	4619      	mov	r1, r3
 800500e:	f7fb faeb 	bl	80005e8 <__aeabi_dmul>
 8005012:	e7c5      	b.n	8004fa0 <__ieee754_pow+0xc0>
 8005014:	4b39      	ldr	r3, [pc, #228]	; (80050fc <__ieee754_pow+0x21c>)
 8005016:	4599      	cmp	r9, r3
 8005018:	d10a      	bne.n	8005030 <__ieee754_pow+0x150>
 800501a:	2d00      	cmp	r5, #0
 800501c:	db08      	blt.n	8005030 <__ieee754_pow+0x150>
 800501e:	ec47 6b10 	vmov	d0, r6, r7
 8005022:	b011      	add	sp, #68	; 0x44
 8005024:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005028:	f000 bc68 	b.w	80058fc <__ieee754_sqrt>
 800502c:	f04f 0b00 	mov.w	fp, #0
 8005030:	ec47 6b10 	vmov	d0, r6, r7
 8005034:	f000 fd12 	bl	8005a5c <fabs>
 8005038:	ec51 0b10 	vmov	r0, r1, d0
 800503c:	f1ba 0f00 	cmp.w	sl, #0
 8005040:	d127      	bne.n	8005092 <__ieee754_pow+0x1b2>
 8005042:	b124      	cbz	r4, 800504e <__ieee754_pow+0x16e>
 8005044:	4b2c      	ldr	r3, [pc, #176]	; (80050f8 <__ieee754_pow+0x218>)
 8005046:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800504a:	429a      	cmp	r2, r3
 800504c:	d121      	bne.n	8005092 <__ieee754_pow+0x1b2>
 800504e:	f1b9 0f00 	cmp.w	r9, #0
 8005052:	da05      	bge.n	8005060 <__ieee754_pow+0x180>
 8005054:	4602      	mov	r2, r0
 8005056:	460b      	mov	r3, r1
 8005058:	2000      	movs	r0, #0
 800505a:	4927      	ldr	r1, [pc, #156]	; (80050f8 <__ieee754_pow+0x218>)
 800505c:	f7fb fbee 	bl	800083c <__aeabi_ddiv>
 8005060:	2d00      	cmp	r5, #0
 8005062:	da9d      	bge.n	8004fa0 <__ieee754_pow+0xc0>
 8005064:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005068:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800506c:	ea54 030b 	orrs.w	r3, r4, fp
 8005070:	d108      	bne.n	8005084 <__ieee754_pow+0x1a4>
 8005072:	4602      	mov	r2, r0
 8005074:	460b      	mov	r3, r1
 8005076:	4610      	mov	r0, r2
 8005078:	4619      	mov	r1, r3
 800507a:	f7fb f8fd 	bl	8000278 <__aeabi_dsub>
 800507e:	4602      	mov	r2, r0
 8005080:	460b      	mov	r3, r1
 8005082:	e7ac      	b.n	8004fde <__ieee754_pow+0xfe>
 8005084:	f1bb 0f01 	cmp.w	fp, #1
 8005088:	d18a      	bne.n	8004fa0 <__ieee754_pow+0xc0>
 800508a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800508e:	4619      	mov	r1, r3
 8005090:	e786      	b.n	8004fa0 <__ieee754_pow+0xc0>
 8005092:	0fed      	lsrs	r5, r5, #31
 8005094:	1e6b      	subs	r3, r5, #1
 8005096:	930d      	str	r3, [sp, #52]	; 0x34
 8005098:	ea5b 0303 	orrs.w	r3, fp, r3
 800509c:	d102      	bne.n	80050a4 <__ieee754_pow+0x1c4>
 800509e:	4632      	mov	r2, r6
 80050a0:	463b      	mov	r3, r7
 80050a2:	e7e8      	b.n	8005076 <__ieee754_pow+0x196>
 80050a4:	4b16      	ldr	r3, [pc, #88]	; (8005100 <__ieee754_pow+0x220>)
 80050a6:	4598      	cmp	r8, r3
 80050a8:	f340 80fe 	ble.w	80052a8 <__ieee754_pow+0x3c8>
 80050ac:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80050b0:	4598      	cmp	r8, r3
 80050b2:	dd0a      	ble.n	80050ca <__ieee754_pow+0x1ea>
 80050b4:	4b0f      	ldr	r3, [pc, #60]	; (80050f4 <__ieee754_pow+0x214>)
 80050b6:	429c      	cmp	r4, r3
 80050b8:	dc0d      	bgt.n	80050d6 <__ieee754_pow+0x1f6>
 80050ba:	f1b9 0f00 	cmp.w	r9, #0
 80050be:	f6bf af6d 	bge.w	8004f9c <__ieee754_pow+0xbc>
 80050c2:	a307      	add	r3, pc, #28	; (adr r3, 80050e0 <__ieee754_pow+0x200>)
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	e79f      	b.n	800500a <__ieee754_pow+0x12a>
 80050ca:	4b0e      	ldr	r3, [pc, #56]	; (8005104 <__ieee754_pow+0x224>)
 80050cc:	429c      	cmp	r4, r3
 80050ce:	ddf4      	ble.n	80050ba <__ieee754_pow+0x1da>
 80050d0:	4b09      	ldr	r3, [pc, #36]	; (80050f8 <__ieee754_pow+0x218>)
 80050d2:	429c      	cmp	r4, r3
 80050d4:	dd18      	ble.n	8005108 <__ieee754_pow+0x228>
 80050d6:	f1b9 0f00 	cmp.w	r9, #0
 80050da:	dcf2      	bgt.n	80050c2 <__ieee754_pow+0x1e2>
 80050dc:	e75e      	b.n	8004f9c <__ieee754_pow+0xbc>
 80050de:	bf00      	nop
 80050e0:	8800759c 	.word	0x8800759c
 80050e4:	7e37e43c 	.word	0x7e37e43c
 80050e8:	7ff00000 	.word	0x7ff00000
 80050ec:	08007545 	.word	0x08007545
 80050f0:	433fffff 	.word	0x433fffff
 80050f4:	3fefffff 	.word	0x3fefffff
 80050f8:	3ff00000 	.word	0x3ff00000
 80050fc:	3fe00000 	.word	0x3fe00000
 8005100:	41e00000 	.word	0x41e00000
 8005104:	3feffffe 	.word	0x3feffffe
 8005108:	2200      	movs	r2, #0
 800510a:	4b63      	ldr	r3, [pc, #396]	; (8005298 <__ieee754_pow+0x3b8>)
 800510c:	f7fb f8b4 	bl	8000278 <__aeabi_dsub>
 8005110:	a355      	add	r3, pc, #340	; (adr r3, 8005268 <__ieee754_pow+0x388>)
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	4604      	mov	r4, r0
 8005118:	460d      	mov	r5, r1
 800511a:	f7fb fa65 	bl	80005e8 <__aeabi_dmul>
 800511e:	a354      	add	r3, pc, #336	; (adr r3, 8005270 <__ieee754_pow+0x390>)
 8005120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005124:	4606      	mov	r6, r0
 8005126:	460f      	mov	r7, r1
 8005128:	4620      	mov	r0, r4
 800512a:	4629      	mov	r1, r5
 800512c:	f7fb fa5c 	bl	80005e8 <__aeabi_dmul>
 8005130:	2200      	movs	r2, #0
 8005132:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005136:	4b59      	ldr	r3, [pc, #356]	; (800529c <__ieee754_pow+0x3bc>)
 8005138:	4620      	mov	r0, r4
 800513a:	4629      	mov	r1, r5
 800513c:	f7fb fa54 	bl	80005e8 <__aeabi_dmul>
 8005140:	4602      	mov	r2, r0
 8005142:	460b      	mov	r3, r1
 8005144:	a14c      	add	r1, pc, #304	; (adr r1, 8005278 <__ieee754_pow+0x398>)
 8005146:	e9d1 0100 	ldrd	r0, r1, [r1]
 800514a:	f7fb f895 	bl	8000278 <__aeabi_dsub>
 800514e:	4622      	mov	r2, r4
 8005150:	462b      	mov	r3, r5
 8005152:	f7fb fa49 	bl	80005e8 <__aeabi_dmul>
 8005156:	4602      	mov	r2, r0
 8005158:	460b      	mov	r3, r1
 800515a:	2000      	movs	r0, #0
 800515c:	4950      	ldr	r1, [pc, #320]	; (80052a0 <__ieee754_pow+0x3c0>)
 800515e:	f7fb f88b 	bl	8000278 <__aeabi_dsub>
 8005162:	4622      	mov	r2, r4
 8005164:	462b      	mov	r3, r5
 8005166:	4680      	mov	r8, r0
 8005168:	4689      	mov	r9, r1
 800516a:	4620      	mov	r0, r4
 800516c:	4629      	mov	r1, r5
 800516e:	f7fb fa3b 	bl	80005e8 <__aeabi_dmul>
 8005172:	4602      	mov	r2, r0
 8005174:	460b      	mov	r3, r1
 8005176:	4640      	mov	r0, r8
 8005178:	4649      	mov	r1, r9
 800517a:	f7fb fa35 	bl	80005e8 <__aeabi_dmul>
 800517e:	a340      	add	r3, pc, #256	; (adr r3, 8005280 <__ieee754_pow+0x3a0>)
 8005180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005184:	f7fb fa30 	bl	80005e8 <__aeabi_dmul>
 8005188:	4602      	mov	r2, r0
 800518a:	460b      	mov	r3, r1
 800518c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005190:	f7fb f872 	bl	8000278 <__aeabi_dsub>
 8005194:	4602      	mov	r2, r0
 8005196:	460b      	mov	r3, r1
 8005198:	4604      	mov	r4, r0
 800519a:	460d      	mov	r5, r1
 800519c:	4630      	mov	r0, r6
 800519e:	4639      	mov	r1, r7
 80051a0:	f7fb f86c 	bl	800027c <__adddf3>
 80051a4:	2000      	movs	r0, #0
 80051a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051aa:	4632      	mov	r2, r6
 80051ac:	463b      	mov	r3, r7
 80051ae:	f7fb f863 	bl	8000278 <__aeabi_dsub>
 80051b2:	4602      	mov	r2, r0
 80051b4:	460b      	mov	r3, r1
 80051b6:	4620      	mov	r0, r4
 80051b8:	4629      	mov	r1, r5
 80051ba:	f7fb f85d 	bl	8000278 <__aeabi_dsub>
 80051be:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80051c0:	f10b 33ff 	add.w	r3, fp, #4294967295
 80051c4:	4313      	orrs	r3, r2
 80051c6:	4606      	mov	r6, r0
 80051c8:	460f      	mov	r7, r1
 80051ca:	f040 81eb 	bne.w	80055a4 <__ieee754_pow+0x6c4>
 80051ce:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005288 <__ieee754_pow+0x3a8>
 80051d2:	e9dd 4500 	ldrd	r4, r5, [sp]
 80051d6:	2400      	movs	r4, #0
 80051d8:	4622      	mov	r2, r4
 80051da:	462b      	mov	r3, r5
 80051dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80051e0:	ed8d 7b02 	vstr	d7, [sp, #8]
 80051e4:	f7fb f848 	bl	8000278 <__aeabi_dsub>
 80051e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051ec:	f7fb f9fc 	bl	80005e8 <__aeabi_dmul>
 80051f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051f4:	4680      	mov	r8, r0
 80051f6:	4689      	mov	r9, r1
 80051f8:	4630      	mov	r0, r6
 80051fa:	4639      	mov	r1, r7
 80051fc:	f7fb f9f4 	bl	80005e8 <__aeabi_dmul>
 8005200:	4602      	mov	r2, r0
 8005202:	460b      	mov	r3, r1
 8005204:	4640      	mov	r0, r8
 8005206:	4649      	mov	r1, r9
 8005208:	f7fb f838 	bl	800027c <__adddf3>
 800520c:	4622      	mov	r2, r4
 800520e:	462b      	mov	r3, r5
 8005210:	4680      	mov	r8, r0
 8005212:	4689      	mov	r9, r1
 8005214:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005218:	f7fb f9e6 	bl	80005e8 <__aeabi_dmul>
 800521c:	460b      	mov	r3, r1
 800521e:	4604      	mov	r4, r0
 8005220:	460d      	mov	r5, r1
 8005222:	4602      	mov	r2, r0
 8005224:	4649      	mov	r1, r9
 8005226:	4640      	mov	r0, r8
 8005228:	e9cd 4500 	strd	r4, r5, [sp]
 800522c:	f7fb f826 	bl	800027c <__adddf3>
 8005230:	4b1c      	ldr	r3, [pc, #112]	; (80052a4 <__ieee754_pow+0x3c4>)
 8005232:	4299      	cmp	r1, r3
 8005234:	4606      	mov	r6, r0
 8005236:	460f      	mov	r7, r1
 8005238:	468b      	mov	fp, r1
 800523a:	f340 82f7 	ble.w	800582c <__ieee754_pow+0x94c>
 800523e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005242:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005246:	4303      	orrs	r3, r0
 8005248:	f000 81ea 	beq.w	8005620 <__ieee754_pow+0x740>
 800524c:	a310      	add	r3, pc, #64	; (adr r3, 8005290 <__ieee754_pow+0x3b0>)
 800524e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005252:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005256:	f7fb f9c7 	bl	80005e8 <__aeabi_dmul>
 800525a:	a30d      	add	r3, pc, #52	; (adr r3, 8005290 <__ieee754_pow+0x3b0>)
 800525c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005260:	e6d5      	b.n	800500e <__ieee754_pow+0x12e>
 8005262:	bf00      	nop
 8005264:	f3af 8000 	nop.w
 8005268:	60000000 	.word	0x60000000
 800526c:	3ff71547 	.word	0x3ff71547
 8005270:	f85ddf44 	.word	0xf85ddf44
 8005274:	3e54ae0b 	.word	0x3e54ae0b
 8005278:	55555555 	.word	0x55555555
 800527c:	3fd55555 	.word	0x3fd55555
 8005280:	652b82fe 	.word	0x652b82fe
 8005284:	3ff71547 	.word	0x3ff71547
 8005288:	00000000 	.word	0x00000000
 800528c:	bff00000 	.word	0xbff00000
 8005290:	8800759c 	.word	0x8800759c
 8005294:	7e37e43c 	.word	0x7e37e43c
 8005298:	3ff00000 	.word	0x3ff00000
 800529c:	3fd00000 	.word	0x3fd00000
 80052a0:	3fe00000 	.word	0x3fe00000
 80052a4:	408fffff 	.word	0x408fffff
 80052a8:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 80052ac:	f04f 0200 	mov.w	r2, #0
 80052b0:	da05      	bge.n	80052be <__ieee754_pow+0x3de>
 80052b2:	4bd3      	ldr	r3, [pc, #844]	; (8005600 <__ieee754_pow+0x720>)
 80052b4:	f7fb f998 	bl	80005e8 <__aeabi_dmul>
 80052b8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80052bc:	460c      	mov	r4, r1
 80052be:	1523      	asrs	r3, r4, #20
 80052c0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80052c4:	4413      	add	r3, r2
 80052c6:	9309      	str	r3, [sp, #36]	; 0x24
 80052c8:	4bce      	ldr	r3, [pc, #824]	; (8005604 <__ieee754_pow+0x724>)
 80052ca:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80052ce:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80052d2:	429c      	cmp	r4, r3
 80052d4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80052d8:	dd08      	ble.n	80052ec <__ieee754_pow+0x40c>
 80052da:	4bcb      	ldr	r3, [pc, #812]	; (8005608 <__ieee754_pow+0x728>)
 80052dc:	429c      	cmp	r4, r3
 80052de:	f340 815e 	ble.w	800559e <__ieee754_pow+0x6be>
 80052e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052e4:	3301      	adds	r3, #1
 80052e6:	9309      	str	r3, [sp, #36]	; 0x24
 80052e8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80052ec:	f04f 0a00 	mov.w	sl, #0
 80052f0:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80052f4:	930c      	str	r3, [sp, #48]	; 0x30
 80052f6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80052f8:	4bc4      	ldr	r3, [pc, #784]	; (800560c <__ieee754_pow+0x72c>)
 80052fa:	4413      	add	r3, r2
 80052fc:	ed93 7b00 	vldr	d7, [r3]
 8005300:	4629      	mov	r1, r5
 8005302:	ec53 2b17 	vmov	r2, r3, d7
 8005306:	ed8d 7b06 	vstr	d7, [sp, #24]
 800530a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800530e:	f7fa ffb3 	bl	8000278 <__aeabi_dsub>
 8005312:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005316:	4606      	mov	r6, r0
 8005318:	460f      	mov	r7, r1
 800531a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800531e:	f7fa ffad 	bl	800027c <__adddf3>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	2000      	movs	r0, #0
 8005328:	49b9      	ldr	r1, [pc, #740]	; (8005610 <__ieee754_pow+0x730>)
 800532a:	f7fb fa87 	bl	800083c <__aeabi_ddiv>
 800532e:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005332:	4602      	mov	r2, r0
 8005334:	460b      	mov	r3, r1
 8005336:	4630      	mov	r0, r6
 8005338:	4639      	mov	r1, r7
 800533a:	f7fb f955 	bl	80005e8 <__aeabi_dmul>
 800533e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005342:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005346:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800534a:	2300      	movs	r3, #0
 800534c:	9302      	str	r3, [sp, #8]
 800534e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005352:	106d      	asrs	r5, r5, #1
 8005354:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005358:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800535c:	2200      	movs	r2, #0
 800535e:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005362:	4640      	mov	r0, r8
 8005364:	4649      	mov	r1, r9
 8005366:	4614      	mov	r4, r2
 8005368:	461d      	mov	r5, r3
 800536a:	f7fb f93d 	bl	80005e8 <__aeabi_dmul>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	4630      	mov	r0, r6
 8005374:	4639      	mov	r1, r7
 8005376:	f7fa ff7f 	bl	8000278 <__aeabi_dsub>
 800537a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800537e:	4606      	mov	r6, r0
 8005380:	460f      	mov	r7, r1
 8005382:	4620      	mov	r0, r4
 8005384:	4629      	mov	r1, r5
 8005386:	f7fa ff77 	bl	8000278 <__aeabi_dsub>
 800538a:	4602      	mov	r2, r0
 800538c:	460b      	mov	r3, r1
 800538e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005392:	f7fa ff71 	bl	8000278 <__aeabi_dsub>
 8005396:	4642      	mov	r2, r8
 8005398:	464b      	mov	r3, r9
 800539a:	f7fb f925 	bl	80005e8 <__aeabi_dmul>
 800539e:	4602      	mov	r2, r0
 80053a0:	460b      	mov	r3, r1
 80053a2:	4630      	mov	r0, r6
 80053a4:	4639      	mov	r1, r7
 80053a6:	f7fa ff67 	bl	8000278 <__aeabi_dsub>
 80053aa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80053ae:	f7fb f91b 	bl	80005e8 <__aeabi_dmul>
 80053b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80053b6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80053ba:	4610      	mov	r0, r2
 80053bc:	4619      	mov	r1, r3
 80053be:	f7fb f913 	bl	80005e8 <__aeabi_dmul>
 80053c2:	a37b      	add	r3, pc, #492	; (adr r3, 80055b0 <__ieee754_pow+0x6d0>)
 80053c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c8:	4604      	mov	r4, r0
 80053ca:	460d      	mov	r5, r1
 80053cc:	f7fb f90c 	bl	80005e8 <__aeabi_dmul>
 80053d0:	a379      	add	r3, pc, #484	; (adr r3, 80055b8 <__ieee754_pow+0x6d8>)
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f7fa ff51 	bl	800027c <__adddf3>
 80053da:	4622      	mov	r2, r4
 80053dc:	462b      	mov	r3, r5
 80053de:	f7fb f903 	bl	80005e8 <__aeabi_dmul>
 80053e2:	a377      	add	r3, pc, #476	; (adr r3, 80055c0 <__ieee754_pow+0x6e0>)
 80053e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053e8:	f7fa ff48 	bl	800027c <__adddf3>
 80053ec:	4622      	mov	r2, r4
 80053ee:	462b      	mov	r3, r5
 80053f0:	f7fb f8fa 	bl	80005e8 <__aeabi_dmul>
 80053f4:	a374      	add	r3, pc, #464	; (adr r3, 80055c8 <__ieee754_pow+0x6e8>)
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	f7fa ff3f 	bl	800027c <__adddf3>
 80053fe:	4622      	mov	r2, r4
 8005400:	462b      	mov	r3, r5
 8005402:	f7fb f8f1 	bl	80005e8 <__aeabi_dmul>
 8005406:	a372      	add	r3, pc, #456	; (adr r3, 80055d0 <__ieee754_pow+0x6f0>)
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f7fa ff36 	bl	800027c <__adddf3>
 8005410:	4622      	mov	r2, r4
 8005412:	462b      	mov	r3, r5
 8005414:	f7fb f8e8 	bl	80005e8 <__aeabi_dmul>
 8005418:	a36f      	add	r3, pc, #444	; (adr r3, 80055d8 <__ieee754_pow+0x6f8>)
 800541a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541e:	f7fa ff2d 	bl	800027c <__adddf3>
 8005422:	4622      	mov	r2, r4
 8005424:	4606      	mov	r6, r0
 8005426:	460f      	mov	r7, r1
 8005428:	462b      	mov	r3, r5
 800542a:	4620      	mov	r0, r4
 800542c:	4629      	mov	r1, r5
 800542e:	f7fb f8db 	bl	80005e8 <__aeabi_dmul>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4630      	mov	r0, r6
 8005438:	4639      	mov	r1, r7
 800543a:	f7fb f8d5 	bl	80005e8 <__aeabi_dmul>
 800543e:	4642      	mov	r2, r8
 8005440:	4604      	mov	r4, r0
 8005442:	460d      	mov	r5, r1
 8005444:	464b      	mov	r3, r9
 8005446:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800544a:	f7fa ff17 	bl	800027c <__adddf3>
 800544e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005452:	f7fb f8c9 	bl	80005e8 <__aeabi_dmul>
 8005456:	4622      	mov	r2, r4
 8005458:	462b      	mov	r3, r5
 800545a:	f7fa ff0f 	bl	800027c <__adddf3>
 800545e:	4642      	mov	r2, r8
 8005460:	4606      	mov	r6, r0
 8005462:	460f      	mov	r7, r1
 8005464:	464b      	mov	r3, r9
 8005466:	4640      	mov	r0, r8
 8005468:	4649      	mov	r1, r9
 800546a:	f7fb f8bd 	bl	80005e8 <__aeabi_dmul>
 800546e:	2200      	movs	r2, #0
 8005470:	4b68      	ldr	r3, [pc, #416]	; (8005614 <__ieee754_pow+0x734>)
 8005472:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005476:	f7fa ff01 	bl	800027c <__adddf3>
 800547a:	4632      	mov	r2, r6
 800547c:	463b      	mov	r3, r7
 800547e:	f7fa fefd 	bl	800027c <__adddf3>
 8005482:	9802      	ldr	r0, [sp, #8]
 8005484:	460d      	mov	r5, r1
 8005486:	4604      	mov	r4, r0
 8005488:	4602      	mov	r2, r0
 800548a:	460b      	mov	r3, r1
 800548c:	4640      	mov	r0, r8
 800548e:	4649      	mov	r1, r9
 8005490:	f7fb f8aa 	bl	80005e8 <__aeabi_dmul>
 8005494:	2200      	movs	r2, #0
 8005496:	4680      	mov	r8, r0
 8005498:	4689      	mov	r9, r1
 800549a:	4b5e      	ldr	r3, [pc, #376]	; (8005614 <__ieee754_pow+0x734>)
 800549c:	4620      	mov	r0, r4
 800549e:	4629      	mov	r1, r5
 80054a0:	f7fa feea 	bl	8000278 <__aeabi_dsub>
 80054a4:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 80054a8:	f7fa fee6 	bl	8000278 <__aeabi_dsub>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4630      	mov	r0, r6
 80054b2:	4639      	mov	r1, r7
 80054b4:	f7fa fee0 	bl	8000278 <__aeabi_dsub>
 80054b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054bc:	f7fb f894 	bl	80005e8 <__aeabi_dmul>
 80054c0:	4622      	mov	r2, r4
 80054c2:	4606      	mov	r6, r0
 80054c4:	460f      	mov	r7, r1
 80054c6:	462b      	mov	r3, r5
 80054c8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054cc:	f7fb f88c 	bl	80005e8 <__aeabi_dmul>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	4630      	mov	r0, r6
 80054d6:	4639      	mov	r1, r7
 80054d8:	f7fa fed0 	bl	800027c <__adddf3>
 80054dc:	4606      	mov	r6, r0
 80054de:	460f      	mov	r7, r1
 80054e0:	4602      	mov	r2, r0
 80054e2:	460b      	mov	r3, r1
 80054e4:	4640      	mov	r0, r8
 80054e6:	4649      	mov	r1, r9
 80054e8:	f7fa fec8 	bl	800027c <__adddf3>
 80054ec:	9802      	ldr	r0, [sp, #8]
 80054ee:	a33c      	add	r3, pc, #240	; (adr r3, 80055e0 <__ieee754_pow+0x700>)
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	4604      	mov	r4, r0
 80054f6:	460d      	mov	r5, r1
 80054f8:	f7fb f876 	bl	80005e8 <__aeabi_dmul>
 80054fc:	4642      	mov	r2, r8
 80054fe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005502:	464b      	mov	r3, r9
 8005504:	4620      	mov	r0, r4
 8005506:	4629      	mov	r1, r5
 8005508:	f7fa feb6 	bl	8000278 <__aeabi_dsub>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	4630      	mov	r0, r6
 8005512:	4639      	mov	r1, r7
 8005514:	f7fa feb0 	bl	8000278 <__aeabi_dsub>
 8005518:	a333      	add	r3, pc, #204	; (adr r3, 80055e8 <__ieee754_pow+0x708>)
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	f7fb f863 	bl	80005e8 <__aeabi_dmul>
 8005522:	a333      	add	r3, pc, #204	; (adr r3, 80055f0 <__ieee754_pow+0x710>)
 8005524:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005528:	4606      	mov	r6, r0
 800552a:	460f      	mov	r7, r1
 800552c:	4620      	mov	r0, r4
 800552e:	4629      	mov	r1, r5
 8005530:	f7fb f85a 	bl	80005e8 <__aeabi_dmul>
 8005534:	4602      	mov	r2, r0
 8005536:	460b      	mov	r3, r1
 8005538:	4630      	mov	r0, r6
 800553a:	4639      	mov	r1, r7
 800553c:	f7fa fe9e 	bl	800027c <__adddf3>
 8005540:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005542:	4b35      	ldr	r3, [pc, #212]	; (8005618 <__ieee754_pow+0x738>)
 8005544:	4413      	add	r3, r2
 8005546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554a:	f7fa fe97 	bl	800027c <__adddf3>
 800554e:	4604      	mov	r4, r0
 8005550:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005552:	460d      	mov	r5, r1
 8005554:	f7fa ffde 	bl	8000514 <__aeabi_i2d>
 8005558:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800555a:	4b30      	ldr	r3, [pc, #192]	; (800561c <__ieee754_pow+0x73c>)
 800555c:	4413      	add	r3, r2
 800555e:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005562:	4606      	mov	r6, r0
 8005564:	460f      	mov	r7, r1
 8005566:	4622      	mov	r2, r4
 8005568:	462b      	mov	r3, r5
 800556a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800556e:	f7fa fe85 	bl	800027c <__adddf3>
 8005572:	4642      	mov	r2, r8
 8005574:	464b      	mov	r3, r9
 8005576:	f7fa fe81 	bl	800027c <__adddf3>
 800557a:	4632      	mov	r2, r6
 800557c:	463b      	mov	r3, r7
 800557e:	f7fa fe7d 	bl	800027c <__adddf3>
 8005582:	9802      	ldr	r0, [sp, #8]
 8005584:	4632      	mov	r2, r6
 8005586:	463b      	mov	r3, r7
 8005588:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800558c:	f7fa fe74 	bl	8000278 <__aeabi_dsub>
 8005590:	4642      	mov	r2, r8
 8005592:	464b      	mov	r3, r9
 8005594:	f7fa fe70 	bl	8000278 <__aeabi_dsub>
 8005598:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800559c:	e607      	b.n	80051ae <__ieee754_pow+0x2ce>
 800559e:	f04f 0a01 	mov.w	sl, #1
 80055a2:	e6a5      	b.n	80052f0 <__ieee754_pow+0x410>
 80055a4:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80055f8 <__ieee754_pow+0x718>
 80055a8:	e613      	b.n	80051d2 <__ieee754_pow+0x2f2>
 80055aa:	bf00      	nop
 80055ac:	f3af 8000 	nop.w
 80055b0:	4a454eef 	.word	0x4a454eef
 80055b4:	3fca7e28 	.word	0x3fca7e28
 80055b8:	93c9db65 	.word	0x93c9db65
 80055bc:	3fcd864a 	.word	0x3fcd864a
 80055c0:	a91d4101 	.word	0xa91d4101
 80055c4:	3fd17460 	.word	0x3fd17460
 80055c8:	518f264d 	.word	0x518f264d
 80055cc:	3fd55555 	.word	0x3fd55555
 80055d0:	db6fabff 	.word	0xdb6fabff
 80055d4:	3fdb6db6 	.word	0x3fdb6db6
 80055d8:	33333303 	.word	0x33333303
 80055dc:	3fe33333 	.word	0x3fe33333
 80055e0:	e0000000 	.word	0xe0000000
 80055e4:	3feec709 	.word	0x3feec709
 80055e8:	dc3a03fd 	.word	0xdc3a03fd
 80055ec:	3feec709 	.word	0x3feec709
 80055f0:	145b01f5 	.word	0x145b01f5
 80055f4:	be3e2fe0 	.word	0xbe3e2fe0
 80055f8:	00000000 	.word	0x00000000
 80055fc:	3ff00000 	.word	0x3ff00000
 8005600:	43400000 	.word	0x43400000
 8005604:	0003988e 	.word	0x0003988e
 8005608:	000bb679 	.word	0x000bb679
 800560c:	08007580 	.word	0x08007580
 8005610:	3ff00000 	.word	0x3ff00000
 8005614:	40080000 	.word	0x40080000
 8005618:	080075a0 	.word	0x080075a0
 800561c:	08007590 	.word	0x08007590
 8005620:	a3b4      	add	r3, pc, #720	; (adr r3, 80058f4 <__ieee754_pow+0xa14>)
 8005622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005626:	4640      	mov	r0, r8
 8005628:	4649      	mov	r1, r9
 800562a:	f7fa fe27 	bl	800027c <__adddf3>
 800562e:	4622      	mov	r2, r4
 8005630:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005634:	462b      	mov	r3, r5
 8005636:	4630      	mov	r0, r6
 8005638:	4639      	mov	r1, r7
 800563a:	f7fa fe1d 	bl	8000278 <__aeabi_dsub>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005646:	f7fb fa5f 	bl	8000b08 <__aeabi_dcmpgt>
 800564a:	2800      	cmp	r0, #0
 800564c:	f47f adfe 	bne.w	800524c <__ieee754_pow+0x36c>
 8005650:	4aa3      	ldr	r2, [pc, #652]	; (80058e0 <__ieee754_pow+0xa00>)
 8005652:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005656:	4293      	cmp	r3, r2
 8005658:	f340 810a 	ble.w	8005870 <__ieee754_pow+0x990>
 800565c:	151b      	asrs	r3, r3, #20
 800565e:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005662:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005666:	fa4a f303 	asr.w	r3, sl, r3
 800566a:	445b      	add	r3, fp
 800566c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005670:	4e9c      	ldr	r6, [pc, #624]	; (80058e4 <__ieee754_pow+0xa04>)
 8005672:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005676:	4116      	asrs	r6, r2
 8005678:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800567c:	2000      	movs	r0, #0
 800567e:	ea23 0106 	bic.w	r1, r3, r6
 8005682:	f1c2 0214 	rsb	r2, r2, #20
 8005686:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800568a:	fa4a fa02 	asr.w	sl, sl, r2
 800568e:	f1bb 0f00 	cmp.w	fp, #0
 8005692:	4602      	mov	r2, r0
 8005694:	460b      	mov	r3, r1
 8005696:	4620      	mov	r0, r4
 8005698:	4629      	mov	r1, r5
 800569a:	bfb8      	it	lt
 800569c:	f1ca 0a00 	rsblt	sl, sl, #0
 80056a0:	f7fa fdea 	bl	8000278 <__aeabi_dsub>
 80056a4:	e9cd 0100 	strd	r0, r1, [sp]
 80056a8:	4642      	mov	r2, r8
 80056aa:	464b      	mov	r3, r9
 80056ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056b0:	f7fa fde4 	bl	800027c <__adddf3>
 80056b4:	2000      	movs	r0, #0
 80056b6:	a378      	add	r3, pc, #480	; (adr r3, 8005898 <__ieee754_pow+0x9b8>)
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	4604      	mov	r4, r0
 80056be:	460d      	mov	r5, r1
 80056c0:	f7fa ff92 	bl	80005e8 <__aeabi_dmul>
 80056c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80056c8:	4606      	mov	r6, r0
 80056ca:	460f      	mov	r7, r1
 80056cc:	4620      	mov	r0, r4
 80056ce:	4629      	mov	r1, r5
 80056d0:	f7fa fdd2 	bl	8000278 <__aeabi_dsub>
 80056d4:	4602      	mov	r2, r0
 80056d6:	460b      	mov	r3, r1
 80056d8:	4640      	mov	r0, r8
 80056da:	4649      	mov	r1, r9
 80056dc:	f7fa fdcc 	bl	8000278 <__aeabi_dsub>
 80056e0:	a36f      	add	r3, pc, #444	; (adr r3, 80058a0 <__ieee754_pow+0x9c0>)
 80056e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056e6:	f7fa ff7f 	bl	80005e8 <__aeabi_dmul>
 80056ea:	a36f      	add	r3, pc, #444	; (adr r3, 80058a8 <__ieee754_pow+0x9c8>)
 80056ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056f0:	4680      	mov	r8, r0
 80056f2:	4689      	mov	r9, r1
 80056f4:	4620      	mov	r0, r4
 80056f6:	4629      	mov	r1, r5
 80056f8:	f7fa ff76 	bl	80005e8 <__aeabi_dmul>
 80056fc:	4602      	mov	r2, r0
 80056fe:	460b      	mov	r3, r1
 8005700:	4640      	mov	r0, r8
 8005702:	4649      	mov	r1, r9
 8005704:	f7fa fdba 	bl	800027c <__adddf3>
 8005708:	4604      	mov	r4, r0
 800570a:	460d      	mov	r5, r1
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4630      	mov	r0, r6
 8005712:	4639      	mov	r1, r7
 8005714:	f7fa fdb2 	bl	800027c <__adddf3>
 8005718:	4632      	mov	r2, r6
 800571a:	463b      	mov	r3, r7
 800571c:	4680      	mov	r8, r0
 800571e:	4689      	mov	r9, r1
 8005720:	f7fa fdaa 	bl	8000278 <__aeabi_dsub>
 8005724:	4602      	mov	r2, r0
 8005726:	460b      	mov	r3, r1
 8005728:	4620      	mov	r0, r4
 800572a:	4629      	mov	r1, r5
 800572c:	f7fa fda4 	bl	8000278 <__aeabi_dsub>
 8005730:	4642      	mov	r2, r8
 8005732:	4606      	mov	r6, r0
 8005734:	460f      	mov	r7, r1
 8005736:	464b      	mov	r3, r9
 8005738:	4640      	mov	r0, r8
 800573a:	4649      	mov	r1, r9
 800573c:	f7fa ff54 	bl	80005e8 <__aeabi_dmul>
 8005740:	a35b      	add	r3, pc, #364	; (adr r3, 80058b0 <__ieee754_pow+0x9d0>)
 8005742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005746:	4604      	mov	r4, r0
 8005748:	460d      	mov	r5, r1
 800574a:	f7fa ff4d 	bl	80005e8 <__aeabi_dmul>
 800574e:	a35a      	add	r3, pc, #360	; (adr r3, 80058b8 <__ieee754_pow+0x9d8>)
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f7fa fd90 	bl	8000278 <__aeabi_dsub>
 8005758:	4622      	mov	r2, r4
 800575a:	462b      	mov	r3, r5
 800575c:	f7fa ff44 	bl	80005e8 <__aeabi_dmul>
 8005760:	a357      	add	r3, pc, #348	; (adr r3, 80058c0 <__ieee754_pow+0x9e0>)
 8005762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005766:	f7fa fd89 	bl	800027c <__adddf3>
 800576a:	4622      	mov	r2, r4
 800576c:	462b      	mov	r3, r5
 800576e:	f7fa ff3b 	bl	80005e8 <__aeabi_dmul>
 8005772:	a355      	add	r3, pc, #340	; (adr r3, 80058c8 <__ieee754_pow+0x9e8>)
 8005774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005778:	f7fa fd7e 	bl	8000278 <__aeabi_dsub>
 800577c:	4622      	mov	r2, r4
 800577e:	462b      	mov	r3, r5
 8005780:	f7fa ff32 	bl	80005e8 <__aeabi_dmul>
 8005784:	a352      	add	r3, pc, #328	; (adr r3, 80058d0 <__ieee754_pow+0x9f0>)
 8005786:	e9d3 2300 	ldrd	r2, r3, [r3]
 800578a:	f7fa fd77 	bl	800027c <__adddf3>
 800578e:	4622      	mov	r2, r4
 8005790:	462b      	mov	r3, r5
 8005792:	f7fa ff29 	bl	80005e8 <__aeabi_dmul>
 8005796:	4602      	mov	r2, r0
 8005798:	460b      	mov	r3, r1
 800579a:	4640      	mov	r0, r8
 800579c:	4649      	mov	r1, r9
 800579e:	f7fa fd6b 	bl	8000278 <__aeabi_dsub>
 80057a2:	4604      	mov	r4, r0
 80057a4:	460d      	mov	r5, r1
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4640      	mov	r0, r8
 80057ac:	4649      	mov	r1, r9
 80057ae:	f7fa ff1b 	bl	80005e8 <__aeabi_dmul>
 80057b2:	2200      	movs	r2, #0
 80057b4:	e9cd 0100 	strd	r0, r1, [sp]
 80057b8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80057bc:	4620      	mov	r0, r4
 80057be:	4629      	mov	r1, r5
 80057c0:	f7fa fd5a 	bl	8000278 <__aeabi_dsub>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 80057cc:	f7fb f836 	bl	800083c <__aeabi_ddiv>
 80057d0:	4632      	mov	r2, r6
 80057d2:	4604      	mov	r4, r0
 80057d4:	460d      	mov	r5, r1
 80057d6:	463b      	mov	r3, r7
 80057d8:	4640      	mov	r0, r8
 80057da:	4649      	mov	r1, r9
 80057dc:	f7fa ff04 	bl	80005e8 <__aeabi_dmul>
 80057e0:	4632      	mov	r2, r6
 80057e2:	463b      	mov	r3, r7
 80057e4:	f7fa fd4a 	bl	800027c <__adddf3>
 80057e8:	4602      	mov	r2, r0
 80057ea:	460b      	mov	r3, r1
 80057ec:	4620      	mov	r0, r4
 80057ee:	4629      	mov	r1, r5
 80057f0:	f7fa fd42 	bl	8000278 <__aeabi_dsub>
 80057f4:	4642      	mov	r2, r8
 80057f6:	464b      	mov	r3, r9
 80057f8:	f7fa fd3e 	bl	8000278 <__aeabi_dsub>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	2000      	movs	r0, #0
 8005802:	4939      	ldr	r1, [pc, #228]	; (80058e8 <__ieee754_pow+0xa08>)
 8005804:	f7fa fd38 	bl	8000278 <__aeabi_dsub>
 8005808:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 800580c:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	da2f      	bge.n	8005876 <__ieee754_pow+0x996>
 8005816:	4650      	mov	r0, sl
 8005818:	ec43 2b10 	vmov	d0, r2, r3
 800581c:	f000 f9c0 	bl	8005ba0 <scalbn>
 8005820:	ec51 0b10 	vmov	r0, r1, d0
 8005824:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005828:	f7ff bbf1 	b.w	800500e <__ieee754_pow+0x12e>
 800582c:	4b2f      	ldr	r3, [pc, #188]	; (80058ec <__ieee754_pow+0xa0c>)
 800582e:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005832:	429e      	cmp	r6, r3
 8005834:	f77f af0c 	ble.w	8005650 <__ieee754_pow+0x770>
 8005838:	4b2d      	ldr	r3, [pc, #180]	; (80058f0 <__ieee754_pow+0xa10>)
 800583a:	440b      	add	r3, r1
 800583c:	4303      	orrs	r3, r0
 800583e:	d00b      	beq.n	8005858 <__ieee754_pow+0x978>
 8005840:	a325      	add	r3, pc, #148	; (adr r3, 80058d8 <__ieee754_pow+0x9f8>)
 8005842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005846:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800584a:	f7fa fecd 	bl	80005e8 <__aeabi_dmul>
 800584e:	a322      	add	r3, pc, #136	; (adr r3, 80058d8 <__ieee754_pow+0x9f8>)
 8005850:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005854:	f7ff bbdb 	b.w	800500e <__ieee754_pow+0x12e>
 8005858:	4622      	mov	r2, r4
 800585a:	462b      	mov	r3, r5
 800585c:	f7fa fd0c 	bl	8000278 <__aeabi_dsub>
 8005860:	4642      	mov	r2, r8
 8005862:	464b      	mov	r3, r9
 8005864:	f7fb f946 	bl	8000af4 <__aeabi_dcmpge>
 8005868:	2800      	cmp	r0, #0
 800586a:	f43f aef1 	beq.w	8005650 <__ieee754_pow+0x770>
 800586e:	e7e7      	b.n	8005840 <__ieee754_pow+0x960>
 8005870:	f04f 0a00 	mov.w	sl, #0
 8005874:	e718      	b.n	80056a8 <__ieee754_pow+0x7c8>
 8005876:	4621      	mov	r1, r4
 8005878:	e7d4      	b.n	8005824 <__ieee754_pow+0x944>
 800587a:	2000      	movs	r0, #0
 800587c:	491a      	ldr	r1, [pc, #104]	; (80058e8 <__ieee754_pow+0xa08>)
 800587e:	f7ff bb8f 	b.w	8004fa0 <__ieee754_pow+0xc0>
 8005882:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005886:	f7ff bb8b 	b.w	8004fa0 <__ieee754_pow+0xc0>
 800588a:	4630      	mov	r0, r6
 800588c:	4639      	mov	r1, r7
 800588e:	f7ff bb87 	b.w	8004fa0 <__ieee754_pow+0xc0>
 8005892:	4693      	mov	fp, r2
 8005894:	f7ff bb98 	b.w	8004fc8 <__ieee754_pow+0xe8>
 8005898:	00000000 	.word	0x00000000
 800589c:	3fe62e43 	.word	0x3fe62e43
 80058a0:	fefa39ef 	.word	0xfefa39ef
 80058a4:	3fe62e42 	.word	0x3fe62e42
 80058a8:	0ca86c39 	.word	0x0ca86c39
 80058ac:	be205c61 	.word	0xbe205c61
 80058b0:	72bea4d0 	.word	0x72bea4d0
 80058b4:	3e663769 	.word	0x3e663769
 80058b8:	c5d26bf1 	.word	0xc5d26bf1
 80058bc:	3ebbbd41 	.word	0x3ebbbd41
 80058c0:	af25de2c 	.word	0xaf25de2c
 80058c4:	3f11566a 	.word	0x3f11566a
 80058c8:	16bebd93 	.word	0x16bebd93
 80058cc:	3f66c16c 	.word	0x3f66c16c
 80058d0:	5555553e 	.word	0x5555553e
 80058d4:	3fc55555 	.word	0x3fc55555
 80058d8:	c2f8f359 	.word	0xc2f8f359
 80058dc:	01a56e1f 	.word	0x01a56e1f
 80058e0:	3fe00000 	.word	0x3fe00000
 80058e4:	000fffff 	.word	0x000fffff
 80058e8:	3ff00000 	.word	0x3ff00000
 80058ec:	4090cbff 	.word	0x4090cbff
 80058f0:	3f6f3400 	.word	0x3f6f3400
 80058f4:	652b82fe 	.word	0x652b82fe
 80058f8:	3c971547 	.word	0x3c971547

080058fc <__ieee754_sqrt>:
 80058fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005900:	4955      	ldr	r1, [pc, #340]	; (8005a58 <__ieee754_sqrt+0x15c>)
 8005902:	ec55 4b10 	vmov	r4, r5, d0
 8005906:	43a9      	bics	r1, r5
 8005908:	462b      	mov	r3, r5
 800590a:	462a      	mov	r2, r5
 800590c:	d112      	bne.n	8005934 <__ieee754_sqrt+0x38>
 800590e:	ee10 2a10 	vmov	r2, s0
 8005912:	ee10 0a10 	vmov	r0, s0
 8005916:	4629      	mov	r1, r5
 8005918:	f7fa fe66 	bl	80005e8 <__aeabi_dmul>
 800591c:	4602      	mov	r2, r0
 800591e:	460b      	mov	r3, r1
 8005920:	4620      	mov	r0, r4
 8005922:	4629      	mov	r1, r5
 8005924:	f7fa fcaa 	bl	800027c <__adddf3>
 8005928:	4604      	mov	r4, r0
 800592a:	460d      	mov	r5, r1
 800592c:	ec45 4b10 	vmov	d0, r4, r5
 8005930:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005934:	2d00      	cmp	r5, #0
 8005936:	ee10 0a10 	vmov	r0, s0
 800593a:	4621      	mov	r1, r4
 800593c:	dc0f      	bgt.n	800595e <__ieee754_sqrt+0x62>
 800593e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005942:	4330      	orrs	r0, r6
 8005944:	d0f2      	beq.n	800592c <__ieee754_sqrt+0x30>
 8005946:	b155      	cbz	r5, 800595e <__ieee754_sqrt+0x62>
 8005948:	ee10 2a10 	vmov	r2, s0
 800594c:	4620      	mov	r0, r4
 800594e:	4629      	mov	r1, r5
 8005950:	f7fa fc92 	bl	8000278 <__aeabi_dsub>
 8005954:	4602      	mov	r2, r0
 8005956:	460b      	mov	r3, r1
 8005958:	f7fa ff70 	bl	800083c <__aeabi_ddiv>
 800595c:	e7e4      	b.n	8005928 <__ieee754_sqrt+0x2c>
 800595e:	151b      	asrs	r3, r3, #20
 8005960:	d073      	beq.n	8005a4a <__ieee754_sqrt+0x14e>
 8005962:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005966:	07dd      	lsls	r5, r3, #31
 8005968:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800596c:	bf48      	it	mi
 800596e:	0fc8      	lsrmi	r0, r1, #31
 8005970:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8005974:	bf44      	itt	mi
 8005976:	0049      	lslmi	r1, r1, #1
 8005978:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 800597c:	2500      	movs	r5, #0
 800597e:	1058      	asrs	r0, r3, #1
 8005980:	0fcb      	lsrs	r3, r1, #31
 8005982:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8005986:	0049      	lsls	r1, r1, #1
 8005988:	2316      	movs	r3, #22
 800598a:	462c      	mov	r4, r5
 800598c:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8005990:	19a7      	adds	r7, r4, r6
 8005992:	4297      	cmp	r7, r2
 8005994:	bfde      	ittt	le
 8005996:	19bc      	addle	r4, r7, r6
 8005998:	1bd2      	suble	r2, r2, r7
 800599a:	19ad      	addle	r5, r5, r6
 800599c:	0fcf      	lsrs	r7, r1, #31
 800599e:	3b01      	subs	r3, #1
 80059a0:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 80059a4:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80059a8:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80059ac:	d1f0      	bne.n	8005990 <__ieee754_sqrt+0x94>
 80059ae:	f04f 0c20 	mov.w	ip, #32
 80059b2:	469e      	mov	lr, r3
 80059b4:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80059b8:	42a2      	cmp	r2, r4
 80059ba:	eb06 070e 	add.w	r7, r6, lr
 80059be:	dc02      	bgt.n	80059c6 <__ieee754_sqrt+0xca>
 80059c0:	d112      	bne.n	80059e8 <__ieee754_sqrt+0xec>
 80059c2:	428f      	cmp	r7, r1
 80059c4:	d810      	bhi.n	80059e8 <__ieee754_sqrt+0xec>
 80059c6:	2f00      	cmp	r7, #0
 80059c8:	eb07 0e06 	add.w	lr, r7, r6
 80059cc:	da42      	bge.n	8005a54 <__ieee754_sqrt+0x158>
 80059ce:	f1be 0f00 	cmp.w	lr, #0
 80059d2:	db3f      	blt.n	8005a54 <__ieee754_sqrt+0x158>
 80059d4:	f104 0801 	add.w	r8, r4, #1
 80059d8:	1b12      	subs	r2, r2, r4
 80059da:	428f      	cmp	r7, r1
 80059dc:	bf88      	it	hi
 80059de:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80059e2:	1bc9      	subs	r1, r1, r7
 80059e4:	4433      	add	r3, r6
 80059e6:	4644      	mov	r4, r8
 80059e8:	0052      	lsls	r2, r2, #1
 80059ea:	f1bc 0c01 	subs.w	ip, ip, #1
 80059ee:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80059f2:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80059f6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80059fa:	d1dd      	bne.n	80059b8 <__ieee754_sqrt+0xbc>
 80059fc:	430a      	orrs	r2, r1
 80059fe:	d006      	beq.n	8005a0e <__ieee754_sqrt+0x112>
 8005a00:	1c5c      	adds	r4, r3, #1
 8005a02:	bf13      	iteet	ne
 8005a04:	3301      	addne	r3, #1
 8005a06:	3501      	addeq	r5, #1
 8005a08:	4663      	moveq	r3, ip
 8005a0a:	f023 0301 	bicne.w	r3, r3, #1
 8005a0e:	106a      	asrs	r2, r5, #1
 8005a10:	085b      	lsrs	r3, r3, #1
 8005a12:	07e9      	lsls	r1, r5, #31
 8005a14:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005a18:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005a1c:	bf48      	it	mi
 8005a1e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005a22:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005a26:	461c      	mov	r4, r3
 8005a28:	e780      	b.n	800592c <__ieee754_sqrt+0x30>
 8005a2a:	0aca      	lsrs	r2, r1, #11
 8005a2c:	3815      	subs	r0, #21
 8005a2e:	0549      	lsls	r1, r1, #21
 8005a30:	2a00      	cmp	r2, #0
 8005a32:	d0fa      	beq.n	8005a2a <__ieee754_sqrt+0x12e>
 8005a34:	02d6      	lsls	r6, r2, #11
 8005a36:	d50a      	bpl.n	8005a4e <__ieee754_sqrt+0x152>
 8005a38:	f1c3 0420 	rsb	r4, r3, #32
 8005a3c:	fa21 f404 	lsr.w	r4, r1, r4
 8005a40:	1e5d      	subs	r5, r3, #1
 8005a42:	4099      	lsls	r1, r3
 8005a44:	4322      	orrs	r2, r4
 8005a46:	1b43      	subs	r3, r0, r5
 8005a48:	e78b      	b.n	8005962 <__ieee754_sqrt+0x66>
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	e7f0      	b.n	8005a30 <__ieee754_sqrt+0x134>
 8005a4e:	0052      	lsls	r2, r2, #1
 8005a50:	3301      	adds	r3, #1
 8005a52:	e7ef      	b.n	8005a34 <__ieee754_sqrt+0x138>
 8005a54:	46a0      	mov	r8, r4
 8005a56:	e7bf      	b.n	80059d8 <__ieee754_sqrt+0xdc>
 8005a58:	7ff00000 	.word	0x7ff00000

08005a5c <fabs>:
 8005a5c:	ec51 0b10 	vmov	r0, r1, d0
 8005a60:	ee10 2a10 	vmov	r2, s0
 8005a64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005a68:	ec43 2b10 	vmov	d0, r2, r3
 8005a6c:	4770      	bx	lr

08005a6e <finite>:
 8005a6e:	ee10 3a90 	vmov	r3, s1
 8005a72:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8005a76:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005a7a:	0fc0      	lsrs	r0, r0, #31
 8005a7c:	4770      	bx	lr

08005a7e <matherr>:
 8005a7e:	2000      	movs	r0, #0
 8005a80:	4770      	bx	lr
 8005a82:	0000      	movs	r0, r0
 8005a84:	0000      	movs	r0, r0
	...

08005a88 <nan>:
 8005a88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005a90 <nan+0x8>
 8005a8c:	4770      	bx	lr
 8005a8e:	bf00      	nop
 8005a90:	00000000 	.word	0x00000000
 8005a94:	7ff80000 	.word	0x7ff80000

08005a98 <rint>:
 8005a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005a9a:	ec51 0b10 	vmov	r0, r1, d0
 8005a9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005aa2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005aa6:	2e13      	cmp	r6, #19
 8005aa8:	460b      	mov	r3, r1
 8005aaa:	ee10 4a10 	vmov	r4, s0
 8005aae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005ab2:	dc56      	bgt.n	8005b62 <rint+0xca>
 8005ab4:	2e00      	cmp	r6, #0
 8005ab6:	da2b      	bge.n	8005b10 <rint+0x78>
 8005ab8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005abc:	4302      	orrs	r2, r0
 8005abe:	d023      	beq.n	8005b08 <rint+0x70>
 8005ac0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005ac4:	4302      	orrs	r2, r0
 8005ac6:	4254      	negs	r4, r2
 8005ac8:	4314      	orrs	r4, r2
 8005aca:	0c4b      	lsrs	r3, r1, #17
 8005acc:	0b24      	lsrs	r4, r4, #12
 8005ace:	045b      	lsls	r3, r3, #17
 8005ad0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8005ad4:	ea44 0103 	orr.w	r1, r4, r3
 8005ad8:	460b      	mov	r3, r1
 8005ada:	492f      	ldr	r1, [pc, #188]	; (8005b98 <rint+0x100>)
 8005adc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8005ae0:	e9d1 6700 	ldrd	r6, r7, [r1]
 8005ae4:	4602      	mov	r2, r0
 8005ae6:	4639      	mov	r1, r7
 8005ae8:	4630      	mov	r0, r6
 8005aea:	f7fa fbc7 	bl	800027c <__adddf3>
 8005aee:	e9cd 0100 	strd	r0, r1, [sp]
 8005af2:	463b      	mov	r3, r7
 8005af4:	4632      	mov	r2, r6
 8005af6:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005afa:	f7fa fbbd 	bl	8000278 <__aeabi_dsub>
 8005afe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005b02:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8005b06:	4639      	mov	r1, r7
 8005b08:	ec41 0b10 	vmov	d0, r0, r1
 8005b0c:	b003      	add	sp, #12
 8005b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005b10:	4a22      	ldr	r2, [pc, #136]	; (8005b9c <rint+0x104>)
 8005b12:	4132      	asrs	r2, r6
 8005b14:	ea01 0702 	and.w	r7, r1, r2
 8005b18:	4307      	orrs	r7, r0
 8005b1a:	d0f5      	beq.n	8005b08 <rint+0x70>
 8005b1c:	0852      	lsrs	r2, r2, #1
 8005b1e:	4011      	ands	r1, r2
 8005b20:	430c      	orrs	r4, r1
 8005b22:	d00b      	beq.n	8005b3c <rint+0xa4>
 8005b24:	ea23 0202 	bic.w	r2, r3, r2
 8005b28:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005b2c:	2e13      	cmp	r6, #19
 8005b2e:	fa43 f306 	asr.w	r3, r3, r6
 8005b32:	bf0c      	ite	eq
 8005b34:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005b38:	2400      	movne	r4, #0
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	4916      	ldr	r1, [pc, #88]	; (8005b98 <rint+0x100>)
 8005b3e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005b42:	4622      	mov	r2, r4
 8005b44:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005b48:	4620      	mov	r0, r4
 8005b4a:	4629      	mov	r1, r5
 8005b4c:	f7fa fb96 	bl	800027c <__adddf3>
 8005b50:	e9cd 0100 	strd	r0, r1, [sp]
 8005b54:	4622      	mov	r2, r4
 8005b56:	462b      	mov	r3, r5
 8005b58:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005b5c:	f7fa fb8c 	bl	8000278 <__aeabi_dsub>
 8005b60:	e7d2      	b.n	8005b08 <rint+0x70>
 8005b62:	2e33      	cmp	r6, #51	; 0x33
 8005b64:	dd07      	ble.n	8005b76 <rint+0xde>
 8005b66:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005b6a:	d1cd      	bne.n	8005b08 <rint+0x70>
 8005b6c:	ee10 2a10 	vmov	r2, s0
 8005b70:	f7fa fb84 	bl	800027c <__adddf3>
 8005b74:	e7c8      	b.n	8005b08 <rint+0x70>
 8005b76:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8005b7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005b7e:	40f2      	lsrs	r2, r6
 8005b80:	4210      	tst	r0, r2
 8005b82:	d0c1      	beq.n	8005b08 <rint+0x70>
 8005b84:	0852      	lsrs	r2, r2, #1
 8005b86:	4210      	tst	r0, r2
 8005b88:	bf1f      	itttt	ne
 8005b8a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005b8e:	ea20 0202 	bicne.w	r2, r0, r2
 8005b92:	4134      	asrne	r4, r6
 8005b94:	4314      	orrne	r4, r2
 8005b96:	e7d1      	b.n	8005b3c <rint+0xa4>
 8005b98:	080075b0 	.word	0x080075b0
 8005b9c:	000fffff 	.word	0x000fffff

08005ba0 <scalbn>:
 8005ba0:	b570      	push	{r4, r5, r6, lr}
 8005ba2:	ec55 4b10 	vmov	r4, r5, d0
 8005ba6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005baa:	4606      	mov	r6, r0
 8005bac:	462b      	mov	r3, r5
 8005bae:	b9aa      	cbnz	r2, 8005bdc <scalbn+0x3c>
 8005bb0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005bb4:	4323      	orrs	r3, r4
 8005bb6:	d03b      	beq.n	8005c30 <scalbn+0x90>
 8005bb8:	4b31      	ldr	r3, [pc, #196]	; (8005c80 <scalbn+0xe0>)
 8005bba:	4629      	mov	r1, r5
 8005bbc:	2200      	movs	r2, #0
 8005bbe:	ee10 0a10 	vmov	r0, s0
 8005bc2:	f7fa fd11 	bl	80005e8 <__aeabi_dmul>
 8005bc6:	4b2f      	ldr	r3, [pc, #188]	; (8005c84 <scalbn+0xe4>)
 8005bc8:	429e      	cmp	r6, r3
 8005bca:	4604      	mov	r4, r0
 8005bcc:	460d      	mov	r5, r1
 8005bce:	da12      	bge.n	8005bf6 <scalbn+0x56>
 8005bd0:	a327      	add	r3, pc, #156	; (adr r3, 8005c70 <scalbn+0xd0>)
 8005bd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bd6:	f7fa fd07 	bl	80005e8 <__aeabi_dmul>
 8005bda:	e009      	b.n	8005bf0 <scalbn+0x50>
 8005bdc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005be0:	428a      	cmp	r2, r1
 8005be2:	d10c      	bne.n	8005bfe <scalbn+0x5e>
 8005be4:	ee10 2a10 	vmov	r2, s0
 8005be8:	4620      	mov	r0, r4
 8005bea:	4629      	mov	r1, r5
 8005bec:	f7fa fb46 	bl	800027c <__adddf3>
 8005bf0:	4604      	mov	r4, r0
 8005bf2:	460d      	mov	r5, r1
 8005bf4:	e01c      	b.n	8005c30 <scalbn+0x90>
 8005bf6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005bfa:	460b      	mov	r3, r1
 8005bfc:	3a36      	subs	r2, #54	; 0x36
 8005bfe:	4432      	add	r2, r6
 8005c00:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005c04:	428a      	cmp	r2, r1
 8005c06:	dd0b      	ble.n	8005c20 <scalbn+0x80>
 8005c08:	ec45 4b11 	vmov	d1, r4, r5
 8005c0c:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005c78 <scalbn+0xd8>
 8005c10:	f000 f9f0 	bl	8005ff4 <copysign>
 8005c14:	a318      	add	r3, pc, #96	; (adr r3, 8005c78 <scalbn+0xd8>)
 8005c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1a:	ec51 0b10 	vmov	r0, r1, d0
 8005c1e:	e7da      	b.n	8005bd6 <scalbn+0x36>
 8005c20:	2a00      	cmp	r2, #0
 8005c22:	dd08      	ble.n	8005c36 <scalbn+0x96>
 8005c24:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c28:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c2c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c30:	ec45 4b10 	vmov	d0, r4, r5
 8005c34:	bd70      	pop	{r4, r5, r6, pc}
 8005c36:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005c3a:	da0d      	bge.n	8005c58 <scalbn+0xb8>
 8005c3c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005c40:	429e      	cmp	r6, r3
 8005c42:	ec45 4b11 	vmov	d1, r4, r5
 8005c46:	dce1      	bgt.n	8005c0c <scalbn+0x6c>
 8005c48:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005c70 <scalbn+0xd0>
 8005c4c:	f000 f9d2 	bl	8005ff4 <copysign>
 8005c50:	a307      	add	r3, pc, #28	; (adr r3, 8005c70 <scalbn+0xd0>)
 8005c52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c56:	e7e0      	b.n	8005c1a <scalbn+0x7a>
 8005c58:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005c5c:	3236      	adds	r2, #54	; 0x36
 8005c5e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005c62:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005c66:	4620      	mov	r0, r4
 8005c68:	4629      	mov	r1, r5
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	4b06      	ldr	r3, [pc, #24]	; (8005c88 <scalbn+0xe8>)
 8005c6e:	e7b2      	b.n	8005bd6 <scalbn+0x36>
 8005c70:	c2f8f359 	.word	0xc2f8f359
 8005c74:	01a56e1f 	.word	0x01a56e1f
 8005c78:	8800759c 	.word	0x8800759c
 8005c7c:	7e37e43c 	.word	0x7e37e43c
 8005c80:	43500000 	.word	0x43500000
 8005c84:	ffff3cb0 	.word	0xffff3cb0
 8005c88:	3c900000 	.word	0x3c900000
 8005c8c:	00000000 	.word	0x00000000

08005c90 <__ieee754_log>:
 8005c90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c94:	ec51 0b10 	vmov	r0, r1, d0
 8005c98:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005c9c:	b087      	sub	sp, #28
 8005c9e:	460d      	mov	r5, r1
 8005ca0:	da27      	bge.n	8005cf2 <__ieee754_log+0x62>
 8005ca2:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ca6:	4303      	orrs	r3, r0
 8005ca8:	ee10 2a10 	vmov	r2, s0
 8005cac:	d10a      	bne.n	8005cc4 <__ieee754_log+0x34>
 8005cae:	49cc      	ldr	r1, [pc, #816]	; (8005fe0 <__ieee754_log+0x350>)
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	2000      	movs	r0, #0
 8005cb6:	f7fa fdc1 	bl	800083c <__aeabi_ddiv>
 8005cba:	ec41 0b10 	vmov	d0, r0, r1
 8005cbe:	b007      	add	sp, #28
 8005cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cc4:	2900      	cmp	r1, #0
 8005cc6:	da05      	bge.n	8005cd4 <__ieee754_log+0x44>
 8005cc8:	460b      	mov	r3, r1
 8005cca:	f7fa fad5 	bl	8000278 <__aeabi_dsub>
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2300      	movs	r3, #0
 8005cd2:	e7f0      	b.n	8005cb6 <__ieee754_log+0x26>
 8005cd4:	4bc3      	ldr	r3, [pc, #780]	; (8005fe4 <__ieee754_log+0x354>)
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	f7fa fc86 	bl	80005e8 <__aeabi_dmul>
 8005cdc:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005ce0:	460d      	mov	r5, r1
 8005ce2:	4ac1      	ldr	r2, [pc, #772]	; (8005fe8 <__ieee754_log+0x358>)
 8005ce4:	4295      	cmp	r5, r2
 8005ce6:	dd06      	ble.n	8005cf6 <__ieee754_log+0x66>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	460b      	mov	r3, r1
 8005cec:	f7fa fac6 	bl	800027c <__adddf3>
 8005cf0:	e7e3      	b.n	8005cba <__ieee754_log+0x2a>
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	e7f5      	b.n	8005ce2 <__ieee754_log+0x52>
 8005cf6:	152c      	asrs	r4, r5, #20
 8005cf8:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005cfc:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8005d00:	441c      	add	r4, r3
 8005d02:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 8005d06:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8005d0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d0e:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 8005d12:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8005d16:	ea42 0105 	orr.w	r1, r2, r5
 8005d1a:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8005d1e:	2200      	movs	r2, #0
 8005d20:	4bb2      	ldr	r3, [pc, #712]	; (8005fec <__ieee754_log+0x35c>)
 8005d22:	f7fa faa9 	bl	8000278 <__aeabi_dsub>
 8005d26:	1cab      	adds	r3, r5, #2
 8005d28:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005d2c:	2b02      	cmp	r3, #2
 8005d2e:	4682      	mov	sl, r0
 8005d30:	468b      	mov	fp, r1
 8005d32:	f04f 0200 	mov.w	r2, #0
 8005d36:	dc53      	bgt.n	8005de0 <__ieee754_log+0x150>
 8005d38:	2300      	movs	r3, #0
 8005d3a:	f7fa febd 	bl	8000ab8 <__aeabi_dcmpeq>
 8005d3e:	b1d0      	cbz	r0, 8005d76 <__ieee754_log+0xe6>
 8005d40:	2c00      	cmp	r4, #0
 8005d42:	f000 8120 	beq.w	8005f86 <__ieee754_log+0x2f6>
 8005d46:	4620      	mov	r0, r4
 8005d48:	f7fa fbe4 	bl	8000514 <__aeabi_i2d>
 8005d4c:	a390      	add	r3, pc, #576	; (adr r3, 8005f90 <__ieee754_log+0x300>)
 8005d4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d52:	4606      	mov	r6, r0
 8005d54:	460f      	mov	r7, r1
 8005d56:	f7fa fc47 	bl	80005e8 <__aeabi_dmul>
 8005d5a:	a38f      	add	r3, pc, #572	; (adr r3, 8005f98 <__ieee754_log+0x308>)
 8005d5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d60:	4604      	mov	r4, r0
 8005d62:	460d      	mov	r5, r1
 8005d64:	4630      	mov	r0, r6
 8005d66:	4639      	mov	r1, r7
 8005d68:	f7fa fc3e 	bl	80005e8 <__aeabi_dmul>
 8005d6c:	4602      	mov	r2, r0
 8005d6e:	460b      	mov	r3, r1
 8005d70:	4620      	mov	r0, r4
 8005d72:	4629      	mov	r1, r5
 8005d74:	e7ba      	b.n	8005cec <__ieee754_log+0x5c>
 8005d76:	a38a      	add	r3, pc, #552	; (adr r3, 8005fa0 <__ieee754_log+0x310>)
 8005d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d7c:	4650      	mov	r0, sl
 8005d7e:	4659      	mov	r1, fp
 8005d80:	f7fa fc32 	bl	80005e8 <__aeabi_dmul>
 8005d84:	4602      	mov	r2, r0
 8005d86:	460b      	mov	r3, r1
 8005d88:	2000      	movs	r0, #0
 8005d8a:	4999      	ldr	r1, [pc, #612]	; (8005ff0 <__ieee754_log+0x360>)
 8005d8c:	f7fa fa74 	bl	8000278 <__aeabi_dsub>
 8005d90:	4652      	mov	r2, sl
 8005d92:	4606      	mov	r6, r0
 8005d94:	460f      	mov	r7, r1
 8005d96:	465b      	mov	r3, fp
 8005d98:	4650      	mov	r0, sl
 8005d9a:	4659      	mov	r1, fp
 8005d9c:	f7fa fc24 	bl	80005e8 <__aeabi_dmul>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4630      	mov	r0, r6
 8005da6:	4639      	mov	r1, r7
 8005da8:	f7fa fc1e 	bl	80005e8 <__aeabi_dmul>
 8005dac:	4606      	mov	r6, r0
 8005dae:	460f      	mov	r7, r1
 8005db0:	b914      	cbnz	r4, 8005db8 <__ieee754_log+0x128>
 8005db2:	4632      	mov	r2, r6
 8005db4:	463b      	mov	r3, r7
 8005db6:	e0a0      	b.n	8005efa <__ieee754_log+0x26a>
 8005db8:	4620      	mov	r0, r4
 8005dba:	f7fa fbab 	bl	8000514 <__aeabi_i2d>
 8005dbe:	a374      	add	r3, pc, #464	; (adr r3, 8005f90 <__ieee754_log+0x300>)
 8005dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dc4:	4680      	mov	r8, r0
 8005dc6:	4689      	mov	r9, r1
 8005dc8:	f7fa fc0e 	bl	80005e8 <__aeabi_dmul>
 8005dcc:	a372      	add	r3, pc, #456	; (adr r3, 8005f98 <__ieee754_log+0x308>)
 8005dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dd2:	4604      	mov	r4, r0
 8005dd4:	460d      	mov	r5, r1
 8005dd6:	4640      	mov	r0, r8
 8005dd8:	4649      	mov	r1, r9
 8005dda:	f7fa fc05 	bl	80005e8 <__aeabi_dmul>
 8005dde:	e0a5      	b.n	8005f2c <__ieee754_log+0x29c>
 8005de0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005de4:	f7fa fa4a 	bl	800027c <__adddf3>
 8005de8:	4602      	mov	r2, r0
 8005dea:	460b      	mov	r3, r1
 8005dec:	4650      	mov	r0, sl
 8005dee:	4659      	mov	r1, fp
 8005df0:	f7fa fd24 	bl	800083c <__aeabi_ddiv>
 8005df4:	e9cd 0100 	strd	r0, r1, [sp]
 8005df8:	4620      	mov	r0, r4
 8005dfa:	f7fa fb8b 	bl	8000514 <__aeabi_i2d>
 8005dfe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005e02:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005e06:	4610      	mov	r0, r2
 8005e08:	4619      	mov	r1, r3
 8005e0a:	f7fa fbed 	bl	80005e8 <__aeabi_dmul>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e16:	f7fa fbe7 	bl	80005e8 <__aeabi_dmul>
 8005e1a:	a363      	add	r3, pc, #396	; (adr r3, 8005fa8 <__ieee754_log+0x318>)
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	4680      	mov	r8, r0
 8005e22:	4689      	mov	r9, r1
 8005e24:	f7fa fbe0 	bl	80005e8 <__aeabi_dmul>
 8005e28:	a361      	add	r3, pc, #388	; (adr r3, 8005fb0 <__ieee754_log+0x320>)
 8005e2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2e:	f7fa fa25 	bl	800027c <__adddf3>
 8005e32:	4642      	mov	r2, r8
 8005e34:	464b      	mov	r3, r9
 8005e36:	f7fa fbd7 	bl	80005e8 <__aeabi_dmul>
 8005e3a:	a35f      	add	r3, pc, #380	; (adr r3, 8005fb8 <__ieee754_log+0x328>)
 8005e3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e40:	f7fa fa1c 	bl	800027c <__adddf3>
 8005e44:	4642      	mov	r2, r8
 8005e46:	464b      	mov	r3, r9
 8005e48:	f7fa fbce 	bl	80005e8 <__aeabi_dmul>
 8005e4c:	a35c      	add	r3, pc, #368	; (adr r3, 8005fc0 <__ieee754_log+0x330>)
 8005e4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e52:	f7fa fa13 	bl	800027c <__adddf3>
 8005e56:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e5a:	f7fa fbc5 	bl	80005e8 <__aeabi_dmul>
 8005e5e:	a35a      	add	r3, pc, #360	; (adr r3, 8005fc8 <__ieee754_log+0x338>)
 8005e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e68:	4640      	mov	r0, r8
 8005e6a:	4649      	mov	r1, r9
 8005e6c:	f7fa fbbc 	bl	80005e8 <__aeabi_dmul>
 8005e70:	a357      	add	r3, pc, #348	; (adr r3, 8005fd0 <__ieee754_log+0x340>)
 8005e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e76:	f7fa fa01 	bl	800027c <__adddf3>
 8005e7a:	4642      	mov	r2, r8
 8005e7c:	464b      	mov	r3, r9
 8005e7e:	f7fa fbb3 	bl	80005e8 <__aeabi_dmul>
 8005e82:	a355      	add	r3, pc, #340	; (adr r3, 8005fd8 <__ieee754_log+0x348>)
 8005e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e88:	f7fa f9f8 	bl	800027c <__adddf3>
 8005e8c:	4642      	mov	r2, r8
 8005e8e:	464b      	mov	r3, r9
 8005e90:	f7fa fbaa 	bl	80005e8 <__aeabi_dmul>
 8005e94:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8005e98:	4602      	mov	r2, r0
 8005e9a:	460b      	mov	r3, r1
 8005e9c:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8005ea0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005ea4:	f7fa f9ea 	bl	800027c <__adddf3>
 8005ea8:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8005eac:	3551      	adds	r5, #81	; 0x51
 8005eae:	4335      	orrs	r5, r6
 8005eb0:	2d00      	cmp	r5, #0
 8005eb2:	4680      	mov	r8, r0
 8005eb4:	4689      	mov	r9, r1
 8005eb6:	dd48      	ble.n	8005f4a <__ieee754_log+0x2ba>
 8005eb8:	2200      	movs	r2, #0
 8005eba:	4b4d      	ldr	r3, [pc, #308]	; (8005ff0 <__ieee754_log+0x360>)
 8005ebc:	4650      	mov	r0, sl
 8005ebe:	4659      	mov	r1, fp
 8005ec0:	f7fa fb92 	bl	80005e8 <__aeabi_dmul>
 8005ec4:	4652      	mov	r2, sl
 8005ec6:	465b      	mov	r3, fp
 8005ec8:	f7fa fb8e 	bl	80005e8 <__aeabi_dmul>
 8005ecc:	4602      	mov	r2, r0
 8005ece:	460b      	mov	r3, r1
 8005ed0:	4606      	mov	r6, r0
 8005ed2:	460f      	mov	r7, r1
 8005ed4:	4640      	mov	r0, r8
 8005ed6:	4649      	mov	r1, r9
 8005ed8:	f7fa f9d0 	bl	800027c <__adddf3>
 8005edc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005ee0:	f7fa fb82 	bl	80005e8 <__aeabi_dmul>
 8005ee4:	4680      	mov	r8, r0
 8005ee6:	4689      	mov	r9, r1
 8005ee8:	b964      	cbnz	r4, 8005f04 <__ieee754_log+0x274>
 8005eea:	4602      	mov	r2, r0
 8005eec:	460b      	mov	r3, r1
 8005eee:	4630      	mov	r0, r6
 8005ef0:	4639      	mov	r1, r7
 8005ef2:	f7fa f9c1 	bl	8000278 <__aeabi_dsub>
 8005ef6:	4602      	mov	r2, r0
 8005ef8:	460b      	mov	r3, r1
 8005efa:	4650      	mov	r0, sl
 8005efc:	4659      	mov	r1, fp
 8005efe:	f7fa f9bb 	bl	8000278 <__aeabi_dsub>
 8005f02:	e6da      	b.n	8005cba <__ieee754_log+0x2a>
 8005f04:	a322      	add	r3, pc, #136	; (adr r3, 8005f90 <__ieee754_log+0x300>)
 8005f06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f0e:	f7fa fb6b 	bl	80005e8 <__aeabi_dmul>
 8005f12:	a321      	add	r3, pc, #132	; (adr r3, 8005f98 <__ieee754_log+0x308>)
 8005f14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f18:	4604      	mov	r4, r0
 8005f1a:	460d      	mov	r5, r1
 8005f1c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f20:	f7fa fb62 	bl	80005e8 <__aeabi_dmul>
 8005f24:	4642      	mov	r2, r8
 8005f26:	464b      	mov	r3, r9
 8005f28:	f7fa f9a8 	bl	800027c <__adddf3>
 8005f2c:	4602      	mov	r2, r0
 8005f2e:	460b      	mov	r3, r1
 8005f30:	4630      	mov	r0, r6
 8005f32:	4639      	mov	r1, r7
 8005f34:	f7fa f9a0 	bl	8000278 <__aeabi_dsub>
 8005f38:	4652      	mov	r2, sl
 8005f3a:	465b      	mov	r3, fp
 8005f3c:	f7fa f99c 	bl	8000278 <__aeabi_dsub>
 8005f40:	4602      	mov	r2, r0
 8005f42:	460b      	mov	r3, r1
 8005f44:	4620      	mov	r0, r4
 8005f46:	4629      	mov	r1, r5
 8005f48:	e7d9      	b.n	8005efe <__ieee754_log+0x26e>
 8005f4a:	4602      	mov	r2, r0
 8005f4c:	460b      	mov	r3, r1
 8005f4e:	4650      	mov	r0, sl
 8005f50:	4659      	mov	r1, fp
 8005f52:	f7fa f991 	bl	8000278 <__aeabi_dsub>
 8005f56:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005f5a:	f7fa fb45 	bl	80005e8 <__aeabi_dmul>
 8005f5e:	4606      	mov	r6, r0
 8005f60:	460f      	mov	r7, r1
 8005f62:	2c00      	cmp	r4, #0
 8005f64:	f43f af25 	beq.w	8005db2 <__ieee754_log+0x122>
 8005f68:	a309      	add	r3, pc, #36	; (adr r3, 8005f90 <__ieee754_log+0x300>)
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f72:	f7fa fb39 	bl	80005e8 <__aeabi_dmul>
 8005f76:	a308      	add	r3, pc, #32	; (adr r3, 8005f98 <__ieee754_log+0x308>)
 8005f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f7c:	4604      	mov	r4, r0
 8005f7e:	460d      	mov	r5, r1
 8005f80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005f84:	e729      	b.n	8005dda <__ieee754_log+0x14a>
 8005f86:	2000      	movs	r0, #0
 8005f88:	2100      	movs	r1, #0
 8005f8a:	e696      	b.n	8005cba <__ieee754_log+0x2a>
 8005f8c:	f3af 8000 	nop.w
 8005f90:	fee00000 	.word	0xfee00000
 8005f94:	3fe62e42 	.word	0x3fe62e42
 8005f98:	35793c76 	.word	0x35793c76
 8005f9c:	3dea39ef 	.word	0x3dea39ef
 8005fa0:	55555555 	.word	0x55555555
 8005fa4:	3fd55555 	.word	0x3fd55555
 8005fa8:	df3e5244 	.word	0xdf3e5244
 8005fac:	3fc2f112 	.word	0x3fc2f112
 8005fb0:	96cb03de 	.word	0x96cb03de
 8005fb4:	3fc74664 	.word	0x3fc74664
 8005fb8:	94229359 	.word	0x94229359
 8005fbc:	3fd24924 	.word	0x3fd24924
 8005fc0:	55555593 	.word	0x55555593
 8005fc4:	3fe55555 	.word	0x3fe55555
 8005fc8:	d078c69f 	.word	0xd078c69f
 8005fcc:	3fc39a09 	.word	0x3fc39a09
 8005fd0:	1d8e78af 	.word	0x1d8e78af
 8005fd4:	3fcc71c5 	.word	0x3fcc71c5
 8005fd8:	9997fa04 	.word	0x9997fa04
 8005fdc:	3fd99999 	.word	0x3fd99999
 8005fe0:	c3500000 	.word	0xc3500000
 8005fe4:	43500000 	.word	0x43500000
 8005fe8:	7fefffff 	.word	0x7fefffff
 8005fec:	3ff00000 	.word	0x3ff00000
 8005ff0:	3fe00000 	.word	0x3fe00000

08005ff4 <copysign>:
 8005ff4:	ec51 0b10 	vmov	r0, r1, d0
 8005ff8:	ee11 0a90 	vmov	r0, s3
 8005ffc:	ee10 2a10 	vmov	r2, s0
 8006000:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006004:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006008:	ea41 0300 	orr.w	r3, r1, r0
 800600c:	ec43 2b10 	vmov	d0, r2, r3
 8006010:	4770      	bx	lr
	...

08006014 <_init>:
 8006014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006016:	bf00      	nop
 8006018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800601a:	bc08      	pop	{r3}
 800601c:	469e      	mov	lr, r3
 800601e:	4770      	bx	lr

08006020 <_fini>:
 8006020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006022:	bf00      	nop
 8006024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006026:	bc08      	pop	{r3}
 8006028:	469e      	mov	lr, r3
 800602a:	4770      	bx	lr
