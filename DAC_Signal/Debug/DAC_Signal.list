
DAC_Signal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002258  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080023e8  080023e8  000123e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  0800245c  0800245c  0001245c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08002460  08002460  00012460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000070  20000000  08002464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
  7 .bss          000001cc  20000070  20000070  00020070  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  2000023c  2000023c  00020070  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 10 .debug_info   00015508  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000299a  00000000  00000000  000355a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000780b  00000000  00000000  00037f42  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a10  00000000  00000000  0003f750  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000db8  00000000  00000000  00040160  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005ad3  00000000  00000000  00040f18  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003d83  00000000  00000000  000469eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004a76e  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000211c  00000000  00000000  0004a7ec  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000070 	.word	0x20000070
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080023d0 	.word	0x080023d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000074 	.word	0x20000074
 80001cc:	080023d0 	.word	0x080023d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000270:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000272:	4a0e      	ldr	r2, [pc, #56]	; (80002ac <HAL_InitTick+0x3c>)
 8000274:	4b0e      	ldr	r3, [pc, #56]	; (80002b0 <HAL_InitTick+0x40>)
{
 8000276:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000278:	7818      	ldrb	r0, [r3, #0]
 800027a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800027e:	fbb3 f3f0 	udiv	r3, r3, r0
 8000282:	6810      	ldr	r0, [r2, #0]
 8000284:	fbb0 f0f3 	udiv	r0, r0, r3
 8000288:	f000 f88c 	bl	80003a4 <HAL_SYSTICK_Config>
 800028c:	4604      	mov	r4, r0
 800028e:	b958      	cbnz	r0, 80002a8 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000290:	2d0f      	cmp	r5, #15
 8000292:	d809      	bhi.n	80002a8 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000294:	4602      	mov	r2, r0
 8000296:	4629      	mov	r1, r5
 8000298:	f04f 30ff 	mov.w	r0, #4294967295
 800029c:	f000 f842 	bl	8000324 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80002a0:	4b04      	ldr	r3, [pc, #16]	; (80002b4 <HAL_InitTick+0x44>)
 80002a2:	4620      	mov	r0, r4
 80002a4:	601d      	str	r5, [r3, #0]
 80002a6:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 80002a8:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 80002aa:	bd38      	pop	{r3, r4, r5, pc}
 80002ac:	20000008 	.word	0x20000008
 80002b0:	20000000 	.word	0x20000000
 80002b4:	20000004 	.word	0x20000004

080002b8 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002b8:	4a07      	ldr	r2, [pc, #28]	; (80002d8 <HAL_Init+0x20>)
{
 80002ba:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80002bc:	6813      	ldr	r3, [r2, #0]
 80002be:	f043 0310 	orr.w	r3, r3, #16
 80002c2:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80002c4:	2003      	movs	r0, #3
 80002c6:	f000 f81b 	bl	8000300 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80002ca:	2000      	movs	r0, #0
 80002cc:	f7ff ffd0 	bl	8000270 <HAL_InitTick>
  HAL_MspInit();
 80002d0:	f001 fb02 	bl	80018d8 <HAL_MspInit>
}
 80002d4:	2000      	movs	r0, #0
 80002d6:	bd08      	pop	{r3, pc}
 80002d8:	40022000 	.word	0x40022000

080002dc <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80002dc:	4a03      	ldr	r2, [pc, #12]	; (80002ec <HAL_IncTick+0x10>)
 80002de:	4b04      	ldr	r3, [pc, #16]	; (80002f0 <HAL_IncTick+0x14>)
 80002e0:	6811      	ldr	r1, [r2, #0]
 80002e2:	781b      	ldrb	r3, [r3, #0]
 80002e4:	440b      	add	r3, r1
 80002e6:	6013      	str	r3, [r2, #0]
 80002e8:	4770      	bx	lr
 80002ea:	bf00      	nop
 80002ec:	20000100 	.word	0x20000100
 80002f0:	20000000 	.word	0x20000000

080002f4 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 80002f4:	4b01      	ldr	r3, [pc, #4]	; (80002fc <HAL_GetTick+0x8>)
 80002f6:	6818      	ldr	r0, [r3, #0]
}
 80002f8:	4770      	bx	lr
 80002fa:	bf00      	nop
 80002fc:	20000100 	.word	0x20000100

08000300 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000300:	4a07      	ldr	r2, [pc, #28]	; (8000320 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000302:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000304:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000308:	041b      	lsls	r3, r3, #16
 800030a:	0c1b      	lsrs	r3, r3, #16
 800030c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000310:	0200      	lsls	r0, r0, #8
 8000312:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000316:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 800031a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 800031c:	60d3      	str	r3, [r2, #12]
 800031e:	4770      	bx	lr
 8000320:	e000ed00 	.word	0xe000ed00

08000324 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000324:	4b17      	ldr	r3, [pc, #92]	; (8000384 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000326:	b530      	push	{r4, r5, lr}
 8000328:	68dc      	ldr	r4, [r3, #12]
 800032a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800032e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000332:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000334:	2b04      	cmp	r3, #4
 8000336:	bf28      	it	cs
 8000338:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800033a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800033c:	f04f 0501 	mov.w	r5, #1
 8000340:	fa05 f303 	lsl.w	r3, r5, r3
 8000344:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000348:	bf8c      	ite	hi
 800034a:	3c03      	subhi	r4, #3
 800034c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800034e:	4019      	ands	r1, r3
 8000350:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000352:	fa05 f404 	lsl.w	r4, r5, r4
 8000356:	3c01      	subs	r4, #1
 8000358:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 800035a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800035c:	ea42 0201 	orr.w	r2, r2, r1
 8000360:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000364:	bfaf      	iteee	ge
 8000366:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800036a:	f000 000f 	andlt.w	r0, r0, #15
 800036e:	4b06      	ldrlt	r3, [pc, #24]	; (8000388 <HAL_NVIC_SetPriority+0x64>)
 8000370:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000372:	bfa5      	ittet	ge
 8000374:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000378:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800037c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000380:	bd30      	pop	{r4, r5, pc}
 8000382:	bf00      	nop
 8000384:	e000ed00 	.word	0xe000ed00
 8000388:	e000ed14 	.word	0xe000ed14

0800038c <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 800038c:	0942      	lsrs	r2, r0, #5
 800038e:	2301      	movs	r3, #1
 8000390:	f000 001f 	and.w	r0, r0, #31
 8000394:	fa03 f000 	lsl.w	r0, r3, r0
 8000398:	4b01      	ldr	r3, [pc, #4]	; (80003a0 <HAL_NVIC_EnableIRQ+0x14>)
 800039a:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800039e:	4770      	bx	lr
 80003a0:	e000e100 	.word	0xe000e100

080003a4 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80003a4:	3801      	subs	r0, #1
 80003a6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80003aa:	d20a      	bcs.n	80003c2 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003ac:	4b06      	ldr	r3, [pc, #24]	; (80003c8 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003ae:	4a07      	ldr	r2, [pc, #28]	; (80003cc <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80003b0:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80003b2:	21f0      	movs	r1, #240	; 0xf0
 80003b4:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003b8:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003ba:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80003bc:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80003be:	601a      	str	r2, [r3, #0]
 80003c0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80003c2:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80003c4:	4770      	bx	lr
 80003c6:	bf00      	nop
 80003c8:	e000e010 	.word	0xe000e010
 80003cc:	e000ed00 	.word	0xe000ed00

080003d0 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 80003d0:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 80003d2:	4604      	mov	r4, r0
 80003d4:	b168      	cbz	r0, 80003f2 <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 80003d6:	7903      	ldrb	r3, [r0, #4]
 80003d8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80003dc:	b913      	cbnz	r3, 80003e4 <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 80003de:	7142      	strb	r2, [r0, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 80003e0:	f001 fa92 	bl	8001908 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80003e4:	2302      	movs	r3, #2
 80003e6:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80003e8:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80003ea:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80003ec:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 80003ee:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 80003f0:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 80003f2:	2001      	movs	r0, #1
}
 80003f4:	bd10      	pop	{r4, pc}

080003f6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 80003f6:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0U;
 80003f8:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 80003fa:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 80003fc:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t) (hdac->Instance);
 80003fe:	9001      	str	r0, [sp, #4]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8000400:	b941      	cbnz	r1, 8000414 <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000402:	9901      	ldr	r1, [sp, #4]
 8000404:	3108      	adds	r1, #8
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000406:	440a      	add	r2, r1
 8000408:	9201      	str	r2, [sp, #4]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800040a:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 800040c:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 800040e:	6013      	str	r3, [r2, #0]
}
 8000410:	b002      	add	sp, #8
 8000412:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000414:	9901      	ldr	r1, [sp, #4]
 8000416:	3114      	adds	r1, #20
 8000418:	e7f5      	b.n	8000406 <HAL_DAC_SetValue+0x10>
	...

0800041c <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 800041c:	7943      	ldrb	r3, [r0, #5]
 800041e:	2b01      	cmp	r3, #1
{
 8000420:	b570      	push	{r4, r5, r6, lr}
 8000422:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8000426:	d01b      	beq.n	8000460 <HAL_DAC_ConfigChannel+0x44>
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000428:	6805      	ldr	r5, [r0, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800042a:	7103      	strb	r3, [r0, #4]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 800042c:	4b11      	ldr	r3, [pc, #68]	; (8000474 <HAL_DAC_ConfigChannel+0x58>)
  tmpreg1 = hdac->Instance->CR;
 800042e:	682c      	ldr	r4, [r5, #0]
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000430:	429d      	cmp	r5, r3
 8000432:	680b      	ldr	r3, [r1, #0]
 8000434:	d116      	bne.n	8000464 <HAL_DAC_ConfigChannel+0x48>
 8000436:	b9aa      	cbnz	r2, 8000464 <HAL_DAC_ConfigChannel+0x48>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000438:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 800043c:	6849      	ldr	r1, [r1, #4]
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 800043e:	f024 040e 	bic.w	r4, r4, #14
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8000442:	430b      	orrs	r3, r1
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000444:	4093      	lsls	r3, r2
 8000446:	4323      	orrs	r3, r4
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000448:	602b      	str	r3, [r5, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 800044a:	682b      	ldr	r3, [r5, #0]
 800044c:	21c0      	movs	r1, #192	; 0xc0
 800044e:	fa01 f202 	lsl.w	r2, r1, r2
 8000452:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000456:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000458:	602a      	str	r2, [r5, #0]
  hdac->State = HAL_DAC_STATE_READY;
 800045a:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800045c:	2300      	movs	r3, #0
 800045e:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8000460:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 8000462:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8000464:	f640 76fe 	movw	r6, #4094	; 0xffe
 8000468:	4096      	lsls	r6, r2
 800046a:	ea24 0406 	bic.w	r4, r4, r6
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 800046e:	6889      	ldr	r1, [r1, #8]
 8000470:	e7e7      	b.n	8000442 <HAL_DAC_ConfigChannel+0x26>
 8000472:	bf00      	nop
 8000474:	40007400 	.word	0x40007400

08000478 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800047c:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 800047e:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000480:	f8df 8164 	ldr.w	r8, [pc, #356]	; 80005e8 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000484:	4a56      	ldr	r2, [pc, #344]	; (80005e0 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000486:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000488:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 800048c:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 800048e:	9c01      	ldr	r4, [sp, #4]
 8000490:	40dc      	lsrs	r4, r3
 8000492:	d102      	bne.n	800049a <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000494:	b005      	add	sp, #20
 8000496:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800049a:	2401      	movs	r4, #1
 800049c:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 80004a0:	9c01      	ldr	r4, [sp, #4]
 80004a2:	ea14 050a 	ands.w	r5, r4, sl
 80004a6:	f000 8093 	beq.w	80005d0 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80004aa:	684c      	ldr	r4, [r1, #4]
 80004ac:	f024 0b10 	bic.w	fp, r4, #16
 80004b0:	f1bb 0f02 	cmp.w	fp, #2
 80004b4:	d111      	bne.n	80004da <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 80004b6:	08df      	lsrs	r7, r3, #3
 80004b8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004bc:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80004c0:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80004c2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80004c6:	fa09 fc0e 	lsl.w	ip, r9, lr
 80004ca:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80004ce:	690e      	ldr	r6, [r1, #16]
 80004d0:	fa06 f60e 	lsl.w	r6, r6, lr
 80004d4:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 80004d8:	623e      	str	r6, [r7, #32]
 80004da:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004de:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80004e0:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004e2:	fa07 f70c 	lsl.w	r7, r7, ip
 80004e6:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004e8:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80004ec:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004ee:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004f2:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80004f6:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80004fa:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80004fe:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000500:	d811      	bhi.n	8000526 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000502:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000504:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000508:	68ce      	ldr	r6, [r1, #12]
 800050a:	fa06 fe0c 	lsl.w	lr, r6, ip
 800050e:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000512:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000514:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000516:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800051a:	f3c4 1600 	ubfx	r6, r4, #4, #1
 800051e:	409e      	lsls	r6, r3
 8000520:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000524:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000526:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000528:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800052a:	688e      	ldr	r6, [r1, #8]
 800052c:	fa06 f60c 	lsl.w	r6, r6, ip
 8000530:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000532:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000534:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000536:	d54b      	bpl.n	80005d0 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000538:	f8d8 6018 	ldr.w	r6, [r8, #24]
 800053c:	f046 0601 	orr.w	r6, r6, #1
 8000540:	f8c8 6018 	str.w	r6, [r8, #24]
 8000544:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000548:	f023 0703 	bic.w	r7, r3, #3
 800054c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000550:	f006 0601 	and.w	r6, r6, #1
 8000554:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000558:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800055a:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800055e:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000560:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000562:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000566:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800056a:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800056e:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000572:	d02f      	beq.n	80005d4 <HAL_GPIO_Init+0x15c>
 8000574:	4e1b      	ldr	r6, [pc, #108]	; (80005e4 <HAL_GPIO_Init+0x16c>)
 8000576:	42b0      	cmp	r0, r6
 8000578:	d02e      	beq.n	80005d8 <HAL_GPIO_Init+0x160>
 800057a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 800057e:	42b0      	cmp	r0, r6
 8000580:	d02c      	beq.n	80005dc <HAL_GPIO_Init+0x164>
 8000582:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000586:	42b0      	cmp	r0, r6
 8000588:	bf14      	ite	ne
 800058a:	2605      	movne	r6, #5
 800058c:	2603      	moveq	r6, #3
 800058e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000592:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000596:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000598:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800059a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800059c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80005a0:	bf0c      	ite	eq
 80005a2:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80005a4:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 80005a6:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 80005a8:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80005aa:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80005ae:	bf0c      	ite	eq
 80005b0:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80005b2:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 80005b4:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 80005b6:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80005b8:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80005bc:	bf0c      	ite	eq
 80005be:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80005c0:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 80005c2:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 80005c4:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80005c6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80005c8:	bf54      	ite	pl
 80005ca:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80005cc:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 80005ce:	60d6      	str	r6, [r2, #12]
    position++;
 80005d0:	3301      	adds	r3, #1
 80005d2:	e75c      	b.n	800048e <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80005d4:	2600      	movs	r6, #0
 80005d6:	e7da      	b.n	800058e <HAL_GPIO_Init+0x116>
 80005d8:	2601      	movs	r6, #1
 80005da:	e7d8      	b.n	800058e <HAL_GPIO_Init+0x116>
 80005dc:	2602      	movs	r6, #2
 80005de:	e7d6      	b.n	800058e <HAL_GPIO_Init+0x116>
 80005e0:	40010400 	.word	0x40010400
 80005e4:	48000400 	.word	0x48000400
 80005e8:	40021000 	.word	0x40021000

080005ec <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80005ec:	b10a      	cbz	r2, 80005f2 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80005ee:	6181      	str	r1, [r0, #24]
 80005f0:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80005f2:	6281      	str	r1, [r0, #40]	; 0x28
 80005f4:	4770      	bx	lr
	...

080005f8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80005f8:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80005fc:	4605      	mov	r5, r0
 80005fe:	b918      	cbnz	r0, 8000608 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000600:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000602:	b002      	add	sp, #8
 8000604:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000608:	6803      	ldr	r3, [r0, #0]
 800060a:	07da      	lsls	r2, r3, #31
 800060c:	d411      	bmi.n	8000632 <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800060e:	682b      	ldr	r3, [r5, #0]
 8000610:	079b      	lsls	r3, r3, #30
 8000612:	f100 8085 	bmi.w	8000720 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000616:	682b      	ldr	r3, [r5, #0]
 8000618:	071c      	lsls	r4, r3, #28
 800061a:	f100 80f6 	bmi.w	800080a <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800061e:	682b      	ldr	r3, [r5, #0]
 8000620:	0758      	lsls	r0, r3, #29
 8000622:	f100 813f 	bmi.w	80008a4 <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000626:	69ea      	ldr	r2, [r5, #28]
 8000628:	2a00      	cmp	r2, #0
 800062a:	f040 81d6 	bne.w	80009da <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 800062e:	2000      	movs	r0, #0
 8000630:	e7e7      	b.n	8000602 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000632:	4cba      	ldr	r4, [pc, #744]	; (800091c <HAL_RCC_OscConfig+0x324>)
 8000634:	6863      	ldr	r3, [r4, #4]
 8000636:	f003 030c 	and.w	r3, r3, #12
 800063a:	2b04      	cmp	r3, #4
 800063c:	d007      	beq.n	800064e <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800063e:	6863      	ldr	r3, [r4, #4]
 8000640:	f003 030c 	and.w	r3, r3, #12
 8000644:	2b08      	cmp	r3, #8
 8000646:	d116      	bne.n	8000676 <HAL_RCC_OscConfig+0x7e>
 8000648:	6863      	ldr	r3, [r4, #4]
 800064a:	03df      	lsls	r7, r3, #15
 800064c:	d513      	bpl.n	8000676 <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800064e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000652:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000656:	6821      	ldr	r1, [r4, #0]
 8000658:	fa93 f3a3 	rbit	r3, r3
 800065c:	fab3 f383 	clz	r3, r3
 8000660:	f003 031f 	and.w	r3, r3, #31
 8000664:	2201      	movs	r2, #1
 8000666:	fa02 f303 	lsl.w	r3, r2, r3
 800066a:	420b      	tst	r3, r1
 800066c:	d0cf      	beq.n	800060e <HAL_RCC_OscConfig+0x16>
 800066e:	686b      	ldr	r3, [r5, #4]
 8000670:	2b00      	cmp	r3, #0
 8000672:	d1cc      	bne.n	800060e <HAL_RCC_OscConfig+0x16>
 8000674:	e7c4      	b.n	8000600 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000676:	686a      	ldr	r2, [r5, #4]
 8000678:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 800067c:	d125      	bne.n	80006ca <HAL_RCC_OscConfig+0xd2>
 800067e:	6823      	ldr	r3, [r4, #0]
 8000680:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000684:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000686:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000688:	68a9      	ldr	r1, [r5, #8]
 800068a:	f023 030f 	bic.w	r3, r3, #15
 800068e:	430b      	orrs	r3, r1
 8000690:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000692:	b352      	cbz	r2, 80006ea <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000694:	f7ff fe2e 	bl	80002f4 <HAL_GetTick>
 8000698:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 800069c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800069e:	2701      	movs	r7, #1
 80006a0:	fa96 f3a6 	rbit	r3, r6
 80006a4:	6822      	ldr	r2, [r4, #0]
 80006a6:	fa96 f3a6 	rbit	r3, r6
 80006aa:	fab3 f383 	clz	r3, r3
 80006ae:	f003 031f 	and.w	r3, r3, #31
 80006b2:	fa07 f303 	lsl.w	r3, r7, r3
 80006b6:	4213      	tst	r3, r2
 80006b8:	d1a9      	bne.n	800060e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80006ba:	f7ff fe1b 	bl	80002f4 <HAL_GetTick>
 80006be:	eba0 0008 	sub.w	r0, r0, r8
 80006c2:	2864      	cmp	r0, #100	; 0x64
 80006c4:	d9ec      	bls.n	80006a0 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 80006c6:	2003      	movs	r0, #3
 80006c8:	e79b      	b.n	8000602 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006ca:	6823      	ldr	r3, [r4, #0]
 80006cc:	b932      	cbnz	r2, 80006dc <HAL_RCC_OscConfig+0xe4>
 80006ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006d2:	6023      	str	r3, [r4, #0]
 80006d4:	6823      	ldr	r3, [r4, #0]
 80006d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006da:	e7d3      	b.n	8000684 <HAL_RCC_OscConfig+0x8c>
 80006dc:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 80006e0:	d1f5      	bne.n	80006ce <HAL_RCC_OscConfig+0xd6>
 80006e2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006e6:	6023      	str	r3, [r4, #0]
 80006e8:	e7c9      	b.n	800067e <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 80006ea:	f7ff fe03 	bl	80002f4 <HAL_GetTick>
 80006ee:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 80006f2:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80006f4:	2701      	movs	r7, #1
 80006f6:	fa96 f3a6 	rbit	r3, r6
 80006fa:	6822      	ldr	r2, [r4, #0]
 80006fc:	fa96 f3a6 	rbit	r3, r6
 8000700:	fab3 f383 	clz	r3, r3
 8000704:	f003 031f 	and.w	r3, r3, #31
 8000708:	fa07 f303 	lsl.w	r3, r7, r3
 800070c:	4213      	tst	r3, r2
 800070e:	f43f af7e 	beq.w	800060e <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000712:	f7ff fdef 	bl	80002f4 <HAL_GetTick>
 8000716:	eba0 0008 	sub.w	r0, r0, r8
 800071a:	2864      	cmp	r0, #100	; 0x64
 800071c:	d9eb      	bls.n	80006f6 <HAL_RCC_OscConfig+0xfe>
 800071e:	e7d2      	b.n	80006c6 <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000720:	4c7e      	ldr	r4, [pc, #504]	; (800091c <HAL_RCC_OscConfig+0x324>)
 8000722:	6863      	ldr	r3, [r4, #4]
 8000724:	f013 0f0c 	tst.w	r3, #12
 8000728:	d007      	beq.n	800073a <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800072a:	6863      	ldr	r3, [r4, #4]
 800072c:	f003 030c 	and.w	r3, r3, #12
 8000730:	2b08      	cmp	r3, #8
 8000732:	d122      	bne.n	800077a <HAL_RCC_OscConfig+0x182>
 8000734:	6863      	ldr	r3, [r4, #4]
 8000736:	03de      	lsls	r6, r3, #15
 8000738:	d41f      	bmi.n	800077a <HAL_RCC_OscConfig+0x182>
 800073a:	2302      	movs	r3, #2
 800073c:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000740:	6821      	ldr	r1, [r4, #0]
 8000742:	fa93 f3a3 	rbit	r3, r3
 8000746:	fab3 f383 	clz	r3, r3
 800074a:	f003 031f 	and.w	r3, r3, #31
 800074e:	2201      	movs	r2, #1
 8000750:	fa02 f303 	lsl.w	r3, r2, r3
 8000754:	420b      	tst	r3, r1
 8000756:	d003      	beq.n	8000760 <HAL_RCC_OscConfig+0x168>
 8000758:	692b      	ldr	r3, [r5, #16]
 800075a:	4293      	cmp	r3, r2
 800075c:	f47f af50 	bne.w	8000600 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000760:	6821      	ldr	r1, [r4, #0]
 8000762:	23f8      	movs	r3, #248	; 0xf8
 8000764:	fa93 f3a3 	rbit	r3, r3
 8000768:	fab3 f283 	clz	r2, r3
 800076c:	696b      	ldr	r3, [r5, #20]
 800076e:	4093      	lsls	r3, r2
 8000770:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 8000774:	4313      	orrs	r3, r2
 8000776:	6023      	str	r3, [r4, #0]
 8000778:	e74d      	b.n	8000616 <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800077a:	692a      	ldr	r2, [r5, #16]
 800077c:	2601      	movs	r6, #1
 800077e:	b30a      	cbz	r2, 80007c4 <HAL_RCC_OscConfig+0x1cc>
 8000780:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 8000784:	fab3 f383 	clz	r3, r3
 8000788:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800078c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000790:	009b      	lsls	r3, r3, #2
 8000792:	2702      	movs	r7, #2
 8000794:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000796:	f7ff fdad 	bl	80002f4 <HAL_GetTick>
 800079a:	4680      	mov	r8, r0
 800079c:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80007a0:	6822      	ldr	r2, [r4, #0]
 80007a2:	fa97 f3a7 	rbit	r3, r7
 80007a6:	fab3 f383 	clz	r3, r3
 80007aa:	f003 031f 	and.w	r3, r3, #31
 80007ae:	fa06 f303 	lsl.w	r3, r6, r3
 80007b2:	4213      	tst	r3, r2
 80007b4:	d1d4      	bne.n	8000760 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007b6:	f7ff fd9d 	bl	80002f4 <HAL_GetTick>
 80007ba:	eba0 0008 	sub.w	r0, r0, r8
 80007be:	2802      	cmp	r0, #2
 80007c0:	d9ec      	bls.n	800079c <HAL_RCC_OscConfig+0x1a4>
 80007c2:	e780      	b.n	80006c6 <HAL_RCC_OscConfig+0xce>
 80007c4:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80007c8:	fab3 f383 	clz	r3, r3
 80007cc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80007d0:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80007d4:	009b      	lsls	r3, r3, #2
 80007d6:	2702      	movs	r7, #2
 80007d8:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80007da:	f7ff fd8b 	bl	80002f4 <HAL_GetTick>
 80007de:	4680      	mov	r8, r0
 80007e0:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007e4:	6822      	ldr	r2, [r4, #0]
 80007e6:	fa97 f3a7 	rbit	r3, r7
 80007ea:	fab3 f383 	clz	r3, r3
 80007ee:	f003 031f 	and.w	r3, r3, #31
 80007f2:	fa06 f303 	lsl.w	r3, r6, r3
 80007f6:	4213      	tst	r3, r2
 80007f8:	f43f af0d 	beq.w	8000616 <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007fc:	f7ff fd7a 	bl	80002f4 <HAL_GetTick>
 8000800:	eba0 0008 	sub.w	r0, r0, r8
 8000804:	2802      	cmp	r0, #2
 8000806:	d9eb      	bls.n	80007e0 <HAL_RCC_OscConfig+0x1e8>
 8000808:	e75d      	b.n	80006c6 <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800080a:	69aa      	ldr	r2, [r5, #24]
 800080c:	4e43      	ldr	r6, [pc, #268]	; (800091c <HAL_RCC_OscConfig+0x324>)
 800080e:	4944      	ldr	r1, [pc, #272]	; (8000920 <HAL_RCC_OscConfig+0x328>)
 8000810:	2401      	movs	r4, #1
 8000812:	b31a      	cbz	r2, 800085c <HAL_RCC_OscConfig+0x264>
 8000814:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 8000818:	fab3 f383 	clz	r3, r3
 800081c:	440b      	add	r3, r1
 800081e:	009b      	lsls	r3, r3, #2
 8000820:	2702      	movs	r7, #2
 8000822:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 8000824:	f7ff fd66 	bl	80002f4 <HAL_GetTick>
 8000828:	4680      	mov	r8, r0
 800082a:	fa97 f3a7 	rbit	r3, r7
 800082e:	fa97 f3a7 	rbit	r3, r7
 8000832:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000836:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000838:	fa97 f3a7 	rbit	r3, r7
 800083c:	fab3 f383 	clz	r3, r3
 8000840:	f003 031f 	and.w	r3, r3, #31
 8000844:	fa04 f303 	lsl.w	r3, r4, r3
 8000848:	4213      	tst	r3, r2
 800084a:	f47f aee8 	bne.w	800061e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800084e:	f7ff fd51 	bl	80002f4 <HAL_GetTick>
 8000852:	eba0 0008 	sub.w	r0, r0, r8
 8000856:	2802      	cmp	r0, #2
 8000858:	d9e7      	bls.n	800082a <HAL_RCC_OscConfig+0x232>
 800085a:	e734      	b.n	80006c6 <HAL_RCC_OscConfig+0xce>
 800085c:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8000860:	fab3 f383 	clz	r3, r3
 8000864:	440b      	add	r3, r1
 8000866:	009b      	lsls	r3, r3, #2
 8000868:	2702      	movs	r7, #2
 800086a:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 800086c:	f7ff fd42 	bl	80002f4 <HAL_GetTick>
 8000870:	4680      	mov	r8, r0
 8000872:	fa97 f3a7 	rbit	r3, r7
 8000876:	fa97 f3a7 	rbit	r3, r7
 800087a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800087e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8000880:	fa97 f3a7 	rbit	r3, r7
 8000884:	fab3 f383 	clz	r3, r3
 8000888:	f003 031f 	and.w	r3, r3, #31
 800088c:	fa04 f303 	lsl.w	r3, r4, r3
 8000890:	4213      	tst	r3, r2
 8000892:	f43f aec4 	beq.w	800061e <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000896:	f7ff fd2d 	bl	80002f4 <HAL_GetTick>
 800089a:	eba0 0008 	sub.w	r0, r0, r8
 800089e:	2802      	cmp	r0, #2
 80008a0:	d9e7      	bls.n	8000872 <HAL_RCC_OscConfig+0x27a>
 80008a2:	e710      	b.n	80006c6 <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80008a4:	4c1d      	ldr	r4, [pc, #116]	; (800091c <HAL_RCC_OscConfig+0x324>)
 80008a6:	69e3      	ldr	r3, [r4, #28]
 80008a8:	00d9      	lsls	r1, r3, #3
 80008aa:	d434      	bmi.n	8000916 <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 80008ac:	69e3      	ldr	r3, [r4, #28]
 80008ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008b2:	61e3      	str	r3, [r4, #28]
 80008b4:	69e3      	ldr	r3, [r4, #28]
 80008b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80008ba:	9301      	str	r3, [sp, #4]
 80008bc:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80008be:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80008c0:	4f18      	ldr	r7, [pc, #96]	; (8000924 <HAL_RCC_OscConfig+0x32c>)
 80008c2:	683b      	ldr	r3, [r7, #0]
 80008c4:	05da      	lsls	r2, r3, #23
 80008c6:	d52f      	bpl.n	8000928 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80008c8:	68eb      	ldr	r3, [r5, #12]
 80008ca:	2b01      	cmp	r3, #1
 80008cc:	d13d      	bne.n	800094a <HAL_RCC_OscConfig+0x352>
 80008ce:	6a23      	ldr	r3, [r4, #32]
 80008d0:	f043 0301 	orr.w	r3, r3, #1
 80008d4:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80008d6:	f7ff fd0d 	bl	80002f4 <HAL_GetTick>
 80008da:	2702      	movs	r7, #2
 80008dc:	4682      	mov	sl, r0
 80008de:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80008e0:	f04f 0801 	mov.w	r8, #1
 80008e4:	fa97 f3a7 	rbit	r3, r7
 80008e8:	fa97 f3a7 	rbit	r3, r7
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d06c      	beq.n	80009ca <HAL_RCC_OscConfig+0x3d2>
 80008f0:	6a22      	ldr	r2, [r4, #32]
 80008f2:	fa99 f3a9 	rbit	r3, r9
 80008f6:	fab3 f383 	clz	r3, r3
 80008fa:	f003 031f 	and.w	r3, r3, #31
 80008fe:	fa08 f303 	lsl.w	r3, r8, r3
 8000902:	4213      	tst	r3, r2
 8000904:	d058      	beq.n	80009b8 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 8000906:	2e00      	cmp	r6, #0
 8000908:	f43f ae8d 	beq.w	8000626 <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 800090c:	69e3      	ldr	r3, [r4, #28]
 800090e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000912:	61e3      	str	r3, [r4, #28]
 8000914:	e687      	b.n	8000626 <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 8000916:	2600      	movs	r6, #0
 8000918:	e7d2      	b.n	80008c0 <HAL_RCC_OscConfig+0x2c8>
 800091a:	bf00      	nop
 800091c:	40021000 	.word	0x40021000
 8000920:	10908120 	.word	0x10908120
 8000924:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000928:	683b      	ldr	r3, [r7, #0]
 800092a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800092e:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000930:	f7ff fce0 	bl	80002f4 <HAL_GetTick>
 8000934:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000936:	683b      	ldr	r3, [r7, #0]
 8000938:	05db      	lsls	r3, r3, #23
 800093a:	d4c5      	bmi.n	80008c8 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800093c:	f7ff fcda 	bl	80002f4 <HAL_GetTick>
 8000940:	eba0 0008 	sub.w	r0, r0, r8
 8000944:	2864      	cmp	r0, #100	; 0x64
 8000946:	d9f6      	bls.n	8000936 <HAL_RCC_OscConfig+0x33e>
 8000948:	e6bd      	b.n	80006c6 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800094a:	bb3b      	cbnz	r3, 800099c <HAL_RCC_OscConfig+0x3a4>
 800094c:	6a23      	ldr	r3, [r4, #32]
 800094e:	f023 0301 	bic.w	r3, r3, #1
 8000952:	6223      	str	r3, [r4, #32]
 8000954:	6a23      	ldr	r3, [r4, #32]
 8000956:	f023 0304 	bic.w	r3, r3, #4
 800095a:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 800095c:	f7ff fcca 	bl	80002f4 <HAL_GetTick>
 8000960:	2702      	movs	r7, #2
 8000962:	4682      	mov	sl, r0
 8000964:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000966:	f04f 0801 	mov.w	r8, #1
 800096a:	fa97 f3a7 	rbit	r3, r7
 800096e:	fa97 f3a7 	rbit	r3, r7
 8000972:	b373      	cbz	r3, 80009d2 <HAL_RCC_OscConfig+0x3da>
 8000974:	6a22      	ldr	r2, [r4, #32]
 8000976:	fa99 f3a9 	rbit	r3, r9
 800097a:	fab3 f383 	clz	r3, r3
 800097e:	f003 031f 	and.w	r3, r3, #31
 8000982:	fa08 f303 	lsl.w	r3, r8, r3
 8000986:	4213      	tst	r3, r2
 8000988:	d0bd      	beq.n	8000906 <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800098a:	f7ff fcb3 	bl	80002f4 <HAL_GetTick>
 800098e:	f241 3388 	movw	r3, #5000	; 0x1388
 8000992:	eba0 000a 	sub.w	r0, r0, sl
 8000996:	4298      	cmp	r0, r3
 8000998:	d9e7      	bls.n	800096a <HAL_RCC_OscConfig+0x372>
 800099a:	e694      	b.n	80006c6 <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800099c:	2b05      	cmp	r3, #5
 800099e:	6a23      	ldr	r3, [r4, #32]
 80009a0:	d103      	bne.n	80009aa <HAL_RCC_OscConfig+0x3b2>
 80009a2:	f043 0304 	orr.w	r3, r3, #4
 80009a6:	6223      	str	r3, [r4, #32]
 80009a8:	e791      	b.n	80008ce <HAL_RCC_OscConfig+0x2d6>
 80009aa:	f023 0301 	bic.w	r3, r3, #1
 80009ae:	6223      	str	r3, [r4, #32]
 80009b0:	6a23      	ldr	r3, [r4, #32]
 80009b2:	f023 0304 	bic.w	r3, r3, #4
 80009b6:	e78d      	b.n	80008d4 <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80009b8:	f7ff fc9c 	bl	80002f4 <HAL_GetTick>
 80009bc:	f241 3388 	movw	r3, #5000	; 0x1388
 80009c0:	eba0 000a 	sub.w	r0, r0, sl
 80009c4:	4298      	cmp	r0, r3
 80009c6:	d98d      	bls.n	80008e4 <HAL_RCC_OscConfig+0x2ec>
 80009c8:	e67d      	b.n	80006c6 <HAL_RCC_OscConfig+0xce>
 80009ca:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80009ce:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009d0:	e78f      	b.n	80008f2 <HAL_RCC_OscConfig+0x2fa>
 80009d2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009d6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80009d8:	e7cd      	b.n	8000976 <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80009da:	4c41      	ldr	r4, [pc, #260]	; (8000ae0 <HAL_RCC_OscConfig+0x4e8>)
 80009dc:	6863      	ldr	r3, [r4, #4]
 80009de:	f003 030c 	and.w	r3, r3, #12
 80009e2:	2b08      	cmp	r3, #8
 80009e4:	f43f ae0c 	beq.w	8000600 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80009e8:	2a02      	cmp	r2, #2
 80009ea:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80009ee:	d152      	bne.n	8000a96 <HAL_RCC_OscConfig+0x49e>
 80009f0:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80009f4:	fab3 f383 	clz	r3, r3
 80009f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80009fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a00:	009b      	lsls	r3, r3, #2
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a06:	f7ff fc75 	bl	80002f4 <HAL_GetTick>
 8000a0a:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 8000a0e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a10:	2601      	movs	r6, #1
 8000a12:	fa97 f3a7 	rbit	r3, r7
 8000a16:	6822      	ldr	r2, [r4, #0]
 8000a18:	fa97 f3a7 	rbit	r3, r7
 8000a1c:	fab3 f383 	clz	r3, r3
 8000a20:	f003 031f 	and.w	r3, r3, #31
 8000a24:	fa06 f303 	lsl.w	r3, r6, r3
 8000a28:	4213      	tst	r3, r2
 8000a2a:	d12d      	bne.n	8000a88 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000a2c:	6862      	ldr	r2, [r4, #4]
 8000a2e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8000a30:	6a29      	ldr	r1, [r5, #32]
 8000a32:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 8000a36:	430b      	orrs	r3, r1
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	6063      	str	r3, [r4, #4]
 8000a3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a40:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000a44:	fab3 f383 	clz	r3, r3
 8000a48:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a4c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000a50:	009b      	lsls	r3, r3, #2
 8000a52:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000a56:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000a58:	f7ff fc4c 	bl	80002f4 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a5c:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8000a5e:	4607      	mov	r7, r0
 8000a60:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000a64:	6822      	ldr	r2, [r4, #0]
 8000a66:	fa95 f3a5 	rbit	r3, r5
 8000a6a:	fab3 f383 	clz	r3, r3
 8000a6e:	f003 031f 	and.w	r3, r3, #31
 8000a72:	fa06 f303 	lsl.w	r3, r6, r3
 8000a76:	4213      	tst	r3, r2
 8000a78:	f47f add9 	bne.w	800062e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a7c:	f7ff fc3a 	bl	80002f4 <HAL_GetTick>
 8000a80:	1bc0      	subs	r0, r0, r7
 8000a82:	2802      	cmp	r0, #2
 8000a84:	d9ec      	bls.n	8000a60 <HAL_RCC_OscConfig+0x468>
 8000a86:	e61e      	b.n	80006c6 <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000a88:	f7ff fc34 	bl	80002f4 <HAL_GetTick>
 8000a8c:	eba0 0008 	sub.w	r0, r0, r8
 8000a90:	2802      	cmp	r0, #2
 8000a92:	d9be      	bls.n	8000a12 <HAL_RCC_OscConfig+0x41a>
 8000a94:	e617      	b.n	80006c6 <HAL_RCC_OscConfig+0xce>
 8000a96:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a9a:	fab3 f383 	clz	r3, r3
 8000a9e:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000aa2:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8000aa6:	009b      	lsls	r3, r3, #2
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000aac:	f7ff fc22 	bl	80002f4 <HAL_GetTick>
 8000ab0:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 8000ab4:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000ab6:	2601      	movs	r6, #1
 8000ab8:	fa95 f3a5 	rbit	r3, r5
 8000abc:	6822      	ldr	r2, [r4, #0]
 8000abe:	fa95 f3a5 	rbit	r3, r5
 8000ac2:	fab3 f383 	clz	r3, r3
 8000ac6:	f003 031f 	and.w	r3, r3, #31
 8000aca:	fa06 f303 	lsl.w	r3, r6, r3
 8000ace:	4213      	tst	r3, r2
 8000ad0:	f43f adad 	beq.w	800062e <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000ad4:	f7ff fc0e 	bl	80002f4 <HAL_GetTick>
 8000ad8:	1bc0      	subs	r0, r0, r7
 8000ada:	2802      	cmp	r0, #2
 8000adc:	d9ec      	bls.n	8000ab8 <HAL_RCC_OscConfig+0x4c0>
 8000ade:	e5f2      	b.n	80006c6 <HAL_RCC_OscConfig+0xce>
 8000ae0:	40021000 	.word	0x40021000

08000ae4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8000ae4:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 8000ae6:	4c13      	ldr	r4, [pc, #76]	; (8000b34 <HAL_RCC_GetSysClockFreq+0x50>)
 8000ae8:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8000aea:	f001 030c 	and.w	r3, r1, #12
 8000aee:	2b08      	cmp	r3, #8
 8000af0:	d11e      	bne.n	8000b30 <HAL_RCC_GetSysClockFreq+0x4c>
 8000af2:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 8000af6:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8000afa:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 8000afe:	fab3 f383 	clz	r3, r3
 8000b02:	fa22 f303 	lsr.w	r3, r2, r3
 8000b06:	4a0c      	ldr	r2, [pc, #48]	; (8000b38 <HAL_RCC_GetSysClockFreq+0x54>)
 8000b08:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8000b0a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000b0c:	220f      	movs	r2, #15
 8000b0e:	fa92 f2a2 	rbit	r2, r2
 8000b12:	fab2 f282 	clz	r2, r2
 8000b16:	f003 030f 	and.w	r3, r3, #15
 8000b1a:	40d3      	lsrs	r3, r2
 8000b1c:	4a07      	ldr	r2, [pc, #28]	; (8000b3c <HAL_RCC_GetSysClockFreq+0x58>)
 8000b1e:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 8000b20:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b22:	bf4a      	itet	mi
 8000b24:	4b06      	ldrmi	r3, [pc, #24]	; (8000b40 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000b26:	4b07      	ldrpl	r3, [pc, #28]	; (8000b44 <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8000b28:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8000b2c:	4358      	muls	r0, r3
 8000b2e:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000b30:	4803      	ldr	r0, [pc, #12]	; (8000b40 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8000b32:	bd10      	pop	{r4, pc}
 8000b34:	40021000 	.word	0x40021000
 8000b38:	080023e8 	.word	0x080023e8
 8000b3c:	080023f8 	.word	0x080023f8
 8000b40:	007a1200 	.word	0x007a1200
 8000b44:	003d0900 	.word	0x003d0900

08000b48 <HAL_RCC_ClockConfig>:
{
 8000b48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000b4c:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8000b4e:	4604      	mov	r4, r0
 8000b50:	b910      	cbnz	r0, 8000b58 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8000b52:	2001      	movs	r0, #1
 8000b54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8000b58:	4a4c      	ldr	r2, [pc, #304]	; (8000c8c <HAL_RCC_ClockConfig+0x144>)
 8000b5a:	6813      	ldr	r3, [r2, #0]
 8000b5c:	f003 0307 	and.w	r3, r3, #7
 8000b60:	428b      	cmp	r3, r1
 8000b62:	d32e      	bcc.n	8000bc2 <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000b64:	6822      	ldr	r2, [r4, #0]
 8000b66:	0791      	lsls	r1, r2, #30
 8000b68:	d436      	bmi.n	8000bd8 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000b6a:	07d2      	lsls	r2, r2, #31
 8000b6c:	d43c      	bmi.n	8000be8 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8000b6e:	4a47      	ldr	r2, [pc, #284]	; (8000c8c <HAL_RCC_ClockConfig+0x144>)
 8000b70:	6813      	ldr	r3, [r2, #0]
 8000b72:	f003 0307 	and.w	r3, r3, #7
 8000b76:	429d      	cmp	r5, r3
 8000b78:	d375      	bcc.n	8000c66 <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000b7a:	6822      	ldr	r2, [r4, #0]
 8000b7c:	4d44      	ldr	r5, [pc, #272]	; (8000c90 <HAL_RCC_ClockConfig+0x148>)
 8000b7e:	f012 0f04 	tst.w	r2, #4
 8000b82:	d17c      	bne.n	8000c7e <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000b84:	0713      	lsls	r3, r2, #28
 8000b86:	d506      	bpl.n	8000b96 <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000b88:	686b      	ldr	r3, [r5, #4]
 8000b8a:	6922      	ldr	r2, [r4, #16]
 8000b8c:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000b90:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8000b94:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000b96:	f7ff ffa5 	bl	8000ae4 <HAL_RCC_GetSysClockFreq>
 8000b9a:	686b      	ldr	r3, [r5, #4]
 8000b9c:	22f0      	movs	r2, #240	; 0xf0
 8000b9e:	fa92 f2a2 	rbit	r2, r2
 8000ba2:	fab2 f282 	clz	r2, r2
 8000ba6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000baa:	40d3      	lsrs	r3, r2
 8000bac:	4a39      	ldr	r2, [pc, #228]	; (8000c94 <HAL_RCC_ClockConfig+0x14c>)
 8000bae:	5cd3      	ldrb	r3, [r2, r3]
 8000bb0:	40d8      	lsrs	r0, r3
 8000bb2:	4b39      	ldr	r3, [pc, #228]	; (8000c98 <HAL_RCC_ClockConfig+0x150>)
 8000bb4:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000bb6:	2000      	movs	r0, #0
 8000bb8:	f7ff fb5a 	bl	8000270 <HAL_InitTick>
  return HAL_OK;
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000bc2:	6813      	ldr	r3, [r2, #0]
 8000bc4:	f023 0307 	bic.w	r3, r3, #7
 8000bc8:	430b      	orrs	r3, r1
 8000bca:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000bcc:	6813      	ldr	r3, [r2, #0]
 8000bce:	f003 0307 	and.w	r3, r3, #7
 8000bd2:	4299      	cmp	r1, r3
 8000bd4:	d1bd      	bne.n	8000b52 <HAL_RCC_ClockConfig+0xa>
 8000bd6:	e7c5      	b.n	8000b64 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000bd8:	492d      	ldr	r1, [pc, #180]	; (8000c90 <HAL_RCC_ClockConfig+0x148>)
 8000bda:	68a0      	ldr	r0, [r4, #8]
 8000bdc:	684b      	ldr	r3, [r1, #4]
 8000bde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000be2:	4303      	orrs	r3, r0
 8000be4:	604b      	str	r3, [r1, #4]
 8000be6:	e7c0      	b.n	8000b6a <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000be8:	6862      	ldr	r2, [r4, #4]
 8000bea:	4e29      	ldr	r6, [pc, #164]	; (8000c90 <HAL_RCC_ClockConfig+0x148>)
 8000bec:	2a01      	cmp	r2, #1
 8000bee:	d127      	bne.n	8000c40 <HAL_RCC_ClockConfig+0xf8>
 8000bf0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000bf4:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000bf8:	6831      	ldr	r1, [r6, #0]
 8000bfa:	fa93 f3a3 	rbit	r3, r3
 8000bfe:	fab3 f383 	clz	r3, r3
 8000c02:	f003 031f 	and.w	r3, r3, #31
 8000c06:	fa02 f303 	lsl.w	r3, r2, r3
 8000c0a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c0c:	d0a1      	beq.n	8000b52 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000c0e:	6873      	ldr	r3, [r6, #4]
 8000c10:	f023 0303 	bic.w	r3, r3, #3
 8000c14:	431a      	orrs	r2, r3
 8000c16:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 8000c18:	f7ff fb6c 	bl	80002f4 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c1c:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8000c20:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8000c22:	6873      	ldr	r3, [r6, #4]
 8000c24:	6862      	ldr	r2, [r4, #4]
 8000c26:	f003 030c 	and.w	r3, r3, #12
 8000c2a:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8000c2e:	d09e      	beq.n	8000b6e <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000c30:	f7ff fb60 	bl	80002f4 <HAL_GetTick>
 8000c34:	1bc0      	subs	r0, r0, r7
 8000c36:	4540      	cmp	r0, r8
 8000c38:	d9f3      	bls.n	8000c22 <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8000c3a:	2003      	movs	r0, #3
}
 8000c3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000c40:	2a02      	cmp	r2, #2
 8000c42:	bf0c      	ite	eq
 8000c44:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8000c48:	2302      	movne	r3, #2
 8000c4a:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000c4e:	6830      	ldr	r0, [r6, #0]
 8000c50:	fa93 f3a3 	rbit	r3, r3
 8000c54:	fab3 f383 	clz	r3, r3
 8000c58:	f003 031f 	and.w	r3, r3, #31
 8000c5c:	2101      	movs	r1, #1
 8000c5e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c62:	4203      	tst	r3, r0
 8000c64:	e7d2      	b.n	8000c0c <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c66:	6813      	ldr	r3, [r2, #0]
 8000c68:	f023 0307 	bic.w	r3, r3, #7
 8000c6c:	432b      	orrs	r3, r5
 8000c6e:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8000c70:	6813      	ldr	r3, [r2, #0]
 8000c72:	f003 0307 	and.w	r3, r3, #7
 8000c76:	429d      	cmp	r5, r3
 8000c78:	f47f af6b 	bne.w	8000b52 <HAL_RCC_ClockConfig+0xa>
 8000c7c:	e77d      	b.n	8000b7a <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000c7e:	686b      	ldr	r3, [r5, #4]
 8000c80:	68e1      	ldr	r1, [r4, #12]
 8000c82:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000c86:	430b      	orrs	r3, r1
 8000c88:	606b      	str	r3, [r5, #4]
 8000c8a:	e77b      	b.n	8000b84 <HAL_RCC_ClockConfig+0x3c>
 8000c8c:	40022000 	.word	0x40022000
 8000c90:	40021000 	.word	0x40021000
 8000c94:	0800240f 	.word	0x0800240f
 8000c98:	20000008 	.word	0x20000008

08000c9c <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000c9c:	4b08      	ldr	r3, [pc, #32]	; (8000cc0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000c9e:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000ca2:	685b      	ldr	r3, [r3, #4]
 8000ca4:	fa92 f2a2 	rbit	r2, r2
 8000ca8:	fab2 f282 	clz	r2, r2
 8000cac:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000cb0:	40d3      	lsrs	r3, r2
 8000cb2:	4a04      	ldr	r2, [pc, #16]	; (8000cc4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000cb4:	5cd3      	ldrb	r3, [r2, r3]
 8000cb6:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000cb8:	6810      	ldr	r0, [r2, #0]
}    
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	4770      	bx	lr
 8000cbe:	bf00      	nop
 8000cc0:	40021000 	.word	0x40021000
 8000cc4:	0800241f 	.word	0x0800241f
 8000cc8:	20000008 	.word	0x20000008

08000ccc <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000ccc:	4b08      	ldr	r3, [pc, #32]	; (8000cf0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000cce:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	fa92 f2a2 	rbit	r2, r2
 8000cd8:	fab2 f282 	clz	r2, r2
 8000cdc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000ce0:	40d3      	lsrs	r3, r2
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000ce4:	5cd3      	ldrb	r3, [r2, r3]
 8000ce6:	4a04      	ldr	r2, [pc, #16]	; (8000cf8 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000ce8:	6810      	ldr	r0, [r2, #0]
} 
 8000cea:	40d8      	lsrs	r0, r3
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	40021000 	.word	0x40021000
 8000cf4:	0800241f 	.word	0x0800241f
 8000cf8:	20000008 	.word	0x20000008

08000cfc <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000cfc:	6803      	ldr	r3, [r0, #0]
{
 8000cfe:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d02:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8000d04:	03d8      	lsls	r0, r3, #15
 8000d06:	d520      	bpl.n	8000d4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000d08:	4c50      	ldr	r4, [pc, #320]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000d0a:	69e3      	ldr	r3, [r4, #28]
 8000d0c:	00d9      	lsls	r1, r3, #3
 8000d0e:	d444      	bmi.n	8000d9a <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000d10:	69e3      	ldr	r3, [r4, #28]
 8000d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d16:	61e3      	str	r3, [r4, #28]
 8000d18:	69e3      	ldr	r3, [r4, #28]
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1e:	9301      	str	r3, [sp, #4]
 8000d20:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8000d22:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000d24:	4f4a      	ldr	r7, [pc, #296]	; (8000e50 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	05da      	lsls	r2, r3, #23
 8000d2a:	d538      	bpl.n	8000d9e <HAL_RCCEx_PeriphCLKConfig+0xa2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8000d2c:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000d2e:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8000d32:	d148      	bne.n	8000dc6 <HAL_RCCEx_PeriphCLKConfig+0xca>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8000d34:	6a23      	ldr	r3, [r4, #32]
 8000d36:	686a      	ldr	r2, [r5, #4]
 8000d38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8000d40:	b11e      	cbz	r6, 8000d4a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000d42:	69e3      	ldr	r3, [r4, #28]
 8000d44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000d48:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8000d4a:	6828      	ldr	r0, [r5, #0]
 8000d4c:	07c1      	lsls	r1, r0, #31
 8000d4e:	d506      	bpl.n	8000d5e <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8000d50:	4a3e      	ldr	r2, [pc, #248]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000d52:	68a9      	ldr	r1, [r5, #8]
 8000d54:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d56:	f023 0303 	bic.w	r3, r3, #3
 8000d5a:	430b      	orrs	r3, r1
 8000d5c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8000d5e:	0682      	lsls	r2, r0, #26
 8000d60:	d506      	bpl.n	8000d70 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8000d62:	4a3a      	ldr	r2, [pc, #232]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000d64:	68e9      	ldr	r1, [r5, #12]
 8000d66:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d68:	f023 0310 	bic.w	r3, r3, #16
 8000d6c:	430b      	orrs	r3, r1
 8000d6e:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8000d70:	0603      	lsls	r3, r0, #24
 8000d72:	d506      	bpl.n	8000d82 <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8000d74:	4a35      	ldr	r2, [pc, #212]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000d76:	6929      	ldr	r1, [r5, #16]
 8000d78:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8000d7a:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8000d7e:	430b      	orrs	r3, r1
 8000d80:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8000d82:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 8000d86:	d01b      	beq.n	8000dc0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8000d88:	4a30      	ldr	r2, [pc, #192]	; (8000e4c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8000d8a:	6969      	ldr	r1, [r5, #20]
 8000d8c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8000d8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000d92:	430b      	orrs	r3, r1
 8000d94:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8000d96:	2000      	movs	r0, #0
 8000d98:	e012      	b.n	8000dc0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    FlagStatus       pwrclkchanged = RESET;
 8000d9a:	2600      	movs	r6, #0
 8000d9c:	e7c2      	b.n	8000d24 <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000da4:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8000da6:	f7ff faa5 	bl	80002f4 <HAL_GetTick>
 8000daa:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000dac:	683b      	ldr	r3, [r7, #0]
 8000dae:	05db      	lsls	r3, r3, #23
 8000db0:	d4bc      	bmi.n	8000d2c <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000db2:	f7ff fa9f 	bl	80002f4 <HAL_GetTick>
 8000db6:	eba0 0008 	sub.w	r0, r0, r8
 8000dba:	2864      	cmp	r0, #100	; 0x64
 8000dbc:	d9f6      	bls.n	8000dac <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 8000dbe:	2003      	movs	r0, #3
}
 8000dc0:	b002      	add	sp, #8
 8000dc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8000dc6:	686a      	ldr	r2, [r5, #4]
 8000dc8:	f402 7240 	and.w	r2, r2, #768	; 0x300
 8000dcc:	4293      	cmp	r3, r2
 8000dce:	d0b1      	beq.n	8000d34 <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8000dd0:	6a21      	ldr	r1, [r4, #32]
 8000dd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000dd6:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 8000dda:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 8000dde:	f8df e074 	ldr.w	lr, [pc, #116]	; 8000e54 <HAL_RCCEx_PeriphCLKConfig+0x158>
 8000de2:	fab2 f282 	clz	r2, r2
 8000de6:	4472      	add	r2, lr
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	2701      	movs	r7, #1
 8000dec:	6017      	str	r7, [r2, #0]
 8000dee:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 8000df2:	fab3 f383 	clz	r3, r3
 8000df6:	4473      	add	r3, lr
 8000df8:	009b      	lsls	r3, r3, #2
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 8000dfe:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8000e00:	07c8      	lsls	r0, r1, #31
 8000e02:	d597      	bpl.n	8000d34 <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 8000e04:	f7ff fa76 	bl	80002f4 <HAL_GetTick>
 8000e08:	f04f 0802 	mov.w	r8, #2
 8000e0c:	4682      	mov	sl, r0
 8000e0e:	46c1      	mov	r9, r8
 8000e10:	fa98 f3a8 	rbit	r3, r8
 8000e14:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e18:	b19b      	cbz	r3, 8000e42 <HAL_RCCEx_PeriphCLKConfig+0x146>
 8000e1a:	6a22      	ldr	r2, [r4, #32]
 8000e1c:	fa99 f3a9 	rbit	r3, r9
 8000e20:	fab3 f383 	clz	r3, r3
 8000e24:	f003 031f 	and.w	r3, r3, #31
 8000e28:	fa07 f303 	lsl.w	r3, r7, r3
 8000e2c:	4213      	tst	r3, r2
 8000e2e:	d181      	bne.n	8000d34 <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8000e30:	f7ff fa60 	bl	80002f4 <HAL_GetTick>
 8000e34:	f241 3388 	movw	r3, #5000	; 0x1388
 8000e38:	eba0 000a 	sub.w	r0, r0, sl
 8000e3c:	4298      	cmp	r0, r3
 8000e3e:	d9e7      	bls.n	8000e10 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8000e40:	e7bd      	b.n	8000dbe <HAL_RCCEx_PeriphCLKConfig+0xc2>
 8000e42:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000e46:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8000e48:	e7e8      	b.n	8000e1c <HAL_RCCEx_PeriphCLKConfig+0x120>
 8000e4a:	bf00      	nop
 8000e4c:	40021000 	.word	0x40021000
 8000e50:	40007000 	.word	0x40007000
 8000e54:	10908100 	.word	0x10908100

08000e58 <HAL_TIM_PeriodElapsedCallback>:
 8000e58:	4770      	bx	lr

08000e5a <HAL_TIM_OC_DelayElapsedCallback>:
 8000e5a:	4770      	bx	lr

08000e5c <HAL_TIM_IC_CaptureCallback>:
 8000e5c:	4770      	bx	lr

08000e5e <HAL_TIM_PWM_PulseFinishedCallback>:
 8000e5e:	4770      	bx	lr

08000e60 <HAL_TIM_TriggerCallback>:
 8000e60:	4770      	bx	lr

08000e62 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e62:	6803      	ldr	r3, [r0, #0]
 8000e64:	691a      	ldr	r2, [r3, #16]
 8000e66:	0791      	lsls	r1, r2, #30
{
 8000e68:	b510      	push	{r4, lr}
 8000e6a:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8000e6c:	d50f      	bpl.n	8000e8e <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8000e6e:	68da      	ldr	r2, [r3, #12]
 8000e70:	0792      	lsls	r2, r2, #30
 8000e72:	d50c      	bpl.n	8000e8e <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8000e74:	f06f 0202 	mvn.w	r2, #2
 8000e78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e7a:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e7c:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e7e:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8000e80:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8000e82:	f000 8085 	beq.w	8000f90 <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8000e86:	f7ff ffe9 	bl	8000e5c <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8000e8e:	6823      	ldr	r3, [r4, #0]
 8000e90:	691a      	ldr	r2, [r3, #16]
 8000e92:	0752      	lsls	r2, r2, #29
 8000e94:	d510      	bpl.n	8000eb8 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8000e96:	68da      	ldr	r2, [r3, #12]
 8000e98:	0750      	lsls	r0, r2, #29
 8000e9a:	d50d      	bpl.n	8000eb8 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8000e9c:	f06f 0204 	mvn.w	r2, #4
 8000ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ea2:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000ea4:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000ea6:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8000eaa:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000eac:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8000eae:	d075      	beq.n	8000f9c <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 8000eb0:	f7ff ffd4 	bl	8000e5c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8000eb8:	6823      	ldr	r3, [r4, #0]
 8000eba:	691a      	ldr	r2, [r3, #16]
 8000ebc:	0711      	lsls	r1, r2, #28
 8000ebe:	d50f      	bpl.n	8000ee0 <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8000ec0:	68da      	ldr	r2, [r3, #12]
 8000ec2:	0712      	lsls	r2, r2, #28
 8000ec4:	d50c      	bpl.n	8000ee0 <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8000ec6:	f06f 0208 	mvn.w	r2, #8
 8000eca:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ecc:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000ece:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ed0:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8000ed2:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000ed4:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8000ed6:	d067      	beq.n	8000fa8 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 8000ed8:	f7ff ffc0 	bl	8000e5c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000edc:	2300      	movs	r3, #0
 8000ede:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8000ee0:	6823      	ldr	r3, [r4, #0]
 8000ee2:	691a      	ldr	r2, [r3, #16]
 8000ee4:	06d0      	lsls	r0, r2, #27
 8000ee6:	d510      	bpl.n	8000f0a <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8000ee8:	68da      	ldr	r2, [r3, #12]
 8000eea:	06d1      	lsls	r1, r2, #27
 8000eec:	d50d      	bpl.n	8000f0a <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8000eee:	f06f 0210 	mvn.w	r2, #16
 8000ef2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ef4:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000ef6:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000ef8:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8000efc:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8000efe:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8000f00:	d058      	beq.n	8000fb4 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 8000f02:	f7ff ffab 	bl	8000e5c <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8000f06:	2300      	movs	r3, #0
 8000f08:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8000f0a:	6823      	ldr	r3, [r4, #0]
 8000f0c:	691a      	ldr	r2, [r3, #16]
 8000f0e:	07d2      	lsls	r2, r2, #31
 8000f10:	d508      	bpl.n	8000f24 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8000f12:	68da      	ldr	r2, [r3, #12]
 8000f14:	07d0      	lsls	r0, r2, #31
 8000f16:	d505      	bpl.n	8000f24 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8000f18:	f06f 0201 	mvn.w	r2, #1
 8000f1c:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8000f1e:	4620      	mov	r0, r4
 8000f20:	f7ff ff9a 	bl	8000e58 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8000f24:	6823      	ldr	r3, [r4, #0]
 8000f26:	691a      	ldr	r2, [r3, #16]
 8000f28:	0611      	lsls	r1, r2, #24
 8000f2a:	d508      	bpl.n	8000f3e <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000f2c:	68da      	ldr	r2, [r3, #12]
 8000f2e:	0612      	lsls	r2, r2, #24
 8000f30:	d505      	bpl.n	8000f3e <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8000f32:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8000f36:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8000f38:	4620      	mov	r0, r4
 8000f3a:	f000 f98a 	bl	8001252 <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8000f3e:	6823      	ldr	r3, [r4, #0]
 8000f40:	691a      	ldr	r2, [r3, #16]
 8000f42:	05d0      	lsls	r0, r2, #23
 8000f44:	d508      	bpl.n	8000f58 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8000f46:	68da      	ldr	r2, [r3, #12]
 8000f48:	0611      	lsls	r1, r2, #24
 8000f4a:	d505      	bpl.n	8000f58 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8000f4c:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8000f50:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 8000f52:	4620      	mov	r0, r4
 8000f54:	f000 f97e 	bl	8001254 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8000f58:	6823      	ldr	r3, [r4, #0]
 8000f5a:	691a      	ldr	r2, [r3, #16]
 8000f5c:	0652      	lsls	r2, r2, #25
 8000f5e:	d508      	bpl.n	8000f72 <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8000f60:	68da      	ldr	r2, [r3, #12]
 8000f62:	0650      	lsls	r0, r2, #25
 8000f64:	d505      	bpl.n	8000f72 <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8000f66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8000f6a:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	f7ff ff77 	bl	8000e60 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8000f72:	6823      	ldr	r3, [r4, #0]
 8000f74:	691a      	ldr	r2, [r3, #16]
 8000f76:	0691      	lsls	r1, r2, #26
 8000f78:	d522      	bpl.n	8000fc0 <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8000f7a:	68da      	ldr	r2, [r3, #12]
 8000f7c:	0692      	lsls	r2, r2, #26
 8000f7e:	d51f      	bpl.n	8000fc0 <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000f80:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8000f84:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8000f86:	611a      	str	r2, [r3, #16]
    }
  }
}
 8000f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8000f8c:	f000 b960 	b.w	8001250 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f90:	f7ff ff63 	bl	8000e5a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000f94:	4620      	mov	r0, r4
 8000f96:	f7ff ff62 	bl	8000e5e <HAL_TIM_PWM_PulseFinishedCallback>
 8000f9a:	e776      	b.n	8000e8a <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000f9c:	f7ff ff5d 	bl	8000e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f7ff ff5c 	bl	8000e5e <HAL_TIM_PWM_PulseFinishedCallback>
 8000fa6:	e785      	b.n	8000eb4 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fa8:	f7ff ff57 	bl	8000e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8000fac:	4620      	mov	r0, r4
 8000fae:	f7ff ff56 	bl	8000e5e <HAL_TIM_PWM_PulseFinishedCallback>
 8000fb2:	e793      	b.n	8000edc <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8000fb4:	f7ff ff51 	bl	8000e5a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8000fb8:	4620      	mov	r0, r4
 8000fba:	f7ff ff50 	bl	8000e5e <HAL_TIM_PWM_PulseFinishedCallback>
 8000fbe:	e7a2      	b.n	8000f06 <HAL_TIM_IRQHandler+0xa4>
 8000fc0:	bd10      	pop	{r4, pc}
	...

08000fc4 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fc4:	4a21      	ldr	r2, [pc, #132]	; (800104c <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 8000fc6:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fc8:	4290      	cmp	r0, r2
{
 8000fca:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8000fcc:	d005      	beq.n	8000fda <TIM_Base_SetConfig+0x16>
 8000fce:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000fd2:	d002      	beq.n	8000fda <TIM_Base_SetConfig+0x16>
 8000fd4:	4c1e      	ldr	r4, [pc, #120]	; (8001050 <TIM_Base_SetConfig+0x8c>)
 8000fd6:	42a0      	cmp	r0, r4
 8000fd8:	d10c      	bne.n	8000ff4 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8000fda:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8000fdc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000fe0:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8000fe2:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8000fe6:	d010      	beq.n	800100a <TIM_Base_SetConfig+0x46>
 8000fe8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8000fec:	d00d      	beq.n	800100a <TIM_Base_SetConfig+0x46>
 8000fee:	4a18      	ldr	r2, [pc, #96]	; (8001050 <TIM_Base_SetConfig+0x8c>)
 8000ff0:	4290      	cmp	r0, r2
 8000ff2:	d00a      	beq.n	800100a <TIM_Base_SetConfig+0x46>
 8000ff4:	4a17      	ldr	r2, [pc, #92]	; (8001054 <TIM_Base_SetConfig+0x90>)
 8000ff6:	4290      	cmp	r0, r2
 8000ff8:	d007      	beq.n	800100a <TIM_Base_SetConfig+0x46>
 8000ffa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8000ffe:	4290      	cmp	r0, r2
 8001000:	d003      	beq.n	800100a <TIM_Base_SetConfig+0x46>
 8001002:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8001006:	4290      	cmp	r0, r2
 8001008:	d103      	bne.n	8001012 <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800100a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800100c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001010:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001012:	694a      	ldr	r2, [r1, #20]
 8001014:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001018:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800101a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800101c:	688b      	ldr	r3, [r1, #8]
 800101e:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8001020:	680b      	ldr	r3, [r1, #0]
 8001022:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001024:	4b09      	ldr	r3, [pc, #36]	; (800104c <TIM_Base_SetConfig+0x88>)
 8001026:	4298      	cmp	r0, r3
 8001028:	d00b      	beq.n	8001042 <TIM_Base_SetConfig+0x7e>
 800102a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800102e:	4298      	cmp	r0, r3
 8001030:	d007      	beq.n	8001042 <TIM_Base_SetConfig+0x7e>
 8001032:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001036:	4298      	cmp	r0, r3
 8001038:	d003      	beq.n	8001042 <TIM_Base_SetConfig+0x7e>
 800103a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800103e:	4298      	cmp	r0, r3
 8001040:	d101      	bne.n	8001046 <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001042:	690b      	ldr	r3, [r1, #16]
 8001044:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001046:	2301      	movs	r3, #1
 8001048:	6143      	str	r3, [r0, #20]
 800104a:	bd10      	pop	{r4, pc}
 800104c:	40012c00 	.word	0x40012c00
 8001050:	40000400 	.word	0x40000400
 8001054:	40014000 	.word	0x40014000

08001058 <HAL_TIM_Base_Init>:
{ 
 8001058:	b510      	push	{r4, lr}
  if(htim == NULL)
 800105a:	4604      	mov	r4, r0
 800105c:	b1a0      	cbz	r0, 8001088 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800105e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8001062:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001066:	b91b      	cbnz	r3, 8001070 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001068:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 800106c:	f000 fc7a 	bl	8001964 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 8001070:	2302      	movs	r3, #2
 8001072:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001076:	6820      	ldr	r0, [r4, #0]
 8001078:	1d21      	adds	r1, r4, #4
 800107a:	f7ff ffa3 	bl	8000fc4 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800107e:	2301      	movs	r3, #1
 8001080:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001084:	2000      	movs	r0, #0
 8001086:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001088:	2001      	movs	r0, #1
}
 800108a:	bd10      	pop	{r4, pc}

0800108c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800108c:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 800108e:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001090:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001092:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001096:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 800109a:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800109c:	6083      	str	r3, [r0, #8]
 800109e:	bd10      	pop	{r4, pc}

080010a0 <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 80010a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80010a4:	2b01      	cmp	r3, #1
{
 80010a6:	b570      	push	{r4, r5, r6, lr}
 80010a8:	4604      	mov	r4, r0
 80010aa:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 80010ae:	d01a      	beq.n	80010e6 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 80010b0:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80010b4:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80010b6:	2301      	movs	r3, #1
 80010b8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80010bc:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80010be:	4b52      	ldr	r3, [pc, #328]	; (8001208 <HAL_TIM_ConfigClockSource+0x168>)
 80010c0:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80010c2:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80010c4:	680b      	ldr	r3, [r1, #0]
 80010c6:	2b40      	cmp	r3, #64	; 0x40
 80010c8:	d075      	beq.n	80011b6 <HAL_TIM_ConfigClockSource+0x116>
 80010ca:	d818      	bhi.n	80010fe <HAL_TIM_ConfigClockSource+0x5e>
 80010cc:	2b10      	cmp	r3, #16
 80010ce:	f000 808f 	beq.w	80011f0 <HAL_TIM_ConfigClockSource+0x150>
 80010d2:	d809      	bhi.n	80010e8 <HAL_TIM_ConfigClockSource+0x48>
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	f000 8085 	beq.w	80011e4 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 80010da:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80010dc:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80010de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80010e2:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80010e6:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80010e8:	2b20      	cmp	r3, #32
 80010ea:	f000 8087 	beq.w	80011fc <HAL_TIM_ConfigClockSource+0x15c>
 80010ee:	2b30      	cmp	r3, #48	; 0x30
 80010f0:	d1f3      	bne.n	80010da <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 80010f2:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80010f4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80010f8:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 80010fc:	e033      	b.n	8001166 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80010fe:	2b70      	cmp	r3, #112	; 0x70
 8001100:	d033      	beq.n	800116a <HAL_TIM_ConfigClockSource+0xca>
 8001102:	d81b      	bhi.n	800113c <HAL_TIM_ConfigClockSource+0x9c>
 8001104:	2b50      	cmp	r3, #80	; 0x50
 8001106:	d03f      	beq.n	8001188 <HAL_TIM_ConfigClockSource+0xe8>
 8001108:	2b60      	cmp	r3, #96	; 0x60
 800110a:	d1e6      	bne.n	80010da <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 800110c:	684d      	ldr	r5, [r1, #4]
 800110e:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8001110:	6a01      	ldr	r1, [r0, #32]
 8001112:	f021 0110 	bic.w	r1, r1, #16
 8001116:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001118:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800111a:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800111c:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001120:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001124:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001128:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 800112c:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 800112e:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001130:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001132:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001136:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 800113a:	e014      	b.n	8001166 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 800113c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001140:	d00c      	beq.n	800115c <HAL_TIM_ConfigClockSource+0xbc>
 8001142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001146:	d1c8      	bne.n	80010da <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001148:	68cb      	ldr	r3, [r1, #12]
 800114a:	684a      	ldr	r2, [r1, #4]
 800114c:	6889      	ldr	r1, [r1, #8]
 800114e:	f7ff ff9d 	bl	800108c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001152:	6822      	ldr	r2, [r4, #0]
 8001154:	6893      	ldr	r3, [r2, #8]
 8001156:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800115a:	e013      	b.n	8001184 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800115c:	6883      	ldr	r3, [r0, #8]
 800115e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001162:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001166:	6083      	str	r3, [r0, #8]
 8001168:	e7b7      	b.n	80010da <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 800116a:	68cb      	ldr	r3, [r1, #12]
 800116c:	684a      	ldr	r2, [r1, #4]
 800116e:	6889      	ldr	r1, [r1, #8]
 8001170:	f7ff ff8c 	bl	800108c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001174:	6822      	ldr	r2, [r4, #0]
 8001176:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001178:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800117c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001180:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001184:	6093      	str	r3, [r2, #8]
    break;
 8001186:	e7a8      	b.n	80010da <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001188:	684a      	ldr	r2, [r1, #4]
 800118a:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 800118c:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800118e:	6a05      	ldr	r5, [r0, #32]
 8001190:	f025 0501 	bic.w	r5, r5, #1
 8001194:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001196:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001198:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800119c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80011a0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80011a4:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80011a6:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80011a8:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80011aa:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80011ac:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80011b0:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 80011b4:	e7d7      	b.n	8001166 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 80011b6:	684a      	ldr	r2, [r1, #4]
 80011b8:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 80011ba:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80011bc:	6a05      	ldr	r5, [r0, #32]
 80011be:	f025 0501 	bic.w	r5, r5, #1
 80011c2:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 80011c4:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80011c6:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80011ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80011ce:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 80011d2:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 80011d4:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 80011d6:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 80011d8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80011da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80011de:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 80011e2:	e7c0      	b.n	8001166 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 80011e4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80011e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80011ea:	f043 0307 	orr.w	r3, r3, #7
 80011ee:	e7ba      	b.n	8001166 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 80011f0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80011f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80011f6:	f043 0317 	orr.w	r3, r3, #23
 80011fa:	e7b4      	b.n	8001166 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 80011fc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80011fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001202:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001206:	e7ae      	b.n	8001166 <HAL_TIM_ConfigClockSource+0xc6>
 8001208:	fffe0088 	.word	0xfffe0088

0800120c <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 800120c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001210:	2b01      	cmp	r3, #1
{
 8001212:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001214:	d018      	beq.n	8001248 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001216:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001218:	4d0c      	ldr	r5, [pc, #48]	; (800124c <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 800121a:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 800121c:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800121e:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001220:	bf02      	ittt	eq
 8001222:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001224:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001228:	432b      	orreq	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800122a:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800122c:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 800122e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001232:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001234:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001238:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800123a:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 800123c:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 800123e:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001240:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8001244:	4618      	mov	r0, r3
 8001246:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001248:	2002      	movs	r0, #2
} 
 800124a:	bd30      	pop	{r4, r5, pc}
 800124c:	40012c00 	.word	0x40012c00

08001250 <HAL_TIMEx_CommutationCallback>:
 8001250:	4770      	bx	lr

08001252 <HAL_TIMEx_BreakCallback>:
 8001252:	4770      	bx	lr

08001254 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001254:	4770      	bx	lr
	...

08001258 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001258:	b538      	push	{r3, r4, r5, lr}
 800125a:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800125c:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800125e:	6921      	ldr	r1, [r4, #16]
 8001260:	68a3      	ldr	r3, [r4, #8]
 8001262:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001264:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001266:	430b      	orrs	r3, r1
 8001268:	6961      	ldr	r1, [r4, #20]
 800126a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800126c:	4949      	ldr	r1, [pc, #292]	; (8001394 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800126e:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001270:	4001      	ands	r1, r0
 8001272:	430b      	orrs	r3, r1
 8001274:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001276:	686b      	ldr	r3, [r5, #4]
 8001278:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800127a:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800127c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001280:	430b      	orrs	r3, r1
 8001282:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001284:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001286:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001288:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 800128c:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 800128e:	430b      	orrs	r3, r1
 8001290:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001292:	4b41      	ldr	r3, [pc, #260]	; (8001398 <UART_SetConfig+0x140>)
 8001294:	429d      	cmp	r5, r3
 8001296:	d112      	bne.n	80012be <UART_SetConfig+0x66>
 8001298:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800129c:	493f      	ldr	r1, [pc, #252]	; (800139c <UART_SetConfig+0x144>)
 800129e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a0:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012a4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80012a8:	5ccb      	ldrb	r3, [r1, r3]
 80012aa:	d13b      	bne.n	8001324 <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 80012ac:	2b08      	cmp	r3, #8
 80012ae:	d836      	bhi.n	800131e <UART_SetConfig+0xc6>
 80012b0:	e8df f003 	tbb	[pc, r3]
 80012b4:	3524210f 	.word	0x3524210f
 80012b8:	3535352d 	.word	0x3535352d
 80012bc:	30          	.byte	0x30
 80012bd:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 80012be:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <UART_SetConfig+0x148>)
 80012c0:	429d      	cmp	r5, r3
 80012c2:	d003      	beq.n	80012cc <UART_SetConfig+0x74>
 80012c4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80012c8:	429d      	cmp	r5, r3
 80012ca:	d15e      	bne.n	800138a <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80012cc:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80012d0:	d131      	bne.n	8001336 <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80012d2:	f7ff fce3 	bl	8000c9c <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80012d6:	6861      	ldr	r1, [r4, #4]
 80012d8:	084a      	lsrs	r2, r1, #1
 80012da:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 80012de:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80012e2:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 80012e4:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 80012e6:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 80012ea:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80012ec:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 80012f0:	4313      	orrs	r3, r2
 80012f2:	60cb      	str	r3, [r1, #12]
 80012f4:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80012f6:	f7ff fce9 	bl	8000ccc <HAL_RCC_GetPCLK2Freq>
 80012fa:	e7ec      	b.n	80012d6 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 80012fc:	6860      	ldr	r0, [r4, #4]
 80012fe:	0843      	lsrs	r3, r0, #1
 8001300:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001304:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001308:	fbb3 f3f0 	udiv	r3, r3, r0
 800130c:	e7e9      	b.n	80012e2 <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800130e:	f7ff fbe9 	bl	8000ae4 <HAL_RCC_GetSysClockFreq>
 8001312:	e7e0      	b.n	80012d6 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001314:	6860      	ldr	r0, [r4, #4]
 8001316:	0843      	lsrs	r3, r0, #1
 8001318:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800131c:	e7f4      	b.n	8001308 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 800131e:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001320:	2300      	movs	r3, #0
 8001322:	e7e0      	b.n	80012e6 <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 8001324:	2b08      	cmp	r3, #8
 8001326:	d833      	bhi.n	8001390 <UART_SetConfig+0x138>
 8001328:	e8df f003 	tbb	[pc, r3]
 800132c:	321b1005 	.word	0x321b1005
 8001330:	32323227 	.word	0x32323227
 8001334:	2a          	.byte	0x2a
 8001335:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001336:	f7ff fcb1 	bl	8000c9c <HAL_RCC_GetPCLK1Freq>
 800133a:	6863      	ldr	r3, [r4, #4]
 800133c:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001340:	fbb0 f0f3 	udiv	r0, r0, r3
 8001344:	b280      	uxth	r0, r0
 8001346:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001348:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 800134a:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800134c:	f7ff fcbe 	bl	8000ccc <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001350:	6863      	ldr	r3, [r4, #4]
 8001352:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001356:	fbb0 f0f3 	udiv	r0, r0, r3
 800135a:	4b0f      	ldr	r3, [pc, #60]	; (8001398 <UART_SetConfig+0x140>)
 800135c:	b280      	uxth	r0, r0
 800135e:	60d8      	str	r0, [r3, #12]
 8001360:	e7f2      	b.n	8001348 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001362:	6862      	ldr	r2, [r4, #4]
 8001364:	0853      	lsrs	r3, r2, #1
 8001366:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 800136a:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800136e:	fbb3 f3f2 	udiv	r3, r3, r2
 8001372:	4a09      	ldr	r2, [pc, #36]	; (8001398 <UART_SetConfig+0x140>)
 8001374:	b29b      	uxth	r3, r3
 8001376:	60d3      	str	r3, [r2, #12]
 8001378:	e7e6      	b.n	8001348 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800137a:	f7ff fbb3 	bl	8000ae4 <HAL_RCC_GetSysClockFreq>
 800137e:	e7e7      	b.n	8001350 <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001380:	6862      	ldr	r2, [r4, #4]
 8001382:	0853      	lsrs	r3, r2, #1
 8001384:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001388:	e7f1      	b.n	800136e <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800138a:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 800138e:	d0c6      	beq.n	800131e <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001390:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001392:	bd38      	pop	{r3, r4, r5, pc}
 8001394:	efff69f3 	.word	0xefff69f3
 8001398:	40013800 	.word	0x40013800
 800139c:	08002408 	.word	0x08002408
 80013a0:	40004400 	.word	0x40004400

080013a4 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013a4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80013a6:	07da      	lsls	r2, r3, #31
{
 80013a8:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80013aa:	d506      	bpl.n	80013ba <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80013ac:	6801      	ldr	r1, [r0, #0]
 80013ae:	6a84      	ldr	r4, [r0, #40]	; 0x28
 80013b0:	684a      	ldr	r2, [r1, #4]
 80013b2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 80013b6:	4322      	orrs	r2, r4
 80013b8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80013ba:	079c      	lsls	r4, r3, #30
 80013bc:	d506      	bpl.n	80013cc <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80013be:	6801      	ldr	r1, [r0, #0]
 80013c0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 80013c2:	684a      	ldr	r2, [r1, #4]
 80013c4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80013c8:	4322      	orrs	r2, r4
 80013ca:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80013cc:	0759      	lsls	r1, r3, #29
 80013ce:	d506      	bpl.n	80013de <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80013d0:	6801      	ldr	r1, [r0, #0]
 80013d2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 80013d4:	684a      	ldr	r2, [r1, #4]
 80013d6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80013da:	4322      	orrs	r2, r4
 80013dc:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80013de:	071a      	lsls	r2, r3, #28
 80013e0:	d506      	bpl.n	80013f0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80013e2:	6801      	ldr	r1, [r0, #0]
 80013e4:	6b44      	ldr	r4, [r0, #52]	; 0x34
 80013e6:	684a      	ldr	r2, [r1, #4]
 80013e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ec:	4322      	orrs	r2, r4
 80013ee:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80013f0:	06dc      	lsls	r4, r3, #27
 80013f2:	d506      	bpl.n	8001402 <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80013f4:	6801      	ldr	r1, [r0, #0]
 80013f6:	6b84      	ldr	r4, [r0, #56]	; 0x38
 80013f8:	688a      	ldr	r2, [r1, #8]
 80013fa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80013fe:	4322      	orrs	r2, r4
 8001400:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001402:	0699      	lsls	r1, r3, #26
 8001404:	d506      	bpl.n	8001414 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001406:	6801      	ldr	r1, [r0, #0]
 8001408:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800140a:	688a      	ldr	r2, [r1, #8]
 800140c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001410:	4322      	orrs	r2, r4
 8001412:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001414:	065a      	lsls	r2, r3, #25
 8001416:	d50f      	bpl.n	8001438 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001418:	6801      	ldr	r1, [r0, #0]
 800141a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 800141c:	684a      	ldr	r2, [r1, #4]
 800141e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001422:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001424:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001428:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800142a:	d105      	bne.n	8001438 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800142c:	684a      	ldr	r2, [r1, #4]
 800142e:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001430:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001434:	4322      	orrs	r2, r4
 8001436:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001438:	061b      	lsls	r3, r3, #24
 800143a:	d506      	bpl.n	800144a <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800143c:	6802      	ldr	r2, [r0, #0]
 800143e:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001440:	6853      	ldr	r3, [r2, #4]
 8001442:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001446:	430b      	orrs	r3, r1
 8001448:	6053      	str	r3, [r2, #4]
 800144a:	bd10      	pop	{r4, pc}

0800144c <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800144c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001450:	9d06      	ldr	r5, [sp, #24]
 8001452:	4604      	mov	r4, r0
 8001454:	460f      	mov	r7, r1
 8001456:	4616      	mov	r6, r2
 8001458:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800145a:	6821      	ldr	r1, [r4, #0]
 800145c:	69ca      	ldr	r2, [r1, #28]
 800145e:	ea37 0302 	bics.w	r3, r7, r2
 8001462:	bf0c      	ite	eq
 8001464:	2201      	moveq	r2, #1
 8001466:	2200      	movne	r2, #0
 8001468:	42b2      	cmp	r2, r6
 800146a:	d002      	beq.n	8001472 <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 800146c:	2000      	movs	r0, #0
}
 800146e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001472:	1c6b      	adds	r3, r5, #1
 8001474:	d0f2      	beq.n	800145c <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001476:	b99d      	cbnz	r5, 80014a0 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001478:	6823      	ldr	r3, [r4, #0]
 800147a:	681a      	ldr	r2, [r3, #0]
 800147c:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001480:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001482:	689a      	ldr	r2, [r3, #8]
 8001484:	f022 0201 	bic.w	r2, r2, #1
 8001488:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 800148a:	2320      	movs	r3, #32
 800148c:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001490:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001494:	2300      	movs	r3, #0
 8001496:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 800149a:	2003      	movs	r0, #3
 800149c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80014a0:	f7fe ff28 	bl	80002f4 <HAL_GetTick>
 80014a4:	eba0 0008 	sub.w	r0, r0, r8
 80014a8:	4285      	cmp	r5, r0
 80014aa:	d2d6      	bcs.n	800145a <UART_WaitOnFlagUntilTimeout+0xe>
 80014ac:	e7e4      	b.n	8001478 <UART_WaitOnFlagUntilTimeout+0x2c>

080014ae <HAL_UART_Transmit>:
{
 80014ae:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80014b2:	461f      	mov	r7, r3
  if(huart->gState == HAL_UART_STATE_READY)
 80014b4:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80014b8:	2b20      	cmp	r3, #32
{
 80014ba:	4604      	mov	r4, r0
 80014bc:	460d      	mov	r5, r1
 80014be:	4690      	mov	r8, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80014c0:	d14c      	bne.n	800155c <HAL_UART_Transmit+0xae>
    if((pData == NULL ) || (Size == 0U))
 80014c2:	2900      	cmp	r1, #0
 80014c4:	d048      	beq.n	8001558 <HAL_UART_Transmit+0xaa>
 80014c6:	2a00      	cmp	r2, #0
 80014c8:	d046      	beq.n	8001558 <HAL_UART_Transmit+0xaa>
    __HAL_LOCK(huart);
 80014ca:	f890 3068 	ldrb.w	r3, [r0, #104]	; 0x68
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d044      	beq.n	800155c <HAL_UART_Transmit+0xae>
 80014d2:	2301      	movs	r3, #1
 80014d4:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80014d8:	2300      	movs	r3, #0
 80014da:	66c3      	str	r3, [r0, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80014dc:	2321      	movs	r3, #33	; 0x21
 80014de:	f880 3069 	strb.w	r3, [r0, #105]	; 0x69
    tickstart = HAL_GetTick();
 80014e2:	f7fe ff07 	bl	80002f4 <HAL_GetTick>
    huart->TxXferSize = Size;
 80014e6:	f8a4 8050 	strh.w	r8, [r4, #80]	; 0x50
    tickstart = HAL_GetTick();
 80014ea:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 80014ec:	f8a4 8052 	strh.w	r8, [r4, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80014f0:	f8b4 2052 	ldrh.w	r2, [r4, #82]	; 0x52
 80014f4:	b292      	uxth	r2, r2
 80014f6:	b962      	cbnz	r2, 8001512 <HAL_UART_Transmit+0x64>
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80014f8:	9700      	str	r7, [sp, #0]
 80014fa:	4633      	mov	r3, r6
 80014fc:	2140      	movs	r1, #64	; 0x40
 80014fe:	4620      	mov	r0, r4
 8001500:	f7ff ffa4 	bl	800144c <UART_WaitOnFlagUntilTimeout>
 8001504:	b998      	cbnz	r0, 800152e <HAL_UART_Transmit+0x80>
    huart->gState = HAL_UART_STATE_READY;
 8001506:	2320      	movs	r3, #32
 8001508:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
    __HAL_UNLOCK(huart);
 800150c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
    return HAL_OK;
 8001510:	e00e      	b.n	8001530 <HAL_UART_Transmit+0x82>
      huart->TxXferCount--;
 8001512:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001516:	9700      	str	r7, [sp, #0]
      huart->TxXferCount--;
 8001518:	3b01      	subs	r3, #1
 800151a:	b29b      	uxth	r3, r3
 800151c:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001520:	2200      	movs	r2, #0
 8001522:	4633      	mov	r3, r6
 8001524:	2180      	movs	r1, #128	; 0x80
 8001526:	4620      	mov	r0, r4
 8001528:	f7ff ff90 	bl	800144c <UART_WaitOnFlagUntilTimeout>
 800152c:	b118      	cbz	r0, 8001536 <HAL_UART_Transmit+0x88>
        return HAL_TIMEOUT;
 800152e:	2003      	movs	r0, #3
}
 8001530:	b002      	add	sp, #8
 8001532:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001536:	68a3      	ldr	r3, [r4, #8]
 8001538:	6822      	ldr	r2, [r4, #0]
 800153a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800153e:	d107      	bne.n	8001550 <HAL_UART_Transmit+0xa2>
 8001540:	6923      	ldr	r3, [r4, #16]
 8001542:	b92b      	cbnz	r3, 8001550 <HAL_UART_Transmit+0xa2>
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 8001544:	f835 3b02 	ldrh.w	r3, [r5], #2
 8001548:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800154c:	8513      	strh	r3, [r2, #40]	; 0x28
        pData += 2U;
 800154e:	e7cf      	b.n	80014f0 <HAL_UART_Transmit+0x42>
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8001550:	782b      	ldrb	r3, [r5, #0]
 8001552:	8513      	strh	r3, [r2, #40]	; 0x28
 8001554:	3501      	adds	r5, #1
 8001556:	e7cb      	b.n	80014f0 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 8001558:	2001      	movs	r0, #1
 800155a:	e7e9      	b.n	8001530 <HAL_UART_Transmit+0x82>
    return HAL_BUSY;
 800155c:	2002      	movs	r0, #2
 800155e:	e7e7      	b.n	8001530 <HAL_UART_Transmit+0x82>

08001560 <UART_CheckIdleState>:
{
 8001560:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001562:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001564:	2600      	movs	r6, #0
 8001566:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001568:	f7fe fec4 	bl	80002f4 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800156c:	6823      	ldr	r3, [r4, #0]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001572:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001574:	d417      	bmi.n	80015a6 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001576:	6823      	ldr	r3, [r4, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	075b      	lsls	r3, r3, #29
 800157c:	d50a      	bpl.n	8001594 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800157e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	2200      	movs	r2, #0
 8001586:	462b      	mov	r3, r5
 8001588:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800158c:	4620      	mov	r0, r4
 800158e:	f7ff ff5d 	bl	800144c <UART_WaitOnFlagUntilTimeout>
 8001592:	b9a0      	cbnz	r0, 80015be <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001594:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001596:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001598:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 800159c:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 80015a0:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 80015a4:	e00c      	b.n	80015c0 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80015a6:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80015aa:	9300      	str	r3, [sp, #0]
 80015ac:	4632      	mov	r2, r6
 80015ae:	4603      	mov	r3, r0
 80015b0:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80015b4:	4620      	mov	r0, r4
 80015b6:	f7ff ff49 	bl	800144c <UART_WaitOnFlagUntilTimeout>
 80015ba:	2800      	cmp	r0, #0
 80015bc:	d0db      	beq.n	8001576 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 80015be:	2003      	movs	r0, #3
}
 80015c0:	b002      	add	sp, #8
 80015c2:	bd70      	pop	{r4, r5, r6, pc}

080015c4 <HAL_UART_Init>:
{
 80015c4:	b510      	push	{r4, lr}
  if(huart == NULL)
 80015c6:	4604      	mov	r4, r0
 80015c8:	b360      	cbz	r0, 8001624 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 80015ca:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 80015ce:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80015d2:	b91b      	cbnz	r3, 80015dc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80015d4:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 80015d8:	f000 f9e0 	bl	800199c <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80015dc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80015de:	2324      	movs	r3, #36	; 0x24
 80015e0:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 80015e4:	6813      	ldr	r3, [r2, #0]
 80015e6:	f023 0301 	bic.w	r3, r3, #1
 80015ea:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 80015ec:	4620      	mov	r0, r4
 80015ee:	f7ff fe33 	bl	8001258 <UART_SetConfig>
 80015f2:	2801      	cmp	r0, #1
 80015f4:	d016      	beq.n	8001624 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80015f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80015f8:	b113      	cbz	r3, 8001600 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80015fa:	4620      	mov	r0, r4
 80015fc:	f7ff fed2 	bl	80013a4 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001600:	6823      	ldr	r3, [r4, #0]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001608:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001610:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001618:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 800161a:	601a      	str	r2, [r3, #0]
}
 800161c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001620:	f7ff bf9e 	b.w	8001560 <UART_CheckIdleState>
}
 8001624:	2001      	movs	r0, #1
 8001626:	bd10      	pop	{r4, pc}

08001628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001628:	b570      	push	{r4, r5, r6, lr}
 800162a:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800162c:	2228      	movs	r2, #40	; 0x28
 800162e:	2100      	movs	r1, #0
 8001630:	a80c      	add	r0, sp, #48	; 0x30
 8001632:	f000 fa99 	bl	8001b68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001636:	2214      	movs	r2, #20
 8001638:	2100      	movs	r1, #0
 800163a:	a801      	add	r0, sp, #4
 800163c:	f000 fa94 	bl	8001b68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001640:	2218      	movs	r2, #24
 8001642:	eb0d 0002 	add.w	r0, sp, r2
 8001646:	2100      	movs	r1, #0
 8001648:	f000 fa8e 	bl	8001b68 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800164c:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800164e:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001650:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001652:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001654:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001656:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 800165a:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800165c:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800165e:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001660:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001662:	f7fe ffc9 	bl	80005f8 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001666:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001668:	2500      	movs	r5, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800166a:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800166c:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800166e:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001672:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001674:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001676:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001678:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167a:	9505      	str	r5, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800167c:	f7ff fa64 	bl	8000b48 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001680:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001682:	9606      	str	r6, [sp, #24]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001684:	9508      	str	r5, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001686:	f7ff fb39 	bl	8000cfc <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 800168a:	b016      	add	sp, #88	; 0x58
 800168c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001690 <dac_signal>:
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void dac_signal(void) {
 8001690:	b510      	push	{r4, lr}

	uint16_t data;

	data=signal[indice];
 8001692:	4c09      	ldr	r4, [pc, #36]	; (80016b8 <dac_signal+0x28>)

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8001694:	4b09      	ldr	r3, [pc, #36]	; (80016bc <dac_signal+0x2c>)
	data=signal[indice];
 8001696:	7822      	ldrb	r2, [r4, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8001698:	4809      	ldr	r0, [pc, #36]	; (80016c0 <dac_signal+0x30>)
 800169a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800169e:	2200      	movs	r2, #0
 80016a0:	4611      	mov	r1, r2
 80016a2:	f7fe fea8 	bl	80003f6 <HAL_DAC_SetValue>
	indice++;
 80016a6:	7823      	ldrb	r3, [r4, #0]
 80016a8:	3301      	adds	r3, #1
 80016aa:	b2db      	uxtb	r3, r3
	if (indice >= N_MUESTRAS) {
 80016ac:	2b31      	cmp	r3, #49	; 0x31
		indice = 0;
 80016ae:	bf88      	it	hi
 80016b0:	2300      	movhi	r3, #0
 80016b2:	7023      	strb	r3, [r4, #0]
 80016b4:	bd10      	pop	{r4, pc}
 80016b6:	bf00      	nop
 80016b8:	2000008c 	.word	0x2000008c
 80016bc:	2000008e 	.word	0x2000008e
 80016c0:	20000104 	.word	0x20000104

080016c4 <calculo_senal>:
	}
}

void calculo_senal(uint8_t duty_cycle){
	for (uint8_t i=0; i<N_MUESTRAS;i++){
		if (i<duty_cycle*N_MUESTRAS/100) {
 80016c4:	2300      	movs	r3, #0
 80016c6:	4a08      	ldr	r2, [pc, #32]	; (80016e8 <calculo_senal+0x24>)
void calculo_senal(uint8_t duty_cycle){
 80016c8:	b510      	push	{r4, lr}
		if (i<duty_cycle*N_MUESTRAS/100) {
 80016ca:	0840      	lsrs	r0, r0, #1
			signal[i] =  4095;
		}
		else {
			signal[i] = 0;
 80016cc:	4619      	mov	r1, r3
			signal[i] =  4095;
 80016ce:	f640 74ff 	movw	r4, #4095	; 0xfff
		if (i<duty_cycle*N_MUESTRAS/100) {
 80016d2:	4298      	cmp	r0, r3
			signal[i] =  4095;
 80016d4:	bfcc      	ite	gt
 80016d6:	f822 4013 	strhgt.w	r4, [r2, r3, lsl #1]
			signal[i] = 0;
 80016da:	f822 1013 	strhle.w	r1, [r2, r3, lsl #1]
 80016de:	3301      	adds	r3, #1
	for (uint8_t i=0; i<N_MUESTRAS;i++){
 80016e0:	2b32      	cmp	r3, #50	; 0x32
 80016e2:	d1f6      	bne.n	80016d2 <calculo_senal+0xe>
		}
	}
}
 80016e4:	bd10      	pop	{r4, pc}
 80016e6:	bf00      	nop
 80016e8:	2000008e 	.word	0x2000008e

080016ec <tx_UART_int>:
	HAL_DAC_Stop(&hdac1, DAC_CHANNEL_1);
	HAL_TIM_Base_Stop_IT(&htim2);
}

void tx_UART_int(UART_HandleTypeDef *huart, int data, uint32_t Timeout)
{
 80016ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}

	int size = 1;
	uint8_t negativo = 0;

	if (data < 0) {	// Si los pulsos
 80016f0:	1e0a      	subs	r2, r1, #0
{
 80016f2:	b083      	sub	sp, #12
		data = -data;
 80016f4:	bfb8      	it	lt
 80016f6:	4252      	neglt	r2, r2
{
 80016f8:	4605      	mov	r5, r0
 80016fa:	af00      	add	r7, sp, #0
		negativo = 1;
 80016fc:	bfb4      	ite	lt
 80016fe:	f04f 0801 	movlt.w	r8, #1
	uint8_t negativo = 0;
 8001702:	f04f 0800 	movge.w	r8, #0
	}

	int numero = data;
 8001706:	4613      	mov	r3, r2
	int size = 1;
 8001708:	2401      	movs	r4, #1

	while(numero > 9) {
	  numero =  numero/10;
 800170a:	210a      	movs	r1, #10
	while(numero > 9) {
 800170c:	2b09      	cmp	r3, #9
 800170e:	dc29      	bgt.n	8001764 <tx_UART_int+0x78>
	  size++;
	}

	char data_char[size];		// String de chars
 8001710:	1de3      	adds	r3, r4, #7
 8001712:	f023 0307 	bic.w	r3, r3, #7
 8001716:	ebad 0d03 	sub.w	sp, sp, r3
 800171a:	46e9      	mov	r9, sp
	uint8_t data_tx[size];	// String de uint8_t

	sprintf(data_char,"%d", data);	// Cada numero del int en un char
 800171c:	4915      	ldr	r1, [pc, #84]	; (8001774 <tx_UART_int+0x88>)
	uint8_t data_tx[size];	// String de uint8_t
 800171e:	ebad 0d03 	sub.w	sp, sp, r3
	sprintf(data_char,"%d", data);	// Cada numero del int en un char
 8001722:	4648      	mov	r0, r9
 8001724:	f000 fa28 	bl	8001b78 <siprintf>
	uint8_t data_tx[size];	// String de uint8_t
 8001728:	466e      	mov	r6, sp

	for(uint8_t i=0; i<size; i++ ) {			// Casting de char a uint8_t
 800172a:	2200      	movs	r2, #0
 800172c:	b2d3      	uxtb	r3, r2
 800172e:	429c      	cmp	r4, r3
 8001730:	f102 0201 	add.w	r2, r2, #1
 8001734:	dc1a      	bgt.n	800176c <tx_UART_int+0x80>
		data_tx[i] = (uint8_t) data_char[i];
	}

	if (negativo) {		// Si el numero es negativo, transmite un "-" antes
 8001736:	f1b8 0f00 	cmp.w	r8, #0
 800173a:	d009      	beq.n	8001750 <tx_UART_int+0x64>
		uint8_t menos[] = "-";
 800173c:	f107 0108 	add.w	r1, r7, #8
 8001740:	232d      	movs	r3, #45	; 0x2d
 8001742:	f821 3d04 	strh.w	r3, [r1, #-4]!
		HAL_UART_Transmit(huart, menos, 1, 10);
 8001746:	2201      	movs	r2, #1
 8001748:	230a      	movs	r3, #10
 800174a:	4628      	mov	r0, r5
 800174c:	f7ff feaf 	bl	80014ae <HAL_UART_Transmit>
	}
	HAL_UART_Transmit(huart,data_tx,sizeof(data_tx), 10);	// TX por UART del array de uint8_t
 8001750:	230a      	movs	r3, #10
 8001752:	b2a2      	uxth	r2, r4
 8001754:	4631      	mov	r1, r6
 8001756:	4628      	mov	r0, r5
 8001758:	f7ff fea9 	bl	80014ae <HAL_UART_Transmit>
}
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	  numero =  numero/10;
 8001764:	fb93 f3f1 	sdiv	r3, r3, r1
	  size++;
 8001768:	3401      	adds	r4, #1
 800176a:	e7cf      	b.n	800170c <tx_UART_int+0x20>
		data_tx[i] = (uint8_t) data_char[i];
 800176c:	f819 1003 	ldrb.w	r1, [r9, r3]
 8001770:	54f1      	strb	r1, [r6, r3]
 8001772:	e7db      	b.n	800172c <tx_UART_int+0x40>
 8001774:	0800240c 	.word	0x0800240c

08001778 <main>:
{
 8001778:	b5f0      	push	{r4, r5, r6, r7, lr}
 800177a:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 800177c:	f7fe fd9c 	bl	80002b8 <HAL_Init>
  SystemClock_Config();
 8001780:	f7ff ff52 	bl	8001628 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	2214      	movs	r2, #20
 8001786:	2100      	movs	r1, #0
 8001788:	a807      	add	r0, sp, #28
 800178a:	f000 f9ed 	bl	8001b68 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800178e:	4b48      	ldr	r3, [pc, #288]	; (80018b0 <main+0x138>)
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001790:	4848      	ldr	r0, [pc, #288]	; (80018b4 <main+0x13c>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001792:	695a      	ldr	r2, [r3, #20]
  huart2.Instance = USART2;
 8001794:	4d48      	ldr	r5, [pc, #288]	; (80018b8 <main+0x140>)
  hdac1.Instance = DAC1;
 8001796:	4e49      	ldr	r6, [pc, #292]	; (80018bc <main+0x144>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001798:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 800179c:	615a      	str	r2, [r3, #20]
 800179e:	695a      	ldr	r2, [r3, #20]
 80017a0:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 80017a4:	9201      	str	r2, [sp, #4]
 80017a6:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a8:	695a      	ldr	r2, [r3, #20]
 80017aa:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80017ae:	615a      	str	r2, [r3, #20]
 80017b0:	695a      	ldr	r2, [r3, #20]
 80017b2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80017b6:	9202      	str	r2, [sp, #8]
 80017b8:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ba:	695a      	ldr	r2, [r3, #20]
 80017bc:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 80017c0:	615a      	str	r2, [r3, #20]
 80017c2:	695b      	ldr	r3, [r3, #20]
 80017c4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ca:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80017cc:	2108      	movs	r1, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ce:	2400      	movs	r4, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017d0:	9b03      	ldr	r3, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017d2:	2701      	movs	r7, #1
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80017d4:	f7fe ff0a 	bl	80005ec <HAL_GPIO_WritePin>
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80017d8:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = LD3_Pin;
 80017da:	2308      	movs	r3, #8
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80017dc:	4835      	ldr	r0, [pc, #212]	; (80018b4 <main+0x13c>)
  GPIO_InitStruct.Pin = LD3_Pin;
 80017de:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017e0:	9708      	str	r7, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e4:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 80017e6:	f7fe fe47 	bl	8000478 <HAL_GPIO_Init>
  huart2.Init.BaudRate = 38400;
 80017ea:	4a35      	ldr	r2, [pc, #212]	; (80018c0 <main+0x148>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80017ec:	60ac      	str	r4, [r5, #8]
  huart2.Init.BaudRate = 38400;
 80017ee:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 80017f2:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80017f6:	4628      	mov	r0, r5
  huart2.Init.Mode = UART_MODE_TX_RX;
 80017f8:	230c      	movs	r3, #12
 80017fa:	616b      	str	r3, [r5, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80017fc:	60ec      	str	r4, [r5, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80017fe:	612c      	str	r4, [r5, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001800:	61ac      	str	r4, [r5, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001802:	61ec      	str	r4, [r5, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001804:	622c      	str	r4, [r5, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001806:	626c      	str	r4, [r5, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001808:	f7ff fedc 	bl	80015c4 <HAL_UART_Init>
  hdac1.Instance = DAC1;
 800180c:	4b2d      	ldr	r3, [pc, #180]	; (80018c4 <main+0x14c>)
 800180e:	6033      	str	r3, [r6, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001810:	4630      	mov	r0, r6
  DAC_ChannelConfTypeDef sConfig = {0};
 8001812:	9407      	str	r4, [sp, #28]
 8001814:	9408      	str	r4, [sp, #32]
 8001816:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8001818:	f7fe fdda 	bl	80003d0 <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800181c:	4622      	mov	r2, r4
 800181e:	a907      	add	r1, sp, #28
 8001820:	4630      	mov	r0, r6
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001822:	9407      	str	r4, [sp, #28]
  htim2.Instance = TIM2;
 8001824:	4e28      	ldr	r6, [pc, #160]	; (80018c8 <main+0x150>)
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001826:	9408      	str	r4, [sp, #32]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001828:	f7fe fdf8 	bl	800041c <HAL_DAC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800182c:	2210      	movs	r2, #16
 800182e:	4621      	mov	r1, r4
 8001830:	a807      	add	r0, sp, #28
 8001832:	f000 f999 	bl	8001b68 <memset>
  htim2.Instance = TIM2;
 8001836:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
  htim2.Init.Prescaler = 1;
 800183a:	e886 0088 	stmia.w	r6, {r3, r7}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800183e:	4630      	mov	r0, r6
  htim2.Init.Period = 29091;
 8001840:	f247 13a3 	movw	r3, #29091	; 0x71a3
 8001844:	60f3      	str	r3, [r6, #12]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001846:	60b4      	str	r4, [r6, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001848:	6134      	str	r4, [r6, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800184a:	61b4      	str	r4, [r6, #24]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800184c:	9404      	str	r4, [sp, #16]
 800184e:	9405      	str	r4, [sp, #20]
 8001850:	9406      	str	r4, [sp, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001852:	f7ff fc01 	bl	8001058 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001856:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800185a:	a907      	add	r1, sp, #28
 800185c:	4630      	mov	r0, r6
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800185e:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001860:	f7ff fc1e 	bl	80010a0 <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001864:	a904      	add	r1, sp, #16
 8001866:	4630      	mov	r0, r6
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001868:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800186a:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800186c:	f7ff fcce 	bl	800120c <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Instance = USART1;
 8001870:	4816      	ldr	r0, [pc, #88]	; (80018cc <main+0x154>)
  huart1.Init.BaudRate = 31250;
 8001872:	4917      	ldr	r1, [pc, #92]	; (80018d0 <main+0x158>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001874:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 31250;
 8001876:	f647 2312 	movw	r3, #31250	; 0x7a12
 800187a:	e880 000a 	stmia.w	r0, {r1, r3}
  huart1.Init.Mode = UART_MODE_RX;
 800187e:	2304      	movs	r3, #4
 8001880:	6143      	str	r3, [r0, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001882:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001884:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001886:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001888:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800188a:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800188c:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800188e:	f7ff fe99 	bl	80015c4 <HAL_UART_Init>
  calculo_senal(50);
 8001892:	2032      	movs	r0, #50	; 0x32
 8001894:	f7ff ff16 	bl	80016c4 <calculo_senal>
  tx_UART_int(&huart2, signal[i], 10 );
 8001898:	4e0e      	ldr	r6, [pc, #56]	; (80018d4 <main+0x15c>)
 800189a:	f836 1014 	ldrh.w	r1, [r6, r4, lsl #1]
 800189e:	220a      	movs	r2, #10
 80018a0:	4628      	mov	r0, r5
 80018a2:	3401      	adds	r4, #1
 80018a4:	f7ff ff22 	bl	80016ec <tx_UART_int>
  for (uint8_t i=0;i<50;i++){
 80018a8:	2c32      	cmp	r4, #50	; 0x32
 80018aa:	d1f6      	bne.n	800189a <main+0x122>
 80018ac:	e7fe      	b.n	80018ac <main+0x134>
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000
 80018b4:	48000400 	.word	0x48000400
 80018b8:	200001c8 	.word	0x200001c8
 80018bc:	20000104 	.word	0x20000104
 80018c0:	40004400 	.word	0x40004400
 80018c4:	40007400 	.word	0x40007400
 80018c8:	20000188 	.word	0x20000188
 80018cc:	20000118 	.word	0x20000118
 80018d0:	40013800 	.word	0x40013800
 80018d4:	2000008e 	.word	0x2000008e

080018d8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <HAL_MspInit+0x2c>)
 80018da:	699a      	ldr	r2, [r3, #24]
 80018dc:	f042 0201 	orr.w	r2, r2, #1
 80018e0:	619a      	str	r2, [r3, #24]
 80018e2:	699a      	ldr	r2, [r3, #24]
{
 80018e4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018e6:	f002 0201 	and.w	r2, r2, #1
 80018ea:	9200      	str	r2, [sp, #0]
 80018ec:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018ee:	69da      	ldr	r2, [r3, #28]
 80018f0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80018f4:	61da      	str	r2, [r3, #28]
 80018f6:	69db      	ldr	r3, [r3, #28]
 80018f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018fc:	9301      	str	r3, [sp, #4]
 80018fe:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001900:	b002      	add	sp, #8
 8001902:	4770      	bx	lr
 8001904:	40021000 	.word	0x40021000

08001908 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001908:	b510      	push	{r4, lr}
 800190a:	4604      	mov	r4, r0
 800190c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800190e:	2214      	movs	r2, #20
 8001910:	2100      	movs	r1, #0
 8001912:	a803      	add	r0, sp, #12
 8001914:	f000 f928 	bl	8001b68 <memset>
  if(hdac->Instance==DAC1)
 8001918:	6822      	ldr	r2, [r4, #0]
 800191a:	4b11      	ldr	r3, [pc, #68]	; (8001960 <HAL_DAC_MspInit+0x58>)
 800191c:	429a      	cmp	r2, r3
 800191e:	d11c      	bne.n	800195a <HAL_DAC_MspInit+0x52>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001920:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001924:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 8001926:	69da      	ldr	r2, [r3, #28]
 8001928:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800192c:	61da      	str	r2, [r3, #28]
 800192e:	69da      	ldr	r2, [r3, #28]
 8001930:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 8001934:	9201      	str	r2, [sp, #4]
 8001936:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	695a      	ldr	r2, [r3, #20]
 800193a:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800193e:	615a      	str	r2, [r3, #20]
 8001940:	695b      	ldr	r3, [r3, #20]
 8001942:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001946:	9302      	str	r3, [sp, #8]
 8001948:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800194a:	2310      	movs	r3, #16
 800194c:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800194e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001952:	2303      	movs	r3, #3
 8001954:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001956:	f7fe fd8f 	bl	8000478 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 800195a:	b008      	add	sp, #32
 800195c:	bd10      	pop	{r4, pc}
 800195e:	bf00      	nop
 8001960:	40007400 	.word	0x40007400

08001964 <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 8001964:	6803      	ldr	r3, [r0, #0]
 8001966:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 800196a:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 800196c:	d112      	bne.n	8001994 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800196e:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001972:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001974:	69da      	ldr	r2, [r3, #28]
 8001976:	f042 0201 	orr.w	r2, r2, #1
 800197a:	61da      	str	r2, [r3, #28]
 800197c:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800197e:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001980:	f003 0301 	and.w	r3, r3, #1
 8001984:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001986:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001988:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800198a:	f7fe fccb 	bl	8000324 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800198e:	201c      	movs	r0, #28
 8001990:	f7fe fcfc 	bl	800038c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8001994:	b003      	add	sp, #12
 8001996:	f85d fb04 	ldr.w	pc, [sp], #4
	...

0800199c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800199c:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	2214      	movs	r2, #20
{
 80019a0:	b08a      	sub	sp, #40	; 0x28
 80019a2:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019a4:	2100      	movs	r1, #0
 80019a6:	eb0d 0002 	add.w	r0, sp, r2
 80019aa:	f000 f8dd 	bl	8001b68 <memset>
  if(huart->Instance==USART1)
 80019ae:	6823      	ldr	r3, [r4, #0]
 80019b0:	4a1f      	ldr	r2, [pc, #124]	; (8001a30 <HAL_UART_MspInit+0x94>)
 80019b2:	4293      	cmp	r3, r2
 80019b4:	d122      	bne.n	80019fc <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80019b6:	4b1f      	ldr	r3, [pc, #124]	; (8001a34 <HAL_UART_MspInit+0x98>)
 80019b8:	699a      	ldr	r2, [r3, #24]
 80019ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80019be:	619a      	str	r2, [r3, #24]
 80019c0:	699a      	ldr	r2, [r3, #24]
 80019c2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80019c6:	9201      	str	r2, [sp, #4]
 80019c8:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019ca:	695a      	ldr	r2, [r3, #20]
 80019cc:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80019d0:	615a      	str	r2, [r3, #20]
 80019d2:	695b      	ldr	r3, [r3, #20]
 80019d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019d8:	9302      	str	r3, [sp, #8]
 80019da:	9b02      	ldr	r3, [sp, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80019dc:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80019e0:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e2:	2302      	movs	r3, #2
 80019e4:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019e6:	2303      	movs	r3, #3
 80019e8:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019ec:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80019f2:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019f4:	f7fe fd40 	bl	8000478 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80019f8:	b00a      	add	sp, #40	; 0x28
 80019fa:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 80019fc:	4a0e      	ldr	r2, [pc, #56]	; (8001a38 <HAL_UART_MspInit+0x9c>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d1fa      	bne.n	80019f8 <HAL_UART_MspInit+0x5c>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001a02:	4b0c      	ldr	r3, [pc, #48]	; (8001a34 <HAL_UART_MspInit+0x98>)
 8001a04:	69da      	ldr	r2, [r3, #28]
 8001a06:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a0a:	61da      	str	r2, [r3, #28]
 8001a0c:	69da      	ldr	r2, [r3, #28]
 8001a0e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001a12:	9203      	str	r2, [sp, #12]
 8001a14:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a16:	695a      	ldr	r2, [r3, #20]
 8001a18:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001a1c:	615a      	str	r2, [r3, #20]
 8001a1e:	695b      	ldr	r3, [r3, #20]
 8001a20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a24:	9304      	str	r3, [sp, #16]
 8001a26:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8001a28:	f248 0304 	movw	r3, #32772	; 0x8004
 8001a2c:	e7d8      	b.n	80019e0 <HAL_UART_MspInit+0x44>
 8001a2e:	bf00      	nop
 8001a30:	40013800 	.word	0x40013800
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40004400 	.word	0x40004400

08001a3c <NMI_Handler>:
 8001a3c:	4770      	bx	lr

08001a3e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a3e:	e7fe      	b.n	8001a3e <HardFault_Handler>

08001a40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a40:	e7fe      	b.n	8001a40 <MemManage_Handler>

08001a42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a42:	e7fe      	b.n	8001a42 <BusFault_Handler>

08001a44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a44:	e7fe      	b.n	8001a44 <UsageFault_Handler>

08001a46 <SVC_Handler>:
 8001a46:	4770      	bx	lr

08001a48 <DebugMon_Handler>:
 8001a48:	4770      	bx	lr

08001a4a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a4a:	4770      	bx	lr

08001a4c <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a4c:	f7fe bc46 	b.w	80002dc <HAL_IncTick>

08001a50 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a50:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TIM2_IRQn 0 */
	dac_signal();
 8001a52:	f7ff fe1d 	bl	8001690 <dac_signal>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a56:	4802      	ldr	r0, [pc, #8]	; (8001a60 <TIM2_IRQHandler+0x10>)
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a58:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_TIM_IRQHandler(&htim2);
 8001a5c:	f7ff ba01 	b.w	8000e62 <HAL_TIM_IRQHandler>
 8001a60:	20000188 	.word	0x20000188

08001a64 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a64:	4915      	ldr	r1, [pc, #84]	; (8001abc <SystemInit+0x58>)
 8001a66:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001a6a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001a6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8001a72:	4b13      	ldr	r3, [pc, #76]	; (8001ac0 <SystemInit+0x5c>)
 8001a74:	681a      	ldr	r2, [r3, #0]
 8001a76:	f042 0201 	orr.w	r2, r2, #1
 8001a7a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8001a7c:	6858      	ldr	r0, [r3, #4]
 8001a7e:	4a11      	ldr	r2, [pc, #68]	; (8001ac4 <SystemInit+0x60>)
 8001a80:	4002      	ands	r2, r0
 8001a82:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8001a8a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001a8e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001a90:	681a      	ldr	r2, [r3, #0]
 8001a92:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001a96:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8001a98:	685a      	ldr	r2, [r3, #4]
 8001a9a:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 8001a9e:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 8001aa0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001aa2:	f022 020f 	bic.w	r2, r2, #15
 8001aa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8001aa8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001aaa:	4a07      	ldr	r2, [pc, #28]	; (8001ac8 <SystemInit+0x64>)
 8001aac:	4002      	ands	r2, r0
 8001aae:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001ab4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8001ab8:	608b      	str	r3, [r1, #8]
 8001aba:	4770      	bx	lr
 8001abc:	e000ed00 	.word	0xe000ed00
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	f87fc00c 	.word	0xf87fc00c
 8001ac8:	ff00fccc 	.word	0xff00fccc

08001acc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001acc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b04 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001ad0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001ad2:	e003      	b.n	8001adc <LoopCopyDataInit>

08001ad4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001ad4:	4b0c      	ldr	r3, [pc, #48]	; (8001b08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001ad6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001ad8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001ada:	3104      	adds	r1, #4

08001adc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001adc:	480b      	ldr	r0, [pc, #44]	; (8001b0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001ade:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001ae0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001ae2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001ae4:	d3f6      	bcc.n	8001ad4 <CopyDataInit>
	ldr	r2, =_sbss
 8001ae6:	4a0b      	ldr	r2, [pc, #44]	; (8001b14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001ae8:	e002      	b.n	8001af0 <LoopFillZerobss>

08001aea <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001aea:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001aec:	f842 3b04 	str.w	r3, [r2], #4

08001af0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <LoopForever+0x16>)
	cmp	r2, r3
 8001af2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001af4:	d3f9      	bcc.n	8001aea <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001af6:	f7ff ffb5 	bl	8001a64 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001afa:	f000 f811 	bl	8001b20 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001afe:	f7ff fe3b 	bl	8001778 <main>

08001b02 <LoopForever>:

LoopForever:
    b LoopForever
 8001b02:	e7fe      	b.n	8001b02 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001b04:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8001b08:	08002464 	.word	0x08002464
	ldr	r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001b10:	20000070 	.word	0x20000070
	ldr	r2, =_sbss
 8001b14:	20000070 	.word	0x20000070
	ldr	r3, = _ebss
 8001b18:	2000023c 	.word	0x2000023c

08001b1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001b1c:	e7fe      	b.n	8001b1c <ADC1_2_IRQHandler>
	...

08001b20 <__libc_init_array>:
 8001b20:	b570      	push	{r4, r5, r6, lr}
 8001b22:	4e0d      	ldr	r6, [pc, #52]	; (8001b58 <__libc_init_array+0x38>)
 8001b24:	4c0d      	ldr	r4, [pc, #52]	; (8001b5c <__libc_init_array+0x3c>)
 8001b26:	1ba4      	subs	r4, r4, r6
 8001b28:	10a4      	asrs	r4, r4, #2
 8001b2a:	2500      	movs	r5, #0
 8001b2c:	42a5      	cmp	r5, r4
 8001b2e:	d109      	bne.n	8001b44 <__libc_init_array+0x24>
 8001b30:	4e0b      	ldr	r6, [pc, #44]	; (8001b60 <__libc_init_array+0x40>)
 8001b32:	4c0c      	ldr	r4, [pc, #48]	; (8001b64 <__libc_init_array+0x44>)
 8001b34:	f000 fc4c 	bl	80023d0 <_init>
 8001b38:	1ba4      	subs	r4, r4, r6
 8001b3a:	10a4      	asrs	r4, r4, #2
 8001b3c:	2500      	movs	r5, #0
 8001b3e:	42a5      	cmp	r5, r4
 8001b40:	d105      	bne.n	8001b4e <__libc_init_array+0x2e>
 8001b42:	bd70      	pop	{r4, r5, r6, pc}
 8001b44:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b48:	4798      	blx	r3
 8001b4a:	3501      	adds	r5, #1
 8001b4c:	e7ee      	b.n	8001b2c <__libc_init_array+0xc>
 8001b4e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001b52:	4798      	blx	r3
 8001b54:	3501      	adds	r5, #1
 8001b56:	e7f2      	b.n	8001b3e <__libc_init_array+0x1e>
 8001b58:	0800245c 	.word	0x0800245c
 8001b5c:	0800245c 	.word	0x0800245c
 8001b60:	0800245c 	.word	0x0800245c
 8001b64:	08002460 	.word	0x08002460

08001b68 <memset>:
 8001b68:	4402      	add	r2, r0
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	4293      	cmp	r3, r2
 8001b6e:	d100      	bne.n	8001b72 <memset+0xa>
 8001b70:	4770      	bx	lr
 8001b72:	f803 1b01 	strb.w	r1, [r3], #1
 8001b76:	e7f9      	b.n	8001b6c <memset+0x4>

08001b78 <siprintf>:
 8001b78:	b40e      	push	{r1, r2, r3}
 8001b7a:	b500      	push	{lr}
 8001b7c:	b09c      	sub	sp, #112	; 0x70
 8001b7e:	f44f 7102 	mov.w	r1, #520	; 0x208
 8001b82:	ab1d      	add	r3, sp, #116	; 0x74
 8001b84:	f8ad 1014 	strh.w	r1, [sp, #20]
 8001b88:	9002      	str	r0, [sp, #8]
 8001b8a:	9006      	str	r0, [sp, #24]
 8001b8c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8001b90:	480a      	ldr	r0, [pc, #40]	; (8001bbc <siprintf+0x44>)
 8001b92:	9104      	str	r1, [sp, #16]
 8001b94:	9107      	str	r1, [sp, #28]
 8001b96:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8001b9a:	f853 2b04 	ldr.w	r2, [r3], #4
 8001b9e:	f8ad 1016 	strh.w	r1, [sp, #22]
 8001ba2:	6800      	ldr	r0, [r0, #0]
 8001ba4:	9301      	str	r3, [sp, #4]
 8001ba6:	a902      	add	r1, sp, #8
 8001ba8:	f000 f866 	bl	8001c78 <_svfiprintf_r>
 8001bac:	9b02      	ldr	r3, [sp, #8]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	701a      	strb	r2, [r3, #0]
 8001bb2:	b01c      	add	sp, #112	; 0x70
 8001bb4:	f85d eb04 	ldr.w	lr, [sp], #4
 8001bb8:	b003      	add	sp, #12
 8001bba:	4770      	bx	lr
 8001bbc:	2000000c 	.word	0x2000000c

08001bc0 <__ssputs_r>:
 8001bc0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001bc4:	688e      	ldr	r6, [r1, #8]
 8001bc6:	429e      	cmp	r6, r3
 8001bc8:	4682      	mov	sl, r0
 8001bca:	460c      	mov	r4, r1
 8001bcc:	4691      	mov	r9, r2
 8001bce:	4698      	mov	r8, r3
 8001bd0:	d835      	bhi.n	8001c3e <__ssputs_r+0x7e>
 8001bd2:	898a      	ldrh	r2, [r1, #12]
 8001bd4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8001bd8:	d031      	beq.n	8001c3e <__ssputs_r+0x7e>
 8001bda:	6825      	ldr	r5, [r4, #0]
 8001bdc:	6909      	ldr	r1, [r1, #16]
 8001bde:	1a6f      	subs	r7, r5, r1
 8001be0:	6965      	ldr	r5, [r4, #20]
 8001be2:	2302      	movs	r3, #2
 8001be4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8001be8:	fb95 f5f3 	sdiv	r5, r5, r3
 8001bec:	f108 0301 	add.w	r3, r8, #1
 8001bf0:	443b      	add	r3, r7
 8001bf2:	429d      	cmp	r5, r3
 8001bf4:	bf38      	it	cc
 8001bf6:	461d      	movcc	r5, r3
 8001bf8:	0553      	lsls	r3, r2, #21
 8001bfa:	d531      	bpl.n	8001c60 <__ssputs_r+0xa0>
 8001bfc:	4629      	mov	r1, r5
 8001bfe:	f000 fb39 	bl	8002274 <_malloc_r>
 8001c02:	4606      	mov	r6, r0
 8001c04:	b950      	cbnz	r0, 8001c1c <__ssputs_r+0x5c>
 8001c06:	230c      	movs	r3, #12
 8001c08:	f8ca 3000 	str.w	r3, [sl]
 8001c0c:	89a3      	ldrh	r3, [r4, #12]
 8001c0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c12:	81a3      	strh	r3, [r4, #12]
 8001c14:	f04f 30ff 	mov.w	r0, #4294967295
 8001c18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c1c:	463a      	mov	r2, r7
 8001c1e:	6921      	ldr	r1, [r4, #16]
 8001c20:	f000 fab4 	bl	800218c <memcpy>
 8001c24:	89a3      	ldrh	r3, [r4, #12]
 8001c26:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8001c2a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c2e:	81a3      	strh	r3, [r4, #12]
 8001c30:	6126      	str	r6, [r4, #16]
 8001c32:	6165      	str	r5, [r4, #20]
 8001c34:	443e      	add	r6, r7
 8001c36:	1bed      	subs	r5, r5, r7
 8001c38:	6026      	str	r6, [r4, #0]
 8001c3a:	60a5      	str	r5, [r4, #8]
 8001c3c:	4646      	mov	r6, r8
 8001c3e:	4546      	cmp	r6, r8
 8001c40:	bf28      	it	cs
 8001c42:	4646      	movcs	r6, r8
 8001c44:	4632      	mov	r2, r6
 8001c46:	4649      	mov	r1, r9
 8001c48:	6820      	ldr	r0, [r4, #0]
 8001c4a:	f000 faaa 	bl	80021a2 <memmove>
 8001c4e:	68a3      	ldr	r3, [r4, #8]
 8001c50:	1b9b      	subs	r3, r3, r6
 8001c52:	60a3      	str	r3, [r4, #8]
 8001c54:	6823      	ldr	r3, [r4, #0]
 8001c56:	441e      	add	r6, r3
 8001c58:	6026      	str	r6, [r4, #0]
 8001c5a:	2000      	movs	r0, #0
 8001c5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c60:	462a      	mov	r2, r5
 8001c62:	f000 fb65 	bl	8002330 <_realloc_r>
 8001c66:	4606      	mov	r6, r0
 8001c68:	2800      	cmp	r0, #0
 8001c6a:	d1e1      	bne.n	8001c30 <__ssputs_r+0x70>
 8001c6c:	6921      	ldr	r1, [r4, #16]
 8001c6e:	4650      	mov	r0, sl
 8001c70:	f000 fab2 	bl	80021d8 <_free_r>
 8001c74:	e7c7      	b.n	8001c06 <__ssputs_r+0x46>
	...

08001c78 <_svfiprintf_r>:
 8001c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001c7c:	b09d      	sub	sp, #116	; 0x74
 8001c7e:	4680      	mov	r8, r0
 8001c80:	9303      	str	r3, [sp, #12]
 8001c82:	898b      	ldrh	r3, [r1, #12]
 8001c84:	061c      	lsls	r4, r3, #24
 8001c86:	460d      	mov	r5, r1
 8001c88:	4616      	mov	r6, r2
 8001c8a:	d50f      	bpl.n	8001cac <_svfiprintf_r+0x34>
 8001c8c:	690b      	ldr	r3, [r1, #16]
 8001c8e:	b96b      	cbnz	r3, 8001cac <_svfiprintf_r+0x34>
 8001c90:	2140      	movs	r1, #64	; 0x40
 8001c92:	f000 faef 	bl	8002274 <_malloc_r>
 8001c96:	6028      	str	r0, [r5, #0]
 8001c98:	6128      	str	r0, [r5, #16]
 8001c9a:	b928      	cbnz	r0, 8001ca8 <_svfiprintf_r+0x30>
 8001c9c:	230c      	movs	r3, #12
 8001c9e:	f8c8 3000 	str.w	r3, [r8]
 8001ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ca6:	e0c5      	b.n	8001e34 <_svfiprintf_r+0x1bc>
 8001ca8:	2340      	movs	r3, #64	; 0x40
 8001caa:	616b      	str	r3, [r5, #20]
 8001cac:	2300      	movs	r3, #0
 8001cae:	9309      	str	r3, [sp, #36]	; 0x24
 8001cb0:	2320      	movs	r3, #32
 8001cb2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8001cb6:	2330      	movs	r3, #48	; 0x30
 8001cb8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8001cbc:	f04f 0b01 	mov.w	fp, #1
 8001cc0:	4637      	mov	r7, r6
 8001cc2:	463c      	mov	r4, r7
 8001cc4:	f814 3b01 	ldrb.w	r3, [r4], #1
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d13c      	bne.n	8001d46 <_svfiprintf_r+0xce>
 8001ccc:	ebb7 0a06 	subs.w	sl, r7, r6
 8001cd0:	d00b      	beq.n	8001cea <_svfiprintf_r+0x72>
 8001cd2:	4653      	mov	r3, sl
 8001cd4:	4632      	mov	r2, r6
 8001cd6:	4629      	mov	r1, r5
 8001cd8:	4640      	mov	r0, r8
 8001cda:	f7ff ff71 	bl	8001bc0 <__ssputs_r>
 8001cde:	3001      	adds	r0, #1
 8001ce0:	f000 80a3 	beq.w	8001e2a <_svfiprintf_r+0x1b2>
 8001ce4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001ce6:	4453      	add	r3, sl
 8001ce8:	9309      	str	r3, [sp, #36]	; 0x24
 8001cea:	783b      	ldrb	r3, [r7, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	f000 809c 	beq.w	8001e2a <_svfiprintf_r+0x1b2>
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	f04f 32ff 	mov.w	r2, #4294967295
 8001cf8:	9304      	str	r3, [sp, #16]
 8001cfa:	9307      	str	r3, [sp, #28]
 8001cfc:	9205      	str	r2, [sp, #20]
 8001cfe:	9306      	str	r3, [sp, #24]
 8001d00:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8001d04:	931a      	str	r3, [sp, #104]	; 0x68
 8001d06:	2205      	movs	r2, #5
 8001d08:	7821      	ldrb	r1, [r4, #0]
 8001d0a:	4850      	ldr	r0, [pc, #320]	; (8001e4c <_svfiprintf_r+0x1d4>)
 8001d0c:	f7fe fa60 	bl	80001d0 <memchr>
 8001d10:	1c67      	adds	r7, r4, #1
 8001d12:	9b04      	ldr	r3, [sp, #16]
 8001d14:	b9d8      	cbnz	r0, 8001d4e <_svfiprintf_r+0xd6>
 8001d16:	06d9      	lsls	r1, r3, #27
 8001d18:	bf44      	itt	mi
 8001d1a:	2220      	movmi	r2, #32
 8001d1c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d20:	071a      	lsls	r2, r3, #28
 8001d22:	bf44      	itt	mi
 8001d24:	222b      	movmi	r2, #43	; 0x2b
 8001d26:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8001d2a:	7822      	ldrb	r2, [r4, #0]
 8001d2c:	2a2a      	cmp	r2, #42	; 0x2a
 8001d2e:	d016      	beq.n	8001d5e <_svfiprintf_r+0xe6>
 8001d30:	9a07      	ldr	r2, [sp, #28]
 8001d32:	2100      	movs	r1, #0
 8001d34:	200a      	movs	r0, #10
 8001d36:	4627      	mov	r7, r4
 8001d38:	3401      	adds	r4, #1
 8001d3a:	783b      	ldrb	r3, [r7, #0]
 8001d3c:	3b30      	subs	r3, #48	; 0x30
 8001d3e:	2b09      	cmp	r3, #9
 8001d40:	d951      	bls.n	8001de6 <_svfiprintf_r+0x16e>
 8001d42:	b1c9      	cbz	r1, 8001d78 <_svfiprintf_r+0x100>
 8001d44:	e011      	b.n	8001d6a <_svfiprintf_r+0xf2>
 8001d46:	2b25      	cmp	r3, #37	; 0x25
 8001d48:	d0c0      	beq.n	8001ccc <_svfiprintf_r+0x54>
 8001d4a:	4627      	mov	r7, r4
 8001d4c:	e7b9      	b.n	8001cc2 <_svfiprintf_r+0x4a>
 8001d4e:	4a3f      	ldr	r2, [pc, #252]	; (8001e4c <_svfiprintf_r+0x1d4>)
 8001d50:	1a80      	subs	r0, r0, r2
 8001d52:	fa0b f000 	lsl.w	r0, fp, r0
 8001d56:	4318      	orrs	r0, r3
 8001d58:	9004      	str	r0, [sp, #16]
 8001d5a:	463c      	mov	r4, r7
 8001d5c:	e7d3      	b.n	8001d06 <_svfiprintf_r+0x8e>
 8001d5e:	9a03      	ldr	r2, [sp, #12]
 8001d60:	1d11      	adds	r1, r2, #4
 8001d62:	6812      	ldr	r2, [r2, #0]
 8001d64:	9103      	str	r1, [sp, #12]
 8001d66:	2a00      	cmp	r2, #0
 8001d68:	db01      	blt.n	8001d6e <_svfiprintf_r+0xf6>
 8001d6a:	9207      	str	r2, [sp, #28]
 8001d6c:	e004      	b.n	8001d78 <_svfiprintf_r+0x100>
 8001d6e:	4252      	negs	r2, r2
 8001d70:	f043 0302 	orr.w	r3, r3, #2
 8001d74:	9207      	str	r2, [sp, #28]
 8001d76:	9304      	str	r3, [sp, #16]
 8001d78:	783b      	ldrb	r3, [r7, #0]
 8001d7a:	2b2e      	cmp	r3, #46	; 0x2e
 8001d7c:	d10e      	bne.n	8001d9c <_svfiprintf_r+0x124>
 8001d7e:	787b      	ldrb	r3, [r7, #1]
 8001d80:	2b2a      	cmp	r3, #42	; 0x2a
 8001d82:	f107 0101 	add.w	r1, r7, #1
 8001d86:	d132      	bne.n	8001dee <_svfiprintf_r+0x176>
 8001d88:	9b03      	ldr	r3, [sp, #12]
 8001d8a:	1d1a      	adds	r2, r3, #4
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	9203      	str	r2, [sp, #12]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bfb8      	it	lt
 8001d94:	f04f 33ff 	movlt.w	r3, #4294967295
 8001d98:	3702      	adds	r7, #2
 8001d9a:	9305      	str	r3, [sp, #20]
 8001d9c:	4c2c      	ldr	r4, [pc, #176]	; (8001e50 <_svfiprintf_r+0x1d8>)
 8001d9e:	7839      	ldrb	r1, [r7, #0]
 8001da0:	2203      	movs	r2, #3
 8001da2:	4620      	mov	r0, r4
 8001da4:	f7fe fa14 	bl	80001d0 <memchr>
 8001da8:	b138      	cbz	r0, 8001dba <_svfiprintf_r+0x142>
 8001daa:	2340      	movs	r3, #64	; 0x40
 8001dac:	1b00      	subs	r0, r0, r4
 8001dae:	fa03 f000 	lsl.w	r0, r3, r0
 8001db2:	9b04      	ldr	r3, [sp, #16]
 8001db4:	4303      	orrs	r3, r0
 8001db6:	9304      	str	r3, [sp, #16]
 8001db8:	3701      	adds	r7, #1
 8001dba:	7839      	ldrb	r1, [r7, #0]
 8001dbc:	4825      	ldr	r0, [pc, #148]	; (8001e54 <_svfiprintf_r+0x1dc>)
 8001dbe:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8001dc2:	2206      	movs	r2, #6
 8001dc4:	1c7e      	adds	r6, r7, #1
 8001dc6:	f7fe fa03 	bl	80001d0 <memchr>
 8001dca:	2800      	cmp	r0, #0
 8001dcc:	d035      	beq.n	8001e3a <_svfiprintf_r+0x1c2>
 8001dce:	4b22      	ldr	r3, [pc, #136]	; (8001e58 <_svfiprintf_r+0x1e0>)
 8001dd0:	b9fb      	cbnz	r3, 8001e12 <_svfiprintf_r+0x19a>
 8001dd2:	9b03      	ldr	r3, [sp, #12]
 8001dd4:	3307      	adds	r3, #7
 8001dd6:	f023 0307 	bic.w	r3, r3, #7
 8001dda:	3308      	adds	r3, #8
 8001ddc:	9303      	str	r3, [sp, #12]
 8001dde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001de0:	444b      	add	r3, r9
 8001de2:	9309      	str	r3, [sp, #36]	; 0x24
 8001de4:	e76c      	b.n	8001cc0 <_svfiprintf_r+0x48>
 8001de6:	fb00 3202 	mla	r2, r0, r2, r3
 8001dea:	2101      	movs	r1, #1
 8001dec:	e7a3      	b.n	8001d36 <_svfiprintf_r+0xbe>
 8001dee:	2300      	movs	r3, #0
 8001df0:	9305      	str	r3, [sp, #20]
 8001df2:	4618      	mov	r0, r3
 8001df4:	240a      	movs	r4, #10
 8001df6:	460f      	mov	r7, r1
 8001df8:	3101      	adds	r1, #1
 8001dfa:	783a      	ldrb	r2, [r7, #0]
 8001dfc:	3a30      	subs	r2, #48	; 0x30
 8001dfe:	2a09      	cmp	r2, #9
 8001e00:	d903      	bls.n	8001e0a <_svfiprintf_r+0x192>
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d0ca      	beq.n	8001d9c <_svfiprintf_r+0x124>
 8001e06:	9005      	str	r0, [sp, #20]
 8001e08:	e7c8      	b.n	8001d9c <_svfiprintf_r+0x124>
 8001e0a:	fb04 2000 	mla	r0, r4, r0, r2
 8001e0e:	2301      	movs	r3, #1
 8001e10:	e7f1      	b.n	8001df6 <_svfiprintf_r+0x17e>
 8001e12:	ab03      	add	r3, sp, #12
 8001e14:	9300      	str	r3, [sp, #0]
 8001e16:	462a      	mov	r2, r5
 8001e18:	4b10      	ldr	r3, [pc, #64]	; (8001e5c <_svfiprintf_r+0x1e4>)
 8001e1a:	a904      	add	r1, sp, #16
 8001e1c:	4640      	mov	r0, r8
 8001e1e:	f3af 8000 	nop.w
 8001e22:	f1b0 3fff 	cmp.w	r0, #4294967295
 8001e26:	4681      	mov	r9, r0
 8001e28:	d1d9      	bne.n	8001dde <_svfiprintf_r+0x166>
 8001e2a:	89ab      	ldrh	r3, [r5, #12]
 8001e2c:	065b      	lsls	r3, r3, #25
 8001e2e:	f53f af38 	bmi.w	8001ca2 <_svfiprintf_r+0x2a>
 8001e32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001e34:	b01d      	add	sp, #116	; 0x74
 8001e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001e3a:	ab03      	add	r3, sp, #12
 8001e3c:	9300      	str	r3, [sp, #0]
 8001e3e:	462a      	mov	r2, r5
 8001e40:	4b06      	ldr	r3, [pc, #24]	; (8001e5c <_svfiprintf_r+0x1e4>)
 8001e42:	a904      	add	r1, sp, #16
 8001e44:	4640      	mov	r0, r8
 8001e46:	f000 f881 	bl	8001f4c <_printf_i>
 8001e4a:	e7ea      	b.n	8001e22 <_svfiprintf_r+0x1aa>
 8001e4c:	08002427 	.word	0x08002427
 8001e50:	0800242d 	.word	0x0800242d
 8001e54:	08002431 	.word	0x08002431
 8001e58:	00000000 	.word	0x00000000
 8001e5c:	08001bc1 	.word	0x08001bc1

08001e60 <_printf_common>:
 8001e60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001e64:	4691      	mov	r9, r2
 8001e66:	461f      	mov	r7, r3
 8001e68:	688a      	ldr	r2, [r1, #8]
 8001e6a:	690b      	ldr	r3, [r1, #16]
 8001e6c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e70:	4293      	cmp	r3, r2
 8001e72:	bfb8      	it	lt
 8001e74:	4613      	movlt	r3, r2
 8001e76:	f8c9 3000 	str.w	r3, [r9]
 8001e7a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001e7e:	4606      	mov	r6, r0
 8001e80:	460c      	mov	r4, r1
 8001e82:	b112      	cbz	r2, 8001e8a <_printf_common+0x2a>
 8001e84:	3301      	adds	r3, #1
 8001e86:	f8c9 3000 	str.w	r3, [r9]
 8001e8a:	6823      	ldr	r3, [r4, #0]
 8001e8c:	0699      	lsls	r1, r3, #26
 8001e8e:	bf42      	ittt	mi
 8001e90:	f8d9 3000 	ldrmi.w	r3, [r9]
 8001e94:	3302      	addmi	r3, #2
 8001e96:	f8c9 3000 	strmi.w	r3, [r9]
 8001e9a:	6825      	ldr	r5, [r4, #0]
 8001e9c:	f015 0506 	ands.w	r5, r5, #6
 8001ea0:	d107      	bne.n	8001eb2 <_printf_common+0x52>
 8001ea2:	f104 0a19 	add.w	sl, r4, #25
 8001ea6:	68e3      	ldr	r3, [r4, #12]
 8001ea8:	f8d9 2000 	ldr.w	r2, [r9]
 8001eac:	1a9b      	subs	r3, r3, r2
 8001eae:	429d      	cmp	r5, r3
 8001eb0:	db29      	blt.n	8001f06 <_printf_common+0xa6>
 8001eb2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8001eb6:	6822      	ldr	r2, [r4, #0]
 8001eb8:	3300      	adds	r3, #0
 8001eba:	bf18      	it	ne
 8001ebc:	2301      	movne	r3, #1
 8001ebe:	0692      	lsls	r2, r2, #26
 8001ec0:	d42e      	bmi.n	8001f20 <_printf_common+0xc0>
 8001ec2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8001ec6:	4639      	mov	r1, r7
 8001ec8:	4630      	mov	r0, r6
 8001eca:	47c0      	blx	r8
 8001ecc:	3001      	adds	r0, #1
 8001ece:	d021      	beq.n	8001f14 <_printf_common+0xb4>
 8001ed0:	6823      	ldr	r3, [r4, #0]
 8001ed2:	68e5      	ldr	r5, [r4, #12]
 8001ed4:	f8d9 2000 	ldr.w	r2, [r9]
 8001ed8:	f003 0306 	and.w	r3, r3, #6
 8001edc:	2b04      	cmp	r3, #4
 8001ede:	bf08      	it	eq
 8001ee0:	1aad      	subeq	r5, r5, r2
 8001ee2:	68a3      	ldr	r3, [r4, #8]
 8001ee4:	6922      	ldr	r2, [r4, #16]
 8001ee6:	bf0c      	ite	eq
 8001ee8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8001eec:	2500      	movne	r5, #0
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	bfc4      	itt	gt
 8001ef2:	1a9b      	subgt	r3, r3, r2
 8001ef4:	18ed      	addgt	r5, r5, r3
 8001ef6:	f04f 0900 	mov.w	r9, #0
 8001efa:	341a      	adds	r4, #26
 8001efc:	454d      	cmp	r5, r9
 8001efe:	d11b      	bne.n	8001f38 <_printf_common+0xd8>
 8001f00:	2000      	movs	r0, #0
 8001f02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f06:	2301      	movs	r3, #1
 8001f08:	4652      	mov	r2, sl
 8001f0a:	4639      	mov	r1, r7
 8001f0c:	4630      	mov	r0, r6
 8001f0e:	47c0      	blx	r8
 8001f10:	3001      	adds	r0, #1
 8001f12:	d103      	bne.n	8001f1c <_printf_common+0xbc>
 8001f14:	f04f 30ff 	mov.w	r0, #4294967295
 8001f18:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001f1c:	3501      	adds	r5, #1
 8001f1e:	e7c2      	b.n	8001ea6 <_printf_common+0x46>
 8001f20:	18e1      	adds	r1, r4, r3
 8001f22:	1c5a      	adds	r2, r3, #1
 8001f24:	2030      	movs	r0, #48	; 0x30
 8001f26:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001f2a:	4422      	add	r2, r4
 8001f2c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001f30:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8001f34:	3302      	adds	r3, #2
 8001f36:	e7c4      	b.n	8001ec2 <_printf_common+0x62>
 8001f38:	2301      	movs	r3, #1
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	4639      	mov	r1, r7
 8001f3e:	4630      	mov	r0, r6
 8001f40:	47c0      	blx	r8
 8001f42:	3001      	adds	r0, #1
 8001f44:	d0e6      	beq.n	8001f14 <_printf_common+0xb4>
 8001f46:	f109 0901 	add.w	r9, r9, #1
 8001f4a:	e7d7      	b.n	8001efc <_printf_common+0x9c>

08001f4c <_printf_i>:
 8001f4c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001f50:	4617      	mov	r7, r2
 8001f52:	7e0a      	ldrb	r2, [r1, #24]
 8001f54:	b085      	sub	sp, #20
 8001f56:	2a6e      	cmp	r2, #110	; 0x6e
 8001f58:	4698      	mov	r8, r3
 8001f5a:	4606      	mov	r6, r0
 8001f5c:	460c      	mov	r4, r1
 8001f5e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001f60:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 8001f64:	f000 80bc 	beq.w	80020e0 <_printf_i+0x194>
 8001f68:	d81a      	bhi.n	8001fa0 <_printf_i+0x54>
 8001f6a:	2a63      	cmp	r2, #99	; 0x63
 8001f6c:	d02e      	beq.n	8001fcc <_printf_i+0x80>
 8001f6e:	d80a      	bhi.n	8001f86 <_printf_i+0x3a>
 8001f70:	2a00      	cmp	r2, #0
 8001f72:	f000 80c8 	beq.w	8002106 <_printf_i+0x1ba>
 8001f76:	2a58      	cmp	r2, #88	; 0x58
 8001f78:	f000 808a 	beq.w	8002090 <_printf_i+0x144>
 8001f7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001f80:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 8001f84:	e02a      	b.n	8001fdc <_printf_i+0x90>
 8001f86:	2a64      	cmp	r2, #100	; 0x64
 8001f88:	d001      	beq.n	8001f8e <_printf_i+0x42>
 8001f8a:	2a69      	cmp	r2, #105	; 0x69
 8001f8c:	d1f6      	bne.n	8001f7c <_printf_i+0x30>
 8001f8e:	6821      	ldr	r1, [r4, #0]
 8001f90:	681a      	ldr	r2, [r3, #0]
 8001f92:	f011 0f80 	tst.w	r1, #128	; 0x80
 8001f96:	d023      	beq.n	8001fe0 <_printf_i+0x94>
 8001f98:	1d11      	adds	r1, r2, #4
 8001f9a:	6019      	str	r1, [r3, #0]
 8001f9c:	6813      	ldr	r3, [r2, #0]
 8001f9e:	e027      	b.n	8001ff0 <_printf_i+0xa4>
 8001fa0:	2a73      	cmp	r2, #115	; 0x73
 8001fa2:	f000 80b4 	beq.w	800210e <_printf_i+0x1c2>
 8001fa6:	d808      	bhi.n	8001fba <_printf_i+0x6e>
 8001fa8:	2a6f      	cmp	r2, #111	; 0x6f
 8001faa:	d02a      	beq.n	8002002 <_printf_i+0xb6>
 8001fac:	2a70      	cmp	r2, #112	; 0x70
 8001fae:	d1e5      	bne.n	8001f7c <_printf_i+0x30>
 8001fb0:	680a      	ldr	r2, [r1, #0]
 8001fb2:	f042 0220 	orr.w	r2, r2, #32
 8001fb6:	600a      	str	r2, [r1, #0]
 8001fb8:	e003      	b.n	8001fc2 <_printf_i+0x76>
 8001fba:	2a75      	cmp	r2, #117	; 0x75
 8001fbc:	d021      	beq.n	8002002 <_printf_i+0xb6>
 8001fbe:	2a78      	cmp	r2, #120	; 0x78
 8001fc0:	d1dc      	bne.n	8001f7c <_printf_i+0x30>
 8001fc2:	2278      	movs	r2, #120	; 0x78
 8001fc4:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8001fc8:	496e      	ldr	r1, [pc, #440]	; (8002184 <_printf_i+0x238>)
 8001fca:	e064      	b.n	8002096 <_printf_i+0x14a>
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8001fd2:	1d11      	adds	r1, r2, #4
 8001fd4:	6019      	str	r1, [r3, #0]
 8001fd6:	6813      	ldr	r3, [r2, #0]
 8001fd8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8001fdc:	2301      	movs	r3, #1
 8001fde:	e0a3      	b.n	8002128 <_printf_i+0x1dc>
 8001fe0:	f011 0f40 	tst.w	r1, #64	; 0x40
 8001fe4:	f102 0104 	add.w	r1, r2, #4
 8001fe8:	6019      	str	r1, [r3, #0]
 8001fea:	d0d7      	beq.n	8001f9c <_printf_i+0x50>
 8001fec:	f9b2 3000 	ldrsh.w	r3, [r2]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	da03      	bge.n	8001ffc <_printf_i+0xb0>
 8001ff4:	222d      	movs	r2, #45	; 0x2d
 8001ff6:	425b      	negs	r3, r3
 8001ff8:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8001ffc:	4962      	ldr	r1, [pc, #392]	; (8002188 <_printf_i+0x23c>)
 8001ffe:	220a      	movs	r2, #10
 8002000:	e017      	b.n	8002032 <_printf_i+0xe6>
 8002002:	6820      	ldr	r0, [r4, #0]
 8002004:	6819      	ldr	r1, [r3, #0]
 8002006:	f010 0f80 	tst.w	r0, #128	; 0x80
 800200a:	d003      	beq.n	8002014 <_printf_i+0xc8>
 800200c:	1d08      	adds	r0, r1, #4
 800200e:	6018      	str	r0, [r3, #0]
 8002010:	680b      	ldr	r3, [r1, #0]
 8002012:	e006      	b.n	8002022 <_printf_i+0xd6>
 8002014:	f010 0f40 	tst.w	r0, #64	; 0x40
 8002018:	f101 0004 	add.w	r0, r1, #4
 800201c:	6018      	str	r0, [r3, #0]
 800201e:	d0f7      	beq.n	8002010 <_printf_i+0xc4>
 8002020:	880b      	ldrh	r3, [r1, #0]
 8002022:	4959      	ldr	r1, [pc, #356]	; (8002188 <_printf_i+0x23c>)
 8002024:	2a6f      	cmp	r2, #111	; 0x6f
 8002026:	bf14      	ite	ne
 8002028:	220a      	movne	r2, #10
 800202a:	2208      	moveq	r2, #8
 800202c:	2000      	movs	r0, #0
 800202e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8002032:	6865      	ldr	r5, [r4, #4]
 8002034:	60a5      	str	r5, [r4, #8]
 8002036:	2d00      	cmp	r5, #0
 8002038:	f2c0 809c 	blt.w	8002174 <_printf_i+0x228>
 800203c:	6820      	ldr	r0, [r4, #0]
 800203e:	f020 0004 	bic.w	r0, r0, #4
 8002042:	6020      	str	r0, [r4, #0]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d13f      	bne.n	80020c8 <_printf_i+0x17c>
 8002048:	2d00      	cmp	r5, #0
 800204a:	f040 8095 	bne.w	8002178 <_printf_i+0x22c>
 800204e:	4675      	mov	r5, lr
 8002050:	2a08      	cmp	r2, #8
 8002052:	d10b      	bne.n	800206c <_printf_i+0x120>
 8002054:	6823      	ldr	r3, [r4, #0]
 8002056:	07da      	lsls	r2, r3, #31
 8002058:	d508      	bpl.n	800206c <_printf_i+0x120>
 800205a:	6923      	ldr	r3, [r4, #16]
 800205c:	6862      	ldr	r2, [r4, #4]
 800205e:	429a      	cmp	r2, r3
 8002060:	bfde      	ittt	le
 8002062:	2330      	movle	r3, #48	; 0x30
 8002064:	f805 3c01 	strble.w	r3, [r5, #-1]
 8002068:	f105 35ff 	addle.w	r5, r5, #4294967295
 800206c:	ebae 0305 	sub.w	r3, lr, r5
 8002070:	6123      	str	r3, [r4, #16]
 8002072:	f8cd 8000 	str.w	r8, [sp]
 8002076:	463b      	mov	r3, r7
 8002078:	aa03      	add	r2, sp, #12
 800207a:	4621      	mov	r1, r4
 800207c:	4630      	mov	r0, r6
 800207e:	f7ff feef 	bl	8001e60 <_printf_common>
 8002082:	3001      	adds	r0, #1
 8002084:	d155      	bne.n	8002132 <_printf_i+0x1e6>
 8002086:	f04f 30ff 	mov.w	r0, #4294967295
 800208a:	b005      	add	sp, #20
 800208c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002090:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 8002094:	493c      	ldr	r1, [pc, #240]	; (8002188 <_printf_i+0x23c>)
 8002096:	6822      	ldr	r2, [r4, #0]
 8002098:	6818      	ldr	r0, [r3, #0]
 800209a:	f012 0f80 	tst.w	r2, #128	; 0x80
 800209e:	f100 0504 	add.w	r5, r0, #4
 80020a2:	601d      	str	r5, [r3, #0]
 80020a4:	d001      	beq.n	80020aa <_printf_i+0x15e>
 80020a6:	6803      	ldr	r3, [r0, #0]
 80020a8:	e002      	b.n	80020b0 <_printf_i+0x164>
 80020aa:	0655      	lsls	r5, r2, #25
 80020ac:	d5fb      	bpl.n	80020a6 <_printf_i+0x15a>
 80020ae:	8803      	ldrh	r3, [r0, #0]
 80020b0:	07d0      	lsls	r0, r2, #31
 80020b2:	bf44      	itt	mi
 80020b4:	f042 0220 	orrmi.w	r2, r2, #32
 80020b8:	6022      	strmi	r2, [r4, #0]
 80020ba:	b91b      	cbnz	r3, 80020c4 <_printf_i+0x178>
 80020bc:	6822      	ldr	r2, [r4, #0]
 80020be:	f022 0220 	bic.w	r2, r2, #32
 80020c2:	6022      	str	r2, [r4, #0]
 80020c4:	2210      	movs	r2, #16
 80020c6:	e7b1      	b.n	800202c <_printf_i+0xe0>
 80020c8:	4675      	mov	r5, lr
 80020ca:	fbb3 f0f2 	udiv	r0, r3, r2
 80020ce:	fb02 3310 	mls	r3, r2, r0, r3
 80020d2:	5ccb      	ldrb	r3, [r1, r3]
 80020d4:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80020d8:	4603      	mov	r3, r0
 80020da:	2800      	cmp	r0, #0
 80020dc:	d1f5      	bne.n	80020ca <_printf_i+0x17e>
 80020de:	e7b7      	b.n	8002050 <_printf_i+0x104>
 80020e0:	6808      	ldr	r0, [r1, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	6949      	ldr	r1, [r1, #20]
 80020e6:	f010 0f80 	tst.w	r0, #128	; 0x80
 80020ea:	d004      	beq.n	80020f6 <_printf_i+0x1aa>
 80020ec:	1d10      	adds	r0, r2, #4
 80020ee:	6018      	str	r0, [r3, #0]
 80020f0:	6813      	ldr	r3, [r2, #0]
 80020f2:	6019      	str	r1, [r3, #0]
 80020f4:	e007      	b.n	8002106 <_printf_i+0x1ba>
 80020f6:	f010 0f40 	tst.w	r0, #64	; 0x40
 80020fa:	f102 0004 	add.w	r0, r2, #4
 80020fe:	6018      	str	r0, [r3, #0]
 8002100:	6813      	ldr	r3, [r2, #0]
 8002102:	d0f6      	beq.n	80020f2 <_printf_i+0x1a6>
 8002104:	8019      	strh	r1, [r3, #0]
 8002106:	2300      	movs	r3, #0
 8002108:	6123      	str	r3, [r4, #16]
 800210a:	4675      	mov	r5, lr
 800210c:	e7b1      	b.n	8002072 <_printf_i+0x126>
 800210e:	681a      	ldr	r2, [r3, #0]
 8002110:	1d11      	adds	r1, r2, #4
 8002112:	6019      	str	r1, [r3, #0]
 8002114:	6815      	ldr	r5, [r2, #0]
 8002116:	6862      	ldr	r2, [r4, #4]
 8002118:	2100      	movs	r1, #0
 800211a:	4628      	mov	r0, r5
 800211c:	f7fe f858 	bl	80001d0 <memchr>
 8002120:	b108      	cbz	r0, 8002126 <_printf_i+0x1da>
 8002122:	1b40      	subs	r0, r0, r5
 8002124:	6060      	str	r0, [r4, #4]
 8002126:	6863      	ldr	r3, [r4, #4]
 8002128:	6123      	str	r3, [r4, #16]
 800212a:	2300      	movs	r3, #0
 800212c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8002130:	e79f      	b.n	8002072 <_printf_i+0x126>
 8002132:	6923      	ldr	r3, [r4, #16]
 8002134:	462a      	mov	r2, r5
 8002136:	4639      	mov	r1, r7
 8002138:	4630      	mov	r0, r6
 800213a:	47c0      	blx	r8
 800213c:	3001      	adds	r0, #1
 800213e:	d0a2      	beq.n	8002086 <_printf_i+0x13a>
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	079b      	lsls	r3, r3, #30
 8002144:	d507      	bpl.n	8002156 <_printf_i+0x20a>
 8002146:	2500      	movs	r5, #0
 8002148:	f104 0919 	add.w	r9, r4, #25
 800214c:	68e3      	ldr	r3, [r4, #12]
 800214e:	9a03      	ldr	r2, [sp, #12]
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	429d      	cmp	r5, r3
 8002154:	db05      	blt.n	8002162 <_printf_i+0x216>
 8002156:	68e0      	ldr	r0, [r4, #12]
 8002158:	9b03      	ldr	r3, [sp, #12]
 800215a:	4298      	cmp	r0, r3
 800215c:	bfb8      	it	lt
 800215e:	4618      	movlt	r0, r3
 8002160:	e793      	b.n	800208a <_printf_i+0x13e>
 8002162:	2301      	movs	r3, #1
 8002164:	464a      	mov	r2, r9
 8002166:	4639      	mov	r1, r7
 8002168:	4630      	mov	r0, r6
 800216a:	47c0      	blx	r8
 800216c:	3001      	adds	r0, #1
 800216e:	d08a      	beq.n	8002086 <_printf_i+0x13a>
 8002170:	3501      	adds	r5, #1
 8002172:	e7eb      	b.n	800214c <_printf_i+0x200>
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1a7      	bne.n	80020c8 <_printf_i+0x17c>
 8002178:	780b      	ldrb	r3, [r1, #0]
 800217a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800217e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8002182:	e765      	b.n	8002050 <_printf_i+0x104>
 8002184:	08002449 	.word	0x08002449
 8002188:	08002438 	.word	0x08002438

0800218c <memcpy>:
 800218c:	b510      	push	{r4, lr}
 800218e:	1e43      	subs	r3, r0, #1
 8002190:	440a      	add	r2, r1
 8002192:	4291      	cmp	r1, r2
 8002194:	d100      	bne.n	8002198 <memcpy+0xc>
 8002196:	bd10      	pop	{r4, pc}
 8002198:	f811 4b01 	ldrb.w	r4, [r1], #1
 800219c:	f803 4f01 	strb.w	r4, [r3, #1]!
 80021a0:	e7f7      	b.n	8002192 <memcpy+0x6>

080021a2 <memmove>:
 80021a2:	4288      	cmp	r0, r1
 80021a4:	b510      	push	{r4, lr}
 80021a6:	eb01 0302 	add.w	r3, r1, r2
 80021aa:	d803      	bhi.n	80021b4 <memmove+0x12>
 80021ac:	1e42      	subs	r2, r0, #1
 80021ae:	4299      	cmp	r1, r3
 80021b0:	d10c      	bne.n	80021cc <memmove+0x2a>
 80021b2:	bd10      	pop	{r4, pc}
 80021b4:	4298      	cmp	r0, r3
 80021b6:	d2f9      	bcs.n	80021ac <memmove+0xa>
 80021b8:	1881      	adds	r1, r0, r2
 80021ba:	1ad2      	subs	r2, r2, r3
 80021bc:	42d3      	cmn	r3, r2
 80021be:	d100      	bne.n	80021c2 <memmove+0x20>
 80021c0:	bd10      	pop	{r4, pc}
 80021c2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80021c6:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80021ca:	e7f7      	b.n	80021bc <memmove+0x1a>
 80021cc:	f811 4b01 	ldrb.w	r4, [r1], #1
 80021d0:	f802 4f01 	strb.w	r4, [r2, #1]!
 80021d4:	e7eb      	b.n	80021ae <memmove+0xc>
	...

080021d8 <_free_r>:
 80021d8:	b538      	push	{r3, r4, r5, lr}
 80021da:	4605      	mov	r5, r0
 80021dc:	2900      	cmp	r1, #0
 80021de:	d045      	beq.n	800226c <_free_r+0x94>
 80021e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80021e4:	1f0c      	subs	r4, r1, #4
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	bfb8      	it	lt
 80021ea:	18e4      	addlt	r4, r4, r3
 80021ec:	f000 f8d6 	bl	800239c <__malloc_lock>
 80021f0:	4a1f      	ldr	r2, [pc, #124]	; (8002270 <_free_r+0x98>)
 80021f2:	6813      	ldr	r3, [r2, #0]
 80021f4:	4610      	mov	r0, r2
 80021f6:	b933      	cbnz	r3, 8002206 <_free_r+0x2e>
 80021f8:	6063      	str	r3, [r4, #4]
 80021fa:	6014      	str	r4, [r2, #0]
 80021fc:	4628      	mov	r0, r5
 80021fe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002202:	f000 b8cc 	b.w	800239e <__malloc_unlock>
 8002206:	42a3      	cmp	r3, r4
 8002208:	d90c      	bls.n	8002224 <_free_r+0x4c>
 800220a:	6821      	ldr	r1, [r4, #0]
 800220c:	1862      	adds	r2, r4, r1
 800220e:	4293      	cmp	r3, r2
 8002210:	bf04      	itt	eq
 8002212:	681a      	ldreq	r2, [r3, #0]
 8002214:	685b      	ldreq	r3, [r3, #4]
 8002216:	6063      	str	r3, [r4, #4]
 8002218:	bf04      	itt	eq
 800221a:	1852      	addeq	r2, r2, r1
 800221c:	6022      	streq	r2, [r4, #0]
 800221e:	6004      	str	r4, [r0, #0]
 8002220:	e7ec      	b.n	80021fc <_free_r+0x24>
 8002222:	4613      	mov	r3, r2
 8002224:	685a      	ldr	r2, [r3, #4]
 8002226:	b10a      	cbz	r2, 800222c <_free_r+0x54>
 8002228:	42a2      	cmp	r2, r4
 800222a:	d9fa      	bls.n	8002222 <_free_r+0x4a>
 800222c:	6819      	ldr	r1, [r3, #0]
 800222e:	1858      	adds	r0, r3, r1
 8002230:	42a0      	cmp	r0, r4
 8002232:	d10b      	bne.n	800224c <_free_r+0x74>
 8002234:	6820      	ldr	r0, [r4, #0]
 8002236:	4401      	add	r1, r0
 8002238:	1858      	adds	r0, r3, r1
 800223a:	4282      	cmp	r2, r0
 800223c:	6019      	str	r1, [r3, #0]
 800223e:	d1dd      	bne.n	80021fc <_free_r+0x24>
 8002240:	6810      	ldr	r0, [r2, #0]
 8002242:	6852      	ldr	r2, [r2, #4]
 8002244:	605a      	str	r2, [r3, #4]
 8002246:	4401      	add	r1, r0
 8002248:	6019      	str	r1, [r3, #0]
 800224a:	e7d7      	b.n	80021fc <_free_r+0x24>
 800224c:	d902      	bls.n	8002254 <_free_r+0x7c>
 800224e:	230c      	movs	r3, #12
 8002250:	602b      	str	r3, [r5, #0]
 8002252:	e7d3      	b.n	80021fc <_free_r+0x24>
 8002254:	6820      	ldr	r0, [r4, #0]
 8002256:	1821      	adds	r1, r4, r0
 8002258:	428a      	cmp	r2, r1
 800225a:	bf04      	itt	eq
 800225c:	6811      	ldreq	r1, [r2, #0]
 800225e:	6852      	ldreq	r2, [r2, #4]
 8002260:	6062      	str	r2, [r4, #4]
 8002262:	bf04      	itt	eq
 8002264:	1809      	addeq	r1, r1, r0
 8002266:	6021      	streq	r1, [r4, #0]
 8002268:	605c      	str	r4, [r3, #4]
 800226a:	e7c7      	b.n	80021fc <_free_r+0x24>
 800226c:	bd38      	pop	{r3, r4, r5, pc}
 800226e:	bf00      	nop
 8002270:	200000f4 	.word	0x200000f4

08002274 <_malloc_r>:
 8002274:	b570      	push	{r4, r5, r6, lr}
 8002276:	1ccd      	adds	r5, r1, #3
 8002278:	f025 0503 	bic.w	r5, r5, #3
 800227c:	3508      	adds	r5, #8
 800227e:	2d0c      	cmp	r5, #12
 8002280:	bf38      	it	cc
 8002282:	250c      	movcc	r5, #12
 8002284:	2d00      	cmp	r5, #0
 8002286:	4606      	mov	r6, r0
 8002288:	db01      	blt.n	800228e <_malloc_r+0x1a>
 800228a:	42a9      	cmp	r1, r5
 800228c:	d903      	bls.n	8002296 <_malloc_r+0x22>
 800228e:	230c      	movs	r3, #12
 8002290:	6033      	str	r3, [r6, #0]
 8002292:	2000      	movs	r0, #0
 8002294:	bd70      	pop	{r4, r5, r6, pc}
 8002296:	f000 f881 	bl	800239c <__malloc_lock>
 800229a:	4a23      	ldr	r2, [pc, #140]	; (8002328 <_malloc_r+0xb4>)
 800229c:	6814      	ldr	r4, [r2, #0]
 800229e:	4621      	mov	r1, r4
 80022a0:	b991      	cbnz	r1, 80022c8 <_malloc_r+0x54>
 80022a2:	4c22      	ldr	r4, [pc, #136]	; (800232c <_malloc_r+0xb8>)
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	b91b      	cbnz	r3, 80022b0 <_malloc_r+0x3c>
 80022a8:	4630      	mov	r0, r6
 80022aa:	f000 f867 	bl	800237c <_sbrk_r>
 80022ae:	6020      	str	r0, [r4, #0]
 80022b0:	4629      	mov	r1, r5
 80022b2:	4630      	mov	r0, r6
 80022b4:	f000 f862 	bl	800237c <_sbrk_r>
 80022b8:	1c43      	adds	r3, r0, #1
 80022ba:	d126      	bne.n	800230a <_malloc_r+0x96>
 80022bc:	230c      	movs	r3, #12
 80022be:	6033      	str	r3, [r6, #0]
 80022c0:	4630      	mov	r0, r6
 80022c2:	f000 f86c 	bl	800239e <__malloc_unlock>
 80022c6:	e7e4      	b.n	8002292 <_malloc_r+0x1e>
 80022c8:	680b      	ldr	r3, [r1, #0]
 80022ca:	1b5b      	subs	r3, r3, r5
 80022cc:	d41a      	bmi.n	8002304 <_malloc_r+0x90>
 80022ce:	2b0b      	cmp	r3, #11
 80022d0:	d90f      	bls.n	80022f2 <_malloc_r+0x7e>
 80022d2:	600b      	str	r3, [r1, #0]
 80022d4:	50cd      	str	r5, [r1, r3]
 80022d6:	18cc      	adds	r4, r1, r3
 80022d8:	4630      	mov	r0, r6
 80022da:	f000 f860 	bl	800239e <__malloc_unlock>
 80022de:	f104 000b 	add.w	r0, r4, #11
 80022e2:	1d23      	adds	r3, r4, #4
 80022e4:	f020 0007 	bic.w	r0, r0, #7
 80022e8:	1ac3      	subs	r3, r0, r3
 80022ea:	d01b      	beq.n	8002324 <_malloc_r+0xb0>
 80022ec:	425a      	negs	r2, r3
 80022ee:	50e2      	str	r2, [r4, r3]
 80022f0:	bd70      	pop	{r4, r5, r6, pc}
 80022f2:	428c      	cmp	r4, r1
 80022f4:	bf0d      	iteet	eq
 80022f6:	6863      	ldreq	r3, [r4, #4]
 80022f8:	684b      	ldrne	r3, [r1, #4]
 80022fa:	6063      	strne	r3, [r4, #4]
 80022fc:	6013      	streq	r3, [r2, #0]
 80022fe:	bf18      	it	ne
 8002300:	460c      	movne	r4, r1
 8002302:	e7e9      	b.n	80022d8 <_malloc_r+0x64>
 8002304:	460c      	mov	r4, r1
 8002306:	6849      	ldr	r1, [r1, #4]
 8002308:	e7ca      	b.n	80022a0 <_malloc_r+0x2c>
 800230a:	1cc4      	adds	r4, r0, #3
 800230c:	f024 0403 	bic.w	r4, r4, #3
 8002310:	42a0      	cmp	r0, r4
 8002312:	d005      	beq.n	8002320 <_malloc_r+0xac>
 8002314:	1a21      	subs	r1, r4, r0
 8002316:	4630      	mov	r0, r6
 8002318:	f000 f830 	bl	800237c <_sbrk_r>
 800231c:	3001      	adds	r0, #1
 800231e:	d0cd      	beq.n	80022bc <_malloc_r+0x48>
 8002320:	6025      	str	r5, [r4, #0]
 8002322:	e7d9      	b.n	80022d8 <_malloc_r+0x64>
 8002324:	bd70      	pop	{r4, r5, r6, pc}
 8002326:	bf00      	nop
 8002328:	200000f4 	.word	0x200000f4
 800232c:	200000f8 	.word	0x200000f8

08002330 <_realloc_r>:
 8002330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002332:	4607      	mov	r7, r0
 8002334:	4614      	mov	r4, r2
 8002336:	460e      	mov	r6, r1
 8002338:	b921      	cbnz	r1, 8002344 <_realloc_r+0x14>
 800233a:	4611      	mov	r1, r2
 800233c:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8002340:	f7ff bf98 	b.w	8002274 <_malloc_r>
 8002344:	b922      	cbnz	r2, 8002350 <_realloc_r+0x20>
 8002346:	f7ff ff47 	bl	80021d8 <_free_r>
 800234a:	4625      	mov	r5, r4
 800234c:	4628      	mov	r0, r5
 800234e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002350:	f000 f826 	bl	80023a0 <_malloc_usable_size_r>
 8002354:	4284      	cmp	r4, r0
 8002356:	d90f      	bls.n	8002378 <_realloc_r+0x48>
 8002358:	4621      	mov	r1, r4
 800235a:	4638      	mov	r0, r7
 800235c:	f7ff ff8a 	bl	8002274 <_malloc_r>
 8002360:	4605      	mov	r5, r0
 8002362:	2800      	cmp	r0, #0
 8002364:	d0f2      	beq.n	800234c <_realloc_r+0x1c>
 8002366:	4631      	mov	r1, r6
 8002368:	4622      	mov	r2, r4
 800236a:	f7ff ff0f 	bl	800218c <memcpy>
 800236e:	4631      	mov	r1, r6
 8002370:	4638      	mov	r0, r7
 8002372:	f7ff ff31 	bl	80021d8 <_free_r>
 8002376:	e7e9      	b.n	800234c <_realloc_r+0x1c>
 8002378:	4635      	mov	r5, r6
 800237a:	e7e7      	b.n	800234c <_realloc_r+0x1c>

0800237c <_sbrk_r>:
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	4c06      	ldr	r4, [pc, #24]	; (8002398 <_sbrk_r+0x1c>)
 8002380:	2300      	movs	r3, #0
 8002382:	4605      	mov	r5, r0
 8002384:	4608      	mov	r0, r1
 8002386:	6023      	str	r3, [r4, #0]
 8002388:	f000 f814 	bl	80023b4 <_sbrk>
 800238c:	1c43      	adds	r3, r0, #1
 800238e:	d102      	bne.n	8002396 <_sbrk_r+0x1a>
 8002390:	6823      	ldr	r3, [r4, #0]
 8002392:	b103      	cbz	r3, 8002396 <_sbrk_r+0x1a>
 8002394:	602b      	str	r3, [r5, #0]
 8002396:	bd38      	pop	{r3, r4, r5, pc}
 8002398:	20000238 	.word	0x20000238

0800239c <__malloc_lock>:
 800239c:	4770      	bx	lr

0800239e <__malloc_unlock>:
 800239e:	4770      	bx	lr

080023a0 <_malloc_usable_size_r>:
 80023a0:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80023a4:	2800      	cmp	r0, #0
 80023a6:	f1a0 0004 	sub.w	r0, r0, #4
 80023aa:	bfbc      	itt	lt
 80023ac:	580b      	ldrlt	r3, [r1, r0]
 80023ae:	18c0      	addlt	r0, r0, r3
 80023b0:	4770      	bx	lr
	...

080023b4 <_sbrk>:
 80023b4:	4b04      	ldr	r3, [pc, #16]	; (80023c8 <_sbrk+0x14>)
 80023b6:	6819      	ldr	r1, [r3, #0]
 80023b8:	4602      	mov	r2, r0
 80023ba:	b909      	cbnz	r1, 80023c0 <_sbrk+0xc>
 80023bc:	4903      	ldr	r1, [pc, #12]	; (80023cc <_sbrk+0x18>)
 80023be:	6019      	str	r1, [r3, #0]
 80023c0:	6818      	ldr	r0, [r3, #0]
 80023c2:	4402      	add	r2, r0
 80023c4:	601a      	str	r2, [r3, #0]
 80023c6:	4770      	bx	lr
 80023c8:	200000fc 	.word	0x200000fc
 80023cc:	2000023c 	.word	0x2000023c

080023d0 <_init>:
 80023d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023d2:	bf00      	nop
 80023d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023d6:	bc08      	pop	{r3}
 80023d8:	469e      	mov	lr, r3
 80023da:	4770      	bx	lr

080023dc <_fini>:
 80023dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80023de:	bf00      	nop
 80023e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80023e2:	bc08      	pop	{r3}
 80023e4:	469e      	mov	lr, r3
 80023e6:	4770      	bx	lr
