
DAC_Signal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a0  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000218  08003428  08003428  00013428  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08003640  08003640  00013640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08003644  08003644  00013644  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         0000000c  20000000  08003648  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
  7 .bss          000001bc  2000000c  2000000c  0002000c  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  200001c8  200001c8  0002000c  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 10 .debug_info   0001527b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 0000293b  00000000  00000000  000352b7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000075b4  00000000  00000000  00037bf2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 00000a00  00000000  00000000  0003f1a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00000d70  00000000  00000000  0003fba8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   00005a4c  00000000  00000000  00040918  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00003d20  00000000  00000000  00046364  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0004a084  2**0
                  CONTENTS, READONLY
 18 .debug_frame  0000215c  00000000  00000000  0004a100  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003410 	.word	0x08003410

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003410 	.word	0x08003410

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f092 0f00 	teq	r2, #0
 80004b2:	bf14      	ite	ne
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	4770      	bxeq	lr
 80004ba:	b530      	push	{r4, r5, lr}
 80004bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e720      	b.n	800030c <__adddf3+0x138>
 80004ca:	bf00      	nop

080004cc <__aeabi_ul2d>:
 80004cc:	ea50 0201 	orrs.w	r2, r0, r1
 80004d0:	bf08      	it	eq
 80004d2:	4770      	bxeq	lr
 80004d4:	b530      	push	{r4, r5, lr}
 80004d6:	f04f 0500 	mov.w	r5, #0
 80004da:	e00a      	b.n	80004f2 <__aeabi_l2d+0x16>

080004dc <__aeabi_l2d>:
 80004dc:	ea50 0201 	orrs.w	r2, r0, r1
 80004e0:	bf08      	it	eq
 80004e2:	4770      	bxeq	lr
 80004e4:	b530      	push	{r4, r5, lr}
 80004e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ea:	d502      	bpl.n	80004f2 <__aeabi_l2d+0x16>
 80004ec:	4240      	negs	r0, r0
 80004ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004fe:	f43f aedc 	beq.w	80002ba <__adddf3+0xe6>
 8000502:	f04f 0203 	mov.w	r2, #3
 8000506:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800050a:	bf18      	it	ne
 800050c:	3203      	addne	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800051a:	f1c2 0320 	rsb	r3, r2, #32
 800051e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000522:	fa20 f002 	lsr.w	r0, r0, r2
 8000526:	fa01 fe03 	lsl.w	lr, r1, r3
 800052a:	ea40 000e 	orr.w	r0, r0, lr
 800052e:	fa21 f102 	lsr.w	r1, r1, r2
 8000532:	4414      	add	r4, r2
 8000534:	e6c1      	b.n	80002ba <__adddf3+0xe6>
 8000536:	bf00      	nop

08000538 <__aeabi_dmul>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800053e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000542:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000546:	bf1d      	ittte	ne
 8000548:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800054c:	ea94 0f0c 	teqne	r4, ip
 8000550:	ea95 0f0c 	teqne	r5, ip
 8000554:	f000 f8de 	bleq	8000714 <__aeabi_dmul+0x1dc>
 8000558:	442c      	add	r4, r5
 800055a:	ea81 0603 	eor.w	r6, r1, r3
 800055e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000562:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000566:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800056a:	bf18      	it	ne
 800056c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000570:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000574:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000578:	d038      	beq.n	80005ec <__aeabi_dmul+0xb4>
 800057a:	fba0 ce02 	umull	ip, lr, r0, r2
 800057e:	f04f 0500 	mov.w	r5, #0
 8000582:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000586:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800058a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800058e:	f04f 0600 	mov.w	r6, #0
 8000592:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000596:	f09c 0f00 	teq	ip, #0
 800059a:	bf18      	it	ne
 800059c:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005ac:	d204      	bcs.n	80005b8 <__aeabi_dmul+0x80>
 80005ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005b2:	416d      	adcs	r5, r5
 80005b4:	eb46 0606 	adc.w	r6, r6, r6
 80005b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d0:	bf88      	it	hi
 80005d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005d6:	d81e      	bhi.n	8000616 <__aeabi_dmul+0xde>
 80005d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005dc:	bf08      	it	eq
 80005de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005e2:	f150 0000 	adcs.w	r0, r0, #0
 80005e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ea:	bd70      	pop	{r4, r5, r6, pc}
 80005ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f0:	ea46 0101 	orr.w	r1, r6, r1
 80005f4:	ea40 0002 	orr.w	r0, r0, r2
 80005f8:	ea81 0103 	eor.w	r1, r1, r3
 80005fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000600:	bfc2      	ittt	gt
 8000602:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000606:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800060a:	bd70      	popgt	{r4, r5, r6, pc}
 800060c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000610:	f04f 0e00 	mov.w	lr, #0
 8000614:	3c01      	subs	r4, #1
 8000616:	f300 80ab 	bgt.w	8000770 <__aeabi_dmul+0x238>
 800061a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800061e:	bfde      	ittt	le
 8000620:	2000      	movle	r0, #0
 8000622:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000626:	bd70      	pople	{r4, r5, r6, pc}
 8000628:	f1c4 0400 	rsb	r4, r4, #0
 800062c:	3c20      	subs	r4, #32
 800062e:	da35      	bge.n	800069c <__aeabi_dmul+0x164>
 8000630:	340c      	adds	r4, #12
 8000632:	dc1b      	bgt.n	800066c <__aeabi_dmul+0x134>
 8000634:	f104 0414 	add.w	r4, r4, #20
 8000638:	f1c4 0520 	rsb	r5, r4, #32
 800063c:	fa00 f305 	lsl.w	r3, r0, r5
 8000640:	fa20 f004 	lsr.w	r0, r0, r4
 8000644:	fa01 f205 	lsl.w	r2, r1, r5
 8000648:	ea40 0002 	orr.w	r0, r0, r2
 800064c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000650:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000654:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000658:	fa21 f604 	lsr.w	r6, r1, r4
 800065c:	eb42 0106 	adc.w	r1, r2, r6
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 040c 	rsb	r4, r4, #12
 8000670:	f1c4 0520 	rsb	r5, r4, #32
 8000674:	fa00 f304 	lsl.w	r3, r0, r4
 8000678:	fa20 f005 	lsr.w	r0, r0, r5
 800067c:	fa01 f204 	lsl.w	r2, r1, r4
 8000680:	ea40 0002 	orr.w	r0, r0, r2
 8000684:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000688:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800068c:	f141 0100 	adc.w	r1, r1, #0
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 0520 	rsb	r5, r4, #32
 80006a0:	fa00 f205 	lsl.w	r2, r0, r5
 80006a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006a8:	fa20 f304 	lsr.w	r3, r0, r4
 80006ac:	fa01 f205 	lsl.w	r2, r1, r5
 80006b0:	ea43 0302 	orr.w	r3, r3, r2
 80006b4:	fa21 f004 	lsr.w	r0, r1, r4
 80006b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006bc:	fa21 f204 	lsr.w	r2, r1, r4
 80006c0:	ea20 0002 	bic.w	r0, r0, r2
 80006c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006cc:	bf08      	it	eq
 80006ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006d2:	bd70      	pop	{r4, r5, r6, pc}
 80006d4:	f094 0f00 	teq	r4, #0
 80006d8:	d10f      	bne.n	80006fa <__aeabi_dmul+0x1c2>
 80006da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006de:	0040      	lsls	r0, r0, #1
 80006e0:	eb41 0101 	adc.w	r1, r1, r1
 80006e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006e8:	bf08      	it	eq
 80006ea:	3c01      	subeq	r4, #1
 80006ec:	d0f7      	beq.n	80006de <__aeabi_dmul+0x1a6>
 80006ee:	ea41 0106 	orr.w	r1, r1, r6
 80006f2:	f095 0f00 	teq	r5, #0
 80006f6:	bf18      	it	ne
 80006f8:	4770      	bxne	lr
 80006fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006fe:	0052      	lsls	r2, r2, #1
 8000700:	eb43 0303 	adc.w	r3, r3, r3
 8000704:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3d01      	subeq	r5, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1c6>
 800070e:	ea43 0306 	orr.w	r3, r3, r6
 8000712:	4770      	bx	lr
 8000714:	ea94 0f0c 	teq	r4, ip
 8000718:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800071c:	bf18      	it	ne
 800071e:	ea95 0f0c 	teqne	r5, ip
 8000722:	d00c      	beq.n	800073e <__aeabi_dmul+0x206>
 8000724:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000728:	bf18      	it	ne
 800072a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800072e:	d1d1      	bne.n	80006d4 <__aeabi_dmul+0x19c>
 8000730:	ea81 0103 	eor.w	r1, r1, r3
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	f04f 0000 	mov.w	r0, #0
 800073c:	bd70      	pop	{r4, r5, r6, pc}
 800073e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000742:	bf06      	itte	eq
 8000744:	4610      	moveq	r0, r2
 8000746:	4619      	moveq	r1, r3
 8000748:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074c:	d019      	beq.n	8000782 <__aeabi_dmul+0x24a>
 800074e:	ea94 0f0c 	teq	r4, ip
 8000752:	d102      	bne.n	800075a <__aeabi_dmul+0x222>
 8000754:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000758:	d113      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800075a:	ea95 0f0c 	teq	r5, ip
 800075e:	d105      	bne.n	800076c <__aeabi_dmul+0x234>
 8000760:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000764:	bf1c      	itt	ne
 8000766:	4610      	movne	r0, r2
 8000768:	4619      	movne	r1, r3
 800076a:	d10a      	bne.n	8000782 <__aeabi_dmul+0x24a>
 800076c:	ea81 0103 	eor.w	r1, r1, r3
 8000770:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000774:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000778:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800077c:	f04f 0000 	mov.w	r0, #0
 8000780:	bd70      	pop	{r4, r5, r6, pc}
 8000782:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000786:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800078a:	bd70      	pop	{r4, r5, r6, pc}

0800078c <__aeabi_ddiv>:
 800078c:	b570      	push	{r4, r5, r6, lr}
 800078e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000792:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000796:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800079a:	bf1d      	ittte	ne
 800079c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a0:	ea94 0f0c 	teqne	r4, ip
 80007a4:	ea95 0f0c 	teqne	r5, ip
 80007a8:	f000 f8a7 	bleq	80008fa <__aeabi_ddiv+0x16e>
 80007ac:	eba4 0405 	sub.w	r4, r4, r5
 80007b0:	ea81 0e03 	eor.w	lr, r1, r3
 80007b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007bc:	f000 8088 	beq.w	80008d0 <__aeabi_ddiv+0x144>
 80007c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007e4:	429d      	cmp	r5, r3
 80007e6:	bf08      	it	eq
 80007e8:	4296      	cmpeq	r6, r2
 80007ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007f2:	d202      	bcs.n	80007fa <__aeabi_ddiv+0x6e>
 80007f4:	085b      	lsrs	r3, r3, #1
 80007f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007fa:	1ab6      	subs	r6, r6, r2
 80007fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000800:	085b      	lsrs	r3, r3, #1
 8000802:	ea4f 0232 	mov.w	r2, r2, rrx
 8000806:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800080a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000868:	ea55 0e06 	orrs.w	lr, r5, r6
 800086c:	d018      	beq.n	80008a0 <__aeabi_ddiv+0x114>
 800086e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000872:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000876:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800087a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800087e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000882:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000886:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800088a:	d1c0      	bne.n	800080e <__aeabi_ddiv+0x82>
 800088c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000890:	d10b      	bne.n	80008aa <__aeabi_ddiv+0x11e>
 8000892:	ea41 0100 	orr.w	r1, r1, r0
 8000896:	f04f 0000 	mov.w	r0, #0
 800089a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800089e:	e7b6      	b.n	800080e <__aeabi_ddiv+0x82>
 80008a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a4:	bf04      	itt	eq
 80008a6:	4301      	orreq	r1, r0
 80008a8:	2000      	moveq	r0, #0
 80008aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ae:	bf88      	it	hi
 80008b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008b4:	f63f aeaf 	bhi.w	8000616 <__aeabi_dmul+0xde>
 80008b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008bc:	bf04      	itt	eq
 80008be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008c6:	f150 0000 	adcs.w	r0, r0, #0
 80008ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ce:	bd70      	pop	{r4, r5, r6, pc}
 80008d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008dc:	bfc2      	ittt	gt
 80008de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	popgt	{r4, r5, r6, pc}
 80008e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008ec:	f04f 0e00 	mov.w	lr, #0
 80008f0:	3c01      	subs	r4, #1
 80008f2:	e690      	b.n	8000616 <__aeabi_dmul+0xde>
 80008f4:	ea45 0e06 	orr.w	lr, r5, r6
 80008f8:	e68d      	b.n	8000616 <__aeabi_dmul+0xde>
 80008fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008fe:	ea94 0f0c 	teq	r4, ip
 8000902:	bf08      	it	eq
 8000904:	ea95 0f0c 	teqeq	r5, ip
 8000908:	f43f af3b 	beq.w	8000782 <__aeabi_dmul+0x24a>
 800090c:	ea94 0f0c 	teq	r4, ip
 8000910:	d10a      	bne.n	8000928 <__aeabi_ddiv+0x19c>
 8000912:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000916:	f47f af34 	bne.w	8000782 <__aeabi_dmul+0x24a>
 800091a:	ea95 0f0c 	teq	r5, ip
 800091e:	f47f af25 	bne.w	800076c <__aeabi_dmul+0x234>
 8000922:	4610      	mov	r0, r2
 8000924:	4619      	mov	r1, r3
 8000926:	e72c      	b.n	8000782 <__aeabi_dmul+0x24a>
 8000928:	ea95 0f0c 	teq	r5, ip
 800092c:	d106      	bne.n	800093c <__aeabi_ddiv+0x1b0>
 800092e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000932:	f43f aefd 	beq.w	8000730 <__aeabi_dmul+0x1f8>
 8000936:	4610      	mov	r0, r2
 8000938:	4619      	mov	r1, r3
 800093a:	e722      	b.n	8000782 <__aeabi_dmul+0x24a>
 800093c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000940:	bf18      	it	ne
 8000942:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000946:	f47f aec5 	bne.w	80006d4 <__aeabi_dmul+0x19c>
 800094a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800094e:	f47f af0d 	bne.w	800076c <__aeabi_dmul+0x234>
 8000952:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000956:	f47f aeeb 	bne.w	8000730 <__aeabi_dmul+0x1f8>
 800095a:	e712      	b.n	8000782 <__aeabi_dmul+0x24a>

0800095c <__gedf2>:
 800095c:	f04f 3cff 	mov.w	ip, #4294967295
 8000960:	e006      	b.n	8000970 <__cmpdf2+0x4>
 8000962:	bf00      	nop

08000964 <__ledf2>:
 8000964:	f04f 0c01 	mov.w	ip, #1
 8000968:	e002      	b.n	8000970 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__cmpdf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000980:	bf18      	it	ne
 8000982:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000986:	d01b      	beq.n	80009c0 <__cmpdf2+0x54>
 8000988:	b001      	add	sp, #4
 800098a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800098e:	bf0c      	ite	eq
 8000990:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000994:	ea91 0f03 	teqne	r1, r3
 8000998:	bf02      	ittt	eq
 800099a:	ea90 0f02 	teqeq	r0, r2
 800099e:	2000      	moveq	r0, #0
 80009a0:	4770      	bxeq	lr
 80009a2:	f110 0f00 	cmn.w	r0, #0
 80009a6:	ea91 0f03 	teq	r1, r3
 80009aa:	bf58      	it	pl
 80009ac:	4299      	cmppl	r1, r3
 80009ae:	bf08      	it	eq
 80009b0:	4290      	cmpeq	r0, r2
 80009b2:	bf2c      	ite	cs
 80009b4:	17d8      	asrcs	r0, r3, #31
 80009b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ba:	f040 0001 	orr.w	r0, r0, #1
 80009be:	4770      	bx	lr
 80009c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c8:	d102      	bne.n	80009d0 <__cmpdf2+0x64>
 80009ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ce:	d107      	bne.n	80009e0 <__cmpdf2+0x74>
 80009d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d8:	d1d6      	bne.n	8000988 <__cmpdf2+0x1c>
 80009da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009de:	d0d3      	beq.n	8000988 <__cmpdf2+0x1c>
 80009e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <__aeabi_cdrcmple>:
 80009e8:	4684      	mov	ip, r0
 80009ea:	4610      	mov	r0, r2
 80009ec:	4662      	mov	r2, ip
 80009ee:	468c      	mov	ip, r1
 80009f0:	4619      	mov	r1, r3
 80009f2:	4663      	mov	r3, ip
 80009f4:	e000      	b.n	80009f8 <__aeabi_cdcmpeq>
 80009f6:	bf00      	nop

080009f8 <__aeabi_cdcmpeq>:
 80009f8:	b501      	push	{r0, lr}
 80009fa:	f7ff ffb7 	bl	800096c <__cmpdf2>
 80009fe:	2800      	cmp	r0, #0
 8000a00:	bf48      	it	mi
 8000a02:	f110 0f00 	cmnmi.w	r0, #0
 8000a06:	bd01      	pop	{r0, pc}

08000a08 <__aeabi_dcmpeq>:
 8000a08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a0c:	f7ff fff4 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a10:	bf0c      	ite	eq
 8000a12:	2001      	moveq	r0, #1
 8000a14:	2000      	movne	r0, #0
 8000a16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1a:	bf00      	nop

08000a1c <__aeabi_dcmplt>:
 8000a1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a20:	f7ff ffea 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a24:	bf34      	ite	cc
 8000a26:	2001      	movcc	r0, #1
 8000a28:	2000      	movcs	r0, #0
 8000a2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a2e:	bf00      	nop

08000a30 <__aeabi_dcmple>:
 8000a30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a34:	f7ff ffe0 	bl	80009f8 <__aeabi_cdcmpeq>
 8000a38:	bf94      	ite	ls
 8000a3a:	2001      	movls	r0, #1
 8000a3c:	2000      	movhi	r0, #0
 8000a3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a42:	bf00      	nop

08000a44 <__aeabi_dcmpge>:
 8000a44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a48:	f7ff ffce 	bl	80009e8 <__aeabi_cdrcmple>
 8000a4c:	bf94      	ite	ls
 8000a4e:	2001      	movls	r0, #1
 8000a50:	2000      	movhi	r0, #0
 8000a52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a56:	bf00      	nop

08000a58 <__aeabi_dcmpgt>:
 8000a58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a5c:	f7ff ffc4 	bl	80009e8 <__aeabi_cdrcmple>
 8000a60:	bf34      	ite	cc
 8000a62:	2001      	movcc	r0, #1
 8000a64:	2000      	movcs	r0, #0
 8000a66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6a:	bf00      	nop

08000a6c <__aeabi_d2iz>:
 8000a6c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a70:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a74:	d215      	bcs.n	8000aa2 <__aeabi_d2iz+0x36>
 8000a76:	d511      	bpl.n	8000a9c <__aeabi_d2iz+0x30>
 8000a78:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a7c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a80:	d912      	bls.n	8000aa8 <__aeabi_d2iz+0x3c>
 8000a82:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a86:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a8a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a92:	fa23 f002 	lsr.w	r0, r3, r2
 8000a96:	bf18      	it	ne
 8000a98:	4240      	negne	r0, r0
 8000a9a:	4770      	bx	lr
 8000a9c:	f04f 0000 	mov.w	r0, #0
 8000aa0:	4770      	bx	lr
 8000aa2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa6:	d105      	bne.n	8000ab4 <__aeabi_d2iz+0x48>
 8000aa8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aac:	bf08      	it	eq
 8000aae:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	bf00      	nop

08000abc <__aeabi_d2uiz>:
 8000abc:	004a      	lsls	r2, r1, #1
 8000abe:	d211      	bcs.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac4:	d211      	bcs.n	8000aea <__aeabi_d2uiz+0x2e>
 8000ac6:	d50d      	bpl.n	8000ae4 <__aeabi_d2uiz+0x28>
 8000ac8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000acc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ad0:	d40e      	bmi.n	8000af0 <__aeabi_d2uiz+0x34>
 8000ad2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ada:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d102      	bne.n	8000af6 <__aeabi_d2uiz+0x3a>
 8000af0:	f04f 30ff 	mov.w	r0, #4294967295
 8000af4:	4770      	bx	lr
 8000af6:	f04f 0000 	mov.w	r0, #0
 8000afa:	4770      	bx	lr

08000afc <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000afc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000afe:	4a0e      	ldr	r2, [pc, #56]	; (8000b38 <HAL_InitTick+0x3c>)
 8000b00:	4b0e      	ldr	r3, [pc, #56]	; (8000b3c <HAL_InitTick+0x40>)
{
 8000b02:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b04:	7818      	ldrb	r0, [r3, #0]
 8000b06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b0a:	fbb3 f3f0 	udiv	r3, r3, r0
 8000b0e:	6810      	ldr	r0, [r2, #0]
 8000b10:	fbb0 f0f3 	udiv	r0, r0, r3
 8000b14:	f000 f88c 	bl	8000c30 <HAL_SYSTICK_Config>
 8000b18:	4604      	mov	r4, r0
 8000b1a:	b958      	cbnz	r0, 8000b34 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b1c:	2d0f      	cmp	r5, #15
 8000b1e:	d809      	bhi.n	8000b34 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b20:	4602      	mov	r2, r0
 8000b22:	4629      	mov	r1, r5
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	f000 f842 	bl	8000bb0 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <HAL_InitTick+0x44>)
 8000b2e:	4620      	mov	r0, r4
 8000b30:	601d      	str	r5, [r3, #0]
 8000b32:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8000b34:	2001      	movs	r0, #1
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
}
 8000b36:	bd38      	pop	{r3, r4, r5, pc}
 8000b38:	20000008 	.word	0x20000008
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	20000004 	.word	0x20000004

08000b44 <HAL_Init>:
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b44:	4a07      	ldr	r2, [pc, #28]	; (8000b64 <HAL_Init+0x20>)
{
 8000b46:	b508      	push	{r3, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b48:	6813      	ldr	r3, [r2, #0]
 8000b4a:	f043 0310 	orr.w	r3, r3, #16
 8000b4e:	6013      	str	r3, [r2, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b50:	2003      	movs	r0, #3
 8000b52:	f000 f81b 	bl	8000b8c <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f7ff ffd0 	bl	8000afc <HAL_InitTick>
  HAL_MspInit();
 8000b5c:	f001 fac8 	bl	80020f0 <HAL_MspInit>
}
 8000b60:	2000      	movs	r0, #0
 8000b62:	bd08      	pop	{r3, pc}
 8000b64:	40022000 	.word	0x40022000

08000b68 <HAL_IncTick>:
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8000b68:	4a03      	ldr	r2, [pc, #12]	; (8000b78 <HAL_IncTick+0x10>)
 8000b6a:	4b04      	ldr	r3, [pc, #16]	; (8000b7c <HAL_IncTick+0x14>)
 8000b6c:	6811      	ldr	r1, [r2, #0]
 8000b6e:	781b      	ldrb	r3, [r3, #0]
 8000b70:	440b      	add	r3, r1
 8000b72:	6013      	str	r3, [r2, #0]
 8000b74:	4770      	bx	lr
 8000b76:	bf00      	nop
 8000b78:	20000090 	.word	0x20000090
 8000b7c:	20000000 	.word	0x20000000

08000b80 <HAL_GetTick>:
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;  
 8000b80:	4b01      	ldr	r3, [pc, #4]	; (8000b88 <HAL_GetTick+0x8>)
 8000b82:	6818      	ldr	r0, [r3, #0]
}
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	20000090 	.word	0x20000090

08000b8c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000b8c:	4a07      	ldr	r2, [pc, #28]	; (8000bac <HAL_NVIC_SetPriorityGrouping+0x20>)
 8000b8e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000b90:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000b94:	041b      	lsls	r3, r3, #16
 8000b96:	0c1b      	lsrs	r3, r3, #16
 8000b98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000b9c:	0200      	lsls	r0, r0, #8
 8000b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba2:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000ba6:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000ba8:	60d3      	str	r3, [r2, #12]
 8000baa:	4770      	bx	lr
 8000bac:	e000ed00 	.word	0xe000ed00

08000bb0 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000bb0:	4b17      	ldr	r3, [pc, #92]	; (8000c10 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb2:	b530      	push	{r4, r5, lr}
 8000bb4:	68dc      	ldr	r4, [r3, #12]
 8000bb6:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bba:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bbe:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000bc0:	2b04      	cmp	r3, #4
 8000bc2:	bf28      	it	cs
 8000bc4:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bc6:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bc8:	f04f 0501 	mov.w	r5, #1
 8000bcc:	fa05 f303 	lsl.w	r3, r5, r3
 8000bd0:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bd4:	bf8c      	ite	hi
 8000bd6:	3c03      	subhi	r4, #3
 8000bd8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000bda:	4019      	ands	r1, r3
 8000bdc:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000bde:	fa05 f404 	lsl.w	r4, r5, r4
 8000be2:	3c01      	subs	r4, #1
 8000be4:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000be6:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000be8:	ea42 0201 	orr.w	r2, r2, r1
 8000bec:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf0:	bfaf      	iteee	ge
 8000bf2:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bf6:	f000 000f 	andlt.w	r0, r0, #15
 8000bfa:	4b06      	ldrlt	r3, [pc, #24]	; (8000c14 <HAL_NVIC_SetPriority+0x64>)
 8000bfc:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000bfe:	bfa5      	ittet	ge
 8000c00:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 8000c04:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c06:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c08:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000c0c:	bd30      	pop	{r4, r5, pc}
 8000c0e:	bf00      	nop
 8000c10:	e000ed00 	.word	0xe000ed00
 8000c14:	e000ed14 	.word	0xe000ed14

08000c18 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8000c18:	0942      	lsrs	r2, r0, #5
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	f000 001f 	and.w	r0, r0, #31
 8000c20:	fa03 f000 	lsl.w	r0, r3, r0
 8000c24:	4b01      	ldr	r3, [pc, #4]	; (8000c2c <HAL_NVIC_EnableIRQ+0x14>)
 8000c26:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8000c2a:	4770      	bx	lr
 8000c2c:	e000e100 	.word	0xe000e100

08000c30 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000c30:	3801      	subs	r0, #1
 8000c32:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c36:	d20a      	bcs.n	8000c4e <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3a:	4a07      	ldr	r2, [pc, #28]	; (8000c58 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000c3c:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c3e:	21f0      	movs	r1, #240	; 0xf0
 8000c40:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c44:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c46:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000c48:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000c4a:	601a      	str	r2, [r3, #0]
 8000c4c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8000c4e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	e000e010 	.word	0xe000e010
 8000c58:	e000ed00 	.word	0xe000ed00

08000c5c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef* hdac)
{ 
 8000c5c:	b510      	push	{r4, lr}
  /* Check DAC handle */
  if(hdac == NULL)
 8000c5e:	4604      	mov	r4, r0
 8000c60:	b168      	cbz	r0, 8000c7e <HAL_DAC_Init+0x22>
     return HAL_ERROR;
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
  
  if(hdac->State == HAL_DAC_STATE_RESET)
 8000c62:	7903      	ldrb	r3, [r0, #4]
 8000c64:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8000c68:	b913      	cbnz	r3, 8000c70 <HAL_DAC_Init+0x14>
  {  
    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8000c6a:	7142      	strb	r2, [r0, #5]

    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8000c6c:	f001 fa58 	bl	8002120 <HAL_DAC_MspInit>
  }
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8000c70:	2302      	movs	r3, #2
 8000c72:	7123      	strb	r3, [r4, #4]
       
  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000c74:	2000      	movs	r0, #0
  
  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8000c76:	2301      	movs	r3, #1
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8000c78:	6120      	str	r0, [r4, #16]
  hdac->State = HAL_DAC_STATE_READY;
 8000c7a:	7123      	strb	r3, [r4, #4]
  
  /* Return function status */
  return HAL_OK;
 8000c7c:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8000c7e:	2001      	movs	r0, #1
}
 8000c80:	bd10      	pop	{r4, pc}

08000c82 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef* hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{  
 8000c82:	b513      	push	{r0, r1, r4, lr}
  __IO uint32_t tmp = 0U;
 8000c84:	2400      	movs	r4, #0
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));
   
  tmp = (uint32_t) (hdac->Instance);
 8000c86:	6800      	ldr	r0, [r0, #0]
  __IO uint32_t tmp = 0U;
 8000c88:	9401      	str	r4, [sp, #4]
  tmp = (uint32_t) (hdac->Instance);
 8000c8a:	9001      	str	r0, [sp, #4]

/* DAC 1 has 1 or 2 channels - no DAC2 */
/* DAC 1 has 2 channels 1U & 2U - DAC 2 has one channel 1U */

  if(Channel == DAC_CHANNEL_1)
 8000c8c:	b941      	cbnz	r1, 8000ca0 <HAL_DAC_SetValue+0x1e>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8000c8e:	9901      	ldr	r1, [sp, #4]
 8000c90:	3108      	adds	r1, #8
    defined(STM32F303xC) || defined(STM32F358xx)                         || \
    defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx) || \
    defined(STM32F373xC) || defined(STM32F378xx)
  else /* channel = DAC_CHANNEL_2  */
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000c92:	440a      	add	r2, r1
 8000c94:	9201      	str	r2, [sp, #4]
       /* STM32F303xC || STM32F358xx                || */
       /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
       /* STM32F373xC || STM32F378xx                   */

  /* Set the DAC channel1 selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8000c96:	9a01      	ldr	r2, [sp, #4]
  
  /* Return function status */
  return HAL_OK;
}
 8000c98:	2000      	movs	r0, #0
  *(__IO uint32_t *) tmp = Data;
 8000c9a:	6013      	str	r3, [r2, #0]
}
 8000c9c:	b002      	add	sp, #8
 8000c9e:	bd10      	pop	{r4, pc}
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8000ca0:	9901      	ldr	r1, [sp, #4]
 8000ca2:	3114      	adds	r1, #20
 8000ca4:	e7f5      	b.n	8000c92 <HAL_DAC_SetValue+0x10>

08000ca6 <HAL_DAC_Start>:
{
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL_INSTANCE(hdac->Instance, Channel));
  
  /* Process locked */
  __HAL_LOCK(hdac);
 8000ca6:	7943      	ldrb	r3, [r0, #5]
 8000ca8:	2b01      	cmp	r3, #1
{
 8000caa:	b510      	push	{r4, lr}
 8000cac:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8000cb0:	d015      	beq.n	8000cde <HAL_DAC_Start+0x38>
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000cb2:	7103      	strb	r3, [r0, #4]
  
  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8000cb4:	6803      	ldr	r3, [r0, #0]
  __HAL_LOCK(hdac);
 8000cb6:	2201      	movs	r2, #1
  __HAL_DAC_ENABLE(hdac, Channel);
 8000cb8:	681c      	ldr	r4, [r3, #0]
  __HAL_LOCK(hdac);
 8000cba:	7142      	strb	r2, [r0, #5]
  __HAL_DAC_ENABLE(hdac, Channel);
 8000cbc:	408a      	lsls	r2, r1
 8000cbe:	4322      	orrs	r2, r4
 8000cc0:	601a      	str	r2, [r3, #0]
  
  if(Channel == DAC_CHANNEL_1)
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8000cc2:	681a      	ldr	r2, [r3, #0]
  if(Channel == DAC_CHANNEL_1)
 8000cc4:	b969      	cbnz	r1, 8000ce2 <HAL_DAC_Start+0x3c>
    if((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == (DAC_CR_TEN1 | DAC_CR_TSEL1))
 8000cc6:	f002 023c 	and.w	r2, r2, #60	; 0x3c
 8000cca:	2a3c      	cmp	r2, #60	; 0x3c
 8000ccc:	d103      	bne.n	8000cd6 <HAL_DAC_Start+0x30>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8000cce:	685a      	ldr	r2, [r3, #4]
 8000cd0:	f042 0201 	orr.w	r2, r2, #1
  {
    /* Check if software trigger enabled */
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000cd4:	605a      	str	r2, [r3, #4]
    }
  }
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000cd6:	2301      	movs	r3, #1
 8000cd8:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000cda:	2300      	movs	r3, #0
 8000cdc:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8000cde:	4618      	mov	r0, r3
    
  /* Return function status */
  return HAL_OK;
}
 8000ce0:	bd10      	pop	{r4, pc}
    if((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_CR_TEN2 | DAC_CR_TSEL2))
 8000ce2:	f402 1270 	and.w	r2, r2, #3932160	; 0x3c0000
 8000ce6:	f5b2 1f70 	cmp.w	r2, #3932160	; 0x3c0000
 8000cea:	d1f4      	bne.n	8000cd6 <HAL_DAC_Start+0x30>
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8000cec:	685a      	ldr	r2, [r3, #4]
 8000cee:	f042 0202 	orr.w	r2, r2, #2
 8000cf2:	e7ef      	b.n	8000cd4 <HAL_DAC_Start+0x2e>

08000cf4 <HAL_DAC_ConfigChannel>:
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));    
#endif /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  assert_param(IS_DAC_CHANNEL(Channel));   
 
  /* Process locked */
  __HAL_LOCK(hdac);
 8000cf4:	7943      	ldrb	r3, [r0, #5]
 8000cf6:	2b01      	cmp	r3, #1
{
 8000cf8:	b570      	push	{r4, r5, r6, lr}
 8000cfa:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdac);
 8000cfe:	d01b      	beq.n	8000d38 <HAL_DAC_ConfigChannel+0x44>
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000d00:	6805      	ldr	r5, [r0, #0]
  
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8000d02:	7103      	strb	r3, [r0, #4]
  /* Configure for the selected DAC channel: buffer output or switch output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value OR */   
  /* Set OUTEN bit according to DAC_OutputSwitch value */   
#if defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000d04:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_DAC_ConfigChannel+0x58>)
  tmpreg1 = hdac->Instance->CR;
 8000d06:	682c      	ldr	r4, [r5, #0]
  if ((hdac->Instance == DAC1) && (Channel == DAC_CHANNEL_1)) 
 8000d08:	429d      	cmp	r5, r3
 8000d0a:	680b      	ldr	r3, [r1, #0]
 8000d0c:	d116      	bne.n	8000d3c <HAL_DAC_ConfigChannel+0x48>
 8000d0e:	b9aa      	cbnz	r2, 8000d3c <HAL_DAC_ConfigChannel+0x48>
  {
    /* Output Buffer (BOFF1) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000d10:	f424 647f 	bic.w	r4, r4, #4080	; 0xff0
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);    
 8000d14:	6849      	ldr	r1, [r1, #4]
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
 8000d16:	f024 040e 	bic.w	r4, r4, #14
  }
  else /* DAC1 channel 2U & DAC2 channel 1U */
  {
    /* Output Switch (OUTEN) control */
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8000d1a:	430b      	orrs	r3, r1
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << Channel);
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
#endif  /* STM32F303x8 || STM32F334x8 || STM32F328xx || */
  
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << Channel;
 8000d1c:	4093      	lsls	r3, r2
 8000d1e:	4323      	orrs	r3, r4
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8000d20:	602b      	str	r3, [r5, #0]
  
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000d22:	682b      	ldr	r3, [r5, #0]
 8000d24:	21c0      	movs	r1, #192	; 0xc0
 8000d26:	fa01 f202 	lsl.w	r2, r1, r2
 8000d2a:	ea23 0202 	bic.w	r2, r3, r2

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8000d2e:	2301      	movs	r3, #1
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << Channel);
 8000d30:	602a      	str	r2, [r5, #0]
  hdac->State = HAL_DAC_STATE_READY;
 8000d32:	7103      	strb	r3, [r0, #4]
  
  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8000d34:	2300      	movs	r3, #0
 8000d36:	7143      	strb	r3, [r0, #5]
  __HAL_LOCK(hdac);
 8000d38:	4618      	mov	r0, r3
  
  /* Return function status */
  return HAL_OK;
}
 8000d3a:	bd70      	pop	{r4, r5, r6, pc}
    tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_OUTEN1)) << Channel);    
 8000d3c:	f640 76fe 	movw	r6, #4094	; 0xffe
 8000d40:	4096      	lsls	r6, r2
 8000d42:	ea24 0406 	bic.w	r4, r4, r6
    tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputSwitch);    
 8000d46:	6889      	ldr	r1, [r1, #8]
 8000d48:	e7e7      	b.n	8000d1a <HAL_DAC_ConfigChannel+0x26>
 8000d4a:	bf00      	nop
 8000d4c:	40007400 	.word	0x40007400

08000d50 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d54:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d56:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d58:	f8df 8164 	ldr.w	r8, [pc, #356]	; 8000ec0 <HAL_GPIO_Init+0x170>
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d5c:	4a56      	ldr	r2, [pc, #344]	; (8000eb8 <HAL_GPIO_Init+0x168>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d5e:	9301      	str	r3, [sp, #4]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000d60:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00U;
 8000d64:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000d66:	9c01      	ldr	r4, [sp, #4]
 8000d68:	40dc      	lsrs	r4, r3
 8000d6a:	d102      	bne.n	8000d72 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 8000d6c:	b005      	add	sp, #20
 8000d6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000d72:	2401      	movs	r4, #1
 8000d74:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000d78:	9c01      	ldr	r4, [sp, #4]
 8000d7a:	ea14 050a 	ands.w	r5, r4, sl
 8000d7e:	f000 8093 	beq.w	8000ea8 <HAL_GPIO_Init+0x158>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000d82:	684c      	ldr	r4, [r1, #4]
 8000d84:	f024 0b10 	bic.w	fp, r4, #16
 8000d88:	f1bb 0f02 	cmp.w	fp, #2
 8000d8c:	d111      	bne.n	8000db2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 8000d8e:	08df      	lsrs	r7, r3, #3
 8000d90:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d94:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8000d98:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d9a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000d9e:	fa09 fc0e 	lsl.w	ip, r9, lr
 8000da2:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000da6:	690e      	ldr	r6, [r1, #16]
 8000da8:	fa06 f60e 	lsl.w	r6, r6, lr
 8000dac:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 8000db0:	623e      	str	r6, [r7, #32]
 8000db2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000db6:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 8000db8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dba:	fa07 f70c 	lsl.w	r7, r7, ip
 8000dbe:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000dc4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dc6:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dca:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000dce:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd2:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 8000dd6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000dd8:	d811      	bhi.n	8000dfe <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8000dda:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000ddc:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000de0:	68ce      	ldr	r6, [r1, #12]
 8000de2:	fa06 fe0c 	lsl.w	lr, r6, ip
 8000de6:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 8000dea:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 8000dec:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000dee:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8000df2:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000df6:	409e      	lsls	r6, r3
 8000df8:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 8000dfc:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 8000dfe:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e00:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e02:	688e      	ldr	r6, [r1, #8]
 8000e04:	fa06 f60c 	lsl.w	r6, r6, ip
 8000e08:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e0a:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 8000e0c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000e0e:	d54b      	bpl.n	8000ea8 <HAL_GPIO_Init+0x158>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e10:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000e14:	f046 0601 	orr.w	r6, r6, #1
 8000e18:	f8c8 6018 	str.w	r6, [r8, #24]
 8000e1c:	f8d8 6018 	ldr.w	r6, [r8, #24]
 8000e20:	f023 0703 	bic.w	r7, r3, #3
 8000e24:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000e28:	f006 0601 	and.w	r6, r6, #1
 8000e2c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000e30:	9603      	str	r6, [sp, #12]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e32:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e36:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000e38:	68be      	ldr	r6, [r7, #8]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e3a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8000e3e:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e42:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 8000e46:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000e4a:	d02f      	beq.n	8000eac <HAL_GPIO_Init+0x15c>
 8000e4c:	4e1b      	ldr	r6, [pc, #108]	; (8000ebc <HAL_GPIO_Init+0x16c>)
 8000e4e:	42b0      	cmp	r0, r6
 8000e50:	d02e      	beq.n	8000eb0 <HAL_GPIO_Init+0x160>
 8000e52:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e56:	42b0      	cmp	r0, r6
 8000e58:	d02c      	beq.n	8000eb4 <HAL_GPIO_Init+0x164>
 8000e5a:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000e5e:	42b0      	cmp	r0, r6
 8000e60:	bf14      	ite	ne
 8000e62:	2605      	movne	r6, #5
 8000e64:	2603      	moveq	r6, #3
 8000e66:	fa06 f60e 	lsl.w	r6, r6, lr
 8000e6a:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000e6e:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR;
 8000e70:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 8000e72:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000e74:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000e78:	bf0c      	ite	eq
 8000e7a:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e7c:	432e      	orrne	r6, r5
        EXTI->IMR = temp;
 8000e7e:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR;
 8000e80:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000e82:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8000e86:	bf0c      	ite	eq
 8000e88:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e8a:	432e      	orrne	r6, r5
        EXTI->EMR = temp;
 8000e8c:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR;
 8000e8e:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000e90:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8000e94:	bf0c      	ite	eq
 8000e96:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000e98:	432e      	orrne	r6, r5
        EXTI->RTSR = temp;
 8000e9a:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR;
 8000e9c:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000e9e:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 8000ea0:	bf54      	ite	pl
 8000ea2:	403e      	andpl	r6, r7
          temp |= iocurrent;
 8000ea4:	432e      	orrmi	r6, r5
        EXTI->FTSR = temp;
 8000ea6:	60d6      	str	r6, [r2, #12]
    position++;
 8000ea8:	3301      	adds	r3, #1
 8000eaa:	e75c      	b.n	8000d66 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8000eac:	2600      	movs	r6, #0
 8000eae:	e7da      	b.n	8000e66 <HAL_GPIO_Init+0x116>
 8000eb0:	2601      	movs	r6, #1
 8000eb2:	e7d8      	b.n	8000e66 <HAL_GPIO_Init+0x116>
 8000eb4:	2602      	movs	r6, #2
 8000eb6:	e7d6      	b.n	8000e66 <HAL_GPIO_Init+0x116>
 8000eb8:	40010400 	.word	0x40010400
 8000ebc:	48000400 	.word	0x48000400
 8000ec0:	40021000 	.word	0x40021000

08000ec4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ec4:	b10a      	cbz	r2, 8000eca <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ec6:	6181      	str	r1, [r0, #24]
 8000ec8:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000eca:	6281      	str	r1, [r0, #40]	; 0x28
 8000ecc:	4770      	bx	lr
	...

08000ed0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ed0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ed4:	4605      	mov	r5, r0
 8000ed6:	b918      	cbnz	r0, 8000ee0 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8000ed8:	2001      	movs	r0, #1
      return HAL_ERROR;
    }
  }
  
  return HAL_OK;
}
 8000eda:	b002      	add	sp, #8
 8000edc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee0:	6803      	ldr	r3, [r0, #0]
 8000ee2:	07da      	lsls	r2, r3, #31
 8000ee4:	d411      	bmi.n	8000f0a <HAL_RCC_OscConfig+0x3a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000ee6:	682b      	ldr	r3, [r5, #0]
 8000ee8:	079b      	lsls	r3, r3, #30
 8000eea:	f100 8085 	bmi.w	8000ff8 <HAL_RCC_OscConfig+0x128>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000eee:	682b      	ldr	r3, [r5, #0]
 8000ef0:	071c      	lsls	r4, r3, #28
 8000ef2:	f100 80f6 	bmi.w	80010e2 <HAL_RCC_OscConfig+0x212>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000ef6:	682b      	ldr	r3, [r5, #0]
 8000ef8:	0758      	lsls	r0, r3, #29
 8000efa:	f100 813f 	bmi.w	800117c <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000efe:	69ea      	ldr	r2, [r5, #28]
 8000f00:	2a00      	cmp	r2, #0
 8000f02:	f040 81d6 	bne.w	80012b2 <HAL_RCC_OscConfig+0x3e2>
  return HAL_OK;
 8000f06:	2000      	movs	r0, #0
 8000f08:	e7e7      	b.n	8000eda <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000f0a:	4cba      	ldr	r4, [pc, #744]	; (80011f4 <HAL_RCC_OscConfig+0x324>)
 8000f0c:	6863      	ldr	r3, [r4, #4]
 8000f0e:	f003 030c 	and.w	r3, r3, #12
 8000f12:	2b04      	cmp	r3, #4
 8000f14:	d007      	beq.n	8000f26 <HAL_RCC_OscConfig+0x56>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000f16:	6863      	ldr	r3, [r4, #4]
 8000f18:	f003 030c 	and.w	r3, r3, #12
 8000f1c:	2b08      	cmp	r3, #8
 8000f1e:	d116      	bne.n	8000f4e <HAL_RCC_OscConfig+0x7e>
 8000f20:	6863      	ldr	r3, [r4, #4]
 8000f22:	03df      	lsls	r7, r3, #15
 8000f24:	d513      	bpl.n	8000f4e <HAL_RCC_OscConfig+0x7e>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f26:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2a:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f2e:	6821      	ldr	r1, [r4, #0]
 8000f30:	fa93 f3a3 	rbit	r3, r3
 8000f34:	fab3 f383 	clz	r3, r3
 8000f38:	f003 031f 	and.w	r3, r3, #31
 8000f3c:	2201      	movs	r2, #1
 8000f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f42:	420b      	tst	r3, r1
 8000f44:	d0cf      	beq.n	8000ee6 <HAL_RCC_OscConfig+0x16>
 8000f46:	686b      	ldr	r3, [r5, #4]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d1cc      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x16>
 8000f4c:	e7c4      	b.n	8000ed8 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f4e:	686a      	ldr	r2, [r5, #4]
 8000f50:	f5b2 3f80 	cmp.w	r2, #65536	; 0x10000
 8000f54:	d125      	bne.n	8000fa2 <HAL_RCC_OscConfig+0xd2>
 8000f56:	6823      	ldr	r3, [r4, #0]
 8000f58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f5c:	6023      	str	r3, [r4, #0]
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8000f5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8000f60:	68a9      	ldr	r1, [r5, #8]
 8000f62:	f023 030f 	bic.w	r3, r3, #15
 8000f66:	430b      	orrs	r3, r1
 8000f68:	62e3      	str	r3, [r4, #44]	; 0x2c
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f6a:	b352      	cbz	r2, 8000fc2 <HAL_RCC_OscConfig+0xf2>
        tickstart = HAL_GetTick();
 8000f6c:	f7ff fe08 	bl	8000b80 <HAL_GetTick>
 8000f70:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000f74:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f76:	2701      	movs	r7, #1
 8000f78:	fa96 f3a6 	rbit	r3, r6
 8000f7c:	6822      	ldr	r2, [r4, #0]
 8000f7e:	fa96 f3a6 	rbit	r3, r6
 8000f82:	fab3 f383 	clz	r3, r3
 8000f86:	f003 031f 	and.w	r3, r3, #31
 8000f8a:	fa07 f303 	lsl.w	r3, r7, r3
 8000f8e:	4213      	tst	r3, r2
 8000f90:	d1a9      	bne.n	8000ee6 <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f92:	f7ff fdf5 	bl	8000b80 <HAL_GetTick>
 8000f96:	eba0 0008 	sub.w	r0, r0, r8
 8000f9a:	2864      	cmp	r0, #100	; 0x64
 8000f9c:	d9ec      	bls.n	8000f78 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
 8000f9e:	2003      	movs	r0, #3
 8000fa0:	e79b      	b.n	8000eda <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fa2:	6823      	ldr	r3, [r4, #0]
 8000fa4:	b932      	cbnz	r2, 8000fb4 <HAL_RCC_OscConfig+0xe4>
 8000fa6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000faa:	6023      	str	r3, [r4, #0]
 8000fac:	6823      	ldr	r3, [r4, #0]
 8000fae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000fb2:	e7d3      	b.n	8000f5c <HAL_RCC_OscConfig+0x8c>
 8000fb4:	f5b2 2fa0 	cmp.w	r2, #327680	; 0x50000
 8000fb8:	d1f5      	bne.n	8000fa6 <HAL_RCC_OscConfig+0xd6>
 8000fba:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fbe:	6023      	str	r3, [r4, #0]
 8000fc0:	e7c9      	b.n	8000f56 <HAL_RCC_OscConfig+0x86>
        tickstart = HAL_GetTick();
 8000fc2:	f7ff fddd 	bl	8000b80 <HAL_GetTick>
 8000fc6:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000fca:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000fcc:	2701      	movs	r7, #1
 8000fce:	fa96 f3a6 	rbit	r3, r6
 8000fd2:	6822      	ldr	r2, [r4, #0]
 8000fd4:	fa96 f3a6 	rbit	r3, r6
 8000fd8:	fab3 f383 	clz	r3, r3
 8000fdc:	f003 031f 	and.w	r3, r3, #31
 8000fe0:	fa07 f303 	lsl.w	r3, r7, r3
 8000fe4:	4213      	tst	r3, r2
 8000fe6:	f43f af7e 	beq.w	8000ee6 <HAL_RCC_OscConfig+0x16>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fea:	f7ff fdc9 	bl	8000b80 <HAL_GetTick>
 8000fee:	eba0 0008 	sub.w	r0, r0, r8
 8000ff2:	2864      	cmp	r0, #100	; 0x64
 8000ff4:	d9eb      	bls.n	8000fce <HAL_RCC_OscConfig+0xfe>
 8000ff6:	e7d2      	b.n	8000f9e <HAL_RCC_OscConfig+0xce>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000ff8:	4c7e      	ldr	r4, [pc, #504]	; (80011f4 <HAL_RCC_OscConfig+0x324>)
 8000ffa:	6863      	ldr	r3, [r4, #4]
 8000ffc:	f013 0f0c 	tst.w	r3, #12
 8001000:	d007      	beq.n	8001012 <HAL_RCC_OscConfig+0x142>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001002:	6863      	ldr	r3, [r4, #4]
 8001004:	f003 030c 	and.w	r3, r3, #12
 8001008:	2b08      	cmp	r3, #8
 800100a:	d122      	bne.n	8001052 <HAL_RCC_OscConfig+0x182>
 800100c:	6863      	ldr	r3, [r4, #4]
 800100e:	03de      	lsls	r6, r3, #15
 8001010:	d41f      	bmi.n	8001052 <HAL_RCC_OscConfig+0x182>
 8001012:	2302      	movs	r3, #2
 8001014:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001018:	6821      	ldr	r1, [r4, #0]
 800101a:	fa93 f3a3 	rbit	r3, r3
 800101e:	fab3 f383 	clz	r3, r3
 8001022:	f003 031f 	and.w	r3, r3, #31
 8001026:	2201      	movs	r2, #1
 8001028:	fa02 f303 	lsl.w	r3, r2, r3
 800102c:	420b      	tst	r3, r1
 800102e:	d003      	beq.n	8001038 <HAL_RCC_OscConfig+0x168>
 8001030:	692b      	ldr	r3, [r5, #16]
 8001032:	4293      	cmp	r3, r2
 8001034:	f47f af50 	bne.w	8000ed8 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001038:	6821      	ldr	r1, [r4, #0]
 800103a:	23f8      	movs	r3, #248	; 0xf8
 800103c:	fa93 f3a3 	rbit	r3, r3
 8001040:	fab3 f283 	clz	r2, r3
 8001044:	696b      	ldr	r3, [r5, #20]
 8001046:	4093      	lsls	r3, r2
 8001048:	f021 02f8 	bic.w	r2, r1, #248	; 0xf8
 800104c:	4313      	orrs	r3, r2
 800104e:	6023      	str	r3, [r4, #0]
 8001050:	e74d      	b.n	8000eee <HAL_RCC_OscConfig+0x1e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001052:	692a      	ldr	r2, [r5, #16]
 8001054:	2601      	movs	r6, #1
 8001056:	b30a      	cbz	r2, 800109c <HAL_RCC_OscConfig+0x1cc>
 8001058:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_ENABLE();
 800105c:	fab3 f383 	clz	r3, r3
 8001060:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001064:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001068:	009b      	lsls	r3, r3, #2
 800106a:	2702      	movs	r7, #2
 800106c:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 800106e:	f7ff fd87 	bl	8000b80 <HAL_GetTick>
 8001072:	4680      	mov	r8, r0
 8001074:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001078:	6822      	ldr	r2, [r4, #0]
 800107a:	fa97 f3a7 	rbit	r3, r7
 800107e:	fab3 f383 	clz	r3, r3
 8001082:	f003 031f 	and.w	r3, r3, #31
 8001086:	fa06 f303 	lsl.w	r3, r6, r3
 800108a:	4213      	tst	r3, r2
 800108c:	d1d4      	bne.n	8001038 <HAL_RCC_OscConfig+0x168>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108e:	f7ff fd77 	bl	8000b80 <HAL_GetTick>
 8001092:	eba0 0008 	sub.w	r0, r0, r8
 8001096:	2802      	cmp	r0, #2
 8001098:	d9ec      	bls.n	8001074 <HAL_RCC_OscConfig+0x1a4>
 800109a:	e780      	b.n	8000f9e <HAL_RCC_OscConfig+0xce>
 800109c:	fa96 f3a6 	rbit	r3, r6
        __HAL_RCC_HSI_DISABLE();
 80010a0:	fab3 f383 	clz	r3, r3
 80010a4:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80010a8:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80010ac:	009b      	lsls	r3, r3, #2
 80010ae:	2702      	movs	r7, #2
 80010b0:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80010b2:	f7ff fd65 	bl	8000b80 <HAL_GetTick>
 80010b6:	4680      	mov	r8, r0
 80010b8:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80010bc:	6822      	ldr	r2, [r4, #0]
 80010be:	fa97 f3a7 	rbit	r3, r7
 80010c2:	fab3 f383 	clz	r3, r3
 80010c6:	f003 031f 	and.w	r3, r3, #31
 80010ca:	fa06 f303 	lsl.w	r3, r6, r3
 80010ce:	4213      	tst	r3, r2
 80010d0:	f43f af0d 	beq.w	8000eee <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010d4:	f7ff fd54 	bl	8000b80 <HAL_GetTick>
 80010d8:	eba0 0008 	sub.w	r0, r0, r8
 80010dc:	2802      	cmp	r0, #2
 80010de:	d9eb      	bls.n	80010b8 <HAL_RCC_OscConfig+0x1e8>
 80010e0:	e75d      	b.n	8000f9e <HAL_RCC_OscConfig+0xce>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80010e2:	69aa      	ldr	r2, [r5, #24]
 80010e4:	4e43      	ldr	r6, [pc, #268]	; (80011f4 <HAL_RCC_OscConfig+0x324>)
 80010e6:	4944      	ldr	r1, [pc, #272]	; (80011f8 <HAL_RCC_OscConfig+0x328>)
 80010e8:	2401      	movs	r4, #1
 80010ea:	b31a      	cbz	r2, 8001134 <HAL_RCC_OscConfig+0x264>
 80010ec:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_ENABLE();
 80010f0:	fab3 f383 	clz	r3, r3
 80010f4:	440b      	add	r3, r1
 80010f6:	009b      	lsls	r3, r3, #2
 80010f8:	2702      	movs	r7, #2
 80010fa:	601c      	str	r4, [r3, #0]
      tickstart = HAL_GetTick();
 80010fc:	f7ff fd40 	bl	8000b80 <HAL_GetTick>
 8001100:	4680      	mov	r8, r0
 8001102:	fa97 f3a7 	rbit	r3, r7
 8001106:	fa97 f3a7 	rbit	r3, r7
 800110a:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800110e:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001110:	fa97 f3a7 	rbit	r3, r7
 8001114:	fab3 f383 	clz	r3, r3
 8001118:	f003 031f 	and.w	r3, r3, #31
 800111c:	fa04 f303 	lsl.w	r3, r4, r3
 8001120:	4213      	tst	r3, r2
 8001122:	f47f aee8 	bne.w	8000ef6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001126:	f7ff fd2b 	bl	8000b80 <HAL_GetTick>
 800112a:	eba0 0008 	sub.w	r0, r0, r8
 800112e:	2802      	cmp	r0, #2
 8001130:	d9e7      	bls.n	8001102 <HAL_RCC_OscConfig+0x232>
 8001132:	e734      	b.n	8000f9e <HAL_RCC_OscConfig+0xce>
 8001134:	fa94 f3a4 	rbit	r3, r4
      __HAL_RCC_LSI_DISABLE();
 8001138:	fab3 f383 	clz	r3, r3
 800113c:	440b      	add	r3, r1
 800113e:	009b      	lsls	r3, r3, #2
 8001140:	2702      	movs	r7, #2
 8001142:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8001144:	f7ff fd1c 	bl	8000b80 <HAL_GetTick>
 8001148:	4680      	mov	r8, r0
 800114a:	fa97 f3a7 	rbit	r3, r7
 800114e:	fa97 f3a7 	rbit	r3, r7
 8001152:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001156:	6a72      	ldr	r2, [r6, #36]	; 0x24
 8001158:	fa97 f3a7 	rbit	r3, r7
 800115c:	fab3 f383 	clz	r3, r3
 8001160:	f003 031f 	and.w	r3, r3, #31
 8001164:	fa04 f303 	lsl.w	r3, r4, r3
 8001168:	4213      	tst	r3, r2
 800116a:	f43f aec4 	beq.w	8000ef6 <HAL_RCC_OscConfig+0x26>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800116e:	f7ff fd07 	bl	8000b80 <HAL_GetTick>
 8001172:	eba0 0008 	sub.w	r0, r0, r8
 8001176:	2802      	cmp	r0, #2
 8001178:	d9e7      	bls.n	800114a <HAL_RCC_OscConfig+0x27a>
 800117a:	e710      	b.n	8000f9e <HAL_RCC_OscConfig+0xce>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800117c:	4c1d      	ldr	r4, [pc, #116]	; (80011f4 <HAL_RCC_OscConfig+0x324>)
 800117e:	69e3      	ldr	r3, [r4, #28]
 8001180:	00d9      	lsls	r1, r3, #3
 8001182:	d434      	bmi.n	80011ee <HAL_RCC_OscConfig+0x31e>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001184:	69e3      	ldr	r3, [r4, #28]
 8001186:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800118a:	61e3      	str	r3, [r4, #28]
 800118c:	69e3      	ldr	r3, [r4, #28]
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	9301      	str	r3, [sp, #4]
 8001194:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001196:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001198:	4f18      	ldr	r7, [pc, #96]	; (80011fc <HAL_RCC_OscConfig+0x32c>)
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	05da      	lsls	r2, r3, #23
 800119e:	d52f      	bpl.n	8001200 <HAL_RCC_OscConfig+0x330>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80011a0:	68eb      	ldr	r3, [r5, #12]
 80011a2:	2b01      	cmp	r3, #1
 80011a4:	d13d      	bne.n	8001222 <HAL_RCC_OscConfig+0x352>
 80011a6:	6a23      	ldr	r3, [r4, #32]
 80011a8:	f043 0301 	orr.w	r3, r3, #1
 80011ac:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 80011ae:	f7ff fce7 	bl	8000b80 <HAL_GetTick>
 80011b2:	2702      	movs	r7, #2
 80011b4:	4682      	mov	sl, r0
 80011b6:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80011b8:	f04f 0801 	mov.w	r8, #1
 80011bc:	fa97 f3a7 	rbit	r3, r7
 80011c0:	fa97 f3a7 	rbit	r3, r7
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d06c      	beq.n	80012a2 <HAL_RCC_OscConfig+0x3d2>
 80011c8:	6a22      	ldr	r2, [r4, #32]
 80011ca:	fa99 f3a9 	rbit	r3, r9
 80011ce:	fab3 f383 	clz	r3, r3
 80011d2:	f003 031f 	and.w	r3, r3, #31
 80011d6:	fa08 f303 	lsl.w	r3, r8, r3
 80011da:	4213      	tst	r3, r2
 80011dc:	d058      	beq.n	8001290 <HAL_RCC_OscConfig+0x3c0>
    if(pwrclkchanged == SET)
 80011de:	2e00      	cmp	r6, #0
 80011e0:	f43f ae8d 	beq.w	8000efe <HAL_RCC_OscConfig+0x2e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80011e4:	69e3      	ldr	r3, [r4, #28]
 80011e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80011ea:	61e3      	str	r3, [r4, #28]
 80011ec:	e687      	b.n	8000efe <HAL_RCC_OscConfig+0x2e>
    FlagStatus       pwrclkchanged = RESET;
 80011ee:	2600      	movs	r6, #0
 80011f0:	e7d2      	b.n	8001198 <HAL_RCC_OscConfig+0x2c8>
 80011f2:	bf00      	nop
 80011f4:	40021000 	.word	0x40021000
 80011f8:	10908120 	.word	0x10908120
 80011fc:	40007000 	.word	0x40007000
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001206:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 8001208:	f7ff fcba 	bl	8000b80 <HAL_GetTick>
 800120c:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	05db      	lsls	r3, r3, #23
 8001212:	d4c5      	bmi.n	80011a0 <HAL_RCC_OscConfig+0x2d0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001214:	f7ff fcb4 	bl	8000b80 <HAL_GetTick>
 8001218:	eba0 0008 	sub.w	r0, r0, r8
 800121c:	2864      	cmp	r0, #100	; 0x64
 800121e:	d9f6      	bls.n	800120e <HAL_RCC_OscConfig+0x33e>
 8001220:	e6bd      	b.n	8000f9e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001222:	bb3b      	cbnz	r3, 8001274 <HAL_RCC_OscConfig+0x3a4>
 8001224:	6a23      	ldr	r3, [r4, #32]
 8001226:	f023 0301 	bic.w	r3, r3, #1
 800122a:	6223      	str	r3, [r4, #32]
 800122c:	6a23      	ldr	r3, [r4, #32]
 800122e:	f023 0304 	bic.w	r3, r3, #4
 8001232:	6223      	str	r3, [r4, #32]
      tickstart = HAL_GetTick();
 8001234:	f7ff fca4 	bl	8000b80 <HAL_GetTick>
 8001238:	2702      	movs	r7, #2
 800123a:	4682      	mov	sl, r0
 800123c:	46b9      	mov	r9, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800123e:	f04f 0801 	mov.w	r8, #1
 8001242:	fa97 f3a7 	rbit	r3, r7
 8001246:	fa97 f3a7 	rbit	r3, r7
 800124a:	b373      	cbz	r3, 80012aa <HAL_RCC_OscConfig+0x3da>
 800124c:	6a22      	ldr	r2, [r4, #32]
 800124e:	fa99 f3a9 	rbit	r3, r9
 8001252:	fab3 f383 	clz	r3, r3
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	fa08 f303 	lsl.w	r3, r8, r3
 800125e:	4213      	tst	r3, r2
 8001260:	d0bd      	beq.n	80011de <HAL_RCC_OscConfig+0x30e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001262:	f7ff fc8d 	bl	8000b80 <HAL_GetTick>
 8001266:	f241 3388 	movw	r3, #5000	; 0x1388
 800126a:	eba0 000a 	sub.w	r0, r0, sl
 800126e:	4298      	cmp	r0, r3
 8001270:	d9e7      	bls.n	8001242 <HAL_RCC_OscConfig+0x372>
 8001272:	e694      	b.n	8000f9e <HAL_RCC_OscConfig+0xce>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001274:	2b05      	cmp	r3, #5
 8001276:	6a23      	ldr	r3, [r4, #32]
 8001278:	d103      	bne.n	8001282 <HAL_RCC_OscConfig+0x3b2>
 800127a:	f043 0304 	orr.w	r3, r3, #4
 800127e:	6223      	str	r3, [r4, #32]
 8001280:	e791      	b.n	80011a6 <HAL_RCC_OscConfig+0x2d6>
 8001282:	f023 0301 	bic.w	r3, r3, #1
 8001286:	6223      	str	r3, [r4, #32]
 8001288:	6a23      	ldr	r3, [r4, #32]
 800128a:	f023 0304 	bic.w	r3, r3, #4
 800128e:	e78d      	b.n	80011ac <HAL_RCC_OscConfig+0x2dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001290:	f7ff fc76 	bl	8000b80 <HAL_GetTick>
 8001294:	f241 3388 	movw	r3, #5000	; 0x1388
 8001298:	eba0 000a 	sub.w	r0, r0, sl
 800129c:	4298      	cmp	r0, r3
 800129e:	d98d      	bls.n	80011bc <HAL_RCC_OscConfig+0x2ec>
 80012a0:	e67d      	b.n	8000f9e <HAL_RCC_OscConfig+0xce>
 80012a2:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012a6:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012a8:	e78f      	b.n	80011ca <HAL_RCC_OscConfig+0x2fa>
 80012aa:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80012b0:	e7cd      	b.n	800124e <HAL_RCC_OscConfig+0x37e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80012b2:	4c41      	ldr	r4, [pc, #260]	; (80013b8 <HAL_RCC_OscConfig+0x4e8>)
 80012b4:	6863      	ldr	r3, [r4, #4]
 80012b6:	f003 030c 	and.w	r3, r3, #12
 80012ba:	2b08      	cmp	r3, #8
 80012bc:	f43f ae0c 	beq.w	8000ed8 <HAL_RCC_OscConfig+0x8>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80012c0:	2a02      	cmp	r2, #2
 80012c2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80012c6:	d152      	bne.n	800136e <HAL_RCC_OscConfig+0x49e>
 80012c8:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 80012cc:	fab3 f383 	clz	r3, r3
 80012d0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012d4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	2200      	movs	r2, #0
 80012dc:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80012de:	f7ff fc4f 	bl	8000b80 <HAL_GetTick>
 80012e2:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
 80012e6:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80012e8:	2601      	movs	r6, #1
 80012ea:	fa97 f3a7 	rbit	r3, r7
 80012ee:	6822      	ldr	r2, [r4, #0]
 80012f0:	fa97 f3a7 	rbit	r3, r7
 80012f4:	fab3 f383 	clz	r3, r3
 80012f8:	f003 031f 	and.w	r3, r3, #31
 80012fc:	fa06 f303 	lsl.w	r3, r6, r3
 8001300:	4213      	tst	r3, r2
 8001302:	d12d      	bne.n	8001360 <HAL_RCC_OscConfig+0x490>
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001304:	6862      	ldr	r2, [r4, #4]
 8001306:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001308:	6a29      	ldr	r1, [r5, #32]
 800130a:	f422 1274 	bic.w	r2, r2, #3997696	; 0x3d0000
 800130e:	430b      	orrs	r3, r1
 8001310:	4313      	orrs	r3, r2
 8001312:	6063      	str	r3, [r4, #4]
 8001314:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001318:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 800131c:	fab3 f383 	clz	r3, r3
 8001320:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001324:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001328:	009b      	lsls	r3, r3, #2
 800132a:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800132e:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8001330:	f7ff fc26 	bl	8000b80 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001334:	2601      	movs	r6, #1
        tickstart = HAL_GetTick();
 8001336:	4607      	mov	r7, r0
 8001338:	fa95 f3a5 	rbit	r3, r5
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800133c:	6822      	ldr	r2, [r4, #0]
 800133e:	fa95 f3a5 	rbit	r3, r5
 8001342:	fab3 f383 	clz	r3, r3
 8001346:	f003 031f 	and.w	r3, r3, #31
 800134a:	fa06 f303 	lsl.w	r3, r6, r3
 800134e:	4213      	tst	r3, r2
 8001350:	f47f add9 	bne.w	8000f06 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001354:	f7ff fc14 	bl	8000b80 <HAL_GetTick>
 8001358:	1bc0      	subs	r0, r0, r7
 800135a:	2802      	cmp	r0, #2
 800135c:	d9ec      	bls.n	8001338 <HAL_RCC_OscConfig+0x468>
 800135e:	e61e      	b.n	8000f9e <HAL_RCC_OscConfig+0xce>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001360:	f7ff fc0e 	bl	8000b80 <HAL_GetTick>
 8001364:	eba0 0008 	sub.w	r0, r0, r8
 8001368:	2802      	cmp	r0, #2
 800136a:	d9be      	bls.n	80012ea <HAL_RCC_OscConfig+0x41a>
 800136c:	e617      	b.n	8000f9e <HAL_RCC_OscConfig+0xce>
 800136e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8001372:	fab3 f383 	clz	r3, r3
 8001376:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800137a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	2200      	movs	r2, #0
 8001382:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8001384:	f7ff fbfc 	bl	8000b80 <HAL_GetTick>
 8001388:	f04f 7500 	mov.w	r5, #33554432	; 0x2000000
 800138c:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800138e:	2601      	movs	r6, #1
 8001390:	fa95 f3a5 	rbit	r3, r5
 8001394:	6822      	ldr	r2, [r4, #0]
 8001396:	fa95 f3a5 	rbit	r3, r5
 800139a:	fab3 f383 	clz	r3, r3
 800139e:	f003 031f 	and.w	r3, r3, #31
 80013a2:	fa06 f303 	lsl.w	r3, r6, r3
 80013a6:	4213      	tst	r3, r2
 80013a8:	f43f adad 	beq.w	8000f06 <HAL_RCC_OscConfig+0x36>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013ac:	f7ff fbe8 	bl	8000b80 <HAL_GetTick>
 80013b0:	1bc0      	subs	r0, r0, r7
 80013b2:	2802      	cmp	r0, #2
 80013b4:	d9ec      	bls.n	8001390 <HAL_RCC_OscConfig+0x4c0>
 80013b6:	e5f2      	b.n	8000f9e <HAL_RCC_OscConfig+0xce>
 80013b8:	40021000 	.word	0x40021000

080013bc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80013bc:	b510      	push	{r4, lr}
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
 80013be:	4c13      	ldr	r4, [pc, #76]	; (800140c <HAL_RCC_GetSysClockFreq+0x50>)
 80013c0:	6861      	ldr	r1, [r4, #4]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80013c2:	f001 030c 	and.w	r3, r1, #12
 80013c6:	2b08      	cmp	r3, #8
 80013c8:	d11e      	bne.n	8001408 <HAL_RCC_GetSysClockFreq+0x4c>
 80013ca:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80013ce:	fa93 f3a3 	rbit	r3, r3
      sysclockfreq = HSE_VALUE;
      break;
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80013d2:	f401 1270 	and.w	r2, r1, #3932160	; 0x3c0000
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	fa22 f303 	lsr.w	r3, r2, r3
 80013de:	4a0c      	ldr	r2, [pc, #48]	; (8001410 <HAL_RCC_GetSysClockFreq+0x54>)
 80013e0:	5cd0      	ldrb	r0, [r2, r3]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80013e2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80013e4:	220f      	movs	r2, #15
 80013e6:	fa92 f2a2 	rbit	r2, r2
 80013ea:	fab2 f282 	clz	r2, r2
 80013ee:	f003 030f 	and.w	r3, r3, #15
 80013f2:	40d3      	lsrs	r3, r2
 80013f4:	4a07      	ldr	r2, [pc, #28]	; (8001414 <HAL_RCC_GetSysClockFreq+0x58>)
 80013f6:	5cd2      	ldrb	r2, [r2, r3]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 80013f8:	03cb      	lsls	r3, r1, #15
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 80013fa:	bf4a      	itet	mi
 80013fc:	4b06      	ldrmi	r3, [pc, #24]	; (8001418 <HAL_RCC_GetSysClockFreq+0x5c>)
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 80013fe:	4b07      	ldrpl	r3, [pc, #28]	; (800141c <HAL_RCC_GetSysClockFreq+0x60>)
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8001400:	fbb3 f3f2 	udivmi	r3, r3, r2
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8001404:	4358      	muls	r0, r3
 8001406:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8001408:	4803      	ldr	r0, [pc, #12]	; (8001418 <HAL_RCC_GetSysClockFreq+0x5c>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 800140a:	bd10      	pop	{r4, pc}
 800140c:	40021000 	.word	0x40021000
 8001410:	08003428 	.word	0x08003428
 8001414:	08003438 	.word	0x08003438
 8001418:	007a1200 	.word	0x007a1200
 800141c:	003d0900 	.word	0x003d0900

08001420 <HAL_RCC_ClockConfig>:
{
 8001420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001424:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8001426:	4604      	mov	r4, r0
 8001428:	b910      	cbnz	r0, 8001430 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800142a:	2001      	movs	r0, #1
 800142c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001430:	4a4c      	ldr	r2, [pc, #304]	; (8001564 <HAL_RCC_ClockConfig+0x144>)
 8001432:	6813      	ldr	r3, [r2, #0]
 8001434:	f003 0307 	and.w	r3, r3, #7
 8001438:	428b      	cmp	r3, r1
 800143a:	d32e      	bcc.n	800149a <HAL_RCC_ClockConfig+0x7a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800143c:	6822      	ldr	r2, [r4, #0]
 800143e:	0791      	lsls	r1, r2, #30
 8001440:	d436      	bmi.n	80014b0 <HAL_RCC_ClockConfig+0x90>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001442:	07d2      	lsls	r2, r2, #31
 8001444:	d43c      	bmi.n	80014c0 <HAL_RCC_ClockConfig+0xa0>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001446:	4a47      	ldr	r2, [pc, #284]	; (8001564 <HAL_RCC_ClockConfig+0x144>)
 8001448:	6813      	ldr	r3, [r2, #0]
 800144a:	f003 0307 	and.w	r3, r3, #7
 800144e:	429d      	cmp	r5, r3
 8001450:	d375      	bcc.n	800153e <HAL_RCC_ClockConfig+0x11e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001452:	6822      	ldr	r2, [r4, #0]
 8001454:	4d44      	ldr	r5, [pc, #272]	; (8001568 <HAL_RCC_ClockConfig+0x148>)
 8001456:	f012 0f04 	tst.w	r2, #4
 800145a:	d17c      	bne.n	8001556 <HAL_RCC_ClockConfig+0x136>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800145c:	0713      	lsls	r3, r2, #28
 800145e:	d506      	bpl.n	800146e <HAL_RCC_ClockConfig+0x4e>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001460:	686b      	ldr	r3, [r5, #4]
 8001462:	6922      	ldr	r2, [r4, #16]
 8001464:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8001468:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800146c:	606b      	str	r3, [r5, #4]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800146e:	f7ff ffa5 	bl	80013bc <HAL_RCC_GetSysClockFreq>
 8001472:	686b      	ldr	r3, [r5, #4]
 8001474:	22f0      	movs	r2, #240	; 0xf0
 8001476:	fa92 f2a2 	rbit	r2, r2
 800147a:	fab2 f282 	clz	r2, r2
 800147e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001482:	40d3      	lsrs	r3, r2
 8001484:	4a39      	ldr	r2, [pc, #228]	; (800156c <HAL_RCC_ClockConfig+0x14c>)
 8001486:	5cd3      	ldrb	r3, [r2, r3]
 8001488:	40d8      	lsrs	r0, r3
 800148a:	4b39      	ldr	r3, [pc, #228]	; (8001570 <HAL_RCC_ClockConfig+0x150>)
 800148c:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800148e:	2000      	movs	r0, #0
 8001490:	f7ff fb34 	bl	8000afc <HAL_InitTick>
  return HAL_OK;
 8001494:	2000      	movs	r0, #0
 8001496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 800149a:	6813      	ldr	r3, [r2, #0]
 800149c:	f023 0307 	bic.w	r3, r3, #7
 80014a0:	430b      	orrs	r3, r1
 80014a2:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80014a4:	6813      	ldr	r3, [r2, #0]
 80014a6:	f003 0307 	and.w	r3, r3, #7
 80014aa:	4299      	cmp	r1, r3
 80014ac:	d1bd      	bne.n	800142a <HAL_RCC_ClockConfig+0xa>
 80014ae:	e7c5      	b.n	800143c <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014b0:	492d      	ldr	r1, [pc, #180]	; (8001568 <HAL_RCC_ClockConfig+0x148>)
 80014b2:	68a0      	ldr	r0, [r4, #8]
 80014b4:	684b      	ldr	r3, [r1, #4]
 80014b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014ba:	4303      	orrs	r3, r0
 80014bc:	604b      	str	r3, [r1, #4]
 80014be:	e7c0      	b.n	8001442 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014c0:	6862      	ldr	r2, [r4, #4]
 80014c2:	4e29      	ldr	r6, [pc, #164]	; (8001568 <HAL_RCC_ClockConfig+0x148>)
 80014c4:	2a01      	cmp	r2, #1
 80014c6:	d127      	bne.n	8001518 <HAL_RCC_ClockConfig+0xf8>
 80014c8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80014cc:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014d0:	6831      	ldr	r1, [r6, #0]
 80014d2:	fa93 f3a3 	rbit	r3, r3
 80014d6:	fab3 f383 	clz	r3, r3
 80014da:	f003 031f 	and.w	r3, r3, #31
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e4:	d0a1      	beq.n	800142a <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80014e6:	6873      	ldr	r3, [r6, #4]
 80014e8:	f023 0303 	bic.w	r3, r3, #3
 80014ec:	431a      	orrs	r2, r3
 80014ee:	6072      	str	r2, [r6, #4]
    tickstart = HAL_GetTick();
 80014f0:	f7ff fb46 	bl	8000b80 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80014f4:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80014f8:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80014fa:	6873      	ldr	r3, [r6, #4]
 80014fc:	6862      	ldr	r2, [r4, #4]
 80014fe:	f003 030c 	and.w	r3, r3, #12
 8001502:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8001506:	d09e      	beq.n	8001446 <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001508:	f7ff fb3a 	bl	8000b80 <HAL_GetTick>
 800150c:	1bc0      	subs	r0, r0, r7
 800150e:	4540      	cmp	r0, r8
 8001510:	d9f3      	bls.n	80014fa <HAL_RCC_ClockConfig+0xda>
        return HAL_TIMEOUT;
 8001512:	2003      	movs	r0, #3
}
 8001514:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001518:	2a02      	cmp	r2, #2
 800151a:	bf0c      	ite	eq
 800151c:	f04f 7300 	moveq.w	r3, #33554432	; 0x2000000
 8001520:	2302      	movne	r3, #2
 8001522:	fa93 f1a3 	rbit	r1, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001526:	6830      	ldr	r0, [r6, #0]
 8001528:	fa93 f3a3 	rbit	r3, r3
 800152c:	fab3 f383 	clz	r3, r3
 8001530:	f003 031f 	and.w	r3, r3, #31
 8001534:	2101      	movs	r1, #1
 8001536:	fa01 f303 	lsl.w	r3, r1, r3
 800153a:	4203      	tst	r3, r0
 800153c:	e7d2      	b.n	80014e4 <HAL_RCC_ClockConfig+0xc4>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800153e:	6813      	ldr	r3, [r2, #0]
 8001540:	f023 0307 	bic.w	r3, r3, #7
 8001544:	432b      	orrs	r3, r5
 8001546:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001548:	6813      	ldr	r3, [r2, #0]
 800154a:	f003 0307 	and.w	r3, r3, #7
 800154e:	429d      	cmp	r5, r3
 8001550:	f47f af6b 	bne.w	800142a <HAL_RCC_ClockConfig+0xa>
 8001554:	e77d      	b.n	8001452 <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001556:	686b      	ldr	r3, [r5, #4]
 8001558:	68e1      	ldr	r1, [r4, #12]
 800155a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800155e:	430b      	orrs	r3, r1
 8001560:	606b      	str	r3, [r5, #4]
 8001562:	e77b      	b.n	800145c <HAL_RCC_ClockConfig+0x3c>
 8001564:	40022000 	.word	0x40022000
 8001568:	40021000 	.word	0x40021000
 800156c:	0800344c 	.word	0x0800344c
 8001570:	20000008 	.word	0x20000008

08001574 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001576:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800157a:	685b      	ldr	r3, [r3, #4]
 800157c:	fa92 f2a2 	rbit	r2, r2
 8001580:	fab2 f282 	clz	r2, r2
 8001584:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8001588:	40d3      	lsrs	r3, r2
 800158a:	4a04      	ldr	r2, [pc, #16]	; (800159c <HAL_RCC_GetPCLK1Freq+0x28>)
 800158c:	5cd3      	ldrb	r3, [r2, r3]
 800158e:	4a04      	ldr	r2, [pc, #16]	; (80015a0 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8001590:	6810      	ldr	r0, [r2, #0]
}    
 8001592:	40d8      	lsrs	r0, r3
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	40021000 	.word	0x40021000
 800159c:	0800345c 	.word	0x0800345c
 80015a0:	20000008 	.word	0x20000008

080015a4 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80015a6:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	fa92 f2a2 	rbit	r2, r2
 80015b0:	fab2 f282 	clz	r2, r2
 80015b4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 80015b8:	40d3      	lsrs	r3, r2
 80015ba:	4a04      	ldr	r2, [pc, #16]	; (80015cc <HAL_RCC_GetPCLK2Freq+0x28>)
 80015bc:	5cd3      	ldrb	r3, [r2, r3]
 80015be:	4a04      	ldr	r2, [pc, #16]	; (80015d0 <HAL_RCC_GetPCLK2Freq+0x2c>)
 80015c0:	6810      	ldr	r0, [r2, #0]
} 
 80015c2:	40d8      	lsrs	r0, r3
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	40021000 	.word	0x40021000
 80015cc:	0800345c 	.word	0x0800345c
 80015d0:	20000008 	.word	0x20000008

080015d4 <HAL_RCCEx_PeriphCLKConfig>:
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80015d4:	6803      	ldr	r3, [r0, #0]
{
 80015d6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80015da:	4605      	mov	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80015dc:	03d8      	lsls	r0, r3, #15
 80015de:	d520      	bpl.n	8001622 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015e0:	4c50      	ldr	r4, [pc, #320]	; (8001724 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 80015e2:	69e3      	ldr	r3, [r4, #28]
 80015e4:	00d9      	lsls	r1, r3, #3
 80015e6:	d444      	bmi.n	8001672 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015e8:	69e3      	ldr	r3, [r4, #28]
 80015ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015ee:	61e3      	str	r3, [r4, #28]
 80015f0:	69e3      	ldr	r3, [r4, #28]
 80015f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015f6:	9301      	str	r3, [sp, #4]
 80015f8:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80015fa:	2601      	movs	r6, #1
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015fc:	4f4a      	ldr	r7, [pc, #296]	; (8001728 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80015fe:	683b      	ldr	r3, [r7, #0]
 8001600:	05da      	lsls	r2, r3, #23
 8001602:	d538      	bpl.n	8001676 <HAL_RCCEx_PeriphCLKConfig+0xa2>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001604:	6a23      	ldr	r3, [r4, #32]
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001606:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 800160a:	d148      	bne.n	800169e <HAL_RCCEx_PeriphCLKConfig+0xca>
            return HAL_TIMEOUT;
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800160c:	6a23      	ldr	r3, [r4, #32]
 800160e:	686a      	ldr	r2, [r5, #4]
 8001610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001614:	4313      	orrs	r3, r2
 8001616:	6223      	str	r3, [r4, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8001618:	b11e      	cbz	r6, 8001622 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800161a:	69e3      	ldr	r3, [r4, #28]
 800161c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001620:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001622:	6828      	ldr	r0, [r5, #0]
 8001624:	07c1      	lsls	r1, r0, #31
 8001626:	d506      	bpl.n	8001636 <HAL_RCCEx_PeriphCLKConfig+0x62>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001628:	4a3e      	ldr	r2, [pc, #248]	; (8001724 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800162a:	68a9      	ldr	r1, [r5, #8]
 800162c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 800162e:	f023 0303 	bic.w	r3, r3, #3
 8001632:	430b      	orrs	r3, r1
 8001634:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001636:	0682      	lsls	r2, r0, #26
 8001638:	d506      	bpl.n	8001648 <HAL_RCCEx_PeriphCLKConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800163a:	4a3a      	ldr	r2, [pc, #232]	; (8001724 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800163c:	68e9      	ldr	r1, [r5, #12]
 800163e:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001640:	f023 0310 	bic.w	r3, r3, #16
 8001644:	430b      	orrs	r3, r1
 8001646:	6313      	str	r3, [r2, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8001648:	0603      	lsls	r3, r0, #24
 800164a:	d506      	bpl.n	800165a <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800164c:	4a35      	ldr	r2, [pc, #212]	; (8001724 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800164e:	6929      	ldr	r1, [r5, #16]
 8001650:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8001652:	f423 73f8 	bic.w	r3, r3, #496	; 0x1f0
 8001656:	430b      	orrs	r3, r1
 8001658:	62d3      	str	r3, [r2, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800165a:	f410 5080 	ands.w	r0, r0, #4096	; 0x1000
 800165e:	d01b      	beq.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8001660:	4a30      	ldr	r2, [pc, #192]	; (8001724 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8001662:	6969      	ldr	r1, [r5, #20]
 8001664:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8001666:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800166a:	430b      	orrs	r3, r1
 800166c:	6313      	str	r3, [r2, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 800166e:	2000      	movs	r0, #0
 8001670:	e012      	b.n	8001698 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    FlagStatus       pwrclkchanged = RESET;
 8001672:	2600      	movs	r6, #0
 8001674:	e7c2      	b.n	80015fc <HAL_RCCEx_PeriphCLKConfig+0x28>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800167c:	603b      	str	r3, [r7, #0]
      tickstart = HAL_GetTick();
 800167e:	f7ff fa7f 	bl	8000b80 <HAL_GetTick>
 8001682:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	05db      	lsls	r3, r3, #23
 8001688:	d4bc      	bmi.n	8001604 <HAL_RCCEx_PeriphCLKConfig+0x30>
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168a:	f7ff fa79 	bl	8000b80 <HAL_GetTick>
 800168e:	eba0 0008 	sub.w	r0, r0, r8
 8001692:	2864      	cmp	r0, #100	; 0x64
 8001694:	d9f6      	bls.n	8001684 <HAL_RCCEx_PeriphCLKConfig+0xb0>
          return HAL_TIMEOUT;
 8001696:	2003      	movs	r0, #3
}
 8001698:	b002      	add	sp, #8
 800169a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800169e:	686a      	ldr	r2, [r5, #4]
 80016a0:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80016a4:	4293      	cmp	r3, r2
 80016a6:	d0b1      	beq.n	800160c <HAL_RCCEx_PeriphCLKConfig+0x38>
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80016a8:	6a21      	ldr	r1, [r4, #32]
 80016aa:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016ae:	f421 7040 	bic.w	r0, r1, #768	; 0x300
 80016b2:	fa93 f2a3 	rbit	r2, r3
      __HAL_RCC_BACKUPRESET_FORCE();
 80016b6:	f8df e074 	ldr.w	lr, [pc, #116]	; 800172c <HAL_RCCEx_PeriphCLKConfig+0x158>
 80016ba:	fab2 f282 	clz	r2, r2
 80016be:	4472      	add	r2, lr
 80016c0:	0092      	lsls	r2, r2, #2
 80016c2:	2701      	movs	r7, #1
 80016c4:	6017      	str	r7, [r2, #0]
 80016c6:	fa93 f3a3 	rbit	r3, r3
      __HAL_RCC_BACKUPRESET_RELEASE();
 80016ca:	fab3 f383 	clz	r3, r3
 80016ce:	4473      	add	r3, lr
 80016d0:	009b      	lsls	r3, r3, #2
 80016d2:	2200      	movs	r2, #0
 80016d4:	601a      	str	r2, [r3, #0]
      RCC->BDCR = temp_reg;
 80016d6:	6220      	str	r0, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80016d8:	07c8      	lsls	r0, r1, #31
 80016da:	d597      	bpl.n	800160c <HAL_RCCEx_PeriphCLKConfig+0x38>
        tickstart = HAL_GetTick();
 80016dc:	f7ff fa50 	bl	8000b80 <HAL_GetTick>
 80016e0:	f04f 0802 	mov.w	r8, #2
 80016e4:	4682      	mov	sl, r0
 80016e6:	46c1      	mov	r9, r8
 80016e8:	fa98 f3a8 	rbit	r3, r8
 80016ec:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f0:	b19b      	cbz	r3, 800171a <HAL_RCCEx_PeriphCLKConfig+0x146>
 80016f2:	6a22      	ldr	r2, [r4, #32]
 80016f4:	fa99 f3a9 	rbit	r3, r9
 80016f8:	fab3 f383 	clz	r3, r3
 80016fc:	f003 031f 	and.w	r3, r3, #31
 8001700:	fa07 f303 	lsl.w	r3, r7, r3
 8001704:	4213      	tst	r3, r2
 8001706:	d181      	bne.n	800160c <HAL_RCCEx_PeriphCLKConfig+0x38>
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001708:	f7ff fa3a 	bl	8000b80 <HAL_GetTick>
 800170c:	f241 3388 	movw	r3, #5000	; 0x1388
 8001710:	eba0 000a 	sub.w	r0, r0, sl
 8001714:	4298      	cmp	r0, r3
 8001716:	d9e7      	bls.n	80016e8 <HAL_RCCEx_PeriphCLKConfig+0x114>
 8001718:	e7bd      	b.n	8001696 <HAL_RCCEx_PeriphCLKConfig+0xc2>
 800171a:	fa98 f3a8 	rbit	r3, r8
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800171e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8001720:	e7e8      	b.n	80016f4 <HAL_RCCEx_PeriphCLKConfig+0x120>
 8001722:	bf00      	nop
 8001724:	40021000 	.word	0x40021000
 8001728:	40007000 	.word	0x40007000
 800172c:	10908100 	.word	0x10908100

08001730 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  
   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001730:	6803      	ldr	r3, [r0, #0]
 8001732:	68da      	ldr	r2, [r3, #12]
 8001734:	f042 0201 	orr.w	r2, r2, #1
 8001738:	60da      	str	r2, [r3, #12]
      
   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	f042 0201 	orr.w	r2, r2, #1
 8001740:	601a      	str	r2, [r3, #0]
      
  /* Return function status */
  return HAL_OK;
}
 8001742:	2000      	movs	r0, #0
 8001744:	4770      	bx	lr

08001746 <HAL_TIM_OC_DelayElapsedCallback>:
 8001746:	4770      	bx	lr

08001748 <HAL_TIM_IC_CaptureCallback>:
 8001748:	4770      	bx	lr

0800174a <HAL_TIM_PWM_PulseFinishedCallback>:
 800174a:	4770      	bx	lr

0800174c <HAL_TIM_TriggerCallback>:
 800174c:	4770      	bx	lr

0800174e <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800174e:	6803      	ldr	r3, [r0, #0]
 8001750:	691a      	ldr	r2, [r3, #16]
 8001752:	0791      	lsls	r1, r2, #30
{
 8001754:	b510      	push	{r4, lr}
 8001756:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001758:	d50f      	bpl.n	800177a <HAL_TIM_IRQHandler+0x2c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 800175a:	68da      	ldr	r2, [r3, #12]
 800175c:	0792      	lsls	r2, r2, #30
 800175e:	d50c      	bpl.n	800177a <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8001760:	f06f 0202 	mvn.w	r2, #2
 8001764:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
        
        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001766:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001768:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800176a:	0799      	lsls	r1, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800176c:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800176e:	f000 8085 	beq.w	800187c <HAL_TIM_IRQHandler+0x12e>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001772:	f7ff ffe9 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001776:	2300      	movs	r3, #0
 8001778:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800177a:	6823      	ldr	r3, [r4, #0]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	0752      	lsls	r2, r2, #29
 8001780:	d510      	bpl.n	80017a4 <HAL_TIM_IRQHandler+0x56>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001782:	68da      	ldr	r2, [r3, #12]
 8001784:	0750      	lsls	r0, r2, #29
 8001786:	d50d      	bpl.n	80017a4 <HAL_TIM_IRQHandler+0x56>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8001788:	f06f 0204 	mvn.w	r2, #4
 800178c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800178e:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001790:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001792:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001796:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 8001798:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800179a:	d075      	beq.n	8001888 <HAL_TIM_IRQHandler+0x13a>
        HAL_TIM_IC_CaptureCallback(htim);
 800179c:	f7ff ffd4 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017a0:	2300      	movs	r3, #0
 80017a2:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017a4:	6823      	ldr	r3, [r4, #0]
 80017a6:	691a      	ldr	r2, [r3, #16]
 80017a8:	0711      	lsls	r1, r2, #28
 80017aa:	d50f      	bpl.n	80017cc <HAL_TIM_IRQHandler+0x7e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 80017ac:	68da      	ldr	r2, [r3, #12]
 80017ae:	0712      	lsls	r2, r2, #28
 80017b0:	d50c      	bpl.n	80017cc <HAL_TIM_IRQHandler+0x7e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80017b2:	f06f 0208 	mvn.w	r2, #8
 80017b6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017b8:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017ba:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017bc:	079b      	lsls	r3, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017be:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80017c0:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017c2:	d067      	beq.n	8001894 <HAL_TIM_IRQHandler+0x146>
        HAL_TIM_IC_CaptureCallback(htim);
 80017c4:	f7ff ffc0 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017c8:	2300      	movs	r3, #0
 80017ca:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017cc:	6823      	ldr	r3, [r4, #0]
 80017ce:	691a      	ldr	r2, [r3, #16]
 80017d0:	06d0      	lsls	r0, r2, #27
 80017d2:	d510      	bpl.n	80017f6 <HAL_TIM_IRQHandler+0xa8>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 80017d4:	68da      	ldr	r2, [r3, #12]
 80017d6:	06d1      	lsls	r1, r2, #27
 80017d8:	d50d      	bpl.n	80017f6 <HAL_TIM_IRQHandler+0xa8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80017da:	f06f 0210 	mvn.w	r2, #16
 80017de:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017e0:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017e2:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017e4:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017e8:	7722      	strb	r2, [r4, #28]
      {          
        HAL_TIM_IC_CaptureCallback(htim);
 80017ea:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017ec:	d058      	beq.n	80018a0 <HAL_TIM_IRQHandler+0x152>
        HAL_TIM_IC_CaptureCallback(htim);
 80017ee:	f7ff ffab 	bl	8001748 <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f2:	2300      	movs	r3, #0
 80017f4:	7723      	strb	r3, [r4, #28]
    } 
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017f6:	6823      	ldr	r3, [r4, #0]
 80017f8:	691a      	ldr	r2, [r3, #16]
 80017fa:	07d2      	lsls	r2, r2, #31
 80017fc:	d508      	bpl.n	8001810 <HAL_TIM_IRQHandler+0xc2>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	07d0      	lsls	r0, r2, #31
 8001802:	d505      	bpl.n	8001810 <HAL_TIM_IRQHandler+0xc2>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8001804:	f06f 0201 	mvn.w	r2, #1
 8001808:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800180a:	4620      	mov	r0, r4
 800180c:	f000 fc68 	bl	80020e0 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001810:	6823      	ldr	r3, [r4, #0]
 8001812:	691a      	ldr	r2, [r3, #16]
 8001814:	0611      	lsls	r1, r2, #24
 8001816:	d508      	bpl.n	800182a <HAL_TIM_IRQHandler+0xdc>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001818:	68da      	ldr	r2, [r3, #12]
 800181a:	0612      	lsls	r2, r2, #24
 800181c:	d505      	bpl.n	800182a <HAL_TIM_IRQHandler+0xdc>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800181e:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001822:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001824:	4620      	mov	r0, r4
 8001826:	f000 f98a 	bl	8001b3e <HAL_TIMEx_BreakCallback>
    }
  }

#if defined(TIM_FLAG_BREAK2)
  /* TIM Break input 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800182a:	6823      	ldr	r3, [r4, #0]
 800182c:	691a      	ldr	r2, [r3, #16]
 800182e:	05d0      	lsls	r0, r2, #23
 8001830:	d508      	bpl.n	8001844 <HAL_TIM_IRQHandler+0xf6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001832:	68da      	ldr	r2, [r3, #12]
 8001834:	0611      	lsls	r1, r2, #24
 8001836:	d505      	bpl.n	8001844 <HAL_TIM_IRQHandler+0xf6>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8001838:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800183c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800183e:	4620      	mov	r0, r4
 8001840:	f000 f97e 	bl	8001b40 <HAL_TIMEx_Break2Callback>
    }
  }
#endif

  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001844:	6823      	ldr	r3, [r4, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	0652      	lsls	r2, r2, #25
 800184a:	d508      	bpl.n	800185e <HAL_TIM_IRQHandler+0x110>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 800184c:	68da      	ldr	r2, [r3, #12]
 800184e:	0650      	lsls	r0, r2, #25
 8001850:	d505      	bpl.n	800185e <HAL_TIM_IRQHandler+0x110>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8001852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001856:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001858:	4620      	mov	r0, r4
 800185a:	f7ff ff77 	bl	800174c <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800185e:	6823      	ldr	r3, [r4, #0]
 8001860:	691a      	ldr	r2, [r3, #16]
 8001862:	0691      	lsls	r1, r2, #26
 8001864:	d522      	bpl.n	80018ac <HAL_TIM_IRQHandler+0x15e>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001866:	68da      	ldr	r2, [r3, #12]
 8001868:	0692      	lsls	r2, r2, #26
 800186a:	d51f      	bpl.n	80018ac <HAL_TIM_IRQHandler+0x15e>
    { 
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800186c:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001870:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8001872:	611a      	str	r2, [r3, #16]
    }
  }
}
 8001874:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001878:	f000 b960 	b.w	8001b3c <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800187c:	f7ff ff63 	bl	8001746 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001880:	4620      	mov	r0, r4
 8001882:	f7ff ff62 	bl	800174a <HAL_TIM_PWM_PulseFinishedCallback>
 8001886:	e776      	b.n	8001776 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001888:	f7ff ff5d 	bl	8001746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800188c:	4620      	mov	r0, r4
 800188e:	f7ff ff5c 	bl	800174a <HAL_TIM_PWM_PulseFinishedCallback>
 8001892:	e785      	b.n	80017a0 <HAL_TIM_IRQHandler+0x52>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001894:	f7ff ff57 	bl	8001746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim); 
 8001898:	4620      	mov	r0, r4
 800189a:	f7ff ff56 	bl	800174a <HAL_TIM_PWM_PulseFinishedCallback>
 800189e:	e793      	b.n	80017c8 <HAL_TIM_IRQHandler+0x7a>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80018a0:	f7ff ff51 	bl	8001746 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80018a4:	4620      	mov	r0, r4
 80018a6:	f7ff ff50 	bl	800174a <HAL_TIM_PWM_PulseFinishedCallback>
 80018aa:	e7a2      	b.n	80017f2 <HAL_TIM_IRQHandler+0xa4>
 80018ac:	bd10      	pop	{r4, pc}
	...

080018b0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0U;
  tmpcr1 = TIMx->CR1;
  
  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018b0:	4a21      	ldr	r2, [pc, #132]	; (8001938 <TIM_Base_SetConfig+0x88>)
  tmpcr1 = TIMx->CR1;
 80018b2:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018b4:	4290      	cmp	r0, r2
{
 80018b6:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018b8:	d005      	beq.n	80018c6 <TIM_Base_SetConfig+0x16>
 80018ba:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018be:	d002      	beq.n	80018c6 <TIM_Base_SetConfig+0x16>
 80018c0:	4c1e      	ldr	r4, [pc, #120]	; (800193c <TIM_Base_SetConfig+0x8c>)
 80018c2:	42a0      	cmp	r0, r4
 80018c4:	d10c      	bne.n	80018e0 <TIM_Base_SetConfig+0x30>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80018c6:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80018c8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }
 
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018cc:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 80018ce:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80018d2:	d010      	beq.n	80018f6 <TIM_Base_SetConfig+0x46>
 80018d4:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 80018d8:	d00d      	beq.n	80018f6 <TIM_Base_SetConfig+0x46>
 80018da:	4a18      	ldr	r2, [pc, #96]	; (800193c <TIM_Base_SetConfig+0x8c>)
 80018dc:	4290      	cmp	r0, r2
 80018de:	d00a      	beq.n	80018f6 <TIM_Base_SetConfig+0x46>
 80018e0:	4a17      	ldr	r2, [pc, #92]	; (8001940 <TIM_Base_SetConfig+0x90>)
 80018e2:	4290      	cmp	r0, r2
 80018e4:	d007      	beq.n	80018f6 <TIM_Base_SetConfig+0x46>
 80018e6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018ea:	4290      	cmp	r0, r2
 80018ec:	d003      	beq.n	80018f6 <TIM_Base_SetConfig+0x46>
 80018ee:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80018f2:	4290      	cmp	r0, r2
 80018f4:	d103      	bne.n	80018fe <TIM_Base_SetConfig+0x4e>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018f6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80018f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80018fc:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80018fe:	694a      	ldr	r2, [r1, #20]
 8001900:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001904:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8001906:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001908:	688b      	ldr	r3, [r1, #8]
 800190a:	62c3      	str	r3, [r0, #44]	; 0x2c
 
  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 800190c:	680b      	ldr	r3, [r1, #0]
 800190e:	6283      	str	r3, [r0, #40]	; 0x28
    
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))  
 8001910:	4b09      	ldr	r3, [pc, #36]	; (8001938 <TIM_Base_SetConfig+0x88>)
 8001912:	4298      	cmp	r0, r3
 8001914:	d00b      	beq.n	800192e <TIM_Base_SetConfig+0x7e>
 8001916:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800191a:	4298      	cmp	r0, r3
 800191c:	d007      	beq.n	800192e <TIM_Base_SetConfig+0x7e>
 800191e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001922:	4298      	cmp	r0, r3
 8001924:	d003      	beq.n	800192e <TIM_Base_SetConfig+0x7e>
 8001926:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800192a:	4298      	cmp	r0, r3
 800192c:	d101      	bne.n	8001932 <TIM_Base_SetConfig+0x82>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800192e:	690b      	ldr	r3, [r1, #16]
 8001930:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler 
     and the repetition counter(only for TIM1 and TIM8) value immediatly */
  TIMx->EGR = TIM_EGR_UG;
 8001932:	2301      	movs	r3, #1
 8001934:	6143      	str	r3, [r0, #20]
 8001936:	bd10      	pop	{r4, pc}
 8001938:	40012c00 	.word	0x40012c00
 800193c:	40000400 	.word	0x40000400
 8001940:	40014000 	.word	0x40014000

08001944 <HAL_TIM_Base_Init>:
{ 
 8001944:	b510      	push	{r4, lr}
  if(htim == NULL)
 8001946:	4604      	mov	r4, r0
 8001948:	b1a0      	cbz	r0, 8001974 <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 800194a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800194e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001952:	b91b      	cbnz	r3, 800195c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8001954:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8001958:	f000 fc10 	bl	800217c <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 800195c:	2302      	movs	r3, #2
 800195e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init); 
 8001962:	6820      	ldr	r0, [r4, #0]
 8001964:	1d21      	adds	r1, r4, #4
 8001966:	f7ff ffa3 	bl	80018b0 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 800196a:	2301      	movs	r3, #1
 800196c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8001970:	2000      	movs	r0, #0
 8001972:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001974:	2001      	movs	r0, #1
}
 8001976:	bd10      	pop	{r4, pc}

08001978 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8001978:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0U;

  tmpsmcr = TIMx->SMCR;
 800197a:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800197c:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800197e:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8001982:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 8001986:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8001988:	6083      	str	r3, [r0, #8]
 800198a:	bd10      	pop	{r4, pc}

0800198c <HAL_TIM_ConfigClockSource>:
  __HAL_LOCK(htim);
 800198c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001990:	2b01      	cmp	r3, #1
{
 8001992:	b570      	push	{r4, r5, r6, lr}
 8001994:	4604      	mov	r4, r0
 8001996:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(htim);
 800199a:	d01a      	beq.n	80019d2 <HAL_TIM_ConfigClockSource+0x46>
  htim->State = HAL_TIM_STATE_BUSY;
 800199c:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  tmpsmcr = htim->Instance->SMCR;
 80019a0:	6820      	ldr	r0, [r4, #0]
  __HAL_LOCK(htim);
 80019a2:	2301      	movs	r3, #1
 80019a4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80019a8:	6882      	ldr	r2, [r0, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80019aa:	4b52      	ldr	r3, [pc, #328]	; (8001af4 <HAL_TIM_ConfigClockSource+0x168>)
 80019ac:	4013      	ands	r3, r2
  htim->Instance->SMCR = tmpsmcr;
 80019ae:	6083      	str	r3, [r0, #8]
  switch (sClockSourceConfig->ClockSource)
 80019b0:	680b      	ldr	r3, [r1, #0]
 80019b2:	2b40      	cmp	r3, #64	; 0x40
 80019b4:	d075      	beq.n	8001aa2 <HAL_TIM_ConfigClockSource+0x116>
 80019b6:	d818      	bhi.n	80019ea <HAL_TIM_ConfigClockSource+0x5e>
 80019b8:	2b10      	cmp	r3, #16
 80019ba:	f000 808f 	beq.w	8001adc <HAL_TIM_ConfigClockSource+0x150>
 80019be:	d809      	bhi.n	80019d4 <HAL_TIM_ConfigClockSource+0x48>
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	f000 8085 	beq.w	8001ad0 <HAL_TIM_ConfigClockSource+0x144>
  htim->State = HAL_TIM_STATE_READY;
 80019c6:	2301      	movs	r3, #1
  __HAL_UNLOCK(htim);
 80019c8:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80019ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80019ce:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
}
 80019d2:	bd70      	pop	{r4, r5, r6, pc}
  switch (sClockSourceConfig->ClockSource)
 80019d4:	2b20      	cmp	r3, #32
 80019d6:	f000 8087 	beq.w	8001ae8 <HAL_TIM_ConfigClockSource+0x15c>
 80019da:	2b30      	cmp	r3, #48	; 0x30
 80019dc:	d1f3      	bne.n	80019c6 <HAL_TIM_ConfigClockSource+0x3a>
   tmpsmcr = TIMx->SMCR;
 80019de:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 80019e0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 80019e4:	f043 0337 	orr.w	r3, r3, #55	; 0x37
 80019e8:	e033      	b.n	8001a52 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 80019ea:	2b70      	cmp	r3, #112	; 0x70
 80019ec:	d033      	beq.n	8001a56 <HAL_TIM_ConfigClockSource+0xca>
 80019ee:	d81b      	bhi.n	8001a28 <HAL_TIM_ConfigClockSource+0x9c>
 80019f0:	2b50      	cmp	r3, #80	; 0x50
 80019f2:	d03f      	beq.n	8001a74 <HAL_TIM_ConfigClockSource+0xe8>
 80019f4:	2b60      	cmp	r3, #96	; 0x60
 80019f6:	d1e6      	bne.n	80019c6 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI2_ConfigInputStage(htim->Instance, 
 80019f8:	684d      	ldr	r5, [r1, #4]
 80019fa:	68ce      	ldr	r6, [r1, #12]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80019fc:	6a01      	ldr	r1, [r0, #32]
 80019fe:	f021 0110 	bic.w	r1, r1, #16
 8001a02:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 8001a04:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 8001a06:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8001a08:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8001a0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8001a10:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8001a14:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCMR1 = tmpccmr1 ;
 8001a18:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a1a:	6203      	str	r3, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001a1c:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a22:	f043 0367 	orr.w	r3, r3, #103	; 0x67
 8001a26:	e014      	b.n	8001a52 <HAL_TIM_ConfigClockSource+0xc6>
  switch (sClockSourceConfig->ClockSource)
 8001a28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a2c:	d00c      	beq.n	8001a48 <HAL_TIM_ConfigClockSource+0xbc>
 8001a2e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001a32:	d1c8      	bne.n	80019c6 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001a34:	68cb      	ldr	r3, [r1, #12]
 8001a36:	684a      	ldr	r2, [r1, #4]
 8001a38:	6889      	ldr	r1, [r1, #8]
 8001a3a:	f7ff ff9d 	bl	8001978 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a3e:	6822      	ldr	r2, [r4, #0]
 8001a40:	6893      	ldr	r3, [r2, #8]
 8001a42:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a46:	e013      	b.n	8001a70 <HAL_TIM_ConfigClockSource+0xe4>
      htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 8001a48:	6883      	ldr	r3, [r0, #8]
 8001a4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a4e:	f023 0307 	bic.w	r3, r3, #7
   TIMx->SMCR = tmpsmcr;
 8001a52:	6083      	str	r3, [r0, #8]
 8001a54:	e7b7      	b.n	80019c6 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_ETR_SetConfig(htim->Instance, 
 8001a56:	68cb      	ldr	r3, [r1, #12]
 8001a58:	684a      	ldr	r2, [r1, #4]
 8001a5a:	6889      	ldr	r1, [r1, #8]
 8001a5c:	f7ff ff8c 	bl	8001978 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8001a60:	6822      	ldr	r2, [r4, #0]
 8001a62:	6893      	ldr	r3, [r2, #8]
      tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001a64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001a68:	f023 0377 	bic.w	r3, r3, #119	; 0x77
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001a6c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8001a70:	6093      	str	r3, [r2, #8]
    break;
 8001a72:	e7a8      	b.n	80019c6 <HAL_TIM_ConfigClockSource+0x3a>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001a74:	684a      	ldr	r2, [r1, #4]
 8001a76:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001a78:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001a7a:	6a05      	ldr	r5, [r0, #32]
 8001a7c:	f025 0501 	bic.w	r5, r5, #1
 8001a80:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001a82:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001a84:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001a88:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001a8c:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001a90:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001a92:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001a94:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001a96:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001a98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001a9c:	f043 0357 	orr.w	r3, r3, #87	; 0x57
 8001aa0:	e7d7      	b.n	8001a52 <HAL_TIM_ConfigClockSource+0xc6>
      TIM_TI1_ConfigInputStage(htim->Instance, 
 8001aa2:	684a      	ldr	r2, [r1, #4]
 8001aa4:	68ce      	ldr	r6, [r1, #12]
  tmpccer = TIMx->CCER;
 8001aa6:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8001aa8:	6a05      	ldr	r5, [r0, #32]
 8001aaa:	f025 0501 	bic.w	r5, r5, #1
 8001aae:	6205      	str	r5, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;    
 8001ab0:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8001ab2:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8001ab6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8001aba:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
  tmpccer |= TIM_ICPolarity;
 8001abe:	430a      	orrs	r2, r1
  TIMx->CCMR1 = tmpccmr1;
 8001ac0:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 8001ac2:	6202      	str	r2, [r0, #32]
   tmpsmcr = TIMx->SMCR;
 8001ac4:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001aca:	f043 0347 	orr.w	r3, r3, #71	; 0x47
 8001ace:	e7c0      	b.n	8001a52 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001ad0:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ad2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ad6:	f043 0307 	orr.w	r3, r3, #7
 8001ada:	e7ba      	b.n	8001a52 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001adc:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001ade:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001ae2:	f043 0317 	orr.w	r3, r3, #23
 8001ae6:	e7b4      	b.n	8001a52 <HAL_TIM_ConfigClockSource+0xc6>
   tmpsmcr = TIMx->SMCR;
 8001ae8:	6883      	ldr	r3, [r0, #8]
   tmpsmcr &= ~TIM_SMCR_TS;
 8001aea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
   tmpsmcr |= InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1;
 8001aee:	f043 0327 	orr.w	r3, r3, #39	; 0x27
 8001af2:	e7ae      	b.n	8001a52 <HAL_TIM_ConfigClockSource+0xc6>
 8001af4:	fffe0088 	.word	0xfffe0088

08001af8 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));
  
  /* Check input state */
  __HAL_LOCK(htim);
 8001af8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8001afc:	2b01      	cmp	r3, #1
{
 8001afe:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 8001b00:	d018      	beq.n	8001b34 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8001b02:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2U */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001b04:	4d0c      	ldr	r5, [pc, #48]	; (8001b38 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 8001b06:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 8001b08:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8001b0a:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));
    
    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001b0c:	bf02      	ittt	eq
 8001b0e:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 8001b10:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8001b14:	432b      	orreq	r3, r5
  }
  
  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b16:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b18:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 8001b1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8001b1e:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 8001b20:	f024 0480 	bic.w	r4, r4, #128	; 0x80
  
  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8001b24:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8001b26:	4321      	orrs	r1, r4
  
  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 8001b28:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 8001b2a:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 8001b2c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  return HAL_OK;
 8001b30:	4618      	mov	r0, r3
 8001b32:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 8001b34:	2002      	movs	r0, #2
} 
 8001b36:	bd30      	pop	{r4, r5, pc}
 8001b38:	40012c00 	.word	0x40012c00

08001b3c <HAL_TIMEx_CommutationCallback>:
 8001b3c:	4770      	bx	lr

08001b3e <HAL_TIMEx_BreakCallback>:
 8001b3e:	4770      	bx	lr

08001b40 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8001b40:	4770      	bx	lr
	...

08001b44 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001b44:	b538      	push	{r3, r4, r5, lr}
 8001b46:	4604      	mov	r4, r0
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b48:	6805      	ldr	r5, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b4a:	6921      	ldr	r1, [r4, #16]
 8001b4c:	68a3      	ldr	r3, [r4, #8]
 8001b4e:	69c2      	ldr	r2, [r0, #28]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b50:	6828      	ldr	r0, [r5, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b52:	430b      	orrs	r3, r1
 8001b54:	6961      	ldr	r1, [r4, #20]
 8001b56:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b58:	4949      	ldr	r1, [pc, #292]	; (8001c80 <UART_SetConfig+0x13c>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8001b5a:	4313      	orrs	r3, r2
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 8001b5c:	4001      	ands	r1, r0
 8001b5e:	430b      	orrs	r3, r1
 8001b60:	602b      	str	r3, [r5, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b62:	686b      	ldr	r3, [r5, #4]
 8001b64:	68e1      	ldr	r1, [r4, #12]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b66:	6a20      	ldr	r0, [r4, #32]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001b68:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001b6c:	430b      	orrs	r3, r1
 8001b6e:	606b      	str	r3, [r5, #4]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b70:	68a9      	ldr	r1, [r5, #8]
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b72:	69a3      	ldr	r3, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b74:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8001b78:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8001b7a:	430b      	orrs	r3, r1
 8001b7c:	60ab      	str	r3, [r5, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001b7e:	4b41      	ldr	r3, [pc, #260]	; (8001c84 <UART_SetConfig+0x140>)
 8001b80:	429d      	cmp	r5, r3
 8001b82:	d112      	bne.n	8001baa <UART_SetConfig+0x66>
 8001b84:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 8001b88:	493f      	ldr	r1, [pc, #252]	; (8001c88 <UART_SetConfig+0x144>)
 8001b8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b8c:	f003 0303 	and.w	r3, r3, #3

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001b90:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001b94:	5ccb      	ldrb	r3, [r1, r3]
 8001b96:	d13b      	bne.n	8001c10 <UART_SetConfig+0xcc>
  {
    switch (clocksource)
 8001b98:	2b08      	cmp	r3, #8
 8001b9a:	d836      	bhi.n	8001c0a <UART_SetConfig+0xc6>
 8001b9c:	e8df f003 	tbb	[pc, r3]
 8001ba0:	3524210f 	.word	0x3524210f
 8001ba4:	3535352d 	.word	0x3535352d
 8001ba8:	30          	.byte	0x30
 8001ba9:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8001baa:	4b38      	ldr	r3, [pc, #224]	; (8001c8c <UART_SetConfig+0x148>)
 8001bac:	429d      	cmp	r5, r3
 8001bae:	d003      	beq.n	8001bb8 <UART_SetConfig+0x74>
 8001bb0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8001bb4:	429d      	cmp	r5, r3
 8001bb6:	d15e      	bne.n	8001c76 <UART_SetConfig+0x132>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001bb8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001bbc:	d131      	bne.n	8001c22 <UART_SetConfig+0xde>
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001bbe:	f7ff fcd9 	bl	8001574 <HAL_RCC_GetPCLK1Freq>
        break;
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001bc2:	6861      	ldr	r1, [r4, #4]
 8001bc4:	084a      	lsrs	r2, r1, #1
 8001bc6:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8001bca:	fbb3 f3f1 	udiv	r3, r3, r1
        break;
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001bce:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8001bd0:	2000      	movs	r0, #0
      default:
        ret = HAL_ERROR;
        break;
    }

    brrtemp = usartdiv & 0xFFF0U;
 8001bd2:	f023 020f 	bic.w	r2, r3, #15
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
    huart->Instance->BRR = brrtemp;
 8001bd6:	6821      	ldr	r1, [r4, #0]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001bd8:	f3c3 0342 	ubfx	r3, r3, #1, #3
    huart->Instance->BRR = brrtemp;
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	60cb      	str	r3, [r1, #12]
 8001be0:	bd38      	pop	{r3, r4, r5, pc}
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001be2:	f7ff fcdf 	bl	80015a4 <HAL_RCC_GetPCLK2Freq>
 8001be6:	e7ec      	b.n	8001bc2 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8001be8:	6860      	ldr	r0, [r4, #4]
 8001bea:	0843      	lsrs	r3, r0, #1
 8001bec:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8001bf0:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001bf4:	fbb3 f3f0 	udiv	r3, r3, r0
 8001bf8:	e7e9      	b.n	8001bce <UART_SetConfig+0x8a>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001bfa:	f7ff fbdf 	bl	80013bc <HAL_RCC_GetSysClockFreq>
 8001bfe:	e7e0      	b.n	8001bc2 <UART_SetConfig+0x7e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8001c00:	6860      	ldr	r0, [r4, #4]
 8001c02:	0843      	lsrs	r3, r0, #1
 8001c04:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8001c08:	e7f4      	b.n	8001bf4 <UART_SetConfig+0xb0>
        ret = HAL_ERROR;
 8001c0a:	2001      	movs	r0, #1
  uint16_t usartdiv                   = 0x0000U;
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	e7e0      	b.n	8001bd2 <UART_SetConfig+0x8e>
  }
  else
  {
    switch (clocksource)
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d833      	bhi.n	8001c7c <UART_SetConfig+0x138>
 8001c14:	e8df f003 	tbb	[pc, r3]
 8001c18:	321b1005 	.word	0x321b1005
 8001c1c:	32323227 	.word	0x32323227
 8001c20:	2a          	.byte	0x2a
 8001c21:	00          	.byte	0x00
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8001c22:	f7ff fca7 	bl	8001574 <HAL_RCC_GetPCLK1Freq>
 8001c26:	6863      	ldr	r3, [r4, #4]
 8001c28:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001c2c:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c30:	b280      	uxth	r0, r0
 8001c32:	60e8      	str	r0, [r5, #12]
  HAL_StatusTypeDef ret               = HAL_OK;
 8001c34:	2000      	movs	r0, #0
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
        break;
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
        break;
 8001c36:	bd38      	pop	{r3, r4, r5, pc}
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8001c38:	f7ff fcb4 	bl	80015a4 <HAL_RCC_GetPCLK2Freq>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c3c:	6863      	ldr	r3, [r4, #4]
 8001c3e:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001c42:	fbb0 f0f3 	udiv	r0, r0, r3
 8001c46:	4b0f      	ldr	r3, [pc, #60]	; (8001c84 <UART_SetConfig+0x140>)
 8001c48:	b280      	uxth	r0, r0
 8001c4a:	60d8      	str	r0, [r3, #12]
 8001c4c:	e7f2      	b.n	8001c34 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8001c4e:	6862      	ldr	r2, [r4, #4]
 8001c50:	0853      	lsrs	r3, r2, #1
 8001c52:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8001c56:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c5a:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c5e:	4a09      	ldr	r2, [pc, #36]	; (8001c84 <UART_SetConfig+0x140>)
 8001c60:	b29b      	uxth	r3, r3
 8001c62:	60d3      	str	r3, [r2, #12]
 8001c64:	e7e6      	b.n	8001c34 <UART_SetConfig+0xf0>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8001c66:	f7ff fba9 	bl	80013bc <HAL_RCC_GetSysClockFreq>
 8001c6a:	e7e7      	b.n	8001c3c <UART_SetConfig+0xf8>
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8001c6c:	6862      	ldr	r2, [r4, #4]
 8001c6e:	0853      	lsrs	r3, r2, #1
 8001c70:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 8001c74:	e7f1      	b.n	8001c5a <UART_SetConfig+0x116>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001c76:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8001c7a:	d0c6      	beq.n	8001c0a <UART_SetConfig+0xc6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8001c7c:	2001      	movs	r0, #1
        break;
    }
  }

  return ret;
 8001c7e:	bd38      	pop	{r3, r4, r5, pc}
 8001c80:	efff69f3 	.word	0xefff69f3
 8001c84:	40013800 	.word	0x40013800
 8001c88:	08003448 	.word	0x08003448
 8001c8c:	40004400 	.word	0x40004400

08001c90 <UART_AdvFeatureConfig>:
{
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c90:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8001c92:	07da      	lsls	r2, r3, #31
{
 8001c94:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8001c96:	d506      	bpl.n	8001ca6 <UART_AdvFeatureConfig+0x16>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8001c98:	6801      	ldr	r1, [r0, #0]
 8001c9a:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8001c9c:	684a      	ldr	r2, [r1, #4]
 8001c9e:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8001ca2:	4322      	orrs	r2, r4
 8001ca4:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8001ca6:	079c      	lsls	r4, r3, #30
 8001ca8:	d506      	bpl.n	8001cb8 <UART_AdvFeatureConfig+0x28>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8001caa:	6801      	ldr	r1, [r0, #0]
 8001cac:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8001cae:	684a      	ldr	r2, [r1, #4]
 8001cb0:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001cb4:	4322      	orrs	r2, r4
 8001cb6:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8001cb8:	0759      	lsls	r1, r3, #29
 8001cba:	d506      	bpl.n	8001cca <UART_AdvFeatureConfig+0x3a>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8001cbc:	6801      	ldr	r1, [r0, #0]
 8001cbe:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8001cc0:	684a      	ldr	r2, [r1, #4]
 8001cc2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001cc6:	4322      	orrs	r2, r4
 8001cc8:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8001cca:	071a      	lsls	r2, r3, #28
 8001ccc:	d506      	bpl.n	8001cdc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8001cce:	6801      	ldr	r1, [r0, #0]
 8001cd0:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8001cd2:	684a      	ldr	r2, [r1, #4]
 8001cd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001cd8:	4322      	orrs	r2, r4
 8001cda:	604a      	str	r2, [r1, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8001cdc:	06dc      	lsls	r4, r3, #27
 8001cde:	d506      	bpl.n	8001cee <UART_AdvFeatureConfig+0x5e>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8001ce0:	6801      	ldr	r1, [r0, #0]
 8001ce2:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8001ce4:	688a      	ldr	r2, [r1, #8]
 8001ce6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001cea:	4322      	orrs	r2, r4
 8001cec:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8001cee:	0699      	lsls	r1, r3, #26
 8001cf0:	d506      	bpl.n	8001d00 <UART_AdvFeatureConfig+0x70>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8001cf2:	6801      	ldr	r1, [r0, #0]
 8001cf4:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8001cf6:	688a      	ldr	r2, [r1, #8]
 8001cf8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001cfc:	4322      	orrs	r2, r4
 8001cfe:	608a      	str	r2, [r1, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8001d00:	065a      	lsls	r2, r3, #25
 8001d02:	d50f      	bpl.n	8001d24 <UART_AdvFeatureConfig+0x94>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d04:	6801      	ldr	r1, [r0, #0]
 8001d06:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8001d08:	684a      	ldr	r2, [r1, #4]
 8001d0a:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8001d0e:	4322      	orrs	r2, r4
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d10:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8001d14:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8001d16:	d105      	bne.n	8001d24 <UART_AdvFeatureConfig+0x94>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8001d18:	684a      	ldr	r2, [r1, #4]
 8001d1a:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8001d1c:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001d20:	4322      	orrs	r2, r4
 8001d22:	604a      	str	r2, [r1, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8001d24:	061b      	lsls	r3, r3, #24
 8001d26:	d506      	bpl.n	8001d36 <UART_AdvFeatureConfig+0xa6>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8001d28:	6802      	ldr	r2, [r0, #0]
 8001d2a:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8001d2c:	6853      	ldr	r3, [r2, #4]
 8001d2e:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8001d32:	430b      	orrs	r3, r1
 8001d34:	6053      	str	r3, [r2, #4]
 8001d36:	bd10      	pop	{r4, pc}

08001d38 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8001d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001d3c:	9d06      	ldr	r5, [sp, #24]
 8001d3e:	4604      	mov	r4, r0
 8001d40:	460f      	mov	r7, r1
 8001d42:	4616      	mov	r6, r2
 8001d44:	4698      	mov	r8, r3
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d46:	6821      	ldr	r1, [r4, #0]
 8001d48:	69ca      	ldr	r2, [r1, #28]
 8001d4a:	ea37 0302 	bics.w	r3, r7, r2
 8001d4e:	bf0c      	ite	eq
 8001d50:	2201      	moveq	r2, #1
 8001d52:	2200      	movne	r2, #0
 8001d54:	42b2      	cmp	r2, r6
 8001d56:	d002      	beq.n	8001d5e <UART_WaitOnFlagUntilTimeout+0x26>
        __HAL_UNLOCK(huart);
        return HAL_TIMEOUT;
      }
    }
  }
  return HAL_OK;
 8001d58:	2000      	movs	r0, #0
}
 8001d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 8001d5e:	1c6b      	adds	r3, r5, #1
 8001d60:	d0f2      	beq.n	8001d48 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d62:	b99d      	cbnz	r5, 8001d8c <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001d64:	6823      	ldr	r3, [r4, #0]
 8001d66:	681a      	ldr	r2, [r3, #0]
 8001d68:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8001d6c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001d6e:	689a      	ldr	r2, [r3, #8]
 8001d70:	f022 0201 	bic.w	r2, r2, #1
 8001d74:	609a      	str	r2, [r3, #8]
        huart->gState  = HAL_UART_STATE_READY;
 8001d76:	2320      	movs	r3, #32
 8001d78:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8001d7c:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
        __HAL_UNLOCK(huart);
 8001d80:	2300      	movs	r3, #0
 8001d82:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
 8001d86:	2003      	movs	r0, #3
 8001d88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8001d8c:	f7fe fef8 	bl	8000b80 <HAL_GetTick>
 8001d90:	eba0 0008 	sub.w	r0, r0, r8
 8001d94:	4285      	cmp	r5, r0
 8001d96:	d2d6      	bcs.n	8001d46 <UART_WaitOnFlagUntilTimeout+0xe>
 8001d98:	e7e4      	b.n	8001d64 <UART_WaitOnFlagUntilTimeout+0x2c>

08001d9a <UART_CheckIdleState>:
{
 8001d9a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001d9c:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d9e:	2600      	movs	r6, #0
 8001da0:	66c6      	str	r6, [r0, #108]	; 0x6c
  tickstart = HAL_GetTick();
 8001da2:	f7fe feed 	bl	8000b80 <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001da6:	6823      	ldr	r3, [r4, #0]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8001dac:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8001dae:	d417      	bmi.n	8001de0 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8001db0:	6823      	ldr	r3, [r4, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	075b      	lsls	r3, r3, #29
 8001db6:	d50a      	bpl.n	8001dce <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001db8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001dbc:	9300      	str	r3, [sp, #0]
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	462b      	mov	r3, r5
 8001dc2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8001dc6:	4620      	mov	r0, r4
 8001dc8:	f7ff ffb6 	bl	8001d38 <UART_WaitOnFlagUntilTimeout>
 8001dcc:	b9a0      	cbnz	r0, 8001df8 <UART_CheckIdleState+0x5e>
  huart->gState  = HAL_UART_STATE_READY;
 8001dce:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8001dd0:	2000      	movs	r0, #0
  huart->gState  = HAL_UART_STATE_READY;
 8001dd2:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UNLOCK(huart);
 8001dd6:	f884 0068 	strb.w	r0, [r4, #104]	; 0x68
  huart->RxState = HAL_UART_STATE_READY;
 8001dda:	f884 306a 	strb.w	r3, [r4, #106]	; 0x6a
  return HAL_OK;
 8001dde:	e00c      	b.n	8001dfa <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8001de0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8001de4:	9300      	str	r3, [sp, #0]
 8001de6:	4632      	mov	r2, r6
 8001de8:	4603      	mov	r3, r0
 8001dea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8001dee:	4620      	mov	r0, r4
 8001df0:	f7ff ffa2 	bl	8001d38 <UART_WaitOnFlagUntilTimeout>
 8001df4:	2800      	cmp	r0, #0
 8001df6:	d0db      	beq.n	8001db0 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8001df8:	2003      	movs	r0, #3
}
 8001dfa:	b002      	add	sp, #8
 8001dfc:	bd70      	pop	{r4, r5, r6, pc}

08001dfe <HAL_UART_Init>:
{
 8001dfe:	b510      	push	{r4, lr}
  if(huart == NULL)
 8001e00:	4604      	mov	r4, r0
 8001e02:	b360      	cbz	r0, 8001e5e <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 8001e04:	f890 3069 	ldrb.w	r3, [r0, #105]	; 0x69
 8001e08:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001e0c:	b91b      	cbnz	r3, 8001e16 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8001e0e:	f880 2068 	strb.w	r2, [r0, #104]	; 0x68
    HAL_UART_MspInit(huart);
 8001e12:	f000 f9cf 	bl	80021b4 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 8001e16:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8001e18:	2324      	movs	r3, #36	; 0x24
 8001e1a:	f884 3069 	strb.w	r3, [r4, #105]	; 0x69
  __HAL_UART_DISABLE(huart);
 8001e1e:	6813      	ldr	r3, [r2, #0]
 8001e20:	f023 0301 	bic.w	r3, r3, #1
 8001e24:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 8001e26:	4620      	mov	r0, r4
 8001e28:	f7ff fe8c 	bl	8001b44 <UART_SetConfig>
 8001e2c:	2801      	cmp	r0, #1
 8001e2e:	d016      	beq.n	8001e5e <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8001e30:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001e32:	b113      	cbz	r3, 8001e3a <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 8001e34:	4620      	mov	r0, r4
 8001e36:	f7ff ff2b 	bl	8001c90 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001e3a:	6823      	ldr	r3, [r4, #0]
 8001e3c:	685a      	ldr	r2, [r3, #4]
 8001e3e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001e42:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001e44:	689a      	ldr	r2, [r3, #8]
 8001e46:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001e4a:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8001e4c:	681a      	ldr	r2, [r3, #0]
 8001e4e:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 8001e52:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 8001e54:	601a      	str	r2, [r3, #0]
}
 8001e56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 8001e5a:	f7ff bf9e 	b.w	8001d9a <UART_CheckIdleState>
}
 8001e5e:	2001      	movs	r0, #1
 8001e60:	bd10      	pop	{r4, pc}

08001e62 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e62:	b570      	push	{r4, r5, r6, lr}
 8001e64:	b096      	sub	sp, #88	; 0x58
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e66:	2228      	movs	r2, #40	; 0x28
 8001e68:	2100      	movs	r1, #0
 8001e6a:	a80c      	add	r0, sp, #48	; 0x30
 8001e6c:	f000 fa84 	bl	8002378 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e70:	2214      	movs	r2, #20
 8001e72:	2100      	movs	r1, #0
 8001e74:	a801      	add	r0, sp, #4
 8001e76:	f000 fa7f 	bl	8002378 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001e7a:	2218      	movs	r2, #24
 8001e7c:	eb0d 0002 	add.w	r0, sp, r2
 8001e80:	2100      	movs	r1, #0
 8001e82:	f000 fa79 	bl	8002378 <memset>

  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e86:	2310      	movs	r3, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e88:	2402      	movs	r4, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e8a:	2601      	movs	r6, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e8c:	9311      	str	r3, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e8e:	a80c      	add	r0, sp, #48	; 0x30
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001e90:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001e94:	9315      	str	r3, [sp, #84]	; 0x54
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e96:	940c      	str	r4, [sp, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e98:	9610      	str	r6, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e9a:	9413      	str	r4, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e9c:	f7ff f818 	bl	8000ed0 <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /**Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea0:	230f      	movs	r3, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea2:	2500      	movs	r5, #0
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001ea4:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001ea6:	4621      	mov	r1, r4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ea8:	f44f 6380 	mov.w	r3, #1024	; 0x400
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eac:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001eae:	9304      	str	r3, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001eb0:	9402      	str	r4, [sp, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001eb2:	9503      	str	r5, [sp, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eb4:	9505      	str	r5, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001eb6:	f7ff fab3 	bl	8001420 <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001eba:	a806      	add	r0, sp, #24
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001ebc:	9606      	str	r6, [sp, #24]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8001ebe:	9508      	str	r5, [sp, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ec0:	f7ff fb88 	bl	80015d4 <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
}
 8001ec4:	b016      	add	sp, #88	; 0x58
 8001ec6:	bd70      	pop	{r4, r5, r6, pc}

08001ec8 <dac_signal>:
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);

}

/* USER CODE BEGIN 4 */
void dac_signal(void) {
 8001ec8:	b510      	push	{r4, lr}

	uint16_t data;

	data=signal[indice];
 8001eca:	4c09      	ldr	r4, [pc, #36]	; (8001ef0 <dac_signal+0x28>)

	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8001ecc:	4b09      	ldr	r3, [pc, #36]	; (8001ef4 <dac_signal+0x2c>)
	data=signal[indice];
 8001ece:	7822      	ldrb	r2, [r4, #0]
	HAL_DAC_SetValue(&hdac1, DAC_CHANNEL_1, DAC_ALIGN_12B_R, data);
 8001ed0:	4809      	ldr	r0, [pc, #36]	; (8001ef8 <dac_signal+0x30>)
 8001ed2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	4611      	mov	r1, r2
 8001eda:	f7fe fed2 	bl	8000c82 <HAL_DAC_SetValue>
	indice++;
 8001ede:	7823      	ldrb	r3, [r4, #0]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	b2db      	uxtb	r3, r3
	if (indice >= N_MUESTRAS) {
 8001ee4:	2b31      	cmp	r3, #49	; 0x31
		indice = 0;
 8001ee6:	bf88      	it	hi
 8001ee8:	2300      	movhi	r3, #0
 8001eea:	7023      	strb	r3, [r4, #0]
 8001eec:	bd10      	pop	{r4, pc}
 8001eee:	bf00      	nop
 8001ef0:	20000028 	.word	0x20000028
 8001ef4:	2000002a 	.word	0x2000002a
 8001ef8:	20000094 	.word	0x20000094
 8001efc:	00000000 	.word	0x00000000

08001f00 <calculo_senal>:
	}
}

void calculo_senal(uint8_t duty_cycle){
 8001f00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	for (uint8_t i=0; i<N_MUESTRAS;i++){
			signal[i] = (sin(i*2*PI/N_MUESTRAS)+1)*(4095+1)/2;
 8001f04:	f20f 0978 	addw	r9, pc, #120	; 0x78
 8001f08:	e9d9 8900 	ldrd	r8, r9, [r9]
 8001f0c:	4f18      	ldr	r7, [pc, #96]	; (8001f70 <calculo_senal+0x70>)
 8001f0e:	f8df b078 	ldr.w	fp, [pc, #120]	; 8001f88 <calculo_senal+0x88>
 8001f12:	4d18      	ldr	r5, [pc, #96]	; (8001f74 <calculo_senal+0x74>)
void calculo_senal(uint8_t duty_cycle){
 8001f14:	f04f 0a00 	mov.w	sl, #0
			signal[i] = (sin(i*2*PI/N_MUESTRAS)+1)*(4095+1)/2;
 8001f18:	2600      	movs	r6, #0
 8001f1a:	2400      	movs	r4, #0
 8001f1c:	4650      	mov	r0, sl
 8001f1e:	f7fe faa5 	bl	800046c <__aeabi_i2d>
 8001f22:	4642      	mov	r2, r8
 8001f24:	464b      	mov	r3, r9
 8001f26:	f7fe fb07 	bl	8000538 <__aeabi_dmul>
 8001f2a:	4632      	mov	r2, r6
 8001f2c:	463b      	mov	r3, r7
 8001f2e:	f7fe fc2d 	bl	800078c <__aeabi_ddiv>
 8001f32:	ec41 0b10 	vmov	d0, r0, r1
 8001f36:	f000 fa27 	bl	8002388 <sin>
 8001f3a:	4622      	mov	r2, r4
 8001f3c:	ec51 0b10 	vmov	r0, r1, d0
 8001f40:	462b      	mov	r3, r5
 8001f42:	f7fe f947 	bl	80001d4 <__adddf3>
 8001f46:	2200      	movs	r2, #0
 8001f48:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <calculo_senal+0x78>)
 8001f4a:	f7fe faf5 	bl	8000538 <__aeabi_dmul>
 8001f4e:	2200      	movs	r2, #0
 8001f50:	4b0a      	ldr	r3, [pc, #40]	; (8001f7c <calculo_senal+0x7c>)
 8001f52:	f7fe faf1 	bl	8000538 <__aeabi_dmul>
 8001f56:	f7fe fdb1 	bl	8000abc <__aeabi_d2uiz>
 8001f5a:	f82b 000a 	strh.w	r0, [fp, sl]
 8001f5e:	f10a 0a02 	add.w	sl, sl, #2
	for (uint8_t i=0; i<N_MUESTRAS;i++){
 8001f62:	f1ba 0f64 	cmp.w	sl, #100	; 0x64
 8001f66:	d1d9      	bne.n	8001f1c <calculo_senal+0x1c>
	}
}
 8001f68:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f6c:	f3af 8000 	nop.w
 8001f70:	40490000 	.word	0x40490000
 8001f74:	3ff00000 	.word	0x3ff00000
 8001f78:	40b00000 	.word	0x40b00000
 8001f7c:	3fe00000 	.word	0x3fe00000
 8001f80:	f01b866e 	.word	0xf01b866e
 8001f84:	400921f9 	.word	0x400921f9
 8001f88:	2000002a 	.word	0x2000002a

08001f8c <main>:
{
 8001f8c:	b500      	push	{lr}
 8001f8e:	b08d      	sub	sp, #52	; 0x34
  HAL_Init();
 8001f90:	f7fe fdd8 	bl	8000b44 <HAL_Init>
  SystemClock_Config();
 8001f94:	f7ff ff65 	bl	8001e62 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f98:	2214      	movs	r2, #20
 8001f9a:	2100      	movs	r1, #0
 8001f9c:	a807      	add	r0, sp, #28
 8001f9e:	f000 f9eb 	bl	8002378 <memset>
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fa2:	4b46      	ldr	r3, [pc, #280]	; (80020bc <main+0x130>)
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001fa4:	4846      	ldr	r0, [pc, #280]	; (80020c0 <main+0x134>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fa6:	695a      	ldr	r2, [r3, #20]
  hdac1.Instance = DAC1;
 8001fa8:	4e46      	ldr	r6, [pc, #280]	; (80020c4 <main+0x138>)
  htim2.Instance = TIM2;
 8001faa:	4d47      	ldr	r5, [pc, #284]	; (80020c8 <main+0x13c>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001fac:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8001fb0:	615a      	str	r2, [r3, #20]
 8001fb2:	695a      	ldr	r2, [r3, #20]
 8001fb4:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 8001fb8:	9201      	str	r2, [sp, #4]
 8001fba:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001fbc:	695a      	ldr	r2, [r3, #20]
 8001fbe:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001fc2:	615a      	str	r2, [r3, #20]
 8001fc4:	695a      	ldr	r2, [r3, #20]
 8001fc6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001fca:	9202      	str	r2, [sp, #8]
 8001fcc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	695a      	ldr	r2, [r3, #20]
 8001fd0:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8001fd4:	615a      	str	r2, [r3, #20]
 8001fd6:	695b      	ldr	r3, [r3, #20]
 8001fd8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001fdc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fde:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001fe0:	2108      	movs	r1, #8
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fe2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8001fe4:	f7fe ff6e 	bl	8000ec4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = LD3_Pin;
 8001fe8:	2308      	movs	r3, #8
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fea:	2400      	movs	r4, #0
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001fec:	a907      	add	r1, sp, #28
  GPIO_InitStruct.Pin = LD3_Pin;
 8001fee:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001ff0:	4833      	ldr	r0, [pc, #204]	; (80020c0 <main+0x134>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ff4:	2301      	movs	r3, #1
 8001ff6:	9308      	str	r3, [sp, #32]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ff8:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8001ffa:	f7fe fea9 	bl	8000d50 <HAL_GPIO_Init>
  huart2.Instance = USART2;
 8001ffe:	4833      	ldr	r0, [pc, #204]	; (80020cc <main+0x140>)
  huart2.Init.BaudRate = 38400;
 8002000:	4a33      	ldr	r2, [pc, #204]	; (80020d0 <main+0x144>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002002:	6084      	str	r4, [r0, #8]
  huart2.Init.BaudRate = 38400;
 8002004:	f44f 4316 	mov.w	r3, #38400	; 0x9600
 8002008:	e880 000c 	stmia.w	r0, {r2, r3}
  huart2.Init.Mode = UART_MODE_TX_RX;
 800200c:	230c      	movs	r3, #12
 800200e:	6143      	str	r3, [r0, #20]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002010:	60c4      	str	r4, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002012:	6104      	str	r4, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002014:	6184      	str	r4, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002016:	61c4      	str	r4, [r0, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002018:	6204      	str	r4, [r0, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800201a:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800201c:	f7ff feef 	bl	8001dfe <HAL_UART_Init>
  hdac1.Instance = DAC1;
 8002020:	4b2c      	ldr	r3, [pc, #176]	; (80020d4 <main+0x148>)
 8002022:	6033      	str	r3, [r6, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002024:	4630      	mov	r0, r6
  DAC_ChannelConfTypeDef sConfig = {0};
 8002026:	9407      	str	r4, [sp, #28]
 8002028:	9408      	str	r4, [sp, #32]
 800202a:	9409      	str	r4, [sp, #36]	; 0x24
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 800202c:	f7fe fe16 	bl	8000c5c <HAL_DAC_Init>
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002030:	4622      	mov	r2, r4
 8002032:	a907      	add	r1, sp, #28
 8002034:	4630      	mov	r0, r6
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8002036:	9407      	str	r4, [sp, #28]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002038:	9408      	str	r4, [sp, #32]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800203a:	f7fe fe5b 	bl	8000cf4 <HAL_DAC_ConfigChannel>
  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800203e:	2210      	movs	r2, #16
 8002040:	4621      	mov	r1, r4
 8002042:	a807      	add	r0, sp, #28
 8002044:	f000 f998 	bl	8002378 <memset>
  htim2.Init.Prescaler = 31999;
 8002048:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 800204c:	f647 43ff 	movw	r3, #31999	; 0x7cff
 8002050:	e885 000a 	stmia.w	r5, {r1, r3}
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002054:	4628      	mov	r0, r5
  htim2.Init.Period = 80;
 8002056:	2350      	movs	r3, #80	; 0x50
 8002058:	60eb      	str	r3, [r5, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800205a:	9404      	str	r4, [sp, #16]
 800205c:	9405      	str	r4, [sp, #20]
 800205e:	9406      	str	r4, [sp, #24]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002060:	60ac      	str	r4, [r5, #8]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002062:	612c      	str	r4, [r5, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002064:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002066:	f7ff fc6d 	bl	8001944 <HAL_TIM_Base_Init>
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800206a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800206e:	a907      	add	r1, sp, #28
 8002070:	4628      	mov	r0, r5
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002072:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002074:	f7ff fc8a 	bl	800198c <HAL_TIM_ConfigClockSource>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002078:	a904      	add	r1, sp, #16
 800207a:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800207c:	9404      	str	r4, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800207e:	9406      	str	r4, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002080:	f7ff fd3a 	bl	8001af8 <HAL_TIMEx_MasterConfigSynchronization>
  huart1.Instance = USART1;
 8002084:	4814      	ldr	r0, [pc, #80]	; (80020d8 <main+0x14c>)
  huart1.Init.BaudRate = 31250;
 8002086:	4b15      	ldr	r3, [pc, #84]	; (80020dc <main+0x150>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002088:	6084      	str	r4, [r0, #8]
  huart1.Init.BaudRate = 31250;
 800208a:	f647 2e12 	movw	lr, #31250	; 0x7a12
 800208e:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.Mode = UART_MODE_RX;
 8002092:	2304      	movs	r3, #4
 8002094:	6143      	str	r3, [r0, #20]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002096:	60c4      	str	r4, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002098:	6104      	str	r4, [r0, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800209a:	6184      	str	r4, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800209c:	61c4      	str	r4, [r0, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800209e:	6204      	str	r4, [r0, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020a0:	6244      	str	r4, [r0, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80020a2:	f7ff feac 	bl	8001dfe <HAL_UART_Init>
  calculo_senal(50);
 80020a6:	2032      	movs	r0, #50	; 0x32
 80020a8:	f7ff ff2a 	bl	8001f00 <calculo_senal>
  HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 80020ac:	4621      	mov	r1, r4
 80020ae:	4630      	mov	r0, r6
 80020b0:	f7fe fdf9 	bl	8000ca6 <HAL_DAC_Start>
  HAL_TIM_Base_Start_IT(&htim2);
 80020b4:	4628      	mov	r0, r5
 80020b6:	f7ff fb3b 	bl	8001730 <HAL_TIM_Base_Start_IT>
 80020ba:	e7fe      	b.n	80020ba <main+0x12e>
 80020bc:	40021000 	.word	0x40021000
 80020c0:	48000400 	.word	0x48000400
 80020c4:	20000094 	.word	0x20000094
 80020c8:	20000118 	.word	0x20000118
 80020cc:	20000158 	.word	0x20000158
 80020d0:	40004400 	.word	0x40004400
 80020d4:	40007400 	.word	0x40007400
 80020d8:	200000a8 	.word	0x200000a8
 80020dc:	40013800 	.word	0x40013800

080020e0 <HAL_TIM_PeriodElapsedCallback>:
	__HAL_TIM_SET_PRESCALER(&htim2, PS-1);
	__HAL_TIM_SET_AUTORELOAD(&htim2, T-1);   // Do 7 (nota mas aguda)
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
	if(htim==&htim2){
 80020e0:	4b02      	ldr	r3, [pc, #8]	; (80020ec <HAL_TIM_PeriodElapsedCallback+0xc>)
 80020e2:	4283      	cmp	r3, r0
 80020e4:	d101      	bne.n	80020ea <HAL_TIM_PeriodElapsedCallback+0xa>
		dac_signal();
 80020e6:	f7ff beef 	b.w	8001ec8 <dac_signal>
 80020ea:	4770      	bx	lr
 80020ec:	20000118 	.word	0x20000118

080020f0 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_MspInit+0x2c>)
 80020f2:	699a      	ldr	r2, [r3, #24]
 80020f4:	f042 0201 	orr.w	r2, r2, #1
 80020f8:	619a      	str	r2, [r3, #24]
 80020fa:	699a      	ldr	r2, [r3, #24]
{
 80020fc:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020fe:	f002 0201 	and.w	r2, r2, #1
 8002102:	9200      	str	r2, [sp, #0]
 8002104:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002106:	69da      	ldr	r2, [r3, #28]
 8002108:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800210c:	61da      	str	r2, [r3, #28]
 800210e:	69db      	ldr	r3, [r3, #28]
 8002110:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002114:	9301      	str	r3, [sp, #4]
 8002116:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002118:	b002      	add	sp, #8
 800211a:	4770      	bx	lr
 800211c:	40021000 	.word	0x40021000

08002120 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8002120:	b510      	push	{r4, lr}
 8002122:	4604      	mov	r4, r0
 8002124:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002126:	2214      	movs	r2, #20
 8002128:	2100      	movs	r1, #0
 800212a:	a803      	add	r0, sp, #12
 800212c:	f000 f924 	bl	8002378 <memset>
  if(hdac->Instance==DAC1)
 8002130:	6822      	ldr	r2, [r4, #0]
 8002132:	4b11      	ldr	r3, [pc, #68]	; (8002178 <HAL_DAC_MspInit+0x58>)
 8002134:	429a      	cmp	r2, r3
 8002136:	d11c      	bne.n	8002172 <HAL_DAC_MspInit+0x52>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8002138:	f503 33ce 	add.w	r3, r3, #105472	; 0x19c00
    PA4     ------> DAC1_OUT1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800213c:	a903      	add	r1, sp, #12
    __HAL_RCC_DAC1_CLK_ENABLE();
 800213e:	69da      	ldr	r2, [r3, #28]
 8002140:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8002144:	61da      	str	r2, [r3, #28]
 8002146:	69da      	ldr	r2, [r3, #28]
 8002148:	f002 5200 	and.w	r2, r2, #536870912	; 0x20000000
 800214c:	9201      	str	r2, [sp, #4]
 800214e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002150:	695a      	ldr	r2, [r3, #20]
 8002152:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002156:	615a      	str	r2, [r3, #20]
 8002158:	695b      	ldr	r3, [r3, #20]
 800215a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800215e:	9302      	str	r3, [sp, #8]
 8002160:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002162:	2310      	movs	r3, #16
 8002164:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002166:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800216a:	2303      	movs	r3, #3
 800216c:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800216e:	f7fe fdef 	bl	8000d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8002172:	b008      	add	sp, #32
 8002174:	bd10      	pop	{r4, pc}
 8002176:	bf00      	nop
 8002178:	40007400 	.word	0x40007400

0800217c <HAL_TIM_Base_MspInit>:
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{

  if(htim_base->Instance==TIM2)
 800217c:	6803      	ldr	r3, [r0, #0]
 800217e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
{
 8002182:	b507      	push	{r0, r1, r2, lr}
  if(htim_base->Instance==TIM2)
 8002184:	d112      	bne.n	80021ac <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002186:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800218a:	201c      	movs	r0, #28
    __HAL_RCC_TIM2_CLK_ENABLE();
 800218c:	69da      	ldr	r2, [r3, #28]
 800218e:	f042 0201 	orr.w	r2, r2, #1
 8002192:	61da      	str	r2, [r3, #28]
 8002194:	69db      	ldr	r3, [r3, #28]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002196:	2200      	movs	r2, #0
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002198:	f003 0301 	and.w	r3, r3, #1
 800219c:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800219e:	4611      	mov	r1, r2
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021a0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80021a2:	f7fe fd05 	bl	8000bb0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80021a6:	201c      	movs	r0, #28
 80021a8:	f7fe fd36 	bl	8000c18 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80021ac:	b003      	add	sp, #12
 80021ae:	f85d fb04 	ldr.w	pc, [sp], #4
	...

080021b4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80021b4:	b510      	push	{r4, lr}

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b6:	2214      	movs	r2, #20
{
 80021b8:	b08a      	sub	sp, #40	; 0x28
 80021ba:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021bc:	2100      	movs	r1, #0
 80021be:	eb0d 0002 	add.w	r0, sp, r2
 80021c2:	f000 f8d9 	bl	8002378 <memset>
  if(huart->Instance==USART1)
 80021c6:	6823      	ldr	r3, [r4, #0]
 80021c8:	4a1f      	ldr	r2, [pc, #124]	; (8002248 <HAL_UART_MspInit+0x94>)
 80021ca:	4293      	cmp	r3, r2
 80021cc:	d122      	bne.n	8002214 <HAL_UART_MspInit+0x60>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80021ce:	4b1f      	ldr	r3, [pc, #124]	; (800224c <HAL_UART_MspInit+0x98>)
 80021d0:	699a      	ldr	r2, [r3, #24]
 80021d2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80021d6:	619a      	str	r2, [r3, #24]
 80021d8:	699a      	ldr	r2, [r3, #24]
 80021da:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80021de:	9201      	str	r2, [sp, #4]
 80021e0:	9a01      	ldr	r2, [sp, #4]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021e2:	695a      	ldr	r2, [r3, #20]
 80021e4:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80021e8:	615a      	str	r2, [r3, #20]
 80021ea:	695b      	ldr	r3, [r3, #20]
 80021ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021f0:	9302      	str	r3, [sp, #8]
 80021f2:	9b02      	ldr	r3, [sp, #8]
    /**USART1 GPIO Configuration    
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80021f4:	f44f 63c0 	mov.w	r3, #1536	; 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 80021f8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80021fe:	2303      	movs	r3, #3
 8002200:	9308      	str	r3, [sp, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002202:	a905      	add	r1, sp, #20
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002204:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002206:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800220a:	9309      	str	r3, [sp, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800220c:	f7fe fda0 	bl	8000d50 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002210:	b00a      	add	sp, #40	; 0x28
 8002212:	bd10      	pop	{r4, pc}
  else if(huart->Instance==USART2)
 8002214:	4a0e      	ldr	r2, [pc, #56]	; (8002250 <HAL_UART_MspInit+0x9c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d1fa      	bne.n	8002210 <HAL_UART_MspInit+0x5c>
    __HAL_RCC_USART2_CLK_ENABLE();
 800221a:	4b0c      	ldr	r3, [pc, #48]	; (800224c <HAL_UART_MspInit+0x98>)
 800221c:	69da      	ldr	r2, [r3, #28]
 800221e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002222:	61da      	str	r2, [r3, #28]
 8002224:	69da      	ldr	r2, [r3, #28]
 8002226:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800222a:	9203      	str	r2, [sp, #12]
 800222c:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	695a      	ldr	r2, [r3, #20]
 8002230:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8002234:	615a      	str	r2, [r3, #20]
 8002236:	695b      	ldr	r3, [r3, #20]
 8002238:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800223c:	9304      	str	r3, [sp, #16]
 800223e:	9b04      	ldr	r3, [sp, #16]
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 8002240:	f248 0304 	movw	r3, #32772	; 0x8004
 8002244:	e7d8      	b.n	80021f8 <HAL_UART_MspInit+0x44>
 8002246:	bf00      	nop
 8002248:	40013800 	.word	0x40013800
 800224c:	40021000 	.word	0x40021000
 8002250:	40004400 	.word	0x40004400

08002254 <NMI_Handler>:
 8002254:	4770      	bx	lr

08002256 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002256:	e7fe      	b.n	8002256 <HardFault_Handler>

08002258 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002258:	e7fe      	b.n	8002258 <MemManage_Handler>

0800225a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800225a:	e7fe      	b.n	800225a <BusFault_Handler>

0800225c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800225c:	e7fe      	b.n	800225c <UsageFault_Handler>

0800225e <SVC_Handler>:
 800225e:	4770      	bx	lr

08002260 <DebugMon_Handler>:
 8002260:	4770      	bx	lr

08002262 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002262:	4770      	bx	lr

08002264 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002264:	f7fe bc80 	b.w	8000b68 <HAL_IncTick>

08002268 <TIM2_IRQHandler>:
void TIM2_IRQHandler(void)
{
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002268:	4801      	ldr	r0, [pc, #4]	; (8002270 <TIM2_IRQHandler+0x8>)
 800226a:	f7ff ba70 	b.w	800174e <HAL_TIM_IRQHandler>
 800226e:	bf00      	nop
 8002270:	20000118 	.word	0x20000118

08002274 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002274:	4915      	ldr	r1, [pc, #84]	; (80022cc <SystemInit+0x58>)
 8002276:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800227a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800227e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 8002282:	4b13      	ldr	r3, [pc, #76]	; (80022d0 <SystemInit+0x5c>)
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	f042 0201 	orr.w	r2, r2, #1
 800228a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 800228c:	6858      	ldr	r0, [r3, #4]
 800228e:	4a11      	ldr	r2, [pc, #68]	; (80022d4 <SystemInit+0x60>)
 8002290:	4002      	ands	r2, r0
 8002292:	605a      	str	r2, [r3, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 800229a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800229e:	601a      	str	r2, [r3, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80022a0:	681a      	ldr	r2, [r3, #0]
 80022a2:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80022a6:	601a      	str	r2, [r3, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 80022a8:	685a      	ldr	r2, [r3, #4]
 80022aa:	f422 02fe 	bic.w	r2, r2, #8323072	; 0x7f0000
 80022ae:	605a      	str	r2, [r3, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 80022b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80022b2:	f022 020f 	bic.w	r2, r2, #15
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 80022b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80022ba:	4a07      	ldr	r2, [pc, #28]	; (80022d8 <SystemInit+0x64>)
 80022bc:	4002      	ands	r2, r0
 80022be:	631a      	str	r2, [r3, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 80022c0:	2200      	movs	r2, #0
 80022c2:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80022c4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80022c8:	608b      	str	r3, [r1, #8]
 80022ca:	4770      	bx	lr
 80022cc:	e000ed00 	.word	0xe000ed00
 80022d0:	40021000 	.word	0x40021000
 80022d4:	f87fc00c 	.word	0xf87fc00c
 80022d8:	ff00fccc 	.word	0xff00fccc

080022dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80022dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002314 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80022e0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80022e2:	e003      	b.n	80022ec <LoopCopyDataInit>

080022e4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80022e4:	4b0c      	ldr	r3, [pc, #48]	; (8002318 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80022e6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80022e8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80022ea:	3104      	adds	r1, #4

080022ec <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80022ec:	480b      	ldr	r0, [pc, #44]	; (800231c <LoopForever+0xa>)
	ldr	r3, =_edata
 80022ee:	4b0c      	ldr	r3, [pc, #48]	; (8002320 <LoopForever+0xe>)
	adds	r2, r0, r1
 80022f0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80022f2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80022f4:	d3f6      	bcc.n	80022e4 <CopyDataInit>
	ldr	r2, =_sbss
 80022f6:	4a0b      	ldr	r2, [pc, #44]	; (8002324 <LoopForever+0x12>)
	b	LoopFillZerobss
 80022f8:	e002      	b.n	8002300 <LoopFillZerobss>

080022fa <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80022fa:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80022fc:	f842 3b04 	str.w	r3, [r2], #4

08002300 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002300:	4b09      	ldr	r3, [pc, #36]	; (8002328 <LoopForever+0x16>)
	cmp	r2, r3
 8002302:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002304:	d3f9      	bcc.n	80022fa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002306:	f7ff ffb5 	bl	8002274 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800230a:	f000 f811 	bl	8002330 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800230e:	f7ff fe3d 	bl	8001f8c <main>

08002312 <LoopForever>:

LoopForever:
    b LoopForever
 8002312:	e7fe      	b.n	8002312 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8002314:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 8002318:	08003648 	.word	0x08003648
	ldr	r0, =_sdata
 800231c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002320:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 8002324:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8002328:	200001c8 	.word	0x200001c8

0800232c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800232c:	e7fe      	b.n	800232c <ADC1_2_IRQHandler>
	...

08002330 <__libc_init_array>:
 8002330:	b570      	push	{r4, r5, r6, lr}
 8002332:	4e0d      	ldr	r6, [pc, #52]	; (8002368 <__libc_init_array+0x38>)
 8002334:	4c0d      	ldr	r4, [pc, #52]	; (800236c <__libc_init_array+0x3c>)
 8002336:	1ba4      	subs	r4, r4, r6
 8002338:	10a4      	asrs	r4, r4, #2
 800233a:	2500      	movs	r5, #0
 800233c:	42a5      	cmp	r5, r4
 800233e:	d109      	bne.n	8002354 <__libc_init_array+0x24>
 8002340:	4e0b      	ldr	r6, [pc, #44]	; (8002370 <__libc_init_array+0x40>)
 8002342:	4c0c      	ldr	r4, [pc, #48]	; (8002374 <__libc_init_array+0x44>)
 8002344:	f001 f864 	bl	8003410 <_init>
 8002348:	1ba4      	subs	r4, r4, r6
 800234a:	10a4      	asrs	r4, r4, #2
 800234c:	2500      	movs	r5, #0
 800234e:	42a5      	cmp	r5, r4
 8002350:	d105      	bne.n	800235e <__libc_init_array+0x2e>
 8002352:	bd70      	pop	{r4, r5, r6, pc}
 8002354:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002358:	4798      	blx	r3
 800235a:	3501      	adds	r5, #1
 800235c:	e7ee      	b.n	800233c <__libc_init_array+0xc>
 800235e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002362:	4798      	blx	r3
 8002364:	3501      	adds	r5, #1
 8002366:	e7f2      	b.n	800234e <__libc_init_array+0x1e>
 8002368:	08003640 	.word	0x08003640
 800236c:	08003640 	.word	0x08003640
 8002370:	08003640 	.word	0x08003640
 8002374:	08003644 	.word	0x08003644

08002378 <memset>:
 8002378:	4402      	add	r2, r0
 800237a:	4603      	mov	r3, r0
 800237c:	4293      	cmp	r3, r2
 800237e:	d100      	bne.n	8002382 <memset+0xa>
 8002380:	4770      	bx	lr
 8002382:	f803 1b01 	strb.w	r1, [r3], #1
 8002386:	e7f9      	b.n	800237c <memset+0x4>

08002388 <sin>:
 8002388:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800238a:	ec51 0b10 	vmov	r0, r1, d0
 800238e:	4a20      	ldr	r2, [pc, #128]	; (8002410 <sin+0x88>)
 8002390:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8002394:	4293      	cmp	r3, r2
 8002396:	dc07      	bgt.n	80023a8 <sin+0x20>
 8002398:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8002408 <sin+0x80>
 800239c:	2000      	movs	r0, #0
 800239e:	f000 fe67 	bl	8003070 <__kernel_sin>
 80023a2:	ec51 0b10 	vmov	r0, r1, d0
 80023a6:	e007      	b.n	80023b8 <sin+0x30>
 80023a8:	4a1a      	ldr	r2, [pc, #104]	; (8002414 <sin+0x8c>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	dd09      	ble.n	80023c2 <sin+0x3a>
 80023ae:	ee10 2a10 	vmov	r2, s0
 80023b2:	460b      	mov	r3, r1
 80023b4:	f7fd ff0c 	bl	80001d0 <__aeabi_dsub>
 80023b8:	ec41 0b10 	vmov	d0, r0, r1
 80023bc:	b005      	add	sp, #20
 80023be:	f85d fb04 	ldr.w	pc, [sp], #4
 80023c2:	4668      	mov	r0, sp
 80023c4:	f000 f828 	bl	8002418 <__ieee754_rem_pio2>
 80023c8:	f000 0003 	and.w	r0, r0, #3
 80023cc:	2801      	cmp	r0, #1
 80023ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80023d2:	ed9d 0b00 	vldr	d0, [sp]
 80023d6:	d004      	beq.n	80023e2 <sin+0x5a>
 80023d8:	2802      	cmp	r0, #2
 80023da:	d005      	beq.n	80023e8 <sin+0x60>
 80023dc:	b970      	cbnz	r0, 80023fc <sin+0x74>
 80023de:	2001      	movs	r0, #1
 80023e0:	e7dd      	b.n	800239e <sin+0x16>
 80023e2:	f000 fa0d 	bl	8002800 <__kernel_cos>
 80023e6:	e7dc      	b.n	80023a2 <sin+0x1a>
 80023e8:	2001      	movs	r0, #1
 80023ea:	f000 fe41 	bl	8003070 <__kernel_sin>
 80023ee:	ec53 2b10 	vmov	r2, r3, d0
 80023f2:	ee10 0a10 	vmov	r0, s0
 80023f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80023fa:	e7dd      	b.n	80023b8 <sin+0x30>
 80023fc:	f000 fa00 	bl	8002800 <__kernel_cos>
 8002400:	e7f5      	b.n	80023ee <sin+0x66>
 8002402:	bf00      	nop
 8002404:	f3af 8000 	nop.w
	...
 8002410:	3fe921fb 	.word	0x3fe921fb
 8002414:	7fefffff 	.word	0x7fefffff

08002418 <__ieee754_rem_pio2>:
 8002418:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800241c:	ec57 6b10 	vmov	r6, r7, d0
 8002420:	4bc3      	ldr	r3, [pc, #780]	; (8002730 <__ieee754_rem_pio2+0x318>)
 8002422:	b08d      	sub	sp, #52	; 0x34
 8002424:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8002428:	4598      	cmp	r8, r3
 800242a:	4604      	mov	r4, r0
 800242c:	9704      	str	r7, [sp, #16]
 800242e:	dc07      	bgt.n	8002440 <__ieee754_rem_pio2+0x28>
 8002430:	2200      	movs	r2, #0
 8002432:	2300      	movs	r3, #0
 8002434:	ed84 0b00 	vstr	d0, [r4]
 8002438:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800243c:	2500      	movs	r5, #0
 800243e:	e027      	b.n	8002490 <__ieee754_rem_pio2+0x78>
 8002440:	4bbc      	ldr	r3, [pc, #752]	; (8002734 <__ieee754_rem_pio2+0x31c>)
 8002442:	4598      	cmp	r8, r3
 8002444:	dc75      	bgt.n	8002532 <__ieee754_rem_pio2+0x11a>
 8002446:	9b04      	ldr	r3, [sp, #16]
 8002448:	4dbb      	ldr	r5, [pc, #748]	; (8002738 <__ieee754_rem_pio2+0x320>)
 800244a:	2b00      	cmp	r3, #0
 800244c:	ee10 0a10 	vmov	r0, s0
 8002450:	a3a9      	add	r3, pc, #676	; (adr r3, 80026f8 <__ieee754_rem_pio2+0x2e0>)
 8002452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002456:	4639      	mov	r1, r7
 8002458:	dd36      	ble.n	80024c8 <__ieee754_rem_pio2+0xb0>
 800245a:	f7fd feb9 	bl	80001d0 <__aeabi_dsub>
 800245e:	45a8      	cmp	r8, r5
 8002460:	4606      	mov	r6, r0
 8002462:	460f      	mov	r7, r1
 8002464:	d018      	beq.n	8002498 <__ieee754_rem_pio2+0x80>
 8002466:	a3a6      	add	r3, pc, #664	; (adr r3, 8002700 <__ieee754_rem_pio2+0x2e8>)
 8002468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800246c:	f7fd feb0 	bl	80001d0 <__aeabi_dsub>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	e9c4 2300 	strd	r2, r3, [r4]
 8002478:	4630      	mov	r0, r6
 800247a:	4639      	mov	r1, r7
 800247c:	f7fd fea8 	bl	80001d0 <__aeabi_dsub>
 8002480:	a39f      	add	r3, pc, #636	; (adr r3, 8002700 <__ieee754_rem_pio2+0x2e8>)
 8002482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002486:	f7fd fea3 	bl	80001d0 <__aeabi_dsub>
 800248a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800248e:	2501      	movs	r5, #1
 8002490:	4628      	mov	r0, r5
 8002492:	b00d      	add	sp, #52	; 0x34
 8002494:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002498:	a39b      	add	r3, pc, #620	; (adr r3, 8002708 <__ieee754_rem_pio2+0x2f0>)
 800249a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800249e:	f7fd fe97 	bl	80001d0 <__aeabi_dsub>
 80024a2:	a39b      	add	r3, pc, #620	; (adr r3, 8002710 <__ieee754_rem_pio2+0x2f8>)
 80024a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024a8:	4606      	mov	r6, r0
 80024aa:	460f      	mov	r7, r1
 80024ac:	f7fd fe90 	bl	80001d0 <__aeabi_dsub>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	e9c4 2300 	strd	r2, r3, [r4]
 80024b8:	4630      	mov	r0, r6
 80024ba:	4639      	mov	r1, r7
 80024bc:	f7fd fe88 	bl	80001d0 <__aeabi_dsub>
 80024c0:	a393      	add	r3, pc, #588	; (adr r3, 8002710 <__ieee754_rem_pio2+0x2f8>)
 80024c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c6:	e7de      	b.n	8002486 <__ieee754_rem_pio2+0x6e>
 80024c8:	f7fd fe84 	bl	80001d4 <__adddf3>
 80024cc:	45a8      	cmp	r8, r5
 80024ce:	4606      	mov	r6, r0
 80024d0:	460f      	mov	r7, r1
 80024d2:	d016      	beq.n	8002502 <__ieee754_rem_pio2+0xea>
 80024d4:	a38a      	add	r3, pc, #552	; (adr r3, 8002700 <__ieee754_rem_pio2+0x2e8>)
 80024d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024da:	f7fd fe7b 	bl	80001d4 <__adddf3>
 80024de:	4602      	mov	r2, r0
 80024e0:	460b      	mov	r3, r1
 80024e2:	e9c4 2300 	strd	r2, r3, [r4]
 80024e6:	4630      	mov	r0, r6
 80024e8:	4639      	mov	r1, r7
 80024ea:	f7fd fe71 	bl	80001d0 <__aeabi_dsub>
 80024ee:	a384      	add	r3, pc, #528	; (adr r3, 8002700 <__ieee754_rem_pio2+0x2e8>)
 80024f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024f4:	f7fd fe6e 	bl	80001d4 <__adddf3>
 80024f8:	f04f 35ff 	mov.w	r5, #4294967295
 80024fc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8002500:	e7c6      	b.n	8002490 <__ieee754_rem_pio2+0x78>
 8002502:	a381      	add	r3, pc, #516	; (adr r3, 8002708 <__ieee754_rem_pio2+0x2f0>)
 8002504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002508:	f7fd fe64 	bl	80001d4 <__adddf3>
 800250c:	a380      	add	r3, pc, #512	; (adr r3, 8002710 <__ieee754_rem_pio2+0x2f8>)
 800250e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002512:	4606      	mov	r6, r0
 8002514:	460f      	mov	r7, r1
 8002516:	f7fd fe5d 	bl	80001d4 <__adddf3>
 800251a:	4602      	mov	r2, r0
 800251c:	460b      	mov	r3, r1
 800251e:	e9c4 2300 	strd	r2, r3, [r4]
 8002522:	4630      	mov	r0, r6
 8002524:	4639      	mov	r1, r7
 8002526:	f7fd fe53 	bl	80001d0 <__aeabi_dsub>
 800252a:	a379      	add	r3, pc, #484	; (adr r3, 8002710 <__ieee754_rem_pio2+0x2f8>)
 800252c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002530:	e7e0      	b.n	80024f4 <__ieee754_rem_pio2+0xdc>
 8002532:	4b82      	ldr	r3, [pc, #520]	; (800273c <__ieee754_rem_pio2+0x324>)
 8002534:	4598      	cmp	r8, r3
 8002536:	f300 80d0 	bgt.w	80026da <__ieee754_rem_pio2+0x2c2>
 800253a:	f000 fe53 	bl	80031e4 <fabs>
 800253e:	ec57 6b10 	vmov	r6, r7, d0
 8002542:	ee10 0a10 	vmov	r0, s0
 8002546:	a374      	add	r3, pc, #464	; (adr r3, 8002718 <__ieee754_rem_pio2+0x300>)
 8002548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800254c:	4639      	mov	r1, r7
 800254e:	f7fd fff3 	bl	8000538 <__aeabi_dmul>
 8002552:	2200      	movs	r2, #0
 8002554:	4b7a      	ldr	r3, [pc, #488]	; (8002740 <__ieee754_rem_pio2+0x328>)
 8002556:	f7fd fe3d 	bl	80001d4 <__adddf3>
 800255a:	f7fe fa87 	bl	8000a6c <__aeabi_d2iz>
 800255e:	4605      	mov	r5, r0
 8002560:	f7fd ff84 	bl	800046c <__aeabi_i2d>
 8002564:	a364      	add	r3, pc, #400	; (adr r3, 80026f8 <__ieee754_rem_pio2+0x2e0>)
 8002566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800256a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800256e:	f7fd ffe3 	bl	8000538 <__aeabi_dmul>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4630      	mov	r0, r6
 8002578:	4639      	mov	r1, r7
 800257a:	f7fd fe29 	bl	80001d0 <__aeabi_dsub>
 800257e:	a360      	add	r3, pc, #384	; (adr r3, 8002700 <__ieee754_rem_pio2+0x2e8>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	4682      	mov	sl, r0
 8002586:	468b      	mov	fp, r1
 8002588:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800258c:	f7fd ffd4 	bl	8000538 <__aeabi_dmul>
 8002590:	2d1f      	cmp	r5, #31
 8002592:	4606      	mov	r6, r0
 8002594:	460f      	mov	r7, r1
 8002596:	dc2a      	bgt.n	80025ee <__ieee754_rem_pio2+0x1d6>
 8002598:	1e6a      	subs	r2, r5, #1
 800259a:	4b6a      	ldr	r3, [pc, #424]	; (8002744 <__ieee754_rem_pio2+0x32c>)
 800259c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025a0:	4598      	cmp	r8, r3
 80025a2:	d024      	beq.n	80025ee <__ieee754_rem_pio2+0x1d6>
 80025a4:	4632      	mov	r2, r6
 80025a6:	463b      	mov	r3, r7
 80025a8:	4650      	mov	r0, sl
 80025aa:	4659      	mov	r1, fp
 80025ac:	f7fd fe10 	bl	80001d0 <__aeabi_dsub>
 80025b0:	e9c4 0100 	strd	r0, r1, [r4]
 80025b4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80025b8:	4650      	mov	r0, sl
 80025ba:	4642      	mov	r2, r8
 80025bc:	464b      	mov	r3, r9
 80025be:	4659      	mov	r1, fp
 80025c0:	f7fd fe06 	bl	80001d0 <__aeabi_dsub>
 80025c4:	463b      	mov	r3, r7
 80025c6:	4632      	mov	r2, r6
 80025c8:	f7fd fe02 	bl	80001d0 <__aeabi_dsub>
 80025cc:	9b04      	ldr	r3, [sp, #16]
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80025d4:	f6bf af5c 	bge.w	8002490 <__ieee754_rem_pio2+0x78>
 80025d8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80025dc:	6063      	str	r3, [r4, #4]
 80025de:	f8c4 8000 	str.w	r8, [r4]
 80025e2:	60a0      	str	r0, [r4, #8]
 80025e4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80025e8:	60e3      	str	r3, [r4, #12]
 80025ea:	426d      	negs	r5, r5
 80025ec:	e750      	b.n	8002490 <__ieee754_rem_pio2+0x78>
 80025ee:	4632      	mov	r2, r6
 80025f0:	463b      	mov	r3, r7
 80025f2:	4650      	mov	r0, sl
 80025f4:	4659      	mov	r1, fp
 80025f6:	f7fd fdeb 	bl	80001d0 <__aeabi_dsub>
 80025fa:	ea4f 5228 	mov.w	r2, r8, asr #20
 80025fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002602:	1ad3      	subs	r3, r2, r3
 8002604:	2b10      	cmp	r3, #16
 8002606:	e9c4 0100 	strd	r0, r1, [r4]
 800260a:	9205      	str	r2, [sp, #20]
 800260c:	ddd2      	ble.n	80025b4 <__ieee754_rem_pio2+0x19c>
 800260e:	a33e      	add	r3, pc, #248	; (adr r3, 8002708 <__ieee754_rem_pio2+0x2f0>)
 8002610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002614:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002618:	f7fd ff8e 	bl	8000538 <__aeabi_dmul>
 800261c:	4606      	mov	r6, r0
 800261e:	460f      	mov	r7, r1
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	4650      	mov	r0, sl
 8002626:	4659      	mov	r1, fp
 8002628:	f7fd fdd2 	bl	80001d0 <__aeabi_dsub>
 800262c:	4602      	mov	r2, r0
 800262e:	460b      	mov	r3, r1
 8002630:	4680      	mov	r8, r0
 8002632:	4689      	mov	r9, r1
 8002634:	4650      	mov	r0, sl
 8002636:	4659      	mov	r1, fp
 8002638:	f7fd fdca 	bl	80001d0 <__aeabi_dsub>
 800263c:	4632      	mov	r2, r6
 800263e:	463b      	mov	r3, r7
 8002640:	f7fd fdc6 	bl	80001d0 <__aeabi_dsub>
 8002644:	a332      	add	r3, pc, #200	; (adr r3, 8002710 <__ieee754_rem_pio2+0x2f8>)
 8002646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800264a:	4606      	mov	r6, r0
 800264c:	460f      	mov	r7, r1
 800264e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002652:	f7fd ff71 	bl	8000538 <__aeabi_dmul>
 8002656:	4632      	mov	r2, r6
 8002658:	463b      	mov	r3, r7
 800265a:	f7fd fdb9 	bl	80001d0 <__aeabi_dsub>
 800265e:	4602      	mov	r2, r0
 8002660:	460b      	mov	r3, r1
 8002662:	4606      	mov	r6, r0
 8002664:	460f      	mov	r7, r1
 8002666:	4640      	mov	r0, r8
 8002668:	4649      	mov	r1, r9
 800266a:	f7fd fdb1 	bl	80001d0 <__aeabi_dsub>
 800266e:	9a05      	ldr	r2, [sp, #20]
 8002670:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	2b31      	cmp	r3, #49	; 0x31
 8002678:	e9c4 0100 	strd	r0, r1, [r4]
 800267c:	dd2a      	ble.n	80026d4 <__ieee754_rem_pio2+0x2bc>
 800267e:	a328      	add	r3, pc, #160	; (adr r3, 8002720 <__ieee754_rem_pio2+0x308>)
 8002680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002684:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8002688:	f7fd ff56 	bl	8000538 <__aeabi_dmul>
 800268c:	4606      	mov	r6, r0
 800268e:	460f      	mov	r7, r1
 8002690:	4602      	mov	r2, r0
 8002692:	460b      	mov	r3, r1
 8002694:	4640      	mov	r0, r8
 8002696:	4649      	mov	r1, r9
 8002698:	f7fd fd9a 	bl	80001d0 <__aeabi_dsub>
 800269c:	4602      	mov	r2, r0
 800269e:	460b      	mov	r3, r1
 80026a0:	4682      	mov	sl, r0
 80026a2:	468b      	mov	fp, r1
 80026a4:	4640      	mov	r0, r8
 80026a6:	4649      	mov	r1, r9
 80026a8:	f7fd fd92 	bl	80001d0 <__aeabi_dsub>
 80026ac:	4632      	mov	r2, r6
 80026ae:	463b      	mov	r3, r7
 80026b0:	f7fd fd8e 	bl	80001d0 <__aeabi_dsub>
 80026b4:	a31c      	add	r3, pc, #112	; (adr r3, 8002728 <__ieee754_rem_pio2+0x310>)
 80026b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ba:	4606      	mov	r6, r0
 80026bc:	460f      	mov	r7, r1
 80026be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80026c2:	f7fd ff39 	bl	8000538 <__aeabi_dmul>
 80026c6:	4632      	mov	r2, r6
 80026c8:	463b      	mov	r3, r7
 80026ca:	f7fd fd81 	bl	80001d0 <__aeabi_dsub>
 80026ce:	4606      	mov	r6, r0
 80026d0:	460f      	mov	r7, r1
 80026d2:	e767      	b.n	80025a4 <__ieee754_rem_pio2+0x18c>
 80026d4:	46c2      	mov	sl, r8
 80026d6:	46cb      	mov	fp, r9
 80026d8:	e76c      	b.n	80025b4 <__ieee754_rem_pio2+0x19c>
 80026da:	4b1b      	ldr	r3, [pc, #108]	; (8002748 <__ieee754_rem_pio2+0x330>)
 80026dc:	4598      	cmp	r8, r3
 80026de:	dd35      	ble.n	800274c <__ieee754_rem_pio2+0x334>
 80026e0:	ee10 2a10 	vmov	r2, s0
 80026e4:	463b      	mov	r3, r7
 80026e6:	4630      	mov	r0, r6
 80026e8:	4639      	mov	r1, r7
 80026ea:	f7fd fd71 	bl	80001d0 <__aeabi_dsub>
 80026ee:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80026f2:	e9c4 0100 	strd	r0, r1, [r4]
 80026f6:	e6a1      	b.n	800243c <__ieee754_rem_pio2+0x24>
 80026f8:	54400000 	.word	0x54400000
 80026fc:	3ff921fb 	.word	0x3ff921fb
 8002700:	1a626331 	.word	0x1a626331
 8002704:	3dd0b461 	.word	0x3dd0b461
 8002708:	1a600000 	.word	0x1a600000
 800270c:	3dd0b461 	.word	0x3dd0b461
 8002710:	2e037073 	.word	0x2e037073
 8002714:	3ba3198a 	.word	0x3ba3198a
 8002718:	6dc9c883 	.word	0x6dc9c883
 800271c:	3fe45f30 	.word	0x3fe45f30
 8002720:	2e000000 	.word	0x2e000000
 8002724:	3ba3198a 	.word	0x3ba3198a
 8002728:	252049c1 	.word	0x252049c1
 800272c:	397b839a 	.word	0x397b839a
 8002730:	3fe921fb 	.word	0x3fe921fb
 8002734:	4002d97b 	.word	0x4002d97b
 8002738:	3ff921fb 	.word	0x3ff921fb
 800273c:	413921fb 	.word	0x413921fb
 8002740:	3fe00000 	.word	0x3fe00000
 8002744:	08003464 	.word	0x08003464
 8002748:	7fefffff 	.word	0x7fefffff
 800274c:	ea4f 5528 	mov.w	r5, r8, asr #20
 8002750:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 8002754:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8002758:	4630      	mov	r0, r6
 800275a:	460f      	mov	r7, r1
 800275c:	f7fe f986 	bl	8000a6c <__aeabi_d2iz>
 8002760:	f7fd fe84 	bl	800046c <__aeabi_i2d>
 8002764:	4602      	mov	r2, r0
 8002766:	460b      	mov	r3, r1
 8002768:	4630      	mov	r0, r6
 800276a:	4639      	mov	r1, r7
 800276c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8002770:	f7fd fd2e 	bl	80001d0 <__aeabi_dsub>
 8002774:	2200      	movs	r2, #0
 8002776:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <__ieee754_rem_pio2+0x3dc>)
 8002778:	f7fd fede 	bl	8000538 <__aeabi_dmul>
 800277c:	460f      	mov	r7, r1
 800277e:	4606      	mov	r6, r0
 8002780:	f7fe f974 	bl	8000a6c <__aeabi_d2iz>
 8002784:	f7fd fe72 	bl	800046c <__aeabi_i2d>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4630      	mov	r0, r6
 800278e:	4639      	mov	r1, r7
 8002790:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8002794:	f7fd fd1c 	bl	80001d0 <__aeabi_dsub>
 8002798:	2200      	movs	r2, #0
 800279a:	4b16      	ldr	r3, [pc, #88]	; (80027f4 <__ieee754_rem_pio2+0x3dc>)
 800279c:	f7fd fecc 	bl	8000538 <__aeabi_dmul>
 80027a0:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80027a4:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 80027a8:	f04f 0803 	mov.w	r8, #3
 80027ac:	2600      	movs	r6, #0
 80027ae:	2700      	movs	r7, #0
 80027b0:	4632      	mov	r2, r6
 80027b2:	463b      	mov	r3, r7
 80027b4:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 80027b8:	f108 3aff 	add.w	sl, r8, #4294967295
 80027bc:	f7fe f924 	bl	8000a08 <__aeabi_dcmpeq>
 80027c0:	b9b0      	cbnz	r0, 80027f0 <__ieee754_rem_pio2+0x3d8>
 80027c2:	4b0d      	ldr	r3, [pc, #52]	; (80027f8 <__ieee754_rem_pio2+0x3e0>)
 80027c4:	9301      	str	r3, [sp, #4]
 80027c6:	2302      	movs	r3, #2
 80027c8:	9300      	str	r3, [sp, #0]
 80027ca:	462a      	mov	r2, r5
 80027cc:	4643      	mov	r3, r8
 80027ce:	4621      	mov	r1, r4
 80027d0:	a806      	add	r0, sp, #24
 80027d2:	f000 f8fd 	bl	80029d0 <__kernel_rem_pio2>
 80027d6:	9b04      	ldr	r3, [sp, #16]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	4605      	mov	r5, r0
 80027dc:	f6bf ae58 	bge.w	8002490 <__ieee754_rem_pio2+0x78>
 80027e0:	6863      	ldr	r3, [r4, #4]
 80027e2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80027e6:	6063      	str	r3, [r4, #4]
 80027e8:	68e3      	ldr	r3, [r4, #12]
 80027ea:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80027ee:	e6fb      	b.n	80025e8 <__ieee754_rem_pio2+0x1d0>
 80027f0:	46d0      	mov	r8, sl
 80027f2:	e7dd      	b.n	80027b0 <__ieee754_rem_pio2+0x398>
 80027f4:	41700000 	.word	0x41700000
 80027f8:	080034e4 	.word	0x080034e4
 80027fc:	00000000 	.word	0x00000000

08002800 <__kernel_cos>:
 8002800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002804:	ec59 8b10 	vmov	r8, r9, d0
 8002808:	f029 4700 	bic.w	r7, r9, #2147483648	; 0x80000000
 800280c:	b085      	sub	sp, #20
 800280e:	f1b7 5f79 	cmp.w	r7, #1044381696	; 0x3e400000
 8002812:	ed8d 1b00 	vstr	d1, [sp]
 8002816:	da07      	bge.n	8002828 <__kernel_cos+0x28>
 8002818:	ee10 0a10 	vmov	r0, s0
 800281c:	4649      	mov	r1, r9
 800281e:	f7fe f925 	bl	8000a6c <__aeabi_d2iz>
 8002822:	2800      	cmp	r0, #0
 8002824:	f000 80aa 	beq.w	800297c <__kernel_cos+0x17c>
 8002828:	4642      	mov	r2, r8
 800282a:	464b      	mov	r3, r9
 800282c:	4640      	mov	r0, r8
 800282e:	4649      	mov	r1, r9
 8002830:	f7fd fe82 	bl	8000538 <__aeabi_dmul>
 8002834:	a359      	add	r3, pc, #356	; (adr r3, 800299c <__kernel_cos+0x19c>)
 8002836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800283a:	4604      	mov	r4, r0
 800283c:	460d      	mov	r5, r1
 800283e:	f7fd fe7b 	bl	8000538 <__aeabi_dmul>
 8002842:	a358      	add	r3, pc, #352	; (adr r3, 80029a4 <__kernel_cos+0x1a4>)
 8002844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002848:	f7fd fcc4 	bl	80001d4 <__adddf3>
 800284c:	4622      	mov	r2, r4
 800284e:	462b      	mov	r3, r5
 8002850:	f7fd fe72 	bl	8000538 <__aeabi_dmul>
 8002854:	a355      	add	r3, pc, #340	; (adr r3, 80029ac <__kernel_cos+0x1ac>)
 8002856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800285a:	f7fd fcb9 	bl	80001d0 <__aeabi_dsub>
 800285e:	4622      	mov	r2, r4
 8002860:	462b      	mov	r3, r5
 8002862:	f7fd fe69 	bl	8000538 <__aeabi_dmul>
 8002866:	a353      	add	r3, pc, #332	; (adr r3, 80029b4 <__kernel_cos+0x1b4>)
 8002868:	e9d3 2300 	ldrd	r2, r3, [r3]
 800286c:	f7fd fcb2 	bl	80001d4 <__adddf3>
 8002870:	4622      	mov	r2, r4
 8002872:	462b      	mov	r3, r5
 8002874:	f7fd fe60 	bl	8000538 <__aeabi_dmul>
 8002878:	a350      	add	r3, pc, #320	; (adr r3, 80029bc <__kernel_cos+0x1bc>)
 800287a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287e:	f7fd fca7 	bl	80001d0 <__aeabi_dsub>
 8002882:	4622      	mov	r2, r4
 8002884:	462b      	mov	r3, r5
 8002886:	f7fd fe57 	bl	8000538 <__aeabi_dmul>
 800288a:	a34e      	add	r3, pc, #312	; (adr r3, 80029c4 <__kernel_cos+0x1c4>)
 800288c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002890:	f7fd fca0 	bl	80001d4 <__adddf3>
 8002894:	462b      	mov	r3, r5
 8002896:	4622      	mov	r2, r4
 8002898:	f7fd fe4e 	bl	8000538 <__aeabi_dmul>
 800289c:	4b3a      	ldr	r3, [pc, #232]	; (8002988 <__kernel_cos+0x188>)
 800289e:	429f      	cmp	r7, r3
 80028a0:	4682      	mov	sl, r0
 80028a2:	468b      	mov	fp, r1
 80028a4:	dc2c      	bgt.n	8002900 <__kernel_cos+0x100>
 80028a6:	2200      	movs	r2, #0
 80028a8:	4b38      	ldr	r3, [pc, #224]	; (800298c <__kernel_cos+0x18c>)
 80028aa:	4620      	mov	r0, r4
 80028ac:	4629      	mov	r1, r5
 80028ae:	f7fd fe43 	bl	8000538 <__aeabi_dmul>
 80028b2:	4652      	mov	r2, sl
 80028b4:	4606      	mov	r6, r0
 80028b6:	460f      	mov	r7, r1
 80028b8:	465b      	mov	r3, fp
 80028ba:	4620      	mov	r0, r4
 80028bc:	4629      	mov	r1, r5
 80028be:	f7fd fe3b 	bl	8000538 <__aeabi_dmul>
 80028c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80028c6:	4604      	mov	r4, r0
 80028c8:	460d      	mov	r5, r1
 80028ca:	4640      	mov	r0, r8
 80028cc:	4649      	mov	r1, r9
 80028ce:	f7fd fe33 	bl	8000538 <__aeabi_dmul>
 80028d2:	4602      	mov	r2, r0
 80028d4:	460b      	mov	r3, r1
 80028d6:	4620      	mov	r0, r4
 80028d8:	4629      	mov	r1, r5
 80028da:	f7fd fc79 	bl	80001d0 <__aeabi_dsub>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	4630      	mov	r0, r6
 80028e4:	4639      	mov	r1, r7
 80028e6:	f7fd fc73 	bl	80001d0 <__aeabi_dsub>
 80028ea:	460b      	mov	r3, r1
 80028ec:	4928      	ldr	r1, [pc, #160]	; (8002990 <__kernel_cos+0x190>)
 80028ee:	4602      	mov	r2, r0
 80028f0:	2000      	movs	r0, #0
 80028f2:	f7fd fc6d 	bl	80001d0 <__aeabi_dsub>
 80028f6:	ec41 0b10 	vmov	d0, r0, r1
 80028fa:	b005      	add	sp, #20
 80028fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002900:	4b24      	ldr	r3, [pc, #144]	; (8002994 <__kernel_cos+0x194>)
 8002902:	4923      	ldr	r1, [pc, #140]	; (8002990 <__kernel_cos+0x190>)
 8002904:	429f      	cmp	r7, r3
 8002906:	bfd7      	itett	le
 8002908:	f5a7 1300 	suble.w	r3, r7, #2097152	; 0x200000
 800290c:	4f22      	ldrgt	r7, [pc, #136]	; (8002998 <__kernel_cos+0x198>)
 800290e:	2200      	movle	r2, #0
 8002910:	4616      	movle	r6, r2
 8002912:	bfd4      	ite	le
 8002914:	461f      	movle	r7, r3
 8002916:	2600      	movgt	r6, #0
 8002918:	4632      	mov	r2, r6
 800291a:	463b      	mov	r3, r7
 800291c:	2000      	movs	r0, #0
 800291e:	f7fd fc57 	bl	80001d0 <__aeabi_dsub>
 8002922:	2200      	movs	r2, #0
 8002924:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8002928:	4b18      	ldr	r3, [pc, #96]	; (800298c <__kernel_cos+0x18c>)
 800292a:	4620      	mov	r0, r4
 800292c:	4629      	mov	r1, r5
 800292e:	f7fd fe03 	bl	8000538 <__aeabi_dmul>
 8002932:	4632      	mov	r2, r6
 8002934:	463b      	mov	r3, r7
 8002936:	f7fd fc4b 	bl	80001d0 <__aeabi_dsub>
 800293a:	4652      	mov	r2, sl
 800293c:	4606      	mov	r6, r0
 800293e:	460f      	mov	r7, r1
 8002940:	465b      	mov	r3, fp
 8002942:	4620      	mov	r0, r4
 8002944:	4629      	mov	r1, r5
 8002946:	f7fd fdf7 	bl	8000538 <__aeabi_dmul>
 800294a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800294e:	4604      	mov	r4, r0
 8002950:	460d      	mov	r5, r1
 8002952:	4640      	mov	r0, r8
 8002954:	4649      	mov	r1, r9
 8002956:	f7fd fdef 	bl	8000538 <__aeabi_dmul>
 800295a:	4602      	mov	r2, r0
 800295c:	460b      	mov	r3, r1
 800295e:	4620      	mov	r0, r4
 8002960:	4629      	mov	r1, r5
 8002962:	f7fd fc35 	bl	80001d0 <__aeabi_dsub>
 8002966:	4602      	mov	r2, r0
 8002968:	460b      	mov	r3, r1
 800296a:	4630      	mov	r0, r6
 800296c:	4639      	mov	r1, r7
 800296e:	f7fd fc2f 	bl	80001d0 <__aeabi_dsub>
 8002972:	4602      	mov	r2, r0
 8002974:	460b      	mov	r3, r1
 8002976:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800297a:	e7ba      	b.n	80028f2 <__kernel_cos+0xf2>
 800297c:	2000      	movs	r0, #0
 800297e:	4904      	ldr	r1, [pc, #16]	; (8002990 <__kernel_cos+0x190>)
 8002980:	e7b9      	b.n	80028f6 <__kernel_cos+0xf6>
 8002982:	bf00      	nop
 8002984:	f3af 8000 	nop.w
 8002988:	3fd33332 	.word	0x3fd33332
 800298c:	3fe00000 	.word	0x3fe00000
 8002990:	3ff00000 	.word	0x3ff00000
 8002994:	3fe90000 	.word	0x3fe90000
 8002998:	3fd20000 	.word	0x3fd20000
 800299c:	be8838d4 	.word	0xbe8838d4
 80029a0:	bda8fae9 	.word	0xbda8fae9
 80029a4:	bdb4b1c4 	.word	0xbdb4b1c4
 80029a8:	3e21ee9e 	.word	0x3e21ee9e
 80029ac:	809c52ad 	.word	0x809c52ad
 80029b0:	3e927e4f 	.word	0x3e927e4f
 80029b4:	19cb1590 	.word	0x19cb1590
 80029b8:	3efa01a0 	.word	0x3efa01a0
 80029bc:	16c15177 	.word	0x16c15177
 80029c0:	3f56c16c 	.word	0x3f56c16c
 80029c4:	5555554c 	.word	0x5555554c
 80029c8:	3fa55555 	.word	0x3fa55555
 80029cc:	00000000 	.word	0x00000000

080029d0 <__kernel_rem_pio2>:
 80029d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80029d4:	ed2d 8b02 	vpush	{d8}
 80029d8:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 80029dc:	1ed4      	subs	r4, r2, #3
 80029de:	9306      	str	r3, [sp, #24]
 80029e0:	9102      	str	r1, [sp, #8]
 80029e2:	4bc3      	ldr	r3, [pc, #780]	; (8002cf0 <__kernel_rem_pio2+0x320>)
 80029e4:	99a4      	ldr	r1, [sp, #656]	; 0x290
 80029e6:	9009      	str	r0, [sp, #36]	; 0x24
 80029e8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80029ec:	9300      	str	r3, [sp, #0]
 80029ee:	9b06      	ldr	r3, [sp, #24]
 80029f0:	3b01      	subs	r3, #1
 80029f2:	9304      	str	r3, [sp, #16]
 80029f4:	2318      	movs	r3, #24
 80029f6:	fb94 f4f3 	sdiv	r4, r4, r3
 80029fa:	f06f 0317 	mvn.w	r3, #23
 80029fe:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8002a02:	fb04 3303 	mla	r3, r4, r3, r3
 8002a06:	eb03 0a02 	add.w	sl, r3, r2
 8002a0a:	9b00      	ldr	r3, [sp, #0]
 8002a0c:	9a04      	ldr	r2, [sp, #16]
 8002a0e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8002ce0 <__kernel_rem_pio2+0x310>
 8002a12:	eb03 0802 	add.w	r8, r3, r2
 8002a16:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8002a18:	1aa7      	subs	r7, r4, r2
 8002a1a:	ae20      	add	r6, sp, #128	; 0x80
 8002a1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8002a20:	2500      	movs	r5, #0
 8002a22:	4545      	cmp	r5, r8
 8002a24:	dd13      	ble.n	8002a4e <__kernel_rem_pio2+0x7e>
 8002a26:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8002ce0 <__kernel_rem_pio2+0x310>
 8002a2a:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 8002a2e:	2600      	movs	r6, #0
 8002a30:	9b00      	ldr	r3, [sp, #0]
 8002a32:	429e      	cmp	r6, r3
 8002a34:	dc32      	bgt.n	8002a9c <__kernel_rem_pio2+0xcc>
 8002a36:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002a38:	9303      	str	r3, [sp, #12]
 8002a3a:	9b06      	ldr	r3, [sp, #24]
 8002a3c:	199d      	adds	r5, r3, r6
 8002a3e:	ab20      	add	r3, sp, #128	; 0x80
 8002a40:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8002a44:	9308      	str	r3, [sp, #32]
 8002a46:	ec59 8b18 	vmov	r8, r9, d8
 8002a4a:	2700      	movs	r7, #0
 8002a4c:	e01f      	b.n	8002a8e <__kernel_rem_pio2+0xbe>
 8002a4e:	42ef      	cmn	r7, r5
 8002a50:	d407      	bmi.n	8002a62 <__kernel_rem_pio2+0x92>
 8002a52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8002a56:	f7fd fd09 	bl	800046c <__aeabi_i2d>
 8002a5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8002a5e:	3501      	adds	r5, #1
 8002a60:	e7df      	b.n	8002a22 <__kernel_rem_pio2+0x52>
 8002a62:	ec51 0b18 	vmov	r0, r1, d8
 8002a66:	e7f8      	b.n	8002a5a <__kernel_rem_pio2+0x8a>
 8002a68:	9908      	ldr	r1, [sp, #32]
 8002a6a:	9d03      	ldr	r5, [sp, #12]
 8002a6c:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8002a70:	9108      	str	r1, [sp, #32]
 8002a72:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 8002a76:	9503      	str	r5, [sp, #12]
 8002a78:	f7fd fd5e 	bl	8000538 <__aeabi_dmul>
 8002a7c:	4602      	mov	r2, r0
 8002a7e:	460b      	mov	r3, r1
 8002a80:	4640      	mov	r0, r8
 8002a82:	4649      	mov	r1, r9
 8002a84:	f7fd fba6 	bl	80001d4 <__adddf3>
 8002a88:	3701      	adds	r7, #1
 8002a8a:	4680      	mov	r8, r0
 8002a8c:	4689      	mov	r9, r1
 8002a8e:	9b04      	ldr	r3, [sp, #16]
 8002a90:	429f      	cmp	r7, r3
 8002a92:	dde9      	ble.n	8002a68 <__kernel_rem_pio2+0x98>
 8002a94:	e8eb 8902 	strd	r8, r9, [fp], #8
 8002a98:	3601      	adds	r6, #1
 8002a9a:	e7c9      	b.n	8002a30 <__kernel_rem_pio2+0x60>
 8002a9c:	9b00      	ldr	r3, [sp, #0]
 8002a9e:	9f00      	ldr	r7, [sp, #0]
 8002aa0:	aa0c      	add	r2, sp, #48	; 0x30
 8002aa2:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8002aa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8002aa8:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 8002aaa:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8002aae:	930a      	str	r3, [sp, #40]	; 0x28
 8002ab0:	ab98      	add	r3, sp, #608	; 0x260
 8002ab2:	f107 5b00 	add.w	fp, r7, #536870912	; 0x20000000
 8002ab6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8002aba:	f10b 3bff 	add.w	fp, fp, #4294967295
 8002abe:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8002ac2:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002ac6:	9308      	str	r3, [sp, #32]
 8002ac8:	9a08      	ldr	r2, [sp, #32]
 8002aca:	ab98      	add	r3, sp, #608	; 0x260
 8002acc:	4413      	add	r3, r2
 8002ace:	f1a3 0b98 	sub.w	fp, r3, #152	; 0x98
 8002ad2:	2600      	movs	r6, #0
 8002ad4:	1bbb      	subs	r3, r7, r6
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	dc77      	bgt.n	8002bca <__kernel_rem_pio2+0x1fa>
 8002ada:	ec49 8b10 	vmov	d0, r8, r9
 8002ade:	4650      	mov	r0, sl
 8002ae0:	f000 fc0e 	bl	8003300 <scalbn>
 8002ae4:	ec55 4b10 	vmov	r4, r5, d0
 8002ae8:	2200      	movs	r2, #0
 8002aea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8002aee:	ee10 0a10 	vmov	r0, s0
 8002af2:	4629      	mov	r1, r5
 8002af4:	f7fd fd20 	bl	8000538 <__aeabi_dmul>
 8002af8:	ec41 0b10 	vmov	d0, r0, r1
 8002afc:	f000 fb7c 	bl	80031f8 <floor>
 8002b00:	2200      	movs	r2, #0
 8002b02:	ec51 0b10 	vmov	r0, r1, d0
 8002b06:	4b7b      	ldr	r3, [pc, #492]	; (8002cf4 <__kernel_rem_pio2+0x324>)
 8002b08:	f7fd fd16 	bl	8000538 <__aeabi_dmul>
 8002b0c:	4602      	mov	r2, r0
 8002b0e:	460b      	mov	r3, r1
 8002b10:	4620      	mov	r0, r4
 8002b12:	4629      	mov	r1, r5
 8002b14:	f7fd fb5c 	bl	80001d0 <__aeabi_dsub>
 8002b18:	460d      	mov	r5, r1
 8002b1a:	4604      	mov	r4, r0
 8002b1c:	f7fd ffa6 	bl	8000a6c <__aeabi_d2iz>
 8002b20:	9003      	str	r0, [sp, #12]
 8002b22:	f7fd fca3 	bl	800046c <__aeabi_i2d>
 8002b26:	4602      	mov	r2, r0
 8002b28:	460b      	mov	r3, r1
 8002b2a:	4620      	mov	r0, r4
 8002b2c:	4629      	mov	r1, r5
 8002b2e:	f7fd fb4f 	bl	80001d0 <__aeabi_dsub>
 8002b32:	f1ba 0f00 	cmp.w	sl, #0
 8002b36:	4680      	mov	r8, r0
 8002b38:	4689      	mov	r9, r1
 8002b3a:	dd6b      	ble.n	8002c14 <__kernel_rem_pio2+0x244>
 8002b3c:	1e7a      	subs	r2, r7, #1
 8002b3e:	ab0c      	add	r3, sp, #48	; 0x30
 8002b40:	f1ca 0118 	rsb	r1, sl, #24
 8002b44:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8002b48:	9c03      	ldr	r4, [sp, #12]
 8002b4a:	fa40 f301 	asr.w	r3, r0, r1
 8002b4e:	441c      	add	r4, r3
 8002b50:	408b      	lsls	r3, r1
 8002b52:	1ac0      	subs	r0, r0, r3
 8002b54:	ab0c      	add	r3, sp, #48	; 0x30
 8002b56:	9403      	str	r4, [sp, #12]
 8002b58:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8002b5c:	f1ca 0317 	rsb	r3, sl, #23
 8002b60:	fa40 fb03 	asr.w	fp, r0, r3
 8002b64:	f1bb 0f00 	cmp.w	fp, #0
 8002b68:	dd62      	ble.n	8002c30 <__kernel_rem_pio2+0x260>
 8002b6a:	9b03      	ldr	r3, [sp, #12]
 8002b6c:	2200      	movs	r2, #0
 8002b6e:	3301      	adds	r3, #1
 8002b70:	9303      	str	r3, [sp, #12]
 8002b72:	4614      	mov	r4, r2
 8002b74:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8002b78:	4297      	cmp	r7, r2
 8002b7a:	f300 8089 	bgt.w	8002c90 <__kernel_rem_pio2+0x2c0>
 8002b7e:	f1ba 0f00 	cmp.w	sl, #0
 8002b82:	dd07      	ble.n	8002b94 <__kernel_rem_pio2+0x1c4>
 8002b84:	f1ba 0f01 	cmp.w	sl, #1
 8002b88:	f000 8096 	beq.w	8002cb8 <__kernel_rem_pio2+0x2e8>
 8002b8c:	f1ba 0f02 	cmp.w	sl, #2
 8002b90:	f000 809c 	beq.w	8002ccc <__kernel_rem_pio2+0x2fc>
 8002b94:	f1bb 0f02 	cmp.w	fp, #2
 8002b98:	d14a      	bne.n	8002c30 <__kernel_rem_pio2+0x260>
 8002b9a:	4642      	mov	r2, r8
 8002b9c:	464b      	mov	r3, r9
 8002b9e:	2000      	movs	r0, #0
 8002ba0:	4955      	ldr	r1, [pc, #340]	; (8002cf8 <__kernel_rem_pio2+0x328>)
 8002ba2:	f7fd fb15 	bl	80001d0 <__aeabi_dsub>
 8002ba6:	4680      	mov	r8, r0
 8002ba8:	4689      	mov	r9, r1
 8002baa:	2c00      	cmp	r4, #0
 8002bac:	d040      	beq.n	8002c30 <__kernel_rem_pio2+0x260>
 8002bae:	4650      	mov	r0, sl
 8002bb0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8002ce8 <__kernel_rem_pio2+0x318>
 8002bb4:	f000 fba4 	bl	8003300 <scalbn>
 8002bb8:	4640      	mov	r0, r8
 8002bba:	4649      	mov	r1, r9
 8002bbc:	ec53 2b10 	vmov	r2, r3, d0
 8002bc0:	f7fd fb06 	bl	80001d0 <__aeabi_dsub>
 8002bc4:	4680      	mov	r8, r0
 8002bc6:	4689      	mov	r9, r1
 8002bc8:	e032      	b.n	8002c30 <__kernel_rem_pio2+0x260>
 8002bca:	2200      	movs	r2, #0
 8002bcc:	4b4b      	ldr	r3, [pc, #300]	; (8002cfc <__kernel_rem_pio2+0x32c>)
 8002bce:	4640      	mov	r0, r8
 8002bd0:	4649      	mov	r1, r9
 8002bd2:	f7fd fcb1 	bl	8000538 <__aeabi_dmul>
 8002bd6:	f7fd ff49 	bl	8000a6c <__aeabi_d2iz>
 8002bda:	f7fd fc47 	bl	800046c <__aeabi_i2d>
 8002bde:	2200      	movs	r2, #0
 8002be0:	4b47      	ldr	r3, [pc, #284]	; (8002d00 <__kernel_rem_pio2+0x330>)
 8002be2:	4604      	mov	r4, r0
 8002be4:	460d      	mov	r5, r1
 8002be6:	f7fd fca7 	bl	8000538 <__aeabi_dmul>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4640      	mov	r0, r8
 8002bf0:	4649      	mov	r1, r9
 8002bf2:	f7fd faed 	bl	80001d0 <__aeabi_dsub>
 8002bf6:	f7fd ff39 	bl	8000a6c <__aeabi_d2iz>
 8002bfa:	ab0c      	add	r3, sp, #48	; 0x30
 8002bfc:	4629      	mov	r1, r5
 8002bfe:	f843 0026 	str.w	r0, [r3, r6, lsl #2]
 8002c02:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8002c06:	4620      	mov	r0, r4
 8002c08:	f7fd fae4 	bl	80001d4 <__adddf3>
 8002c0c:	3601      	adds	r6, #1
 8002c0e:	4680      	mov	r8, r0
 8002c10:	4689      	mov	r9, r1
 8002c12:	e75f      	b.n	8002ad4 <__kernel_rem_pio2+0x104>
 8002c14:	d106      	bne.n	8002c24 <__kernel_rem_pio2+0x254>
 8002c16:	1e7b      	subs	r3, r7, #1
 8002c18:	aa0c      	add	r2, sp, #48	; 0x30
 8002c1a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8002c1e:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8002c22:	e79f      	b.n	8002b64 <__kernel_rem_pio2+0x194>
 8002c24:	2200      	movs	r2, #0
 8002c26:	4b37      	ldr	r3, [pc, #220]	; (8002d04 <__kernel_rem_pio2+0x334>)
 8002c28:	f7fd ff0c 	bl	8000a44 <__aeabi_dcmpge>
 8002c2c:	bb68      	cbnz	r0, 8002c8a <__kernel_rem_pio2+0x2ba>
 8002c2e:	4683      	mov	fp, r0
 8002c30:	2200      	movs	r2, #0
 8002c32:	2300      	movs	r3, #0
 8002c34:	4640      	mov	r0, r8
 8002c36:	4649      	mov	r1, r9
 8002c38:	f7fd fee6 	bl	8000a08 <__aeabi_dcmpeq>
 8002c3c:	2800      	cmp	r0, #0
 8002c3e:	f000 80c1 	beq.w	8002dc4 <__kernel_rem_pio2+0x3f4>
 8002c42:	1e7c      	subs	r4, r7, #1
 8002c44:	4623      	mov	r3, r4
 8002c46:	2200      	movs	r2, #0
 8002c48:	9900      	ldr	r1, [sp, #0]
 8002c4a:	428b      	cmp	r3, r1
 8002c4c:	da5c      	bge.n	8002d08 <__kernel_rem_pio2+0x338>
 8002c4e:	2a00      	cmp	r2, #0
 8002c50:	f040 808b 	bne.w	8002d6a <__kernel_rem_pio2+0x39a>
 8002c54:	2401      	movs	r4, #1
 8002c56:	f06f 0203 	mvn.w	r2, #3
 8002c5a:	fb02 f304 	mul.w	r3, r2, r4
 8002c5e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8002c60:	58cb      	ldr	r3, [r1, r3]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d056      	beq.n	8002d14 <__kernel_rem_pio2+0x344>
 8002c66:	9b08      	ldr	r3, [sp, #32]
 8002c68:	aa98      	add	r2, sp, #608	; 0x260
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f1a3 0b90 	sub.w	fp, r3, #144	; 0x90
 8002c70:	9b06      	ldr	r3, [sp, #24]
 8002c72:	19dd      	adds	r5, r3, r7
 8002c74:	ab20      	add	r3, sp, #128	; 0x80
 8002c76:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 8002c7a:	19e3      	adds	r3, r4, r7
 8002c7c:	1c7e      	adds	r6, r7, #1
 8002c7e:	9303      	str	r3, [sp, #12]
 8002c80:	9b03      	ldr	r3, [sp, #12]
 8002c82:	429e      	cmp	r6, r3
 8002c84:	dd48      	ble.n	8002d18 <__kernel_rem_pio2+0x348>
 8002c86:	461f      	mov	r7, r3
 8002c88:	e712      	b.n	8002ab0 <__kernel_rem_pio2+0xe0>
 8002c8a:	f04f 0b02 	mov.w	fp, #2
 8002c8e:	e76c      	b.n	8002b6a <__kernel_rem_pio2+0x19a>
 8002c90:	ab0c      	add	r3, sp, #48	; 0x30
 8002c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c96:	b94c      	cbnz	r4, 8002cac <__kernel_rem_pio2+0x2dc>
 8002c98:	b12b      	cbz	r3, 8002ca6 <__kernel_rem_pio2+0x2d6>
 8002c9a:	a80c      	add	r0, sp, #48	; 0x30
 8002c9c:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8002ca0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	3201      	adds	r2, #1
 8002ca8:	461c      	mov	r4, r3
 8002caa:	e765      	b.n	8002b78 <__kernel_rem_pio2+0x1a8>
 8002cac:	a80c      	add	r0, sp, #48	; 0x30
 8002cae:	1acb      	subs	r3, r1, r3
 8002cb0:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8002cb4:	4623      	mov	r3, r4
 8002cb6:	e7f6      	b.n	8002ca6 <__kernel_rem_pio2+0x2d6>
 8002cb8:	1e7a      	subs	r2, r7, #1
 8002cba:	ab0c      	add	r3, sp, #48	; 0x30
 8002cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc0:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8002cc4:	a90c      	add	r1, sp, #48	; 0x30
 8002cc6:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8002cca:	e763      	b.n	8002b94 <__kernel_rem_pio2+0x1c4>
 8002ccc:	1e7a      	subs	r2, r7, #1
 8002cce:	ab0c      	add	r3, sp, #48	; 0x30
 8002cd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cd4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8002cd8:	e7f4      	b.n	8002cc4 <__kernel_rem_pio2+0x2f4>
 8002cda:	bf00      	nop
 8002cdc:	f3af 8000 	nop.w
	...
 8002cec:	3ff00000 	.word	0x3ff00000
 8002cf0:	08003630 	.word	0x08003630
 8002cf4:	40200000 	.word	0x40200000
 8002cf8:	3ff00000 	.word	0x3ff00000
 8002cfc:	3e700000 	.word	0x3e700000
 8002d00:	41700000 	.word	0x41700000
 8002d04:	3fe00000 	.word	0x3fe00000
 8002d08:	a90c      	add	r1, sp, #48	; 0x30
 8002d0a:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	430a      	orrs	r2, r1
 8002d12:	e799      	b.n	8002c48 <__kernel_rem_pio2+0x278>
 8002d14:	3401      	adds	r4, #1
 8002d16:	e7a0      	b.n	8002c5a <__kernel_rem_pio2+0x28a>
 8002d18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8002d1a:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8002d1e:	f7fd fba5 	bl	800046c <__aeabi_i2d>
 8002d22:	e8e5 0102 	strd	r0, r1, [r5], #8
 8002d26:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002d28:	9508      	str	r5, [sp, #32]
 8002d2a:	461c      	mov	r4, r3
 8002d2c:	2700      	movs	r7, #0
 8002d2e:	f04f 0800 	mov.w	r8, #0
 8002d32:	f04f 0900 	mov.w	r9, #0
 8002d36:	9b04      	ldr	r3, [sp, #16]
 8002d38:	429f      	cmp	r7, r3
 8002d3a:	dd03      	ble.n	8002d44 <__kernel_rem_pio2+0x374>
 8002d3c:	e8eb 8902 	strd	r8, r9, [fp], #8
 8002d40:	3601      	adds	r6, #1
 8002d42:	e79d      	b.n	8002c80 <__kernel_rem_pio2+0x2b0>
 8002d44:	9908      	ldr	r1, [sp, #32]
 8002d46:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 8002d4a:	9108      	str	r1, [sp, #32]
 8002d4c:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8002d50:	f7fd fbf2 	bl	8000538 <__aeabi_dmul>
 8002d54:	4602      	mov	r2, r0
 8002d56:	460b      	mov	r3, r1
 8002d58:	4640      	mov	r0, r8
 8002d5a:	4649      	mov	r1, r9
 8002d5c:	f7fd fa3a 	bl	80001d4 <__adddf3>
 8002d60:	3701      	adds	r7, #1
 8002d62:	4680      	mov	r8, r0
 8002d64:	4689      	mov	r9, r1
 8002d66:	e7e6      	b.n	8002d36 <__kernel_rem_pio2+0x366>
 8002d68:	3c01      	subs	r4, #1
 8002d6a:	ab0c      	add	r3, sp, #48	; 0x30
 8002d6c:	f1aa 0a18 	sub.w	sl, sl, #24
 8002d70:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f7      	beq.n	8002d68 <__kernel_rem_pio2+0x398>
 8002d78:	4650      	mov	r0, sl
 8002d7a:	ed9f 0bb5 	vldr	d0, [pc, #724]	; 8003050 <__kernel_rem_pio2+0x680>
 8002d7e:	f000 fabf 	bl	8003300 <scalbn>
 8002d82:	00e5      	lsls	r5, r4, #3
 8002d84:	ab98      	add	r3, sp, #608	; 0x260
 8002d86:	eb03 0905 	add.w	r9, r3, r5
 8002d8a:	ec57 6b10 	vmov	r6, r7, d0
 8002d8e:	f1a9 0998 	sub.w	r9, r9, #152	; 0x98
 8002d92:	46a0      	mov	r8, r4
 8002d94:	f1b8 0f00 	cmp.w	r8, #0
 8002d98:	da4d      	bge.n	8002e36 <__kernel_rem_pio2+0x466>
 8002d9a:	ed9f 8baf 	vldr	d8, [pc, #700]	; 8003058 <__kernel_rem_pio2+0x688>
 8002d9e:	f50d 7a90 	add.w	sl, sp, #288	; 0x120
 8002da2:	2300      	movs	r3, #0
 8002da4:	9304      	str	r3, [sp, #16]
 8002da6:	4657      	mov	r7, sl
 8002da8:	9b04      	ldr	r3, [sp, #16]
 8002daa:	ebb4 0903 	subs.w	r9, r4, r3
 8002dae:	d476      	bmi.n	8002e9e <__kernel_rem_pio2+0x4ce>
 8002db0:	4bab      	ldr	r3, [pc, #684]	; (8003060 <__kernel_rem_pio2+0x690>)
 8002db2:	461e      	mov	r6, r3
 8002db4:	ab70      	add	r3, sp, #448	; 0x1c0
 8002db6:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8002dba:	ed8d 8b06 	vstr	d8, [sp, #24]
 8002dbe:	f04f 0800 	mov.w	r8, #0
 8002dc2:	e05e      	b.n	8002e82 <__kernel_rem_pio2+0x4b2>
 8002dc4:	f1ca 0000 	rsb	r0, sl, #0
 8002dc8:	ec49 8b10 	vmov	d0, r8, r9
 8002dcc:	f000 fa98 	bl	8003300 <scalbn>
 8002dd0:	ec55 4b10 	vmov	r4, r5, d0
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	4ba3      	ldr	r3, [pc, #652]	; (8003064 <__kernel_rem_pio2+0x694>)
 8002dd8:	ee10 0a10 	vmov	r0, s0
 8002ddc:	4629      	mov	r1, r5
 8002dde:	f7fd fe31 	bl	8000a44 <__aeabi_dcmpge>
 8002de2:	b1f8      	cbz	r0, 8002e24 <__kernel_rem_pio2+0x454>
 8002de4:	2200      	movs	r2, #0
 8002de6:	4ba0      	ldr	r3, [pc, #640]	; (8003068 <__kernel_rem_pio2+0x698>)
 8002de8:	4620      	mov	r0, r4
 8002dea:	4629      	mov	r1, r5
 8002dec:	f7fd fba4 	bl	8000538 <__aeabi_dmul>
 8002df0:	f7fd fe3c 	bl	8000a6c <__aeabi_d2iz>
 8002df4:	4606      	mov	r6, r0
 8002df6:	f7fd fb39 	bl	800046c <__aeabi_i2d>
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	4b99      	ldr	r3, [pc, #612]	; (8003064 <__kernel_rem_pio2+0x694>)
 8002dfe:	f7fd fb9b 	bl	8000538 <__aeabi_dmul>
 8002e02:	460b      	mov	r3, r1
 8002e04:	4602      	mov	r2, r0
 8002e06:	4629      	mov	r1, r5
 8002e08:	4620      	mov	r0, r4
 8002e0a:	f7fd f9e1 	bl	80001d0 <__aeabi_dsub>
 8002e0e:	f7fd fe2d 	bl	8000a6c <__aeabi_d2iz>
 8002e12:	1c7c      	adds	r4, r7, #1
 8002e14:	ab0c      	add	r3, sp, #48	; 0x30
 8002e16:	f10a 0a18 	add.w	sl, sl, #24
 8002e1a:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8002e1e:	f843 6024 	str.w	r6, [r3, r4, lsl #2]
 8002e22:	e7a9      	b.n	8002d78 <__kernel_rem_pio2+0x3a8>
 8002e24:	4620      	mov	r0, r4
 8002e26:	4629      	mov	r1, r5
 8002e28:	f7fd fe20 	bl	8000a6c <__aeabi_d2iz>
 8002e2c:	ab0c      	add	r3, sp, #48	; 0x30
 8002e2e:	463c      	mov	r4, r7
 8002e30:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 8002e34:	e7a0      	b.n	8002d78 <__kernel_rem_pio2+0x3a8>
 8002e36:	ab0c      	add	r3, sp, #48	; 0x30
 8002e38:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8002e3c:	f7fd fb16 	bl	800046c <__aeabi_i2d>
 8002e40:	4632      	mov	r2, r6
 8002e42:	463b      	mov	r3, r7
 8002e44:	f7fd fb78 	bl	8000538 <__aeabi_dmul>
 8002e48:	2200      	movs	r2, #0
 8002e4a:	e969 0102 	strd	r0, r1, [r9, #-8]!
 8002e4e:	4b86      	ldr	r3, [pc, #536]	; (8003068 <__kernel_rem_pio2+0x698>)
 8002e50:	4630      	mov	r0, r6
 8002e52:	4639      	mov	r1, r7
 8002e54:	f7fd fb70 	bl	8000538 <__aeabi_dmul>
 8002e58:	f108 38ff 	add.w	r8, r8, #4294967295
 8002e5c:	4606      	mov	r6, r0
 8002e5e:	460f      	mov	r7, r1
 8002e60:	e798      	b.n	8002d94 <__kernel_rem_pio2+0x3c4>
 8002e62:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8002e66:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 8002e6a:	f7fd fb65 	bl	8000538 <__aeabi_dmul>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	460b      	mov	r3, r1
 8002e72:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8002e76:	f7fd f9ad 	bl	80001d4 <__adddf3>
 8002e7a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8002e7e:	f108 0801 	add.w	r8, r8, #1
 8002e82:	9b00      	ldr	r3, [sp, #0]
 8002e84:	4598      	cmp	r8, r3
 8002e86:	dc02      	bgt.n	8002e8e <__kernel_rem_pio2+0x4be>
 8002e88:	9b04      	ldr	r3, [sp, #16]
 8002e8a:	4598      	cmp	r8, r3
 8002e8c:	dde9      	ble.n	8002e62 <__kernel_rem_pio2+0x492>
 8002e8e:	9b04      	ldr	r3, [sp, #16]
 8002e90:	ed9d 7b06 	vldr	d7, [sp, #24]
 8002e94:	3301      	adds	r3, #1
 8002e96:	ecaa 7b02 	vstmia	sl!, {d7}
 8002e9a:	9304      	str	r3, [sp, #16]
 8002e9c:	e784      	b.n	8002da8 <__kernel_rem_pio2+0x3d8>
 8002e9e:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8002ea0:	2b03      	cmp	r3, #3
 8002ea2:	d85d      	bhi.n	8002f60 <__kernel_rem_pio2+0x590>
 8002ea4:	e8df f003 	tbb	[pc, r3]
 8002ea8:	0226264b 	.word	0x0226264b
 8002eac:	ab98      	add	r3, sp, #608	; 0x260
 8002eae:	441d      	add	r5, r3
 8002eb0:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8002eb4:	462e      	mov	r6, r5
 8002eb6:	46a2      	mov	sl, r4
 8002eb8:	f1ba 0f00 	cmp.w	sl, #0
 8002ebc:	dc6e      	bgt.n	8002f9c <__kernel_rem_pio2+0x5cc>
 8002ebe:	462e      	mov	r6, r5
 8002ec0:	46a2      	mov	sl, r4
 8002ec2:	f1ba 0f01 	cmp.w	sl, #1
 8002ec6:	f300 808a 	bgt.w	8002fde <__kernel_rem_pio2+0x60e>
 8002eca:	2000      	movs	r0, #0
 8002ecc:	2100      	movs	r1, #0
 8002ece:	2c01      	cmp	r4, #1
 8002ed0:	f300 80a6 	bgt.w	8003020 <__kernel_rem_pio2+0x650>
 8002ed4:	f1bb 0f00 	cmp.w	fp, #0
 8002ed8:	f040 80a8 	bne.w	800302c <__kernel_rem_pio2+0x65c>
 8002edc:	e9dd 2348 	ldrd	r2, r3, [sp, #288]	; 0x120
 8002ee0:	9c02      	ldr	r4, [sp, #8]
 8002ee2:	e9c4 2300 	strd	r2, r3, [r4]
 8002ee6:	e9dd 234a 	ldrd	r2, r3, [sp, #296]	; 0x128
 8002eea:	e9c4 0104 	strd	r0, r1, [r4, #16]
 8002eee:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8002ef2:	e035      	b.n	8002f60 <__kernel_rem_pio2+0x590>
 8002ef4:	3508      	adds	r5, #8
 8002ef6:	ab48      	add	r3, sp, #288	; 0x120
 8002ef8:	441d      	add	r5, r3
 8002efa:	4626      	mov	r6, r4
 8002efc:	2000      	movs	r0, #0
 8002efe:	2100      	movs	r1, #0
 8002f00:	2e00      	cmp	r6, #0
 8002f02:	da3c      	bge.n	8002f7e <__kernel_rem_pio2+0x5ae>
 8002f04:	f1bb 0f00 	cmp.w	fp, #0
 8002f08:	d03f      	beq.n	8002f8a <__kernel_rem_pio2+0x5ba>
 8002f0a:	4602      	mov	r2, r0
 8002f0c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002f10:	9d02      	ldr	r5, [sp, #8]
 8002f12:	e9c5 2300 	strd	r2, r3, [r5]
 8002f16:	4602      	mov	r2, r0
 8002f18:	460b      	mov	r3, r1
 8002f1a:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8002f1e:	f7fd f957 	bl	80001d0 <__aeabi_dsub>
 8002f22:	ae4a      	add	r6, sp, #296	; 0x128
 8002f24:	2501      	movs	r5, #1
 8002f26:	42ac      	cmp	r4, r5
 8002f28:	da32      	bge.n	8002f90 <__kernel_rem_pio2+0x5c0>
 8002f2a:	f1bb 0f00 	cmp.w	fp, #0
 8002f2e:	d002      	beq.n	8002f36 <__kernel_rem_pio2+0x566>
 8002f30:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002f34:	4619      	mov	r1, r3
 8002f36:	9b02      	ldr	r3, [sp, #8]
 8002f38:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8002f3c:	e010      	b.n	8002f60 <__kernel_rem_pio2+0x590>
 8002f3e:	ab98      	add	r3, sp, #608	; 0x260
 8002f40:	441d      	add	r5, r3
 8002f42:	f5a5 759c 	sub.w	r5, r5, #312	; 0x138
 8002f46:	2000      	movs	r0, #0
 8002f48:	2100      	movs	r1, #0
 8002f4a:	2c00      	cmp	r4, #0
 8002f4c:	da11      	bge.n	8002f72 <__kernel_rem_pio2+0x5a2>
 8002f4e:	f1bb 0f00 	cmp.w	fp, #0
 8002f52:	d002      	beq.n	8002f5a <__kernel_rem_pio2+0x58a>
 8002f54:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8002f58:	4619      	mov	r1, r3
 8002f5a:	9b02      	ldr	r3, [sp, #8]
 8002f5c:	e9c3 0100 	strd	r0, r1, [r3]
 8002f60:	9b03      	ldr	r3, [sp, #12]
 8002f62:	f003 0007 	and.w	r0, r3, #7
 8002f66:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8002f6a:	ecbd 8b02 	vpop	{d8}
 8002f6e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002f72:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8002f76:	f7fd f92d 	bl	80001d4 <__adddf3>
 8002f7a:	3c01      	subs	r4, #1
 8002f7c:	e7e5      	b.n	8002f4a <__kernel_rem_pio2+0x57a>
 8002f7e:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8002f82:	f7fd f927 	bl	80001d4 <__adddf3>
 8002f86:	3e01      	subs	r6, #1
 8002f88:	e7ba      	b.n	8002f00 <__kernel_rem_pio2+0x530>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	e7bf      	b.n	8002f10 <__kernel_rem_pio2+0x540>
 8002f90:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8002f94:	f7fd f91e 	bl	80001d4 <__adddf3>
 8002f98:	3501      	adds	r5, #1
 8002f9a:	e7c4      	b.n	8002f26 <__kernel_rem_pio2+0x556>
 8002f9c:	ed16 7b02 	vldr	d7, [r6, #-8]
 8002fa0:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8002fa4:	ec53 2b17 	vmov	r2, r3, d7
 8002fa8:	4640      	mov	r0, r8
 8002faa:	4649      	mov	r1, r9
 8002fac:	ed8d 7b00 	vstr	d7, [sp]
 8002fb0:	f7fd f910 	bl	80001d4 <__adddf3>
 8002fb4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	4640      	mov	r0, r8
 8002fbe:	4649      	mov	r1, r9
 8002fc0:	f7fd f906 	bl	80001d0 <__aeabi_dsub>
 8002fc4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8002fc8:	f7fd f904 	bl	80001d4 <__adddf3>
 8002fcc:	ed9d 7b04 	vldr	d7, [sp, #16]
 8002fd0:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8002fd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 8002fd8:	ed06 7b02 	vstr	d7, [r6, #-8]
 8002fdc:	e76c      	b.n	8002eb8 <__kernel_rem_pio2+0x4e8>
 8002fde:	ed16 7b02 	vldr	d7, [r6, #-8]
 8002fe2:	e956 8904 	ldrd	r8, r9, [r6, #-16]
 8002fe6:	ec53 2b17 	vmov	r2, r3, d7
 8002fea:	4640      	mov	r0, r8
 8002fec:	4649      	mov	r1, r9
 8002fee:	ed8d 7b00 	vstr	d7, [sp]
 8002ff2:	f7fd f8ef 	bl	80001d4 <__adddf3>
 8002ff6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4640      	mov	r0, r8
 8003000:	4649      	mov	r1, r9
 8003002:	f7fd f8e5 	bl	80001d0 <__aeabi_dsub>
 8003006:	e9dd 2300 	ldrd	r2, r3, [sp]
 800300a:	f7fd f8e3 	bl	80001d4 <__adddf3>
 800300e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8003012:	e966 0102 	strd	r0, r1, [r6, #-8]!
 8003016:	f10a 3aff 	add.w	sl, sl, #4294967295
 800301a:	ed06 7b02 	vstr	d7, [r6, #-8]
 800301e:	e750      	b.n	8002ec2 <__kernel_rem_pio2+0x4f2>
 8003020:	e975 2302 	ldrd	r2, r3, [r5, #-8]!
 8003024:	f7fd f8d6 	bl	80001d4 <__adddf3>
 8003028:	3c01      	subs	r4, #1
 800302a:	e750      	b.n	8002ece <__kernel_rem_pio2+0x4fe>
 800302c:	9a02      	ldr	r2, [sp, #8]
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	6013      	str	r3, [r2, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6110      	str	r0, [r2, #16]
 8003036:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800303a:	6053      	str	r3, [r2, #4]
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	6093      	str	r3, [r2, #8]
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8003046:	60d3      	str	r3, [r2, #12]
 8003048:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800304c:	6153      	str	r3, [r2, #20]
 800304e:	e787      	b.n	8002f60 <__kernel_rem_pio2+0x590>
 8003050:	00000000 	.word	0x00000000
 8003054:	3ff00000 	.word	0x3ff00000
	...
 8003060:	080035f0 	.word	0x080035f0
 8003064:	41700000 	.word	0x41700000
 8003068:	3e700000 	.word	0x3e700000
 800306c:	00000000 	.word	0x00000000

08003070 <__kernel_sin>:
 8003070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003074:	ec55 4b10 	vmov	r4, r5, d0
 8003078:	b085      	sub	sp, #20
 800307a:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800307e:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8003082:	ed8d 1b00 	vstr	d1, [sp]
 8003086:	9002      	str	r0, [sp, #8]
 8003088:	da06      	bge.n	8003098 <__kernel_sin+0x28>
 800308a:	ee10 0a10 	vmov	r0, s0
 800308e:	4629      	mov	r1, r5
 8003090:	f7fd fcec 	bl	8000a6c <__aeabi_d2iz>
 8003094:	2800      	cmp	r0, #0
 8003096:	d051      	beq.n	800313c <__kernel_sin+0xcc>
 8003098:	4622      	mov	r2, r4
 800309a:	462b      	mov	r3, r5
 800309c:	4620      	mov	r0, r4
 800309e:	4629      	mov	r1, r5
 80030a0:	f7fd fa4a 	bl	8000538 <__aeabi_dmul>
 80030a4:	4682      	mov	sl, r0
 80030a6:	468b      	mov	fp, r1
 80030a8:	4602      	mov	r2, r0
 80030aa:	460b      	mov	r3, r1
 80030ac:	4620      	mov	r0, r4
 80030ae:	4629      	mov	r1, r5
 80030b0:	f7fd fa42 	bl	8000538 <__aeabi_dmul>
 80030b4:	a341      	add	r3, pc, #260	; (adr r3, 80031bc <__kernel_sin+0x14c>)
 80030b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030ba:	4680      	mov	r8, r0
 80030bc:	4689      	mov	r9, r1
 80030be:	4650      	mov	r0, sl
 80030c0:	4659      	mov	r1, fp
 80030c2:	f7fd fa39 	bl	8000538 <__aeabi_dmul>
 80030c6:	a33f      	add	r3, pc, #252	; (adr r3, 80031c4 <__kernel_sin+0x154>)
 80030c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030cc:	f7fd f880 	bl	80001d0 <__aeabi_dsub>
 80030d0:	4652      	mov	r2, sl
 80030d2:	465b      	mov	r3, fp
 80030d4:	f7fd fa30 	bl	8000538 <__aeabi_dmul>
 80030d8:	a33c      	add	r3, pc, #240	; (adr r3, 80031cc <__kernel_sin+0x15c>)
 80030da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030de:	f7fd f879 	bl	80001d4 <__adddf3>
 80030e2:	4652      	mov	r2, sl
 80030e4:	465b      	mov	r3, fp
 80030e6:	f7fd fa27 	bl	8000538 <__aeabi_dmul>
 80030ea:	a33a      	add	r3, pc, #232	; (adr r3, 80031d4 <__kernel_sin+0x164>)
 80030ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030f0:	f7fd f86e 	bl	80001d0 <__aeabi_dsub>
 80030f4:	4652      	mov	r2, sl
 80030f6:	465b      	mov	r3, fp
 80030f8:	f7fd fa1e 	bl	8000538 <__aeabi_dmul>
 80030fc:	a337      	add	r3, pc, #220	; (adr r3, 80031dc <__kernel_sin+0x16c>)
 80030fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003102:	f7fd f867 	bl	80001d4 <__adddf3>
 8003106:	9b02      	ldr	r3, [sp, #8]
 8003108:	4606      	mov	r6, r0
 800310a:	460f      	mov	r7, r1
 800310c:	b9db      	cbnz	r3, 8003146 <__kernel_sin+0xd6>
 800310e:	4602      	mov	r2, r0
 8003110:	460b      	mov	r3, r1
 8003112:	4650      	mov	r0, sl
 8003114:	4659      	mov	r1, fp
 8003116:	f7fd fa0f 	bl	8000538 <__aeabi_dmul>
 800311a:	a325      	add	r3, pc, #148	; (adr r3, 80031b0 <__kernel_sin+0x140>)
 800311c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003120:	f7fd f856 	bl	80001d0 <__aeabi_dsub>
 8003124:	4642      	mov	r2, r8
 8003126:	464b      	mov	r3, r9
 8003128:	f7fd fa06 	bl	8000538 <__aeabi_dmul>
 800312c:	4602      	mov	r2, r0
 800312e:	460b      	mov	r3, r1
 8003130:	4620      	mov	r0, r4
 8003132:	4629      	mov	r1, r5
 8003134:	f7fd f84e 	bl	80001d4 <__adddf3>
 8003138:	4604      	mov	r4, r0
 800313a:	460d      	mov	r5, r1
 800313c:	ec45 4b10 	vmov	d0, r4, r5
 8003140:	b005      	add	sp, #20
 8003142:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003146:	2200      	movs	r2, #0
 8003148:	4b1b      	ldr	r3, [pc, #108]	; (80031b8 <__kernel_sin+0x148>)
 800314a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800314e:	f7fd f9f3 	bl	8000538 <__aeabi_dmul>
 8003152:	4632      	mov	r2, r6
 8003154:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003158:	463b      	mov	r3, r7
 800315a:	4640      	mov	r0, r8
 800315c:	4649      	mov	r1, r9
 800315e:	f7fd f9eb 	bl	8000538 <__aeabi_dmul>
 8003162:	4602      	mov	r2, r0
 8003164:	460b      	mov	r3, r1
 8003166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800316a:	f7fd f831 	bl	80001d0 <__aeabi_dsub>
 800316e:	4652      	mov	r2, sl
 8003170:	465b      	mov	r3, fp
 8003172:	f7fd f9e1 	bl	8000538 <__aeabi_dmul>
 8003176:	e9dd 2300 	ldrd	r2, r3, [sp]
 800317a:	f7fd f829 	bl	80001d0 <__aeabi_dsub>
 800317e:	a30c      	add	r3, pc, #48	; (adr r3, 80031b0 <__kernel_sin+0x140>)
 8003180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003184:	4606      	mov	r6, r0
 8003186:	460f      	mov	r7, r1
 8003188:	4640      	mov	r0, r8
 800318a:	4649      	mov	r1, r9
 800318c:	f7fd f9d4 	bl	8000538 <__aeabi_dmul>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4630      	mov	r0, r6
 8003196:	4639      	mov	r1, r7
 8003198:	f7fd f81c 	bl	80001d4 <__adddf3>
 800319c:	4602      	mov	r2, r0
 800319e:	460b      	mov	r3, r1
 80031a0:	4620      	mov	r0, r4
 80031a2:	4629      	mov	r1, r5
 80031a4:	f7fd f814 	bl	80001d0 <__aeabi_dsub>
 80031a8:	e7c6      	b.n	8003138 <__kernel_sin+0xc8>
 80031aa:	bf00      	nop
 80031ac:	f3af 8000 	nop.w
 80031b0:	55555549 	.word	0x55555549
 80031b4:	3fc55555 	.word	0x3fc55555
 80031b8:	3fe00000 	.word	0x3fe00000
 80031bc:	5acfd57c 	.word	0x5acfd57c
 80031c0:	3de5d93a 	.word	0x3de5d93a
 80031c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80031c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80031cc:	57b1fe7d 	.word	0x57b1fe7d
 80031d0:	3ec71de3 	.word	0x3ec71de3
 80031d4:	19c161d5 	.word	0x19c161d5
 80031d8:	3f2a01a0 	.word	0x3f2a01a0
 80031dc:	1110f8a6 	.word	0x1110f8a6
 80031e0:	3f811111 	.word	0x3f811111

080031e4 <fabs>:
 80031e4:	ec53 2b10 	vmov	r2, r3, d0
 80031e8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80031ec:	ec43 2b10 	vmov	d0, r2, r3
 80031f0:	4770      	bx	lr
 80031f2:	0000      	movs	r0, r0
 80031f4:	0000      	movs	r0, r0
	...

080031f8 <floor>:
 80031f8:	ec51 0b10 	vmov	r0, r1, d0
 80031fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003200:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8003204:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8003208:	2e13      	cmp	r6, #19
 800320a:	ee10 8a10 	vmov	r8, s0
 800320e:	460c      	mov	r4, r1
 8003210:	ee10 5a10 	vmov	r5, s0
 8003214:	dc35      	bgt.n	8003282 <floor+0x8a>
 8003216:	2e00      	cmp	r6, #0
 8003218:	da17      	bge.n	800324a <floor+0x52>
 800321a:	a335      	add	r3, pc, #212	; (adr r3, 80032f0 <floor+0xf8>)
 800321c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003220:	f7fc ffd8 	bl	80001d4 <__adddf3>
 8003224:	2200      	movs	r2, #0
 8003226:	2300      	movs	r3, #0
 8003228:	f7fd fc16 	bl	8000a58 <__aeabi_dcmpgt>
 800322c:	b150      	cbz	r0, 8003244 <floor+0x4c>
 800322e:	2c00      	cmp	r4, #0
 8003230:	da5a      	bge.n	80032e8 <floor+0xf0>
 8003232:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003236:	ea53 0308 	orrs.w	r3, r3, r8
 800323a:	4b2f      	ldr	r3, [pc, #188]	; (80032f8 <floor+0x100>)
 800323c:	f04f 0500 	mov.w	r5, #0
 8003240:	bf18      	it	ne
 8003242:	461c      	movne	r4, r3
 8003244:	4621      	mov	r1, r4
 8003246:	4628      	mov	r0, r5
 8003248:	e025      	b.n	8003296 <floor+0x9e>
 800324a:	4f2c      	ldr	r7, [pc, #176]	; (80032fc <floor+0x104>)
 800324c:	4137      	asrs	r7, r6
 800324e:	ea01 0307 	and.w	r3, r1, r7
 8003252:	4303      	orrs	r3, r0
 8003254:	d01f      	beq.n	8003296 <floor+0x9e>
 8003256:	a326      	add	r3, pc, #152	; (adr r3, 80032f0 <floor+0xf8>)
 8003258:	e9d3 2300 	ldrd	r2, r3, [r3]
 800325c:	f7fc ffba 	bl	80001d4 <__adddf3>
 8003260:	2200      	movs	r2, #0
 8003262:	2300      	movs	r3, #0
 8003264:	f7fd fbf8 	bl	8000a58 <__aeabi_dcmpgt>
 8003268:	2800      	cmp	r0, #0
 800326a:	d0eb      	beq.n	8003244 <floor+0x4c>
 800326c:	2c00      	cmp	r4, #0
 800326e:	bfbe      	ittt	lt
 8003270:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8003274:	fa43 f606 	asrlt.w	r6, r3, r6
 8003278:	19a4      	addlt	r4, r4, r6
 800327a:	ea24 0407 	bic.w	r4, r4, r7
 800327e:	2500      	movs	r5, #0
 8003280:	e7e0      	b.n	8003244 <floor+0x4c>
 8003282:	2e33      	cmp	r6, #51	; 0x33
 8003284:	dd0b      	ble.n	800329e <floor+0xa6>
 8003286:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800328a:	d104      	bne.n	8003296 <floor+0x9e>
 800328c:	ee10 2a10 	vmov	r2, s0
 8003290:	460b      	mov	r3, r1
 8003292:	f7fc ff9f 	bl	80001d4 <__adddf3>
 8003296:	ec41 0b10 	vmov	d0, r0, r1
 800329a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800329e:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80032a2:	f04f 33ff 	mov.w	r3, #4294967295
 80032a6:	fa23 f707 	lsr.w	r7, r3, r7
 80032aa:	4238      	tst	r0, r7
 80032ac:	d0f3      	beq.n	8003296 <floor+0x9e>
 80032ae:	a310      	add	r3, pc, #64	; (adr r3, 80032f0 <floor+0xf8>)
 80032b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032b4:	f7fc ff8e 	bl	80001d4 <__adddf3>
 80032b8:	2200      	movs	r2, #0
 80032ba:	2300      	movs	r3, #0
 80032bc:	f7fd fbcc 	bl	8000a58 <__aeabi_dcmpgt>
 80032c0:	2800      	cmp	r0, #0
 80032c2:	d0bf      	beq.n	8003244 <floor+0x4c>
 80032c4:	2c00      	cmp	r4, #0
 80032c6:	da02      	bge.n	80032ce <floor+0xd6>
 80032c8:	2e14      	cmp	r6, #20
 80032ca:	d103      	bne.n	80032d4 <floor+0xdc>
 80032cc:	3401      	adds	r4, #1
 80032ce:	ea25 0507 	bic.w	r5, r5, r7
 80032d2:	e7b7      	b.n	8003244 <floor+0x4c>
 80032d4:	2301      	movs	r3, #1
 80032d6:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80032da:	fa03 f606 	lsl.w	r6, r3, r6
 80032de:	4435      	add	r5, r6
 80032e0:	45a8      	cmp	r8, r5
 80032e2:	bf88      	it	hi
 80032e4:	18e4      	addhi	r4, r4, r3
 80032e6:	e7f2      	b.n	80032ce <floor+0xd6>
 80032e8:	2500      	movs	r5, #0
 80032ea:	462c      	mov	r4, r5
 80032ec:	e7aa      	b.n	8003244 <floor+0x4c>
 80032ee:	bf00      	nop
 80032f0:	8800759c 	.word	0x8800759c
 80032f4:	7e37e43c 	.word	0x7e37e43c
 80032f8:	bff00000 	.word	0xbff00000
 80032fc:	000fffff 	.word	0x000fffff

08003300 <scalbn>:
 8003300:	b570      	push	{r4, r5, r6, lr}
 8003302:	ec55 4b10 	vmov	r4, r5, d0
 8003306:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800330a:	4606      	mov	r6, r0
 800330c:	462b      	mov	r3, r5
 800330e:	b9b2      	cbnz	r2, 800333e <scalbn+0x3e>
 8003310:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8003314:	4323      	orrs	r3, r4
 8003316:	d03c      	beq.n	8003392 <scalbn+0x92>
 8003318:	2200      	movs	r2, #0
 800331a:	4b33      	ldr	r3, [pc, #204]	; (80033e8 <scalbn+0xe8>)
 800331c:	4629      	mov	r1, r5
 800331e:	ee10 0a10 	vmov	r0, s0
 8003322:	f7fd f909 	bl	8000538 <__aeabi_dmul>
 8003326:	4a31      	ldr	r2, [pc, #196]	; (80033ec <scalbn+0xec>)
 8003328:	4296      	cmp	r6, r2
 800332a:	4604      	mov	r4, r0
 800332c:	460d      	mov	r5, r1
 800332e:	460b      	mov	r3, r1
 8003330:	da13      	bge.n	800335a <scalbn+0x5a>
 8003332:	a329      	add	r3, pc, #164	; (adr r3, 80033d8 <scalbn+0xd8>)
 8003334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003338:	f7fd f8fe 	bl	8000538 <__aeabi_dmul>
 800333c:	e00a      	b.n	8003354 <scalbn+0x54>
 800333e:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003342:	428a      	cmp	r2, r1
 8003344:	d10c      	bne.n	8003360 <scalbn+0x60>
 8003346:	ee10 2a10 	vmov	r2, s0
 800334a:	462b      	mov	r3, r5
 800334c:	4620      	mov	r0, r4
 800334e:	4629      	mov	r1, r5
 8003350:	f7fc ff40 	bl	80001d4 <__adddf3>
 8003354:	4604      	mov	r4, r0
 8003356:	460d      	mov	r5, r1
 8003358:	e01b      	b.n	8003392 <scalbn+0x92>
 800335a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800335e:	3a36      	subs	r2, #54	; 0x36
 8003360:	4432      	add	r2, r6
 8003362:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8003366:	428a      	cmp	r2, r1
 8003368:	dd0b      	ble.n	8003382 <scalbn+0x82>
 800336a:	ec45 4b11 	vmov	d1, r4, r5
 800336e:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 80033e0 <scalbn+0xe0>
 8003372:	f000 f83f 	bl	80033f4 <copysign>
 8003376:	a31a      	add	r3, pc, #104	; (adr r3, 80033e0 <scalbn+0xe0>)
 8003378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800337c:	ec51 0b10 	vmov	r0, r1, d0
 8003380:	e7da      	b.n	8003338 <scalbn+0x38>
 8003382:	2a00      	cmp	r2, #0
 8003384:	dd08      	ble.n	8003398 <scalbn+0x98>
 8003386:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800338a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800338e:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8003392:	ec45 4b10 	vmov	d0, r4, r5
 8003396:	bd70      	pop	{r4, r5, r6, pc}
 8003398:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800339c:	da0d      	bge.n	80033ba <scalbn+0xba>
 800339e:	f24c 3350 	movw	r3, #50000	; 0xc350
 80033a2:	429e      	cmp	r6, r3
 80033a4:	ec45 4b11 	vmov	d1, r4, r5
 80033a8:	dce1      	bgt.n	800336e <scalbn+0x6e>
 80033aa:	ed9f 0b0b 	vldr	d0, [pc, #44]	; 80033d8 <scalbn+0xd8>
 80033ae:	f000 f821 	bl	80033f4 <copysign>
 80033b2:	a309      	add	r3, pc, #36	; (adr r3, 80033d8 <scalbn+0xd8>)
 80033b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033b8:	e7e0      	b.n	800337c <scalbn+0x7c>
 80033ba:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80033be:	3236      	adds	r2, #54	; 0x36
 80033c0:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80033c4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80033c8:	4620      	mov	r0, r4
 80033ca:	4629      	mov	r1, r5
 80033cc:	2200      	movs	r2, #0
 80033ce:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <scalbn+0xf0>)
 80033d0:	e7b2      	b.n	8003338 <scalbn+0x38>
 80033d2:	bf00      	nop
 80033d4:	f3af 8000 	nop.w
 80033d8:	c2f8f359 	.word	0xc2f8f359
 80033dc:	01a56e1f 	.word	0x01a56e1f
 80033e0:	8800759c 	.word	0x8800759c
 80033e4:	7e37e43c 	.word	0x7e37e43c
 80033e8:	43500000 	.word	0x43500000
 80033ec:	ffff3cb0 	.word	0xffff3cb0
 80033f0:	3c900000 	.word	0x3c900000

080033f4 <copysign>:
 80033f4:	ec53 2b10 	vmov	r2, r3, d0
 80033f8:	ee11 0a90 	vmov	r0, s3
 80033fc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8003400:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8003404:	ea41 0300 	orr.w	r3, r1, r0
 8003408:	ec43 2b10 	vmov	d0, r2, r3
 800340c:	4770      	bx	lr
	...

08003410 <_init>:
 8003410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003412:	bf00      	nop
 8003414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003416:	bc08      	pop	{r3}
 8003418:	469e      	mov	lr, r3
 800341a:	4770      	bx	lr

0800341c <_fini>:
 800341c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341e:	bf00      	nop
 8003420:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003422:	bc08      	pop	{r3}
 8003424:	469e      	mov	lr, r3
 8003426:	4770      	bx	lr
