
F303_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006794  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c0  08006928  08006928  00016928  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069e8  080069e8  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  080069e8  080069e8  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  080069e8  080069e8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069e8  080069e8  000169e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069ec  080069ec  000169ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080069f0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000074  08006a64  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  08006a64  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f93e  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001ef7  00000000  00000000  0002f9e2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e8  00000000  00000000  000318e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000710  00000000  00000000  000320c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018a97  00000000  00000000  000327d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009379  00000000  00000000  0004b26f  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086f95  00000000  00000000  000545e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db57d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002778  00000000  00000000  000db5f8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800690c 	.word	0x0800690c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800690c 	.word	0x0800690c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2iz>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d215      	bcs.n	8000b7e <__aeabi_d2iz+0x36>
 8000b52:	d511      	bpl.n	8000b78 <__aeabi_d2iz+0x30>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d912      	bls.n	8000b84 <__aeabi_d2iz+0x3c>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b6e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b72:	bf18      	it	ne
 8000b74:	4240      	negne	r0, r0
 8000b76:	4770      	bx	lr
 8000b78:	f04f 0000 	mov.w	r0, #0
 8000b7c:	4770      	bx	lr
 8000b7e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b82:	d105      	bne.n	8000b90 <__aeabi_d2iz+0x48>
 8000b84:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	bf08      	it	eq
 8000b8a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b8e:	4770      	bx	lr
 8000b90:	f04f 0000 	mov.w	r0, #0
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_d2uiz>:
 8000b98:	004a      	lsls	r2, r1, #1
 8000b9a:	d211      	bcs.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d211      	bcs.n	8000bc6 <__aeabi_d2uiz+0x2e>
 8000ba2:	d50d      	bpl.n	8000bc0 <__aeabi_d2uiz+0x28>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d40e      	bmi.n	8000bcc <__aeabi_d2uiz+0x34>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	fa23 f002 	lsr.w	r0, r3, r2
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bca:	d102      	bne.n	8000bd2 <__aeabi_d2uiz+0x3a>
 8000bcc:	f04f 30ff 	mov.w	r0, #4294967295
 8000bd0:	4770      	bx	lr
 8000bd2:	f04f 0000 	mov.w	r0, #0
 8000bd6:	4770      	bx	lr

08000bd8 <__aeabi_d2f>:
 8000bd8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bdc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000be0:	bf24      	itt	cs
 8000be2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000be6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bea:	d90d      	bls.n	8000c08 <__aeabi_d2f+0x30>
 8000bec:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bf0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bf4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bf8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bfc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c00:	bf08      	it	eq
 8000c02:	f020 0001 	biceq.w	r0, r0, #1
 8000c06:	4770      	bx	lr
 8000c08:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c0c:	d121      	bne.n	8000c52 <__aeabi_d2f+0x7a>
 8000c0e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c12:	bfbc      	itt	lt
 8000c14:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c18:	4770      	bxlt	lr
 8000c1a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c1e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c22:	f1c2 0218 	rsb	r2, r2, #24
 8000c26:	f1c2 0c20 	rsb	ip, r2, #32
 8000c2a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c2e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c32:	bf18      	it	ne
 8000c34:	f040 0001 	orrne.w	r0, r0, #1
 8000c38:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c3c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c40:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c44:	ea40 000c 	orr.w	r0, r0, ip
 8000c48:	fa23 f302 	lsr.w	r3, r3, r2
 8000c4c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c50:	e7cc      	b.n	8000bec <__aeabi_d2f+0x14>
 8000c52:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c56:	d107      	bne.n	8000c68 <__aeabi_d2f+0x90>
 8000c58:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c5c:	bf1e      	ittt	ne
 8000c5e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c62:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c66:	4770      	bxne	lr
 8000c68:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c6c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c70:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c74:	4770      	bx	lr
 8000c76:	bf00      	nop

08000c78 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	; (8000ca0 <HAL_Init+0x28>)
 8000c7e:	681b      	ldr	r3, [r3, #0]
 8000c80:	4a07      	ldr	r2, [pc, #28]	; (8000ca0 <HAL_Init+0x28>)
 8000c82:	f043 0310 	orr.w	r3, r3, #16
 8000c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c88:	2003      	movs	r0, #3
 8000c8a:	f001 f971 	bl	8001f70 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c8e:	2000      	movs	r0, #0
 8000c90:	f000 f808 	bl	8000ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c94:	f003 fcba 	bl	800460c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40022000 	.word	0x40022000

08000ca4 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b082      	sub	sp, #8
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000cac:	4b12      	ldr	r3, [pc, #72]	; (8000cf8 <HAL_InitTick+0x54>)
 8000cae:	681a      	ldr	r2, [r3, #0]
 8000cb0:	4b12      	ldr	r3, [pc, #72]	; (8000cfc <HAL_InitTick+0x58>)
 8000cb2:	781b      	ldrb	r3, [r3, #0]
 8000cb4:	4619      	mov	r1, r3
 8000cb6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f001 f97b 	bl	8001fbe <HAL_SYSTICK_Config>
 8000cc8:	4603      	mov	r3, r0
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d001      	beq.n	8000cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
 8000cd0:	e00e      	b.n	8000cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	2b0f      	cmp	r3, #15
 8000cd6:	d80a      	bhi.n	8000cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cd8:	2200      	movs	r2, #0
 8000cda:	6879      	ldr	r1, [r7, #4]
 8000cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ce0:	f001 f951 	bl	8001f86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ce4:	4a06      	ldr	r2, [pc, #24]	; (8000d00 <HAL_InitTick+0x5c>)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000cea:	2300      	movs	r3, #0
 8000cec:	e000      	b.n	8000cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
}
 8000cf0:	4618      	mov	r0, r3
 8000cf2:	3708      	adds	r7, #8
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	bd80      	pop	{r7, pc}
 8000cf8:	20000008 	.word	0x20000008
 8000cfc:	20000004 	.word	0x20000004
 8000d00:	20000000 	.word	0x20000000

08000d04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d08:	4b06      	ldr	r3, [pc, #24]	; (8000d24 <HAL_IncTick+0x20>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	461a      	mov	r2, r3
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_IncTick+0x24>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	4413      	add	r3, r2
 8000d14:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <HAL_IncTick+0x24>)
 8000d16:	6013      	str	r3, [r2, #0]
}
 8000d18:	bf00      	nop
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	20000004 	.word	0x20000004
 8000d28:	2000009c 	.word	0x2000009c

08000d2c <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return uwTick;  
 8000d30:	4b03      	ldr	r3, [pc, #12]	; (8000d40 <HAL_GetTick+0x14>)
 8000d32:	681b      	ldr	r3, [r3, #0]
}
 8000d34:	4618      	mov	r0, r3
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr
 8000d3e:	bf00      	nop
 8000d40:	2000009c 	.word	0x2000009c

08000d44 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	b084      	sub	sp, #16
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d4c:	f7ff ffee 	bl	8000d2c <HAL_GetTick>
 8000d50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d5c:	d005      	beq.n	8000d6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d5e:	4b09      	ldr	r3, [pc, #36]	; (8000d84 <HAL_Delay+0x40>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	461a      	mov	r2, r3
 8000d64:	68fb      	ldr	r3, [r7, #12]
 8000d66:	4413      	add	r3, r2
 8000d68:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d6a:	bf00      	nop
 8000d6c:	f7ff ffde 	bl	8000d2c <HAL_GetTick>
 8000d70:	4602      	mov	r2, r0
 8000d72:	68bb      	ldr	r3, [r7, #8]
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	68fa      	ldr	r2, [r7, #12]
 8000d78:	429a      	cmp	r2, r3
 8000d7a:	d8f7      	bhi.n	8000d6c <HAL_Delay+0x28>
  {
  }
}
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	20000004 	.word	0x20000004

08000d88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b09c      	sub	sp, #112	; 0x70
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d90:	2300      	movs	r3, #0
 8000d92:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d101      	bne.n	8000da8 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000da4:	2301      	movs	r3, #1
 8000da6:	e170      	b.n	800108a <HAL_ADC_Init+0x302>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	691b      	ldr	r3, [r3, #16]
 8000dac:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db2:	f003 0310 	and.w	r3, r3, #16
 8000db6:	2b00      	cmp	r3, #0
 8000db8:	d176      	bne.n	8000ea8 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d152      	bne.n	8000e68 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	2200      	movs	r2, #0
 8000dcc:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f003 fc39 	bl	8004654 <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	d13b      	bne.n	8000e68 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000df0:	6878      	ldr	r0, [r7, #4]
 8000df2:	f000 fefd 	bl	8001bf0 <ADC_Disable>
 8000df6:	4603      	mov	r3, r0
 8000df8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e00:	f003 0310 	and.w	r3, r3, #16
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d12f      	bne.n	8000e68 <HAL_ADC_Init+0xe0>
 8000e08:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d12b      	bne.n	8000e68 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e14:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e18:	f023 0302 	bic.w	r3, r3, #2
 8000e1c:	f043 0202 	orr.w	r2, r3, #2
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	689a      	ldr	r2, [r3, #8]
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000e32:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	689a      	ldr	r2, [r3, #8]
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000e42:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e44:	4b93      	ldr	r3, [pc, #588]	; (8001094 <HAL_ADC_Init+0x30c>)
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	4a93      	ldr	r2, [pc, #588]	; (8001098 <HAL_ADC_Init+0x310>)
 8000e4a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e4e:	0c9a      	lsrs	r2, r3, #18
 8000e50:	4613      	mov	r3, r2
 8000e52:	009b      	lsls	r3, r3, #2
 8000e54:	4413      	add	r3, r2
 8000e56:	005b      	lsls	r3, r3, #1
 8000e58:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000e5a:	e002      	b.n	8000e62 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	3b01      	subs	r3, #1
 8000e60:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d1f9      	bne.n	8000e5c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d007      	beq.n	8000e86 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e84:	d110      	bne.n	8000ea8 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e8a:	f023 0312 	bic.w	r3, r3, #18
 8000e8e:	f043 0210 	orr.w	r2, r3, #16
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e9a:	f043 0201 	orr.w	r2, r3, #1
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000ea2:	2301      	movs	r3, #1
 8000ea4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000eac:	f003 0310 	and.w	r3, r3, #16
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	f040 80dd 	bne.w	8001070 <HAL_ADC_Init+0x2e8>
 8000eb6:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	f040 80d8 	bne.w	8001070 <HAL_ADC_Init+0x2e8>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	689b      	ldr	r3, [r3, #8]
 8000ec6:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f040 80d0 	bne.w	8001070 <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ed4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000ed8:	f043 0202 	orr.w	r2, r3, #2
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000ee0:	4b6e      	ldr	r3, [pc, #440]	; (800109c <HAL_ADC_Init+0x314>)
 8000ee2:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000eec:	d102      	bne.n	8000ef4 <HAL_ADC_Init+0x16c>
 8000eee:	4b6c      	ldr	r3, [pc, #432]	; (80010a0 <HAL_ADC_Init+0x318>)
 8000ef0:	613b      	str	r3, [r7, #16]
 8000ef2:	e002      	b.n	8000efa <HAL_ADC_Init+0x172>
 8000ef4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ef8:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	689b      	ldr	r3, [r3, #8]
 8000f00:	f003 0303 	and.w	r3, r3, #3
 8000f04:	2b01      	cmp	r3, #1
 8000f06:	d108      	bne.n	8000f1a <HAL_ADC_Init+0x192>
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f003 0301 	and.w	r3, r3, #1
 8000f12:	2b01      	cmp	r3, #1
 8000f14:	d101      	bne.n	8000f1a <HAL_ADC_Init+0x192>
 8000f16:	2301      	movs	r3, #1
 8000f18:	e000      	b.n	8000f1c <HAL_ADC_Init+0x194>
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d11c      	bne.n	8000f5a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f20:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000f22:	2b00      	cmp	r3, #0
 8000f24:	d010      	beq.n	8000f48 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000f26:	693b      	ldr	r3, [r7, #16]
 8000f28:	689b      	ldr	r3, [r3, #8]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d107      	bne.n	8000f42 <HAL_ADC_Init+0x1ba>
 8000f32:	693b      	ldr	r3, [r7, #16]
 8000f34:	681b      	ldr	r3, [r3, #0]
 8000f36:	f003 0301 	and.w	r3, r3, #1
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d101      	bne.n	8000f42 <HAL_ADC_Init+0x1ba>
 8000f3e:	2301      	movs	r3, #1
 8000f40:	e000      	b.n	8000f44 <HAL_ADC_Init+0x1bc>
 8000f42:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d108      	bne.n	8000f5a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f4a:	689b      	ldr	r3, [r3, #8]
 8000f4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	431a      	orrs	r2, r3
 8000f56:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f58:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	69db      	ldr	r3, [r3, #28]
 8000f5e:	035b      	lsls	r3, r3, #13
 8000f60:	687a      	ldr	r2, [r7, #4]
 8000f62:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000f64:	2a01      	cmp	r2, #1
 8000f66:	d002      	beq.n	8000f6e <HAL_ADC_Init+0x1e6>
 8000f68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f6c:	e000      	b.n	8000f70 <HAL_ADC_Init+0x1e8>
 8000f6e:	2200      	movs	r2, #0
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
 8000f76:	431a      	orrs	r2, r3
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	689b      	ldr	r3, [r3, #8]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f80:	4313      	orrs	r3, r2
 8000f82:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f88:	2b01      	cmp	r3, #1
 8000f8a:	d11b      	bne.n	8000fc4 <HAL_ADC_Init+0x23c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	69db      	ldr	r3, [r3, #28]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d109      	bne.n	8000fa8 <HAL_ADC_Init+0x220>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f94:	687b      	ldr	r3, [r7, #4]
 8000f96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f98:	3b01      	subs	r3, #1
 8000f9a:	045a      	lsls	r2, r3, #17
 8000f9c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f9e:	4313      	orrs	r3, r2
 8000fa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fa4:	66bb      	str	r3, [r7, #104]	; 0x68
 8000fa6:	e00d      	b.n	8000fc4 <HAL_ADC_Init+0x23c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fac:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000fb0:	f043 0220 	orr.w	r2, r3, #32
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000fbc:	f043 0201 	orr.w	r2, r3, #1
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fc8:	2b01      	cmp	r3, #1
 8000fca:	d007      	beq.n	8000fdc <HAL_ADC_Init+0x254>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd4:	4313      	orrs	r3, r2
 8000fd6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d113      	bne.n	8001012 <HAL_ADC_Init+0x28a>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	68db      	ldr	r3, [r3, #12]
 8000ff0:	687a      	ldr	r2, [r7, #4]
 8000ff2:	6812      	ldr	r2, [r2, #0]
 8000ff4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000ff8:	f023 0302 	bic.w	r3, r3, #2
 8000ffc:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	699b      	ldr	r3, [r3, #24]
 8001002:	039a      	lsls	r2, r3, #14
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001008:	005b      	lsls	r3, r3, #1
 800100a:	4313      	orrs	r3, r2
 800100c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800100e:	4313      	orrs	r3, r2
 8001010:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	68da      	ldr	r2, [r3, #12]
 8001018:	4b22      	ldr	r3, [pc, #136]	; (80010a4 <HAL_ADC_Init+0x31c>)
 800101a:	4013      	ands	r3, r2
 800101c:	687a      	ldr	r2, [r7, #4]
 800101e:	6812      	ldr	r2, [r2, #0]
 8001020:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001022:	430b      	orrs	r3, r1
 8001024:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	691b      	ldr	r3, [r3, #16]
 800102a:	2b01      	cmp	r3, #1
 800102c:	d10c      	bne.n	8001048 <HAL_ADC_Init+0x2c0>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001034:	f023 010f 	bic.w	r1, r3, #15
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	6a1b      	ldr	r3, [r3, #32]
 800103c:	1e5a      	subs	r2, r3, #1
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	430a      	orrs	r2, r1
 8001044:	631a      	str	r2, [r3, #48]	; 0x30
 8001046:	e007      	b.n	8001058 <HAL_ADC_Init+0x2d0>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f022 020f 	bic.w	r2, r2, #15
 8001056:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2200      	movs	r2, #0
 800105c:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001062:	f023 0303 	bic.w	r3, r3, #3
 8001066:	f043 0201 	orr.w	r2, r3, #1
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	645a      	str	r2, [r3, #68]	; 0x44
 800106e:	e00a      	b.n	8001086 <HAL_ADC_Init+0x2fe>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001074:	f023 0312 	bic.w	r3, r3, #18
 8001078:	f043 0210 	orr.w	r2, r3, #16
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001080:	2301      	movs	r3, #1
 8001082:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001086:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800108a:	4618      	mov	r0, r3
 800108c:	3770      	adds	r7, #112	; 0x70
 800108e:	46bd      	mov	sp, r7
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	20000008 	.word	0x20000008
 8001098:	431bde83 	.word	0x431bde83
 800109c:	50000300 	.word	0x50000300
 80010a0:	50000100 	.word	0x50000100
 80010a4:	fff0c007 	.word	0xfff0c007

080010a8 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 0304 	and.w	r3, r3, #4
 80010be:	2b00      	cmp	r3, #0
 80010c0:	f040 809c 	bne.w	80011fc <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80010ca:	2b01      	cmp	r3, #1
 80010cc:	d101      	bne.n	80010d2 <HAL_ADC_Start+0x2a>
 80010ce:	2302      	movs	r3, #2
 80010d0:	e097      	b.n	8001202 <HAL_ADC_Start+0x15a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2201      	movs	r2, #1
 80010d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80010da:	6878      	ldr	r0, [r7, #4]
 80010dc:	f000 fd2a 	bl	8001b34 <ADC_Enable>
 80010e0:	4603      	mov	r3, r0
 80010e2:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80010e4:	7bfb      	ldrb	r3, [r7, #15]
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	f040 8083 	bne.w	80011f2 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010f4:	f023 0301 	bic.w	r3, r3, #1
 80010f8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001100:	4b42      	ldr	r3, [pc, #264]	; (800120c <HAL_ADC_Start+0x164>)
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 031f 	and.w	r3, r3, #31
 8001108:	2b00      	cmp	r3, #0
 800110a:	d004      	beq.n	8001116 <HAL_ADC_Start+0x6e>
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001114:	d115      	bne.n	8001142 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	68db      	ldr	r3, [r3, #12]
 8001128:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112c:	2b00      	cmp	r3, #0
 800112e:	d027      	beq.n	8001180 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001134:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001138:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	645a      	str	r2, [r3, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001140:	e01e      	b.n	8001180 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001146:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001156:	d004      	beq.n	8001162 <HAL_ADC_Start+0xba>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a2c      	ldr	r2, [pc, #176]	; (8001210 <HAL_ADC_Start+0x168>)
 800115e:	4293      	cmp	r3, r2
 8001160:	d10e      	bne.n	8001180 <HAL_ADC_Start+0xd8>
 8001162:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800116c:	2b00      	cmp	r3, #0
 800116e:	d007      	beq.n	8001180 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001174:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001178:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800118c:	d106      	bne.n	800119c <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001192:	f023 0206 	bic.w	r2, r3, #6
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	649a      	str	r2, [r3, #72]	; 0x48
 800119a:	e002      	b.n	80011a2 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	649a      	str	r2, [r3, #72]	; 0x48
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	221c      	movs	r2, #28
 80011b0:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 80011b2:	4b16      	ldr	r3, [pc, #88]	; (800120c <HAL_ADC_Start+0x164>)
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 031f 	and.w	r3, r3, #31
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d010      	beq.n	80011e0 <HAL_ADC_Start+0x138>
 80011be:	4b13      	ldr	r3, [pc, #76]	; (800120c <HAL_ADC_Start+0x164>)
 80011c0:	689b      	ldr	r3, [r3, #8]
 80011c2:	f003 031f 	and.w	r3, r3, #31
 80011c6:	2b05      	cmp	r3, #5
 80011c8:	d00a      	beq.n	80011e0 <HAL_ADC_Start+0x138>
 80011ca:	4b10      	ldr	r3, [pc, #64]	; (800120c <HAL_ADC_Start+0x164>)
 80011cc:	689b      	ldr	r3, [r3, #8]
 80011ce:	f003 031f 	and.w	r3, r3, #31
 80011d2:	2b09      	cmp	r3, #9
 80011d4:	d004      	beq.n	80011e0 <HAL_ADC_Start+0x138>
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011de:	d10f      	bne.n	8001200 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f042 0204 	orr.w	r2, r2, #4
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	e006      	b.n	8001200 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	2200      	movs	r2, #0
 80011f6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80011fa:	e001      	b.n	8001200 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011fc:	2302      	movs	r3, #2
 80011fe:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	50000300 	.word	0x50000300
 8001210:	50000100 	.word	0x50000100

08001214 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b084      	sub	sp, #16
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800121c:	2300      	movs	r3, #0
 800121e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001226:	2b01      	cmp	r3, #1
 8001228:	d101      	bne.n	800122e <HAL_ADC_Stop+0x1a>
 800122a:	2302      	movs	r3, #2
 800122c:	e023      	b.n	8001276 <HAL_ADC_Stop+0x62>
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	2201      	movs	r2, #1
 8001232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 8001236:	216c      	movs	r1, #108	; 0x6c
 8001238:	6878      	ldr	r0, [r7, #4]
 800123a:	f000 fd39 	bl	8001cb0 <ADC_ConversionStop>
 800123e:	4603      	mov	r3, r0
 8001240:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001242:	7bfb      	ldrb	r3, [r7, #15]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d111      	bne.n	800126c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 fcd1 	bl	8001bf0 <ADC_Disable>
 800124e:	4603      	mov	r3, r0
 8001250:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001252:	7bfb      	ldrb	r3, [r7, #15]
 8001254:	2b00      	cmp	r3, #0
 8001256:	d109      	bne.n	800126c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001260:	f023 0301 	bic.w	r3, r3, #1
 8001264:	f043 0201 	orr.w	r2, r3, #1
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	2200      	movs	r2, #0
 8001270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001274:	7bfb      	ldrb	r3, [r7, #15]
}
 8001276:	4618      	mov	r0, r3
 8001278:	3710      	adds	r7, #16
 800127a:	46bd      	mov	sp, r7
 800127c:	bd80      	pop	{r7, pc}
	...

08001280 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b086      	sub	sp, #24
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
 8001288:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800128a:	2300      	movs	r3, #0
 800128c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	695b      	ldr	r3, [r3, #20]
 8001292:	2b08      	cmp	r3, #8
 8001294:	d102      	bne.n	800129c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001296:	2308      	movs	r3, #8
 8001298:	617b      	str	r3, [r7, #20]
 800129a:	e02e      	b.n	80012fa <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800129c:	4b5a      	ldr	r3, [pc, #360]	; (8001408 <HAL_ADC_PollForConversion+0x188>)
 800129e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	f003 031f 	and.w	r3, r3, #31
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d112      	bne.n	80012d2 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	68db      	ldr	r3, [r3, #12]
 80012b2:	f003 0301 	and.w	r3, r3, #1
 80012b6:	2b01      	cmp	r3, #1
 80012b8:	d11d      	bne.n	80012f6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012be:	f043 0220 	orr.w	r2, r3, #32
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	2200      	movs	r2, #0
 80012ca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 80012ce:	2301      	movs	r3, #1
 80012d0:	e096      	b.n	8001400 <HAL_ADC_PollForConversion+0x180>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d00b      	beq.n	80012f6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e2:	f043 0220 	orr.w	r2, r3, #32
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e084      	b.n	8001400 <HAL_ADC_PollForConversion+0x180>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80012f6:	230c      	movs	r3, #12
 80012f8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012fa:	4b43      	ldr	r3, [pc, #268]	; (8001408 <HAL_ADC_PollForConversion+0x188>)
 80012fc:	689b      	ldr	r3, [r3, #8]
 80012fe:	f003 031f 	and.w	r3, r3, #31
 8001302:	2b00      	cmp	r3, #0
 8001304:	d004      	beq.n	8001310 <HAL_ADC_PollForConversion+0x90>
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800130e:	d104      	bne.n	800131a <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	68db      	ldr	r3, [r3, #12]
 8001316:	613b      	str	r3, [r7, #16]
 8001318:	e003      	b.n	8001322 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 800131a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800131e:	68db      	ldr	r3, [r3, #12]
 8001320:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 8001322:	f7ff fd03 	bl	8000d2c <HAL_GetTick>
 8001326:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001328:	e01a      	b.n	8001360 <HAL_ADC_PollForConversion+0xe0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 800132a:	683b      	ldr	r3, [r7, #0]
 800132c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001330:	d016      	beq.n	8001360 <HAL_ADC_PollForConversion+0xe0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d007      	beq.n	8001348 <HAL_ADC_PollForConversion+0xc8>
 8001338:	f7ff fcf8 	bl	8000d2c <HAL_GetTick>
 800133c:	4602      	mov	r2, r0
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	1ad3      	subs	r3, r2, r3
 8001342:	683a      	ldr	r2, [r7, #0]
 8001344:	429a      	cmp	r2, r3
 8001346:	d20b      	bcs.n	8001360 <HAL_ADC_PollForConversion+0xe0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800134c:	f043 0204 	orr.w	r2, r3, #4
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	2200      	movs	r2, #0
 8001358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_TIMEOUT;
 800135c:	2303      	movs	r3, #3
 800135e:	e04f      	b.n	8001400 <HAL_ADC_PollForConversion+0x180>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	697b      	ldr	r3, [r7, #20]
 8001368:	4013      	ands	r3, r2
 800136a:	2b00      	cmp	r3, #0
 800136c:	d0dd      	beq.n	800132a <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001372:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	68db      	ldr	r3, [r3, #12]
 8001380:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001384:	2b00      	cmp	r3, #0
 8001386:	d131      	bne.n	80013ec <HAL_ADC_PollForConversion+0x16c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800138e:	2b00      	cmp	r3, #0
 8001390:	d12c      	bne.n	80013ec <HAL_ADC_PollForConversion+0x16c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	681b      	ldr	r3, [r3, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0308 	and.w	r3, r3, #8
 800139c:	2b08      	cmp	r3, #8
 800139e:	d125      	bne.n	80013ec <HAL_ADC_PollForConversion+0x16c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689b      	ldr	r3, [r3, #8]
 80013a6:	f003 0304 	and.w	r3, r3, #4
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d112      	bne.n	80013d4 <HAL_ADC_PollForConversion+0x154>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	645a      	str	r2, [r3, #68]	; 0x44
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013be:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d112      	bne.n	80013ec <HAL_ADC_PollForConversion+0x16c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ca:	f043 0201 	orr.w	r2, r3, #1
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	645a      	str	r2, [r3, #68]	; 0x44
 80013d2:	e00b      	b.n	80013ec <HAL_ADC_PollForConversion+0x16c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013d8:	f043 0220 	orr.w	r2, r3, #32
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013e4:	f043 0201 	orr.w	r2, r3, #1
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 80013ec:	693b      	ldr	r3, [r7, #16]
 80013ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d103      	bne.n	80013fe <HAL_ADC_PollForConversion+0x17e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	697a      	ldr	r2, [r7, #20]
 80013fc:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013fe:	2300      	movs	r3, #0
}
 8001400:	4618      	mov	r0, r3
 8001402:	3718      	adds	r7, #24
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	50000300 	.word	0x50000300

0800140c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 800140c:	b480      	push	{r7}
 800140e:	b083      	sub	sp, #12
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800141a:	4618      	mov	r0, r3
 800141c:	370c      	adds	r7, #12
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
	...

08001428 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001428:	b480      	push	{r7}
 800142a:	b09d      	sub	sp, #116	; 0x74
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001432:	2300      	movs	r3, #0
 8001434:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 8001438:	2300      	movs	r3, #0
 800143a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001442:	2b01      	cmp	r3, #1
 8001444:	d101      	bne.n	800144a <HAL_ADC_ConfigChannel+0x22>
 8001446:	2302      	movs	r3, #2
 8001448:	e2a5      	b.n	8001996 <HAL_ADC_ConfigChannel+0x56e>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2201      	movs	r2, #1
 800144e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	689b      	ldr	r3, [r3, #8]
 8001458:	f003 0304 	and.w	r3, r3, #4
 800145c:	2b00      	cmp	r3, #0
 800145e:	f040 8289 	bne.w	8001974 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b04      	cmp	r3, #4
 8001468:	d81c      	bhi.n	80014a4 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	685a      	ldr	r2, [r3, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4413      	add	r3, r2
 800147a:	005b      	lsls	r3, r3, #1
 800147c:	461a      	mov	r2, r3
 800147e:	231f      	movs	r3, #31
 8001480:	4093      	lsls	r3, r2
 8001482:	43db      	mvns	r3, r3
 8001484:	4019      	ands	r1, r3
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	6818      	ldr	r0, [r3, #0]
 800148a:	683b      	ldr	r3, [r7, #0]
 800148c:	685a      	ldr	r2, [r3, #4]
 800148e:	4613      	mov	r3, r2
 8001490:	005b      	lsls	r3, r3, #1
 8001492:	4413      	add	r3, r2
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	fa00 f203 	lsl.w	r2, r0, r3
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	631a      	str	r2, [r3, #48]	; 0x30
 80014a2:	e063      	b.n	800156c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	2b09      	cmp	r3, #9
 80014aa:	d81e      	bhi.n	80014ea <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685a      	ldr	r2, [r3, #4]
 80014b6:	4613      	mov	r3, r2
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	4413      	add	r3, r2
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	3b1e      	subs	r3, #30
 80014c0:	221f      	movs	r2, #31
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	4019      	ands	r1, r3
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685a      	ldr	r2, [r3, #4]
 80014d2:	4613      	mov	r3, r2
 80014d4:	005b      	lsls	r3, r3, #1
 80014d6:	4413      	add	r3, r2
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	3b1e      	subs	r3, #30
 80014dc:	fa00 f203 	lsl.w	r2, r0, r3
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	430a      	orrs	r2, r1
 80014e6:	635a      	str	r2, [r3, #52]	; 0x34
 80014e8:	e040      	b.n	800156c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b0e      	cmp	r3, #14
 80014f0:	d81e      	bhi.n	8001530 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	685a      	ldr	r2, [r3, #4]
 80014fc:	4613      	mov	r3, r2
 80014fe:	005b      	lsls	r3, r3, #1
 8001500:	4413      	add	r3, r2
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	3b3c      	subs	r3, #60	; 0x3c
 8001506:	221f      	movs	r2, #31
 8001508:	fa02 f303 	lsl.w	r3, r2, r3
 800150c:	43db      	mvns	r3, r3
 800150e:	4019      	ands	r1, r3
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	6818      	ldr	r0, [r3, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	685a      	ldr	r2, [r3, #4]
 8001518:	4613      	mov	r3, r2
 800151a:	005b      	lsls	r3, r3, #1
 800151c:	4413      	add	r3, r2
 800151e:	005b      	lsls	r3, r3, #1
 8001520:	3b3c      	subs	r3, #60	; 0x3c
 8001522:	fa00 f203 	lsl.w	r2, r0, r3
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	430a      	orrs	r2, r1
 800152c:	639a      	str	r2, [r3, #56]	; 0x38
 800152e:	e01d      	b.n	800156c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	685a      	ldr	r2, [r3, #4]
 800153a:	4613      	mov	r3, r2
 800153c:	005b      	lsls	r3, r3, #1
 800153e:	4413      	add	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	3b5a      	subs	r3, #90	; 0x5a
 8001544:	221f      	movs	r2, #31
 8001546:	fa02 f303 	lsl.w	r3, r2, r3
 800154a:	43db      	mvns	r3, r3
 800154c:	4019      	ands	r1, r3
 800154e:	683b      	ldr	r3, [r7, #0]
 8001550:	6818      	ldr	r0, [r3, #0]
 8001552:	683b      	ldr	r3, [r7, #0]
 8001554:	685a      	ldr	r2, [r3, #4]
 8001556:	4613      	mov	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	005b      	lsls	r3, r3, #1
 800155e:	3b5a      	subs	r3, #90	; 0x5a
 8001560:	fa00 f203 	lsl.w	r2, r0, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689b      	ldr	r3, [r3, #8]
 8001572:	f003 030c 	and.w	r3, r3, #12
 8001576:	2b00      	cmp	r3, #0
 8001578:	f040 80e5 	bne.w	8001746 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800157c:	683b      	ldr	r3, [r7, #0]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	2b09      	cmp	r3, #9
 8001582:	d91c      	bls.n	80015be <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	6999      	ldr	r1, [r3, #24]
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681a      	ldr	r2, [r3, #0]
 800158e:	4613      	mov	r3, r2
 8001590:	005b      	lsls	r3, r3, #1
 8001592:	4413      	add	r3, r2
 8001594:	3b1e      	subs	r3, #30
 8001596:	2207      	movs	r2, #7
 8001598:	fa02 f303 	lsl.w	r3, r2, r3
 800159c:	43db      	mvns	r3, r3
 800159e:	4019      	ands	r1, r3
 80015a0:	683b      	ldr	r3, [r7, #0]
 80015a2:	6898      	ldr	r0, [r3, #8]
 80015a4:	683b      	ldr	r3, [r7, #0]
 80015a6:	681a      	ldr	r2, [r3, #0]
 80015a8:	4613      	mov	r3, r2
 80015aa:	005b      	lsls	r3, r3, #1
 80015ac:	4413      	add	r3, r2
 80015ae:	3b1e      	subs	r3, #30
 80015b0:	fa00 f203 	lsl.w	r2, r0, r3
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	430a      	orrs	r2, r1
 80015ba:	619a      	str	r2, [r3, #24]
 80015bc:	e019      	b.n	80015f2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	6959      	ldr	r1, [r3, #20]
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681a      	ldr	r2, [r3, #0]
 80015c8:	4613      	mov	r3, r2
 80015ca:	005b      	lsls	r3, r3, #1
 80015cc:	4413      	add	r3, r2
 80015ce:	2207      	movs	r2, #7
 80015d0:	fa02 f303 	lsl.w	r3, r2, r3
 80015d4:	43db      	mvns	r3, r3
 80015d6:	4019      	ands	r1, r3
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	6898      	ldr	r0, [r3, #8]
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	681a      	ldr	r2, [r3, #0]
 80015e0:	4613      	mov	r3, r2
 80015e2:	005b      	lsls	r3, r3, #1
 80015e4:	4413      	add	r3, r2
 80015e6:	fa00 f203 	lsl.w	r2, r0, r3
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	430a      	orrs	r2, r1
 80015f0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80015f2:	683b      	ldr	r3, [r7, #0]
 80015f4:	695a      	ldr	r2, [r3, #20]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	68db      	ldr	r3, [r3, #12]
 80015fc:	08db      	lsrs	r3, r3, #3
 80015fe:	f003 0303 	and.w	r3, r3, #3
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	fa02 f303 	lsl.w	r3, r2, r3
 8001608:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	691b      	ldr	r3, [r3, #16]
 800160e:	3b01      	subs	r3, #1
 8001610:	2b03      	cmp	r3, #3
 8001612:	d84f      	bhi.n	80016b4 <HAL_ADC_ConfigChannel+0x28c>
 8001614:	a201      	add	r2, pc, #4	; (adr r2, 800161c <HAL_ADC_ConfigChannel+0x1f4>)
 8001616:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800161a:	bf00      	nop
 800161c:	0800162d 	.word	0x0800162d
 8001620:	0800164f 	.word	0x0800164f
 8001624:	08001671 	.word	0x08001671
 8001628:	08001693 	.word	0x08001693
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001632:	4b9e      	ldr	r3, [pc, #632]	; (80018ac <HAL_ADC_ConfigChannel+0x484>)
 8001634:	4013      	ands	r3, r2
 8001636:	683a      	ldr	r2, [r7, #0]
 8001638:	6812      	ldr	r2, [r2, #0]
 800163a:	0691      	lsls	r1, r2, #26
 800163c:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800163e:	430a      	orrs	r2, r1
 8001640:	431a      	orrs	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800164a:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800164c:	e07e      	b.n	800174c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001654:	4b95      	ldr	r3, [pc, #596]	; (80018ac <HAL_ADC_ConfigChannel+0x484>)
 8001656:	4013      	ands	r3, r2
 8001658:	683a      	ldr	r2, [r7, #0]
 800165a:	6812      	ldr	r2, [r2, #0]
 800165c:	0691      	lsls	r1, r2, #26
 800165e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001660:	430a      	orrs	r2, r1
 8001662:	431a      	orrs	r2, r3
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800166c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800166e:	e06d      	b.n	800174c <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001676:	4b8d      	ldr	r3, [pc, #564]	; (80018ac <HAL_ADC_ConfigChannel+0x484>)
 8001678:	4013      	ands	r3, r2
 800167a:	683a      	ldr	r2, [r7, #0]
 800167c:	6812      	ldr	r2, [r2, #0]
 800167e:	0691      	lsls	r1, r2, #26
 8001680:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001682:	430a      	orrs	r2, r1
 8001684:	431a      	orrs	r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800168e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001690:	e05c      	b.n	800174c <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001698:	4b84      	ldr	r3, [pc, #528]	; (80018ac <HAL_ADC_ConfigChannel+0x484>)
 800169a:	4013      	ands	r3, r2
 800169c:	683a      	ldr	r2, [r7, #0]
 800169e:	6812      	ldr	r2, [r2, #0]
 80016a0:	0691      	lsls	r1, r2, #26
 80016a2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80016a4:	430a      	orrs	r2, r1
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80016b0:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80016b2:	e04b      	b.n	800174c <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80016ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	069b      	lsls	r3, r3, #26
 80016c4:	429a      	cmp	r2, r3
 80016c6:	d107      	bne.n	80016d8 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016d6:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80016de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	069b      	lsls	r3, r3, #26
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d107      	bne.n	80016fc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016fa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001702:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	069b      	lsls	r3, r3, #26
 800170c:	429a      	cmp	r2, r3
 800170e:	d107      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 800171e:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001726:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800172a:	683b      	ldr	r3, [r7, #0]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	069b      	lsls	r3, r3, #26
 8001730:	429a      	cmp	r2, r3
 8001732:	d10a      	bne.n	800174a <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001742:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 8001744:	e001      	b.n	800174a <HAL_ADC_ConfigChannel+0x322>
    }

  }
 8001746:	bf00      	nop
 8001748:	e000      	b.n	800174c <HAL_ADC_ConfigChannel+0x324>
      break;
 800174a:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	689b      	ldr	r3, [r3, #8]
 8001752:	f003 0303 	and.w	r3, r3, #3
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <HAL_ADC_ConfigChannel+0x344>
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	f003 0301 	and.w	r3, r3, #1
 8001764:	2b01      	cmp	r3, #1
 8001766:	d101      	bne.n	800176c <HAL_ADC_ConfigChannel+0x344>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_ADC_ConfigChannel+0x346>
 800176c:	2300      	movs	r3, #0
 800176e:	2b00      	cmp	r3, #0
 8001770:	f040 810b 	bne.w	800198a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	68db      	ldr	r3, [r3, #12]
 8001778:	2b01      	cmp	r3, #1
 800177a:	d00f      	beq.n	800179c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001784:	683b      	ldr	r3, [r7, #0]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	2201      	movs	r2, #1
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43da      	mvns	r2, r3
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	400a      	ands	r2, r1
 8001796:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800179a:	e049      	b.n	8001830 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 80017a4:	683b      	ldr	r3, [r7, #0]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	2201      	movs	r2, #1
 80017aa:	409a      	lsls	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80017b6:	683b      	ldr	r3, [r7, #0]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	2b09      	cmp	r3, #9
 80017bc:	d91c      	bls.n	80017f8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	6999      	ldr	r1, [r3, #24]
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	681a      	ldr	r2, [r3, #0]
 80017c8:	4613      	mov	r3, r2
 80017ca:	005b      	lsls	r3, r3, #1
 80017cc:	4413      	add	r3, r2
 80017ce:	3b1b      	subs	r3, #27
 80017d0:	2207      	movs	r2, #7
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	4019      	ands	r1, r3
 80017da:	683b      	ldr	r3, [r7, #0]
 80017dc:	6898      	ldr	r0, [r3, #8]
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	4613      	mov	r3, r2
 80017e4:	005b      	lsls	r3, r3, #1
 80017e6:	4413      	add	r3, r2
 80017e8:	3b1b      	subs	r3, #27
 80017ea:	fa00 f203 	lsl.w	r2, r0, r3
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	430a      	orrs	r2, r1
 80017f4:	619a      	str	r2, [r3, #24]
 80017f6:	e01b      	b.n	8001830 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	6959      	ldr	r1, [r3, #20]
 80017fe:	683b      	ldr	r3, [r7, #0]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	1c5a      	adds	r2, r3, #1
 8001804:	4613      	mov	r3, r2
 8001806:	005b      	lsls	r3, r3, #1
 8001808:	4413      	add	r3, r2
 800180a:	2207      	movs	r2, #7
 800180c:	fa02 f303 	lsl.w	r3, r2, r3
 8001810:	43db      	mvns	r3, r3
 8001812:	4019      	ands	r1, r3
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	6898      	ldr	r0, [r3, #8]
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	1c5a      	adds	r2, r3, #1
 800181e:	4613      	mov	r3, r2
 8001820:	005b      	lsls	r3, r3, #1
 8001822:	4413      	add	r3, r2
 8001824:	fa00 f203 	lsl.w	r2, r0, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	430a      	orrs	r2, r1
 800182e:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <HAL_ADC_ConfigChannel+0x488>)
 8001832:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b10      	cmp	r3, #16
 800183a:	d105      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800183c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001844:	2b00      	cmp	r3, #0
 8001846:	d015      	beq.n	8001874 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001848:	683b      	ldr	r3, [r7, #0]
 800184a:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800184c:	2b11      	cmp	r3, #17
 800184e:	d105      	bne.n	800185c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001850:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001852:	689b      	ldr	r3, [r3, #8]
 8001854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001858:	2b00      	cmp	r3, #0
 800185a:	d00b      	beq.n	8001874 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001860:	2b12      	cmp	r3, #18
 8001862:	f040 8092 	bne.w	800198a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001866:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800186e:	2b00      	cmp	r3, #0
 8001870:	f040 808b 	bne.w	800198a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800187c:	d102      	bne.n	8001884 <HAL_ADC_ConfigChannel+0x45c>
 800187e:	4b0d      	ldr	r3, [pc, #52]	; (80018b4 <HAL_ADC_ConfigChannel+0x48c>)
 8001880:	613b      	str	r3, [r7, #16]
 8001882:	e002      	b.n	800188a <HAL_ADC_ConfigChannel+0x462>
 8001884:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001888:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	689b      	ldr	r3, [r3, #8]
 8001890:	f003 0303 	and.w	r3, r3, #3
 8001894:	2b01      	cmp	r3, #1
 8001896:	d10f      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x490>
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	2b01      	cmp	r3, #1
 80018a4:	d108      	bne.n	80018b8 <HAL_ADC_ConfigChannel+0x490>
 80018a6:	2301      	movs	r3, #1
 80018a8:	e007      	b.n	80018ba <HAL_ADC_ConfigChannel+0x492>
 80018aa:	bf00      	nop
 80018ac:	83fff000 	.word	0x83fff000
 80018b0:	50000300 	.word	0x50000300
 80018b4:	50000100 	.word	0x50000100
 80018b8:	2300      	movs	r3, #0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d150      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018be:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d010      	beq.n	80018e6 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	f003 0303 	and.w	r3, r3, #3
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d107      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x4b8>
 80018d0:	693b      	ldr	r3, [r7, #16]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	f003 0301 	and.w	r3, r3, #1
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d101      	bne.n	80018e0 <HAL_ADC_ConfigChannel+0x4b8>
 80018dc:	2301      	movs	r3, #1
 80018de:	e000      	b.n	80018e2 <HAL_ADC_ConfigChannel+0x4ba>
 80018e0:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d13c      	bne.n	8001960 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018e6:	683b      	ldr	r3, [r7, #0]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	2b10      	cmp	r3, #16
 80018ec:	d11d      	bne.n	800192a <HAL_ADC_ConfigChannel+0x502>
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018f6:	d118      	bne.n	800192a <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80018f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001900:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001902:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001904:	4b27      	ldr	r3, [pc, #156]	; (80019a4 <HAL_ADC_ConfigChannel+0x57c>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a27      	ldr	r2, [pc, #156]	; (80019a8 <HAL_ADC_ConfigChannel+0x580>)
 800190a:	fba2 2303 	umull	r2, r3, r2, r3
 800190e:	0c9a      	lsrs	r2, r3, #18
 8001910:	4613      	mov	r3, r2
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	4413      	add	r3, r2
 8001916:	005b      	lsls	r3, r3, #1
 8001918:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 800191a:	e002      	b.n	8001922 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	3b01      	subs	r3, #1
 8001920:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	2b00      	cmp	r3, #0
 8001926:	d1f9      	bne.n	800191c <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001928:	e02e      	b.n	8001988 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	2b11      	cmp	r3, #17
 8001930:	d10b      	bne.n	800194a <HAL_ADC_ConfigChannel+0x522>
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800193a:	d106      	bne.n	800194a <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 800193c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800193e:	689b      	ldr	r3, [r3, #8]
 8001940:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 8001944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001946:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001948:	e01e      	b.n	8001988 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	2b12      	cmp	r3, #18
 8001950:	d11a      	bne.n	8001988 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001952:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800195a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800195c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800195e:	e013      	b.n	8001988 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001964:	f043 0220 	orr.w	r2, r3, #32
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 800196c:	2301      	movs	r3, #1
 800196e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001972:	e00a      	b.n	800198a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001978:	f043 0220 	orr.w	r2, r3, #32
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001986:	e000      	b.n	800198a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001988:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2200      	movs	r2, #0
 800198e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001992:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001996:	4618      	mov	r0, r3
 8001998:	3774      	adds	r7, #116	; 0x74
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	20000008 	.word	0x20000008
 80019a8:	431bde83 	.word	0x431bde83

080019ac <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b09b      	sub	sp, #108	; 0x6c
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]
 80019b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019b6:	2300      	movs	r3, #0
 80019b8:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80019c4:	d102      	bne.n	80019cc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80019c6:	4b59      	ldr	r3, [pc, #356]	; (8001b2c <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 80019c8:	60fb      	str	r3, [r7, #12]
 80019ca:	e002      	b.n	80019d2 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 80019cc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80019d0:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d101      	bne.n	80019dc <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0a1      	b.n	8001b20 <HAL_ADCEx_MultiModeConfigChannel+0x174>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019e2:	2b01      	cmp	r3, #1
 80019e4:	d101      	bne.n	80019ea <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80019e6:	2302      	movs	r3, #2
 80019e8:	e09a      	b.n	8001b20 <HAL_ADCEx_MultiModeConfigChannel+0x174>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	2201      	movs	r2, #1
 80019ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	689b      	ldr	r3, [r3, #8]
 80019f8:	f003 0304 	and.w	r3, r3, #4
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d17e      	bne.n	8001afe <HAL_ADCEx_MultiModeConfigChannel+0x152>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	f003 0304 	and.w	r3, r3, #4
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d178      	bne.n	8001afe <HAL_ADCEx_MultiModeConfigChannel+0x152>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001a0c:	4b48      	ldr	r3, [pc, #288]	; (8001b30 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 8001a0e:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a10:	683b      	ldr	r3, [r7, #0]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d03f      	beq.n	8001a98 <HAL_ADCEx_MultiModeConfigChannel+0xec>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a1a:	689b      	ldr	r3, [r3, #8]
 8001a1c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	6859      	ldr	r1, [r3, #4]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001a28:	035b      	lsls	r3, r3, #13
 8001a2a:	430b      	orrs	r3, r1
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a30:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689b      	ldr	r3, [r3, #8]
 8001a38:	f003 0303 	and.w	r3, r3, #3
 8001a3c:	2b01      	cmp	r3, #1
 8001a3e:	d108      	bne.n	8001a52 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0301 	and.w	r3, r3, #1
 8001a4a:	2b01      	cmp	r3, #1
 8001a4c:	d101      	bne.n	8001a52 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e000      	b.n	8001a54 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001a52:	2300      	movs	r3, #0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d15c      	bne.n	8001b12 <HAL_ADCEx_MultiModeConfigChannel+0x166>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	689b      	ldr	r3, [r3, #8]
 8001a5c:	f003 0303 	and.w	r3, r3, #3
 8001a60:	2b01      	cmp	r3, #1
 8001a62:	d107      	bne.n	8001a74 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001a74:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d14b      	bne.n	8001b12 <HAL_ADCEx_MultiModeConfigChannel+0x166>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a82:	f023 030f 	bic.w	r3, r3, #15
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	6811      	ldr	r1, [r2, #0]
 8001a8a:	683a      	ldr	r2, [r7, #0]
 8001a8c:	6892      	ldr	r2, [r2, #8]
 8001a8e:	430a      	orrs	r2, r1
 8001a90:	431a      	orrs	r2, r3
 8001a92:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a94:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a96:	e03c      	b.n	8001b12 <HAL_ADCEx_MultiModeConfigChannel+0x166>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a98:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001aa0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aa2:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	689b      	ldr	r3, [r3, #8]
 8001aaa:	f003 0303 	and.w	r3, r3, #3
 8001aae:	2b01      	cmp	r3, #1
 8001ab0:	d108      	bne.n	8001ac4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f003 0301 	and.w	r3, r3, #1
 8001abc:	2b01      	cmp	r3, #1
 8001abe:	d101      	bne.n	8001ac4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	e000      	b.n	8001ac6 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d123      	bne.n	8001b12 <HAL_ADCEx_MultiModeConfigChannel+0x166>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	689b      	ldr	r3, [r3, #8]
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	2b01      	cmp	r3, #1
 8001ad4:	d107      	bne.n	8001ae6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	f003 0301 	and.w	r3, r3, #1
 8001ade:	2b01      	cmp	r3, #1
 8001ae0:	d101      	bne.n	8001ae6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
 8001ae2:	2301      	movs	r3, #1
 8001ae4:	e000      	b.n	8001ae8 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001ae6:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d112      	bne.n	8001b12 <HAL_ADCEx_MultiModeConfigChannel+0x166>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001aec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001af4:	f023 030f 	bic.w	r3, r3, #15
 8001af8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001afa:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001afc:	e009      	b.n	8001b12 <HAL_ADCEx_MultiModeConfigChannel+0x166>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b02:	f043 0220 	orr.w	r2, r3, #32
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001b10:	e000      	b.n	8001b14 <HAL_ADCEx_MultiModeConfigChannel+0x168>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001b12:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001b1c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
} 
 8001b20:	4618      	mov	r0, r3
 8001b22:	376c      	adds	r7, #108	; 0x6c
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr
 8001b2c:	50000100 	.word	0x50000100
 8001b30:	50000300 	.word	0x50000300

08001b34 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001b34:	b580      	push	{r7, lr}
 8001b36:	b084      	sub	sp, #16
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689b      	ldr	r3, [r3, #8]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d108      	bne.n	8001b60 <ADC_Enable+0x2c>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b01      	cmp	r3, #1
 8001b5a:	d101      	bne.n	8001b60 <ADC_Enable+0x2c>
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e000      	b.n	8001b62 <ADC_Enable+0x2e>
 8001b60:	2300      	movs	r3, #0
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d13c      	bne.n	8001be0 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	689a      	ldr	r2, [r3, #8]
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <ADC_Enable+0xb8>)
 8001b6e:	4013      	ands	r3, r2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d00d      	beq.n	8001b90 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b78:	f043 0210 	orr.w	r2, r3, #16
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e028      	b.n	8001be2 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	689a      	ldr	r2, [r3, #8]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f042 0201 	orr.w	r2, r2, #1
 8001b9e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001ba0:	f7ff f8c4 	bl	8000d2c <HAL_GetTick>
 8001ba4:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001ba6:	e014      	b.n	8001bd2 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001ba8:	f7ff f8c0 	bl	8000d2c <HAL_GetTick>
 8001bac:	4602      	mov	r2, r0
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d90d      	bls.n	8001bd2 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bba:	f043 0210 	orr.w	r2, r3, #16
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001bc6:	f043 0201 	orr.w	r2, r3, #1
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e007      	b.n	8001be2 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0301 	and.w	r3, r3, #1
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d1e3      	bne.n	8001ba8 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001be0:	2300      	movs	r3, #0
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3710      	adds	r7, #16
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bd80      	pop	{r7, pc}
 8001bea:	bf00      	nop
 8001bec:	8000003f 	.word	0x8000003f

08001bf0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b084      	sub	sp, #16
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	f003 0303 	and.w	r3, r3, #3
 8001c06:	2b01      	cmp	r3, #1
 8001c08:	d108      	bne.n	8001c1c <ADC_Disable+0x2c>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0301 	and.w	r3, r3, #1
 8001c14:	2b01      	cmp	r3, #1
 8001c16:	d101      	bne.n	8001c1c <ADC_Disable+0x2c>
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e000      	b.n	8001c1e <ADC_Disable+0x2e>
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d040      	beq.n	8001ca4 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	689b      	ldr	r3, [r3, #8]
 8001c28:	f003 030d 	and.w	r3, r3, #13
 8001c2c:	2b01      	cmp	r3, #1
 8001c2e:	d10f      	bne.n	8001c50 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	689a      	ldr	r2, [r3, #8]
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f042 0202 	orr.w	r2, r2, #2
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	2203      	movs	r2, #3
 8001c46:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001c48:	f7ff f870 	bl	8000d2c <HAL_GetTick>
 8001c4c:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c4e:	e022      	b.n	8001c96 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c54:	f043 0210 	orr.w	r2, r3, #16
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c60:	f043 0201 	orr.w	r2, r3, #1
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8001c68:	2301      	movs	r3, #1
 8001c6a:	e01c      	b.n	8001ca6 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c6c:	f7ff f85e 	bl	8000d2c <HAL_GetTick>
 8001c70:	4602      	mov	r2, r0
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	1ad3      	subs	r3, r2, r3
 8001c76:	2b02      	cmp	r3, #2
 8001c78:	d90d      	bls.n	8001c96 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c7e:	f043 0210 	orr.w	r2, r3, #16
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c8a:	f043 0201 	orr.w	r2, r3, #1
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e007      	b.n	8001ca6 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 0301 	and.w	r3, r3, #1
 8001ca0:	2b01      	cmp	r3, #1
 8001ca2:	d0e3      	beq.n	8001c6c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001ca4:	2300      	movs	r3, #0
}
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	3710      	adds	r7, #16
 8001caa:	46bd      	mov	sp, r7
 8001cac:	bd80      	pop	{r7, pc}
	...

08001cb0 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
 8001cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 030c 	and.w	r3, r3, #12
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	f000 8093 	beq.w	8001dfc <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ce0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001ce4:	d12a      	bne.n	8001d3c <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69db      	ldr	r3, [r3, #28]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d126      	bne.n	8001d3c <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	699b      	ldr	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001cf2:	2b01      	cmp	r3, #1
 8001cf4:	d122      	bne.n	8001d3c <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001cf6:	230c      	movs	r3, #12
 8001cf8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001cfa:	e014      	b.n	8001d26 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001cfc:	693b      	ldr	r3, [r7, #16]
 8001cfe:	4a42      	ldr	r2, [pc, #264]	; (8001e08 <ADC_ConversionStop+0x158>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d90d      	bls.n	8001d20 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d08:	f043 0210 	orr.w	r2, r3, #16
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d14:	f043 0201 	orr.w	r2, r3, #1
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	649a      	str	r2, [r3, #72]	; 0x48
          
          return HAL_ERROR;
 8001d1c:	2301      	movs	r3, #1
 8001d1e:	e06e      	b.n	8001dfe <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001d20:	693b      	ldr	r3, [r7, #16]
 8001d22:	3301      	adds	r3, #1
 8001d24:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d30:	2b40      	cmp	r3, #64	; 0x40
 8001d32:	d1e3      	bne.n	8001cfc <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	2240      	movs	r2, #64	; 0x40
 8001d3a:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	2b60      	cmp	r3, #96	; 0x60
 8001d40:	d015      	beq.n	8001d6e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	689b      	ldr	r3, [r3, #8]
 8001d48:	f003 0304 	and.w	r3, r3, #4
 8001d4c:	2b04      	cmp	r3, #4
 8001d4e:	d10e      	bne.n	8001d6e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d107      	bne.n	8001d6e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f042 0210 	orr.w	r2, r2, #16
 8001d6c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	2b0c      	cmp	r3, #12
 8001d72:	d015      	beq.n	8001da0 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 0308 	and.w	r3, r3, #8
 8001d7e:	2b08      	cmp	r3, #8
 8001d80:	d10e      	bne.n	8001da0 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d107      	bne.n	8001da0 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689a      	ldr	r2, [r3, #8]
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f042 0220 	orr.w	r2, r2, #32
 8001d9e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	2b60      	cmp	r3, #96	; 0x60
 8001da4:	d004      	beq.n	8001db0 <ADC_ConversionStop+0x100>
 8001da6:	2b6c      	cmp	r3, #108	; 0x6c
 8001da8:	d105      	bne.n	8001db6 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001daa:	230c      	movs	r3, #12
 8001dac:	617b      	str	r3, [r7, #20]
        break;
 8001dae:	e005      	b.n	8001dbc <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001db0:	2308      	movs	r3, #8
 8001db2:	617b      	str	r3, [r7, #20]
        break;
 8001db4:	e002      	b.n	8001dbc <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001db6:	2304      	movs	r3, #4
 8001db8:	617b      	str	r3, [r7, #20]
        break;
 8001dba:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001dbc:	f7fe ffb6 	bl	8000d2c <HAL_GetTick>
 8001dc0:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001dc2:	e014      	b.n	8001dee <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001dc4:	f7fe ffb2 	bl	8000d2c <HAL_GetTick>
 8001dc8:	4602      	mov	r2, r0
 8001dca:	68fb      	ldr	r3, [r7, #12]
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	2b0b      	cmp	r3, #11
 8001dd0:	d90d      	bls.n	8001dee <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd6:	f043 0210 	orr.w	r2, r3, #16
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001de2:	f043 0201 	orr.w	r2, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001dea:	2301      	movs	r3, #1
 8001dec:	e007      	b.n	8001dfe <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	689a      	ldr	r2, [r3, #8]
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	4013      	ands	r3, r2
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d1e3      	bne.n	8001dc4 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dfc:	2300      	movs	r3, #0
}
 8001dfe:	4618      	mov	r0, r3
 8001e00:	3718      	adds	r7, #24
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	000993ff 	.word	0x000993ff

08001e0c <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b085      	sub	sp, #20
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001e1c:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <NVIC_SetPriorityGrouping+0x44>)
 8001e1e:	68db      	ldr	r3, [r3, #12]
 8001e20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001e28:	4013      	ands	r3, r2
 8001e2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001e34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001e38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001e3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001e3e:	4a04      	ldr	r2, [pc, #16]	; (8001e50 <NVIC_SetPriorityGrouping+0x44>)
 8001e40:	68bb      	ldr	r3, [r7, #8]
 8001e42:	60d3      	str	r3, [r2, #12]
}
 8001e44:	bf00      	nop
 8001e46:	3714      	adds	r7, #20
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e4e:	4770      	bx	lr
 8001e50:	e000ed00 	.word	0xe000ed00

08001e54 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e58:	4b04      	ldr	r3, [pc, #16]	; (8001e6c <NVIC_GetPriorityGrouping+0x18>)
 8001e5a:	68db      	ldr	r3, [r3, #12]
 8001e5c:	0a1b      	lsrs	r3, r3, #8
 8001e5e:	f003 0307 	and.w	r3, r3, #7
}
 8001e62:	4618      	mov	r0, r3
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00

08001e70 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
 8001e76:	4603      	mov	r3, r0
 8001e78:	6039      	str	r1, [r7, #0]
 8001e7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001e7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	da0b      	bge.n	8001e9c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	b2da      	uxtb	r2, r3
 8001e88:	490c      	ldr	r1, [pc, #48]	; (8001ebc <NVIC_SetPriority+0x4c>)
 8001e8a:	79fb      	ldrb	r3, [r7, #7]
 8001e8c:	f003 030f 	and.w	r3, r3, #15
 8001e90:	3b04      	subs	r3, #4
 8001e92:	0112      	lsls	r2, r2, #4
 8001e94:	b2d2      	uxtb	r2, r2
 8001e96:	440b      	add	r3, r1
 8001e98:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e9a:	e009      	b.n	8001eb0 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e9c:	683b      	ldr	r3, [r7, #0]
 8001e9e:	b2da      	uxtb	r2, r3
 8001ea0:	4907      	ldr	r1, [pc, #28]	; (8001ec0 <NVIC_SetPriority+0x50>)
 8001ea2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ea6:	0112      	lsls	r2, r2, #4
 8001ea8:	b2d2      	uxtb	r2, r2
 8001eaa:	440b      	add	r3, r1
 8001eac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001eb0:	bf00      	nop
 8001eb2:	370c      	adds	r7, #12
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eba:	4770      	bx	lr
 8001ebc:	e000ed00 	.word	0xe000ed00
 8001ec0:	e000e100 	.word	0xe000e100

08001ec4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ec4:	b480      	push	{r7}
 8001ec6:	b089      	sub	sp, #36	; 0x24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	f1c3 0307 	rsb	r3, r3, #7
 8001ede:	2b04      	cmp	r3, #4
 8001ee0:	bf28      	it	cs
 8001ee2:	2304      	movcs	r3, #4
 8001ee4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	3304      	adds	r3, #4
 8001eea:	2b06      	cmp	r3, #6
 8001eec:	d902      	bls.n	8001ef4 <NVIC_EncodePriority+0x30>
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	3b03      	subs	r3, #3
 8001ef2:	e000      	b.n	8001ef6 <NVIC_EncodePriority+0x32>
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ef8:	f04f 32ff 	mov.w	r2, #4294967295
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	fa02 f303 	lsl.w	r3, r2, r3
 8001f02:	43da      	mvns	r2, r3
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	401a      	ands	r2, r3
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001f0c:	f04f 31ff 	mov.w	r1, #4294967295
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	43d9      	mvns	r1, r3
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001f1c:	4313      	orrs	r3, r2
         );
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	3724      	adds	r7, #36	; 0x24
 8001f22:	46bd      	mov	sp, r7
 8001f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f28:	4770      	bx	lr
	...

08001f2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b082      	sub	sp, #8
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3b01      	subs	r3, #1
 8001f38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001f3c:	d301      	bcc.n	8001f42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e00f      	b.n	8001f62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001f42:	4a0a      	ldr	r2, [pc, #40]	; (8001f6c <SysTick_Config+0x40>)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	3b01      	subs	r3, #1
 8001f48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001f4a:	210f      	movs	r1, #15
 8001f4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001f50:	f7ff ff8e 	bl	8001e70 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <SysTick_Config+0x40>)
 8001f56:	2200      	movs	r2, #0
 8001f58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f5a:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <SysTick_Config+0x40>)
 8001f5c:	2207      	movs	r2, #7
 8001f5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3708      	adds	r7, #8
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd80      	pop	{r7, pc}
 8001f6a:	bf00      	nop
 8001f6c:	e000e010 	.word	0xe000e010

08001f70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b082      	sub	sp, #8
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f78:	6878      	ldr	r0, [r7, #4]
 8001f7a:	f7ff ff47 	bl	8001e0c <NVIC_SetPriorityGrouping>
}
 8001f7e:	bf00      	nop
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}

08001f86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f86:	b580      	push	{r7, lr}
 8001f88:	b086      	sub	sp, #24
 8001f8a:	af00      	add	r7, sp, #0
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	60b9      	str	r1, [r7, #8]
 8001f90:	607a      	str	r2, [r7, #4]
 8001f92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f94:	2300      	movs	r3, #0
 8001f96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f98:	f7ff ff5c 	bl	8001e54 <NVIC_GetPriorityGrouping>
 8001f9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f9e:	687a      	ldr	r2, [r7, #4]
 8001fa0:	68b9      	ldr	r1, [r7, #8]
 8001fa2:	6978      	ldr	r0, [r7, #20]
 8001fa4:	f7ff ff8e 	bl	8001ec4 <NVIC_EncodePriority>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fae:	4611      	mov	r1, r2
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	f7ff ff5d 	bl	8001e70 <NVIC_SetPriority>
}
 8001fb6:	bf00      	nop
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}

08001fbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001fbe:	b580      	push	{r7, lr}
 8001fc0:	b082      	sub	sp, #8
 8001fc2:	af00      	add	r7, sp, #0
 8001fc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ffb0 	bl	8001f2c <SysTick_Config>
 8001fcc:	4603      	mov	r3, r0
}
 8001fce:	4618      	mov	r0, r3
 8001fd0:	3708      	adds	r7, #8
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	bd80      	pop	{r7, pc}
	...

08001fd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001fd8:	b480      	push	{r7}
 8001fda:	b087      	sub	sp, #28
 8001fdc:	af00      	add	r7, sp, #0
 8001fde:	6078      	str	r0, [r7, #4]
 8001fe0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001fe6:	2300      	movs	r3, #0
 8001fe8:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001fea:	2300      	movs	r3, #0
 8001fec:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001fee:	e14e      	b.n	800228e <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	681a      	ldr	r2, [r3, #0]
 8001ff4:	2101      	movs	r1, #1
 8001ff6:	697b      	ldr	r3, [r7, #20]
 8001ff8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8002000:	68fb      	ldr	r3, [r7, #12]
 8002002:	2b00      	cmp	r3, #0
 8002004:	f000 8140 	beq.w	8002288 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d003      	beq.n	8002018 <HAL_GPIO_Init+0x40>
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	685b      	ldr	r3, [r3, #4]
 8002014:	2b12      	cmp	r3, #18
 8002016:	d123      	bne.n	8002060 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	08da      	lsrs	r2, r3, #3
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	3208      	adds	r2, #8
 8002020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002024:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002026:	697b      	ldr	r3, [r7, #20]
 8002028:	f003 0307 	and.w	r3, r3, #7
 800202c:	009b      	lsls	r3, r3, #2
 800202e:	220f      	movs	r2, #15
 8002030:	fa02 f303 	lsl.w	r3, r2, r3
 8002034:	43db      	mvns	r3, r3
 8002036:	693a      	ldr	r2, [r7, #16]
 8002038:	4013      	ands	r3, r2
 800203a:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f003 0307 	and.w	r3, r3, #7
 8002046:	009b      	lsls	r3, r3, #2
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	693a      	ldr	r2, [r7, #16]
 800204e:	4313      	orrs	r3, r2
 8002050:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002052:	697b      	ldr	r3, [r7, #20]
 8002054:	08da      	lsrs	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	3208      	adds	r2, #8
 800205a:	6939      	ldr	r1, [r7, #16]
 800205c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	2203      	movs	r2, #3
 800206c:	fa02 f303 	lsl.w	r3, r2, r3
 8002070:	43db      	mvns	r3, r3
 8002072:	693a      	ldr	r2, [r7, #16]
 8002074:	4013      	ands	r3, r2
 8002076:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002078:	683b      	ldr	r3, [r7, #0]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	f003 0203 	and.w	r2, r3, #3
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002094:	683b      	ldr	r3, [r7, #0]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	2b01      	cmp	r3, #1
 800209a:	d00b      	beq.n	80020b4 <HAL_GPIO_Init+0xdc>
 800209c:	683b      	ldr	r3, [r7, #0]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	2b02      	cmp	r3, #2
 80020a2:	d007      	beq.n	80020b4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020a4:	683b      	ldr	r3, [r7, #0]
 80020a6:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80020a8:	2b11      	cmp	r3, #17
 80020aa:	d003      	beq.n	80020b4 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80020ac:	683b      	ldr	r3, [r7, #0]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	2b12      	cmp	r3, #18
 80020b2:	d130      	bne.n	8002116 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80020ba:	697b      	ldr	r3, [r7, #20]
 80020bc:	005b      	lsls	r3, r3, #1
 80020be:	2203      	movs	r2, #3
 80020c0:	fa02 f303 	lsl.w	r3, r2, r3
 80020c4:	43db      	mvns	r3, r3
 80020c6:	693a      	ldr	r2, [r7, #16]
 80020c8:	4013      	ands	r3, r2
 80020ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80020cc:	683b      	ldr	r3, [r7, #0]
 80020ce:	68da      	ldr	r2, [r3, #12]
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	005b      	lsls	r3, r3, #1
 80020d4:	fa02 f303 	lsl.w	r3, r2, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4313      	orrs	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	693a      	ldr	r2, [r7, #16]
 80020e2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	685b      	ldr	r3, [r3, #4]
 80020e8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80020ea:	2201      	movs	r2, #1
 80020ec:	697b      	ldr	r3, [r7, #20]
 80020ee:	fa02 f303 	lsl.w	r3, r2, r3
 80020f2:	43db      	mvns	r3, r3
 80020f4:	693a      	ldr	r2, [r7, #16]
 80020f6:	4013      	ands	r3, r2
 80020f8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	685b      	ldr	r3, [r3, #4]
 80020fe:	091b      	lsrs	r3, r3, #4
 8002100:	f003 0201 	and.w	r2, r3, #1
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	693a      	ldr	r2, [r7, #16]
 800210c:	4313      	orrs	r3, r2
 800210e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	693a      	ldr	r2, [r7, #16]
 8002114:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	68db      	ldr	r3, [r3, #12]
 800211a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	005b      	lsls	r3, r3, #1
 8002120:	2203      	movs	r2, #3
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	693a      	ldr	r2, [r7, #16]
 800212a:	4013      	ands	r3, r2
 800212c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	689a      	ldr	r2, [r3, #8]
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	fa02 f303 	lsl.w	r3, r2, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4313      	orrs	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	693a      	ldr	r2, [r7, #16]
 8002144:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	685b      	ldr	r3, [r3, #4]
 800214a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	f000 809a 	beq.w	8002288 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002154:	4b55      	ldr	r3, [pc, #340]	; (80022ac <HAL_GPIO_Init+0x2d4>)
 8002156:	699b      	ldr	r3, [r3, #24]
 8002158:	4a54      	ldr	r2, [pc, #336]	; (80022ac <HAL_GPIO_Init+0x2d4>)
 800215a:	f043 0301 	orr.w	r3, r3, #1
 800215e:	6193      	str	r3, [r2, #24]
 8002160:	4b52      	ldr	r3, [pc, #328]	; (80022ac <HAL_GPIO_Init+0x2d4>)
 8002162:	699b      	ldr	r3, [r3, #24]
 8002164:	f003 0301 	and.w	r3, r3, #1
 8002168:	60bb      	str	r3, [r7, #8]
 800216a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800216c:	4a50      	ldr	r2, [pc, #320]	; (80022b0 <HAL_GPIO_Init+0x2d8>)
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	089b      	lsrs	r3, r3, #2
 8002172:	3302      	adds	r3, #2
 8002174:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002178:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	f003 0303 	and.w	r3, r3, #3
 8002180:	009b      	lsls	r3, r3, #2
 8002182:	220f      	movs	r2, #15
 8002184:	fa02 f303 	lsl.w	r3, r2, r3
 8002188:	43db      	mvns	r3, r3
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	4013      	ands	r3, r2
 800218e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002196:	d013      	beq.n	80021c0 <HAL_GPIO_Init+0x1e8>
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	4a46      	ldr	r2, [pc, #280]	; (80022b4 <HAL_GPIO_Init+0x2dc>)
 800219c:	4293      	cmp	r3, r2
 800219e:	d00d      	beq.n	80021bc <HAL_GPIO_Init+0x1e4>
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	4a45      	ldr	r2, [pc, #276]	; (80022b8 <HAL_GPIO_Init+0x2e0>)
 80021a4:	4293      	cmp	r3, r2
 80021a6:	d007      	beq.n	80021b8 <HAL_GPIO_Init+0x1e0>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	4a44      	ldr	r2, [pc, #272]	; (80022bc <HAL_GPIO_Init+0x2e4>)
 80021ac:	4293      	cmp	r3, r2
 80021ae:	d101      	bne.n	80021b4 <HAL_GPIO_Init+0x1dc>
 80021b0:	2303      	movs	r3, #3
 80021b2:	e006      	b.n	80021c2 <HAL_GPIO_Init+0x1ea>
 80021b4:	2305      	movs	r3, #5
 80021b6:	e004      	b.n	80021c2 <HAL_GPIO_Init+0x1ea>
 80021b8:	2302      	movs	r3, #2
 80021ba:	e002      	b.n	80021c2 <HAL_GPIO_Init+0x1ea>
 80021bc:	2301      	movs	r3, #1
 80021be:	e000      	b.n	80021c2 <HAL_GPIO_Init+0x1ea>
 80021c0:	2300      	movs	r3, #0
 80021c2:	697a      	ldr	r2, [r7, #20]
 80021c4:	f002 0203 	and.w	r2, r2, #3
 80021c8:	0092      	lsls	r2, r2, #2
 80021ca:	4093      	lsls	r3, r2
 80021cc:	693a      	ldr	r2, [r7, #16]
 80021ce:	4313      	orrs	r3, r2
 80021d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 80021d2:	4937      	ldr	r1, [pc, #220]	; (80022b0 <HAL_GPIO_Init+0x2d8>)
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	089b      	lsrs	r3, r3, #2
 80021d8:	3302      	adds	r3, #2
 80021da:	693a      	ldr	r2, [r7, #16]
 80021dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80021e0:	4b37      	ldr	r3, [pc, #220]	; (80022c0 <HAL_GPIO_Init+0x2e8>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	43db      	mvns	r3, r3
 80021ea:	693a      	ldr	r2, [r7, #16]
 80021ec:	4013      	ands	r3, r2
 80021ee:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	685b      	ldr	r3, [r3, #4]
 80021f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d003      	beq.n	8002204 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	4313      	orrs	r3, r2
 8002202:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002204:	4a2e      	ldr	r2, [pc, #184]	; (80022c0 <HAL_GPIO_Init+0x2e8>)
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800220a:	4b2d      	ldr	r3, [pc, #180]	; (80022c0 <HAL_GPIO_Init+0x2e8>)
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	43db      	mvns	r3, r3
 8002214:	693a      	ldr	r2, [r7, #16]
 8002216:	4013      	ands	r3, r2
 8002218:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d003      	beq.n	800222e <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 8002226:	693a      	ldr	r2, [r7, #16]
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	4313      	orrs	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800222e:	4a24      	ldr	r2, [pc, #144]	; (80022c0 <HAL_GPIO_Init+0x2e8>)
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002234:	4b22      	ldr	r3, [pc, #136]	; (80022c0 <HAL_GPIO_Init+0x2e8>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	43db      	mvns	r3, r3
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4013      	ands	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d003      	beq.n	8002258 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	68fb      	ldr	r3, [r7, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002258:	4a19      	ldr	r2, [pc, #100]	; (80022c0 <HAL_GPIO_Init+0x2e8>)
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800225e:	4b18      	ldr	r3, [pc, #96]	; (80022c0 <HAL_GPIO_Init+0x2e8>)
 8002260:	68db      	ldr	r3, [r3, #12]
 8002262:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	43db      	mvns	r3, r3
 8002268:	693a      	ldr	r2, [r7, #16]
 800226a:	4013      	ands	r3, r2
 800226c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800226e:	683b      	ldr	r3, [r7, #0]
 8002270:	685b      	ldr	r3, [r3, #4]
 8002272:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002276:	2b00      	cmp	r3, #0
 8002278:	d003      	beq.n	8002282 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	4313      	orrs	r3, r2
 8002280:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002282:	4a0f      	ldr	r2, [pc, #60]	; (80022c0 <HAL_GPIO_Init+0x2e8>)
 8002284:	693b      	ldr	r3, [r7, #16]
 8002286:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	3301      	adds	r3, #1
 800228c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	697b      	ldr	r3, [r7, #20]
 8002294:	fa22 f303 	lsr.w	r3, r2, r3
 8002298:	2b00      	cmp	r3, #0
 800229a:	f47f aea9 	bne.w	8001ff0 <HAL_GPIO_Init+0x18>
  }
}
 800229e:	bf00      	nop
 80022a0:	371c      	adds	r7, #28
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	40021000 	.word	0x40021000
 80022b0:	40010000 	.word	0x40010000
 80022b4:	48000400 	.word	0x48000400
 80022b8:	48000800 	.word	0x48000800
 80022bc:	48000c00 	.word	0x48000c00
 80022c0:	40010400 	.word	0x40010400

080022c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c4:	b480      	push	{r7}
 80022c6:	b083      	sub	sp, #12
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
 80022cc:	460b      	mov	r3, r1
 80022ce:	807b      	strh	r3, [r7, #2]
 80022d0:	4613      	mov	r3, r2
 80022d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d4:	787b      	ldrb	r3, [r7, #1]
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d003      	beq.n	80022e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80022da:	887a      	ldrh	r2, [r7, #2]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80022e0:	e002      	b.n	80022e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80022e2:	887a      	ldrh	r2, [r7, #2]
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr

080022f4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022f4:	b480      	push	{r7}
 80022f6:	b083      	sub	sp, #12
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
 80022fc:	460b      	mov	r3, r1
 80022fe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	695a      	ldr	r2, [r3, #20]
 8002304:	887b      	ldrh	r3, [r7, #2]
 8002306:	405a      	eors	r2, r3
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	615a      	str	r2, [r3, #20]
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002318:	b580      	push	{r7, lr}
 800231a:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 800231e:	af00      	add	r7, sp, #0
 8002320:	1d3b      	adds	r3, r7, #4
 8002322:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002324:	1d3b      	adds	r3, r7, #4
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	d102      	bne.n	8002332 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 800232c:	2301      	movs	r3, #1
 800232e:	f000 beda 	b.w	80030e6 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002332:	1d3b      	adds	r3, r7, #4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	2b00      	cmp	r3, #0
 800233e:	f000 816e 	beq.w	800261e <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002342:	4bb5      	ldr	r3, [pc, #724]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 8002344:	685b      	ldr	r3, [r3, #4]
 8002346:	f003 030c 	and.w	r3, r3, #12
 800234a:	2b04      	cmp	r3, #4
 800234c:	d00c      	beq.n	8002368 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800234e:	4bb2      	ldr	r3, [pc, #712]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 8002350:	685b      	ldr	r3, [r3, #4]
 8002352:	f003 030c 	and.w	r3, r3, #12
 8002356:	2b08      	cmp	r3, #8
 8002358:	d15a      	bne.n	8002410 <HAL_RCC_OscConfig+0xf8>
 800235a:	4baf      	ldr	r3, [pc, #700]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 800235c:	685b      	ldr	r3, [r3, #4]
 800235e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002362:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002366:	d153      	bne.n	8002410 <HAL_RCC_OscConfig+0xf8>
 8002368:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800236c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002370:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002374:	fa93 f3a3 	rbit	r3, r3
 8002378:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800237c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002380:	fab3 f383 	clz	r3, r3
 8002384:	b2db      	uxtb	r3, r3
 8002386:	095b      	lsrs	r3, r3, #5
 8002388:	b2db      	uxtb	r3, r3
 800238a:	f043 0301 	orr.w	r3, r3, #1
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d102      	bne.n	800239a <HAL_RCC_OscConfig+0x82>
 8002394:	4ba0      	ldr	r3, [pc, #640]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	e015      	b.n	80023c6 <HAL_RCC_OscConfig+0xae>
 800239a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800239e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023a2:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 80023a6:	fa93 f3a3 	rbit	r3, r3
 80023aa:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 80023ae:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80023b2:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 80023b6:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 80023ba:	fa93 f3a3 	rbit	r3, r3
 80023be:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 80023c2:	4b95      	ldr	r3, [pc, #596]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 80023c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80023ca:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 80023ce:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 80023d2:	fa92 f2a2 	rbit	r2, r2
 80023d6:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 80023da:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 80023de:	fab2 f282 	clz	r2, r2
 80023e2:	b252      	sxtb	r2, r2
 80023e4:	f042 0220 	orr.w	r2, r2, #32
 80023e8:	b252      	sxtb	r2, r2
 80023ea:	b2d2      	uxtb	r2, r2
 80023ec:	f002 021f 	and.w	r2, r2, #31
 80023f0:	2101      	movs	r1, #1
 80023f2:	fa01 f202 	lsl.w	r2, r1, r2
 80023f6:	4013      	ands	r3, r2
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	f000 810f 	beq.w	800261c <HAL_RCC_OscConfig+0x304>
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	2b00      	cmp	r3, #0
 8002406:	f040 8109 	bne.w	800261c <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	f000 be6b 	b.w	80030e6 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002410:	1d3b      	adds	r3, r7, #4
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800241a:	d106      	bne.n	800242a <HAL_RCC_OscConfig+0x112>
 800241c:	4b7e      	ldr	r3, [pc, #504]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	4a7d      	ldr	r2, [pc, #500]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 8002422:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002426:	6013      	str	r3, [r2, #0]
 8002428:	e030      	b.n	800248c <HAL_RCC_OscConfig+0x174>
 800242a:	1d3b      	adds	r3, r7, #4
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	2b00      	cmp	r3, #0
 8002432:	d10c      	bne.n	800244e <HAL_RCC_OscConfig+0x136>
 8002434:	4b78      	ldr	r3, [pc, #480]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a77      	ldr	r2, [pc, #476]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 800243a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800243e:	6013      	str	r3, [r2, #0]
 8002440:	4b75      	ldr	r3, [pc, #468]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	4a74      	ldr	r2, [pc, #464]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 8002446:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800244a:	6013      	str	r3, [r2, #0]
 800244c:	e01e      	b.n	800248c <HAL_RCC_OscConfig+0x174>
 800244e:	1d3b      	adds	r3, r7, #4
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	685b      	ldr	r3, [r3, #4]
 8002454:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002458:	d10c      	bne.n	8002474 <HAL_RCC_OscConfig+0x15c>
 800245a:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4a6e      	ldr	r2, [pc, #440]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 8002460:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002464:	6013      	str	r3, [r2, #0]
 8002466:	4b6c      	ldr	r3, [pc, #432]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	4a6b      	ldr	r2, [pc, #428]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	6013      	str	r3, [r2, #0]
 8002472:	e00b      	b.n	800248c <HAL_RCC_OscConfig+0x174>
 8002474:	4b68      	ldr	r3, [pc, #416]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a67      	ldr	r2, [pc, #412]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 800247a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800247e:	6013      	str	r3, [r2, #0]
 8002480:	4b65      	ldr	r3, [pc, #404]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a64      	ldr	r2, [pc, #400]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 8002486:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800248a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800248c:	4b62      	ldr	r3, [pc, #392]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 800248e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002490:	f023 020f 	bic.w	r2, r3, #15
 8002494:	1d3b      	adds	r3, r7, #4
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	495f      	ldr	r1, [pc, #380]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 800249c:	4313      	orrs	r3, r2
 800249e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80024a0:	1d3b      	adds	r3, r7, #4
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d05a      	beq.n	8002560 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024aa:	f7fe fc3f 	bl	8000d2c <HAL_GetTick>
 80024ae:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b2:	e00a      	b.n	80024ca <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024b4:	f7fe fc3a 	bl	8000d2c <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80024be:	1ad3      	subs	r3, r2, r3
 80024c0:	2b64      	cmp	r3, #100	; 0x64
 80024c2:	d902      	bls.n	80024ca <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 80024c4:	2303      	movs	r3, #3
 80024c6:	f000 be0e 	b.w	80030e6 <HAL_RCC_OscConfig+0xdce>
 80024ca:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024ce:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024d2:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 80024d6:	fa93 f3a3 	rbit	r3, r3
 80024da:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 80024de:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024e2:	fab3 f383 	clz	r3, r3
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	095b      	lsrs	r3, r3, #5
 80024ea:	b2db      	uxtb	r3, r3
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	b2db      	uxtb	r3, r3
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d102      	bne.n	80024fc <HAL_RCC_OscConfig+0x1e4>
 80024f6:	4b48      	ldr	r3, [pc, #288]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	e015      	b.n	8002528 <HAL_RCC_OscConfig+0x210>
 80024fc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002500:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002504:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8002510:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002514:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8002518:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 800251c:	fa93 f3a3 	rbit	r3, r3
 8002520:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8002524:	4b3c      	ldr	r3, [pc, #240]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 8002526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002528:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800252c:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8002530:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8002534:	fa92 f2a2 	rbit	r2, r2
 8002538:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 800253c:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8002540:	fab2 f282 	clz	r2, r2
 8002544:	b252      	sxtb	r2, r2
 8002546:	f042 0220 	orr.w	r2, r2, #32
 800254a:	b252      	sxtb	r2, r2
 800254c:	b2d2      	uxtb	r2, r2
 800254e:	f002 021f 	and.w	r2, r2, #31
 8002552:	2101      	movs	r1, #1
 8002554:	fa01 f202 	lsl.w	r2, r1, r2
 8002558:	4013      	ands	r3, r2
 800255a:	2b00      	cmp	r3, #0
 800255c:	d0aa      	beq.n	80024b4 <HAL_RCC_OscConfig+0x19c>
 800255e:	e05e      	b.n	800261e <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002560:	f7fe fbe4 	bl	8000d2c <HAL_GetTick>
 8002564:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002568:	e00a      	b.n	8002580 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800256a:	f7fe fbdf 	bl	8000d2c <HAL_GetTick>
 800256e:	4602      	mov	r2, r0
 8002570:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002574:	1ad3      	subs	r3, r2, r3
 8002576:	2b64      	cmp	r3, #100	; 0x64
 8002578:	d902      	bls.n	8002580 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800257a:	2303      	movs	r3, #3
 800257c:	f000 bdb3 	b.w	80030e6 <HAL_RCC_OscConfig+0xdce>
 8002580:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002584:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002588:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800258c:	fa93 f3a3 	rbit	r3, r3
 8002590:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8002594:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002598:	fab3 f383 	clz	r3, r3
 800259c:	b2db      	uxtb	r3, r3
 800259e:	095b      	lsrs	r3, r3, #5
 80025a0:	b2db      	uxtb	r3, r3
 80025a2:	f043 0301 	orr.w	r3, r3, #1
 80025a6:	b2db      	uxtb	r3, r3
 80025a8:	2b01      	cmp	r3, #1
 80025aa:	d102      	bne.n	80025b2 <HAL_RCC_OscConfig+0x29a>
 80025ac:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	e015      	b.n	80025de <HAL_RCC_OscConfig+0x2c6>
 80025b2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025b6:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025ba:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 80025be:	fa93 f3a3 	rbit	r3, r3
 80025c2:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 80025c6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80025ca:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 80025ce:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 80025d2:	fa93 f3a3 	rbit	r3, r3
 80025d6:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <HAL_RCC_OscConfig+0x300>)
 80025dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025de:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80025e2:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 80025e6:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 80025ea:	fa92 f2a2 	rbit	r2, r2
 80025ee:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 80025f2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80025f6:	fab2 f282 	clz	r2, r2
 80025fa:	b252      	sxtb	r2, r2
 80025fc:	f042 0220 	orr.w	r2, r2, #32
 8002600:	b252      	sxtb	r2, r2
 8002602:	b2d2      	uxtb	r2, r2
 8002604:	f002 021f 	and.w	r2, r2, #31
 8002608:	2101      	movs	r1, #1
 800260a:	fa01 f202 	lsl.w	r2, r1, r2
 800260e:	4013      	ands	r3, r2
 8002610:	2b00      	cmp	r3, #0
 8002612:	d1aa      	bne.n	800256a <HAL_RCC_OscConfig+0x252>
 8002614:	e003      	b.n	800261e <HAL_RCC_OscConfig+0x306>
 8002616:	bf00      	nop
 8002618:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800261c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800261e:	1d3b      	adds	r3, r7, #4
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0302 	and.w	r3, r3, #2
 8002628:	2b00      	cmp	r3, #0
 800262a:	f000 8170 	beq.w	800290e <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800262e:	4bd0      	ldr	r3, [pc, #832]	; (8002970 <HAL_RCC_OscConfig+0x658>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 030c 	and.w	r3, r3, #12
 8002636:	2b00      	cmp	r3, #0
 8002638:	d00b      	beq.n	8002652 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800263a:	4bcd      	ldr	r3, [pc, #820]	; (8002970 <HAL_RCC_OscConfig+0x658>)
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	f003 030c 	and.w	r3, r3, #12
 8002642:	2b08      	cmp	r3, #8
 8002644:	d16d      	bne.n	8002722 <HAL_RCC_OscConfig+0x40a>
 8002646:	4bca      	ldr	r3, [pc, #808]	; (8002970 <HAL_RCC_OscConfig+0x658>)
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d167      	bne.n	8002722 <HAL_RCC_OscConfig+0x40a>
 8002652:	2302      	movs	r3, #2
 8002654:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002658:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800265c:	fa93 f3a3 	rbit	r3, r3
 8002660:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8002664:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002668:	fab3 f383 	clz	r3, r3
 800266c:	b2db      	uxtb	r3, r3
 800266e:	095b      	lsrs	r3, r3, #5
 8002670:	b2db      	uxtb	r3, r3
 8002672:	f043 0301 	orr.w	r3, r3, #1
 8002676:	b2db      	uxtb	r3, r3
 8002678:	2b01      	cmp	r3, #1
 800267a:	d102      	bne.n	8002682 <HAL_RCC_OscConfig+0x36a>
 800267c:	4bbc      	ldr	r3, [pc, #752]	; (8002970 <HAL_RCC_OscConfig+0x658>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	e013      	b.n	80026aa <HAL_RCC_OscConfig+0x392>
 8002682:	2302      	movs	r3, #2
 8002684:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002688:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800268c:	fa93 f3a3 	rbit	r3, r3
 8002690:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002694:	2302      	movs	r3, #2
 8002696:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800269a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800269e:	fa93 f3a3 	rbit	r3, r3
 80026a2:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 80026a6:	4bb2      	ldr	r3, [pc, #712]	; (8002970 <HAL_RCC_OscConfig+0x658>)
 80026a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026aa:	2202      	movs	r2, #2
 80026ac:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 80026b0:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 80026b4:	fa92 f2a2 	rbit	r2, r2
 80026b8:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 80026bc:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 80026c0:	fab2 f282 	clz	r2, r2
 80026c4:	b252      	sxtb	r2, r2
 80026c6:	f042 0220 	orr.w	r2, r2, #32
 80026ca:	b252      	sxtb	r2, r2
 80026cc:	b2d2      	uxtb	r2, r2
 80026ce:	f002 021f 	and.w	r2, r2, #31
 80026d2:	2101      	movs	r1, #1
 80026d4:	fa01 f202 	lsl.w	r2, r1, r2
 80026d8:	4013      	ands	r3, r2
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d007      	beq.n	80026ee <HAL_RCC_OscConfig+0x3d6>
 80026de:	1d3b      	adds	r3, r7, #4
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	691b      	ldr	r3, [r3, #16]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d002      	beq.n	80026ee <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	f000 bcfc 	b.w	80030e6 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026ee:	4ba0      	ldr	r3, [pc, #640]	; (8002970 <HAL_RCC_OscConfig+0x658>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	6959      	ldr	r1, [r3, #20]
 80026fc:	23f8      	movs	r3, #248	; 0xf8
 80026fe:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002702:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 8002706:	fa93 f3a3 	rbit	r3, r3
 800270a:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 800270e:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 8002712:	fab3 f383 	clz	r3, r3
 8002716:	fa01 f303 	lsl.w	r3, r1, r3
 800271a:	4995      	ldr	r1, [pc, #596]	; (8002970 <HAL_RCC_OscConfig+0x658>)
 800271c:	4313      	orrs	r3, r2
 800271e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002720:	e0f5      	b.n	800290e <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002722:	1d3b      	adds	r3, r7, #4
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	691b      	ldr	r3, [r3, #16]
 8002728:	2b00      	cmp	r3, #0
 800272a:	f000 8085 	beq.w	8002838 <HAL_RCC_OscConfig+0x520>
 800272e:	2301      	movs	r3, #1
 8002730:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002734:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8002738:	fa93 f3a3 	rbit	r3, r3
 800273c:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 8002740:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002744:	fab3 f383 	clz	r3, r3
 8002748:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800274c:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	461a      	mov	r2, r3
 8002754:	2301      	movs	r3, #1
 8002756:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002758:	f7fe fae8 	bl	8000d2c <HAL_GetTick>
 800275c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002760:	e00a      	b.n	8002778 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002762:	f7fe fae3 	bl	8000d2c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800276c:	1ad3      	subs	r3, r2, r3
 800276e:	2b02      	cmp	r3, #2
 8002770:	d902      	bls.n	8002778 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8002772:	2303      	movs	r3, #3
 8002774:	f000 bcb7 	b.w	80030e6 <HAL_RCC_OscConfig+0xdce>
 8002778:	2302      	movs	r3, #2
 800277a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800277e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002782:	fa93 f3a3 	rbit	r3, r3
 8002786:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 800278a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800278e:	fab3 f383 	clz	r3, r3
 8002792:	b2db      	uxtb	r3, r3
 8002794:	095b      	lsrs	r3, r3, #5
 8002796:	b2db      	uxtb	r3, r3
 8002798:	f043 0301 	orr.w	r3, r3, #1
 800279c:	b2db      	uxtb	r3, r3
 800279e:	2b01      	cmp	r3, #1
 80027a0:	d102      	bne.n	80027a8 <HAL_RCC_OscConfig+0x490>
 80027a2:	4b73      	ldr	r3, [pc, #460]	; (8002970 <HAL_RCC_OscConfig+0x658>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	e013      	b.n	80027d0 <HAL_RCC_OscConfig+0x4b8>
 80027a8:	2302      	movs	r3, #2
 80027aa:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ae:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80027ba:	2302      	movs	r3, #2
 80027bc:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80027c0:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80027c4:	fa93 f3a3 	rbit	r3, r3
 80027c8:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80027cc:	4b68      	ldr	r3, [pc, #416]	; (8002970 <HAL_RCC_OscConfig+0x658>)
 80027ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027d0:	2202      	movs	r2, #2
 80027d2:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80027d6:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80027da:	fa92 f2a2 	rbit	r2, r2
 80027de:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 80027e2:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80027e6:	fab2 f282 	clz	r2, r2
 80027ea:	b252      	sxtb	r2, r2
 80027ec:	f042 0220 	orr.w	r2, r2, #32
 80027f0:	b252      	sxtb	r2, r2
 80027f2:	b2d2      	uxtb	r2, r2
 80027f4:	f002 021f 	and.w	r2, r2, #31
 80027f8:	2101      	movs	r1, #1
 80027fa:	fa01 f202 	lsl.w	r2, r1, r2
 80027fe:	4013      	ands	r3, r2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d0ae      	beq.n	8002762 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002804:	4b5a      	ldr	r3, [pc, #360]	; (8002970 <HAL_RCC_OscConfig+0x658>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800280c:	1d3b      	adds	r3, r7, #4
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6959      	ldr	r1, [r3, #20]
 8002812:	23f8      	movs	r3, #248	; 0xf8
 8002814:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002818:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 800281c:	fa93 f3a3 	rbit	r3, r3
 8002820:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 8002824:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 8002828:	fab3 f383 	clz	r3, r3
 800282c:	fa01 f303 	lsl.w	r3, r1, r3
 8002830:	494f      	ldr	r1, [pc, #316]	; (8002970 <HAL_RCC_OscConfig+0x658>)
 8002832:	4313      	orrs	r3, r2
 8002834:	600b      	str	r3, [r1, #0]
 8002836:	e06a      	b.n	800290e <HAL_RCC_OscConfig+0x5f6>
 8002838:	2301      	movs	r3, #1
 800283a:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800283e:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8002842:	fa93 f3a3 	rbit	r3, r3
 8002846:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 800284a:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800284e:	fab3 f383 	clz	r3, r3
 8002852:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002856:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	461a      	mov	r2, r3
 800285e:	2300      	movs	r3, #0
 8002860:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002862:	f7fe fa63 	bl	8000d2c <HAL_GetTick>
 8002866:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800286a:	e00a      	b.n	8002882 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800286c:	f7fe fa5e 	bl	8000d2c <HAL_GetTick>
 8002870:	4602      	mov	r2, r0
 8002872:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002876:	1ad3      	subs	r3, r2, r3
 8002878:	2b02      	cmp	r3, #2
 800287a:	d902      	bls.n	8002882 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	f000 bc32 	b.w	80030e6 <HAL_RCC_OscConfig+0xdce>
 8002882:	2302      	movs	r3, #2
 8002884:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002888:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800288c:	fa93 f3a3 	rbit	r3, r3
 8002890:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8002894:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002898:	fab3 f383 	clz	r3, r3
 800289c:	b2db      	uxtb	r3, r3
 800289e:	095b      	lsrs	r3, r3, #5
 80028a0:	b2db      	uxtb	r3, r3
 80028a2:	f043 0301 	orr.w	r3, r3, #1
 80028a6:	b2db      	uxtb	r3, r3
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d102      	bne.n	80028b2 <HAL_RCC_OscConfig+0x59a>
 80028ac:	4b30      	ldr	r3, [pc, #192]	; (8002970 <HAL_RCC_OscConfig+0x658>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	e013      	b.n	80028da <HAL_RCC_OscConfig+0x5c2>
 80028b2:	2302      	movs	r3, #2
 80028b4:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028b8:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80028bc:	fa93 f3a3 	rbit	r3, r3
 80028c0:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80028c4:	2302      	movs	r3, #2
 80028c6:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80028ca:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80028ce:	fa93 f3a3 	rbit	r3, r3
 80028d2:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80028d6:	4b26      	ldr	r3, [pc, #152]	; (8002970 <HAL_RCC_OscConfig+0x658>)
 80028d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028da:	2202      	movs	r2, #2
 80028dc:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80028e0:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80028e4:	fa92 f2a2 	rbit	r2, r2
 80028e8:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 80028ec:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80028f0:	fab2 f282 	clz	r2, r2
 80028f4:	b252      	sxtb	r2, r2
 80028f6:	f042 0220 	orr.w	r2, r2, #32
 80028fa:	b252      	sxtb	r2, r2
 80028fc:	b2d2      	uxtb	r2, r2
 80028fe:	f002 021f 	and.w	r2, r2, #31
 8002902:	2101      	movs	r1, #1
 8002904:	fa01 f202 	lsl.w	r2, r1, r2
 8002908:	4013      	ands	r3, r2
 800290a:	2b00      	cmp	r3, #0
 800290c:	d1ae      	bne.n	800286c <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800290e:	1d3b      	adds	r3, r7, #4
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f003 0308 	and.w	r3, r3, #8
 8002918:	2b00      	cmp	r3, #0
 800291a:	f000 80d8 	beq.w	8002ace <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800291e:	1d3b      	adds	r3, r7, #4
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	699b      	ldr	r3, [r3, #24]
 8002924:	2b00      	cmp	r3, #0
 8002926:	d067      	beq.n	80029f8 <HAL_RCC_OscConfig+0x6e0>
 8002928:	2301      	movs	r3, #1
 800292a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 800293a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800293e:	fab3 f383 	clz	r3, r3
 8002942:	461a      	mov	r2, r3
 8002944:	4b0b      	ldr	r3, [pc, #44]	; (8002974 <HAL_RCC_OscConfig+0x65c>)
 8002946:	4413      	add	r3, r2
 8002948:	009b      	lsls	r3, r3, #2
 800294a:	461a      	mov	r2, r3
 800294c:	2301      	movs	r3, #1
 800294e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002950:	f7fe f9ec 	bl	8000d2c <HAL_GetTick>
 8002954:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002958:	e00e      	b.n	8002978 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800295a:	f7fe f9e7 	bl	8000d2c <HAL_GetTick>
 800295e:	4602      	mov	r2, r0
 8002960:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002964:	1ad3      	subs	r3, r2, r3
 8002966:	2b02      	cmp	r3, #2
 8002968:	d906      	bls.n	8002978 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 800296a:	2303      	movs	r3, #3
 800296c:	e3bb      	b.n	80030e6 <HAL_RCC_OscConfig+0xdce>
 800296e:	bf00      	nop
 8002970:	40021000 	.word	0x40021000
 8002974:	10908120 	.word	0x10908120
 8002978:	2302      	movs	r3, #2
 800297a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800297e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002982:	fa93 f3a3 	rbit	r3, r3
 8002986:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800298a:	2302      	movs	r3, #2
 800298c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002990:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002994:	fa93 f2a3 	rbit	r2, r3
 8002998:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800299c:	601a      	str	r2, [r3, #0]
 800299e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80029a2:	2202      	movs	r2, #2
 80029a4:	601a      	str	r2, [r3, #0]
 80029a6:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	fa93 f2a3 	rbit	r2, r3
 80029b0:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 80029b4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b6:	4ba5      	ldr	r3, [pc, #660]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 80029b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80029ba:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80029be:	2102      	movs	r1, #2
 80029c0:	6019      	str	r1, [r3, #0]
 80029c2:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	fa93 f1a3 	rbit	r1, r3
 80029cc:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029d0:	6019      	str	r1, [r3, #0]
  return(result);
 80029d2:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	fab3 f383 	clz	r3, r3
 80029dc:	b25b      	sxtb	r3, r3
 80029de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80029e2:	b25b      	sxtb	r3, r3
 80029e4:	b2db      	uxtb	r3, r3
 80029e6:	f003 031f 	and.w	r3, r3, #31
 80029ea:	2101      	movs	r1, #1
 80029ec:	fa01 f303 	lsl.w	r3, r1, r3
 80029f0:	4013      	ands	r3, r2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0b1      	beq.n	800295a <HAL_RCC_OscConfig+0x642>
 80029f6:	e06a      	b.n	8002ace <HAL_RCC_OscConfig+0x7b6>
 80029f8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80029fc:	2201      	movs	r2, #1
 80029fe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a00:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	fa93 f2a3 	rbit	r2, r3
 8002a0a:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a0e:	601a      	str	r2, [r3, #0]
  return(result);
 8002a10:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 8002a14:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002a16:	fab3 f383 	clz	r3, r3
 8002a1a:	461a      	mov	r2, r3
 8002a1c:	4b8c      	ldr	r3, [pc, #560]	; (8002c50 <HAL_RCC_OscConfig+0x938>)
 8002a1e:	4413      	add	r3, r2
 8002a20:	009b      	lsls	r3, r3, #2
 8002a22:	461a      	mov	r2, r3
 8002a24:	2300      	movs	r3, #0
 8002a26:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a28:	f7fe f980 	bl	8000d2c <HAL_GetTick>
 8002a2c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a30:	e009      	b.n	8002a46 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a32:	f7fe f97b 	bl	8000d2c <HAL_GetTick>
 8002a36:	4602      	mov	r2, r0
 8002a38:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	2b02      	cmp	r3, #2
 8002a40:	d901      	bls.n	8002a46 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 8002a42:	2303      	movs	r3, #3
 8002a44:	e34f      	b.n	80030e6 <HAL_RCC_OscConfig+0xdce>
 8002a46:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a4a:	2202      	movs	r2, #2
 8002a4c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a4e:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	fa93 f2a3 	rbit	r2, r3
 8002a58:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a5c:	601a      	str	r2, [r3, #0]
 8002a5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a62:	2202      	movs	r2, #2
 8002a64:	601a      	str	r2, [r3, #0]
 8002a66:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	fa93 f2a3 	rbit	r2, r3
 8002a70:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a74:	601a      	str	r2, [r3, #0]
 8002a76:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a7a:	2202      	movs	r2, #2
 8002a7c:	601a      	str	r2, [r3, #0]
 8002a7e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	fa93 f2a3 	rbit	r2, r3
 8002a88:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a8c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a8e:	4b6f      	ldr	r3, [pc, #444]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002a90:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a92:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a96:	2102      	movs	r1, #2
 8002a98:	6019      	str	r1, [r3, #0]
 8002a9a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	fa93 f1a3 	rbit	r1, r3
 8002aa4:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002aa8:	6019      	str	r1, [r3, #0]
  return(result);
 8002aaa:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	fab3 f383 	clz	r3, r3
 8002ab4:	b25b      	sxtb	r3, r3
 8002ab6:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002aba:	b25b      	sxtb	r3, r3
 8002abc:	b2db      	uxtb	r3, r3
 8002abe:	f003 031f 	and.w	r3, r3, #31
 8002ac2:	2101      	movs	r1, #1
 8002ac4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac8:	4013      	ands	r3, r2
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d1b1      	bne.n	8002a32 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f003 0304 	and.w	r3, r3, #4
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	f000 8159 	beq.w	8002d90 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ade:	2300      	movs	r3, #0
 8002ae0:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ae4:	4b59      	ldr	r3, [pc, #356]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002ae6:	69db      	ldr	r3, [r3, #28]
 8002ae8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d112      	bne.n	8002b16 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af0:	4b56      	ldr	r3, [pc, #344]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	4a55      	ldr	r2, [pc, #340]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002af6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002afa:	61d3      	str	r3, [r2, #28]
 8002afc:	4b53      	ldr	r3, [pc, #332]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002afe:	69db      	ldr	r3, [r3, #28]
 8002b00:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002b04:	f107 030c 	add.w	r3, r7, #12
 8002b08:	601a      	str	r2, [r3, #0]
 8002b0a:	f107 030c 	add.w	r3, r7, #12
 8002b0e:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002b10:	2301      	movs	r3, #1
 8002b12:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	4b4f      	ldr	r3, [pc, #316]	; (8002c54 <HAL_RCC_OscConfig+0x93c>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d11a      	bne.n	8002b58 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b22:	4b4c      	ldr	r3, [pc, #304]	; (8002c54 <HAL_RCC_OscConfig+0x93c>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a4b      	ldr	r2, [pc, #300]	; (8002c54 <HAL_RCC_OscConfig+0x93c>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b2c:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe f8fd 	bl	8000d2c <HAL_GetTick>
 8002b32:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b36:	e009      	b.n	8002b4c <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b38:	f7fe f8f8 	bl	8000d2c <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b42:	1ad3      	subs	r3, r2, r3
 8002b44:	2b64      	cmp	r3, #100	; 0x64
 8002b46:	d901      	bls.n	8002b4c <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8002b48:	2303      	movs	r3, #3
 8002b4a:	e2cc      	b.n	80030e6 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b4c:	4b41      	ldr	r3, [pc, #260]	; (8002c54 <HAL_RCC_OscConfig+0x93c>)
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d0ef      	beq.n	8002b38 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b58:	1d3b      	adds	r3, r7, #4
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	68db      	ldr	r3, [r3, #12]
 8002b5e:	2b01      	cmp	r3, #1
 8002b60:	d106      	bne.n	8002b70 <HAL_RCC_OscConfig+0x858>
 8002b62:	4b3a      	ldr	r3, [pc, #232]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002b64:	6a1b      	ldr	r3, [r3, #32]
 8002b66:	4a39      	ldr	r2, [pc, #228]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002b68:	f043 0301 	orr.w	r3, r3, #1
 8002b6c:	6213      	str	r3, [r2, #32]
 8002b6e:	e02f      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8b8>
 8002b70:	1d3b      	adds	r3, r7, #4
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	68db      	ldr	r3, [r3, #12]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d10c      	bne.n	8002b94 <HAL_RCC_OscConfig+0x87c>
 8002b7a:	4b34      	ldr	r3, [pc, #208]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002b7c:	6a1b      	ldr	r3, [r3, #32]
 8002b7e:	4a33      	ldr	r2, [pc, #204]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002b80:	f023 0301 	bic.w	r3, r3, #1
 8002b84:	6213      	str	r3, [r2, #32]
 8002b86:	4b31      	ldr	r3, [pc, #196]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002b88:	6a1b      	ldr	r3, [r3, #32]
 8002b8a:	4a30      	ldr	r2, [pc, #192]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002b8c:	f023 0304 	bic.w	r3, r3, #4
 8002b90:	6213      	str	r3, [r2, #32]
 8002b92:	e01d      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8b8>
 8002b94:	1d3b      	adds	r3, r7, #4
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	68db      	ldr	r3, [r3, #12]
 8002b9a:	2b05      	cmp	r3, #5
 8002b9c:	d10c      	bne.n	8002bb8 <HAL_RCC_OscConfig+0x8a0>
 8002b9e:	4b2b      	ldr	r3, [pc, #172]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002ba0:	6a1b      	ldr	r3, [r3, #32]
 8002ba2:	4a2a      	ldr	r2, [pc, #168]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002ba4:	f043 0304 	orr.w	r3, r3, #4
 8002ba8:	6213      	str	r3, [r2, #32]
 8002baa:	4b28      	ldr	r3, [pc, #160]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002bac:	6a1b      	ldr	r3, [r3, #32]
 8002bae:	4a27      	ldr	r2, [pc, #156]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002bb0:	f043 0301 	orr.w	r3, r3, #1
 8002bb4:	6213      	str	r3, [r2, #32]
 8002bb6:	e00b      	b.n	8002bd0 <HAL_RCC_OscConfig+0x8b8>
 8002bb8:	4b24      	ldr	r3, [pc, #144]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002bba:	6a1b      	ldr	r3, [r3, #32]
 8002bbc:	4a23      	ldr	r2, [pc, #140]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002bbe:	f023 0301 	bic.w	r3, r3, #1
 8002bc2:	6213      	str	r3, [r2, #32]
 8002bc4:	4b21      	ldr	r3, [pc, #132]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002bc6:	6a1b      	ldr	r3, [r3, #32]
 8002bc8:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002bca:	f023 0304 	bic.w	r3, r3, #4
 8002bce:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002bd0:	1d3b      	adds	r3, r7, #4
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d06b      	beq.n	8002cb2 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002bda:	f7fe f8a7 	bl	8000d2c <HAL_GetTick>
 8002bde:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be2:	e00b      	b.n	8002bfc <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002be4:	f7fe f8a2 	bl	8000d2c <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002bee:	1ad3      	subs	r3, r2, r3
 8002bf0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002bf4:	4293      	cmp	r3, r2
 8002bf6:	d901      	bls.n	8002bfc <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8002bf8:	2303      	movs	r3, #3
 8002bfa:	e274      	b.n	80030e6 <HAL_RCC_OscConfig+0xdce>
 8002bfc:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c00:	2202      	movs	r2, #2
 8002c02:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c04:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	fa93 f2a3 	rbit	r2, r3
 8002c0e:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002c12:	601a      	str	r2, [r3, #0]
 8002c14:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c18:	2202      	movs	r2, #2
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	fa93 f2a3 	rbit	r2, r3
 8002c26:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c2a:	601a      	str	r2, [r3, #0]
  return(result);
 8002c2c:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002c30:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c32:	fab3 f383 	clz	r3, r3
 8002c36:	b2db      	uxtb	r3, r3
 8002c38:	095b      	lsrs	r3, r3, #5
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	f043 0302 	orr.w	r3, r3, #2
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b02      	cmp	r3, #2
 8002c44:	d108      	bne.n	8002c58 <HAL_RCC_OscConfig+0x940>
 8002c46:	4b01      	ldr	r3, [pc, #4]	; (8002c4c <HAL_RCC_OscConfig+0x934>)
 8002c48:	6a1b      	ldr	r3, [r3, #32]
 8002c4a:	e013      	b.n	8002c74 <HAL_RCC_OscConfig+0x95c>
 8002c4c:	40021000 	.word	0x40021000
 8002c50:	10908120 	.word	0x10908120
 8002c54:	40007000 	.word	0x40007000
 8002c58:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c5c:	2202      	movs	r2, #2
 8002c5e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c60:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	fa93 f2a3 	rbit	r2, r3
 8002c6a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c6e:	601a      	str	r2, [r3, #0]
 8002c70:	4bbb      	ldr	r3, [pc, #748]	; (8002f60 <HAL_RCC_OscConfig+0xc48>)
 8002c72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c74:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002c78:	2102      	movs	r1, #2
 8002c7a:	6011      	str	r1, [r2, #0]
 8002c7c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002c80:	6812      	ldr	r2, [r2, #0]
 8002c82:	fa92 f1a2 	rbit	r1, r2
 8002c86:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c8a:	6011      	str	r1, [r2, #0]
  return(result);
 8002c8c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c90:	6812      	ldr	r2, [r2, #0]
 8002c92:	fab2 f282 	clz	r2, r2
 8002c96:	b252      	sxtb	r2, r2
 8002c98:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c9c:	b252      	sxtb	r2, r2
 8002c9e:	b2d2      	uxtb	r2, r2
 8002ca0:	f002 021f 	and.w	r2, r2, #31
 8002ca4:	2101      	movs	r1, #1
 8002ca6:	fa01 f202 	lsl.w	r2, r1, r2
 8002caa:	4013      	ands	r3, r2
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d099      	beq.n	8002be4 <HAL_RCC_OscConfig+0x8cc>
 8002cb0:	e064      	b.n	8002d7c <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002cb2:	f7fe f83b 	bl	8000d2c <HAL_GetTick>
 8002cb6:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cba:	e00b      	b.n	8002cd4 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cbc:	f7fe f836 	bl	8000d2c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ccc:	4293      	cmp	r3, r2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e208      	b.n	80030e6 <HAL_RCC_OscConfig+0xdce>
 8002cd4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002cd8:	2202      	movs	r2, #2
 8002cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	fa93 f2a3 	rbit	r2, r3
 8002ce6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cf0:	2202      	movs	r2, #2
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	fa93 f2a3 	rbit	r2, r3
 8002cfe:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d02:	601a      	str	r2, [r3, #0]
  return(result);
 8002d04:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002d08:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d0a:	fab3 f383 	clz	r3, r3
 8002d0e:	b2db      	uxtb	r3, r3
 8002d10:	095b      	lsrs	r3, r3, #5
 8002d12:	b2db      	uxtb	r3, r3
 8002d14:	f043 0302 	orr.w	r3, r3, #2
 8002d18:	b2db      	uxtb	r3, r3
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d102      	bne.n	8002d24 <HAL_RCC_OscConfig+0xa0c>
 8002d1e:	4b90      	ldr	r3, [pc, #576]	; (8002f60 <HAL_RCC_OscConfig+0xc48>)
 8002d20:	6a1b      	ldr	r3, [r3, #32]
 8002d22:	e00d      	b.n	8002d40 <HAL_RCC_OscConfig+0xa28>
 8002d24:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d28:	2202      	movs	r2, #2
 8002d2a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d2c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	fa93 f2a3 	rbit	r2, r3
 8002d36:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002d3a:	601a      	str	r2, [r3, #0]
 8002d3c:	4b88      	ldr	r3, [pc, #544]	; (8002f60 <HAL_RCC_OscConfig+0xc48>)
 8002d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d40:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d44:	2102      	movs	r1, #2
 8002d46:	6011      	str	r1, [r2, #0]
 8002d48:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002d4c:	6812      	ldr	r2, [r2, #0]
 8002d4e:	fa92 f1a2 	rbit	r1, r2
 8002d52:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d56:	6011      	str	r1, [r2, #0]
  return(result);
 8002d58:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d5c:	6812      	ldr	r2, [r2, #0]
 8002d5e:	fab2 f282 	clz	r2, r2
 8002d62:	b252      	sxtb	r2, r2
 8002d64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d68:	b252      	sxtb	r2, r2
 8002d6a:	b2d2      	uxtb	r2, r2
 8002d6c:	f002 021f 	and.w	r2, r2, #31
 8002d70:	2101      	movs	r1, #1
 8002d72:	fa01 f202 	lsl.w	r2, r1, r2
 8002d76:	4013      	ands	r3, r2
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d19f      	bne.n	8002cbc <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d7c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d80:	2b01      	cmp	r3, #1
 8002d82:	d105      	bne.n	8002d90 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d84:	4b76      	ldr	r3, [pc, #472]	; (8002f60 <HAL_RCC_OscConfig+0xc48>)
 8002d86:	69db      	ldr	r3, [r3, #28]
 8002d88:	4a75      	ldr	r2, [pc, #468]	; (8002f60 <HAL_RCC_OscConfig+0xc48>)
 8002d8a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d8e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d90:	1d3b      	adds	r3, r7, #4
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	69db      	ldr	r3, [r3, #28]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f000 81a4 	beq.w	80030e4 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d9c:	4b70      	ldr	r3, [pc, #448]	; (8002f60 <HAL_RCC_OscConfig+0xc48>)
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 030c 	and.w	r3, r3, #12
 8002da4:	2b08      	cmp	r3, #8
 8002da6:	f000 819b 	beq.w	80030e0 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002daa:	1d3b      	adds	r3, r7, #4
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69db      	ldr	r3, [r3, #28]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	f040 8113 	bne.w	8002fdc <HAL_RCC_OscConfig+0xcc4>
 8002db6:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002dba:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002dbe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc0:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	fa93 f2a3 	rbit	r2, r3
 8002dca:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002dce:	601a      	str	r2, [r3, #0]
  return(result);
 8002dd0:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002dd4:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dd6:	fab3 f383 	clz	r3, r3
 8002dda:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002dde:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	461a      	mov	r2, r3
 8002de6:	2300      	movs	r3, #0
 8002de8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dea:	f7fd ff9f 	bl	8000d2c <HAL_GetTick>
 8002dee:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002df2:	e009      	b.n	8002e08 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002df4:	f7fd ff9a 	bl	8000d2c <HAL_GetTick>
 8002df8:	4602      	mov	r2, r0
 8002dfa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dfe:	1ad3      	subs	r3, r2, r3
 8002e00:	2b02      	cmp	r3, #2
 8002e02:	d901      	bls.n	8002e08 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8002e04:	2303      	movs	r3, #3
 8002e06:	e16e      	b.n	80030e6 <HAL_RCC_OscConfig+0xdce>
 8002e08:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e0c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e10:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e12:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	fa93 f2a3 	rbit	r2, r3
 8002e1c:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e20:	601a      	str	r2, [r3, #0]
  return(result);
 8002e22:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002e26:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002e28:	fab3 f383 	clz	r3, r3
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d102      	bne.n	8002e42 <HAL_RCC_OscConfig+0xb2a>
 8002e3c:	4b48      	ldr	r3, [pc, #288]	; (8002f60 <HAL_RCC_OscConfig+0xc48>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	e01b      	b.n	8002e7a <HAL_RCC_OscConfig+0xb62>
 8002e42:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e46:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e4a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e4c:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	fa93 f2a3 	rbit	r2, r3
 8002e56:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e5a:	601a      	str	r2, [r3, #0]
 8002e5c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e64:	601a      	str	r2, [r3, #0]
 8002e66:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	fa93 f2a3 	rbit	r2, r3
 8002e70:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e74:	601a      	str	r2, [r3, #0]
 8002e76:	4b3a      	ldr	r3, [pc, #232]	; (8002f60 <HAL_RCC_OscConfig+0xc48>)
 8002e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e7a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002e7e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e82:	6011      	str	r1, [r2, #0]
 8002e84:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002e88:	6812      	ldr	r2, [r2, #0]
 8002e8a:	fa92 f1a2 	rbit	r1, r2
 8002e8e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e92:	6011      	str	r1, [r2, #0]
  return(result);
 8002e94:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e98:	6812      	ldr	r2, [r2, #0]
 8002e9a:	fab2 f282 	clz	r2, r2
 8002e9e:	b252      	sxtb	r2, r2
 8002ea0:	f042 0220 	orr.w	r2, r2, #32
 8002ea4:	b252      	sxtb	r2, r2
 8002ea6:	b2d2      	uxtb	r2, r2
 8002ea8:	f002 021f 	and.w	r2, r2, #31
 8002eac:	2101      	movs	r1, #1
 8002eae:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb2:	4013      	ands	r3, r2
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d19d      	bne.n	8002df4 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002eb8:	4b29      	ldr	r3, [pc, #164]	; (8002f60 <HAL_RCC_OscConfig+0xc48>)
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002ec0:	1d3b      	adds	r3, r7, #4
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6a1b      	ldr	r3, [r3, #32]
 8002ecc:	430b      	orrs	r3, r1
 8002ece:	4924      	ldr	r1, [pc, #144]	; (8002f60 <HAL_RCC_OscConfig+0xc48>)
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	604b      	str	r3, [r1, #4]
 8002ed4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ed8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002edc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ede:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	fa93 f2a3 	rbit	r2, r3
 8002ee8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002eec:	601a      	str	r2, [r3, #0]
  return(result);
 8002eee:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ef2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef4:	fab3 f383 	clz	r3, r3
 8002ef8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002efc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002f00:	009b      	lsls	r3, r3, #2
 8002f02:	461a      	mov	r2, r3
 8002f04:	2301      	movs	r3, #1
 8002f06:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f08:	f7fd ff10 	bl	8000d2c <HAL_GetTick>
 8002f0c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f10:	e009      	b.n	8002f26 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002f12:	f7fd ff0b 	bl	8000d2c <HAL_GetTick>
 8002f16:	4602      	mov	r2, r0
 8002f18:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002f1c:	1ad3      	subs	r3, r2, r3
 8002f1e:	2b02      	cmp	r3, #2
 8002f20:	d901      	bls.n	8002f26 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8002f22:	2303      	movs	r3, #3
 8002f24:	e0df      	b.n	80030e6 <HAL_RCC_OscConfig+0xdce>
 8002f26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f2a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f2e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	fa93 f2a3 	rbit	r2, r3
 8002f3a:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f3e:	601a      	str	r2, [r3, #0]
  return(result);
 8002f40:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002f44:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002f46:	fab3 f383 	clz	r3, r3
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	095b      	lsrs	r3, r3, #5
 8002f4e:	b2db      	uxtb	r3, r3
 8002f50:	f043 0301 	orr.w	r3, r3, #1
 8002f54:	b2db      	uxtb	r3, r3
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d104      	bne.n	8002f64 <HAL_RCC_OscConfig+0xc4c>
 8002f5a:	4b01      	ldr	r3, [pc, #4]	; (8002f60 <HAL_RCC_OscConfig+0xc48>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	e01d      	b.n	8002f9c <HAL_RCC_OscConfig+0xc84>
 8002f60:	40021000 	.word	0x40021000
 8002f64:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f68:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f6c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f6e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	fa93 f2a3 	rbit	r2, r3
 8002f78:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f7c:	601a      	str	r2, [r3, #0]
 8002f7e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f82:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f86:	601a      	str	r2, [r3, #0]
 8002f88:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	fa93 f2a3 	rbit	r2, r3
 8002f92:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f96:	601a      	str	r2, [r3, #0]
 8002f98:	4b55      	ldr	r3, [pc, #340]	; (80030f0 <HAL_RCC_OscConfig+0xdd8>)
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f9c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002fa0:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002fa4:	6011      	str	r1, [r2, #0]
 8002fa6:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	fa92 f1a2 	rbit	r1, r2
 8002fb0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fb4:	6011      	str	r1, [r2, #0]
  return(result);
 8002fb6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	fab2 f282 	clz	r2, r2
 8002fc0:	b252      	sxtb	r2, r2
 8002fc2:	f042 0220 	orr.w	r2, r2, #32
 8002fc6:	b252      	sxtb	r2, r2
 8002fc8:	b2d2      	uxtb	r2, r2
 8002fca:	f002 021f 	and.w	r2, r2, #31
 8002fce:	2101      	movs	r1, #1
 8002fd0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d09b      	beq.n	8002f12 <HAL_RCC_OscConfig+0xbfa>
 8002fda:	e083      	b.n	80030e4 <HAL_RCC_OscConfig+0xdcc>
 8002fdc:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fe0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002fe4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe6:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	fa93 f2a3 	rbit	r2, r3
 8002ff0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ff4:	601a      	str	r2, [r3, #0]
  return(result);
 8002ff6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002ffa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ffc:	fab3 f383 	clz	r3, r3
 8003000:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8003004:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8003008:	009b      	lsls	r3, r3, #2
 800300a:	461a      	mov	r2, r3
 800300c:	2300      	movs	r3, #0
 800300e:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003010:	f7fd fe8c 	bl	8000d2c <HAL_GetTick>
 8003014:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003018:	e009      	b.n	800302e <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800301a:	f7fd fe87 	bl	8000d2c <HAL_GetTick>
 800301e:	4602      	mov	r2, r0
 8003020:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8003024:	1ad3      	subs	r3, r2, r3
 8003026:	2b02      	cmp	r3, #2
 8003028:	d901      	bls.n	800302e <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 800302a:	2303      	movs	r3, #3
 800302c:	e05b      	b.n	80030e6 <HAL_RCC_OscConfig+0xdce>
 800302e:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8003032:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003036:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003038:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	fa93 f2a3 	rbit	r2, r3
 8003042:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003046:	601a      	str	r2, [r3, #0]
  return(result);
 8003048:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800304c:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800304e:	fab3 f383 	clz	r3, r3
 8003052:	b2db      	uxtb	r3, r3
 8003054:	095b      	lsrs	r3, r3, #5
 8003056:	b2db      	uxtb	r3, r3
 8003058:	f043 0301 	orr.w	r3, r3, #1
 800305c:	b2db      	uxtb	r3, r3
 800305e:	2b01      	cmp	r3, #1
 8003060:	d102      	bne.n	8003068 <HAL_RCC_OscConfig+0xd50>
 8003062:	4b23      	ldr	r3, [pc, #140]	; (80030f0 <HAL_RCC_OscConfig+0xdd8>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	e01b      	b.n	80030a0 <HAL_RCC_OscConfig+0xd88>
 8003068:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800306c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003070:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003072:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	fa93 f2a3 	rbit	r2, r3
 800307c:	f107 0320 	add.w	r3, r7, #32
 8003080:	601a      	str	r2, [r3, #0]
 8003082:	f107 031c 	add.w	r3, r7, #28
 8003086:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800308a:	601a      	str	r2, [r3, #0]
 800308c:	f107 031c 	add.w	r3, r7, #28
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	fa93 f2a3 	rbit	r2, r3
 8003096:	f107 0318 	add.w	r3, r7, #24
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	4b14      	ldr	r3, [pc, #80]	; (80030f0 <HAL_RCC_OscConfig+0xdd8>)
 800309e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030a0:	f107 0214 	add.w	r2, r7, #20
 80030a4:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80030a8:	6011      	str	r1, [r2, #0]
 80030aa:	f107 0214 	add.w	r2, r7, #20
 80030ae:	6812      	ldr	r2, [r2, #0]
 80030b0:	fa92 f1a2 	rbit	r1, r2
 80030b4:	f107 0210 	add.w	r2, r7, #16
 80030b8:	6011      	str	r1, [r2, #0]
  return(result);
 80030ba:	f107 0210 	add.w	r2, r7, #16
 80030be:	6812      	ldr	r2, [r2, #0]
 80030c0:	fab2 f282 	clz	r2, r2
 80030c4:	b252      	sxtb	r2, r2
 80030c6:	f042 0220 	orr.w	r2, r2, #32
 80030ca:	b252      	sxtb	r2, r2
 80030cc:	b2d2      	uxtb	r2, r2
 80030ce:	f002 021f 	and.w	r2, r2, #31
 80030d2:	2101      	movs	r1, #1
 80030d4:	fa01 f202 	lsl.w	r2, r1, r2
 80030d8:	4013      	ands	r3, r2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d19d      	bne.n	800301a <HAL_RCC_OscConfig+0xd02>
 80030de:	e001      	b.n	80030e4 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e000      	b.n	80030e6 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 80030e4:	2300      	movs	r3, #0
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	f507 7700 	add.w	r7, r7, #512	; 0x200
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	40021000 	.word	0x40021000

080030f4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b09e      	sub	sp, #120	; 0x78
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
 80030fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e164      	b.n	80033d6 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800310c:	4b92      	ldr	r3, [pc, #584]	; (8003358 <HAL_RCC_ClockConfig+0x264>)
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f003 0307 	and.w	r3, r3, #7
 8003114:	683a      	ldr	r2, [r7, #0]
 8003116:	429a      	cmp	r2, r3
 8003118:	d910      	bls.n	800313c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800311a:	4b8f      	ldr	r3, [pc, #572]	; (8003358 <HAL_RCC_ClockConfig+0x264>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	f023 0207 	bic.w	r2, r3, #7
 8003122:	498d      	ldr	r1, [pc, #564]	; (8003358 <HAL_RCC_ClockConfig+0x264>)
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	4313      	orrs	r3, r2
 8003128:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800312a:	4b8b      	ldr	r3, [pc, #556]	; (8003358 <HAL_RCC_ClockConfig+0x264>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 0307 	and.w	r3, r3, #7
 8003132:	683a      	ldr	r2, [r7, #0]
 8003134:	429a      	cmp	r2, r3
 8003136:	d001      	beq.n	800313c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003138:	2301      	movs	r3, #1
 800313a:	e14c      	b.n	80033d6 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f003 0302 	and.w	r3, r3, #2
 8003144:	2b00      	cmp	r3, #0
 8003146:	d008      	beq.n	800315a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003148:	4b84      	ldr	r3, [pc, #528]	; (800335c <HAL_RCC_ClockConfig+0x268>)
 800314a:	685b      	ldr	r3, [r3, #4]
 800314c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	4981      	ldr	r1, [pc, #516]	; (800335c <HAL_RCC_ClockConfig+0x268>)
 8003156:	4313      	orrs	r3, r2
 8003158:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	f003 0301 	and.w	r3, r3, #1
 8003162:	2b00      	cmp	r3, #0
 8003164:	f000 80df 	beq.w	8003326 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b01      	cmp	r3, #1
 800316e:	d13d      	bne.n	80031ec <HAL_RCC_ClockConfig+0xf8>
 8003170:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003174:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003176:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003178:	fa93 f3a3 	rbit	r3, r3
 800317c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800317e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003180:	fab3 f383 	clz	r3, r3
 8003184:	b2db      	uxtb	r3, r3
 8003186:	095b      	lsrs	r3, r3, #5
 8003188:	b2db      	uxtb	r3, r3
 800318a:	f043 0301 	orr.w	r3, r3, #1
 800318e:	b2db      	uxtb	r3, r3
 8003190:	2b01      	cmp	r3, #1
 8003192:	d102      	bne.n	800319a <HAL_RCC_ClockConfig+0xa6>
 8003194:	4b71      	ldr	r3, [pc, #452]	; (800335c <HAL_RCC_ClockConfig+0x268>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	e00f      	b.n	80031ba <HAL_RCC_ClockConfig+0xc6>
 800319a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800319e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031a0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80031a2:	fa93 f3a3 	rbit	r3, r3
 80031a6:	667b      	str	r3, [r7, #100]	; 0x64
 80031a8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80031ac:	663b      	str	r3, [r7, #96]	; 0x60
 80031ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80031b0:	fa93 f3a3 	rbit	r3, r3
 80031b4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80031b6:	4b69      	ldr	r3, [pc, #420]	; (800335c <HAL_RCC_ClockConfig+0x268>)
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80031be:	65ba      	str	r2, [r7, #88]	; 0x58
 80031c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80031c2:	fa92 f2a2 	rbit	r2, r2
 80031c6:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 80031c8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80031ca:	fab2 f282 	clz	r2, r2
 80031ce:	b252      	sxtb	r2, r2
 80031d0:	f042 0220 	orr.w	r2, r2, #32
 80031d4:	b252      	sxtb	r2, r2
 80031d6:	b2d2      	uxtb	r2, r2
 80031d8:	f002 021f 	and.w	r2, r2, #31
 80031dc:	2101      	movs	r1, #1
 80031de:	fa01 f202 	lsl.w	r2, r1, r2
 80031e2:	4013      	ands	r3, r2
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d17d      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e0f4      	b.n	80033d6 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d13d      	bne.n	8003270 <HAL_RCC_ClockConfig+0x17c>
 80031f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031f8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031fc:	fa93 f3a3 	rbit	r3, r3
 8003200:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 8003202:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003204:	fab3 f383 	clz	r3, r3
 8003208:	b2db      	uxtb	r3, r3
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	b2db      	uxtb	r3, r3
 800320e:	f043 0301 	orr.w	r3, r3, #1
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	d102      	bne.n	800321e <HAL_RCC_ClockConfig+0x12a>
 8003218:	4b50      	ldr	r3, [pc, #320]	; (800335c <HAL_RCC_ClockConfig+0x268>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	e00f      	b.n	800323e <HAL_RCC_ClockConfig+0x14a>
 800321e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003222:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	647b      	str	r3, [r7, #68]	; 0x44
 800322c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003230:	643b      	str	r3, [r7, #64]	; 0x40
 8003232:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003234:	fa93 f3a3 	rbit	r3, r3
 8003238:	63fb      	str	r3, [r7, #60]	; 0x3c
 800323a:	4b48      	ldr	r3, [pc, #288]	; (800335c <HAL_RCC_ClockConfig+0x268>)
 800323c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003242:	63ba      	str	r2, [r7, #56]	; 0x38
 8003244:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003246:	fa92 f2a2 	rbit	r2, r2
 800324a:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 800324c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800324e:	fab2 f282 	clz	r2, r2
 8003252:	b252      	sxtb	r2, r2
 8003254:	f042 0220 	orr.w	r2, r2, #32
 8003258:	b252      	sxtb	r2, r2
 800325a:	b2d2      	uxtb	r2, r2
 800325c:	f002 021f 	and.w	r2, r2, #31
 8003260:	2101      	movs	r1, #1
 8003262:	fa01 f202 	lsl.w	r2, r1, r2
 8003266:	4013      	ands	r3, r2
 8003268:	2b00      	cmp	r3, #0
 800326a:	d13b      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	e0b2      	b.n	80033d6 <HAL_RCC_ClockConfig+0x2e2>
 8003270:	2302      	movs	r3, #2
 8003272:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003276:	fa93 f3a3 	rbit	r3, r3
 800327a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800327c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800327e:	fab3 f383 	clz	r3, r3
 8003282:	b2db      	uxtb	r3, r3
 8003284:	095b      	lsrs	r3, r3, #5
 8003286:	b2db      	uxtb	r3, r3
 8003288:	f043 0301 	orr.w	r3, r3, #1
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b01      	cmp	r3, #1
 8003290:	d102      	bne.n	8003298 <HAL_RCC_ClockConfig+0x1a4>
 8003292:	4b32      	ldr	r3, [pc, #200]	; (800335c <HAL_RCC_ClockConfig+0x268>)
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	e00d      	b.n	80032b4 <HAL_RCC_ClockConfig+0x1c0>
 8003298:	2302      	movs	r3, #2
 800329a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800329c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800329e:	fa93 f3a3 	rbit	r3, r3
 80032a2:	627b      	str	r3, [r7, #36]	; 0x24
 80032a4:	2302      	movs	r3, #2
 80032a6:	623b      	str	r3, [r7, #32]
 80032a8:	6a3b      	ldr	r3, [r7, #32]
 80032aa:	fa93 f3a3 	rbit	r3, r3
 80032ae:	61fb      	str	r3, [r7, #28]
 80032b0:	4b2a      	ldr	r3, [pc, #168]	; (800335c <HAL_RCC_ClockConfig+0x268>)
 80032b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032b4:	2202      	movs	r2, #2
 80032b6:	61ba      	str	r2, [r7, #24]
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	fa92 f2a2 	rbit	r2, r2
 80032be:	617a      	str	r2, [r7, #20]
  return(result);
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	fab2 f282 	clz	r2, r2
 80032c6:	b252      	sxtb	r2, r2
 80032c8:	f042 0220 	orr.w	r2, r2, #32
 80032cc:	b252      	sxtb	r2, r2
 80032ce:	b2d2      	uxtb	r2, r2
 80032d0:	f002 021f 	and.w	r2, r2, #31
 80032d4:	2101      	movs	r1, #1
 80032d6:	fa01 f202 	lsl.w	r2, r1, r2
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e078      	b.n	80033d6 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032e4:	4b1d      	ldr	r3, [pc, #116]	; (800335c <HAL_RCC_ClockConfig+0x268>)
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	f023 0203 	bic.w	r2, r3, #3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	491a      	ldr	r1, [pc, #104]	; (800335c <HAL_RCC_ClockConfig+0x268>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032f6:	f7fd fd19 	bl	8000d2c <HAL_GetTick>
 80032fa:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032fc:	e00a      	b.n	8003314 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032fe:	f7fd fd15 	bl	8000d2c <HAL_GetTick>
 8003302:	4602      	mov	r2, r0
 8003304:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003306:	1ad3      	subs	r3, r2, r3
 8003308:	f241 3288 	movw	r2, #5000	; 0x1388
 800330c:	4293      	cmp	r3, r2
 800330e:	d901      	bls.n	8003314 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 8003310:	2303      	movs	r3, #3
 8003312:	e060      	b.n	80033d6 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003314:	4b11      	ldr	r3, [pc, #68]	; (800335c <HAL_RCC_ClockConfig+0x268>)
 8003316:	685b      	ldr	r3, [r3, #4]
 8003318:	f003 020c 	and.w	r2, r3, #12
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	429a      	cmp	r2, r3
 8003324:	d1eb      	bne.n	80032fe <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003326:	4b0c      	ldr	r3, [pc, #48]	; (8003358 <HAL_RCC_ClockConfig+0x264>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f003 0307 	and.w	r3, r3, #7
 800332e:	683a      	ldr	r2, [r7, #0]
 8003330:	429a      	cmp	r2, r3
 8003332:	d215      	bcs.n	8003360 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003334:	4b08      	ldr	r3, [pc, #32]	; (8003358 <HAL_RCC_ClockConfig+0x264>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f023 0207 	bic.w	r2, r3, #7
 800333c:	4906      	ldr	r1, [pc, #24]	; (8003358 <HAL_RCC_ClockConfig+0x264>)
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	4313      	orrs	r3, r2
 8003342:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <HAL_RCC_ClockConfig+0x264>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0307 	and.w	r3, r3, #7
 800334c:	683a      	ldr	r2, [r7, #0]
 800334e:	429a      	cmp	r2, r3
 8003350:	d006      	beq.n	8003360 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	e03f      	b.n	80033d6 <HAL_RCC_ClockConfig+0x2e2>
 8003356:	bf00      	nop
 8003358:	40022000 	.word	0x40022000
 800335c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f003 0304 	and.w	r3, r3, #4
 8003368:	2b00      	cmp	r3, #0
 800336a:	d008      	beq.n	800337e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800336c:	4b1c      	ldr	r3, [pc, #112]	; (80033e0 <HAL_RCC_ClockConfig+0x2ec>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	4919      	ldr	r1, [pc, #100]	; (80033e0 <HAL_RCC_ClockConfig+0x2ec>)
 800337a:	4313      	orrs	r3, r2
 800337c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 0308 	and.w	r3, r3, #8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d009      	beq.n	800339e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800338a:	4b15      	ldr	r3, [pc, #84]	; (80033e0 <HAL_RCC_ClockConfig+0x2ec>)
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	00db      	lsls	r3, r3, #3
 8003398:	4911      	ldr	r1, [pc, #68]	; (80033e0 <HAL_RCC_ClockConfig+0x2ec>)
 800339a:	4313      	orrs	r3, r2
 800339c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800339e:	f000 f825 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 80033a2:	4601      	mov	r1, r0
 80033a4:	4b0e      	ldr	r3, [pc, #56]	; (80033e0 <HAL_RCC_ClockConfig+0x2ec>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80033ac:	23f0      	movs	r3, #240	; 0xf0
 80033ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	fa93 f3a3 	rbit	r3, r3
 80033b6:	60fb      	str	r3, [r7, #12]
  return(result);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	fab3 f383 	clz	r3, r3
 80033be:	fa22 f303 	lsr.w	r3, r2, r3
 80033c2:	4a08      	ldr	r2, [pc, #32]	; (80033e4 <HAL_RCC_ClockConfig+0x2f0>)
 80033c4:	5cd3      	ldrb	r3, [r2, r3]
 80033c6:	fa21 f303 	lsr.w	r3, r1, r3
 80033ca:	4a07      	ldr	r2, [pc, #28]	; (80033e8 <HAL_RCC_ClockConfig+0x2f4>)
 80033cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 80033ce:	2000      	movs	r0, #0
 80033d0:	f7fd fc68 	bl	8000ca4 <HAL_InitTick>
  
  return HAL_OK;
 80033d4:	2300      	movs	r3, #0
}
 80033d6:	4618      	mov	r0, r3
 80033d8:	3778      	adds	r7, #120	; 0x78
 80033da:	46bd      	mov	sp, r7
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	40021000 	.word	0x40021000
 80033e4:	0800694c 	.word	0x0800694c
 80033e8:	20000008 	.word	0x20000008

080033ec <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b08b      	sub	sp, #44	; 0x2c
 80033f0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033f2:	2300      	movs	r3, #0
 80033f4:	61fb      	str	r3, [r7, #28]
 80033f6:	2300      	movs	r3, #0
 80033f8:	61bb      	str	r3, [r7, #24]
 80033fa:	2300      	movs	r3, #0
 80033fc:	627b      	str	r3, [r7, #36]	; 0x24
 80033fe:	2300      	movs	r3, #0
 8003400:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8003402:	2300      	movs	r3, #0
 8003404:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8003406:	4b29      	ldr	r3, [pc, #164]	; (80034ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800340c:	69fb      	ldr	r3, [r7, #28]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b04      	cmp	r3, #4
 8003414:	d002      	beq.n	800341c <HAL_RCC_GetSysClockFreq+0x30>
 8003416:	2b08      	cmp	r3, #8
 8003418:	d003      	beq.n	8003422 <HAL_RCC_GetSysClockFreq+0x36>
 800341a:	e03c      	b.n	8003496 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800341c:	4b24      	ldr	r3, [pc, #144]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 800341e:	623b      	str	r3, [r7, #32]
      break;
 8003420:	e03c      	b.n	800349c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003428:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 800342c:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800342e:	68bb      	ldr	r3, [r7, #8]
 8003430:	fa93 f3a3 	rbit	r3, r3
 8003434:	607b      	str	r3, [r7, #4]
  return(result);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	fab3 f383 	clz	r3, r3
 800343c:	fa22 f303 	lsr.w	r3, r2, r3
 8003440:	4a1c      	ldr	r2, [pc, #112]	; (80034b4 <HAL_RCC_GetSysClockFreq+0xc8>)
 8003442:	5cd3      	ldrb	r3, [r2, r3]
 8003444:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8003446:	4b19      	ldr	r3, [pc, #100]	; (80034ac <HAL_RCC_GetSysClockFreq+0xc0>)
 8003448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800344a:	f003 020f 	and.w	r2, r3, #15
 800344e:	230f      	movs	r3, #15
 8003450:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	fa93 f3a3 	rbit	r3, r3
 8003458:	60fb      	str	r3, [r7, #12]
  return(result);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	fab3 f383 	clz	r3, r3
 8003460:	fa22 f303 	lsr.w	r3, r2, r3
 8003464:	4a14      	ldr	r2, [pc, #80]	; (80034b8 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003466:	5cd3      	ldrb	r3, [r2, r3]
 8003468:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800346a:	69fb      	ldr	r3, [r7, #28]
 800346c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003470:	2b00      	cmp	r3, #0
 8003472:	d008      	beq.n	8003486 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003474:	4a0e      	ldr	r2, [pc, #56]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003476:	69bb      	ldr	r3, [r7, #24]
 8003478:	fbb2 f2f3 	udiv	r2, r2, r3
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	fb02 f303 	mul.w	r3, r2, r3
 8003482:	627b      	str	r3, [r7, #36]	; 0x24
 8003484:	e004      	b.n	8003490 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	4a0c      	ldr	r2, [pc, #48]	; (80034bc <HAL_RCC_GetSysClockFreq+0xd0>)
 800348a:	fb02 f303 	mul.w	r3, r2, r3
 800348e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003490:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003492:	623b      	str	r3, [r7, #32]
      break;
 8003494:	e002      	b.n	800349c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003496:	4b06      	ldr	r3, [pc, #24]	; (80034b0 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003498:	623b      	str	r3, [r7, #32]
      break;
 800349a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800349c:	6a3b      	ldr	r3, [r7, #32]
}
 800349e:	4618      	mov	r0, r3
 80034a0:	372c      	adds	r7, #44	; 0x2c
 80034a2:	46bd      	mov	sp, r7
 80034a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a8:	4770      	bx	lr
 80034aa:	bf00      	nop
 80034ac:	40021000 	.word	0x40021000
 80034b0:	007a1200 	.word	0x007a1200
 80034b4:	0800692c 	.word	0x0800692c
 80034b8:	0800693c 	.word	0x0800693c
 80034bc:	003d0900 	.word	0x003d0900

080034c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034c0:	b480      	push	{r7}
 80034c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034c4:	4b03      	ldr	r3, [pc, #12]	; (80034d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034c6:	681b      	ldr	r3, [r3, #0]
}
 80034c8:	4618      	mov	r0, r3
 80034ca:	46bd      	mov	sp, r7
 80034cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d0:	4770      	bx	lr
 80034d2:	bf00      	nop
 80034d4:	20000008 	.word	0x20000008

080034d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b082      	sub	sp, #8
 80034dc:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80034de:	f7ff ffef 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 80034e2:	4601      	mov	r1, r0
 80034e4:	4b0b      	ldr	r3, [pc, #44]	; (8003514 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80034e6:	685b      	ldr	r3, [r3, #4]
 80034e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80034ec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80034f0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	fa93 f3a3 	rbit	r3, r3
 80034f8:	603b      	str	r3, [r7, #0]
  return(result);
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	fab3 f383 	clz	r3, r3
 8003500:	fa22 f303 	lsr.w	r3, r2, r3
 8003504:	4a04      	ldr	r2, [pc, #16]	; (8003518 <HAL_RCC_GetPCLK1Freq+0x40>)
 8003506:	5cd3      	ldrb	r3, [r2, r3]
 8003508:	fa21 f303 	lsr.w	r3, r1, r3
}    
 800350c:	4618      	mov	r0, r3
 800350e:	3708      	adds	r7, #8
 8003510:	46bd      	mov	sp, r7
 8003512:	bd80      	pop	{r7, pc}
 8003514:	40021000 	.word	0x40021000
 8003518:	0800695c 	.word	0x0800695c

0800351c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800351c:	b580      	push	{r7, lr}
 800351e:	b082      	sub	sp, #8
 8003520:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8003522:	f7ff ffcd 	bl	80034c0 <HAL_RCC_GetHCLKFreq>
 8003526:	4601      	mov	r1, r0
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_RCC_GetPCLK2Freq+0x3c>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 8003530:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 8003534:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	fa93 f3a3 	rbit	r3, r3
 800353c:	603b      	str	r3, [r7, #0]
  return(result);
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	fab3 f383 	clz	r3, r3
 8003544:	fa22 f303 	lsr.w	r3, r2, r3
 8003548:	4a04      	ldr	r2, [pc, #16]	; (800355c <HAL_RCC_GetPCLK2Freq+0x40>)
 800354a:	5cd3      	ldrb	r3, [r2, r3]
 800354c:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003550:	4618      	mov	r0, r3
 8003552:	3708      	adds	r7, #8
 8003554:	46bd      	mov	sp, r7
 8003556:	bd80      	pop	{r7, pc}
 8003558:	40021000 	.word	0x40021000
 800355c:	0800695c 	.word	0x0800695c

08003560 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003560:	b580      	push	{r7, lr}
 8003562:	b092      	sub	sp, #72	; 0x48
 8003564:	af00      	add	r7, sp, #0
 8003566:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003568:	2300      	movs	r3, #0
 800356a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003578:	2b00      	cmp	r3, #0
 800357a:	f000 80cf 	beq.w	800371c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800357e:	2300      	movs	r3, #0
 8003580:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003584:	4b86      	ldr	r3, [pc, #536]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003586:	69db      	ldr	r3, [r3, #28]
 8003588:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358c:	2b00      	cmp	r3, #0
 800358e:	d10e      	bne.n	80035ae <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003590:	4b83      	ldr	r3, [pc, #524]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003592:	69db      	ldr	r3, [r3, #28]
 8003594:	4a82      	ldr	r2, [pc, #520]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800359a:	61d3      	str	r3, [r2, #28]
 800359c:	4b80      	ldr	r3, [pc, #512]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800359e:	69db      	ldr	r3, [r3, #28]
 80035a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035a8:	2301      	movs	r3, #1
 80035aa:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ae:	4b7d      	ldr	r3, [pc, #500]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d118      	bne.n	80035ec <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035ba:	4b7a      	ldr	r3, [pc, #488]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a79      	ldr	r2, [pc, #484]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80035c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035c4:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035c6:	f7fd fbb1 	bl	8000d2c <HAL_GetTick>
 80035ca:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035cc:	e008      	b.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ce:	f7fd fbad 	bl	8000d2c <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b64      	cmp	r3, #100	; 0x64
 80035da:	d901      	bls.n	80035e0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e0da      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035e0:	4b70      	ldr	r3, [pc, #448]	; (80037a4 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d0f0      	beq.n	80035ce <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80035ec:	4b6c      	ldr	r3, [pc, #432]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035ee:	6a1b      	ldr	r3, [r3, #32]
 80035f0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035f4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035f6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d07c      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003604:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003606:	429a      	cmp	r2, r3
 8003608:	d075      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800360a:	4b65      	ldr	r3, [pc, #404]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800360c:	6a1b      	ldr	r3, [r3, #32]
 800360e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003612:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003614:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003618:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800361a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800361c:	fa93 f3a3 	rbit	r3, r3
 8003620:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8003622:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003624:	fab3 f383 	clz	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	4b5f      	ldr	r3, [pc, #380]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800362c:	4413      	add	r3, r2
 800362e:	009b      	lsls	r3, r3, #2
 8003630:	461a      	mov	r2, r3
 8003632:	2301      	movs	r3, #1
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800363a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800363e:	fa93 f3a3 	rbit	r3, r3
 8003642:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003644:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003646:	fab3 f383 	clz	r3, r3
 800364a:	461a      	mov	r2, r3
 800364c:	4b56      	ldr	r3, [pc, #344]	; (80037a8 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 800364e:	4413      	add	r3, r2
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	461a      	mov	r2, r3
 8003654:	2300      	movs	r3, #0
 8003656:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003658:	4a51      	ldr	r2, [pc, #324]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800365a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800365c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800365e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003660:	f003 0301 	and.w	r3, r3, #1
 8003664:	2b00      	cmp	r3, #0
 8003666:	d046      	beq.n	80036f6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003668:	f7fd fb60 	bl	8000d2c <HAL_GetTick>
 800366c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800366e:	e00a      	b.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003670:	f7fd fb5c 	bl	8000d2c <HAL_GetTick>
 8003674:	4602      	mov	r2, r0
 8003676:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003678:	1ad3      	subs	r3, r2, r3
 800367a:	f241 3288 	movw	r2, #5000	; 0x1388
 800367e:	4293      	cmp	r3, r2
 8003680:	d901      	bls.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8003682:	2303      	movs	r3, #3
 8003684:	e087      	b.n	8003796 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003686:	2302      	movs	r3, #2
 8003688:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800368a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800368c:	fa93 f3a3 	rbit	r3, r3
 8003690:	627b      	str	r3, [r7, #36]	; 0x24
 8003692:	2302      	movs	r3, #2
 8003694:	623b      	str	r3, [r7, #32]
 8003696:	6a3b      	ldr	r3, [r7, #32]
 8003698:	fa93 f3a3 	rbit	r3, r3
 800369c:	61fb      	str	r3, [r7, #28]
  return(result);
 800369e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036a0:	fab3 f383 	clz	r3, r3
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	095b      	lsrs	r3, r3, #5
 80036a8:	b2db      	uxtb	r3, r3
 80036aa:	f043 0302 	orr.w	r3, r3, #2
 80036ae:	b2db      	uxtb	r3, r3
 80036b0:	2b02      	cmp	r3, #2
 80036b2:	d102      	bne.n	80036ba <HAL_RCCEx_PeriphCLKConfig+0x15a>
 80036b4:	4b3a      	ldr	r3, [pc, #232]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036b6:	6a1b      	ldr	r3, [r3, #32]
 80036b8:	e007      	b.n	80036ca <HAL_RCCEx_PeriphCLKConfig+0x16a>
 80036ba:	2302      	movs	r3, #2
 80036bc:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	fa93 f3a3 	rbit	r3, r3
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	4b36      	ldr	r3, [pc, #216]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ca:	2202      	movs	r2, #2
 80036cc:	613a      	str	r2, [r7, #16]
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	fa92 f2a2 	rbit	r2, r2
 80036d4:	60fa      	str	r2, [r7, #12]
  return(result);
 80036d6:	68fa      	ldr	r2, [r7, #12]
 80036d8:	fab2 f282 	clz	r2, r2
 80036dc:	b252      	sxtb	r2, r2
 80036de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80036e2:	b252      	sxtb	r2, r2
 80036e4:	b2d2      	uxtb	r2, r2
 80036e6:	f002 021f 	and.w	r2, r2, #31
 80036ea:	2101      	movs	r1, #1
 80036ec:	fa01 f202 	lsl.w	r2, r1, r2
 80036f0:	4013      	ands	r3, r2
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0bc      	beq.n	8003670 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036f6:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036f8:	6a1b      	ldr	r3, [r3, #32]
 80036fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	4927      	ldr	r1, [pc, #156]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003704:	4313      	orrs	r3, r2
 8003706:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003708:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800370c:	2b01      	cmp	r3, #1
 800370e:	d105      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003710:	4b23      	ldr	r3, [pc, #140]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003712:	69db      	ldr	r3, [r3, #28]
 8003714:	4a22      	ldr	r2, [pc, #136]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003716:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800371a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	2b00      	cmp	r3, #0
 8003726:	d008      	beq.n	800373a <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003728:	4b1d      	ldr	r3, [pc, #116]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800372a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800372c:	f023 0203 	bic.w	r2, r3, #3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	491a      	ldr	r1, [pc, #104]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003736:	4313      	orrs	r3, r2
 8003738:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f003 0320 	and.w	r3, r3, #32
 8003742:	2b00      	cmp	r3, #0
 8003744:	d008      	beq.n	8003758 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003746:	4b16      	ldr	r3, [pc, #88]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	f023 0210 	bic.w	r2, r3, #16
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68db      	ldr	r3, [r3, #12]
 8003752:	4913      	ldr	r1, [pc, #76]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003754:	4313      	orrs	r3, r2
 8003756:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003760:	2b00      	cmp	r3, #0
 8003762:	d008      	beq.n	8003776 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003764:	4b0e      	ldr	r3, [pc, #56]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003766:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003768:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	691b      	ldr	r3, [r3, #16]
 8003770:	490b      	ldr	r1, [pc, #44]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003772:	4313      	orrs	r3, r2
 8003774:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800377e:	2b00      	cmp	r3, #0
 8003780:	d008      	beq.n	8003794 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003782:	4b07      	ldr	r3, [pc, #28]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003786:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	4904      	ldr	r1, [pc, #16]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003790:	4313      	orrs	r3, r2
 8003792:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3748      	adds	r7, #72	; 0x48
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	40021000 	.word	0x40021000
 80037a4:	40007000 	.word	0x40007000
 80037a8:	10908100 	.word	0x10908100

080037ac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b082      	sub	sp, #8
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d101      	bne.n	80037be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ba:	2301      	movs	r3, #1
 80037bc:	e043      	b.n	8003846 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 80037c4:	b2db      	uxtb	r3, r3
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d106      	bne.n	80037d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	2200      	movs	r2, #0
 80037ce:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 ff7a 	bl	80046cc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2224      	movs	r2, #36	; 0x24
 80037dc:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f022 0201 	bic.w	r2, r2, #1
 80037ee:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 f8b9 	bl	8003968 <UART_SetConfig>
 80037f6:	4603      	mov	r3, r0
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d101      	bne.n	8003800 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80037fc:	2301      	movs	r3, #1
 80037fe:	e022      	b.n	8003846 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 8003808:	6878      	ldr	r0, [r7, #4]
 800380a:	f000 fa13 	bl	8003c34 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800381c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800382c:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	681a      	ldr	r2, [r3, #0]
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f042 0201 	orr.w	r2, r2, #1
 800383c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fa9a 	bl	8003d78 <UART_CheckIdleState>
 8003844:	4603      	mov	r3, r0
}
 8003846:	4618      	mov	r0, r3
 8003848:	3708      	adds	r7, #8
 800384a:	46bd      	mov	sp, r7
 800384c:	bd80      	pop	{r7, pc}

0800384e <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800384e:	b580      	push	{r7, lr}
 8003850:	b088      	sub	sp, #32
 8003852:	af02      	add	r7, sp, #8
 8003854:	60f8      	str	r0, [r7, #12]
 8003856:	60b9      	str	r1, [r7, #8]
 8003858:	603b      	str	r3, [r7, #0]
 800385a:	4613      	mov	r3, r2
 800385c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800385e:	2300      	movs	r3, #0
 8003860:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003868:	b2db      	uxtb	r3, r3
 800386a:	2b20      	cmp	r3, #32
 800386c:	d177      	bne.n	800395e <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	2b00      	cmp	r3, #0
 8003872:	d002      	beq.n	800387a <HAL_UART_Transmit+0x2c>
 8003874:	88fb      	ldrh	r3, [r7, #6]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d101      	bne.n	800387e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800387a:	2301      	movs	r3, #1
 800387c:	e070      	b.n	8003960 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003884:	2b01      	cmp	r3, #1
 8003886:	d101      	bne.n	800388c <HAL_UART_Transmit+0x3e>
 8003888:	2302      	movs	r3, #2
 800388a:	e069      	b.n	8003960 <HAL_UART_Transmit+0x112>
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2201      	movs	r2, #1
 8003890:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	2200      	movs	r2, #0
 8003898:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	2221      	movs	r2, #33	; 0x21
 800389e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80038a2:	f7fd fa43 	bl	8000d2c <HAL_GetTick>
 80038a6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	88fa      	ldrh	r2, [r7, #6]
 80038ac:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	88fa      	ldrh	r2, [r7, #6]
 80038b4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 80038b8:	e034      	b.n	8003924 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	3b01      	subs	r3, #1
 80038c4:	b29a      	uxth	r2, r3
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	9300      	str	r3, [sp, #0]
 80038d0:	697b      	ldr	r3, [r7, #20]
 80038d2:	2200      	movs	r2, #0
 80038d4:	2180      	movs	r1, #128	; 0x80
 80038d6:	68f8      	ldr	r0, [r7, #12]
 80038d8:	f000 fa97 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d001      	beq.n	80038e6 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 80038e2:	2303      	movs	r3, #3
 80038e4:	e03c      	b.n	8003960 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038ee:	d111      	bne.n	8003914 <HAL_UART_Transmit+0xc6>
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	691b      	ldr	r3, [r3, #16]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d10d      	bne.n	8003914 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	881a      	ldrh	r2, [r3, #0]
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003908:	b292      	uxth	r2, r2
 800390a:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 800390c:	68bb      	ldr	r3, [r7, #8]
 800390e:	3302      	adds	r3, #2
 8003910:	60bb      	str	r3, [r7, #8]
 8003912:	e007      	b.n	8003924 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 8003914:	68bb      	ldr	r3, [r7, #8]
 8003916:	1c5a      	adds	r2, r3, #1
 8003918:	60ba      	str	r2, [r7, #8]
 800391a:	781a      	ldrb	r2, [r3, #0]
 800391c:	68fb      	ldr	r3, [r7, #12]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	b292      	uxth	r2, r2
 8003922:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800392a:	b29b      	uxth	r3, r3
 800392c:	2b00      	cmp	r3, #0
 800392e:	d1c4      	bne.n	80038ba <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	9300      	str	r3, [sp, #0]
 8003934:	697b      	ldr	r3, [r7, #20]
 8003936:	2200      	movs	r2, #0
 8003938:	2140      	movs	r1, #64	; 0x40
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 fa65 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	e00a      	b.n	8003960 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 800395a:	2300      	movs	r3, #0
 800395c:	e000      	b.n	8003960 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 800395e:	2302      	movs	r3, #2
  }
}
 8003960:	4618      	mov	r0, r3
 8003962:	3718      	adds	r7, #24
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003970:	2300      	movs	r3, #0
 8003972:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003974:	2310      	movs	r3, #16
 8003976:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8003978:	2300      	movs	r3, #0
 800397a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800397c:	2300      	movs	r3, #0
 800397e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003980:	2300      	movs	r3, #0
 8003982:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	689a      	ldr	r2, [r3, #8]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	691b      	ldr	r3, [r3, #16]
 800398c:	431a      	orrs	r2, r3
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	695b      	ldr	r3, [r3, #20]
 8003992:	431a      	orrs	r2, r3
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	69db      	ldr	r3, [r3, #28]
 8003998:	4313      	orrs	r3, r2
 800399a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	681a      	ldr	r2, [r3, #0]
 80039a2:	4b9f      	ldr	r3, [pc, #636]	; (8003c20 <UART_SetConfig+0x2b8>)
 80039a4:	4013      	ands	r3, r2
 80039a6:	687a      	ldr	r2, [r7, #4]
 80039a8:	6812      	ldr	r2, [r2, #0]
 80039aa:	68f9      	ldr	r1, [r7, #12]
 80039ac:	430b      	orrs	r3, r1
 80039ae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	685b      	ldr	r3, [r3, #4]
 80039b6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68da      	ldr	r2, [r3, #12]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	430a      	orrs	r2, r1
 80039c4:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	699a      	ldr	r2, [r3, #24]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a1b      	ldr	r3, [r3, #32]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	689b      	ldr	r3, [r3, #8]
 80039d8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	68fa      	ldr	r2, [r7, #12]
 80039e2:	430a      	orrs	r2, r1
 80039e4:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	4a8e      	ldr	r2, [pc, #568]	; (8003c24 <UART_SetConfig+0x2bc>)
 80039ec:	4293      	cmp	r3, r2
 80039ee:	d121      	bne.n	8003a34 <UART_SetConfig+0xcc>
 80039f0:	4b8d      	ldr	r3, [pc, #564]	; (8003c28 <UART_SetConfig+0x2c0>)
 80039f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039f4:	f003 0303 	and.w	r3, r3, #3
 80039f8:	2b03      	cmp	r3, #3
 80039fa:	d817      	bhi.n	8003a2c <UART_SetConfig+0xc4>
 80039fc:	a201      	add	r2, pc, #4	; (adr r2, 8003a04 <UART_SetConfig+0x9c>)
 80039fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a02:	bf00      	nop
 8003a04:	08003a15 	.word	0x08003a15
 8003a08:	08003a21 	.word	0x08003a21
 8003a0c:	08003a27 	.word	0x08003a27
 8003a10:	08003a1b 	.word	0x08003a1b
 8003a14:	2300      	movs	r3, #0
 8003a16:	75fb      	strb	r3, [r7, #23]
 8003a18:	e01e      	b.n	8003a58 <UART_SetConfig+0xf0>
 8003a1a:	2302      	movs	r3, #2
 8003a1c:	75fb      	strb	r3, [r7, #23]
 8003a1e:	e01b      	b.n	8003a58 <UART_SetConfig+0xf0>
 8003a20:	2304      	movs	r3, #4
 8003a22:	75fb      	strb	r3, [r7, #23]
 8003a24:	e018      	b.n	8003a58 <UART_SetConfig+0xf0>
 8003a26:	2308      	movs	r3, #8
 8003a28:	75fb      	strb	r3, [r7, #23]
 8003a2a:	e015      	b.n	8003a58 <UART_SetConfig+0xf0>
 8003a2c:	2310      	movs	r3, #16
 8003a2e:	75fb      	strb	r3, [r7, #23]
 8003a30:	bf00      	nop
 8003a32:	e011      	b.n	8003a58 <UART_SetConfig+0xf0>
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	4a7c      	ldr	r2, [pc, #496]	; (8003c2c <UART_SetConfig+0x2c4>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d102      	bne.n	8003a44 <UART_SetConfig+0xdc>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	75fb      	strb	r3, [r7, #23]
 8003a42:	e009      	b.n	8003a58 <UART_SetConfig+0xf0>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a79      	ldr	r2, [pc, #484]	; (8003c30 <UART_SetConfig+0x2c8>)
 8003a4a:	4293      	cmp	r3, r2
 8003a4c:	d102      	bne.n	8003a54 <UART_SetConfig+0xec>
 8003a4e:	2300      	movs	r3, #0
 8003a50:	75fb      	strb	r3, [r7, #23]
 8003a52:	e001      	b.n	8003a58 <UART_SetConfig+0xf0>
 8003a54:	2310      	movs	r3, #16
 8003a56:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	69db      	ldr	r3, [r3, #28]
 8003a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a60:	d16f      	bne.n	8003b42 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8003a62:	7dfb      	ldrb	r3, [r7, #23]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d857      	bhi.n	8003b18 <UART_SetConfig+0x1b0>
 8003a68:	a201      	add	r2, pc, #4	; (adr r2, 8003a70 <UART_SetConfig+0x108>)
 8003a6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a6e:	bf00      	nop
 8003a70:	08003a95 	.word	0x08003a95
 8003a74:	08003ab1 	.word	0x08003ab1
 8003a78:	08003acd 	.word	0x08003acd
 8003a7c:	08003b19 	.word	0x08003b19
 8003a80:	08003ae7 	.word	0x08003ae7
 8003a84:	08003b19 	.word	0x08003b19
 8003a88:	08003b19 	.word	0x08003b19
 8003a8c:	08003b19 	.word	0x08003b19
 8003a90:	08003b03 	.word	0x08003b03
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003a94:	f7ff fd20 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	005a      	lsls	r2, r3, #1
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	685b      	ldr	r3, [r3, #4]
 8003aa0:	085b      	lsrs	r3, r3, #1
 8003aa2:	441a      	add	r2, r3
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aac:	82bb      	strh	r3, [r7, #20]
        break;
 8003aae:	e036      	b.n	8003b1e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003ab0:	f7ff fd34 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	005a      	lsls	r2, r3, #1
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	685b      	ldr	r3, [r3, #4]
 8003abc:	085b      	lsrs	r3, r3, #1
 8003abe:	441a      	add	r2, r3
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac8:	82bb      	strh	r3, [r7, #20]
        break;
 8003aca:	e028      	b.n	8003b1e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	685b      	ldr	r3, [r3, #4]
 8003ad0:	085b      	lsrs	r3, r3, #1
 8003ad2:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003ad6:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003ada:	687a      	ldr	r2, [r7, #4]
 8003adc:	6852      	ldr	r2, [r2, #4]
 8003ade:	fbb3 f3f2 	udiv	r3, r3, r2
 8003ae2:	82bb      	strh	r3, [r7, #20]
        break;
 8003ae4:	e01b      	b.n	8003b1e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003ae6:	f7ff fc81 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 8003aea:	4603      	mov	r3, r0
 8003aec:	005a      	lsls	r2, r3, #1
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	085b      	lsrs	r3, r3, #1
 8003af4:	441a      	add	r2, r3
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afe:	82bb      	strh	r3, [r7, #20]
        break;
 8003b00:	e00d      	b.n	8003b1e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	085b      	lsrs	r3, r3, #1
 8003b08:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b14:	82bb      	strh	r3, [r7, #20]
        break;
 8003b16:	e002      	b.n	8003b1e <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003b18:	2301      	movs	r3, #1
 8003b1a:	74fb      	strb	r3, [r7, #19]
        break;
 8003b1c:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003b1e:	8abb      	ldrh	r3, [r7, #20]
 8003b20:	f023 030f 	bic.w	r3, r3, #15
 8003b24:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003b26:	8abb      	ldrh	r3, [r7, #20]
 8003b28:	105b      	asrs	r3, r3, #1
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	f003 0307 	and.w	r3, r3, #7
 8003b30:	b29a      	uxth	r2, r3
 8003b32:	897b      	ldrh	r3, [r7, #10]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	897a      	ldrh	r2, [r7, #10]
 8003b3e:	60da      	str	r2, [r3, #12]
 8003b40:	e069      	b.n	8003c16 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8003b42:	7dfb      	ldrb	r3, [r7, #23]
 8003b44:	2b08      	cmp	r3, #8
 8003b46:	d863      	bhi.n	8003c10 <UART_SetConfig+0x2a8>
 8003b48:	a201      	add	r2, pc, #4	; (adr r2, 8003b50 <UART_SetConfig+0x1e8>)
 8003b4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b4e:	bf00      	nop
 8003b50:	08003b75 	.word	0x08003b75
 8003b54:	08003b95 	.word	0x08003b95
 8003b58:	08003bb5 	.word	0x08003bb5
 8003b5c:	08003c11 	.word	0x08003c11
 8003b60:	08003bd5 	.word	0x08003bd5
 8003b64:	08003c11 	.word	0x08003c11
 8003b68:	08003c11 	.word	0x08003c11
 8003b6c:	08003c11 	.word	0x08003c11
 8003b70:	08003bf5 	.word	0x08003bf5
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003b74:	f7ff fcb0 	bl	80034d8 <HAL_RCC_GetPCLK1Freq>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	685b      	ldr	r3, [r3, #4]
 8003b7e:	085b      	lsrs	r3, r3, #1
 8003b80:	441a      	add	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b8a:	b29a      	uxth	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	60da      	str	r2, [r3, #12]
        break;
 8003b92:	e040      	b.n	8003c16 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003b94:	f7ff fcc2 	bl	800351c <HAL_RCC_GetPCLK2Freq>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	685b      	ldr	r3, [r3, #4]
 8003b9e:	085b      	lsrs	r3, r3, #1
 8003ba0:	441a      	add	r2, r3
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003baa:	b29a      	uxth	r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	60da      	str	r2, [r3, #12]
        break;
 8003bb2:	e030      	b.n	8003c16 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	085b      	lsrs	r3, r3, #1
 8003bba:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003bbe:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	6852      	ldr	r2, [r2, #4]
 8003bc6:	fbb3 f3f2 	udiv	r3, r3, r2
 8003bca:	b29a      	uxth	r2, r3
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	60da      	str	r2, [r3, #12]
        break;
 8003bd2:	e020      	b.n	8003c16 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003bd4:	f7ff fc0a 	bl	80033ec <HAL_RCC_GetSysClockFreq>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	085b      	lsrs	r3, r3, #1
 8003be0:	441a      	add	r2, r3
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	685b      	ldr	r3, [r3, #4]
 8003be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	60da      	str	r2, [r3, #12]
        break;
 8003bf2:	e010      	b.n	8003c16 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	685b      	ldr	r3, [r3, #4]
 8003bf8:	085b      	lsrs	r3, r3, #1
 8003bfa:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c06:	b29a      	uxth	r2, r3
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	60da      	str	r2, [r3, #12]
        break;
 8003c0e:	e002      	b.n	8003c16 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003c10:	2301      	movs	r3, #1
 8003c12:	74fb      	strb	r3, [r7, #19]
        break;
 8003c14:	bf00      	nop
    }
  }

  return ret;
 8003c16:	7cfb      	ldrb	r3, [r7, #19]

}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3718      	adds	r7, #24
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	efff69f3 	.word	0xefff69f3
 8003c24:	40013800 	.word	0x40013800
 8003c28:	40021000 	.word	0x40021000
 8003c2c:	40004400 	.word	0x40004400
 8003c30:	40004800 	.word	0x40004800

08003c34 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c40:	f003 0301 	and.w	r3, r3, #1
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d00a      	beq.n	8003c5e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	430a      	orrs	r2, r1
 8003c5c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c62:	f003 0302 	and.w	r3, r3, #2
 8003c66:	2b00      	cmp	r3, #0
 8003c68:	d00a      	beq.n	8003c80 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	685b      	ldr	r3, [r3, #4]
 8003c70:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c84:	f003 0304 	and.w	r3, r3, #4
 8003c88:	2b00      	cmp	r3, #0
 8003c8a:	d00a      	beq.n	8003ca2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	430a      	orrs	r2, r1
 8003ca0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca6:	f003 0308 	and.w	r3, r3, #8
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d00a      	beq.n	8003cc4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	430a      	orrs	r2, r1
 8003cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc8:	f003 0310 	and.w	r3, r3, #16
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d00a      	beq.n	8003ce6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	689b      	ldr	r3, [r3, #8]
 8003cd6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	430a      	orrs	r2, r1
 8003ce4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	f003 0320 	and.w	r3, r3, #32
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d00a      	beq.n	8003d08 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	689b      	ldr	r3, [r3, #8]
 8003cf8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	430a      	orrs	r2, r1
 8003d06:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d01a      	beq.n	8003d4a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	685b      	ldr	r3, [r3, #4]
 8003d1a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	430a      	orrs	r2, r1
 8003d28:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d2e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d32:	d10a      	bne.n	8003d4a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	685b      	ldr	r3, [r3, #4]
 8003d3a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	430a      	orrs	r2, r1
 8003d48:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00a      	beq.n	8003d6c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	685b      	ldr	r3, [r3, #4]
 8003d5c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	430a      	orrs	r2, r1
 8003d6a:	605a      	str	r2, [r3, #4]
  }
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr

08003d78 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d78:	b580      	push	{r7, lr}
 8003d7a:	b086      	sub	sp, #24
 8003d7c:	af02      	add	r7, sp, #8
 8003d7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d80:	2300      	movs	r3, #0
 8003d82:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2200      	movs	r2, #0
 8003d88:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d8a:	f7fc ffcf 	bl	8000d2c <HAL_GetTick>
 8003d8e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0308 	and.w	r3, r3, #8
 8003d9a:	2b08      	cmp	r3, #8
 8003d9c:	d10e      	bne.n	8003dbc <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d9e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003dac:	6878      	ldr	r0, [r7, #4]
 8003dae:	f000 f82c 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003db2:	4603      	mov	r3, r0
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d001      	beq.n	8003dbc <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003db8:	2303      	movs	r3, #3
 8003dba:	e022      	b.n	8003e02 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f003 0304 	and.w	r3, r3, #4
 8003dc6:	2b04      	cmp	r3, #4
 8003dc8:	d10e      	bne.n	8003de8 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003dca:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003dce:	9300      	str	r3, [sp, #0]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 f816 	bl	8003e0a <UART_WaitOnFlagUntilTimeout>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d001      	beq.n	8003de8 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e00c      	b.n	8003e02 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2220      	movs	r2, #32
 8003dec:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2220      	movs	r2, #32
 8003df4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003e00:	2300      	movs	r3, #0
}
 8003e02:	4618      	mov	r0, r3
 8003e04:	3710      	adds	r7, #16
 8003e06:	46bd      	mov	sp, r7
 8003e08:	bd80      	pop	{r7, pc}

08003e0a <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003e0a:	b580      	push	{r7, lr}
 8003e0c:	b084      	sub	sp, #16
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	60f8      	str	r0, [r7, #12]
 8003e12:	60b9      	str	r1, [r7, #8]
 8003e14:	603b      	str	r3, [r7, #0]
 8003e16:	4613      	mov	r3, r2
 8003e18:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e1a:	e02c      	b.n	8003e76 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e22:	d028      	beq.n	8003e76 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d007      	beq.n	8003e3a <UART_WaitOnFlagUntilTimeout+0x30>
 8003e2a:	f7fc ff7f 	bl	8000d2c <HAL_GetTick>
 8003e2e:	4602      	mov	r2, r0
 8003e30:	683b      	ldr	r3, [r7, #0]
 8003e32:	1ad3      	subs	r3, r2, r3
 8003e34:	69ba      	ldr	r2, [r7, #24]
 8003e36:	429a      	cmp	r2, r3
 8003e38:	d21d      	bcs.n	8003e76 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681a      	ldr	r2, [r3, #0]
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003e48:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	689a      	ldr	r2, [r3, #8]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f022 0201 	bic.w	r2, r2, #1
 8003e58:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2220      	movs	r2, #32
 8003e5e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2220      	movs	r2, #32
 8003e66:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e00f      	b.n	8003e96 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	69da      	ldr	r2, [r3, #28]
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	4013      	ands	r3, r2
 8003e80:	68ba      	ldr	r2, [r7, #8]
 8003e82:	429a      	cmp	r2, r3
 8003e84:	bf0c      	ite	eq
 8003e86:	2301      	moveq	r3, #1
 8003e88:	2300      	movne	r3, #0
 8003e8a:	b2db      	uxtb	r3, r3
 8003e8c:	461a      	mov	r2, r3
 8003e8e:	79fb      	ldrb	r3, [r7, #7]
 8003e90:	429a      	cmp	r2, r3
 8003e92:	d0c3      	beq.n	8003e1c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
	...

08003ea0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003ea0:	b590      	push	{r4, r7, lr}
 8003ea2:	b0e7      	sub	sp, #412	; 0x19c
 8003ea4:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003ea6:	f7fc fee7 	bl	8000c78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003eaa:	f000 f821 	bl	8003ef0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003eae:	f000 f915 	bl	80040dc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003eb2:	f000 f8e3 	bl	800407c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8003eb6:	f000 f873 	bl	8003fa0 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  value_adc = check_ADC(&hadc1, rawValues, 200);
 8003eba:	1d3b      	adds	r3, r7, #4
 8003ebc:	22c8      	movs	r2, #200	; 0xc8
 8003ebe:	4619      	mov	r1, r3
 8003ec0:	4809      	ldr	r0, [pc, #36]	; (8003ee8 <main+0x48>)
 8003ec2:	f000 f955 	bl	8004170 <check_ADC>
 8003ec6:	ed87 0a65 	vstr	s0, [r7, #404]	; 0x194

	  tx_UART_double(&huart2, value_adc,3, 10);
 8003eca:	f8d7 0194 	ldr.w	r0, [r7, #404]	; 0x194
 8003ece:	f7fc fb33 	bl	8000538 <__aeabi_f2d>
 8003ed2:	4603      	mov	r3, r0
 8003ed4:	460c      	mov	r4, r1
 8003ed6:	220a      	movs	r2, #10
 8003ed8:	2103      	movs	r1, #3
 8003eda:	ec44 3b10 	vmov	d0, r3, r4
 8003ede:	4803      	ldr	r0, [pc, #12]	; (8003eec <main+0x4c>)
 8003ee0:	f000 f9c6 	bl	8004270 <tx_UART_double>
	  value_adc = check_ADC(&hadc1, rawValues, 200);
 8003ee4:	e7e9      	b.n	8003eba <main+0x1a>
 8003ee6:	bf00      	nop
 8003ee8:	200000a0 	.word	0x200000a0
 8003eec:	200000f4 	.word	0x200000f4

08003ef0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	b096      	sub	sp, #88	; 0x58
 8003ef4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ef6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003efa:	2228      	movs	r2, #40	; 0x28
 8003efc:	2100      	movs	r1, #0
 8003efe:	4618      	mov	r0, r3
 8003f00:	f000 fd20 	bl	8004944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003f04:	f107 031c 	add.w	r3, r7, #28
 8003f08:	2200      	movs	r2, #0
 8003f0a:	601a      	str	r2, [r3, #0]
 8003f0c:	605a      	str	r2, [r3, #4]
 8003f0e:	609a      	str	r2, [r3, #8]
 8003f10:	60da      	str	r2, [r3, #12]
 8003f12:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003f14:	1d3b      	adds	r3, r7, #4
 8003f16:	2200      	movs	r2, #0
 8003f18:	601a      	str	r2, [r3, #0]
 8003f1a:	605a      	str	r2, [r3, #4]
 8003f1c:	609a      	str	r2, [r3, #8]
 8003f1e:	60da      	str	r2, [r3, #12]
 8003f20:	611a      	str	r2, [r3, #16]
 8003f22:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003f24:	2302      	movs	r3, #2
 8003f26:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003f28:	2301      	movs	r3, #1
 8003f2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003f2c:	2310      	movs	r3, #16
 8003f2e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003f30:	2302      	movs	r3, #2
 8003f32:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003f34:	2300      	movs	r3, #0
 8003f36:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003f38:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003f3c:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003f3e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003f42:	4618      	mov	r0, r3
 8003f44:	f7fe f9e8 	bl	8002318 <HAL_RCC_OscConfig>
 8003f48:	4603      	mov	r3, r0
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8003f4e:	f000 f987 	bl	8004260 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f52:	230f      	movs	r3, #15
 8003f54:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f56:	2302      	movs	r3, #2
 8003f58:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8003f5a:	2380      	movs	r3, #128	; 0x80
 8003f5c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f62:	2300      	movs	r3, #0
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f66:	f107 031c 	add.w	r3, r7, #28
 8003f6a:	2100      	movs	r1, #0
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	f7ff f8c1 	bl	80030f4 <HAL_RCC_ClockConfig>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003f78:	f000 f972 	bl	8004260 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003f7c:	2380      	movs	r3, #128	; 0x80
 8003f7e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8003f80:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f84:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f86:	1d3b      	adds	r3, r7, #4
 8003f88:	4618      	mov	r0, r3
 8003f8a:	f7ff fae9 	bl	8003560 <HAL_RCCEx_PeriphCLKConfig>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d001      	beq.n	8003f98 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003f94:	f000 f964 	bl	8004260 <Error_Handler>
  }
}
 8003f98:	bf00      	nop
 8003f9a:	3758      	adds	r7, #88	; 0x58
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b08a      	sub	sp, #40	; 0x28
 8003fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003fa6:	f107 031c 	add.w	r3, r7, #28
 8003faa:	2200      	movs	r2, #0
 8003fac:	601a      	str	r2, [r3, #0]
 8003fae:	605a      	str	r2, [r3, #4]
 8003fb0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003fb2:	1d3b      	adds	r3, r7, #4
 8003fb4:	2200      	movs	r2, #0
 8003fb6:	601a      	str	r2, [r3, #0]
 8003fb8:	605a      	str	r2, [r3, #4]
 8003fba:	609a      	str	r2, [r3, #8]
 8003fbc:	60da      	str	r2, [r3, #12]
 8003fbe:	611a      	str	r2, [r3, #16]
 8003fc0:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003fc2:	4b2d      	ldr	r3, [pc, #180]	; (8004078 <MX_ADC1_Init+0xd8>)
 8003fc4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003fc8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003fca:	4b2b      	ldr	r3, [pc, #172]	; (8004078 <MX_ADC1_Init+0xd8>)
 8003fcc:	2200      	movs	r2, #0
 8003fce:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003fd0:	4b29      	ldr	r3, [pc, #164]	; (8004078 <MX_ADC1_Init+0xd8>)
 8003fd2:	2200      	movs	r2, #0
 8003fd4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003fd6:	4b28      	ldr	r3, [pc, #160]	; (8004078 <MX_ADC1_Init+0xd8>)
 8003fd8:	2200      	movs	r2, #0
 8003fda:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003fdc:	4b26      	ldr	r3, [pc, #152]	; (8004078 <MX_ADC1_Init+0xd8>)
 8003fde:	2200      	movs	r2, #0
 8003fe0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003fe2:	4b25      	ldr	r3, [pc, #148]	; (8004078 <MX_ADC1_Init+0xd8>)
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003fe8:	4b23      	ldr	r3, [pc, #140]	; (8004078 <MX_ADC1_Init+0xd8>)
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003fee:	4b22      	ldr	r3, [pc, #136]	; (8004078 <MX_ADC1_Init+0xd8>)
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003ff4:	4b20      	ldr	r3, [pc, #128]	; (8004078 <MX_ADC1_Init+0xd8>)
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003ffa:	4b1f      	ldr	r3, [pc, #124]	; (8004078 <MX_ADC1_Init+0xd8>)
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8004000:	4b1d      	ldr	r3, [pc, #116]	; (8004078 <MX_ADC1_Init+0xd8>)
 8004002:	2200      	movs	r2, #0
 8004004:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8004006:	4b1c      	ldr	r3, [pc, #112]	; (8004078 <MX_ADC1_Init+0xd8>)
 8004008:	2204      	movs	r2, #4
 800400a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <MX_ADC1_Init+0xd8>)
 800400e:	2200      	movs	r2, #0
 8004010:	619a      	str	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8004012:	4b19      	ldr	r3, [pc, #100]	; (8004078 <MX_ADC1_Init+0xd8>)
 8004014:	2200      	movs	r2, #0
 8004016:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8004018:	4817      	ldr	r0, [pc, #92]	; (8004078 <MX_ADC1_Init+0xd8>)
 800401a:	f7fc feb5 	bl	8000d88 <HAL_ADC_Init>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8004024:	f000 f91c 	bl	8004260 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8004028:	2300      	movs	r3, #0
 800402a:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 800402c:	f107 031c 	add.w	r3, r7, #28
 8004030:	4619      	mov	r1, r3
 8004032:	4811      	ldr	r0, [pc, #68]	; (8004078 <MX_ADC1_Init+0xd8>)
 8004034:	f7fd fcba 	bl	80019ac <HAL_ADCEx_MultiModeConfigChannel>
 8004038:	4603      	mov	r3, r0
 800403a:	2b00      	cmp	r3, #0
 800403c:	d001      	beq.n	8004042 <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 800403e:	f000 f90f 	bl	8004260 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8004042:	2301      	movs	r3, #1
 8004044:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8004046:	2301      	movs	r3, #1
 8004048:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800404a:	2300      	movs	r3, #0
 800404c:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800404e:	2300      	movs	r3, #0
 8004050:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004052:	2300      	movs	r3, #0
 8004054:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004056:	2300      	movs	r3, #0
 8004058:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800405a:	1d3b      	adds	r3, r7, #4
 800405c:	4619      	mov	r1, r3
 800405e:	4806      	ldr	r0, [pc, #24]	; (8004078 <MX_ADC1_Init+0xd8>)
 8004060:	f7fd f9e2 	bl	8001428 <HAL_ADC_ConfigChannel>
 8004064:	4603      	mov	r3, r0
 8004066:	2b00      	cmp	r3, #0
 8004068:	d001      	beq.n	800406e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800406a:	f000 f8f9 	bl	8004260 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800406e:	bf00      	nop
 8004070:	3728      	adds	r7, #40	; 0x28
 8004072:	46bd      	mov	sp, r7
 8004074:	bd80      	pop	{r7, pc}
 8004076:	bf00      	nop
 8004078:	200000a0 	.word	0x200000a0

0800407c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800407c:	b580      	push	{r7, lr}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004080:	4b14      	ldr	r3, [pc, #80]	; (80040d4 <MX_USART2_UART_Init+0x58>)
 8004082:	4a15      	ldr	r2, [pc, #84]	; (80040d8 <MX_USART2_UART_Init+0x5c>)
 8004084:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8004086:	4b13      	ldr	r3, [pc, #76]	; (80040d4 <MX_USART2_UART_Init+0x58>)
 8004088:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800408c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800408e:	4b11      	ldr	r3, [pc, #68]	; (80040d4 <MX_USART2_UART_Init+0x58>)
 8004090:	2200      	movs	r2, #0
 8004092:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <MX_USART2_UART_Init+0x58>)
 8004096:	2200      	movs	r2, #0
 8004098:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800409a:	4b0e      	ldr	r3, [pc, #56]	; (80040d4 <MX_USART2_UART_Init+0x58>)
 800409c:	2200      	movs	r2, #0
 800409e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80040a0:	4b0c      	ldr	r3, [pc, #48]	; (80040d4 <MX_USART2_UART_Init+0x58>)
 80040a2:	220c      	movs	r2, #12
 80040a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80040a6:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <MX_USART2_UART_Init+0x58>)
 80040a8:	2200      	movs	r2, #0
 80040aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80040ac:	4b09      	ldr	r3, [pc, #36]	; (80040d4 <MX_USART2_UART_Init+0x58>)
 80040ae:	2200      	movs	r2, #0
 80040b0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80040b2:	4b08      	ldr	r3, [pc, #32]	; (80040d4 <MX_USART2_UART_Init+0x58>)
 80040b4:	2200      	movs	r2, #0
 80040b6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80040b8:	4b06      	ldr	r3, [pc, #24]	; (80040d4 <MX_USART2_UART_Init+0x58>)
 80040ba:	2200      	movs	r2, #0
 80040bc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80040be:	4805      	ldr	r0, [pc, #20]	; (80040d4 <MX_USART2_UART_Init+0x58>)
 80040c0:	f7ff fb74 	bl	80037ac <HAL_UART_Init>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d001      	beq.n	80040ce <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80040ca:	f000 f8c9 	bl	8004260 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80040ce:	bf00      	nop
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	200000f4 	.word	0x200000f4
 80040d8:	40004400 	.word	0x40004400

080040dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80040e2:	f107 030c 	add.w	r3, r7, #12
 80040e6:	2200      	movs	r2, #0
 80040e8:	601a      	str	r2, [r3, #0]
 80040ea:	605a      	str	r2, [r3, #4]
 80040ec:	609a      	str	r2, [r3, #8]
 80040ee:	60da      	str	r2, [r3, #12]
 80040f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040f2:	4b1d      	ldr	r3, [pc, #116]	; (8004168 <MX_GPIO_Init+0x8c>)
 80040f4:	695b      	ldr	r3, [r3, #20]
 80040f6:	4a1c      	ldr	r2, [pc, #112]	; (8004168 <MX_GPIO_Init+0x8c>)
 80040f8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040fc:	6153      	str	r3, [r2, #20]
 80040fe:	4b1a      	ldr	r3, [pc, #104]	; (8004168 <MX_GPIO_Init+0x8c>)
 8004100:	695b      	ldr	r3, [r3, #20]
 8004102:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004106:	60bb      	str	r3, [r7, #8]
 8004108:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800410a:	4b17      	ldr	r3, [pc, #92]	; (8004168 <MX_GPIO_Init+0x8c>)
 800410c:	695b      	ldr	r3, [r3, #20]
 800410e:	4a16      	ldr	r2, [pc, #88]	; (8004168 <MX_GPIO_Init+0x8c>)
 8004110:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004114:	6153      	str	r3, [r2, #20]
 8004116:	4b14      	ldr	r3, [pc, #80]	; (8004168 <MX_GPIO_Init+0x8c>)
 8004118:	695b      	ldr	r3, [r3, #20]
 800411a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800411e:	607b      	str	r3, [r7, #4]
 8004120:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8004122:	4b11      	ldr	r3, [pc, #68]	; (8004168 <MX_GPIO_Init+0x8c>)
 8004124:	695b      	ldr	r3, [r3, #20]
 8004126:	4a10      	ldr	r2, [pc, #64]	; (8004168 <MX_GPIO_Init+0x8c>)
 8004128:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800412c:	6153      	str	r3, [r2, #20]
 800412e:	4b0e      	ldr	r3, [pc, #56]	; (8004168 <MX_GPIO_Init+0x8c>)
 8004130:	695b      	ldr	r3, [r3, #20]
 8004132:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004136:	603b      	str	r3, [r7, #0]
 8004138:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800413a:	2200      	movs	r2, #0
 800413c:	2108      	movs	r1, #8
 800413e:	480b      	ldr	r0, [pc, #44]	; (800416c <MX_GPIO_Init+0x90>)
 8004140:	f7fe f8c0 	bl	80022c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8004144:	2308      	movs	r3, #8
 8004146:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8004148:	2301      	movs	r3, #1
 800414a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800414c:	2300      	movs	r3, #0
 800414e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004150:	2300      	movs	r3, #0
 8004152:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8004154:	f107 030c 	add.w	r3, r7, #12
 8004158:	4619      	mov	r1, r3
 800415a:	4804      	ldr	r0, [pc, #16]	; (800416c <MX_GPIO_Init+0x90>)
 800415c:	f7fd ff3c 	bl	8001fd8 <HAL_GPIO_Init>

}
 8004160:	bf00      	nop
 8004162:	3720      	adds	r7, #32
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	40021000 	.word	0x40021000
 800416c:	48000400 	.word	0x48000400

08004170 <check_ADC>:

/* USER CODE BEGIN 4 */
float check_ADC(ADC_HandleTypeDef *hadc, uint16_t *pData, uint16_t Size){
 8004170:	b5b0      	push	{r4, r5, r7, lr}
 8004172:	b086      	sub	sp, #24
 8004174:	af00      	add	r7, sp, #0
 8004176:	60f8      	str	r0, [r7, #12]
 8004178:	60b9      	str	r1, [r7, #8]
 800417a:	4613      	mov	r3, r2
 800417c:	80fb      	strh	r3, [r7, #6]
	float data_adc;
	for (uint8_t i=0;i<Size;i++){
 800417e:	2300      	movs	r3, #0
 8004180:	74fb      	strb	r3, [r7, #19]
 8004182:	e047      	b.n	8004214 <check_ADC+0xa4>
		HAL_ADC_Start(&hadc1);
 8004184:	4834      	ldr	r0, [pc, #208]	; (8004258 <check_ADC+0xe8>)
 8004186:	f7fc ff8f 	bl	80010a8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 800418a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800418e:	4832      	ldr	r0, [pc, #200]	; (8004258 <check_ADC+0xe8>)
 8004190:	f7fd f876 	bl	8001280 <HAL_ADC_PollForConversion>
		pData[i] = HAL_ADC_GetValue(&hadc1);
 8004194:	4830      	ldr	r0, [pc, #192]	; (8004258 <check_ADC+0xe8>)
 8004196:	f7fd f939 	bl	800140c <HAL_ADC_GetValue>
 800419a:	4601      	mov	r1, r0
 800419c:	7cfb      	ldrb	r3, [r7, #19]
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	68ba      	ldr	r2, [r7, #8]
 80041a2:	4413      	add	r3, r2
 80041a4:	b28a      	uxth	r2, r1
 80041a6:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 80041a8:	482b      	ldr	r0, [pc, #172]	; (8004258 <check_ADC+0xe8>)
 80041aa:	f7fd f833 	bl	8001214 <HAL_ADC_Stop>
		data_adc += pData[i]*3.3/4095;
 80041ae:	6978      	ldr	r0, [r7, #20]
 80041b0:	f7fc f9c2 	bl	8000538 <__aeabi_f2d>
 80041b4:	4604      	mov	r4, r0
 80041b6:	460d      	mov	r5, r1
 80041b8:	7cfb      	ldrb	r3, [r7, #19]
 80041ba:	005b      	lsls	r3, r3, #1
 80041bc:	68ba      	ldr	r2, [r7, #8]
 80041be:	4413      	add	r3, r2
 80041c0:	881b      	ldrh	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fc f9a6 	bl	8000514 <__aeabi_i2d>
 80041c8:	a31f      	add	r3, pc, #124	; (adr r3, 8004248 <check_ADC+0xd8>)
 80041ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ce:	f7fc fa0b 	bl	80005e8 <__aeabi_dmul>
 80041d2:	4602      	mov	r2, r0
 80041d4:	460b      	mov	r3, r1
 80041d6:	4610      	mov	r0, r2
 80041d8:	4619      	mov	r1, r3
 80041da:	a31d      	add	r3, pc, #116	; (adr r3, 8004250 <check_ADC+0xe0>)
 80041dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e0:	f7fc fb2c 	bl	800083c <__aeabi_ddiv>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4620      	mov	r0, r4
 80041ea:	4629      	mov	r1, r5
 80041ec:	f7fc f846 	bl	800027c <__adddf3>
 80041f0:	4603      	mov	r3, r0
 80041f2:	460c      	mov	r4, r1
 80041f4:	4618      	mov	r0, r3
 80041f6:	4621      	mov	r1, r4
 80041f8:	f7fc fcee 	bl	8000bd8 <__aeabi_d2f>
 80041fc:	4603      	mov	r3, r0
 80041fe:	617b      	str	r3, [r7, #20]

		HAL_Delay(2); // Sustituir por timer
 8004200:	2002      	movs	r0, #2
 8004202:	f7fc fd9f 	bl	8000d44 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 8004206:	2108      	movs	r1, #8
 8004208:	4814      	ldr	r0, [pc, #80]	; (800425c <check_ADC+0xec>)
 800420a:	f7fe f873 	bl	80022f4 <HAL_GPIO_TogglePin>
	for (uint8_t i=0;i<Size;i++){
 800420e:	7cfb      	ldrb	r3, [r7, #19]
 8004210:	3301      	adds	r3, #1
 8004212:	74fb      	strb	r3, [r7, #19]
 8004214:	7cfb      	ldrb	r3, [r7, #19]
 8004216:	b29b      	uxth	r3, r3
 8004218:	88fa      	ldrh	r2, [r7, #6]
 800421a:	429a      	cmp	r2, r3
 800421c:	d8b2      	bhi.n	8004184 <check_ADC+0x14>
	}
	data_adc = data_adc/Size;
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	ee07 3a90 	vmov	s15, r3
 8004224:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004228:	edd7 6a05 	vldr	s13, [r7, #20]
 800422c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004230:	edc7 7a05 	vstr	s15, [r7, #20]
	return data_adc;
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	ee07 3a90 	vmov	s15, r3
}
 800423a:	eeb0 0a67 	vmov.f32	s0, s15
 800423e:	3718      	adds	r7, #24
 8004240:	46bd      	mov	sp, r7
 8004242:	bdb0      	pop	{r4, r5, r7, pc}
 8004244:	f3af 8000 	nop.w
 8004248:	66666666 	.word	0x66666666
 800424c:	400a6666 	.word	0x400a6666
 8004250:	00000000 	.word	0x00000000
 8004254:	40affe00 	.word	0x40affe00
 8004258:	200000a0 	.word	0x200000a0
 800425c:	48000400 	.word	0x48000400

08004260 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004260:	b480      	push	{r7}
 8004262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8004264:	bf00      	nop
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr
	...

08004270 <tx_UART_double>:
		int_str[0] = '-';
	}
	HAL_UART_Transmit(huart,int_str,sizeof(int_str), 10);	// TX por UART del array de uint8_t
}

void tx_UART_double(UART_HandleTypeDef *huart, double data, uint8_t decimal_p, uint32_t Timeout) {
 8004270:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004274:	b099      	sub	sp, #100	; 0x64
 8004276:	af00      	add	r7, sp, #0
 8004278:	6178      	str	r0, [r7, #20]
 800427a:	ed87 0b02 	vstr	d0, [r7, #8]
 800427e:	460b      	mov	r3, r1
 8004280:	607a      	str	r2, [r7, #4]
 8004282:	74fb      	strb	r3, [r7, #19]
 8004284:	466b      	mov	r3, sp
 8004286:	461e      	mov	r6, r3
	uint8_t negativo = 0;
 8004288:	2300      	movs	r3, #0
 800428a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (data < 0) {
 800428e:	f04f 0200 	mov.w	r2, #0
 8004292:	f04f 0300 	mov.w	r3, #0
 8004296:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800429a:	f7fc fc17 	bl	8000acc <__aeabi_dcmplt>
 800429e:	4603      	mov	r3, r0
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d008      	beq.n	80042b6 <tx_UART_double+0x46>
		data = -data;
 80042a4:	68bb      	ldr	r3, [r7, #8]
 80042a6:	60bb      	str	r3, [r7, #8]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80042ae:	60fb      	str	r3, [r7, #12]
		negativo = 1;
 80042b0:	2301      	movs	r3, #1
 80042b2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	}

	int potencia_10 = pow(10, decimal_p);
 80042b6:	7cfb      	ldrb	r3, [r7, #19]
 80042b8:	4618      	mov	r0, r3
 80042ba:	f7fc f91b 	bl	80004f4 <__aeabi_ui2d>
 80042be:	4603      	mov	r3, r0
 80042c0:	460c      	mov	r4, r1
 80042c2:	ec44 3b11 	vmov	d1, r3, r4
 80042c6:	ed9f 0bb4 	vldr	d0, [pc, #720]	; 8004598 <tx_UART_double+0x328>
 80042ca:	f001 f887 	bl	80053dc <pow>
 80042ce:	ec54 3b10 	vmov	r3, r4, d0
 80042d2:	4618      	mov	r0, r3
 80042d4:	4621      	mov	r1, r4
 80042d6:	f7fc fc37 	bl	8000b48 <__aeabi_d2iz>
 80042da:	4603      	mov	r3, r0
 80042dc:	657b      	str	r3, [r7, #84]	; 0x54
	double p_entera_f = trunc(data);
 80042de:	ed97 0b02 	vldr	d0, [r7, #8]
 80042e2:	f000 ffc1 	bl	8005268 <trunc>
 80042e6:	ed87 0b12 	vstr	d0, [r7, #72]	; 0x48
	double p_decimal_f = data*potencia_10 - p_entera_f*potencia_10;
 80042ea:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80042ec:	f7fc f912 	bl	8000514 <__aeabi_i2d>
 80042f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80042f4:	f7fc f978 	bl	80005e8 <__aeabi_dmul>
 80042f8:	4603      	mov	r3, r0
 80042fa:	460c      	mov	r4, r1
 80042fc:	4625      	mov	r5, r4
 80042fe:	461c      	mov	r4, r3
 8004300:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004302:	f7fc f907 	bl	8000514 <__aeabi_i2d>
 8004306:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800430a:	f7fc f96d 	bl	80005e8 <__aeabi_dmul>
 800430e:	4602      	mov	r2, r0
 8004310:	460b      	mov	r3, r1
 8004312:	4620      	mov	r0, r4
 8004314:	4629      	mov	r1, r5
 8004316:	f7fb ffaf 	bl	8000278 <__aeabi_dsub>
 800431a:	4603      	mov	r3, r0
 800431c:	460c      	mov	r4, r1
 800431e:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
	int p_entera = p_entera_f;
 8004322:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004326:	f7fc fc0f 	bl	8000b48 <__aeabi_d2iz>
 800432a:	4603      	mov	r3, r0
 800432c:	63fb      	str	r3, [r7, #60]	; 0x3c
	int p_decimal = p_decimal_f;
 800432e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004332:	f7fc fc09 	bl	8000b48 <__aeabi_d2iz>
 8004336:	4603      	mov	r3, r0
 8004338:	65bb      	str	r3, [r7, #88]	; 0x58

	int size = size_int(p_entera);
 800433a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800433c:	f000 f932 	bl	80045a4 <size_int>
 8004340:	4603      	mov	r3, r0
 8004342:	63bb      	str	r3, [r7, #56]	; 0x38
	char p_entera_char[size];		// String de chars
 8004344:	6bbd      	ldr	r5, [r7, #56]	; 0x38
 8004346:	1e6b      	subs	r3, r5, #1
 8004348:	637b      	str	r3, [r7, #52]	; 0x34
 800434a:	462b      	mov	r3, r5
 800434c:	4619      	mov	r1, r3
 800434e:	f04f 0200 	mov.w	r2, #0
 8004352:	f04f 0300 	mov.w	r3, #0
 8004356:	f04f 0400 	mov.w	r4, #0
 800435a:	00d4      	lsls	r4, r2, #3
 800435c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004360:	00cb      	lsls	r3, r1, #3
 8004362:	462b      	mov	r3, r5
 8004364:	4619      	mov	r1, r3
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	f04f 0300 	mov.w	r3, #0
 800436e:	f04f 0400 	mov.w	r4, #0
 8004372:	00d4      	lsls	r4, r2, #3
 8004374:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004378:	00cb      	lsls	r3, r1, #3
 800437a:	462b      	mov	r3, r5
 800437c:	3307      	adds	r3, #7
 800437e:	08db      	lsrs	r3, r3, #3
 8004380:	00db      	lsls	r3, r3, #3
 8004382:	ebad 0d03 	sub.w	sp, sp, r3
 8004386:	466b      	mov	r3, sp
 8004388:	3300      	adds	r3, #0
 800438a:	633b      	str	r3, [r7, #48]	; 0x30
	sprintf(p_entera_char,"%d", p_entera);	// Cada numero del int en un char
 800438c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800438e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004390:	4983      	ldr	r1, [pc, #524]	; (80045a0 <tx_UART_double+0x330>)
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fade 	bl	8004954 <siprintf>

	char p_decimal_char[decimal_p];
 8004398:	7cf8      	ldrb	r0, [r7, #19]
 800439a:	4603      	mov	r3, r0
 800439c:	3b01      	subs	r3, #1
 800439e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80043a0:	b2c1      	uxtb	r1, r0
 80043a2:	f04f 0200 	mov.w	r2, #0
 80043a6:	f04f 0300 	mov.w	r3, #0
 80043aa:	f04f 0400 	mov.w	r4, #0
 80043ae:	00d4      	lsls	r4, r2, #3
 80043b0:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80043b4:	00cb      	lsls	r3, r1, #3
 80043b6:	b2c1      	uxtb	r1, r0
 80043b8:	f04f 0200 	mov.w	r2, #0
 80043bc:	f04f 0300 	mov.w	r3, #0
 80043c0:	f04f 0400 	mov.w	r4, #0
 80043c4:	00d4      	lsls	r4, r2, #3
 80043c6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80043ca:	00cb      	lsls	r3, r1, #3
 80043cc:	4603      	mov	r3, r0
 80043ce:	3307      	adds	r3, #7
 80043d0:	08db      	lsrs	r3, r3, #3
 80043d2:	00db      	lsls	r3, r3, #3
 80043d4:	ebad 0d03 	sub.w	sp, sp, r3
 80043d8:	466b      	mov	r3, sp
 80043da:	3300      	adds	r3, #0
 80043dc:	62bb      	str	r3, [r7, #40]	; 0x28
	size = size_int(p_decimal);
 80043de:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80043e0:	f000 f8e0 	bl	80045a4 <size_int>
 80043e4:	4603      	mov	r3, r0
 80043e6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (decimal_p>size){
 80043e8:	7cfb      	ldrb	r3, [r7, #19]
 80043ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ec:	429a      	cmp	r2, r3
 80043ee:	da21      	bge.n	8004434 <tx_UART_double+0x1c4>
		p_decimal = p_decimal + pow(10,decimal_p-1);
 80043f0:	6db8      	ldr	r0, [r7, #88]	; 0x58
 80043f2:	f7fc f88f 	bl	8000514 <__aeabi_i2d>
 80043f6:	4680      	mov	r8, r0
 80043f8:	4689      	mov	r9, r1
 80043fa:	7cfb      	ldrb	r3, [r7, #19]
 80043fc:	3b01      	subs	r3, #1
 80043fe:	4618      	mov	r0, r3
 8004400:	f7fc f888 	bl	8000514 <__aeabi_i2d>
 8004404:	4603      	mov	r3, r0
 8004406:	460c      	mov	r4, r1
 8004408:	ec44 3b11 	vmov	d1, r3, r4
 800440c:	ed9f 0b62 	vldr	d0, [pc, #392]	; 8004598 <tx_UART_double+0x328>
 8004410:	f000 ffe4 	bl	80053dc <pow>
 8004414:	ec54 3b10 	vmov	r3, r4, d0
 8004418:	461a      	mov	r2, r3
 800441a:	4623      	mov	r3, r4
 800441c:	4640      	mov	r0, r8
 800441e:	4649      	mov	r1, r9
 8004420:	f7fb ff2c 	bl	800027c <__adddf3>
 8004424:	4603      	mov	r3, r0
 8004426:	460c      	mov	r4, r1
 8004428:	4618      	mov	r0, r3
 800442a:	4621      	mov	r1, r4
 800442c:	f7fc fb8c 	bl	8000b48 <__aeabi_d2iz>
 8004430:	4603      	mov	r3, r0
 8004432:	65bb      	str	r3, [r7, #88]	; 0x58
	}
	sprintf(p_decimal_char,"%d", p_decimal);
 8004434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004436:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004438:	4959      	ldr	r1, [pc, #356]	; (80045a0 <tx_UART_double+0x330>)
 800443a:	4618      	mov	r0, r3
 800443c:	f000 fa8a 	bl	8004954 <siprintf>
	for(uint8_t i=0; i<(decimal_p-size);i++){
 8004440:	2300      	movs	r3, #0
 8004442:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8004446:	e009      	b.n	800445c <tx_UART_double+0x1ec>
		p_decimal_char[i] = '0';
 8004448:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 800444c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800444e:	2130      	movs	r1, #48	; 0x30
 8004450:	54d1      	strb	r1, [r2, r3]
	for(uint8_t i=0; i<(decimal_p-size);i++){
 8004452:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
 8004456:	3301      	adds	r3, #1
 8004458:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 800445c:	f897 205d 	ldrb.w	r2, [r7, #93]	; 0x5d
 8004460:	7cf9      	ldrb	r1, [r7, #19]
 8004462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004464:	1acb      	subs	r3, r1, r3
 8004466:	429a      	cmp	r2, r3
 8004468:	dbee      	blt.n	8004448 <tx_UART_double+0x1d8>
	}

	uint8_t total_size = sizeof(p_entera_char)+decimal_p+3+negativo;
 800446a:	b2ea      	uxtb	r2, r5
 800446c:	7cfb      	ldrb	r3, [r7, #19]
 800446e:	4413      	add	r3, r2
 8004470:	b2da      	uxtb	r2, r3
 8004472:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004476:	4413      	add	r3, r2
 8004478:	b2db      	uxtb	r3, r3
 800447a:	3303      	adds	r3, #3
 800447c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	uint8_t double_str[total_size];
 8004480:	f897 0027 	ldrb.w	r0, [r7, #39]	; 0x27
 8004484:	466b      	mov	r3, sp
 8004486:	4698      	mov	r8, r3
 8004488:	4603      	mov	r3, r0
 800448a:	3b01      	subs	r3, #1
 800448c:	623b      	str	r3, [r7, #32]
 800448e:	b2c1      	uxtb	r1, r0
 8004490:	f04f 0200 	mov.w	r2, #0
 8004494:	f04f 0300 	mov.w	r3, #0
 8004498:	f04f 0400 	mov.w	r4, #0
 800449c:	00d4      	lsls	r4, r2, #3
 800449e:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80044a2:	00cb      	lsls	r3, r1, #3
 80044a4:	b2c1      	uxtb	r1, r0
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	f04f 0400 	mov.w	r4, #0
 80044b2:	00d4      	lsls	r4, r2, #3
 80044b4:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80044b8:	00cb      	lsls	r3, r1, #3
 80044ba:	4603      	mov	r3, r0
 80044bc:	3307      	adds	r3, #7
 80044be:	08db      	lsrs	r3, r3, #3
 80044c0:	00db      	lsls	r3, r3, #3
 80044c2:	ebad 0d03 	sub.w	sp, sp, r3
 80044c6:	466b      	mov	r3, sp
 80044c8:	3300      	adds	r3, #0
 80044ca:	61fb      	str	r3, [r7, #28]

	double_str[total_size-1] = '\r';
 80044cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044d0:	3b01      	subs	r3, #1
 80044d2:	69fa      	ldr	r2, [r7, #28]
 80044d4:	210d      	movs	r1, #13
 80044d6:	54d1      	strb	r1, [r2, r3]
	double_str[total_size-2] = '\n';
 80044d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044dc:	3b02      	subs	r3, #2
 80044de:	69fa      	ldr	r2, [r7, #28]
 80044e0:	210a      	movs	r1, #10
 80044e2:	54d1      	strb	r1, [r2, r3]
	double_str[negativo+sizeof(p_entera_char)] = '.';
 80044e4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80044e8:	462a      	mov	r2, r5
 80044ea:	4413      	add	r3, r2
 80044ec:	69fa      	ldr	r2, [r7, #28]
 80044ee:	212e      	movs	r1, #46	; 0x2e
 80044f0:	54d1      	strb	r1, [r2, r3]

	for(int8_t i= (total_size-3); i>=0; i--){
 80044f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80044f6:	3b03      	subs	r3, #3
 80044f8:	b2db      	uxtb	r3, r3
 80044fa:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80044fe:	e030      	b.n	8004562 <tx_UART_double+0x2f2>
		if (i > (negativo+sizeof(p_entera_char))) {
 8004500:	f997 205e 	ldrsb.w	r2, [r7, #94]	; 0x5e
 8004504:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004508:	4629      	mov	r1, r5
 800450a:	440b      	add	r3, r1
 800450c:	429a      	cmp	r2, r3
 800450e:	d90e      	bls.n	800452e <tx_UART_double+0x2be>
			double_str[i] = (uint8_t) p_decimal_char[i-(negativo+sizeof(p_entera_char)+1)];
 8004510:	f997 205e 	ldrsb.w	r2, [r7, #94]	; 0x5e
 8004514:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004518:	4629      	mov	r1, r5
 800451a:	440b      	add	r3, r1
 800451c:	1ad3      	subs	r3, r2, r3
 800451e:	1e5a      	subs	r2, r3, #1
 8004520:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8004524:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004526:	5c89      	ldrb	r1, [r1, r2]
 8004528:	69fa      	ldr	r2, [r7, #28]
 800452a:	54d1      	strb	r1, [r2, r3]
 800452c:	e012      	b.n	8004554 <tx_UART_double+0x2e4>
		} else if (i < negativo+sizeof(p_entera_char)) {
 800452e:	f997 205e 	ldrsb.w	r2, [r7, #94]	; 0x5e
 8004532:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004536:	4629      	mov	r1, r5
 8004538:	440b      	add	r3, r1
 800453a:	429a      	cmp	r2, r3
 800453c:	d20a      	bcs.n	8004554 <tx_UART_double+0x2e4>
			double_str[i] = (uint8_t) p_entera_char[i-negativo];
 800453e:	f997 205e 	ldrsb.w	r2, [r7, #94]	; 0x5e
 8004542:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8004546:	1ad2      	subs	r2, r2, r3
 8004548:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 800454c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800454e:	5c89      	ldrb	r1, [r1, r2]
 8004550:	69fa      	ldr	r2, [r7, #28]
 8004552:	54d1      	strb	r1, [r2, r3]
	for(int8_t i= (total_size-3); i>=0; i--){
 8004554:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8004558:	b2db      	uxtb	r3, r3
 800455a:	3b01      	subs	r3, #1
 800455c:	b2db      	uxtb	r3, r3
 800455e:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8004562:	f997 305e 	ldrsb.w	r3, [r7, #94]	; 0x5e
 8004566:	2b00      	cmp	r3, #0
 8004568:	daca      	bge.n	8004500 <tx_UART_double+0x290>
		}
	}

	if (negativo == 1) {
 800456a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800456e:	2b01      	cmp	r3, #1
 8004570:	d102      	bne.n	8004578 <tx_UART_double+0x308>
		double_str[0] = '-';
 8004572:	69fb      	ldr	r3, [r7, #28]
 8004574:	222d      	movs	r2, #45	; 0x2d
 8004576:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(huart, double_str, sizeof(double_str), 10);
 8004578:	69f9      	ldr	r1, [r7, #28]
 800457a:	b282      	uxth	r2, r0
 800457c:	230a      	movs	r3, #10
 800457e:	6978      	ldr	r0, [r7, #20]
 8004580:	f7ff f965 	bl	800384e <HAL_UART_Transmit>
 8004584:	46c5      	mov	sp, r8
 8004586:	46b5      	mov	sp, r6
}
 8004588:	bf00      	nop
 800458a:	3764      	adds	r7, #100	; 0x64
 800458c:	46bd      	mov	sp, r7
 800458e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004592:	bf00      	nop
 8004594:	f3af 8000 	nop.w
 8004598:	00000000 	.word	0x00000000
 800459c:	40240000 	.word	0x40240000
 80045a0:	08006928 	.word	0x08006928

080045a4 <size_int>:
	byte_str[8] = '\r';
	byte_str[9] = '\n';
	HAL_UART_Transmit(huart, byte_str, sizeof(byte_str), 10);
}

uint8_t size_int(int data){
 80045a4:	b590      	push	{r4, r7, lr}
 80045a6:	b085      	sub	sp, #20
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
	uint8_t size;
	if (data==0){
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d102      	bne.n	80045b8 <size_int+0x14>
		size = 1;
 80045b2:	2301      	movs	r3, #1
 80045b4:	73fb      	strb	r3, [r7, #15]
 80045b6:	e021      	b.n	80045fc <size_int+0x58>
	}
	else {
		size = floor(log10(data))+1;
 80045b8:	6878      	ldr	r0, [r7, #4]
 80045ba:	f7fb ffab 	bl	8000514 <__aeabi_i2d>
 80045be:	4603      	mov	r3, r0
 80045c0:	460c      	mov	r4, r1
 80045c2:	ec44 3b10 	vmov	d0, r3, r4
 80045c6:	f000 fe89 	bl	80052dc <log10>
 80045ca:	eeb0 7a40 	vmov.f32	s14, s0
 80045ce:	eef0 7a60 	vmov.f32	s15, s1
 80045d2:	eeb0 0a47 	vmov.f32	s0, s14
 80045d6:	eef0 0a67 	vmov.f32	s1, s15
 80045da:	f000 fdc1 	bl	8005160 <floor>
 80045de:	ec51 0b10 	vmov	r0, r1, d0
 80045e2:	f04f 0200 	mov.w	r2, #0
 80045e6:	4b08      	ldr	r3, [pc, #32]	; (8004608 <size_int+0x64>)
 80045e8:	f7fb fe48 	bl	800027c <__adddf3>
 80045ec:	4603      	mov	r3, r0
 80045ee:	460c      	mov	r4, r1
 80045f0:	4618      	mov	r0, r3
 80045f2:	4621      	mov	r1, r4
 80045f4:	f7fc fad0 	bl	8000b98 <__aeabi_d2uiz>
 80045f8:	4603      	mov	r3, r0
 80045fa:	73fb      	strb	r3, [r7, #15]
	}
	return size;
 80045fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3714      	adds	r7, #20
 8004602:	46bd      	mov	sp, r7
 8004604:	bd90      	pop	{r4, r7, pc}
 8004606:	bf00      	nop
 8004608:	3ff00000 	.word	0x3ff00000

0800460c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800460c:	b480      	push	{r7}
 800460e:	b083      	sub	sp, #12
 8004610:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004612:	4b0f      	ldr	r3, [pc, #60]	; (8004650 <HAL_MspInit+0x44>)
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	4a0e      	ldr	r2, [pc, #56]	; (8004650 <HAL_MspInit+0x44>)
 8004618:	f043 0301 	orr.w	r3, r3, #1
 800461c:	6193      	str	r3, [r2, #24]
 800461e:	4b0c      	ldr	r3, [pc, #48]	; (8004650 <HAL_MspInit+0x44>)
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	f003 0301 	and.w	r3, r3, #1
 8004626:	607b      	str	r3, [r7, #4]
 8004628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800462a:	4b09      	ldr	r3, [pc, #36]	; (8004650 <HAL_MspInit+0x44>)
 800462c:	69db      	ldr	r3, [r3, #28]
 800462e:	4a08      	ldr	r2, [pc, #32]	; (8004650 <HAL_MspInit+0x44>)
 8004630:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004634:	61d3      	str	r3, [r2, #28]
 8004636:	4b06      	ldr	r3, [pc, #24]	; (8004650 <HAL_MspInit+0x44>)
 8004638:	69db      	ldr	r3, [r3, #28]
 800463a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800463e:	603b      	str	r3, [r7, #0]
 8004640:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004642:	bf00      	nop
 8004644:	370c      	adds	r7, #12
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
 800464e:	bf00      	nop
 8004650:	40021000 	.word	0x40021000

08004654 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b08a      	sub	sp, #40	; 0x28
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800465c:	f107 0314 	add.w	r3, r7, #20
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
 8004664:	605a      	str	r2, [r3, #4]
 8004666:	609a      	str	r2, [r3, #8]
 8004668:	60da      	str	r2, [r3, #12]
 800466a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004674:	d124      	bne.n	80046c0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004676:	4b14      	ldr	r3, [pc, #80]	; (80046c8 <HAL_ADC_MspInit+0x74>)
 8004678:	695b      	ldr	r3, [r3, #20]
 800467a:	4a13      	ldr	r2, [pc, #76]	; (80046c8 <HAL_ADC_MspInit+0x74>)
 800467c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004680:	6153      	str	r3, [r2, #20]
 8004682:	4b11      	ldr	r3, [pc, #68]	; (80046c8 <HAL_ADC_MspInit+0x74>)
 8004684:	695b      	ldr	r3, [r3, #20]
 8004686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800468e:	4b0e      	ldr	r3, [pc, #56]	; (80046c8 <HAL_ADC_MspInit+0x74>)
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	4a0d      	ldr	r2, [pc, #52]	; (80046c8 <HAL_ADC_MspInit+0x74>)
 8004694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004698:	6153      	str	r3, [r2, #20]
 800469a:	4b0b      	ldr	r3, [pc, #44]	; (80046c8 <HAL_ADC_MspInit+0x74>)
 800469c:	695b      	ldr	r3, [r3, #20]
 800469e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80046a6:	2301      	movs	r3, #1
 80046a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80046aa:	2303      	movs	r3, #3
 80046ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80046ae:	2300      	movs	r3, #0
 80046b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80046b2:	f107 0314 	add.w	r3, r7, #20
 80046b6:	4619      	mov	r1, r3
 80046b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80046bc:	f7fd fc8c 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80046c0:	bf00      	nop
 80046c2:	3728      	adds	r7, #40	; 0x28
 80046c4:	46bd      	mov	sp, r7
 80046c6:	bd80      	pop	{r7, pc}
 80046c8:	40021000 	.word	0x40021000

080046cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b08a      	sub	sp, #40	; 0x28
 80046d0:	af00      	add	r7, sp, #0
 80046d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80046d4:	f107 0314 	add.w	r3, r7, #20
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]
 80046dc:	605a      	str	r2, [r3, #4]
 80046de:	609a      	str	r2, [r3, #8]
 80046e0:	60da      	str	r2, [r3, #12]
 80046e2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	4a18      	ldr	r2, [pc, #96]	; (800474c <HAL_UART_MspInit+0x80>)
 80046ea:	4293      	cmp	r3, r2
 80046ec:	d129      	bne.n	8004742 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80046ee:	4b18      	ldr	r3, [pc, #96]	; (8004750 <HAL_UART_MspInit+0x84>)
 80046f0:	69db      	ldr	r3, [r3, #28]
 80046f2:	4a17      	ldr	r2, [pc, #92]	; (8004750 <HAL_UART_MspInit+0x84>)
 80046f4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80046f8:	61d3      	str	r3, [r2, #28]
 80046fa:	4b15      	ldr	r3, [pc, #84]	; (8004750 <HAL_UART_MspInit+0x84>)
 80046fc:	69db      	ldr	r3, [r3, #28]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	613b      	str	r3, [r7, #16]
 8004704:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004706:	4b12      	ldr	r3, [pc, #72]	; (8004750 <HAL_UART_MspInit+0x84>)
 8004708:	695b      	ldr	r3, [r3, #20]
 800470a:	4a11      	ldr	r2, [pc, #68]	; (8004750 <HAL_UART_MspInit+0x84>)
 800470c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004710:	6153      	str	r3, [r2, #20]
 8004712:	4b0f      	ldr	r3, [pc, #60]	; (8004750 <HAL_UART_MspInit+0x84>)
 8004714:	695b      	ldr	r3, [r3, #20]
 8004716:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800471a:	60fb      	str	r3, [r7, #12]
 800471c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800471e:	f248 0304 	movw	r3, #32772	; 0x8004
 8004722:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004724:	2302      	movs	r3, #2
 8004726:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004728:	2300      	movs	r3, #0
 800472a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800472c:	2303      	movs	r3, #3
 800472e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004730:	2307      	movs	r3, #7
 8004732:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004734:	f107 0314 	add.w	r3, r7, #20
 8004738:	4619      	mov	r1, r3
 800473a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800473e:	f7fd fc4b 	bl	8001fd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004742:	bf00      	nop
 8004744:	3728      	adds	r7, #40	; 0x28
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}
 800474a:	bf00      	nop
 800474c:	40004400 	.word	0x40004400
 8004750:	40021000 	.word	0x40021000

08004754 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004754:	b480      	push	{r7}
 8004756:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004758:	bf00      	nop
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr

08004762 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004762:	b480      	push	{r7}
 8004764:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004766:	e7fe      	b.n	8004766 <HardFault_Handler+0x4>

08004768 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004768:	b480      	push	{r7}
 800476a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800476c:	e7fe      	b.n	800476c <MemManage_Handler+0x4>

0800476e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800476e:	b480      	push	{r7}
 8004770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004772:	e7fe      	b.n	8004772 <BusFault_Handler+0x4>

08004774 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004774:	b480      	push	{r7}
 8004776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004778:	e7fe      	b.n	8004778 <UsageFault_Handler+0x4>

0800477a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800477a:	b480      	push	{r7}
 800477c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800477e:	bf00      	nop
 8004780:	46bd      	mov	sp, r7
 8004782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004786:	4770      	bx	lr

08004788 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004788:	b480      	push	{r7}
 800478a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800478c:	bf00      	nop
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004796:	b480      	push	{r7}
 8004798:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800479a:	bf00      	nop
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80047a4:	b580      	push	{r7, lr}
 80047a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80047a8:	f7fc faac 	bl	8000d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80047ac:	bf00      	nop
 80047ae:	bd80      	pop	{r7, pc}

080047b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80047b0:	b580      	push	{r7, lr}
 80047b2:	b084      	sub	sp, #16
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80047b8:	4b11      	ldr	r3, [pc, #68]	; (8004800 <_sbrk+0x50>)
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d102      	bne.n	80047c6 <_sbrk+0x16>
		heap_end = &end;
 80047c0:	4b0f      	ldr	r3, [pc, #60]	; (8004800 <_sbrk+0x50>)
 80047c2:	4a10      	ldr	r2, [pc, #64]	; (8004804 <_sbrk+0x54>)
 80047c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80047c6:	4b0e      	ldr	r3, [pc, #56]	; (8004800 <_sbrk+0x50>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80047cc:	4b0c      	ldr	r3, [pc, #48]	; (8004800 <_sbrk+0x50>)
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	4413      	add	r3, r2
 80047d4:	466a      	mov	r2, sp
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d907      	bls.n	80047ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80047da:	f000 f889 	bl	80048f0 <__errno>
 80047de:	4602      	mov	r2, r0
 80047e0:	230c      	movs	r3, #12
 80047e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80047e4:	f04f 33ff 	mov.w	r3, #4294967295
 80047e8:	e006      	b.n	80047f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80047ea:	4b05      	ldr	r3, [pc, #20]	; (8004800 <_sbrk+0x50>)
 80047ec:	681a      	ldr	r2, [r3, #0]
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4413      	add	r3, r2
 80047f2:	4a03      	ldr	r2, [pc, #12]	; (8004800 <_sbrk+0x50>)
 80047f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80047f6:	68fb      	ldr	r3, [r7, #12]
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3710      	adds	r7, #16
 80047fc:	46bd      	mov	sp, r7
 80047fe:	bd80      	pop	{r7, pc}
 8004800:	20000090 	.word	0x20000090
 8004804:	20000168 	.word	0x20000168

08004808 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004808:	b480      	push	{r7}
 800480a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800480c:	4b1f      	ldr	r3, [pc, #124]	; (800488c <SystemInit+0x84>)
 800480e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004812:	4a1e      	ldr	r2, [pc, #120]	; (800488c <SystemInit+0x84>)
 8004814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800481c:	4b1c      	ldr	r3, [pc, #112]	; (8004890 <SystemInit+0x88>)
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4a1b      	ldr	r2, [pc, #108]	; (8004890 <SystemInit+0x88>)
 8004822:	f043 0301 	orr.w	r3, r3, #1
 8004826:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004828:	4b19      	ldr	r3, [pc, #100]	; (8004890 <SystemInit+0x88>)
 800482a:	685a      	ldr	r2, [r3, #4]
 800482c:	4918      	ldr	r1, [pc, #96]	; (8004890 <SystemInit+0x88>)
 800482e:	4b19      	ldr	r3, [pc, #100]	; (8004894 <SystemInit+0x8c>)
 8004830:	4013      	ands	r3, r2
 8004832:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004834:	4b16      	ldr	r3, [pc, #88]	; (8004890 <SystemInit+0x88>)
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	4a15      	ldr	r2, [pc, #84]	; (8004890 <SystemInit+0x88>)
 800483a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800483e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004842:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004844:	4b12      	ldr	r3, [pc, #72]	; (8004890 <SystemInit+0x88>)
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	4a11      	ldr	r2, [pc, #68]	; (8004890 <SystemInit+0x88>)
 800484a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800484e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004850:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <SystemInit+0x88>)
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	4a0e      	ldr	r2, [pc, #56]	; (8004890 <SystemInit+0x88>)
 8004856:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800485a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800485c:	4b0c      	ldr	r3, [pc, #48]	; (8004890 <SystemInit+0x88>)
 800485e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004860:	4a0b      	ldr	r2, [pc, #44]	; (8004890 <SystemInit+0x88>)
 8004862:	f023 030f 	bic.w	r3, r3, #15
 8004866:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004868:	4b09      	ldr	r3, [pc, #36]	; (8004890 <SystemInit+0x88>)
 800486a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800486c:	4908      	ldr	r1, [pc, #32]	; (8004890 <SystemInit+0x88>)
 800486e:	4b0a      	ldr	r3, [pc, #40]	; (8004898 <SystemInit+0x90>)
 8004870:	4013      	ands	r3, r2
 8004872:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004874:	4b06      	ldr	r3, [pc, #24]	; (8004890 <SystemInit+0x88>)
 8004876:	2200      	movs	r2, #0
 8004878:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800487a:	4b04      	ldr	r3, [pc, #16]	; (800488c <SystemInit+0x84>)
 800487c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004880:	609a      	str	r2, [r3, #8]
#endif
}
 8004882:	bf00      	nop
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	e000ed00 	.word	0xe000ed00
 8004890:	40021000 	.word	0x40021000
 8004894:	f87fc00c 	.word	0xf87fc00c
 8004898:	ff00fccc 	.word	0xff00fccc

0800489c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800489c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80048d4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80048a0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80048a2:	e003      	b.n	80048ac <LoopCopyDataInit>

080048a4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80048a4:	4b0c      	ldr	r3, [pc, #48]	; (80048d8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80048a6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80048a8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80048aa:	3104      	adds	r1, #4

080048ac <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80048ac:	480b      	ldr	r0, [pc, #44]	; (80048dc <LoopForever+0xa>)
	ldr	r3, =_edata
 80048ae:	4b0c      	ldr	r3, [pc, #48]	; (80048e0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80048b0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80048b2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80048b4:	d3f6      	bcc.n	80048a4 <CopyDataInit>
	ldr	r2, =_sbss
 80048b6:	4a0b      	ldr	r2, [pc, #44]	; (80048e4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80048b8:	e002      	b.n	80048c0 <LoopFillZerobss>

080048ba <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80048ba:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80048bc:	f842 3b04 	str.w	r3, [r2], #4

080048c0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80048c0:	4b09      	ldr	r3, [pc, #36]	; (80048e8 <LoopForever+0x16>)
	cmp	r2, r3
 80048c2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80048c4:	d3f9      	bcc.n	80048ba <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80048c6:	f7ff ff9f 	bl	8004808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80048ca:	f000 f817 	bl	80048fc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80048ce:	f7ff fae7 	bl	8003ea0 <main>

080048d2 <LoopForever>:

LoopForever:
    b LoopForever
 80048d2:	e7fe      	b.n	80048d2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80048d4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80048d8:	080069f0 	.word	0x080069f0
	ldr	r0, =_sdata
 80048dc:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80048e0:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80048e4:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80048e8:	20000168 	.word	0x20000168

080048ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80048ec:	e7fe      	b.n	80048ec <ADC1_2_IRQHandler>
	...

080048f0 <__errno>:
 80048f0:	4b01      	ldr	r3, [pc, #4]	; (80048f8 <__errno+0x8>)
 80048f2:	6818      	ldr	r0, [r3, #0]
 80048f4:	4770      	bx	lr
 80048f6:	bf00      	nop
 80048f8:	2000000c 	.word	0x2000000c

080048fc <__libc_init_array>:
 80048fc:	b570      	push	{r4, r5, r6, lr}
 80048fe:	4e0d      	ldr	r6, [pc, #52]	; (8004934 <__libc_init_array+0x38>)
 8004900:	4c0d      	ldr	r4, [pc, #52]	; (8004938 <__libc_init_array+0x3c>)
 8004902:	1ba4      	subs	r4, r4, r6
 8004904:	10a4      	asrs	r4, r4, #2
 8004906:	2500      	movs	r5, #0
 8004908:	42a5      	cmp	r5, r4
 800490a:	d109      	bne.n	8004920 <__libc_init_array+0x24>
 800490c:	4e0b      	ldr	r6, [pc, #44]	; (800493c <__libc_init_array+0x40>)
 800490e:	4c0c      	ldr	r4, [pc, #48]	; (8004940 <__libc_init_array+0x44>)
 8004910:	f001 fffc 	bl	800690c <_init>
 8004914:	1ba4      	subs	r4, r4, r6
 8004916:	10a4      	asrs	r4, r4, #2
 8004918:	2500      	movs	r5, #0
 800491a:	42a5      	cmp	r5, r4
 800491c:	d105      	bne.n	800492a <__libc_init_array+0x2e>
 800491e:	bd70      	pop	{r4, r5, r6, pc}
 8004920:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004924:	4798      	blx	r3
 8004926:	3501      	adds	r5, #1
 8004928:	e7ee      	b.n	8004908 <__libc_init_array+0xc>
 800492a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800492e:	4798      	blx	r3
 8004930:	3501      	adds	r5, #1
 8004932:	e7f2      	b.n	800491a <__libc_init_array+0x1e>
 8004934:	080069e8 	.word	0x080069e8
 8004938:	080069e8 	.word	0x080069e8
 800493c:	080069e8 	.word	0x080069e8
 8004940:	080069ec 	.word	0x080069ec

08004944 <memset>:
 8004944:	4402      	add	r2, r0
 8004946:	4603      	mov	r3, r0
 8004948:	4293      	cmp	r3, r2
 800494a:	d100      	bne.n	800494e <memset+0xa>
 800494c:	4770      	bx	lr
 800494e:	f803 1b01 	strb.w	r1, [r3], #1
 8004952:	e7f9      	b.n	8004948 <memset+0x4>

08004954 <siprintf>:
 8004954:	b40e      	push	{r1, r2, r3}
 8004956:	b500      	push	{lr}
 8004958:	b09c      	sub	sp, #112	; 0x70
 800495a:	ab1d      	add	r3, sp, #116	; 0x74
 800495c:	9002      	str	r0, [sp, #8]
 800495e:	9006      	str	r0, [sp, #24]
 8004960:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004964:	4809      	ldr	r0, [pc, #36]	; (800498c <siprintf+0x38>)
 8004966:	9107      	str	r1, [sp, #28]
 8004968:	9104      	str	r1, [sp, #16]
 800496a:	4909      	ldr	r1, [pc, #36]	; (8004990 <siprintf+0x3c>)
 800496c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004970:	9105      	str	r1, [sp, #20]
 8004972:	6800      	ldr	r0, [r0, #0]
 8004974:	9301      	str	r3, [sp, #4]
 8004976:	a902      	add	r1, sp, #8
 8004978:	f000 f866 	bl	8004a48 <_svfiprintf_r>
 800497c:	9b02      	ldr	r3, [sp, #8]
 800497e:	2200      	movs	r2, #0
 8004980:	701a      	strb	r2, [r3, #0]
 8004982:	b01c      	add	sp, #112	; 0x70
 8004984:	f85d eb04 	ldr.w	lr, [sp], #4
 8004988:	b003      	add	sp, #12
 800498a:	4770      	bx	lr
 800498c:	2000000c 	.word	0x2000000c
 8004990:	ffff0208 	.word	0xffff0208

08004994 <__ssputs_r>:
 8004994:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004998:	688e      	ldr	r6, [r1, #8]
 800499a:	429e      	cmp	r6, r3
 800499c:	4682      	mov	sl, r0
 800499e:	460c      	mov	r4, r1
 80049a0:	4690      	mov	r8, r2
 80049a2:	4699      	mov	r9, r3
 80049a4:	d837      	bhi.n	8004a16 <__ssputs_r+0x82>
 80049a6:	898a      	ldrh	r2, [r1, #12]
 80049a8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80049ac:	d031      	beq.n	8004a12 <__ssputs_r+0x7e>
 80049ae:	6825      	ldr	r5, [r4, #0]
 80049b0:	6909      	ldr	r1, [r1, #16]
 80049b2:	1a6f      	subs	r7, r5, r1
 80049b4:	6965      	ldr	r5, [r4, #20]
 80049b6:	2302      	movs	r3, #2
 80049b8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80049bc:	fb95 f5f3 	sdiv	r5, r5, r3
 80049c0:	f109 0301 	add.w	r3, r9, #1
 80049c4:	443b      	add	r3, r7
 80049c6:	429d      	cmp	r5, r3
 80049c8:	bf38      	it	cc
 80049ca:	461d      	movcc	r5, r3
 80049cc:	0553      	lsls	r3, r2, #21
 80049ce:	d530      	bpl.n	8004a32 <__ssputs_r+0x9e>
 80049d0:	4629      	mov	r1, r5
 80049d2:	f000 fb2b 	bl	800502c <_malloc_r>
 80049d6:	4606      	mov	r6, r0
 80049d8:	b950      	cbnz	r0, 80049f0 <__ssputs_r+0x5c>
 80049da:	230c      	movs	r3, #12
 80049dc:	f8ca 3000 	str.w	r3, [sl]
 80049e0:	89a3      	ldrh	r3, [r4, #12]
 80049e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80049e6:	81a3      	strh	r3, [r4, #12]
 80049e8:	f04f 30ff 	mov.w	r0, #4294967295
 80049ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80049f0:	463a      	mov	r2, r7
 80049f2:	6921      	ldr	r1, [r4, #16]
 80049f4:	f000 faa8 	bl	8004f48 <memcpy>
 80049f8:	89a3      	ldrh	r3, [r4, #12]
 80049fa:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80049fe:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004a02:	81a3      	strh	r3, [r4, #12]
 8004a04:	6126      	str	r6, [r4, #16]
 8004a06:	6165      	str	r5, [r4, #20]
 8004a08:	443e      	add	r6, r7
 8004a0a:	1bed      	subs	r5, r5, r7
 8004a0c:	6026      	str	r6, [r4, #0]
 8004a0e:	60a5      	str	r5, [r4, #8]
 8004a10:	464e      	mov	r6, r9
 8004a12:	454e      	cmp	r6, r9
 8004a14:	d900      	bls.n	8004a18 <__ssputs_r+0x84>
 8004a16:	464e      	mov	r6, r9
 8004a18:	4632      	mov	r2, r6
 8004a1a:	4641      	mov	r1, r8
 8004a1c:	6820      	ldr	r0, [r4, #0]
 8004a1e:	f000 fa9e 	bl	8004f5e <memmove>
 8004a22:	68a3      	ldr	r3, [r4, #8]
 8004a24:	1b9b      	subs	r3, r3, r6
 8004a26:	60a3      	str	r3, [r4, #8]
 8004a28:	6823      	ldr	r3, [r4, #0]
 8004a2a:	441e      	add	r6, r3
 8004a2c:	6026      	str	r6, [r4, #0]
 8004a2e:	2000      	movs	r0, #0
 8004a30:	e7dc      	b.n	80049ec <__ssputs_r+0x58>
 8004a32:	462a      	mov	r2, r5
 8004a34:	f000 fb54 	bl	80050e0 <_realloc_r>
 8004a38:	4606      	mov	r6, r0
 8004a3a:	2800      	cmp	r0, #0
 8004a3c:	d1e2      	bne.n	8004a04 <__ssputs_r+0x70>
 8004a3e:	6921      	ldr	r1, [r4, #16]
 8004a40:	4650      	mov	r0, sl
 8004a42:	f000 faa5 	bl	8004f90 <_free_r>
 8004a46:	e7c8      	b.n	80049da <__ssputs_r+0x46>

08004a48 <_svfiprintf_r>:
 8004a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a4c:	461d      	mov	r5, r3
 8004a4e:	898b      	ldrh	r3, [r1, #12]
 8004a50:	061f      	lsls	r7, r3, #24
 8004a52:	b09d      	sub	sp, #116	; 0x74
 8004a54:	4680      	mov	r8, r0
 8004a56:	460c      	mov	r4, r1
 8004a58:	4616      	mov	r6, r2
 8004a5a:	d50f      	bpl.n	8004a7c <_svfiprintf_r+0x34>
 8004a5c:	690b      	ldr	r3, [r1, #16]
 8004a5e:	b96b      	cbnz	r3, 8004a7c <_svfiprintf_r+0x34>
 8004a60:	2140      	movs	r1, #64	; 0x40
 8004a62:	f000 fae3 	bl	800502c <_malloc_r>
 8004a66:	6020      	str	r0, [r4, #0]
 8004a68:	6120      	str	r0, [r4, #16]
 8004a6a:	b928      	cbnz	r0, 8004a78 <_svfiprintf_r+0x30>
 8004a6c:	230c      	movs	r3, #12
 8004a6e:	f8c8 3000 	str.w	r3, [r8]
 8004a72:	f04f 30ff 	mov.w	r0, #4294967295
 8004a76:	e0c8      	b.n	8004c0a <_svfiprintf_r+0x1c2>
 8004a78:	2340      	movs	r3, #64	; 0x40
 8004a7a:	6163      	str	r3, [r4, #20]
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a80:	2320      	movs	r3, #32
 8004a82:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004a86:	2330      	movs	r3, #48	; 0x30
 8004a88:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8004a8c:	9503      	str	r5, [sp, #12]
 8004a8e:	f04f 0b01 	mov.w	fp, #1
 8004a92:	4637      	mov	r7, r6
 8004a94:	463d      	mov	r5, r7
 8004a96:	f815 3b01 	ldrb.w	r3, [r5], #1
 8004a9a:	b10b      	cbz	r3, 8004aa0 <_svfiprintf_r+0x58>
 8004a9c:	2b25      	cmp	r3, #37	; 0x25
 8004a9e:	d13e      	bne.n	8004b1e <_svfiprintf_r+0xd6>
 8004aa0:	ebb7 0a06 	subs.w	sl, r7, r6
 8004aa4:	d00b      	beq.n	8004abe <_svfiprintf_r+0x76>
 8004aa6:	4653      	mov	r3, sl
 8004aa8:	4632      	mov	r2, r6
 8004aaa:	4621      	mov	r1, r4
 8004aac:	4640      	mov	r0, r8
 8004aae:	f7ff ff71 	bl	8004994 <__ssputs_r>
 8004ab2:	3001      	adds	r0, #1
 8004ab4:	f000 80a4 	beq.w	8004c00 <_svfiprintf_r+0x1b8>
 8004ab8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004aba:	4453      	add	r3, sl
 8004abc:	9309      	str	r3, [sp, #36]	; 0x24
 8004abe:	783b      	ldrb	r3, [r7, #0]
 8004ac0:	2b00      	cmp	r3, #0
 8004ac2:	f000 809d 	beq.w	8004c00 <_svfiprintf_r+0x1b8>
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	f04f 32ff 	mov.w	r2, #4294967295
 8004acc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ad0:	9304      	str	r3, [sp, #16]
 8004ad2:	9307      	str	r3, [sp, #28]
 8004ad4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004ad8:	931a      	str	r3, [sp, #104]	; 0x68
 8004ada:	462f      	mov	r7, r5
 8004adc:	2205      	movs	r2, #5
 8004ade:	f817 1b01 	ldrb.w	r1, [r7], #1
 8004ae2:	4850      	ldr	r0, [pc, #320]	; (8004c24 <_svfiprintf_r+0x1dc>)
 8004ae4:	f7fb fb74 	bl	80001d0 <memchr>
 8004ae8:	9b04      	ldr	r3, [sp, #16]
 8004aea:	b9d0      	cbnz	r0, 8004b22 <_svfiprintf_r+0xda>
 8004aec:	06d9      	lsls	r1, r3, #27
 8004aee:	bf44      	itt	mi
 8004af0:	2220      	movmi	r2, #32
 8004af2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004af6:	071a      	lsls	r2, r3, #28
 8004af8:	bf44      	itt	mi
 8004afa:	222b      	movmi	r2, #43	; 0x2b
 8004afc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004b00:	782a      	ldrb	r2, [r5, #0]
 8004b02:	2a2a      	cmp	r2, #42	; 0x2a
 8004b04:	d015      	beq.n	8004b32 <_svfiprintf_r+0xea>
 8004b06:	9a07      	ldr	r2, [sp, #28]
 8004b08:	462f      	mov	r7, r5
 8004b0a:	2000      	movs	r0, #0
 8004b0c:	250a      	movs	r5, #10
 8004b0e:	4639      	mov	r1, r7
 8004b10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b14:	3b30      	subs	r3, #48	; 0x30
 8004b16:	2b09      	cmp	r3, #9
 8004b18:	d94d      	bls.n	8004bb6 <_svfiprintf_r+0x16e>
 8004b1a:	b1b8      	cbz	r0, 8004b4c <_svfiprintf_r+0x104>
 8004b1c:	e00f      	b.n	8004b3e <_svfiprintf_r+0xf6>
 8004b1e:	462f      	mov	r7, r5
 8004b20:	e7b8      	b.n	8004a94 <_svfiprintf_r+0x4c>
 8004b22:	4a40      	ldr	r2, [pc, #256]	; (8004c24 <_svfiprintf_r+0x1dc>)
 8004b24:	1a80      	subs	r0, r0, r2
 8004b26:	fa0b f000 	lsl.w	r0, fp, r0
 8004b2a:	4318      	orrs	r0, r3
 8004b2c:	9004      	str	r0, [sp, #16]
 8004b2e:	463d      	mov	r5, r7
 8004b30:	e7d3      	b.n	8004ada <_svfiprintf_r+0x92>
 8004b32:	9a03      	ldr	r2, [sp, #12]
 8004b34:	1d11      	adds	r1, r2, #4
 8004b36:	6812      	ldr	r2, [r2, #0]
 8004b38:	9103      	str	r1, [sp, #12]
 8004b3a:	2a00      	cmp	r2, #0
 8004b3c:	db01      	blt.n	8004b42 <_svfiprintf_r+0xfa>
 8004b3e:	9207      	str	r2, [sp, #28]
 8004b40:	e004      	b.n	8004b4c <_svfiprintf_r+0x104>
 8004b42:	4252      	negs	r2, r2
 8004b44:	f043 0302 	orr.w	r3, r3, #2
 8004b48:	9207      	str	r2, [sp, #28]
 8004b4a:	9304      	str	r3, [sp, #16]
 8004b4c:	783b      	ldrb	r3, [r7, #0]
 8004b4e:	2b2e      	cmp	r3, #46	; 0x2e
 8004b50:	d10c      	bne.n	8004b6c <_svfiprintf_r+0x124>
 8004b52:	787b      	ldrb	r3, [r7, #1]
 8004b54:	2b2a      	cmp	r3, #42	; 0x2a
 8004b56:	d133      	bne.n	8004bc0 <_svfiprintf_r+0x178>
 8004b58:	9b03      	ldr	r3, [sp, #12]
 8004b5a:	1d1a      	adds	r2, r3, #4
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	9203      	str	r2, [sp, #12]
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	bfb8      	it	lt
 8004b64:	f04f 33ff 	movlt.w	r3, #4294967295
 8004b68:	3702      	adds	r7, #2
 8004b6a:	9305      	str	r3, [sp, #20]
 8004b6c:	4d2e      	ldr	r5, [pc, #184]	; (8004c28 <_svfiprintf_r+0x1e0>)
 8004b6e:	7839      	ldrb	r1, [r7, #0]
 8004b70:	2203      	movs	r2, #3
 8004b72:	4628      	mov	r0, r5
 8004b74:	f7fb fb2c 	bl	80001d0 <memchr>
 8004b78:	b138      	cbz	r0, 8004b8a <_svfiprintf_r+0x142>
 8004b7a:	2340      	movs	r3, #64	; 0x40
 8004b7c:	1b40      	subs	r0, r0, r5
 8004b7e:	fa03 f000 	lsl.w	r0, r3, r0
 8004b82:	9b04      	ldr	r3, [sp, #16]
 8004b84:	4303      	orrs	r3, r0
 8004b86:	3701      	adds	r7, #1
 8004b88:	9304      	str	r3, [sp, #16]
 8004b8a:	7839      	ldrb	r1, [r7, #0]
 8004b8c:	4827      	ldr	r0, [pc, #156]	; (8004c2c <_svfiprintf_r+0x1e4>)
 8004b8e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004b92:	2206      	movs	r2, #6
 8004b94:	1c7e      	adds	r6, r7, #1
 8004b96:	f7fb fb1b 	bl	80001d0 <memchr>
 8004b9a:	2800      	cmp	r0, #0
 8004b9c:	d038      	beq.n	8004c10 <_svfiprintf_r+0x1c8>
 8004b9e:	4b24      	ldr	r3, [pc, #144]	; (8004c30 <_svfiprintf_r+0x1e8>)
 8004ba0:	bb13      	cbnz	r3, 8004be8 <_svfiprintf_r+0x1a0>
 8004ba2:	9b03      	ldr	r3, [sp, #12]
 8004ba4:	3307      	adds	r3, #7
 8004ba6:	f023 0307 	bic.w	r3, r3, #7
 8004baa:	3308      	adds	r3, #8
 8004bac:	9303      	str	r3, [sp, #12]
 8004bae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bb0:	444b      	add	r3, r9
 8004bb2:	9309      	str	r3, [sp, #36]	; 0x24
 8004bb4:	e76d      	b.n	8004a92 <_svfiprintf_r+0x4a>
 8004bb6:	fb05 3202 	mla	r2, r5, r2, r3
 8004bba:	2001      	movs	r0, #1
 8004bbc:	460f      	mov	r7, r1
 8004bbe:	e7a6      	b.n	8004b0e <_svfiprintf_r+0xc6>
 8004bc0:	2300      	movs	r3, #0
 8004bc2:	3701      	adds	r7, #1
 8004bc4:	9305      	str	r3, [sp, #20]
 8004bc6:	4619      	mov	r1, r3
 8004bc8:	250a      	movs	r5, #10
 8004bca:	4638      	mov	r0, r7
 8004bcc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004bd0:	3a30      	subs	r2, #48	; 0x30
 8004bd2:	2a09      	cmp	r2, #9
 8004bd4:	d903      	bls.n	8004bde <_svfiprintf_r+0x196>
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d0c8      	beq.n	8004b6c <_svfiprintf_r+0x124>
 8004bda:	9105      	str	r1, [sp, #20]
 8004bdc:	e7c6      	b.n	8004b6c <_svfiprintf_r+0x124>
 8004bde:	fb05 2101 	mla	r1, r5, r1, r2
 8004be2:	2301      	movs	r3, #1
 8004be4:	4607      	mov	r7, r0
 8004be6:	e7f0      	b.n	8004bca <_svfiprintf_r+0x182>
 8004be8:	ab03      	add	r3, sp, #12
 8004bea:	9300      	str	r3, [sp, #0]
 8004bec:	4622      	mov	r2, r4
 8004bee:	4b11      	ldr	r3, [pc, #68]	; (8004c34 <_svfiprintf_r+0x1ec>)
 8004bf0:	a904      	add	r1, sp, #16
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	f3af 8000 	nop.w
 8004bf8:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004bfc:	4681      	mov	r9, r0
 8004bfe:	d1d6      	bne.n	8004bae <_svfiprintf_r+0x166>
 8004c00:	89a3      	ldrh	r3, [r4, #12]
 8004c02:	065b      	lsls	r3, r3, #25
 8004c04:	f53f af35 	bmi.w	8004a72 <_svfiprintf_r+0x2a>
 8004c08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004c0a:	b01d      	add	sp, #116	; 0x74
 8004c0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c10:	ab03      	add	r3, sp, #12
 8004c12:	9300      	str	r3, [sp, #0]
 8004c14:	4622      	mov	r2, r4
 8004c16:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <_svfiprintf_r+0x1ec>)
 8004c18:	a904      	add	r1, sp, #16
 8004c1a:	4640      	mov	r0, r8
 8004c1c:	f000 f882 	bl	8004d24 <_printf_i>
 8004c20:	e7ea      	b.n	8004bf8 <_svfiprintf_r+0x1b0>
 8004c22:	bf00      	nop
 8004c24:	08006964 	.word	0x08006964
 8004c28:	0800696a 	.word	0x0800696a
 8004c2c:	0800696e 	.word	0x0800696e
 8004c30:	00000000 	.word	0x00000000
 8004c34:	08004995 	.word	0x08004995

08004c38 <_printf_common>:
 8004c38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004c3c:	4691      	mov	r9, r2
 8004c3e:	461f      	mov	r7, r3
 8004c40:	688a      	ldr	r2, [r1, #8]
 8004c42:	690b      	ldr	r3, [r1, #16]
 8004c44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004c48:	4293      	cmp	r3, r2
 8004c4a:	bfb8      	it	lt
 8004c4c:	4613      	movlt	r3, r2
 8004c4e:	f8c9 3000 	str.w	r3, [r9]
 8004c52:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004c56:	4606      	mov	r6, r0
 8004c58:	460c      	mov	r4, r1
 8004c5a:	b112      	cbz	r2, 8004c62 <_printf_common+0x2a>
 8004c5c:	3301      	adds	r3, #1
 8004c5e:	f8c9 3000 	str.w	r3, [r9]
 8004c62:	6823      	ldr	r3, [r4, #0]
 8004c64:	0699      	lsls	r1, r3, #26
 8004c66:	bf42      	ittt	mi
 8004c68:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004c6c:	3302      	addmi	r3, #2
 8004c6e:	f8c9 3000 	strmi.w	r3, [r9]
 8004c72:	6825      	ldr	r5, [r4, #0]
 8004c74:	f015 0506 	ands.w	r5, r5, #6
 8004c78:	d107      	bne.n	8004c8a <_printf_common+0x52>
 8004c7a:	f104 0a19 	add.w	sl, r4, #25
 8004c7e:	68e3      	ldr	r3, [r4, #12]
 8004c80:	f8d9 2000 	ldr.w	r2, [r9]
 8004c84:	1a9b      	subs	r3, r3, r2
 8004c86:	42ab      	cmp	r3, r5
 8004c88:	dc28      	bgt.n	8004cdc <_printf_common+0xa4>
 8004c8a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004c8e:	6822      	ldr	r2, [r4, #0]
 8004c90:	3300      	adds	r3, #0
 8004c92:	bf18      	it	ne
 8004c94:	2301      	movne	r3, #1
 8004c96:	0692      	lsls	r2, r2, #26
 8004c98:	d42d      	bmi.n	8004cf6 <_printf_common+0xbe>
 8004c9a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004c9e:	4639      	mov	r1, r7
 8004ca0:	4630      	mov	r0, r6
 8004ca2:	47c0      	blx	r8
 8004ca4:	3001      	adds	r0, #1
 8004ca6:	d020      	beq.n	8004cea <_printf_common+0xb2>
 8004ca8:	6823      	ldr	r3, [r4, #0]
 8004caa:	68e5      	ldr	r5, [r4, #12]
 8004cac:	f8d9 2000 	ldr.w	r2, [r9]
 8004cb0:	f003 0306 	and.w	r3, r3, #6
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	bf08      	it	eq
 8004cb8:	1aad      	subeq	r5, r5, r2
 8004cba:	68a3      	ldr	r3, [r4, #8]
 8004cbc:	6922      	ldr	r2, [r4, #16]
 8004cbe:	bf0c      	ite	eq
 8004cc0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004cc4:	2500      	movne	r5, #0
 8004cc6:	4293      	cmp	r3, r2
 8004cc8:	bfc4      	itt	gt
 8004cca:	1a9b      	subgt	r3, r3, r2
 8004ccc:	18ed      	addgt	r5, r5, r3
 8004cce:	f04f 0900 	mov.w	r9, #0
 8004cd2:	341a      	adds	r4, #26
 8004cd4:	454d      	cmp	r5, r9
 8004cd6:	d11a      	bne.n	8004d0e <_printf_common+0xd6>
 8004cd8:	2000      	movs	r0, #0
 8004cda:	e008      	b.n	8004cee <_printf_common+0xb6>
 8004cdc:	2301      	movs	r3, #1
 8004cde:	4652      	mov	r2, sl
 8004ce0:	4639      	mov	r1, r7
 8004ce2:	4630      	mov	r0, r6
 8004ce4:	47c0      	blx	r8
 8004ce6:	3001      	adds	r0, #1
 8004ce8:	d103      	bne.n	8004cf2 <_printf_common+0xba>
 8004cea:	f04f 30ff 	mov.w	r0, #4294967295
 8004cee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004cf2:	3501      	adds	r5, #1
 8004cf4:	e7c3      	b.n	8004c7e <_printf_common+0x46>
 8004cf6:	18e1      	adds	r1, r4, r3
 8004cf8:	1c5a      	adds	r2, r3, #1
 8004cfa:	2030      	movs	r0, #48	; 0x30
 8004cfc:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004d00:	4422      	add	r2, r4
 8004d02:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004d06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004d0a:	3302      	adds	r3, #2
 8004d0c:	e7c5      	b.n	8004c9a <_printf_common+0x62>
 8004d0e:	2301      	movs	r3, #1
 8004d10:	4622      	mov	r2, r4
 8004d12:	4639      	mov	r1, r7
 8004d14:	4630      	mov	r0, r6
 8004d16:	47c0      	blx	r8
 8004d18:	3001      	adds	r0, #1
 8004d1a:	d0e6      	beq.n	8004cea <_printf_common+0xb2>
 8004d1c:	f109 0901 	add.w	r9, r9, #1
 8004d20:	e7d8      	b.n	8004cd4 <_printf_common+0x9c>
	...

08004d24 <_printf_i>:
 8004d24:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d28:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004d2c:	460c      	mov	r4, r1
 8004d2e:	7e09      	ldrb	r1, [r1, #24]
 8004d30:	b085      	sub	sp, #20
 8004d32:	296e      	cmp	r1, #110	; 0x6e
 8004d34:	4617      	mov	r7, r2
 8004d36:	4606      	mov	r6, r0
 8004d38:	4698      	mov	r8, r3
 8004d3a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004d3c:	f000 80b3 	beq.w	8004ea6 <_printf_i+0x182>
 8004d40:	d822      	bhi.n	8004d88 <_printf_i+0x64>
 8004d42:	2963      	cmp	r1, #99	; 0x63
 8004d44:	d036      	beq.n	8004db4 <_printf_i+0x90>
 8004d46:	d80a      	bhi.n	8004d5e <_printf_i+0x3a>
 8004d48:	2900      	cmp	r1, #0
 8004d4a:	f000 80b9 	beq.w	8004ec0 <_printf_i+0x19c>
 8004d4e:	2958      	cmp	r1, #88	; 0x58
 8004d50:	f000 8083 	beq.w	8004e5a <_printf_i+0x136>
 8004d54:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d58:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004d5c:	e032      	b.n	8004dc4 <_printf_i+0xa0>
 8004d5e:	2964      	cmp	r1, #100	; 0x64
 8004d60:	d001      	beq.n	8004d66 <_printf_i+0x42>
 8004d62:	2969      	cmp	r1, #105	; 0x69
 8004d64:	d1f6      	bne.n	8004d54 <_printf_i+0x30>
 8004d66:	6820      	ldr	r0, [r4, #0]
 8004d68:	6813      	ldr	r3, [r2, #0]
 8004d6a:	0605      	lsls	r5, r0, #24
 8004d6c:	f103 0104 	add.w	r1, r3, #4
 8004d70:	d52a      	bpl.n	8004dc8 <_printf_i+0xa4>
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	6011      	str	r1, [r2, #0]
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	da03      	bge.n	8004d82 <_printf_i+0x5e>
 8004d7a:	222d      	movs	r2, #45	; 0x2d
 8004d7c:	425b      	negs	r3, r3
 8004d7e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004d82:	486f      	ldr	r0, [pc, #444]	; (8004f40 <_printf_i+0x21c>)
 8004d84:	220a      	movs	r2, #10
 8004d86:	e039      	b.n	8004dfc <_printf_i+0xd8>
 8004d88:	2973      	cmp	r1, #115	; 0x73
 8004d8a:	f000 809d 	beq.w	8004ec8 <_printf_i+0x1a4>
 8004d8e:	d808      	bhi.n	8004da2 <_printf_i+0x7e>
 8004d90:	296f      	cmp	r1, #111	; 0x6f
 8004d92:	d020      	beq.n	8004dd6 <_printf_i+0xb2>
 8004d94:	2970      	cmp	r1, #112	; 0x70
 8004d96:	d1dd      	bne.n	8004d54 <_printf_i+0x30>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	f043 0320 	orr.w	r3, r3, #32
 8004d9e:	6023      	str	r3, [r4, #0]
 8004da0:	e003      	b.n	8004daa <_printf_i+0x86>
 8004da2:	2975      	cmp	r1, #117	; 0x75
 8004da4:	d017      	beq.n	8004dd6 <_printf_i+0xb2>
 8004da6:	2978      	cmp	r1, #120	; 0x78
 8004da8:	d1d4      	bne.n	8004d54 <_printf_i+0x30>
 8004daa:	2378      	movs	r3, #120	; 0x78
 8004dac:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004db0:	4864      	ldr	r0, [pc, #400]	; (8004f44 <_printf_i+0x220>)
 8004db2:	e055      	b.n	8004e60 <_printf_i+0x13c>
 8004db4:	6813      	ldr	r3, [r2, #0]
 8004db6:	1d19      	adds	r1, r3, #4
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	6011      	str	r1, [r2, #0]
 8004dbc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004dc0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e08c      	b.n	8004ee2 <_printf_i+0x1be>
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	6011      	str	r1, [r2, #0]
 8004dcc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004dd0:	bf18      	it	ne
 8004dd2:	b21b      	sxthne	r3, r3
 8004dd4:	e7cf      	b.n	8004d76 <_printf_i+0x52>
 8004dd6:	6813      	ldr	r3, [r2, #0]
 8004dd8:	6825      	ldr	r5, [r4, #0]
 8004dda:	1d18      	adds	r0, r3, #4
 8004ddc:	6010      	str	r0, [r2, #0]
 8004dde:	0628      	lsls	r0, r5, #24
 8004de0:	d501      	bpl.n	8004de6 <_printf_i+0xc2>
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	e002      	b.n	8004dec <_printf_i+0xc8>
 8004de6:	0668      	lsls	r0, r5, #25
 8004de8:	d5fb      	bpl.n	8004de2 <_printf_i+0xbe>
 8004dea:	881b      	ldrh	r3, [r3, #0]
 8004dec:	4854      	ldr	r0, [pc, #336]	; (8004f40 <_printf_i+0x21c>)
 8004dee:	296f      	cmp	r1, #111	; 0x6f
 8004df0:	bf14      	ite	ne
 8004df2:	220a      	movne	r2, #10
 8004df4:	2208      	moveq	r2, #8
 8004df6:	2100      	movs	r1, #0
 8004df8:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004dfc:	6865      	ldr	r5, [r4, #4]
 8004dfe:	60a5      	str	r5, [r4, #8]
 8004e00:	2d00      	cmp	r5, #0
 8004e02:	f2c0 8095 	blt.w	8004f30 <_printf_i+0x20c>
 8004e06:	6821      	ldr	r1, [r4, #0]
 8004e08:	f021 0104 	bic.w	r1, r1, #4
 8004e0c:	6021      	str	r1, [r4, #0]
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d13d      	bne.n	8004e8e <_printf_i+0x16a>
 8004e12:	2d00      	cmp	r5, #0
 8004e14:	f040 808e 	bne.w	8004f34 <_printf_i+0x210>
 8004e18:	4665      	mov	r5, ip
 8004e1a:	2a08      	cmp	r2, #8
 8004e1c:	d10b      	bne.n	8004e36 <_printf_i+0x112>
 8004e1e:	6823      	ldr	r3, [r4, #0]
 8004e20:	07db      	lsls	r3, r3, #31
 8004e22:	d508      	bpl.n	8004e36 <_printf_i+0x112>
 8004e24:	6923      	ldr	r3, [r4, #16]
 8004e26:	6862      	ldr	r2, [r4, #4]
 8004e28:	429a      	cmp	r2, r3
 8004e2a:	bfde      	ittt	le
 8004e2c:	2330      	movle	r3, #48	; 0x30
 8004e2e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004e32:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004e36:	ebac 0305 	sub.w	r3, ip, r5
 8004e3a:	6123      	str	r3, [r4, #16]
 8004e3c:	f8cd 8000 	str.w	r8, [sp]
 8004e40:	463b      	mov	r3, r7
 8004e42:	aa03      	add	r2, sp, #12
 8004e44:	4621      	mov	r1, r4
 8004e46:	4630      	mov	r0, r6
 8004e48:	f7ff fef6 	bl	8004c38 <_printf_common>
 8004e4c:	3001      	adds	r0, #1
 8004e4e:	d14d      	bne.n	8004eec <_printf_i+0x1c8>
 8004e50:	f04f 30ff 	mov.w	r0, #4294967295
 8004e54:	b005      	add	sp, #20
 8004e56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004e5a:	4839      	ldr	r0, [pc, #228]	; (8004f40 <_printf_i+0x21c>)
 8004e5c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004e60:	6813      	ldr	r3, [r2, #0]
 8004e62:	6821      	ldr	r1, [r4, #0]
 8004e64:	1d1d      	adds	r5, r3, #4
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	6015      	str	r5, [r2, #0]
 8004e6a:	060a      	lsls	r2, r1, #24
 8004e6c:	d50b      	bpl.n	8004e86 <_printf_i+0x162>
 8004e6e:	07ca      	lsls	r2, r1, #31
 8004e70:	bf44      	itt	mi
 8004e72:	f041 0120 	orrmi.w	r1, r1, #32
 8004e76:	6021      	strmi	r1, [r4, #0]
 8004e78:	b91b      	cbnz	r3, 8004e82 <_printf_i+0x15e>
 8004e7a:	6822      	ldr	r2, [r4, #0]
 8004e7c:	f022 0220 	bic.w	r2, r2, #32
 8004e80:	6022      	str	r2, [r4, #0]
 8004e82:	2210      	movs	r2, #16
 8004e84:	e7b7      	b.n	8004df6 <_printf_i+0xd2>
 8004e86:	064d      	lsls	r5, r1, #25
 8004e88:	bf48      	it	mi
 8004e8a:	b29b      	uxthmi	r3, r3
 8004e8c:	e7ef      	b.n	8004e6e <_printf_i+0x14a>
 8004e8e:	4665      	mov	r5, ip
 8004e90:	fbb3 f1f2 	udiv	r1, r3, r2
 8004e94:	fb02 3311 	mls	r3, r2, r1, r3
 8004e98:	5cc3      	ldrb	r3, [r0, r3]
 8004e9a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	2900      	cmp	r1, #0
 8004ea2:	d1f5      	bne.n	8004e90 <_printf_i+0x16c>
 8004ea4:	e7b9      	b.n	8004e1a <_printf_i+0xf6>
 8004ea6:	6813      	ldr	r3, [r2, #0]
 8004ea8:	6825      	ldr	r5, [r4, #0]
 8004eaa:	6961      	ldr	r1, [r4, #20]
 8004eac:	1d18      	adds	r0, r3, #4
 8004eae:	6010      	str	r0, [r2, #0]
 8004eb0:	0628      	lsls	r0, r5, #24
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	d501      	bpl.n	8004eba <_printf_i+0x196>
 8004eb6:	6019      	str	r1, [r3, #0]
 8004eb8:	e002      	b.n	8004ec0 <_printf_i+0x19c>
 8004eba:	066a      	lsls	r2, r5, #25
 8004ebc:	d5fb      	bpl.n	8004eb6 <_printf_i+0x192>
 8004ebe:	8019      	strh	r1, [r3, #0]
 8004ec0:	2300      	movs	r3, #0
 8004ec2:	6123      	str	r3, [r4, #16]
 8004ec4:	4665      	mov	r5, ip
 8004ec6:	e7b9      	b.n	8004e3c <_printf_i+0x118>
 8004ec8:	6813      	ldr	r3, [r2, #0]
 8004eca:	1d19      	adds	r1, r3, #4
 8004ecc:	6011      	str	r1, [r2, #0]
 8004ece:	681d      	ldr	r5, [r3, #0]
 8004ed0:	6862      	ldr	r2, [r4, #4]
 8004ed2:	2100      	movs	r1, #0
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	f7fb f97b 	bl	80001d0 <memchr>
 8004eda:	b108      	cbz	r0, 8004ee0 <_printf_i+0x1bc>
 8004edc:	1b40      	subs	r0, r0, r5
 8004ede:	6060      	str	r0, [r4, #4]
 8004ee0:	6863      	ldr	r3, [r4, #4]
 8004ee2:	6123      	str	r3, [r4, #16]
 8004ee4:	2300      	movs	r3, #0
 8004ee6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004eea:	e7a7      	b.n	8004e3c <_printf_i+0x118>
 8004eec:	6923      	ldr	r3, [r4, #16]
 8004eee:	462a      	mov	r2, r5
 8004ef0:	4639      	mov	r1, r7
 8004ef2:	4630      	mov	r0, r6
 8004ef4:	47c0      	blx	r8
 8004ef6:	3001      	adds	r0, #1
 8004ef8:	d0aa      	beq.n	8004e50 <_printf_i+0x12c>
 8004efa:	6823      	ldr	r3, [r4, #0]
 8004efc:	079b      	lsls	r3, r3, #30
 8004efe:	d413      	bmi.n	8004f28 <_printf_i+0x204>
 8004f00:	68e0      	ldr	r0, [r4, #12]
 8004f02:	9b03      	ldr	r3, [sp, #12]
 8004f04:	4298      	cmp	r0, r3
 8004f06:	bfb8      	it	lt
 8004f08:	4618      	movlt	r0, r3
 8004f0a:	e7a3      	b.n	8004e54 <_printf_i+0x130>
 8004f0c:	2301      	movs	r3, #1
 8004f0e:	464a      	mov	r2, r9
 8004f10:	4639      	mov	r1, r7
 8004f12:	4630      	mov	r0, r6
 8004f14:	47c0      	blx	r8
 8004f16:	3001      	adds	r0, #1
 8004f18:	d09a      	beq.n	8004e50 <_printf_i+0x12c>
 8004f1a:	3501      	adds	r5, #1
 8004f1c:	68e3      	ldr	r3, [r4, #12]
 8004f1e:	9a03      	ldr	r2, [sp, #12]
 8004f20:	1a9b      	subs	r3, r3, r2
 8004f22:	42ab      	cmp	r3, r5
 8004f24:	dcf2      	bgt.n	8004f0c <_printf_i+0x1e8>
 8004f26:	e7eb      	b.n	8004f00 <_printf_i+0x1dc>
 8004f28:	2500      	movs	r5, #0
 8004f2a:	f104 0919 	add.w	r9, r4, #25
 8004f2e:	e7f5      	b.n	8004f1c <_printf_i+0x1f8>
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d1ac      	bne.n	8004e8e <_printf_i+0x16a>
 8004f34:	7803      	ldrb	r3, [r0, #0]
 8004f36:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f3a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004f3e:	e76c      	b.n	8004e1a <_printf_i+0xf6>
 8004f40:	08006975 	.word	0x08006975
 8004f44:	08006986 	.word	0x08006986

08004f48 <memcpy>:
 8004f48:	b510      	push	{r4, lr}
 8004f4a:	1e43      	subs	r3, r0, #1
 8004f4c:	440a      	add	r2, r1
 8004f4e:	4291      	cmp	r1, r2
 8004f50:	d100      	bne.n	8004f54 <memcpy+0xc>
 8004f52:	bd10      	pop	{r4, pc}
 8004f54:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f58:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004f5c:	e7f7      	b.n	8004f4e <memcpy+0x6>

08004f5e <memmove>:
 8004f5e:	4288      	cmp	r0, r1
 8004f60:	b510      	push	{r4, lr}
 8004f62:	eb01 0302 	add.w	r3, r1, r2
 8004f66:	d807      	bhi.n	8004f78 <memmove+0x1a>
 8004f68:	1e42      	subs	r2, r0, #1
 8004f6a:	4299      	cmp	r1, r3
 8004f6c:	d00a      	beq.n	8004f84 <memmove+0x26>
 8004f6e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004f72:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004f76:	e7f8      	b.n	8004f6a <memmove+0xc>
 8004f78:	4283      	cmp	r3, r0
 8004f7a:	d9f5      	bls.n	8004f68 <memmove+0xa>
 8004f7c:	1881      	adds	r1, r0, r2
 8004f7e:	1ad2      	subs	r2, r2, r3
 8004f80:	42d3      	cmn	r3, r2
 8004f82:	d100      	bne.n	8004f86 <memmove+0x28>
 8004f84:	bd10      	pop	{r4, pc}
 8004f86:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004f8a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004f8e:	e7f7      	b.n	8004f80 <memmove+0x22>

08004f90 <_free_r>:
 8004f90:	b538      	push	{r3, r4, r5, lr}
 8004f92:	4605      	mov	r5, r0
 8004f94:	2900      	cmp	r1, #0
 8004f96:	d045      	beq.n	8005024 <_free_r+0x94>
 8004f98:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f9c:	1f0c      	subs	r4, r1, #4
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	bfb8      	it	lt
 8004fa2:	18e4      	addlt	r4, r4, r3
 8004fa4:	f000 f8d2 	bl	800514c <__malloc_lock>
 8004fa8:	4a1f      	ldr	r2, [pc, #124]	; (8005028 <_free_r+0x98>)
 8004faa:	6813      	ldr	r3, [r2, #0]
 8004fac:	4610      	mov	r0, r2
 8004fae:	b933      	cbnz	r3, 8004fbe <_free_r+0x2e>
 8004fb0:	6063      	str	r3, [r4, #4]
 8004fb2:	6014      	str	r4, [r2, #0]
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004fba:	f000 b8c8 	b.w	800514e <__malloc_unlock>
 8004fbe:	42a3      	cmp	r3, r4
 8004fc0:	d90c      	bls.n	8004fdc <_free_r+0x4c>
 8004fc2:	6821      	ldr	r1, [r4, #0]
 8004fc4:	1862      	adds	r2, r4, r1
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	bf04      	itt	eq
 8004fca:	681a      	ldreq	r2, [r3, #0]
 8004fcc:	685b      	ldreq	r3, [r3, #4]
 8004fce:	6063      	str	r3, [r4, #4]
 8004fd0:	bf04      	itt	eq
 8004fd2:	1852      	addeq	r2, r2, r1
 8004fd4:	6022      	streq	r2, [r4, #0]
 8004fd6:	6004      	str	r4, [r0, #0]
 8004fd8:	e7ec      	b.n	8004fb4 <_free_r+0x24>
 8004fda:	4613      	mov	r3, r2
 8004fdc:	685a      	ldr	r2, [r3, #4]
 8004fde:	b10a      	cbz	r2, 8004fe4 <_free_r+0x54>
 8004fe0:	42a2      	cmp	r2, r4
 8004fe2:	d9fa      	bls.n	8004fda <_free_r+0x4a>
 8004fe4:	6819      	ldr	r1, [r3, #0]
 8004fe6:	1858      	adds	r0, r3, r1
 8004fe8:	42a0      	cmp	r0, r4
 8004fea:	d10b      	bne.n	8005004 <_free_r+0x74>
 8004fec:	6820      	ldr	r0, [r4, #0]
 8004fee:	4401      	add	r1, r0
 8004ff0:	1858      	adds	r0, r3, r1
 8004ff2:	4282      	cmp	r2, r0
 8004ff4:	6019      	str	r1, [r3, #0]
 8004ff6:	d1dd      	bne.n	8004fb4 <_free_r+0x24>
 8004ff8:	6810      	ldr	r0, [r2, #0]
 8004ffa:	6852      	ldr	r2, [r2, #4]
 8004ffc:	605a      	str	r2, [r3, #4]
 8004ffe:	4401      	add	r1, r0
 8005000:	6019      	str	r1, [r3, #0]
 8005002:	e7d7      	b.n	8004fb4 <_free_r+0x24>
 8005004:	d902      	bls.n	800500c <_free_r+0x7c>
 8005006:	230c      	movs	r3, #12
 8005008:	602b      	str	r3, [r5, #0]
 800500a:	e7d3      	b.n	8004fb4 <_free_r+0x24>
 800500c:	6820      	ldr	r0, [r4, #0]
 800500e:	1821      	adds	r1, r4, r0
 8005010:	428a      	cmp	r2, r1
 8005012:	bf04      	itt	eq
 8005014:	6811      	ldreq	r1, [r2, #0]
 8005016:	6852      	ldreq	r2, [r2, #4]
 8005018:	6062      	str	r2, [r4, #4]
 800501a:	bf04      	itt	eq
 800501c:	1809      	addeq	r1, r1, r0
 800501e:	6021      	streq	r1, [r4, #0]
 8005020:	605c      	str	r4, [r3, #4]
 8005022:	e7c7      	b.n	8004fb4 <_free_r+0x24>
 8005024:	bd38      	pop	{r3, r4, r5, pc}
 8005026:	bf00      	nop
 8005028:	20000094 	.word	0x20000094

0800502c <_malloc_r>:
 800502c:	b570      	push	{r4, r5, r6, lr}
 800502e:	1ccd      	adds	r5, r1, #3
 8005030:	f025 0503 	bic.w	r5, r5, #3
 8005034:	3508      	adds	r5, #8
 8005036:	2d0c      	cmp	r5, #12
 8005038:	bf38      	it	cc
 800503a:	250c      	movcc	r5, #12
 800503c:	2d00      	cmp	r5, #0
 800503e:	4606      	mov	r6, r0
 8005040:	db01      	blt.n	8005046 <_malloc_r+0x1a>
 8005042:	42a9      	cmp	r1, r5
 8005044:	d903      	bls.n	800504e <_malloc_r+0x22>
 8005046:	230c      	movs	r3, #12
 8005048:	6033      	str	r3, [r6, #0]
 800504a:	2000      	movs	r0, #0
 800504c:	bd70      	pop	{r4, r5, r6, pc}
 800504e:	f000 f87d 	bl	800514c <__malloc_lock>
 8005052:	4a21      	ldr	r2, [pc, #132]	; (80050d8 <_malloc_r+0xac>)
 8005054:	6814      	ldr	r4, [r2, #0]
 8005056:	4621      	mov	r1, r4
 8005058:	b991      	cbnz	r1, 8005080 <_malloc_r+0x54>
 800505a:	4c20      	ldr	r4, [pc, #128]	; (80050dc <_malloc_r+0xb0>)
 800505c:	6823      	ldr	r3, [r4, #0]
 800505e:	b91b      	cbnz	r3, 8005068 <_malloc_r+0x3c>
 8005060:	4630      	mov	r0, r6
 8005062:	f000 f863 	bl	800512c <_sbrk_r>
 8005066:	6020      	str	r0, [r4, #0]
 8005068:	4629      	mov	r1, r5
 800506a:	4630      	mov	r0, r6
 800506c:	f000 f85e 	bl	800512c <_sbrk_r>
 8005070:	1c43      	adds	r3, r0, #1
 8005072:	d124      	bne.n	80050be <_malloc_r+0x92>
 8005074:	230c      	movs	r3, #12
 8005076:	6033      	str	r3, [r6, #0]
 8005078:	4630      	mov	r0, r6
 800507a:	f000 f868 	bl	800514e <__malloc_unlock>
 800507e:	e7e4      	b.n	800504a <_malloc_r+0x1e>
 8005080:	680b      	ldr	r3, [r1, #0]
 8005082:	1b5b      	subs	r3, r3, r5
 8005084:	d418      	bmi.n	80050b8 <_malloc_r+0x8c>
 8005086:	2b0b      	cmp	r3, #11
 8005088:	d90f      	bls.n	80050aa <_malloc_r+0x7e>
 800508a:	600b      	str	r3, [r1, #0]
 800508c:	50cd      	str	r5, [r1, r3]
 800508e:	18cc      	adds	r4, r1, r3
 8005090:	4630      	mov	r0, r6
 8005092:	f000 f85c 	bl	800514e <__malloc_unlock>
 8005096:	f104 000b 	add.w	r0, r4, #11
 800509a:	1d23      	adds	r3, r4, #4
 800509c:	f020 0007 	bic.w	r0, r0, #7
 80050a0:	1ac3      	subs	r3, r0, r3
 80050a2:	d0d3      	beq.n	800504c <_malloc_r+0x20>
 80050a4:	425a      	negs	r2, r3
 80050a6:	50e2      	str	r2, [r4, r3]
 80050a8:	e7d0      	b.n	800504c <_malloc_r+0x20>
 80050aa:	428c      	cmp	r4, r1
 80050ac:	684b      	ldr	r3, [r1, #4]
 80050ae:	bf16      	itet	ne
 80050b0:	6063      	strne	r3, [r4, #4]
 80050b2:	6013      	streq	r3, [r2, #0]
 80050b4:	460c      	movne	r4, r1
 80050b6:	e7eb      	b.n	8005090 <_malloc_r+0x64>
 80050b8:	460c      	mov	r4, r1
 80050ba:	6849      	ldr	r1, [r1, #4]
 80050bc:	e7cc      	b.n	8005058 <_malloc_r+0x2c>
 80050be:	1cc4      	adds	r4, r0, #3
 80050c0:	f024 0403 	bic.w	r4, r4, #3
 80050c4:	42a0      	cmp	r0, r4
 80050c6:	d005      	beq.n	80050d4 <_malloc_r+0xa8>
 80050c8:	1a21      	subs	r1, r4, r0
 80050ca:	4630      	mov	r0, r6
 80050cc:	f000 f82e 	bl	800512c <_sbrk_r>
 80050d0:	3001      	adds	r0, #1
 80050d2:	d0cf      	beq.n	8005074 <_malloc_r+0x48>
 80050d4:	6025      	str	r5, [r4, #0]
 80050d6:	e7db      	b.n	8005090 <_malloc_r+0x64>
 80050d8:	20000094 	.word	0x20000094
 80050dc:	20000098 	.word	0x20000098

080050e0 <_realloc_r>:
 80050e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80050e2:	4607      	mov	r7, r0
 80050e4:	4614      	mov	r4, r2
 80050e6:	460e      	mov	r6, r1
 80050e8:	b921      	cbnz	r1, 80050f4 <_realloc_r+0x14>
 80050ea:	4611      	mov	r1, r2
 80050ec:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80050f0:	f7ff bf9c 	b.w	800502c <_malloc_r>
 80050f4:	b922      	cbnz	r2, 8005100 <_realloc_r+0x20>
 80050f6:	f7ff ff4b 	bl	8004f90 <_free_r>
 80050fa:	4625      	mov	r5, r4
 80050fc:	4628      	mov	r0, r5
 80050fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005100:	f000 f826 	bl	8005150 <_malloc_usable_size_r>
 8005104:	42a0      	cmp	r0, r4
 8005106:	d20f      	bcs.n	8005128 <_realloc_r+0x48>
 8005108:	4621      	mov	r1, r4
 800510a:	4638      	mov	r0, r7
 800510c:	f7ff ff8e 	bl	800502c <_malloc_r>
 8005110:	4605      	mov	r5, r0
 8005112:	2800      	cmp	r0, #0
 8005114:	d0f2      	beq.n	80050fc <_realloc_r+0x1c>
 8005116:	4631      	mov	r1, r6
 8005118:	4622      	mov	r2, r4
 800511a:	f7ff ff15 	bl	8004f48 <memcpy>
 800511e:	4631      	mov	r1, r6
 8005120:	4638      	mov	r0, r7
 8005122:	f7ff ff35 	bl	8004f90 <_free_r>
 8005126:	e7e9      	b.n	80050fc <_realloc_r+0x1c>
 8005128:	4635      	mov	r5, r6
 800512a:	e7e7      	b.n	80050fc <_realloc_r+0x1c>

0800512c <_sbrk_r>:
 800512c:	b538      	push	{r3, r4, r5, lr}
 800512e:	4c06      	ldr	r4, [pc, #24]	; (8005148 <_sbrk_r+0x1c>)
 8005130:	2300      	movs	r3, #0
 8005132:	4605      	mov	r5, r0
 8005134:	4608      	mov	r0, r1
 8005136:	6023      	str	r3, [r4, #0]
 8005138:	f7ff fb3a 	bl	80047b0 <_sbrk>
 800513c:	1c43      	adds	r3, r0, #1
 800513e:	d102      	bne.n	8005146 <_sbrk_r+0x1a>
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	b103      	cbz	r3, 8005146 <_sbrk_r+0x1a>
 8005144:	602b      	str	r3, [r5, #0]
 8005146:	bd38      	pop	{r3, r4, r5, pc}
 8005148:	20000164 	.word	0x20000164

0800514c <__malloc_lock>:
 800514c:	4770      	bx	lr

0800514e <__malloc_unlock>:
 800514e:	4770      	bx	lr

08005150 <_malloc_usable_size_r>:
 8005150:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005154:	1f18      	subs	r0, r3, #4
 8005156:	2b00      	cmp	r3, #0
 8005158:	bfbc      	itt	lt
 800515a:	580b      	ldrlt	r3, [r1, r0]
 800515c:	18c0      	addlt	r0, r0, r3
 800515e:	4770      	bx	lr

08005160 <floor>:
 8005160:	ec51 0b10 	vmov	r0, r1, d0
 8005164:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005168:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800516c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005170:	2e13      	cmp	r6, #19
 8005172:	460c      	mov	r4, r1
 8005174:	ee10 5a10 	vmov	r5, s0
 8005178:	4680      	mov	r8, r0
 800517a:	dc34      	bgt.n	80051e6 <floor+0x86>
 800517c:	2e00      	cmp	r6, #0
 800517e:	da16      	bge.n	80051ae <floor+0x4e>
 8005180:	a335      	add	r3, pc, #212	; (adr r3, 8005258 <floor+0xf8>)
 8005182:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005186:	f7fb f879 	bl	800027c <__adddf3>
 800518a:	2200      	movs	r2, #0
 800518c:	2300      	movs	r3, #0
 800518e:	f7fb fcbb 	bl	8000b08 <__aeabi_dcmpgt>
 8005192:	b148      	cbz	r0, 80051a8 <floor+0x48>
 8005194:	2c00      	cmp	r4, #0
 8005196:	da59      	bge.n	800524c <floor+0xec>
 8005198:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800519c:	4a30      	ldr	r2, [pc, #192]	; (8005260 <floor+0x100>)
 800519e:	432b      	orrs	r3, r5
 80051a0:	2500      	movs	r5, #0
 80051a2:	42ab      	cmp	r3, r5
 80051a4:	bf18      	it	ne
 80051a6:	4614      	movne	r4, r2
 80051a8:	4621      	mov	r1, r4
 80051aa:	4628      	mov	r0, r5
 80051ac:	e025      	b.n	80051fa <floor+0x9a>
 80051ae:	4f2d      	ldr	r7, [pc, #180]	; (8005264 <floor+0x104>)
 80051b0:	4137      	asrs	r7, r6
 80051b2:	ea01 0307 	and.w	r3, r1, r7
 80051b6:	4303      	orrs	r3, r0
 80051b8:	d01f      	beq.n	80051fa <floor+0x9a>
 80051ba:	a327      	add	r3, pc, #156	; (adr r3, 8005258 <floor+0xf8>)
 80051bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051c0:	f7fb f85c 	bl	800027c <__adddf3>
 80051c4:	2200      	movs	r2, #0
 80051c6:	2300      	movs	r3, #0
 80051c8:	f7fb fc9e 	bl	8000b08 <__aeabi_dcmpgt>
 80051cc:	2800      	cmp	r0, #0
 80051ce:	d0eb      	beq.n	80051a8 <floor+0x48>
 80051d0:	2c00      	cmp	r4, #0
 80051d2:	bfbe      	ittt	lt
 80051d4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80051d8:	fa43 f606 	asrlt.w	r6, r3, r6
 80051dc:	19a4      	addlt	r4, r4, r6
 80051de:	ea24 0407 	bic.w	r4, r4, r7
 80051e2:	2500      	movs	r5, #0
 80051e4:	e7e0      	b.n	80051a8 <floor+0x48>
 80051e6:	2e33      	cmp	r6, #51	; 0x33
 80051e8:	dd0b      	ble.n	8005202 <floor+0xa2>
 80051ea:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80051ee:	d104      	bne.n	80051fa <floor+0x9a>
 80051f0:	ee10 2a10 	vmov	r2, s0
 80051f4:	460b      	mov	r3, r1
 80051f6:	f7fb f841 	bl	800027c <__adddf3>
 80051fa:	ec41 0b10 	vmov	d0, r0, r1
 80051fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005202:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005206:	f04f 33ff 	mov.w	r3, #4294967295
 800520a:	fa23 f707 	lsr.w	r7, r3, r7
 800520e:	4207      	tst	r7, r0
 8005210:	d0f3      	beq.n	80051fa <floor+0x9a>
 8005212:	a311      	add	r3, pc, #68	; (adr r3, 8005258 <floor+0xf8>)
 8005214:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005218:	f7fb f830 	bl	800027c <__adddf3>
 800521c:	2200      	movs	r2, #0
 800521e:	2300      	movs	r3, #0
 8005220:	f7fb fc72 	bl	8000b08 <__aeabi_dcmpgt>
 8005224:	2800      	cmp	r0, #0
 8005226:	d0bf      	beq.n	80051a8 <floor+0x48>
 8005228:	2c00      	cmp	r4, #0
 800522a:	da02      	bge.n	8005232 <floor+0xd2>
 800522c:	2e14      	cmp	r6, #20
 800522e:	d103      	bne.n	8005238 <floor+0xd8>
 8005230:	3401      	adds	r4, #1
 8005232:	ea25 0507 	bic.w	r5, r5, r7
 8005236:	e7b7      	b.n	80051a8 <floor+0x48>
 8005238:	2301      	movs	r3, #1
 800523a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800523e:	fa03 f606 	lsl.w	r6, r3, r6
 8005242:	4435      	add	r5, r6
 8005244:	4545      	cmp	r5, r8
 8005246:	bf38      	it	cc
 8005248:	18e4      	addcc	r4, r4, r3
 800524a:	e7f2      	b.n	8005232 <floor+0xd2>
 800524c:	2500      	movs	r5, #0
 800524e:	462c      	mov	r4, r5
 8005250:	e7aa      	b.n	80051a8 <floor+0x48>
 8005252:	bf00      	nop
 8005254:	f3af 8000 	nop.w
 8005258:	8800759c 	.word	0x8800759c
 800525c:	7e37e43c 	.word	0x7e37e43c
 8005260:	bff00000 	.word	0xbff00000
 8005264:	000fffff 	.word	0x000fffff

08005268 <trunc>:
 8005268:	e92d 48d8 	stmdb	sp!, {r3, r4, r6, r7, fp, lr}
 800526c:	ec5c bb10 	vmov	fp, ip, d0
 8005270:	f3cc 500a 	ubfx	r0, ip, #20, #11
 8005274:	f2a0 31ff 	subw	r1, r0, #1023	; 0x3ff
 8005278:	2913      	cmp	r1, #19
 800527a:	4664      	mov	r4, ip
 800527c:	dc11      	bgt.n	80052a2 <trunc+0x3a>
 800527e:	2900      	cmp	r1, #0
 8005280:	bfa7      	ittee	ge
 8005282:	4b15      	ldrge	r3, [pc, #84]	; (80052d8 <trunc+0x70>)
 8005284:	fa43 f101 	asrge.w	r1, r3, r1
 8005288:	2200      	movlt	r2, #0
 800528a:	f00c 4300 	andlt.w	r3, ip, #2147483648	; 0x80000000
 800528e:	bfa4      	itt	ge
 8005290:	2200      	movge	r2, #0
 8005292:	ea2c 0301 	bicge.w	r3, ip, r1
 8005296:	4693      	mov	fp, r2
 8005298:	469c      	mov	ip, r3
 800529a:	ec4c bb10 	vmov	d0, fp, ip
 800529e:	e8bd 88d8 	ldmia.w	sp!, {r3, r4, r6, r7, fp, pc}
 80052a2:	2933      	cmp	r1, #51	; 0x33
 80052a4:	dd0d      	ble.n	80052c2 <trunc+0x5a>
 80052a6:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80052aa:	d1f6      	bne.n	800529a <trunc+0x32>
 80052ac:	4663      	mov	r3, ip
 80052ae:	ee10 2a10 	vmov	r2, s0
 80052b2:	ee10 0a10 	vmov	r0, s0
 80052b6:	4621      	mov	r1, r4
 80052b8:	f7fa ffe0 	bl	800027c <__adddf3>
 80052bc:	4683      	mov	fp, r0
 80052be:	468c      	mov	ip, r1
 80052c0:	e7eb      	b.n	800529a <trunc+0x32>
 80052c2:	f2a0 4013 	subw	r0, r0, #1043	; 0x413
 80052c6:	f04f 33ff 	mov.w	r3, #4294967295
 80052ca:	fa23 f000 	lsr.w	r0, r3, r0
 80052ce:	ea2b 0600 	bic.w	r6, fp, r0
 80052d2:	46b3      	mov	fp, r6
 80052d4:	46a4      	mov	ip, r4
 80052d6:	e7e0      	b.n	800529a <trunc+0x32>
 80052d8:	000fffff 	.word	0x000fffff

080052dc <log10>:
 80052dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80052de:	ed2d 8b02 	vpush	{d8}
 80052e2:	b08b      	sub	sp, #44	; 0x2c
 80052e4:	ec55 4b10 	vmov	r4, r5, d0
 80052e8:	f000 f9ea 	bl	80056c0 <__ieee754_log10>
 80052ec:	4b36      	ldr	r3, [pc, #216]	; (80053c8 <log10+0xec>)
 80052ee:	eeb0 8a40 	vmov.f32	s16, s0
 80052f2:	eef0 8a60 	vmov.f32	s17, s1
 80052f6:	f993 6000 	ldrsb.w	r6, [r3]
 80052fa:	1c73      	adds	r3, r6, #1
 80052fc:	d05c      	beq.n	80053b8 <log10+0xdc>
 80052fe:	4622      	mov	r2, r4
 8005300:	462b      	mov	r3, r5
 8005302:	4620      	mov	r0, r4
 8005304:	4629      	mov	r1, r5
 8005306:	f7fb fc09 	bl	8000b1c <__aeabi_dcmpun>
 800530a:	4607      	mov	r7, r0
 800530c:	2800      	cmp	r0, #0
 800530e:	d153      	bne.n	80053b8 <log10+0xdc>
 8005310:	2200      	movs	r2, #0
 8005312:	2300      	movs	r3, #0
 8005314:	4620      	mov	r0, r4
 8005316:	4629      	mov	r1, r5
 8005318:	f7fb fbe2 	bl	8000ae0 <__aeabi_dcmple>
 800531c:	2800      	cmp	r0, #0
 800531e:	d04b      	beq.n	80053b8 <log10+0xdc>
 8005320:	4b2a      	ldr	r3, [pc, #168]	; (80053cc <log10+0xf0>)
 8005322:	9301      	str	r3, [sp, #4]
 8005324:	9708      	str	r7, [sp, #32]
 8005326:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800532a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800532e:	b9a6      	cbnz	r6, 800535a <log10+0x7e>
 8005330:	4b27      	ldr	r3, [pc, #156]	; (80053d0 <log10+0xf4>)
 8005332:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005336:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800533a:	4620      	mov	r0, r4
 800533c:	2200      	movs	r2, #0
 800533e:	2300      	movs	r3, #0
 8005340:	4629      	mov	r1, r5
 8005342:	f7fb fbb9 	bl	8000ab8 <__aeabi_dcmpeq>
 8005346:	bb40      	cbnz	r0, 800539a <log10+0xbe>
 8005348:	2301      	movs	r3, #1
 800534a:	2e02      	cmp	r6, #2
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	d119      	bne.n	8005384 <log10+0xa8>
 8005350:	f7ff face 	bl	80048f0 <__errno>
 8005354:	2321      	movs	r3, #33	; 0x21
 8005356:	6003      	str	r3, [r0, #0]
 8005358:	e019      	b.n	800538e <log10+0xb2>
 800535a:	4b1e      	ldr	r3, [pc, #120]	; (80053d4 <log10+0xf8>)
 800535c:	2200      	movs	r2, #0
 800535e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005362:	4620      	mov	r0, r4
 8005364:	2200      	movs	r2, #0
 8005366:	2300      	movs	r3, #0
 8005368:	4629      	mov	r1, r5
 800536a:	f7fb fba5 	bl	8000ab8 <__aeabi_dcmpeq>
 800536e:	2800      	cmp	r0, #0
 8005370:	d0ea      	beq.n	8005348 <log10+0x6c>
 8005372:	2302      	movs	r3, #2
 8005374:	429e      	cmp	r6, r3
 8005376:	9300      	str	r3, [sp, #0]
 8005378:	d111      	bne.n	800539e <log10+0xc2>
 800537a:	f7ff fab9 	bl	80048f0 <__errno>
 800537e:	2322      	movs	r3, #34	; 0x22
 8005380:	6003      	str	r3, [r0, #0]
 8005382:	e011      	b.n	80053a8 <log10+0xcc>
 8005384:	4668      	mov	r0, sp
 8005386:	f000 fff6 	bl	8006376 <matherr>
 800538a:	2800      	cmp	r0, #0
 800538c:	d0e0      	beq.n	8005350 <log10+0x74>
 800538e:	4812      	ldr	r0, [pc, #72]	; (80053d8 <log10+0xfc>)
 8005390:	f000 fff6 	bl	8006380 <nan>
 8005394:	ed8d 0b06 	vstr	d0, [sp, #24]
 8005398:	e006      	b.n	80053a8 <log10+0xcc>
 800539a:	2302      	movs	r3, #2
 800539c:	9300      	str	r3, [sp, #0]
 800539e:	4668      	mov	r0, sp
 80053a0:	f000 ffe9 	bl	8006376 <matherr>
 80053a4:	2800      	cmp	r0, #0
 80053a6:	d0e8      	beq.n	800537a <log10+0x9e>
 80053a8:	9b08      	ldr	r3, [sp, #32]
 80053aa:	b11b      	cbz	r3, 80053b4 <log10+0xd8>
 80053ac:	f7ff faa0 	bl	80048f0 <__errno>
 80053b0:	9b08      	ldr	r3, [sp, #32]
 80053b2:	6003      	str	r3, [r0, #0]
 80053b4:	ed9d 8b06 	vldr	d8, [sp, #24]
 80053b8:	eeb0 0a48 	vmov.f32	s0, s16
 80053bc:	eef0 0a68 	vmov.f32	s1, s17
 80053c0:	b00b      	add	sp, #44	; 0x2c
 80053c2:	ecbd 8b02 	vpop	{d8}
 80053c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053c8:	20000070 	.word	0x20000070
 80053cc:	08006997 	.word	0x08006997
 80053d0:	c7efffff 	.word	0xc7efffff
 80053d4:	fff00000 	.word	0xfff00000
 80053d8:	08006969 	.word	0x08006969

080053dc <pow>:
 80053dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e0:	ed2d 8b04 	vpush	{d8-d9}
 80053e4:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 80056b8 <pow+0x2dc>
 80053e8:	b08d      	sub	sp, #52	; 0x34
 80053ea:	ec57 6b10 	vmov	r6, r7, d0
 80053ee:	ec55 4b11 	vmov	r4, r5, d1
 80053f2:	f000 f9f1 	bl	80057d8 <__ieee754_pow>
 80053f6:	f999 3000 	ldrsb.w	r3, [r9]
 80053fa:	9300      	str	r3, [sp, #0]
 80053fc:	3301      	adds	r3, #1
 80053fe:	eeb0 8a40 	vmov.f32	s16, s0
 8005402:	eef0 8a60 	vmov.f32	s17, s1
 8005406:	46c8      	mov	r8, r9
 8005408:	d05f      	beq.n	80054ca <pow+0xee>
 800540a:	4622      	mov	r2, r4
 800540c:	462b      	mov	r3, r5
 800540e:	4620      	mov	r0, r4
 8005410:	4629      	mov	r1, r5
 8005412:	f7fb fb83 	bl	8000b1c <__aeabi_dcmpun>
 8005416:	4683      	mov	fp, r0
 8005418:	2800      	cmp	r0, #0
 800541a:	d156      	bne.n	80054ca <pow+0xee>
 800541c:	4632      	mov	r2, r6
 800541e:	463b      	mov	r3, r7
 8005420:	4630      	mov	r0, r6
 8005422:	4639      	mov	r1, r7
 8005424:	f7fb fb7a 	bl	8000b1c <__aeabi_dcmpun>
 8005428:	9001      	str	r0, [sp, #4]
 800542a:	b1e8      	cbz	r0, 8005468 <pow+0x8c>
 800542c:	2200      	movs	r2, #0
 800542e:	2300      	movs	r3, #0
 8005430:	4620      	mov	r0, r4
 8005432:	4629      	mov	r1, r5
 8005434:	f7fb fb40 	bl	8000ab8 <__aeabi_dcmpeq>
 8005438:	2800      	cmp	r0, #0
 800543a:	d046      	beq.n	80054ca <pow+0xee>
 800543c:	2301      	movs	r3, #1
 800543e:	9302      	str	r3, [sp, #8]
 8005440:	4b96      	ldr	r3, [pc, #600]	; (800569c <pow+0x2c0>)
 8005442:	9303      	str	r3, [sp, #12]
 8005444:	4b96      	ldr	r3, [pc, #600]	; (80056a0 <pow+0x2c4>)
 8005446:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 800544a:	2200      	movs	r2, #0
 800544c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005450:	9b00      	ldr	r3, [sp, #0]
 8005452:	2b02      	cmp	r3, #2
 8005454:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005458:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800545c:	d033      	beq.n	80054c6 <pow+0xea>
 800545e:	a802      	add	r0, sp, #8
 8005460:	f000 ff89 	bl	8006376 <matherr>
 8005464:	bb48      	cbnz	r0, 80054ba <pow+0xde>
 8005466:	e05d      	b.n	8005524 <pow+0x148>
 8005468:	f04f 0a00 	mov.w	sl, #0
 800546c:	f04f 0b00 	mov.w	fp, #0
 8005470:	4652      	mov	r2, sl
 8005472:	465b      	mov	r3, fp
 8005474:	4630      	mov	r0, r6
 8005476:	4639      	mov	r1, r7
 8005478:	f7fb fb1e 	bl	8000ab8 <__aeabi_dcmpeq>
 800547c:	ec4b ab19 	vmov	d9, sl, fp
 8005480:	2800      	cmp	r0, #0
 8005482:	d054      	beq.n	800552e <pow+0x152>
 8005484:	4652      	mov	r2, sl
 8005486:	465b      	mov	r3, fp
 8005488:	4620      	mov	r0, r4
 800548a:	4629      	mov	r1, r5
 800548c:	f7fb fb14 	bl	8000ab8 <__aeabi_dcmpeq>
 8005490:	4680      	mov	r8, r0
 8005492:	b318      	cbz	r0, 80054dc <pow+0x100>
 8005494:	2301      	movs	r3, #1
 8005496:	9302      	str	r3, [sp, #8]
 8005498:	4b80      	ldr	r3, [pc, #512]	; (800569c <pow+0x2c0>)
 800549a:	9303      	str	r3, [sp, #12]
 800549c:	9b01      	ldr	r3, [sp, #4]
 800549e:	930a      	str	r3, [sp, #40]	; 0x28
 80054a0:	9b00      	ldr	r3, [sp, #0]
 80054a2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80054a6:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80054aa:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d0d5      	beq.n	800545e <pow+0x82>
 80054b2:	4b7b      	ldr	r3, [pc, #492]	; (80056a0 <pow+0x2c4>)
 80054b4:	2200      	movs	r2, #0
 80054b6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80054ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054bc:	b11b      	cbz	r3, 80054c6 <pow+0xea>
 80054be:	f7ff fa17 	bl	80048f0 <__errno>
 80054c2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80054c4:	6003      	str	r3, [r0, #0]
 80054c6:	ed9d 8b08 	vldr	d8, [sp, #32]
 80054ca:	eeb0 0a48 	vmov.f32	s0, s16
 80054ce:	eef0 0a68 	vmov.f32	s1, s17
 80054d2:	b00d      	add	sp, #52	; 0x34
 80054d4:	ecbd 8b04 	vpop	{d8-d9}
 80054d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054dc:	ec45 4b10 	vmov	d0, r4, r5
 80054e0:	f000 ff41 	bl	8006366 <finite>
 80054e4:	2800      	cmp	r0, #0
 80054e6:	d0f0      	beq.n	80054ca <pow+0xee>
 80054e8:	4652      	mov	r2, sl
 80054ea:	465b      	mov	r3, fp
 80054ec:	4620      	mov	r0, r4
 80054ee:	4629      	mov	r1, r5
 80054f0:	f7fb faec 	bl	8000acc <__aeabi_dcmplt>
 80054f4:	2800      	cmp	r0, #0
 80054f6:	d0e8      	beq.n	80054ca <pow+0xee>
 80054f8:	2301      	movs	r3, #1
 80054fa:	9302      	str	r3, [sp, #8]
 80054fc:	4b67      	ldr	r3, [pc, #412]	; (800569c <pow+0x2c0>)
 80054fe:	9303      	str	r3, [sp, #12]
 8005500:	f999 3000 	ldrsb.w	r3, [r9]
 8005504:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8005508:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800550c:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005510:	b913      	cbnz	r3, 8005518 <pow+0x13c>
 8005512:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8005516:	e7a2      	b.n	800545e <pow+0x82>
 8005518:	4962      	ldr	r1, [pc, #392]	; (80056a4 <pow+0x2c8>)
 800551a:	2000      	movs	r0, #0
 800551c:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8005520:	2b02      	cmp	r3, #2
 8005522:	d19c      	bne.n	800545e <pow+0x82>
 8005524:	f7ff f9e4 	bl	80048f0 <__errno>
 8005528:	2321      	movs	r3, #33	; 0x21
 800552a:	6003      	str	r3, [r0, #0]
 800552c:	e7c5      	b.n	80054ba <pow+0xde>
 800552e:	eeb0 0a48 	vmov.f32	s0, s16
 8005532:	eef0 0a68 	vmov.f32	s1, s17
 8005536:	f000 ff16 	bl	8006366 <finite>
 800553a:	9000      	str	r0, [sp, #0]
 800553c:	2800      	cmp	r0, #0
 800553e:	f040 8081 	bne.w	8005644 <pow+0x268>
 8005542:	ec47 6b10 	vmov	d0, r6, r7
 8005546:	f000 ff0e 	bl	8006366 <finite>
 800554a:	2800      	cmp	r0, #0
 800554c:	d07a      	beq.n	8005644 <pow+0x268>
 800554e:	ec45 4b10 	vmov	d0, r4, r5
 8005552:	f000 ff08 	bl	8006366 <finite>
 8005556:	2800      	cmp	r0, #0
 8005558:	d074      	beq.n	8005644 <pow+0x268>
 800555a:	ec53 2b18 	vmov	r2, r3, d8
 800555e:	ee18 0a10 	vmov	r0, s16
 8005562:	4619      	mov	r1, r3
 8005564:	f7fb fada 	bl	8000b1c <__aeabi_dcmpun>
 8005568:	f999 9000 	ldrsb.w	r9, [r9]
 800556c:	4b4b      	ldr	r3, [pc, #300]	; (800569c <pow+0x2c0>)
 800556e:	b1b0      	cbz	r0, 800559e <pow+0x1c2>
 8005570:	2201      	movs	r2, #1
 8005572:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005576:	9b00      	ldr	r3, [sp, #0]
 8005578:	930a      	str	r3, [sp, #40]	; 0x28
 800557a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800557e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005582:	f1b9 0f00 	cmp.w	r9, #0
 8005586:	d0c4      	beq.n	8005512 <pow+0x136>
 8005588:	4652      	mov	r2, sl
 800558a:	465b      	mov	r3, fp
 800558c:	4650      	mov	r0, sl
 800558e:	4659      	mov	r1, fp
 8005590:	f7fb f954 	bl	800083c <__aeabi_ddiv>
 8005594:	f1b9 0f02 	cmp.w	r9, #2
 8005598:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800559c:	e7c1      	b.n	8005522 <pow+0x146>
 800559e:	2203      	movs	r2, #3
 80055a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055a4:	900a      	str	r0, [sp, #40]	; 0x28
 80055a6:	4629      	mov	r1, r5
 80055a8:	4620      	mov	r0, r4
 80055aa:	2200      	movs	r2, #0
 80055ac:	4b3e      	ldr	r3, [pc, #248]	; (80056a8 <pow+0x2cc>)
 80055ae:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80055b2:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80055b6:	f7fb f817 	bl	80005e8 <__aeabi_dmul>
 80055ba:	4604      	mov	r4, r0
 80055bc:	460d      	mov	r5, r1
 80055be:	f1b9 0f00 	cmp.w	r9, #0
 80055c2:	d124      	bne.n	800560e <pow+0x232>
 80055c4:	4b39      	ldr	r3, [pc, #228]	; (80056ac <pow+0x2d0>)
 80055c6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80055ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80055ce:	4630      	mov	r0, r6
 80055d0:	4652      	mov	r2, sl
 80055d2:	465b      	mov	r3, fp
 80055d4:	4639      	mov	r1, r7
 80055d6:	f7fb fa79 	bl	8000acc <__aeabi_dcmplt>
 80055da:	2800      	cmp	r0, #0
 80055dc:	d056      	beq.n	800568c <pow+0x2b0>
 80055de:	ec45 4b10 	vmov	d0, r4, r5
 80055e2:	f000 fed5 	bl	8006390 <rint>
 80055e6:	4622      	mov	r2, r4
 80055e8:	462b      	mov	r3, r5
 80055ea:	ec51 0b10 	vmov	r0, r1, d0
 80055ee:	f7fb fa63 	bl	8000ab8 <__aeabi_dcmpeq>
 80055f2:	b920      	cbnz	r0, 80055fe <pow+0x222>
 80055f4:	4b2e      	ldr	r3, [pc, #184]	; (80056b0 <pow+0x2d4>)
 80055f6:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 80055fa:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80055fe:	f998 3000 	ldrsb.w	r3, [r8]
 8005602:	2b02      	cmp	r3, #2
 8005604:	d142      	bne.n	800568c <pow+0x2b0>
 8005606:	f7ff f973 	bl	80048f0 <__errno>
 800560a:	2322      	movs	r3, #34	; 0x22
 800560c:	e78d      	b.n	800552a <pow+0x14e>
 800560e:	4b29      	ldr	r3, [pc, #164]	; (80056b4 <pow+0x2d8>)
 8005610:	2200      	movs	r2, #0
 8005612:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005616:	4630      	mov	r0, r6
 8005618:	4652      	mov	r2, sl
 800561a:	465b      	mov	r3, fp
 800561c:	4639      	mov	r1, r7
 800561e:	f7fb fa55 	bl	8000acc <__aeabi_dcmplt>
 8005622:	2800      	cmp	r0, #0
 8005624:	d0eb      	beq.n	80055fe <pow+0x222>
 8005626:	ec45 4b10 	vmov	d0, r4, r5
 800562a:	f000 feb1 	bl	8006390 <rint>
 800562e:	4622      	mov	r2, r4
 8005630:	462b      	mov	r3, r5
 8005632:	ec51 0b10 	vmov	r0, r1, d0
 8005636:	f7fb fa3f 	bl	8000ab8 <__aeabi_dcmpeq>
 800563a:	2800      	cmp	r0, #0
 800563c:	d1df      	bne.n	80055fe <pow+0x222>
 800563e:	2200      	movs	r2, #0
 8005640:	4b18      	ldr	r3, [pc, #96]	; (80056a4 <pow+0x2c8>)
 8005642:	e7da      	b.n	80055fa <pow+0x21e>
 8005644:	2200      	movs	r2, #0
 8005646:	2300      	movs	r3, #0
 8005648:	ec51 0b18 	vmov	r0, r1, d8
 800564c:	f7fb fa34 	bl	8000ab8 <__aeabi_dcmpeq>
 8005650:	2800      	cmp	r0, #0
 8005652:	f43f af3a 	beq.w	80054ca <pow+0xee>
 8005656:	ec47 6b10 	vmov	d0, r6, r7
 800565a:	f000 fe84 	bl	8006366 <finite>
 800565e:	2800      	cmp	r0, #0
 8005660:	f43f af33 	beq.w	80054ca <pow+0xee>
 8005664:	ec45 4b10 	vmov	d0, r4, r5
 8005668:	f000 fe7d 	bl	8006366 <finite>
 800566c:	2800      	cmp	r0, #0
 800566e:	f43f af2c 	beq.w	80054ca <pow+0xee>
 8005672:	2304      	movs	r3, #4
 8005674:	9302      	str	r3, [sp, #8]
 8005676:	4b09      	ldr	r3, [pc, #36]	; (800569c <pow+0x2c0>)
 8005678:	9303      	str	r3, [sp, #12]
 800567a:	2300      	movs	r3, #0
 800567c:	930a      	str	r3, [sp, #40]	; 0x28
 800567e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005682:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8005686:	ed8d 9b08 	vstr	d9, [sp, #32]
 800568a:	e7b8      	b.n	80055fe <pow+0x222>
 800568c:	a802      	add	r0, sp, #8
 800568e:	f000 fe72 	bl	8006376 <matherr>
 8005692:	2800      	cmp	r0, #0
 8005694:	f47f af11 	bne.w	80054ba <pow+0xde>
 8005698:	e7b5      	b.n	8005606 <pow+0x22a>
 800569a:	bf00      	nop
 800569c:	0800699d 	.word	0x0800699d
 80056a0:	3ff00000 	.word	0x3ff00000
 80056a4:	fff00000 	.word	0xfff00000
 80056a8:	3fe00000 	.word	0x3fe00000
 80056ac:	47efffff 	.word	0x47efffff
 80056b0:	c7efffff 	.word	0xc7efffff
 80056b4:	7ff00000 	.word	0x7ff00000
 80056b8:	20000070 	.word	0x20000070
 80056bc:	00000000 	.word	0x00000000

080056c0 <__ieee754_log10>:
 80056c0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80056c4:	ec55 4b10 	vmov	r4, r5, d0
 80056c8:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 80056cc:	462b      	mov	r3, r5
 80056ce:	da2f      	bge.n	8005730 <__ieee754_log10+0x70>
 80056d0:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 80056d4:	4322      	orrs	r2, r4
 80056d6:	d10a      	bne.n	80056ee <__ieee754_log10+0x2e>
 80056d8:	493b      	ldr	r1, [pc, #236]	; (80057c8 <__ieee754_log10+0x108>)
 80056da:	2200      	movs	r2, #0
 80056dc:	2300      	movs	r3, #0
 80056de:	2000      	movs	r0, #0
 80056e0:	f7fb f8ac 	bl	800083c <__aeabi_ddiv>
 80056e4:	ec41 0b10 	vmov	d0, r0, r1
 80056e8:	b003      	add	sp, #12
 80056ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056ee:	2d00      	cmp	r5, #0
 80056f0:	da08      	bge.n	8005704 <__ieee754_log10+0x44>
 80056f2:	ee10 2a10 	vmov	r2, s0
 80056f6:	4620      	mov	r0, r4
 80056f8:	4629      	mov	r1, r5
 80056fa:	f7fa fdbd 	bl	8000278 <__aeabi_dsub>
 80056fe:	2200      	movs	r2, #0
 8005700:	2300      	movs	r3, #0
 8005702:	e7ed      	b.n	80056e0 <__ieee754_log10+0x20>
 8005704:	2200      	movs	r2, #0
 8005706:	4b31      	ldr	r3, [pc, #196]	; (80057cc <__ieee754_log10+0x10c>)
 8005708:	4629      	mov	r1, r5
 800570a:	ee10 0a10 	vmov	r0, s0
 800570e:	f7fa ff6b 	bl	80005e8 <__aeabi_dmul>
 8005712:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8005716:	4604      	mov	r4, r0
 8005718:	460d      	mov	r5, r1
 800571a:	460b      	mov	r3, r1
 800571c:	492c      	ldr	r1, [pc, #176]	; (80057d0 <__ieee754_log10+0x110>)
 800571e:	428b      	cmp	r3, r1
 8005720:	dd08      	ble.n	8005734 <__ieee754_log10+0x74>
 8005722:	4622      	mov	r2, r4
 8005724:	462b      	mov	r3, r5
 8005726:	4620      	mov	r0, r4
 8005728:	4629      	mov	r1, r5
 800572a:	f7fa fda7 	bl	800027c <__adddf3>
 800572e:	e7d9      	b.n	80056e4 <__ieee754_log10+0x24>
 8005730:	2200      	movs	r2, #0
 8005732:	e7f3      	b.n	800571c <__ieee754_log10+0x5c>
 8005734:	1518      	asrs	r0, r3, #20
 8005736:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800573a:	4410      	add	r0, r2
 800573c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8005740:	4448      	add	r0, r9
 8005742:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8005746:	f7fa fee5 	bl	8000514 <__aeabi_i2d>
 800574a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800574e:	3303      	adds	r3, #3
 8005750:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 8005754:	ec45 4b10 	vmov	d0, r4, r5
 8005758:	4606      	mov	r6, r0
 800575a:	460f      	mov	r7, r1
 800575c:	f000 ff14 	bl	8006588 <__ieee754_log>
 8005760:	a313      	add	r3, pc, #76	; (adr r3, 80057b0 <__ieee754_log10+0xf0>)
 8005762:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005766:	4630      	mov	r0, r6
 8005768:	4639      	mov	r1, r7
 800576a:	ed8d 0b00 	vstr	d0, [sp]
 800576e:	f7fa ff3b 	bl	80005e8 <__aeabi_dmul>
 8005772:	ed9d 0b00 	vldr	d0, [sp]
 8005776:	4604      	mov	r4, r0
 8005778:	460d      	mov	r5, r1
 800577a:	a30f      	add	r3, pc, #60	; (adr r3, 80057b8 <__ieee754_log10+0xf8>)
 800577c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005780:	ec51 0b10 	vmov	r0, r1, d0
 8005784:	f7fa ff30 	bl	80005e8 <__aeabi_dmul>
 8005788:	4602      	mov	r2, r0
 800578a:	460b      	mov	r3, r1
 800578c:	4620      	mov	r0, r4
 800578e:	4629      	mov	r1, r5
 8005790:	f7fa fd74 	bl	800027c <__adddf3>
 8005794:	a30a      	add	r3, pc, #40	; (adr r3, 80057c0 <__ieee754_log10+0x100>)
 8005796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800579a:	4604      	mov	r4, r0
 800579c:	460d      	mov	r5, r1
 800579e:	4630      	mov	r0, r6
 80057a0:	4639      	mov	r1, r7
 80057a2:	f7fa ff21 	bl	80005e8 <__aeabi_dmul>
 80057a6:	4602      	mov	r2, r0
 80057a8:	460b      	mov	r3, r1
 80057aa:	4620      	mov	r0, r4
 80057ac:	4629      	mov	r1, r5
 80057ae:	e7bc      	b.n	800572a <__ieee754_log10+0x6a>
 80057b0:	11f12b36 	.word	0x11f12b36
 80057b4:	3d59fef3 	.word	0x3d59fef3
 80057b8:	1526e50e 	.word	0x1526e50e
 80057bc:	3fdbcb7b 	.word	0x3fdbcb7b
 80057c0:	509f6000 	.word	0x509f6000
 80057c4:	3fd34413 	.word	0x3fd34413
 80057c8:	c3500000 	.word	0xc3500000
 80057cc:	43500000 	.word	0x43500000
 80057d0:	7fefffff 	.word	0x7fefffff
 80057d4:	00000000 	.word	0x00000000

080057d8 <__ieee754_pow>:
 80057d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80057dc:	b091      	sub	sp, #68	; 0x44
 80057de:	ed8d 1b00 	vstr	d1, [sp]
 80057e2:	e9dd 2900 	ldrd	r2, r9, [sp]
 80057e6:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 80057ea:	ea58 0302 	orrs.w	r3, r8, r2
 80057ee:	ec57 6b10 	vmov	r6, r7, d0
 80057f2:	f000 84be 	beq.w	8006172 <__ieee754_pow+0x99a>
 80057f6:	4b7a      	ldr	r3, [pc, #488]	; (80059e0 <__ieee754_pow+0x208>)
 80057f8:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 80057fc:	429c      	cmp	r4, r3
 80057fe:	463d      	mov	r5, r7
 8005800:	ee10 aa10 	vmov	sl, s0
 8005804:	dc09      	bgt.n	800581a <__ieee754_pow+0x42>
 8005806:	d103      	bne.n	8005810 <__ieee754_pow+0x38>
 8005808:	b93e      	cbnz	r6, 800581a <__ieee754_pow+0x42>
 800580a:	45a0      	cmp	r8, r4
 800580c:	dc0d      	bgt.n	800582a <__ieee754_pow+0x52>
 800580e:	e001      	b.n	8005814 <__ieee754_pow+0x3c>
 8005810:	4598      	cmp	r8, r3
 8005812:	dc02      	bgt.n	800581a <__ieee754_pow+0x42>
 8005814:	4598      	cmp	r8, r3
 8005816:	d10e      	bne.n	8005836 <__ieee754_pow+0x5e>
 8005818:	b16a      	cbz	r2, 8005836 <__ieee754_pow+0x5e>
 800581a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800581e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005822:	ea54 030a 	orrs.w	r3, r4, sl
 8005826:	f000 84a4 	beq.w	8006172 <__ieee754_pow+0x99a>
 800582a:	486e      	ldr	r0, [pc, #440]	; (80059e4 <__ieee754_pow+0x20c>)
 800582c:	b011      	add	sp, #68	; 0x44
 800582e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005832:	f000 bda5 	b.w	8006380 <nan>
 8005836:	2d00      	cmp	r5, #0
 8005838:	da53      	bge.n	80058e2 <__ieee754_pow+0x10a>
 800583a:	4b6b      	ldr	r3, [pc, #428]	; (80059e8 <__ieee754_pow+0x210>)
 800583c:	4598      	cmp	r8, r3
 800583e:	dc4d      	bgt.n	80058dc <__ieee754_pow+0x104>
 8005840:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8005844:	4598      	cmp	r8, r3
 8005846:	dd4c      	ble.n	80058e2 <__ieee754_pow+0x10a>
 8005848:	ea4f 5328 	mov.w	r3, r8, asr #20
 800584c:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005850:	2b14      	cmp	r3, #20
 8005852:	dd26      	ble.n	80058a2 <__ieee754_pow+0xca>
 8005854:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8005858:	fa22 f103 	lsr.w	r1, r2, r3
 800585c:	fa01 f303 	lsl.w	r3, r1, r3
 8005860:	4293      	cmp	r3, r2
 8005862:	d13e      	bne.n	80058e2 <__ieee754_pow+0x10a>
 8005864:	f001 0101 	and.w	r1, r1, #1
 8005868:	f1c1 0b02 	rsb	fp, r1, #2
 800586c:	2a00      	cmp	r2, #0
 800586e:	d15b      	bne.n	8005928 <__ieee754_pow+0x150>
 8005870:	4b5b      	ldr	r3, [pc, #364]	; (80059e0 <__ieee754_pow+0x208>)
 8005872:	4598      	cmp	r8, r3
 8005874:	d124      	bne.n	80058c0 <__ieee754_pow+0xe8>
 8005876:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800587a:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800587e:	ea53 030a 	orrs.w	r3, r3, sl
 8005882:	f000 8476 	beq.w	8006172 <__ieee754_pow+0x99a>
 8005886:	4b59      	ldr	r3, [pc, #356]	; (80059ec <__ieee754_pow+0x214>)
 8005888:	429c      	cmp	r4, r3
 800588a:	dd2d      	ble.n	80058e8 <__ieee754_pow+0x110>
 800588c:	f1b9 0f00 	cmp.w	r9, #0
 8005890:	f280 8473 	bge.w	800617a <__ieee754_pow+0x9a2>
 8005894:	2000      	movs	r0, #0
 8005896:	2100      	movs	r1, #0
 8005898:	ec41 0b10 	vmov	d0, r0, r1
 800589c:	b011      	add	sp, #68	; 0x44
 800589e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058a2:	2a00      	cmp	r2, #0
 80058a4:	d13e      	bne.n	8005924 <__ieee754_pow+0x14c>
 80058a6:	f1c3 0314 	rsb	r3, r3, #20
 80058aa:	fa48 f103 	asr.w	r1, r8, r3
 80058ae:	fa01 f303 	lsl.w	r3, r1, r3
 80058b2:	4543      	cmp	r3, r8
 80058b4:	f040 8469 	bne.w	800618a <__ieee754_pow+0x9b2>
 80058b8:	f001 0101 	and.w	r1, r1, #1
 80058bc:	f1c1 0b02 	rsb	fp, r1, #2
 80058c0:	4b4b      	ldr	r3, [pc, #300]	; (80059f0 <__ieee754_pow+0x218>)
 80058c2:	4598      	cmp	r8, r3
 80058c4:	d118      	bne.n	80058f8 <__ieee754_pow+0x120>
 80058c6:	f1b9 0f00 	cmp.w	r9, #0
 80058ca:	f280 845a 	bge.w	8006182 <__ieee754_pow+0x9aa>
 80058ce:	4948      	ldr	r1, [pc, #288]	; (80059f0 <__ieee754_pow+0x218>)
 80058d0:	4632      	mov	r2, r6
 80058d2:	463b      	mov	r3, r7
 80058d4:	2000      	movs	r0, #0
 80058d6:	f7fa ffb1 	bl	800083c <__aeabi_ddiv>
 80058da:	e7dd      	b.n	8005898 <__ieee754_pow+0xc0>
 80058dc:	f04f 0b02 	mov.w	fp, #2
 80058e0:	e7c4      	b.n	800586c <__ieee754_pow+0x94>
 80058e2:	f04f 0b00 	mov.w	fp, #0
 80058e6:	e7c1      	b.n	800586c <__ieee754_pow+0x94>
 80058e8:	f1b9 0f00 	cmp.w	r9, #0
 80058ec:	dad2      	bge.n	8005894 <__ieee754_pow+0xbc>
 80058ee:	e9dd 0300 	ldrd	r0, r3, [sp]
 80058f2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80058f6:	e7cf      	b.n	8005898 <__ieee754_pow+0xc0>
 80058f8:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 80058fc:	d106      	bne.n	800590c <__ieee754_pow+0x134>
 80058fe:	4632      	mov	r2, r6
 8005900:	463b      	mov	r3, r7
 8005902:	4610      	mov	r0, r2
 8005904:	4619      	mov	r1, r3
 8005906:	f7fa fe6f 	bl	80005e8 <__aeabi_dmul>
 800590a:	e7c5      	b.n	8005898 <__ieee754_pow+0xc0>
 800590c:	4b39      	ldr	r3, [pc, #228]	; (80059f4 <__ieee754_pow+0x21c>)
 800590e:	4599      	cmp	r9, r3
 8005910:	d10a      	bne.n	8005928 <__ieee754_pow+0x150>
 8005912:	2d00      	cmp	r5, #0
 8005914:	db08      	blt.n	8005928 <__ieee754_pow+0x150>
 8005916:	ec47 6b10 	vmov	d0, r6, r7
 800591a:	b011      	add	sp, #68	; 0x44
 800591c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005920:	f000 bc68 	b.w	80061f4 <__ieee754_sqrt>
 8005924:	f04f 0b00 	mov.w	fp, #0
 8005928:	ec47 6b10 	vmov	d0, r6, r7
 800592c:	f000 fd12 	bl	8006354 <fabs>
 8005930:	ec51 0b10 	vmov	r0, r1, d0
 8005934:	f1ba 0f00 	cmp.w	sl, #0
 8005938:	d127      	bne.n	800598a <__ieee754_pow+0x1b2>
 800593a:	b124      	cbz	r4, 8005946 <__ieee754_pow+0x16e>
 800593c:	4b2c      	ldr	r3, [pc, #176]	; (80059f0 <__ieee754_pow+0x218>)
 800593e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8005942:	429a      	cmp	r2, r3
 8005944:	d121      	bne.n	800598a <__ieee754_pow+0x1b2>
 8005946:	f1b9 0f00 	cmp.w	r9, #0
 800594a:	da05      	bge.n	8005958 <__ieee754_pow+0x180>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	2000      	movs	r0, #0
 8005952:	4927      	ldr	r1, [pc, #156]	; (80059f0 <__ieee754_pow+0x218>)
 8005954:	f7fa ff72 	bl	800083c <__aeabi_ddiv>
 8005958:	2d00      	cmp	r5, #0
 800595a:	da9d      	bge.n	8005898 <__ieee754_pow+0xc0>
 800595c:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8005960:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8005964:	ea54 030b 	orrs.w	r3, r4, fp
 8005968:	d108      	bne.n	800597c <__ieee754_pow+0x1a4>
 800596a:	4602      	mov	r2, r0
 800596c:	460b      	mov	r3, r1
 800596e:	4610      	mov	r0, r2
 8005970:	4619      	mov	r1, r3
 8005972:	f7fa fc81 	bl	8000278 <__aeabi_dsub>
 8005976:	4602      	mov	r2, r0
 8005978:	460b      	mov	r3, r1
 800597a:	e7ac      	b.n	80058d6 <__ieee754_pow+0xfe>
 800597c:	f1bb 0f01 	cmp.w	fp, #1
 8005980:	d18a      	bne.n	8005898 <__ieee754_pow+0xc0>
 8005982:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005986:	4619      	mov	r1, r3
 8005988:	e786      	b.n	8005898 <__ieee754_pow+0xc0>
 800598a:	0fed      	lsrs	r5, r5, #31
 800598c:	1e6b      	subs	r3, r5, #1
 800598e:	930d      	str	r3, [sp, #52]	; 0x34
 8005990:	ea5b 0303 	orrs.w	r3, fp, r3
 8005994:	d102      	bne.n	800599c <__ieee754_pow+0x1c4>
 8005996:	4632      	mov	r2, r6
 8005998:	463b      	mov	r3, r7
 800599a:	e7e8      	b.n	800596e <__ieee754_pow+0x196>
 800599c:	4b16      	ldr	r3, [pc, #88]	; (80059f8 <__ieee754_pow+0x220>)
 800599e:	4598      	cmp	r8, r3
 80059a0:	f340 80fe 	ble.w	8005ba0 <__ieee754_pow+0x3c8>
 80059a4:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80059a8:	4598      	cmp	r8, r3
 80059aa:	dd0a      	ble.n	80059c2 <__ieee754_pow+0x1ea>
 80059ac:	4b0f      	ldr	r3, [pc, #60]	; (80059ec <__ieee754_pow+0x214>)
 80059ae:	429c      	cmp	r4, r3
 80059b0:	dc0d      	bgt.n	80059ce <__ieee754_pow+0x1f6>
 80059b2:	f1b9 0f00 	cmp.w	r9, #0
 80059b6:	f6bf af6d 	bge.w	8005894 <__ieee754_pow+0xbc>
 80059ba:	a307      	add	r3, pc, #28	; (adr r3, 80059d8 <__ieee754_pow+0x200>)
 80059bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059c0:	e79f      	b.n	8005902 <__ieee754_pow+0x12a>
 80059c2:	4b0e      	ldr	r3, [pc, #56]	; (80059fc <__ieee754_pow+0x224>)
 80059c4:	429c      	cmp	r4, r3
 80059c6:	ddf4      	ble.n	80059b2 <__ieee754_pow+0x1da>
 80059c8:	4b09      	ldr	r3, [pc, #36]	; (80059f0 <__ieee754_pow+0x218>)
 80059ca:	429c      	cmp	r4, r3
 80059cc:	dd18      	ble.n	8005a00 <__ieee754_pow+0x228>
 80059ce:	f1b9 0f00 	cmp.w	r9, #0
 80059d2:	dcf2      	bgt.n	80059ba <__ieee754_pow+0x1e2>
 80059d4:	e75e      	b.n	8005894 <__ieee754_pow+0xbc>
 80059d6:	bf00      	nop
 80059d8:	8800759c 	.word	0x8800759c
 80059dc:	7e37e43c 	.word	0x7e37e43c
 80059e0:	7ff00000 	.word	0x7ff00000
 80059e4:	08006969 	.word	0x08006969
 80059e8:	433fffff 	.word	0x433fffff
 80059ec:	3fefffff 	.word	0x3fefffff
 80059f0:	3ff00000 	.word	0x3ff00000
 80059f4:	3fe00000 	.word	0x3fe00000
 80059f8:	41e00000 	.word	0x41e00000
 80059fc:	3feffffe 	.word	0x3feffffe
 8005a00:	2200      	movs	r2, #0
 8005a02:	4b63      	ldr	r3, [pc, #396]	; (8005b90 <__ieee754_pow+0x3b8>)
 8005a04:	f7fa fc38 	bl	8000278 <__aeabi_dsub>
 8005a08:	a355      	add	r3, pc, #340	; (adr r3, 8005b60 <__ieee754_pow+0x388>)
 8005a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a0e:	4604      	mov	r4, r0
 8005a10:	460d      	mov	r5, r1
 8005a12:	f7fa fde9 	bl	80005e8 <__aeabi_dmul>
 8005a16:	a354      	add	r3, pc, #336	; (adr r3, 8005b68 <__ieee754_pow+0x390>)
 8005a18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a1c:	4606      	mov	r6, r0
 8005a1e:	460f      	mov	r7, r1
 8005a20:	4620      	mov	r0, r4
 8005a22:	4629      	mov	r1, r5
 8005a24:	f7fa fde0 	bl	80005e8 <__aeabi_dmul>
 8005a28:	2200      	movs	r2, #0
 8005a2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005a2e:	4b59      	ldr	r3, [pc, #356]	; (8005b94 <__ieee754_pow+0x3bc>)
 8005a30:	4620      	mov	r0, r4
 8005a32:	4629      	mov	r1, r5
 8005a34:	f7fa fdd8 	bl	80005e8 <__aeabi_dmul>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	a14c      	add	r1, pc, #304	; (adr r1, 8005b70 <__ieee754_pow+0x398>)
 8005a3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005a42:	f7fa fc19 	bl	8000278 <__aeabi_dsub>
 8005a46:	4622      	mov	r2, r4
 8005a48:	462b      	mov	r3, r5
 8005a4a:	f7fa fdcd 	bl	80005e8 <__aeabi_dmul>
 8005a4e:	4602      	mov	r2, r0
 8005a50:	460b      	mov	r3, r1
 8005a52:	2000      	movs	r0, #0
 8005a54:	4950      	ldr	r1, [pc, #320]	; (8005b98 <__ieee754_pow+0x3c0>)
 8005a56:	f7fa fc0f 	bl	8000278 <__aeabi_dsub>
 8005a5a:	4622      	mov	r2, r4
 8005a5c:	462b      	mov	r3, r5
 8005a5e:	4680      	mov	r8, r0
 8005a60:	4689      	mov	r9, r1
 8005a62:	4620      	mov	r0, r4
 8005a64:	4629      	mov	r1, r5
 8005a66:	f7fa fdbf 	bl	80005e8 <__aeabi_dmul>
 8005a6a:	4602      	mov	r2, r0
 8005a6c:	460b      	mov	r3, r1
 8005a6e:	4640      	mov	r0, r8
 8005a70:	4649      	mov	r1, r9
 8005a72:	f7fa fdb9 	bl	80005e8 <__aeabi_dmul>
 8005a76:	a340      	add	r3, pc, #256	; (adr r3, 8005b78 <__ieee754_pow+0x3a0>)
 8005a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a7c:	f7fa fdb4 	bl	80005e8 <__aeabi_dmul>
 8005a80:	4602      	mov	r2, r0
 8005a82:	460b      	mov	r3, r1
 8005a84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005a88:	f7fa fbf6 	bl	8000278 <__aeabi_dsub>
 8005a8c:	4602      	mov	r2, r0
 8005a8e:	460b      	mov	r3, r1
 8005a90:	4604      	mov	r4, r0
 8005a92:	460d      	mov	r5, r1
 8005a94:	4630      	mov	r0, r6
 8005a96:	4639      	mov	r1, r7
 8005a98:	f7fa fbf0 	bl	800027c <__adddf3>
 8005a9c:	2000      	movs	r0, #0
 8005a9e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005aa2:	4632      	mov	r2, r6
 8005aa4:	463b      	mov	r3, r7
 8005aa6:	f7fa fbe7 	bl	8000278 <__aeabi_dsub>
 8005aaa:	4602      	mov	r2, r0
 8005aac:	460b      	mov	r3, r1
 8005aae:	4620      	mov	r0, r4
 8005ab0:	4629      	mov	r1, r5
 8005ab2:	f7fa fbe1 	bl	8000278 <__aeabi_dsub>
 8005ab6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005ab8:	f10b 33ff 	add.w	r3, fp, #4294967295
 8005abc:	4313      	orrs	r3, r2
 8005abe:	4606      	mov	r6, r0
 8005ac0:	460f      	mov	r7, r1
 8005ac2:	f040 81eb 	bne.w	8005e9c <__ieee754_pow+0x6c4>
 8005ac6:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8005b80 <__ieee754_pow+0x3a8>
 8005aca:	e9dd 4500 	ldrd	r4, r5, [sp]
 8005ace:	2400      	movs	r4, #0
 8005ad0:	4622      	mov	r2, r4
 8005ad2:	462b      	mov	r3, r5
 8005ad4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ad8:	ed8d 7b02 	vstr	d7, [sp, #8]
 8005adc:	f7fa fbcc 	bl	8000278 <__aeabi_dsub>
 8005ae0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ae4:	f7fa fd80 	bl	80005e8 <__aeabi_dmul>
 8005ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005aec:	4680      	mov	r8, r0
 8005aee:	4689      	mov	r9, r1
 8005af0:	4630      	mov	r0, r6
 8005af2:	4639      	mov	r1, r7
 8005af4:	f7fa fd78 	bl	80005e8 <__aeabi_dmul>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4640      	mov	r0, r8
 8005afe:	4649      	mov	r1, r9
 8005b00:	f7fa fbbc 	bl	800027c <__adddf3>
 8005b04:	4622      	mov	r2, r4
 8005b06:	462b      	mov	r3, r5
 8005b08:	4680      	mov	r8, r0
 8005b0a:	4689      	mov	r9, r1
 8005b0c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005b10:	f7fa fd6a 	bl	80005e8 <__aeabi_dmul>
 8005b14:	460b      	mov	r3, r1
 8005b16:	4604      	mov	r4, r0
 8005b18:	460d      	mov	r5, r1
 8005b1a:	4602      	mov	r2, r0
 8005b1c:	4649      	mov	r1, r9
 8005b1e:	4640      	mov	r0, r8
 8005b20:	e9cd 4500 	strd	r4, r5, [sp]
 8005b24:	f7fa fbaa 	bl	800027c <__adddf3>
 8005b28:	4b1c      	ldr	r3, [pc, #112]	; (8005b9c <__ieee754_pow+0x3c4>)
 8005b2a:	4299      	cmp	r1, r3
 8005b2c:	4606      	mov	r6, r0
 8005b2e:	460f      	mov	r7, r1
 8005b30:	468b      	mov	fp, r1
 8005b32:	f340 82f7 	ble.w	8006124 <__ieee754_pow+0x94c>
 8005b36:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005b3a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8005b3e:	4303      	orrs	r3, r0
 8005b40:	f000 81ea 	beq.w	8005f18 <__ieee754_pow+0x740>
 8005b44:	a310      	add	r3, pc, #64	; (adr r3, 8005b88 <__ieee754_pow+0x3b0>)
 8005b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005b4e:	f7fa fd4b 	bl	80005e8 <__aeabi_dmul>
 8005b52:	a30d      	add	r3, pc, #52	; (adr r3, 8005b88 <__ieee754_pow+0x3b0>)
 8005b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b58:	e6d5      	b.n	8005906 <__ieee754_pow+0x12e>
 8005b5a:	bf00      	nop
 8005b5c:	f3af 8000 	nop.w
 8005b60:	60000000 	.word	0x60000000
 8005b64:	3ff71547 	.word	0x3ff71547
 8005b68:	f85ddf44 	.word	0xf85ddf44
 8005b6c:	3e54ae0b 	.word	0x3e54ae0b
 8005b70:	55555555 	.word	0x55555555
 8005b74:	3fd55555 	.word	0x3fd55555
 8005b78:	652b82fe 	.word	0x652b82fe
 8005b7c:	3ff71547 	.word	0x3ff71547
 8005b80:	00000000 	.word	0x00000000
 8005b84:	bff00000 	.word	0xbff00000
 8005b88:	8800759c 	.word	0x8800759c
 8005b8c:	7e37e43c 	.word	0x7e37e43c
 8005b90:	3ff00000 	.word	0x3ff00000
 8005b94:	3fd00000 	.word	0x3fd00000
 8005b98:	3fe00000 	.word	0x3fe00000
 8005b9c:	408fffff 	.word	0x408fffff
 8005ba0:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005ba4:	f04f 0200 	mov.w	r2, #0
 8005ba8:	da05      	bge.n	8005bb6 <__ieee754_pow+0x3de>
 8005baa:	4bd3      	ldr	r3, [pc, #844]	; (8005ef8 <__ieee754_pow+0x720>)
 8005bac:	f7fa fd1c 	bl	80005e8 <__aeabi_dmul>
 8005bb0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005bb4:	460c      	mov	r4, r1
 8005bb6:	1523      	asrs	r3, r4, #20
 8005bb8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8005bbc:	4413      	add	r3, r2
 8005bbe:	9309      	str	r3, [sp, #36]	; 0x24
 8005bc0:	4bce      	ldr	r3, [pc, #824]	; (8005efc <__ieee754_pow+0x724>)
 8005bc2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005bc6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8005bca:	429c      	cmp	r4, r3
 8005bcc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005bd0:	dd08      	ble.n	8005be4 <__ieee754_pow+0x40c>
 8005bd2:	4bcb      	ldr	r3, [pc, #812]	; (8005f00 <__ieee754_pow+0x728>)
 8005bd4:	429c      	cmp	r4, r3
 8005bd6:	f340 815e 	ble.w	8005e96 <__ieee754_pow+0x6be>
 8005bda:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005bdc:	3301      	adds	r3, #1
 8005bde:	9309      	str	r3, [sp, #36]	; 0x24
 8005be0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005be4:	f04f 0a00 	mov.w	sl, #0
 8005be8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8005bec:	930c      	str	r3, [sp, #48]	; 0x30
 8005bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005bf0:	4bc4      	ldr	r3, [pc, #784]	; (8005f04 <__ieee754_pow+0x72c>)
 8005bf2:	4413      	add	r3, r2
 8005bf4:	ed93 7b00 	vldr	d7, [r3]
 8005bf8:	4629      	mov	r1, r5
 8005bfa:	ec53 2b17 	vmov	r2, r3, d7
 8005bfe:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005c02:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005c06:	f7fa fb37 	bl	8000278 <__aeabi_dsub>
 8005c0a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005c0e:	4606      	mov	r6, r0
 8005c10:	460f      	mov	r7, r1
 8005c12:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005c16:	f7fa fb31 	bl	800027c <__adddf3>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	2000      	movs	r0, #0
 8005c20:	49b9      	ldr	r1, [pc, #740]	; (8005f08 <__ieee754_pow+0x730>)
 8005c22:	f7fa fe0b 	bl	800083c <__aeabi_ddiv>
 8005c26:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8005c2a:	4602      	mov	r2, r0
 8005c2c:	460b      	mov	r3, r1
 8005c2e:	4630      	mov	r0, r6
 8005c30:	4639      	mov	r1, r7
 8005c32:	f7fa fcd9 	bl	80005e8 <__aeabi_dmul>
 8005c36:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005c3a:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005c3e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8005c42:	2300      	movs	r3, #0
 8005c44:	9302      	str	r3, [sp, #8]
 8005c46:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8005c4a:	106d      	asrs	r5, r5, #1
 8005c4c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8005c50:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8005c54:	2200      	movs	r2, #0
 8005c56:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8005c5a:	4640      	mov	r0, r8
 8005c5c:	4649      	mov	r1, r9
 8005c5e:	4614      	mov	r4, r2
 8005c60:	461d      	mov	r5, r3
 8005c62:	f7fa fcc1 	bl	80005e8 <__aeabi_dmul>
 8005c66:	4602      	mov	r2, r0
 8005c68:	460b      	mov	r3, r1
 8005c6a:	4630      	mov	r0, r6
 8005c6c:	4639      	mov	r1, r7
 8005c6e:	f7fa fb03 	bl	8000278 <__aeabi_dsub>
 8005c72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005c76:	4606      	mov	r6, r0
 8005c78:	460f      	mov	r7, r1
 8005c7a:	4620      	mov	r0, r4
 8005c7c:	4629      	mov	r1, r5
 8005c7e:	f7fa fafb 	bl	8000278 <__aeabi_dsub>
 8005c82:	4602      	mov	r2, r0
 8005c84:	460b      	mov	r3, r1
 8005c86:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8005c8a:	f7fa faf5 	bl	8000278 <__aeabi_dsub>
 8005c8e:	4642      	mov	r2, r8
 8005c90:	464b      	mov	r3, r9
 8005c92:	f7fa fca9 	bl	80005e8 <__aeabi_dmul>
 8005c96:	4602      	mov	r2, r0
 8005c98:	460b      	mov	r3, r1
 8005c9a:	4630      	mov	r0, r6
 8005c9c:	4639      	mov	r1, r7
 8005c9e:	f7fa faeb 	bl	8000278 <__aeabi_dsub>
 8005ca2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005ca6:	f7fa fc9f 	bl	80005e8 <__aeabi_dmul>
 8005caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005cae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005cb2:	4610      	mov	r0, r2
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	f7fa fc97 	bl	80005e8 <__aeabi_dmul>
 8005cba:	a37b      	add	r3, pc, #492	; (adr r3, 8005ea8 <__ieee754_pow+0x6d0>)
 8005cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cc0:	4604      	mov	r4, r0
 8005cc2:	460d      	mov	r5, r1
 8005cc4:	f7fa fc90 	bl	80005e8 <__aeabi_dmul>
 8005cc8:	a379      	add	r3, pc, #484	; (adr r3, 8005eb0 <__ieee754_pow+0x6d8>)
 8005cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cce:	f7fa fad5 	bl	800027c <__adddf3>
 8005cd2:	4622      	mov	r2, r4
 8005cd4:	462b      	mov	r3, r5
 8005cd6:	f7fa fc87 	bl	80005e8 <__aeabi_dmul>
 8005cda:	a377      	add	r3, pc, #476	; (adr r3, 8005eb8 <__ieee754_pow+0x6e0>)
 8005cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ce0:	f7fa facc 	bl	800027c <__adddf3>
 8005ce4:	4622      	mov	r2, r4
 8005ce6:	462b      	mov	r3, r5
 8005ce8:	f7fa fc7e 	bl	80005e8 <__aeabi_dmul>
 8005cec:	a374      	add	r3, pc, #464	; (adr r3, 8005ec0 <__ieee754_pow+0x6e8>)
 8005cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005cf2:	f7fa fac3 	bl	800027c <__adddf3>
 8005cf6:	4622      	mov	r2, r4
 8005cf8:	462b      	mov	r3, r5
 8005cfa:	f7fa fc75 	bl	80005e8 <__aeabi_dmul>
 8005cfe:	a372      	add	r3, pc, #456	; (adr r3, 8005ec8 <__ieee754_pow+0x6f0>)
 8005d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d04:	f7fa faba 	bl	800027c <__adddf3>
 8005d08:	4622      	mov	r2, r4
 8005d0a:	462b      	mov	r3, r5
 8005d0c:	f7fa fc6c 	bl	80005e8 <__aeabi_dmul>
 8005d10:	a36f      	add	r3, pc, #444	; (adr r3, 8005ed0 <__ieee754_pow+0x6f8>)
 8005d12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d16:	f7fa fab1 	bl	800027c <__adddf3>
 8005d1a:	4622      	mov	r2, r4
 8005d1c:	4606      	mov	r6, r0
 8005d1e:	460f      	mov	r7, r1
 8005d20:	462b      	mov	r3, r5
 8005d22:	4620      	mov	r0, r4
 8005d24:	4629      	mov	r1, r5
 8005d26:	f7fa fc5f 	bl	80005e8 <__aeabi_dmul>
 8005d2a:	4602      	mov	r2, r0
 8005d2c:	460b      	mov	r3, r1
 8005d2e:	4630      	mov	r0, r6
 8005d30:	4639      	mov	r1, r7
 8005d32:	f7fa fc59 	bl	80005e8 <__aeabi_dmul>
 8005d36:	4642      	mov	r2, r8
 8005d38:	4604      	mov	r4, r0
 8005d3a:	460d      	mov	r5, r1
 8005d3c:	464b      	mov	r3, r9
 8005d3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005d42:	f7fa fa9b 	bl	800027c <__adddf3>
 8005d46:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005d4a:	f7fa fc4d 	bl	80005e8 <__aeabi_dmul>
 8005d4e:	4622      	mov	r2, r4
 8005d50:	462b      	mov	r3, r5
 8005d52:	f7fa fa93 	bl	800027c <__adddf3>
 8005d56:	4642      	mov	r2, r8
 8005d58:	4606      	mov	r6, r0
 8005d5a:	460f      	mov	r7, r1
 8005d5c:	464b      	mov	r3, r9
 8005d5e:	4640      	mov	r0, r8
 8005d60:	4649      	mov	r1, r9
 8005d62:	f7fa fc41 	bl	80005e8 <__aeabi_dmul>
 8005d66:	2200      	movs	r2, #0
 8005d68:	4b68      	ldr	r3, [pc, #416]	; (8005f0c <__ieee754_pow+0x734>)
 8005d6a:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005d6e:	f7fa fa85 	bl	800027c <__adddf3>
 8005d72:	4632      	mov	r2, r6
 8005d74:	463b      	mov	r3, r7
 8005d76:	f7fa fa81 	bl	800027c <__adddf3>
 8005d7a:	9802      	ldr	r0, [sp, #8]
 8005d7c:	460d      	mov	r5, r1
 8005d7e:	4604      	mov	r4, r0
 8005d80:	4602      	mov	r2, r0
 8005d82:	460b      	mov	r3, r1
 8005d84:	4640      	mov	r0, r8
 8005d86:	4649      	mov	r1, r9
 8005d88:	f7fa fc2e 	bl	80005e8 <__aeabi_dmul>
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	4680      	mov	r8, r0
 8005d90:	4689      	mov	r9, r1
 8005d92:	4b5e      	ldr	r3, [pc, #376]	; (8005f0c <__ieee754_pow+0x734>)
 8005d94:	4620      	mov	r0, r4
 8005d96:	4629      	mov	r1, r5
 8005d98:	f7fa fa6e 	bl	8000278 <__aeabi_dsub>
 8005d9c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005da0:	f7fa fa6a 	bl	8000278 <__aeabi_dsub>
 8005da4:	4602      	mov	r2, r0
 8005da6:	460b      	mov	r3, r1
 8005da8:	4630      	mov	r0, r6
 8005daa:	4639      	mov	r1, r7
 8005dac:	f7fa fa64 	bl	8000278 <__aeabi_dsub>
 8005db0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005db4:	f7fa fc18 	bl	80005e8 <__aeabi_dmul>
 8005db8:	4622      	mov	r2, r4
 8005dba:	4606      	mov	r6, r0
 8005dbc:	460f      	mov	r7, r1
 8005dbe:	462b      	mov	r3, r5
 8005dc0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005dc4:	f7fa fc10 	bl	80005e8 <__aeabi_dmul>
 8005dc8:	4602      	mov	r2, r0
 8005dca:	460b      	mov	r3, r1
 8005dcc:	4630      	mov	r0, r6
 8005dce:	4639      	mov	r1, r7
 8005dd0:	f7fa fa54 	bl	800027c <__adddf3>
 8005dd4:	4606      	mov	r6, r0
 8005dd6:	460f      	mov	r7, r1
 8005dd8:	4602      	mov	r2, r0
 8005dda:	460b      	mov	r3, r1
 8005ddc:	4640      	mov	r0, r8
 8005dde:	4649      	mov	r1, r9
 8005de0:	f7fa fa4c 	bl	800027c <__adddf3>
 8005de4:	9802      	ldr	r0, [sp, #8]
 8005de6:	a33c      	add	r3, pc, #240	; (adr r3, 8005ed8 <__ieee754_pow+0x700>)
 8005de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dec:	4604      	mov	r4, r0
 8005dee:	460d      	mov	r5, r1
 8005df0:	f7fa fbfa 	bl	80005e8 <__aeabi_dmul>
 8005df4:	4642      	mov	r2, r8
 8005df6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005dfa:	464b      	mov	r3, r9
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	4629      	mov	r1, r5
 8005e00:	f7fa fa3a 	bl	8000278 <__aeabi_dsub>
 8005e04:	4602      	mov	r2, r0
 8005e06:	460b      	mov	r3, r1
 8005e08:	4630      	mov	r0, r6
 8005e0a:	4639      	mov	r1, r7
 8005e0c:	f7fa fa34 	bl	8000278 <__aeabi_dsub>
 8005e10:	a333      	add	r3, pc, #204	; (adr r3, 8005ee0 <__ieee754_pow+0x708>)
 8005e12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e16:	f7fa fbe7 	bl	80005e8 <__aeabi_dmul>
 8005e1a:	a333      	add	r3, pc, #204	; (adr r3, 8005ee8 <__ieee754_pow+0x710>)
 8005e1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e20:	4606      	mov	r6, r0
 8005e22:	460f      	mov	r7, r1
 8005e24:	4620      	mov	r0, r4
 8005e26:	4629      	mov	r1, r5
 8005e28:	f7fa fbde 	bl	80005e8 <__aeabi_dmul>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	460b      	mov	r3, r1
 8005e30:	4630      	mov	r0, r6
 8005e32:	4639      	mov	r1, r7
 8005e34:	f7fa fa22 	bl	800027c <__adddf3>
 8005e38:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e3a:	4b35      	ldr	r3, [pc, #212]	; (8005f10 <__ieee754_pow+0x738>)
 8005e3c:	4413      	add	r3, r2
 8005e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e42:	f7fa fa1b 	bl	800027c <__adddf3>
 8005e46:	4604      	mov	r4, r0
 8005e48:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005e4a:	460d      	mov	r5, r1
 8005e4c:	f7fa fb62 	bl	8000514 <__aeabi_i2d>
 8005e50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005e52:	4b30      	ldr	r3, [pc, #192]	; (8005f14 <__ieee754_pow+0x73c>)
 8005e54:	4413      	add	r3, r2
 8005e56:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005e5a:	4606      	mov	r6, r0
 8005e5c:	460f      	mov	r7, r1
 8005e5e:	4622      	mov	r2, r4
 8005e60:	462b      	mov	r3, r5
 8005e62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005e66:	f7fa fa09 	bl	800027c <__adddf3>
 8005e6a:	4642      	mov	r2, r8
 8005e6c:	464b      	mov	r3, r9
 8005e6e:	f7fa fa05 	bl	800027c <__adddf3>
 8005e72:	4632      	mov	r2, r6
 8005e74:	463b      	mov	r3, r7
 8005e76:	f7fa fa01 	bl	800027c <__adddf3>
 8005e7a:	9802      	ldr	r0, [sp, #8]
 8005e7c:	4632      	mov	r2, r6
 8005e7e:	463b      	mov	r3, r7
 8005e80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e84:	f7fa f9f8 	bl	8000278 <__aeabi_dsub>
 8005e88:	4642      	mov	r2, r8
 8005e8a:	464b      	mov	r3, r9
 8005e8c:	f7fa f9f4 	bl	8000278 <__aeabi_dsub>
 8005e90:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005e94:	e607      	b.n	8005aa6 <__ieee754_pow+0x2ce>
 8005e96:	f04f 0a01 	mov.w	sl, #1
 8005e9a:	e6a5      	b.n	8005be8 <__ieee754_pow+0x410>
 8005e9c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005ef0 <__ieee754_pow+0x718>
 8005ea0:	e613      	b.n	8005aca <__ieee754_pow+0x2f2>
 8005ea2:	bf00      	nop
 8005ea4:	f3af 8000 	nop.w
 8005ea8:	4a454eef 	.word	0x4a454eef
 8005eac:	3fca7e28 	.word	0x3fca7e28
 8005eb0:	93c9db65 	.word	0x93c9db65
 8005eb4:	3fcd864a 	.word	0x3fcd864a
 8005eb8:	a91d4101 	.word	0xa91d4101
 8005ebc:	3fd17460 	.word	0x3fd17460
 8005ec0:	518f264d 	.word	0x518f264d
 8005ec4:	3fd55555 	.word	0x3fd55555
 8005ec8:	db6fabff 	.word	0xdb6fabff
 8005ecc:	3fdb6db6 	.word	0x3fdb6db6
 8005ed0:	33333303 	.word	0x33333303
 8005ed4:	3fe33333 	.word	0x3fe33333
 8005ed8:	e0000000 	.word	0xe0000000
 8005edc:	3feec709 	.word	0x3feec709
 8005ee0:	dc3a03fd 	.word	0xdc3a03fd
 8005ee4:	3feec709 	.word	0x3feec709
 8005ee8:	145b01f5 	.word	0x145b01f5
 8005eec:	be3e2fe0 	.word	0xbe3e2fe0
 8005ef0:	00000000 	.word	0x00000000
 8005ef4:	3ff00000 	.word	0x3ff00000
 8005ef8:	43400000 	.word	0x43400000
 8005efc:	0003988e 	.word	0x0003988e
 8005f00:	000bb679 	.word	0x000bb679
 8005f04:	080069a8 	.word	0x080069a8
 8005f08:	3ff00000 	.word	0x3ff00000
 8005f0c:	40080000 	.word	0x40080000
 8005f10:	080069c8 	.word	0x080069c8
 8005f14:	080069b8 	.word	0x080069b8
 8005f18:	a3b4      	add	r3, pc, #720	; (adr r3, 80061ec <__ieee754_pow+0xa14>)
 8005f1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1e:	4640      	mov	r0, r8
 8005f20:	4649      	mov	r1, r9
 8005f22:	f7fa f9ab 	bl	800027c <__adddf3>
 8005f26:	4622      	mov	r2, r4
 8005f28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005f2c:	462b      	mov	r3, r5
 8005f2e:	4630      	mov	r0, r6
 8005f30:	4639      	mov	r1, r7
 8005f32:	f7fa f9a1 	bl	8000278 <__aeabi_dsub>
 8005f36:	4602      	mov	r2, r0
 8005f38:	460b      	mov	r3, r1
 8005f3a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005f3e:	f7fa fde3 	bl	8000b08 <__aeabi_dcmpgt>
 8005f42:	2800      	cmp	r0, #0
 8005f44:	f47f adfe 	bne.w	8005b44 <__ieee754_pow+0x36c>
 8005f48:	4aa3      	ldr	r2, [pc, #652]	; (80061d8 <__ieee754_pow+0xa00>)
 8005f4a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8005f4e:	4293      	cmp	r3, r2
 8005f50:	f340 810a 	ble.w	8006168 <__ieee754_pow+0x990>
 8005f54:	151b      	asrs	r3, r3, #20
 8005f56:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8005f5a:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8005f5e:	fa4a f303 	asr.w	r3, sl, r3
 8005f62:	445b      	add	r3, fp
 8005f64:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8005f68:	4e9c      	ldr	r6, [pc, #624]	; (80061dc <__ieee754_pow+0xa04>)
 8005f6a:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8005f6e:	4116      	asrs	r6, r2
 8005f70:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8005f74:	2000      	movs	r0, #0
 8005f76:	ea23 0106 	bic.w	r1, r3, r6
 8005f7a:	f1c2 0214 	rsb	r2, r2, #20
 8005f7e:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8005f82:	fa4a fa02 	asr.w	sl, sl, r2
 8005f86:	f1bb 0f00 	cmp.w	fp, #0
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	460b      	mov	r3, r1
 8005f8e:	4620      	mov	r0, r4
 8005f90:	4629      	mov	r1, r5
 8005f92:	bfb8      	it	lt
 8005f94:	f1ca 0a00 	rsblt	sl, sl, #0
 8005f98:	f7fa f96e 	bl	8000278 <__aeabi_dsub>
 8005f9c:	e9cd 0100 	strd	r0, r1, [sp]
 8005fa0:	4642      	mov	r2, r8
 8005fa2:	464b      	mov	r3, r9
 8005fa4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fa8:	f7fa f968 	bl	800027c <__adddf3>
 8005fac:	2000      	movs	r0, #0
 8005fae:	a378      	add	r3, pc, #480	; (adr r3, 8006190 <__ieee754_pow+0x9b8>)
 8005fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fb4:	4604      	mov	r4, r0
 8005fb6:	460d      	mov	r5, r1
 8005fb8:	f7fa fb16 	bl	80005e8 <__aeabi_dmul>
 8005fbc:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005fc0:	4606      	mov	r6, r0
 8005fc2:	460f      	mov	r7, r1
 8005fc4:	4620      	mov	r0, r4
 8005fc6:	4629      	mov	r1, r5
 8005fc8:	f7fa f956 	bl	8000278 <__aeabi_dsub>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	460b      	mov	r3, r1
 8005fd0:	4640      	mov	r0, r8
 8005fd2:	4649      	mov	r1, r9
 8005fd4:	f7fa f950 	bl	8000278 <__aeabi_dsub>
 8005fd8:	a36f      	add	r3, pc, #444	; (adr r3, 8006198 <__ieee754_pow+0x9c0>)
 8005fda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fde:	f7fa fb03 	bl	80005e8 <__aeabi_dmul>
 8005fe2:	a36f      	add	r3, pc, #444	; (adr r3, 80061a0 <__ieee754_pow+0x9c8>)
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	4680      	mov	r8, r0
 8005fea:	4689      	mov	r9, r1
 8005fec:	4620      	mov	r0, r4
 8005fee:	4629      	mov	r1, r5
 8005ff0:	f7fa fafa 	bl	80005e8 <__aeabi_dmul>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4640      	mov	r0, r8
 8005ffa:	4649      	mov	r1, r9
 8005ffc:	f7fa f93e 	bl	800027c <__adddf3>
 8006000:	4604      	mov	r4, r0
 8006002:	460d      	mov	r5, r1
 8006004:	4602      	mov	r2, r0
 8006006:	460b      	mov	r3, r1
 8006008:	4630      	mov	r0, r6
 800600a:	4639      	mov	r1, r7
 800600c:	f7fa f936 	bl	800027c <__adddf3>
 8006010:	4632      	mov	r2, r6
 8006012:	463b      	mov	r3, r7
 8006014:	4680      	mov	r8, r0
 8006016:	4689      	mov	r9, r1
 8006018:	f7fa f92e 	bl	8000278 <__aeabi_dsub>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4620      	mov	r0, r4
 8006022:	4629      	mov	r1, r5
 8006024:	f7fa f928 	bl	8000278 <__aeabi_dsub>
 8006028:	4642      	mov	r2, r8
 800602a:	4606      	mov	r6, r0
 800602c:	460f      	mov	r7, r1
 800602e:	464b      	mov	r3, r9
 8006030:	4640      	mov	r0, r8
 8006032:	4649      	mov	r1, r9
 8006034:	f7fa fad8 	bl	80005e8 <__aeabi_dmul>
 8006038:	a35b      	add	r3, pc, #364	; (adr r3, 80061a8 <__ieee754_pow+0x9d0>)
 800603a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800603e:	4604      	mov	r4, r0
 8006040:	460d      	mov	r5, r1
 8006042:	f7fa fad1 	bl	80005e8 <__aeabi_dmul>
 8006046:	a35a      	add	r3, pc, #360	; (adr r3, 80061b0 <__ieee754_pow+0x9d8>)
 8006048:	e9d3 2300 	ldrd	r2, r3, [r3]
 800604c:	f7fa f914 	bl	8000278 <__aeabi_dsub>
 8006050:	4622      	mov	r2, r4
 8006052:	462b      	mov	r3, r5
 8006054:	f7fa fac8 	bl	80005e8 <__aeabi_dmul>
 8006058:	a357      	add	r3, pc, #348	; (adr r3, 80061b8 <__ieee754_pow+0x9e0>)
 800605a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800605e:	f7fa f90d 	bl	800027c <__adddf3>
 8006062:	4622      	mov	r2, r4
 8006064:	462b      	mov	r3, r5
 8006066:	f7fa fabf 	bl	80005e8 <__aeabi_dmul>
 800606a:	a355      	add	r3, pc, #340	; (adr r3, 80061c0 <__ieee754_pow+0x9e8>)
 800606c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006070:	f7fa f902 	bl	8000278 <__aeabi_dsub>
 8006074:	4622      	mov	r2, r4
 8006076:	462b      	mov	r3, r5
 8006078:	f7fa fab6 	bl	80005e8 <__aeabi_dmul>
 800607c:	a352      	add	r3, pc, #328	; (adr r3, 80061c8 <__ieee754_pow+0x9f0>)
 800607e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006082:	f7fa f8fb 	bl	800027c <__adddf3>
 8006086:	4622      	mov	r2, r4
 8006088:	462b      	mov	r3, r5
 800608a:	f7fa faad 	bl	80005e8 <__aeabi_dmul>
 800608e:	4602      	mov	r2, r0
 8006090:	460b      	mov	r3, r1
 8006092:	4640      	mov	r0, r8
 8006094:	4649      	mov	r1, r9
 8006096:	f7fa f8ef 	bl	8000278 <__aeabi_dsub>
 800609a:	4604      	mov	r4, r0
 800609c:	460d      	mov	r5, r1
 800609e:	4602      	mov	r2, r0
 80060a0:	460b      	mov	r3, r1
 80060a2:	4640      	mov	r0, r8
 80060a4:	4649      	mov	r1, r9
 80060a6:	f7fa fa9f 	bl	80005e8 <__aeabi_dmul>
 80060aa:	2200      	movs	r2, #0
 80060ac:	e9cd 0100 	strd	r0, r1, [sp]
 80060b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80060b4:	4620      	mov	r0, r4
 80060b6:	4629      	mov	r1, r5
 80060b8:	f7fa f8de 	bl	8000278 <__aeabi_dsub>
 80060bc:	4602      	mov	r2, r0
 80060be:	460b      	mov	r3, r1
 80060c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060c4:	f7fa fbba 	bl	800083c <__aeabi_ddiv>
 80060c8:	4632      	mov	r2, r6
 80060ca:	4604      	mov	r4, r0
 80060cc:	460d      	mov	r5, r1
 80060ce:	463b      	mov	r3, r7
 80060d0:	4640      	mov	r0, r8
 80060d2:	4649      	mov	r1, r9
 80060d4:	f7fa fa88 	bl	80005e8 <__aeabi_dmul>
 80060d8:	4632      	mov	r2, r6
 80060da:	463b      	mov	r3, r7
 80060dc:	f7fa f8ce 	bl	800027c <__adddf3>
 80060e0:	4602      	mov	r2, r0
 80060e2:	460b      	mov	r3, r1
 80060e4:	4620      	mov	r0, r4
 80060e6:	4629      	mov	r1, r5
 80060e8:	f7fa f8c6 	bl	8000278 <__aeabi_dsub>
 80060ec:	4642      	mov	r2, r8
 80060ee:	464b      	mov	r3, r9
 80060f0:	f7fa f8c2 	bl	8000278 <__aeabi_dsub>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	2000      	movs	r0, #0
 80060fa:	4939      	ldr	r1, [pc, #228]	; (80061e0 <__ieee754_pow+0xa08>)
 80060fc:	f7fa f8bc 	bl	8000278 <__aeabi_dsub>
 8006100:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8006104:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8006108:	4602      	mov	r2, r0
 800610a:	460b      	mov	r3, r1
 800610c:	da2f      	bge.n	800616e <__ieee754_pow+0x996>
 800610e:	4650      	mov	r0, sl
 8006110:	ec43 2b10 	vmov	d0, r2, r3
 8006114:	f000 f9c0 	bl	8006498 <scalbn>
 8006118:	ec51 0b10 	vmov	r0, r1, d0
 800611c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006120:	f7ff bbf1 	b.w	8005906 <__ieee754_pow+0x12e>
 8006124:	4b2f      	ldr	r3, [pc, #188]	; (80061e4 <__ieee754_pow+0xa0c>)
 8006126:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800612a:	429e      	cmp	r6, r3
 800612c:	f77f af0c 	ble.w	8005f48 <__ieee754_pow+0x770>
 8006130:	4b2d      	ldr	r3, [pc, #180]	; (80061e8 <__ieee754_pow+0xa10>)
 8006132:	440b      	add	r3, r1
 8006134:	4303      	orrs	r3, r0
 8006136:	d00b      	beq.n	8006150 <__ieee754_pow+0x978>
 8006138:	a325      	add	r3, pc, #148	; (adr r3, 80061d0 <__ieee754_pow+0x9f8>)
 800613a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800613e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006142:	f7fa fa51 	bl	80005e8 <__aeabi_dmul>
 8006146:	a322      	add	r3, pc, #136	; (adr r3, 80061d0 <__ieee754_pow+0x9f8>)
 8006148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800614c:	f7ff bbdb 	b.w	8005906 <__ieee754_pow+0x12e>
 8006150:	4622      	mov	r2, r4
 8006152:	462b      	mov	r3, r5
 8006154:	f7fa f890 	bl	8000278 <__aeabi_dsub>
 8006158:	4642      	mov	r2, r8
 800615a:	464b      	mov	r3, r9
 800615c:	f7fa fcca 	bl	8000af4 <__aeabi_dcmpge>
 8006160:	2800      	cmp	r0, #0
 8006162:	f43f aef1 	beq.w	8005f48 <__ieee754_pow+0x770>
 8006166:	e7e7      	b.n	8006138 <__ieee754_pow+0x960>
 8006168:	f04f 0a00 	mov.w	sl, #0
 800616c:	e718      	b.n	8005fa0 <__ieee754_pow+0x7c8>
 800616e:	4621      	mov	r1, r4
 8006170:	e7d4      	b.n	800611c <__ieee754_pow+0x944>
 8006172:	2000      	movs	r0, #0
 8006174:	491a      	ldr	r1, [pc, #104]	; (80061e0 <__ieee754_pow+0xa08>)
 8006176:	f7ff bb8f 	b.w	8005898 <__ieee754_pow+0xc0>
 800617a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800617e:	f7ff bb8b 	b.w	8005898 <__ieee754_pow+0xc0>
 8006182:	4630      	mov	r0, r6
 8006184:	4639      	mov	r1, r7
 8006186:	f7ff bb87 	b.w	8005898 <__ieee754_pow+0xc0>
 800618a:	4693      	mov	fp, r2
 800618c:	f7ff bb98 	b.w	80058c0 <__ieee754_pow+0xe8>
 8006190:	00000000 	.word	0x00000000
 8006194:	3fe62e43 	.word	0x3fe62e43
 8006198:	fefa39ef 	.word	0xfefa39ef
 800619c:	3fe62e42 	.word	0x3fe62e42
 80061a0:	0ca86c39 	.word	0x0ca86c39
 80061a4:	be205c61 	.word	0xbe205c61
 80061a8:	72bea4d0 	.word	0x72bea4d0
 80061ac:	3e663769 	.word	0x3e663769
 80061b0:	c5d26bf1 	.word	0xc5d26bf1
 80061b4:	3ebbbd41 	.word	0x3ebbbd41
 80061b8:	af25de2c 	.word	0xaf25de2c
 80061bc:	3f11566a 	.word	0x3f11566a
 80061c0:	16bebd93 	.word	0x16bebd93
 80061c4:	3f66c16c 	.word	0x3f66c16c
 80061c8:	5555553e 	.word	0x5555553e
 80061cc:	3fc55555 	.word	0x3fc55555
 80061d0:	c2f8f359 	.word	0xc2f8f359
 80061d4:	01a56e1f 	.word	0x01a56e1f
 80061d8:	3fe00000 	.word	0x3fe00000
 80061dc:	000fffff 	.word	0x000fffff
 80061e0:	3ff00000 	.word	0x3ff00000
 80061e4:	4090cbff 	.word	0x4090cbff
 80061e8:	3f6f3400 	.word	0x3f6f3400
 80061ec:	652b82fe 	.word	0x652b82fe
 80061f0:	3c971547 	.word	0x3c971547

080061f4 <__ieee754_sqrt>:
 80061f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80061f8:	4955      	ldr	r1, [pc, #340]	; (8006350 <__ieee754_sqrt+0x15c>)
 80061fa:	ec55 4b10 	vmov	r4, r5, d0
 80061fe:	43a9      	bics	r1, r5
 8006200:	462b      	mov	r3, r5
 8006202:	462a      	mov	r2, r5
 8006204:	d112      	bne.n	800622c <__ieee754_sqrt+0x38>
 8006206:	ee10 2a10 	vmov	r2, s0
 800620a:	ee10 0a10 	vmov	r0, s0
 800620e:	4629      	mov	r1, r5
 8006210:	f7fa f9ea 	bl	80005e8 <__aeabi_dmul>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4620      	mov	r0, r4
 800621a:	4629      	mov	r1, r5
 800621c:	f7fa f82e 	bl	800027c <__adddf3>
 8006220:	4604      	mov	r4, r0
 8006222:	460d      	mov	r5, r1
 8006224:	ec45 4b10 	vmov	d0, r4, r5
 8006228:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800622c:	2d00      	cmp	r5, #0
 800622e:	ee10 0a10 	vmov	r0, s0
 8006232:	4621      	mov	r1, r4
 8006234:	dc0f      	bgt.n	8006256 <__ieee754_sqrt+0x62>
 8006236:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800623a:	4330      	orrs	r0, r6
 800623c:	d0f2      	beq.n	8006224 <__ieee754_sqrt+0x30>
 800623e:	b155      	cbz	r5, 8006256 <__ieee754_sqrt+0x62>
 8006240:	ee10 2a10 	vmov	r2, s0
 8006244:	4620      	mov	r0, r4
 8006246:	4629      	mov	r1, r5
 8006248:	f7fa f816 	bl	8000278 <__aeabi_dsub>
 800624c:	4602      	mov	r2, r0
 800624e:	460b      	mov	r3, r1
 8006250:	f7fa faf4 	bl	800083c <__aeabi_ddiv>
 8006254:	e7e4      	b.n	8006220 <__ieee754_sqrt+0x2c>
 8006256:	151b      	asrs	r3, r3, #20
 8006258:	d073      	beq.n	8006342 <__ieee754_sqrt+0x14e>
 800625a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800625e:	07dd      	lsls	r5, r3, #31
 8006260:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8006264:	bf48      	it	mi
 8006266:	0fc8      	lsrmi	r0, r1, #31
 8006268:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800626c:	bf44      	itt	mi
 800626e:	0049      	lslmi	r1, r1, #1
 8006270:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 8006274:	2500      	movs	r5, #0
 8006276:	1058      	asrs	r0, r3, #1
 8006278:	0fcb      	lsrs	r3, r1, #31
 800627a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800627e:	0049      	lsls	r1, r1, #1
 8006280:	2316      	movs	r3, #22
 8006282:	462c      	mov	r4, r5
 8006284:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 8006288:	19a7      	adds	r7, r4, r6
 800628a:	4297      	cmp	r7, r2
 800628c:	bfde      	ittt	le
 800628e:	19bc      	addle	r4, r7, r6
 8006290:	1bd2      	suble	r2, r2, r7
 8006292:	19ad      	addle	r5, r5, r6
 8006294:	0fcf      	lsrs	r7, r1, #31
 8006296:	3b01      	subs	r3, #1
 8006298:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800629c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80062a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80062a4:	d1f0      	bne.n	8006288 <__ieee754_sqrt+0x94>
 80062a6:	f04f 0c20 	mov.w	ip, #32
 80062aa:	469e      	mov	lr, r3
 80062ac:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80062b0:	42a2      	cmp	r2, r4
 80062b2:	eb06 070e 	add.w	r7, r6, lr
 80062b6:	dc02      	bgt.n	80062be <__ieee754_sqrt+0xca>
 80062b8:	d112      	bne.n	80062e0 <__ieee754_sqrt+0xec>
 80062ba:	428f      	cmp	r7, r1
 80062bc:	d810      	bhi.n	80062e0 <__ieee754_sqrt+0xec>
 80062be:	2f00      	cmp	r7, #0
 80062c0:	eb07 0e06 	add.w	lr, r7, r6
 80062c4:	da42      	bge.n	800634c <__ieee754_sqrt+0x158>
 80062c6:	f1be 0f00 	cmp.w	lr, #0
 80062ca:	db3f      	blt.n	800634c <__ieee754_sqrt+0x158>
 80062cc:	f104 0801 	add.w	r8, r4, #1
 80062d0:	1b12      	subs	r2, r2, r4
 80062d2:	428f      	cmp	r7, r1
 80062d4:	bf88      	it	hi
 80062d6:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80062da:	1bc9      	subs	r1, r1, r7
 80062dc:	4433      	add	r3, r6
 80062de:	4644      	mov	r4, r8
 80062e0:	0052      	lsls	r2, r2, #1
 80062e2:	f1bc 0c01 	subs.w	ip, ip, #1
 80062e6:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 80062ea:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80062ee:	ea4f 0141 	mov.w	r1, r1, lsl #1
 80062f2:	d1dd      	bne.n	80062b0 <__ieee754_sqrt+0xbc>
 80062f4:	430a      	orrs	r2, r1
 80062f6:	d006      	beq.n	8006306 <__ieee754_sqrt+0x112>
 80062f8:	1c5c      	adds	r4, r3, #1
 80062fa:	bf13      	iteet	ne
 80062fc:	3301      	addne	r3, #1
 80062fe:	3501      	addeq	r5, #1
 8006300:	4663      	moveq	r3, ip
 8006302:	f023 0301 	bicne.w	r3, r3, #1
 8006306:	106a      	asrs	r2, r5, #1
 8006308:	085b      	lsrs	r3, r3, #1
 800630a:	07e9      	lsls	r1, r5, #31
 800630c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8006310:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8006314:	bf48      	it	mi
 8006316:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800631a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800631e:	461c      	mov	r4, r3
 8006320:	e780      	b.n	8006224 <__ieee754_sqrt+0x30>
 8006322:	0aca      	lsrs	r2, r1, #11
 8006324:	3815      	subs	r0, #21
 8006326:	0549      	lsls	r1, r1, #21
 8006328:	2a00      	cmp	r2, #0
 800632a:	d0fa      	beq.n	8006322 <__ieee754_sqrt+0x12e>
 800632c:	02d6      	lsls	r6, r2, #11
 800632e:	d50a      	bpl.n	8006346 <__ieee754_sqrt+0x152>
 8006330:	f1c3 0420 	rsb	r4, r3, #32
 8006334:	fa21 f404 	lsr.w	r4, r1, r4
 8006338:	1e5d      	subs	r5, r3, #1
 800633a:	4099      	lsls	r1, r3
 800633c:	4322      	orrs	r2, r4
 800633e:	1b43      	subs	r3, r0, r5
 8006340:	e78b      	b.n	800625a <__ieee754_sqrt+0x66>
 8006342:	4618      	mov	r0, r3
 8006344:	e7f0      	b.n	8006328 <__ieee754_sqrt+0x134>
 8006346:	0052      	lsls	r2, r2, #1
 8006348:	3301      	adds	r3, #1
 800634a:	e7ef      	b.n	800632c <__ieee754_sqrt+0x138>
 800634c:	46a0      	mov	r8, r4
 800634e:	e7bf      	b.n	80062d0 <__ieee754_sqrt+0xdc>
 8006350:	7ff00000 	.word	0x7ff00000

08006354 <fabs>:
 8006354:	ec51 0b10 	vmov	r0, r1, d0
 8006358:	ee10 2a10 	vmov	r2, s0
 800635c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006360:	ec43 2b10 	vmov	d0, r2, r3
 8006364:	4770      	bx	lr

08006366 <finite>:
 8006366:	ee10 3a90 	vmov	r3, s1
 800636a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 800636e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8006372:	0fc0      	lsrs	r0, r0, #31
 8006374:	4770      	bx	lr

08006376 <matherr>:
 8006376:	2000      	movs	r0, #0
 8006378:	4770      	bx	lr
 800637a:	0000      	movs	r0, r0
 800637c:	0000      	movs	r0, r0
	...

08006380 <nan>:
 8006380:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006388 <nan+0x8>
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	00000000 	.word	0x00000000
 800638c:	7ff80000 	.word	0x7ff80000

08006390 <rint>:
 8006390:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006392:	ec51 0b10 	vmov	r0, r1, d0
 8006396:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800639a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800639e:	2e13      	cmp	r6, #19
 80063a0:	460b      	mov	r3, r1
 80063a2:	ee10 4a10 	vmov	r4, s0
 80063a6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80063aa:	dc56      	bgt.n	800645a <rint+0xca>
 80063ac:	2e00      	cmp	r6, #0
 80063ae:	da2b      	bge.n	8006408 <rint+0x78>
 80063b0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80063b4:	4302      	orrs	r2, r0
 80063b6:	d023      	beq.n	8006400 <rint+0x70>
 80063b8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80063bc:	4302      	orrs	r2, r0
 80063be:	4254      	negs	r4, r2
 80063c0:	4314      	orrs	r4, r2
 80063c2:	0c4b      	lsrs	r3, r1, #17
 80063c4:	0b24      	lsrs	r4, r4, #12
 80063c6:	045b      	lsls	r3, r3, #17
 80063c8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80063cc:	ea44 0103 	orr.w	r1, r4, r3
 80063d0:	460b      	mov	r3, r1
 80063d2:	492f      	ldr	r1, [pc, #188]	; (8006490 <rint+0x100>)
 80063d4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80063d8:	e9d1 6700 	ldrd	r6, r7, [r1]
 80063dc:	4602      	mov	r2, r0
 80063de:	4639      	mov	r1, r7
 80063e0:	4630      	mov	r0, r6
 80063e2:	f7f9 ff4b 	bl	800027c <__adddf3>
 80063e6:	e9cd 0100 	strd	r0, r1, [sp]
 80063ea:	463b      	mov	r3, r7
 80063ec:	4632      	mov	r2, r6
 80063ee:	e9dd 0100 	ldrd	r0, r1, [sp]
 80063f2:	f7f9 ff41 	bl	8000278 <__aeabi_dsub>
 80063f6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80063fa:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80063fe:	4639      	mov	r1, r7
 8006400:	ec41 0b10 	vmov	d0, r0, r1
 8006404:	b003      	add	sp, #12
 8006406:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006408:	4a22      	ldr	r2, [pc, #136]	; (8006494 <rint+0x104>)
 800640a:	4132      	asrs	r2, r6
 800640c:	ea01 0702 	and.w	r7, r1, r2
 8006410:	4307      	orrs	r7, r0
 8006412:	d0f5      	beq.n	8006400 <rint+0x70>
 8006414:	0852      	lsrs	r2, r2, #1
 8006416:	4011      	ands	r1, r2
 8006418:	430c      	orrs	r4, r1
 800641a:	d00b      	beq.n	8006434 <rint+0xa4>
 800641c:	ea23 0202 	bic.w	r2, r3, r2
 8006420:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8006424:	2e13      	cmp	r6, #19
 8006426:	fa43 f306 	asr.w	r3, r3, r6
 800642a:	bf0c      	ite	eq
 800642c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006430:	2400      	movne	r4, #0
 8006432:	4313      	orrs	r3, r2
 8006434:	4916      	ldr	r1, [pc, #88]	; (8006490 <rint+0x100>)
 8006436:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800643a:	4622      	mov	r2, r4
 800643c:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006440:	4620      	mov	r0, r4
 8006442:	4629      	mov	r1, r5
 8006444:	f7f9 ff1a 	bl	800027c <__adddf3>
 8006448:	e9cd 0100 	strd	r0, r1, [sp]
 800644c:	4622      	mov	r2, r4
 800644e:	462b      	mov	r3, r5
 8006450:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006454:	f7f9 ff10 	bl	8000278 <__aeabi_dsub>
 8006458:	e7d2      	b.n	8006400 <rint+0x70>
 800645a:	2e33      	cmp	r6, #51	; 0x33
 800645c:	dd07      	ble.n	800646e <rint+0xde>
 800645e:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8006462:	d1cd      	bne.n	8006400 <rint+0x70>
 8006464:	ee10 2a10 	vmov	r2, s0
 8006468:	f7f9 ff08 	bl	800027c <__adddf3>
 800646c:	e7c8      	b.n	8006400 <rint+0x70>
 800646e:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 8006472:	f04f 32ff 	mov.w	r2, #4294967295
 8006476:	40f2      	lsrs	r2, r6
 8006478:	4210      	tst	r0, r2
 800647a:	d0c1      	beq.n	8006400 <rint+0x70>
 800647c:	0852      	lsrs	r2, r2, #1
 800647e:	4210      	tst	r0, r2
 8006480:	bf1f      	itttt	ne
 8006482:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8006486:	ea20 0202 	bicne.w	r2, r0, r2
 800648a:	4134      	asrne	r4, r6
 800648c:	4314      	orrne	r4, r2
 800648e:	e7d1      	b.n	8006434 <rint+0xa4>
 8006490:	080069d8 	.word	0x080069d8
 8006494:	000fffff 	.word	0x000fffff

08006498 <scalbn>:
 8006498:	b570      	push	{r4, r5, r6, lr}
 800649a:	ec55 4b10 	vmov	r4, r5, d0
 800649e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80064a2:	4606      	mov	r6, r0
 80064a4:	462b      	mov	r3, r5
 80064a6:	b9aa      	cbnz	r2, 80064d4 <scalbn+0x3c>
 80064a8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80064ac:	4323      	orrs	r3, r4
 80064ae:	d03b      	beq.n	8006528 <scalbn+0x90>
 80064b0:	4b31      	ldr	r3, [pc, #196]	; (8006578 <scalbn+0xe0>)
 80064b2:	4629      	mov	r1, r5
 80064b4:	2200      	movs	r2, #0
 80064b6:	ee10 0a10 	vmov	r0, s0
 80064ba:	f7fa f895 	bl	80005e8 <__aeabi_dmul>
 80064be:	4b2f      	ldr	r3, [pc, #188]	; (800657c <scalbn+0xe4>)
 80064c0:	429e      	cmp	r6, r3
 80064c2:	4604      	mov	r4, r0
 80064c4:	460d      	mov	r5, r1
 80064c6:	da12      	bge.n	80064ee <scalbn+0x56>
 80064c8:	a327      	add	r3, pc, #156	; (adr r3, 8006568 <scalbn+0xd0>)
 80064ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064ce:	f7fa f88b 	bl	80005e8 <__aeabi_dmul>
 80064d2:	e009      	b.n	80064e8 <scalbn+0x50>
 80064d4:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80064d8:	428a      	cmp	r2, r1
 80064da:	d10c      	bne.n	80064f6 <scalbn+0x5e>
 80064dc:	ee10 2a10 	vmov	r2, s0
 80064e0:	4620      	mov	r0, r4
 80064e2:	4629      	mov	r1, r5
 80064e4:	f7f9 feca 	bl	800027c <__adddf3>
 80064e8:	4604      	mov	r4, r0
 80064ea:	460d      	mov	r5, r1
 80064ec:	e01c      	b.n	8006528 <scalbn+0x90>
 80064ee:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80064f2:	460b      	mov	r3, r1
 80064f4:	3a36      	subs	r2, #54	; 0x36
 80064f6:	4432      	add	r2, r6
 80064f8:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80064fc:	428a      	cmp	r2, r1
 80064fe:	dd0b      	ble.n	8006518 <scalbn+0x80>
 8006500:	ec45 4b11 	vmov	d1, r4, r5
 8006504:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006570 <scalbn+0xd8>
 8006508:	f000 f9f0 	bl	80068ec <copysign>
 800650c:	a318      	add	r3, pc, #96	; (adr r3, 8006570 <scalbn+0xd8>)
 800650e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006512:	ec51 0b10 	vmov	r0, r1, d0
 8006516:	e7da      	b.n	80064ce <scalbn+0x36>
 8006518:	2a00      	cmp	r2, #0
 800651a:	dd08      	ble.n	800652e <scalbn+0x96>
 800651c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006520:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006524:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006528:	ec45 4b10 	vmov	d0, r4, r5
 800652c:	bd70      	pop	{r4, r5, r6, pc}
 800652e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006532:	da0d      	bge.n	8006550 <scalbn+0xb8>
 8006534:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006538:	429e      	cmp	r6, r3
 800653a:	ec45 4b11 	vmov	d1, r4, r5
 800653e:	dce1      	bgt.n	8006504 <scalbn+0x6c>
 8006540:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006568 <scalbn+0xd0>
 8006544:	f000 f9d2 	bl	80068ec <copysign>
 8006548:	a307      	add	r3, pc, #28	; (adr r3, 8006568 <scalbn+0xd0>)
 800654a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800654e:	e7e0      	b.n	8006512 <scalbn+0x7a>
 8006550:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006554:	3236      	adds	r2, #54	; 0x36
 8006556:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800655a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800655e:	4620      	mov	r0, r4
 8006560:	4629      	mov	r1, r5
 8006562:	2200      	movs	r2, #0
 8006564:	4b06      	ldr	r3, [pc, #24]	; (8006580 <scalbn+0xe8>)
 8006566:	e7b2      	b.n	80064ce <scalbn+0x36>
 8006568:	c2f8f359 	.word	0xc2f8f359
 800656c:	01a56e1f 	.word	0x01a56e1f
 8006570:	8800759c 	.word	0x8800759c
 8006574:	7e37e43c 	.word	0x7e37e43c
 8006578:	43500000 	.word	0x43500000
 800657c:	ffff3cb0 	.word	0xffff3cb0
 8006580:	3c900000 	.word	0x3c900000
 8006584:	00000000 	.word	0x00000000

08006588 <__ieee754_log>:
 8006588:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800658c:	ec51 0b10 	vmov	r0, r1, d0
 8006590:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006594:	b087      	sub	sp, #28
 8006596:	460d      	mov	r5, r1
 8006598:	da27      	bge.n	80065ea <__ieee754_log+0x62>
 800659a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800659e:	4303      	orrs	r3, r0
 80065a0:	ee10 2a10 	vmov	r2, s0
 80065a4:	d10a      	bne.n	80065bc <__ieee754_log+0x34>
 80065a6:	49cc      	ldr	r1, [pc, #816]	; (80068d8 <__ieee754_log+0x350>)
 80065a8:	2200      	movs	r2, #0
 80065aa:	2300      	movs	r3, #0
 80065ac:	2000      	movs	r0, #0
 80065ae:	f7fa f945 	bl	800083c <__aeabi_ddiv>
 80065b2:	ec41 0b10 	vmov	d0, r0, r1
 80065b6:	b007      	add	sp, #28
 80065b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80065bc:	2900      	cmp	r1, #0
 80065be:	da05      	bge.n	80065cc <__ieee754_log+0x44>
 80065c0:	460b      	mov	r3, r1
 80065c2:	f7f9 fe59 	bl	8000278 <__aeabi_dsub>
 80065c6:	2200      	movs	r2, #0
 80065c8:	2300      	movs	r3, #0
 80065ca:	e7f0      	b.n	80065ae <__ieee754_log+0x26>
 80065cc:	4bc3      	ldr	r3, [pc, #780]	; (80068dc <__ieee754_log+0x354>)
 80065ce:	2200      	movs	r2, #0
 80065d0:	f7fa f80a 	bl	80005e8 <__aeabi_dmul>
 80065d4:	f06f 0335 	mvn.w	r3, #53	; 0x35
 80065d8:	460d      	mov	r5, r1
 80065da:	4ac1      	ldr	r2, [pc, #772]	; (80068e0 <__ieee754_log+0x358>)
 80065dc:	4295      	cmp	r5, r2
 80065de:	dd06      	ble.n	80065ee <__ieee754_log+0x66>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	f7f9 fe4a 	bl	800027c <__adddf3>
 80065e8:	e7e3      	b.n	80065b2 <__ieee754_log+0x2a>
 80065ea:	2300      	movs	r3, #0
 80065ec:	e7f5      	b.n	80065da <__ieee754_log+0x52>
 80065ee:	152c      	asrs	r4, r5, #20
 80065f0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80065f4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80065f8:	441c      	add	r4, r3
 80065fa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80065fe:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 8006602:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006606:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 800660a:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800660e:	ea42 0105 	orr.w	r1, r2, r5
 8006612:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 8006616:	2200      	movs	r2, #0
 8006618:	4bb2      	ldr	r3, [pc, #712]	; (80068e4 <__ieee754_log+0x35c>)
 800661a:	f7f9 fe2d 	bl	8000278 <__aeabi_dsub>
 800661e:	1cab      	adds	r3, r5, #2
 8006620:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006624:	2b02      	cmp	r3, #2
 8006626:	4682      	mov	sl, r0
 8006628:	468b      	mov	fp, r1
 800662a:	f04f 0200 	mov.w	r2, #0
 800662e:	dc53      	bgt.n	80066d8 <__ieee754_log+0x150>
 8006630:	2300      	movs	r3, #0
 8006632:	f7fa fa41 	bl	8000ab8 <__aeabi_dcmpeq>
 8006636:	b1d0      	cbz	r0, 800666e <__ieee754_log+0xe6>
 8006638:	2c00      	cmp	r4, #0
 800663a:	f000 8120 	beq.w	800687e <__ieee754_log+0x2f6>
 800663e:	4620      	mov	r0, r4
 8006640:	f7f9 ff68 	bl	8000514 <__aeabi_i2d>
 8006644:	a390      	add	r3, pc, #576	; (adr r3, 8006888 <__ieee754_log+0x300>)
 8006646:	e9d3 2300 	ldrd	r2, r3, [r3]
 800664a:	4606      	mov	r6, r0
 800664c:	460f      	mov	r7, r1
 800664e:	f7f9 ffcb 	bl	80005e8 <__aeabi_dmul>
 8006652:	a38f      	add	r3, pc, #572	; (adr r3, 8006890 <__ieee754_log+0x308>)
 8006654:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006658:	4604      	mov	r4, r0
 800665a:	460d      	mov	r5, r1
 800665c:	4630      	mov	r0, r6
 800665e:	4639      	mov	r1, r7
 8006660:	f7f9 ffc2 	bl	80005e8 <__aeabi_dmul>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	4620      	mov	r0, r4
 800666a:	4629      	mov	r1, r5
 800666c:	e7ba      	b.n	80065e4 <__ieee754_log+0x5c>
 800666e:	a38a      	add	r3, pc, #552	; (adr r3, 8006898 <__ieee754_log+0x310>)
 8006670:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006674:	4650      	mov	r0, sl
 8006676:	4659      	mov	r1, fp
 8006678:	f7f9 ffb6 	bl	80005e8 <__aeabi_dmul>
 800667c:	4602      	mov	r2, r0
 800667e:	460b      	mov	r3, r1
 8006680:	2000      	movs	r0, #0
 8006682:	4999      	ldr	r1, [pc, #612]	; (80068e8 <__ieee754_log+0x360>)
 8006684:	f7f9 fdf8 	bl	8000278 <__aeabi_dsub>
 8006688:	4652      	mov	r2, sl
 800668a:	4606      	mov	r6, r0
 800668c:	460f      	mov	r7, r1
 800668e:	465b      	mov	r3, fp
 8006690:	4650      	mov	r0, sl
 8006692:	4659      	mov	r1, fp
 8006694:	f7f9 ffa8 	bl	80005e8 <__aeabi_dmul>
 8006698:	4602      	mov	r2, r0
 800669a:	460b      	mov	r3, r1
 800669c:	4630      	mov	r0, r6
 800669e:	4639      	mov	r1, r7
 80066a0:	f7f9 ffa2 	bl	80005e8 <__aeabi_dmul>
 80066a4:	4606      	mov	r6, r0
 80066a6:	460f      	mov	r7, r1
 80066a8:	b914      	cbnz	r4, 80066b0 <__ieee754_log+0x128>
 80066aa:	4632      	mov	r2, r6
 80066ac:	463b      	mov	r3, r7
 80066ae:	e0a0      	b.n	80067f2 <__ieee754_log+0x26a>
 80066b0:	4620      	mov	r0, r4
 80066b2:	f7f9 ff2f 	bl	8000514 <__aeabi_i2d>
 80066b6:	a374      	add	r3, pc, #464	; (adr r3, 8006888 <__ieee754_log+0x300>)
 80066b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066bc:	4680      	mov	r8, r0
 80066be:	4689      	mov	r9, r1
 80066c0:	f7f9 ff92 	bl	80005e8 <__aeabi_dmul>
 80066c4:	a372      	add	r3, pc, #456	; (adr r3, 8006890 <__ieee754_log+0x308>)
 80066c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ca:	4604      	mov	r4, r0
 80066cc:	460d      	mov	r5, r1
 80066ce:	4640      	mov	r0, r8
 80066d0:	4649      	mov	r1, r9
 80066d2:	f7f9 ff89 	bl	80005e8 <__aeabi_dmul>
 80066d6:	e0a5      	b.n	8006824 <__ieee754_log+0x29c>
 80066d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80066dc:	f7f9 fdce 	bl	800027c <__adddf3>
 80066e0:	4602      	mov	r2, r0
 80066e2:	460b      	mov	r3, r1
 80066e4:	4650      	mov	r0, sl
 80066e6:	4659      	mov	r1, fp
 80066e8:	f7fa f8a8 	bl	800083c <__aeabi_ddiv>
 80066ec:	e9cd 0100 	strd	r0, r1, [sp]
 80066f0:	4620      	mov	r0, r4
 80066f2:	f7f9 ff0f 	bl	8000514 <__aeabi_i2d>
 80066f6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80066fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066fe:	4610      	mov	r0, r2
 8006700:	4619      	mov	r1, r3
 8006702:	f7f9 ff71 	bl	80005e8 <__aeabi_dmul>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800670e:	f7f9 ff6b 	bl	80005e8 <__aeabi_dmul>
 8006712:	a363      	add	r3, pc, #396	; (adr r3, 80068a0 <__ieee754_log+0x318>)
 8006714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006718:	4680      	mov	r8, r0
 800671a:	4689      	mov	r9, r1
 800671c:	f7f9 ff64 	bl	80005e8 <__aeabi_dmul>
 8006720:	a361      	add	r3, pc, #388	; (adr r3, 80068a8 <__ieee754_log+0x320>)
 8006722:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006726:	f7f9 fda9 	bl	800027c <__adddf3>
 800672a:	4642      	mov	r2, r8
 800672c:	464b      	mov	r3, r9
 800672e:	f7f9 ff5b 	bl	80005e8 <__aeabi_dmul>
 8006732:	a35f      	add	r3, pc, #380	; (adr r3, 80068b0 <__ieee754_log+0x328>)
 8006734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006738:	f7f9 fda0 	bl	800027c <__adddf3>
 800673c:	4642      	mov	r2, r8
 800673e:	464b      	mov	r3, r9
 8006740:	f7f9 ff52 	bl	80005e8 <__aeabi_dmul>
 8006744:	a35c      	add	r3, pc, #368	; (adr r3, 80068b8 <__ieee754_log+0x330>)
 8006746:	e9d3 2300 	ldrd	r2, r3, [r3]
 800674a:	f7f9 fd97 	bl	800027c <__adddf3>
 800674e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006752:	f7f9 ff49 	bl	80005e8 <__aeabi_dmul>
 8006756:	a35a      	add	r3, pc, #360	; (adr r3, 80068c0 <__ieee754_log+0x338>)
 8006758:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006760:	4640      	mov	r0, r8
 8006762:	4649      	mov	r1, r9
 8006764:	f7f9 ff40 	bl	80005e8 <__aeabi_dmul>
 8006768:	a357      	add	r3, pc, #348	; (adr r3, 80068c8 <__ieee754_log+0x340>)
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	f7f9 fd85 	bl	800027c <__adddf3>
 8006772:	4642      	mov	r2, r8
 8006774:	464b      	mov	r3, r9
 8006776:	f7f9 ff37 	bl	80005e8 <__aeabi_dmul>
 800677a:	a355      	add	r3, pc, #340	; (adr r3, 80068d0 <__ieee754_log+0x348>)
 800677c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006780:	f7f9 fd7c 	bl	800027c <__adddf3>
 8006784:	4642      	mov	r2, r8
 8006786:	464b      	mov	r3, r9
 8006788:	f7f9 ff2e 	bl	80005e8 <__aeabi_dmul>
 800678c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8006790:	4602      	mov	r2, r0
 8006792:	460b      	mov	r3, r1
 8006794:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8006798:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800679c:	f7f9 fd6e 	bl	800027c <__adddf3>
 80067a0:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 80067a4:	3551      	adds	r5, #81	; 0x51
 80067a6:	4335      	orrs	r5, r6
 80067a8:	2d00      	cmp	r5, #0
 80067aa:	4680      	mov	r8, r0
 80067ac:	4689      	mov	r9, r1
 80067ae:	dd48      	ble.n	8006842 <__ieee754_log+0x2ba>
 80067b0:	2200      	movs	r2, #0
 80067b2:	4b4d      	ldr	r3, [pc, #308]	; (80068e8 <__ieee754_log+0x360>)
 80067b4:	4650      	mov	r0, sl
 80067b6:	4659      	mov	r1, fp
 80067b8:	f7f9 ff16 	bl	80005e8 <__aeabi_dmul>
 80067bc:	4652      	mov	r2, sl
 80067be:	465b      	mov	r3, fp
 80067c0:	f7f9 ff12 	bl	80005e8 <__aeabi_dmul>
 80067c4:	4602      	mov	r2, r0
 80067c6:	460b      	mov	r3, r1
 80067c8:	4606      	mov	r6, r0
 80067ca:	460f      	mov	r7, r1
 80067cc:	4640      	mov	r0, r8
 80067ce:	4649      	mov	r1, r9
 80067d0:	f7f9 fd54 	bl	800027c <__adddf3>
 80067d4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80067d8:	f7f9 ff06 	bl	80005e8 <__aeabi_dmul>
 80067dc:	4680      	mov	r8, r0
 80067de:	4689      	mov	r9, r1
 80067e0:	b964      	cbnz	r4, 80067fc <__ieee754_log+0x274>
 80067e2:	4602      	mov	r2, r0
 80067e4:	460b      	mov	r3, r1
 80067e6:	4630      	mov	r0, r6
 80067e8:	4639      	mov	r1, r7
 80067ea:	f7f9 fd45 	bl	8000278 <__aeabi_dsub>
 80067ee:	4602      	mov	r2, r0
 80067f0:	460b      	mov	r3, r1
 80067f2:	4650      	mov	r0, sl
 80067f4:	4659      	mov	r1, fp
 80067f6:	f7f9 fd3f 	bl	8000278 <__aeabi_dsub>
 80067fa:	e6da      	b.n	80065b2 <__ieee754_log+0x2a>
 80067fc:	a322      	add	r3, pc, #136	; (adr r3, 8006888 <__ieee754_log+0x300>)
 80067fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006802:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006806:	f7f9 feef 	bl	80005e8 <__aeabi_dmul>
 800680a:	a321      	add	r3, pc, #132	; (adr r3, 8006890 <__ieee754_log+0x308>)
 800680c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006810:	4604      	mov	r4, r0
 8006812:	460d      	mov	r5, r1
 8006814:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006818:	f7f9 fee6 	bl	80005e8 <__aeabi_dmul>
 800681c:	4642      	mov	r2, r8
 800681e:	464b      	mov	r3, r9
 8006820:	f7f9 fd2c 	bl	800027c <__adddf3>
 8006824:	4602      	mov	r2, r0
 8006826:	460b      	mov	r3, r1
 8006828:	4630      	mov	r0, r6
 800682a:	4639      	mov	r1, r7
 800682c:	f7f9 fd24 	bl	8000278 <__aeabi_dsub>
 8006830:	4652      	mov	r2, sl
 8006832:	465b      	mov	r3, fp
 8006834:	f7f9 fd20 	bl	8000278 <__aeabi_dsub>
 8006838:	4602      	mov	r2, r0
 800683a:	460b      	mov	r3, r1
 800683c:	4620      	mov	r0, r4
 800683e:	4629      	mov	r1, r5
 8006840:	e7d9      	b.n	80067f6 <__ieee754_log+0x26e>
 8006842:	4602      	mov	r2, r0
 8006844:	460b      	mov	r3, r1
 8006846:	4650      	mov	r0, sl
 8006848:	4659      	mov	r1, fp
 800684a:	f7f9 fd15 	bl	8000278 <__aeabi_dsub>
 800684e:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006852:	f7f9 fec9 	bl	80005e8 <__aeabi_dmul>
 8006856:	4606      	mov	r6, r0
 8006858:	460f      	mov	r7, r1
 800685a:	2c00      	cmp	r4, #0
 800685c:	f43f af25 	beq.w	80066aa <__ieee754_log+0x122>
 8006860:	a309      	add	r3, pc, #36	; (adr r3, 8006888 <__ieee754_log+0x300>)
 8006862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006866:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800686a:	f7f9 febd 	bl	80005e8 <__aeabi_dmul>
 800686e:	a308      	add	r3, pc, #32	; (adr r3, 8006890 <__ieee754_log+0x308>)
 8006870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006874:	4604      	mov	r4, r0
 8006876:	460d      	mov	r5, r1
 8006878:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800687c:	e729      	b.n	80066d2 <__ieee754_log+0x14a>
 800687e:	2000      	movs	r0, #0
 8006880:	2100      	movs	r1, #0
 8006882:	e696      	b.n	80065b2 <__ieee754_log+0x2a>
 8006884:	f3af 8000 	nop.w
 8006888:	fee00000 	.word	0xfee00000
 800688c:	3fe62e42 	.word	0x3fe62e42
 8006890:	35793c76 	.word	0x35793c76
 8006894:	3dea39ef 	.word	0x3dea39ef
 8006898:	55555555 	.word	0x55555555
 800689c:	3fd55555 	.word	0x3fd55555
 80068a0:	df3e5244 	.word	0xdf3e5244
 80068a4:	3fc2f112 	.word	0x3fc2f112
 80068a8:	96cb03de 	.word	0x96cb03de
 80068ac:	3fc74664 	.word	0x3fc74664
 80068b0:	94229359 	.word	0x94229359
 80068b4:	3fd24924 	.word	0x3fd24924
 80068b8:	55555593 	.word	0x55555593
 80068bc:	3fe55555 	.word	0x3fe55555
 80068c0:	d078c69f 	.word	0xd078c69f
 80068c4:	3fc39a09 	.word	0x3fc39a09
 80068c8:	1d8e78af 	.word	0x1d8e78af
 80068cc:	3fcc71c5 	.word	0x3fcc71c5
 80068d0:	9997fa04 	.word	0x9997fa04
 80068d4:	3fd99999 	.word	0x3fd99999
 80068d8:	c3500000 	.word	0xc3500000
 80068dc:	43500000 	.word	0x43500000
 80068e0:	7fefffff 	.word	0x7fefffff
 80068e4:	3ff00000 	.word	0x3ff00000
 80068e8:	3fe00000 	.word	0x3fe00000

080068ec <copysign>:
 80068ec:	ec51 0b10 	vmov	r0, r1, d0
 80068f0:	ee11 0a90 	vmov	r0, s3
 80068f4:	ee10 2a10 	vmov	r2, s0
 80068f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80068fc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006900:	ea41 0300 	orr.w	r3, r1, r0
 8006904:	ec43 2b10 	vmov	d0, r2, r3
 8006908:	4770      	bx	lr
	...

0800690c <_init>:
 800690c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800690e:	bf00      	nop
 8006910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006912:	bc08      	pop	{r3}
 8006914:	469e      	mov	lr, r3
 8006916:	4770      	bx	lr

08006918 <_fini>:
 8006918:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800691a:	bf00      	nop
 800691c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800691e:	bc08      	pop	{r3}
 8006920:	469e      	mov	lr, r3
 8006922:	4770      	bx	lr
