
F303_ADC_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005524  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  080056b4  080056b4  000156b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800572c  0800572c  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800572c  0800572c  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800572c  0800572c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800572c  0800572c  0001572c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005730  08005730  00015730  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005734  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000f4  20000074  080057a8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080057a8  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f98b  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001f13  00000000  00000000  0002fa2f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000007e8  00000000  00000000  00031948  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000710  00000000  00000000  00032130  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00018aaa  00000000  00000000  00032840  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009389  00000000  00000000  0004b2ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00086fa3  00000000  00000000  00054673  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000db616  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025a4  00000000  00000000  000db694  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800569c 	.word	0x0800569c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	0800569c 	.word	0x0800569c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__gedf2>:
 8000a0c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a10:	e006      	b.n	8000a20 <__cmpdf2+0x4>
 8000a12:	bf00      	nop

08000a14 <__ledf2>:
 8000a14:	f04f 0c01 	mov.w	ip, #1
 8000a18:	e002      	b.n	8000a20 <__cmpdf2+0x4>
 8000a1a:	bf00      	nop

08000a1c <__cmpdf2>:
 8000a1c:	f04f 0c01 	mov.w	ip, #1
 8000a20:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a24:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a28:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a36:	d01b      	beq.n	8000a70 <__cmpdf2+0x54>
 8000a38:	b001      	add	sp, #4
 8000a3a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a3e:	bf0c      	ite	eq
 8000a40:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a44:	ea91 0f03 	teqne	r1, r3
 8000a48:	bf02      	ittt	eq
 8000a4a:	ea90 0f02 	teqeq	r0, r2
 8000a4e:	2000      	moveq	r0, #0
 8000a50:	4770      	bxeq	lr
 8000a52:	f110 0f00 	cmn.w	r0, #0
 8000a56:	ea91 0f03 	teq	r1, r3
 8000a5a:	bf58      	it	pl
 8000a5c:	4299      	cmppl	r1, r3
 8000a5e:	bf08      	it	eq
 8000a60:	4290      	cmpeq	r0, r2
 8000a62:	bf2c      	ite	cs
 8000a64:	17d8      	asrcs	r0, r3, #31
 8000a66:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a6a:	f040 0001 	orr.w	r0, r0, #1
 8000a6e:	4770      	bx	lr
 8000a70:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a78:	d102      	bne.n	8000a80 <__cmpdf2+0x64>
 8000a7a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a7e:	d107      	bne.n	8000a90 <__cmpdf2+0x74>
 8000a80:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d1d6      	bne.n	8000a38 <__cmpdf2+0x1c>
 8000a8a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a8e:	d0d3      	beq.n	8000a38 <__cmpdf2+0x1c>
 8000a90:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a94:	4770      	bx	lr
 8000a96:	bf00      	nop

08000a98 <__aeabi_cdrcmple>:
 8000a98:	4684      	mov	ip, r0
 8000a9a:	4610      	mov	r0, r2
 8000a9c:	4662      	mov	r2, ip
 8000a9e:	468c      	mov	ip, r1
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4663      	mov	r3, ip
 8000aa4:	e000      	b.n	8000aa8 <__aeabi_cdcmpeq>
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdcmpeq>:
 8000aa8:	b501      	push	{r0, lr}
 8000aaa:	f7ff ffb7 	bl	8000a1c <__cmpdf2>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	bf48      	it	mi
 8000ab2:	f110 0f00 	cmnmi.w	r0, #0
 8000ab6:	bd01      	pop	{r0, pc}

08000ab8 <__aeabi_dcmpeq>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff fff4 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ac0:	bf0c      	ite	eq
 8000ac2:	2001      	moveq	r0, #1
 8000ac4:	2000      	movne	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_dcmplt>:
 8000acc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ad0:	f7ff ffea 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ad4:	bf34      	ite	cc
 8000ad6:	2001      	movcc	r0, #1
 8000ad8:	2000      	movcs	r0, #0
 8000ada:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ade:	bf00      	nop

08000ae0 <__aeabi_dcmple>:
 8000ae0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae4:	f7ff ffe0 	bl	8000aa8 <__aeabi_cdcmpeq>
 8000ae8:	bf94      	ite	ls
 8000aea:	2001      	movls	r0, #1
 8000aec:	2000      	movhi	r0, #0
 8000aee:	f85d fb08 	ldr.w	pc, [sp], #8
 8000af2:	bf00      	nop

08000af4 <__aeabi_dcmpge>:
 8000af4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af8:	f7ff ffce 	bl	8000a98 <__aeabi_cdrcmple>
 8000afc:	bf94      	ite	ls
 8000afe:	2001      	movls	r0, #1
 8000b00:	2000      	movhi	r0, #0
 8000b02:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b06:	bf00      	nop

08000b08 <__aeabi_dcmpgt>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff ffc4 	bl	8000a98 <__aeabi_cdrcmple>
 8000b10:	bf34      	ite	cc
 8000b12:	2001      	movcc	r0, #1
 8000b14:	2000      	movcs	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmpun>:
 8000b1c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b24:	d102      	bne.n	8000b2c <__aeabi_dcmpun+0x10>
 8000b26:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b2a:	d10a      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b2c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x20>
 8000b36:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_dcmpun+0x26>
 8000b3c:	f04f 0000 	mov.w	r0, #0
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0001 	mov.w	r0, #1
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2uiz>:
 8000b48:	004a      	lsls	r2, r1, #1
 8000b4a:	d211      	bcs.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b4c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b50:	d211      	bcs.n	8000b76 <__aeabi_d2uiz+0x2e>
 8000b52:	d50d      	bpl.n	8000b70 <__aeabi_d2uiz+0x28>
 8000b54:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b58:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b5c:	d40e      	bmi.n	8000b7c <__aeabi_d2uiz+0x34>
 8000b5e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b62:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b66:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b6a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b6e:	4770      	bx	lr
 8000b70:	f04f 0000 	mov.w	r0, #0
 8000b74:	4770      	bx	lr
 8000b76:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_d2uiz+0x3a>
 8000b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0000 	mov.w	r0, #0
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2f>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b90:	bf24      	itt	cs
 8000b92:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b96:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b9a:	d90d      	bls.n	8000bb8 <__aeabi_d2f+0x30>
 8000b9c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ba0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ba4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ba8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bac:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bb0:	bf08      	it	eq
 8000bb2:	f020 0001 	biceq.w	r0, r0, #1
 8000bb6:	4770      	bx	lr
 8000bb8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bbc:	d121      	bne.n	8000c02 <__aeabi_d2f+0x7a>
 8000bbe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bc2:	bfbc      	itt	lt
 8000bc4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bc8:	4770      	bxlt	lr
 8000bca:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bce:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bd2:	f1c2 0218 	rsb	r2, r2, #24
 8000bd6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bda:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bde:	fa20 f002 	lsr.w	r0, r0, r2
 8000be2:	bf18      	it	ne
 8000be4:	f040 0001 	orrne.w	r0, r0, #1
 8000be8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bec:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bf0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bf4:	ea40 000c 	orr.w	r0, r0, ip
 8000bf8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bfc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c00:	e7cc      	b.n	8000b9c <__aeabi_d2f+0x14>
 8000c02:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c06:	d107      	bne.n	8000c18 <__aeabi_d2f+0x90>
 8000c08:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c0c:	bf1e      	ittt	ne
 8000c0e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c12:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c16:	4770      	bxne	lr
 8000c18:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c1c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c20:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c24:	4770      	bx	lr
 8000c26:	bf00      	nop

08000c28 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_Init+0x28>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_Init+0x28>)
 8000c32:	f043 0310 	orr.w	r3, r3, #16
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f001 f971 	bl	8001f20 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	2000      	movs	r0, #0
 8000c40:	f000 f808 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f003 fbea 	bl	800441c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40022000 	.word	0x40022000

08000c54 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x54>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x58>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f001 f97b 	bl	8001f6e <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00e      	b.n	8000ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d80a      	bhi.n	8000c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f001 f951 	bl	8001f36 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <HAL_InitTick+0x5c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000008 	.word	0x20000008
 8000cac:	20000004 	.word	0x20000004
 8000cb0:	20000000 	.word	0x20000000

08000cb4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000004 	.word	0x20000004
 8000cd8:	2000009c 	.word	0x2000009c

08000cdc <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;  
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	2000009c 	.word	0x2000009c

08000cf4 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff ffee 	bl	8000cdc <HAL_GetTick>
 8000d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d005      	beq.n	8000d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0e:	4b09      	ldr	r3, [pc, #36]	; (8000d34 <HAL_Delay+0x40>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000d1a:	bf00      	nop
 8000d1c:	f7ff ffde 	bl	8000cdc <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8f7      	bhi.n	8000d1c <HAL_Delay+0x28>
  {
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	3710      	adds	r7, #16
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20000004 	.word	0x20000004

08000d38 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b09c      	sub	sp, #112	; 0x70
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d40:	2300      	movs	r3, #0
 8000d42:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 8000d46:	2300      	movs	r3, #0
 8000d48:	66bb      	str	r3, [r7, #104]	; 0x68
  __IO uint32_t wait_loop_index = 0U;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d101      	bne.n	8000d58 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8000d54:	2301      	movs	r3, #1
 8000d56:	e170      	b.n	800103a <HAL_ADC_Init+0x302>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	691b      	ldr	r3, [r3, #16]
 8000d5c:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d62:	f003 0310 	and.w	r3, r3, #16
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d176      	bne.n	8000e58 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d6e:	2b00      	cmp	r3, #0
 8000d70:	d152      	bne.n	8000e18 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	2200      	movs	r2, #0
 8000d76:	649a      	str	r2, [r3, #72]	; 0x48
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	651a      	str	r2, [r3, #80]	; 0x50
      hadc->InjectionConfig.ContextQueue = 0U;
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	2200      	movs	r2, #0
 8000d82:	64da      	str	r2, [r3, #76]	; 0x4c
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Init the low level hardware */
      HAL_ADC_MspInit(hadc);
 8000d8c:	6878      	ldr	r0, [r7, #4]
 8000d8e:	f003 fb69 	bl	8004464 <HAL_ADC_MspInit>
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8000d92:	687b      	ldr	r3, [r7, #4]
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	689b      	ldr	r3, [r3, #8]
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d13b      	bne.n	8000e18 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f000 fefd 	bl	8001ba0 <ADC_Disable>
 8000da6:	4603      	mov	r3, r0
 8000da8:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000db0:	f003 0310 	and.w	r3, r3, #16
 8000db4:	2b00      	cmp	r3, #0
 8000db6:	d12f      	bne.n	8000e18 <HAL_ADC_Init+0xe0>
 8000db8:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d12b      	bne.n	8000e18 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000dc8:	f023 0302 	bic.w	r3, r3, #2
 8000dcc:	f043 0202 	orr.w	r2, r3, #2
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	645a      	str	r2, [r3, #68]	; 0x44
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	689a      	ldr	r2, [r3, #8]
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000de2:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	689a      	ldr	r2, [r3, #8]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000df2:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000df4:	4b93      	ldr	r3, [pc, #588]	; (8001044 <HAL_ADC_Init+0x30c>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a93      	ldr	r2, [pc, #588]	; (8001048 <HAL_ADC_Init+0x310>)
 8000dfa:	fba2 2303 	umull	r2, r3, r2, r3
 8000dfe:	0c9a      	lsrs	r2, r3, #18
 8000e00:	4613      	mov	r3, r2
 8000e02:	009b      	lsls	r3, r3, #2
 8000e04:	4413      	add	r3, r2
 8000e06:	005b      	lsls	r3, r3, #1
 8000e08:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000e0a:	e002      	b.n	8000e12 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	3b01      	subs	r3, #1
 8000e10:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d1f9      	bne.n	8000e0c <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	689b      	ldr	r3, [r3, #8]
 8000e1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d007      	beq.n	8000e36 <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8000e30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8000e34:	d110      	bne.n	8000e58 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000e36:	687b      	ldr	r3, [r7, #4]
 8000e38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e3a:	f023 0312 	bic.w	r3, r3, #18
 8000e3e:	f043 0210 	orr.w	r2, r3, #16
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000e4a:	f043 0201 	orr.w	r2, r3, #1
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	649a      	str	r2, [r3, #72]	; 0x48
      
      tmp_hal_status = HAL_ERROR;
 8000e52:	2301      	movs	r3, #1
 8000e54:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5c:	f003 0310 	and.w	r3, r3, #16
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	f040 80dd 	bne.w	8001020 <HAL_ADC_Init+0x2e8>
 8000e66:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	f040 80d8 	bne.w	8001020 <HAL_ADC_Init+0x2e8>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8000e70:	687b      	ldr	r3, [r7, #4]
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	689b      	ldr	r3, [r3, #8]
 8000e76:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	f040 80d0 	bne.w	8001020 <HAL_ADC_Init+0x2e8>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e84:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8000e88:	f043 0202 	orr.w	r2, r3, #2
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	645a      	str	r2, [r3, #68]	; 0x44
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e90:	4b6e      	ldr	r3, [pc, #440]	; (800104c <HAL_ADC_Init+0x314>)
 8000e92:	667b      	str	r3, [r7, #100]	; 0x64
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000e9c:	d102      	bne.n	8000ea4 <HAL_ADC_Init+0x16c>
 8000e9e:	4b6c      	ldr	r3, [pc, #432]	; (8001050 <HAL_ADC_Init+0x318>)
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	e002      	b.n	8000eaa <HAL_ADC_Init+0x172>
 8000ea4:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8000ea8:	613b      	str	r3, [r7, #16]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 0303 	and.w	r3, r3, #3
 8000eb4:	2b01      	cmp	r3, #1
 8000eb6:	d108      	bne.n	8000eca <HAL_ADC_Init+0x192>
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	f003 0301 	and.w	r3, r3, #1
 8000ec2:	2b01      	cmp	r3, #1
 8000ec4:	d101      	bne.n	8000eca <HAL_ADC_Init+0x192>
 8000ec6:	2301      	movs	r3, #1
 8000ec8:	e000      	b.n	8000ecc <HAL_ADC_Init+0x194>
 8000eca:	2300      	movs	r3, #0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d11c      	bne.n	8000f0a <HAL_ADC_Init+0x1d2>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ed0:	693b      	ldr	r3, [r7, #16]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d010      	beq.n	8000ef8 <HAL_ADC_Init+0x1c0>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8000ed6:	693b      	ldr	r3, [r7, #16]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 0303 	and.w	r3, r3, #3
 8000ede:	2b01      	cmp	r3, #1
 8000ee0:	d107      	bne.n	8000ef2 <HAL_ADC_Init+0x1ba>
 8000ee2:	693b      	ldr	r3, [r7, #16]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f003 0301 	and.w	r3, r3, #1
 8000eea:	2b01      	cmp	r3, #1
 8000eec:	d101      	bne.n	8000ef2 <HAL_ADC_Init+0x1ba>
 8000eee:	2301      	movs	r3, #1
 8000ef0:	e000      	b.n	8000ef4 <HAL_ADC_Init+0x1bc>
 8000ef2:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8000ef4:	2b00      	cmp	r3, #0
 8000ef6:	d108      	bne.n	8000f0a <HAL_ADC_Init+0x1d2>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8000ef8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000efa:	689b      	ldr	r3, [r3, #8]
 8000efc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	685b      	ldr	r3, [r3, #4]
 8000f04:	431a      	orrs	r2, r3
 8000f06:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8000f08:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS(hadc->Init.ContinuousConvMode) |
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	69db      	ldr	r3, [r3, #28]
 8000f0e:	035b      	lsls	r3, r3, #13
 8000f10:	687a      	ldr	r2, [r7, #4]
 8000f12:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8000f14:	2a01      	cmp	r2, #1
 8000f16:	d002      	beq.n	8000f1e <HAL_ADC_Init+0x1e6>
 8000f18:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000f1c:	e000      	b.n	8000f20 <HAL_ADC_Init+0x1e8>
 8000f1e:	2200      	movs	r2, #0
 8000f20:	431a      	orrs	r2, r3
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	68db      	ldr	r3, [r3, #12]
 8000f26:	431a      	orrs	r2, r3
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	689b      	ldr	r3, [r3, #8]
 8000f2c:	4313      	orrs	r3, r2
 8000f2e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f30:	4313      	orrs	r3, r2
 8000f32:	66bb      	str	r3, [r7, #104]	; 0x68
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	2b01      	cmp	r3, #1
 8000f3a:	d11b      	bne.n	8000f74 <HAL_ADC_Init+0x23c>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	69db      	ldr	r3, [r3, #28]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d109      	bne.n	8000f58 <HAL_ADC_Init+0x220>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f48:	3b01      	subs	r3, #1
 8000f4a:	045a      	lsls	r2, r3, #17
 8000f4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8000f4e:	4313      	orrs	r3, r2
 8000f50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f54:	66bb      	str	r3, [r7, #104]	; 0x68
 8000f56:	e00d      	b.n	8000f74 <HAL_ADC_Init+0x23c>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f5c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8000f60:	f043 0220 	orr.w	r2, r3, #32
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	645a      	str	r2, [r3, #68]	; 0x44
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f6c:	f043 0201 	orr.w	r2, r3, #1
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	649a      	str	r2, [r3, #72]	; 0x48
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d007      	beq.n	8000f8c <HAL_ADC_Init+0x254>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f84:	4313      	orrs	r3, r2
 8000f86:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000f88:	4313      	orrs	r3, r2
 8000f8a:	66bb      	str	r3, [r7, #104]	; 0x68
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d113      	bne.n	8000fc2 <HAL_ADC_Init+0x28a>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	68db      	ldr	r3, [r3, #12]
 8000fa0:	687a      	ldr	r2, [r7, #4]
 8000fa2:	6812      	ldr	r2, [r2, #0]
 8000fa4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000fa8:	f023 0302 	bic.w	r3, r3, #2
 8000fac:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT(hadc->Init.LowPowerAutoWait)       |
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	699b      	ldr	r3, [r3, #24]
 8000fb2:	039a      	lsls	r2, r3, #14
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fb8:	005b      	lsls	r3, r3, #1
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8000fbe:	4313      	orrs	r3, r2
 8000fc0:	66bb      	str	r3, [r7, #104]	; 0x68
                       ADC_CFGR_DMACONTREQ(hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	68da      	ldr	r2, [r3, #12]
 8000fc8:	4b22      	ldr	r3, [pc, #136]	; (8001054 <HAL_ADC_Init+0x31c>)
 8000fca:	4013      	ands	r3, r2
 8000fcc:	687a      	ldr	r2, [r7, #4]
 8000fce:	6812      	ldr	r2, [r2, #0]
 8000fd0:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8000fd2:	430b      	orrs	r3, r1
 8000fd4:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	691b      	ldr	r3, [r3, #16]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d10c      	bne.n	8000ff8 <HAL_ADC_Init+0x2c0>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe4:	f023 010f 	bic.w	r1, r3, #15
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a1b      	ldr	r3, [r3, #32]
 8000fec:	1e5a      	subs	r2, r3, #1
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	430a      	orrs	r2, r1
 8000ff4:	631a      	str	r2, [r3, #48]	; 0x30
 8000ff6:	e007      	b.n	8001008 <HAL_ADC_Init+0x2d0>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	f022 020f 	bic.w	r2, r2, #15
 8001006:	631a      	str	r2, [r3, #48]	; 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	2200      	movs	r2, #0
 800100c:	649a      	str	r2, [r3, #72]	; 0x48
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001012:	f023 0303 	bic.w	r3, r3, #3
 8001016:	f043 0201 	orr.w	r2, r3, #1
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	645a      	str	r2, [r3, #68]	; 0x44
 800101e:	e00a      	b.n	8001036 <HAL_ADC_Init+0x2fe>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001024:	f023 0312 	bic.w	r3, r3, #18
 8001028:	f043 0210 	orr.w	r2, r3, #16
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	645a      	str	r2, [r3, #68]	; 0x44
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001030:	2301      	movs	r3, #1
 8001032:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001036:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 800103a:	4618      	mov	r0, r3
 800103c:	3770      	adds	r7, #112	; 0x70
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000008 	.word	0x20000008
 8001048:	431bde83 	.word	0x431bde83
 800104c:	50000300 	.word	0x50000300
 8001050:	50000100 	.word	0x50000100
 8001054:	fff0c007 	.word	0xfff0c007

08001058 <HAL_ADC_Start>:
  *         if ADC is master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8001058:	b580      	push	{r7, lr}
 800105a:	b084      	sub	sp, #16
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001060:	2300      	movs	r3, #0
 8001062:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	689b      	ldr	r3, [r3, #8]
 800106a:	f003 0304 	and.w	r3, r3, #4
 800106e:	2b00      	cmp	r3, #0
 8001070:	f040 809c 	bne.w	80011ac <HAL_ADC_Start+0x154>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800107a:	2b01      	cmp	r3, #1
 800107c:	d101      	bne.n	8001082 <HAL_ADC_Start+0x2a>
 800107e:	2302      	movs	r3, #2
 8001080:	e097      	b.n	80011b2 <HAL_ADC_Start+0x15a>
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2201      	movs	r2, #1
 8001086:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 800108a:	6878      	ldr	r0, [r7, #4]
 800108c:	f000 fd2a 	bl	8001ae4 <ADC_Enable>
 8001090:	4603      	mov	r3, r0
 8001092:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001094:	7bfb      	ldrb	r3, [r7, #15]
 8001096:	2b00      	cmp	r3, #0
 8001098:	f040 8083 	bne.w	80011a2 <HAL_ADC_Start+0x14a>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80010a4:	f023 0301 	bic.w	r3, r3, #1
 80010a8:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80010b0:	4b42      	ldr	r3, [pc, #264]	; (80011bc <HAL_ADC_Start+0x164>)
 80010b2:	689b      	ldr	r3, [r3, #8]
 80010b4:	f003 031f 	and.w	r3, r3, #31
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d004      	beq.n	80010c6 <HAL_ADC_Start+0x6e>
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80010c4:	d115      	bne.n	80010f2 <HAL_ADC_Start+0x9a>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ca:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d027      	beq.n	8001130 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	645a      	str	r2, [r3, #68]	; 0x44
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 80010f0:	e01e      	b.n	8001130 <HAL_ADC_Start+0xd8>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001106:	d004      	beq.n	8001112 <HAL_ADC_Start+0xba>
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	4a2c      	ldr	r2, [pc, #176]	; (80011c0 <HAL_ADC_Start+0x168>)
 800110e:	4293      	cmp	r3, r2
 8001110:	d10e      	bne.n	8001130 <HAL_ADC_Start+0xd8>
 8001112:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001116:	68db      	ldr	r3, [r3, #12]
 8001118:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800111c:	2b00      	cmp	r3, #0
 800111e:	d007      	beq.n	8001130 <HAL_ADC_Start+0xd8>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001124:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001128:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	645a      	str	r2, [r3, #68]	; 0x44
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001134:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001138:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800113c:	d106      	bne.n	800114c <HAL_ADC_Start+0xf4>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001142:	f023 0206 	bic.w	r2, r3, #6
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	649a      	str	r2, [r3, #72]	; 0x48
 800114a:	e002      	b.n	8001152 <HAL_ADC_Start+0xfa>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	649a      	str	r2, [r3, #72]	; 0x48
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	221c      	movs	r2, #28
 8001160:	601a      	str	r2, [r3, #0]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001162:	4b16      	ldr	r3, [pc, #88]	; (80011bc <HAL_ADC_Start+0x164>)
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 031f 	and.w	r3, r3, #31
 800116a:	2b00      	cmp	r3, #0
 800116c:	d010      	beq.n	8001190 <HAL_ADC_Start+0x138>
 800116e:	4b13      	ldr	r3, [pc, #76]	; (80011bc <HAL_ADC_Start+0x164>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f003 031f 	and.w	r3, r3, #31
 8001176:	2b05      	cmp	r3, #5
 8001178:	d00a      	beq.n	8001190 <HAL_ADC_Start+0x138>
 800117a:	4b10      	ldr	r3, [pc, #64]	; (80011bc <HAL_ADC_Start+0x164>)
 800117c:	689b      	ldr	r3, [r3, #8]
 800117e:	f003 031f 	and.w	r3, r3, #31
 8001182:	2b09      	cmp	r3, #9
 8001184:	d004      	beq.n	8001190 <HAL_ADC_Start+0x138>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800118e:	d10f      	bne.n	80011b0 <HAL_ADC_Start+0x158>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	689a      	ldr	r2, [r3, #8]
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0204 	orr.w	r2, r2, #4
 800119e:	609a      	str	r2, [r3, #8]
 80011a0:	e006      	b.n	80011b0 <HAL_ADC_Start+0x158>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	2200      	movs	r2, #0
 80011a6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80011aa:	e001      	b.n	80011b0 <HAL_ADC_Start+0x158>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80011ac:	2302      	movs	r3, #2
 80011ae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80011b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80011b2:	4618      	mov	r0, r3
 80011b4:	3710      	adds	r7, #16
 80011b6:	46bd      	mov	sp, r7
 80011b8:	bd80      	pop	{r7, pc}
 80011ba:	bf00      	nop
 80011bc:	50000300 	.word	0x50000300
 80011c0:	50000100 	.word	0x50000100

080011c4 <HAL_ADC_Stop>:
  *         use function @ref HAL_ADCEx_RegularStop().
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80011cc:	2300      	movs	r3, #0
 80011ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011d6:	2b01      	cmp	r3, #1
 80011d8:	d101      	bne.n	80011de <HAL_ADC_Stop+0x1a>
 80011da:	2302      	movs	r3, #2
 80011dc:	e023      	b.n	8001226 <HAL_ADC_Stop+0x62>
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	2201      	movs	r2, #1
 80011e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* 1. Stop potential conversion on going, on regular and injected groups */
  tmp_hal_status = ADC_ConversionStop(hadc, ADC_REGULAR_INJECTED_GROUP);
 80011e6:	216c      	movs	r1, #108	; 0x6c
 80011e8:	6878      	ldr	r0, [r7, #4]
 80011ea:	f000 fd39 	bl	8001c60 <ADC_ConversionStop>
 80011ee:	4603      	mov	r3, r0
 80011f0:	73fb      	strb	r3, [r7, #15]
  
  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d111      	bne.n	800121c <HAL_ADC_Stop+0x58>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	f000 fcd1 	bl	8001ba0 <ADC_Disable>
 80011fe:	4603      	mov	r3, r0
 8001200:	73fb      	strb	r3, [r7, #15]
    
    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001202:	7bfb      	ldrb	r3, [r7, #15]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d109      	bne.n	800121c <HAL_ADC_Stop+0x58>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800120c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001210:	f023 0301 	bic.w	r3, r3, #1
 8001214:	f043 0201 	orr.w	r2, r3, #1
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	645a      	str	r2, [r3, #68]	; 0x44
                        HAL_ADC_STATE_READY);
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001224:	7bfb      	ldrb	r3, [r7, #15]
}
 8001226:	4618      	mov	r0, r3
 8001228:	3710      	adds	r7, #16
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <HAL_ADC_PollForConversion>:
  * @note   Depending on init parameter "EOCSelection", flags EOS or EOC is 
  *         checked and cleared depending on autodelay status (bit AUTDLY).     
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
 8001238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_EOC;
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 800123a:	2300      	movs	r3, #0
 800123c:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

/* If end of conversion selected to end of sequence */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	695b      	ldr	r3, [r3, #20]
 8001242:	2b08      	cmp	r3, #8
 8001244:	d102      	bne.n	800124c <HAL_ADC_PollForConversion+0x1c>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 8001246:	2308      	movs	r3, #8
 8001248:	617b      	str	r3, [r7, #20]
 800124a:	e02e      	b.n	80012aa <HAL_ADC_PollForConversion+0x7a>
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800124c:	4b5a      	ldr	r3, [pc, #360]	; (80013b8 <HAL_ADC_PollForConversion+0x188>)
 800124e:	60fb      	str	r3, [r7, #12]
    
    /* Check DMA configuration, depending on MultiMode set or not */
    if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	f003 031f 	and.w	r3, r3, #31
 8001258:	2b00      	cmp	r3, #0
 800125a:	d112      	bne.n	8001282 <HAL_ADC_PollForConversion+0x52>
    {
      if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	68db      	ldr	r3, [r3, #12]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b01      	cmp	r3, #1
 8001268:	d11d      	bne.n	80012a6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800126e:	f043 0220 	orr.w	r2, r3, #32
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	2200      	movs	r2, #0
 800127a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 800127e:	2301      	movs	r3, #1
 8001280:	e096      	b.n	80013b0 <HAL_ADC_PollForConversion+0x180>
      }
    }
    else
    {
      /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800128a:	2b00      	cmp	r3, #0
 800128c:	d00b      	beq.n	80012a6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001292:	f043 0220 	orr.w	r2, r3, #32
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	e084      	b.n	80013b0 <HAL_ADC_PollForConversion+0x180>
      }
    }
    
    tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 80012a6:	230c      	movs	r3, #12
 80012a8:	617b      	str	r3, [r7, #20]
  }
  
  /* Get relevant register CFGR in ADC instance of ADC master or slave      */
  /* in function of multimode state (for devices with multimode             */
  /* available).                                                            */
  if(ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80012aa:	4b43      	ldr	r3, [pc, #268]	; (80013b8 <HAL_ADC_PollForConversion+0x188>)
 80012ac:	689b      	ldr	r3, [r3, #8]
 80012ae:	f003 031f 	and.w	r3, r3, #31
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d004      	beq.n	80012c0 <HAL_ADC_PollForConversion+0x90>
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80012be:	d104      	bne.n	80012ca <HAL_ADC_PollForConversion+0x9a>
  {
    tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	68db      	ldr	r3, [r3, #12]
 80012c6:	613b      	str	r3, [r7, #16]
 80012c8:	e003      	b.n	80012d2 <HAL_ADC_PollForConversion+0xa2>
  }
  else
  {
    tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 80012ca:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80012ce:	68db      	ldr	r3, [r3, #12]
 80012d0:	613b      	str	r3, [r7, #16]
  }
  
  /* Get tick count */
  tickstart = HAL_GetTick();  
 80012d2:	f7ff fd03 	bl	8000cdc <HAL_GetTick>
 80012d6:	60b8      	str	r0, [r7, #8]
  
  /* Wait until End of Conversion or End of Sequence flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 80012d8:	e01a      	b.n	8001310 <HAL_ADC_PollForConversion+0xe0>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012e0:	d016      	beq.n	8001310 <HAL_ADC_PollForConversion+0xe0>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80012e2:	683b      	ldr	r3, [r7, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d007      	beq.n	80012f8 <HAL_ADC_PollForConversion+0xc8>
 80012e8:	f7ff fcf8 	bl	8000cdc <HAL_GetTick>
 80012ec:	4602      	mov	r2, r0
 80012ee:	68bb      	ldr	r3, [r7, #8]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	683a      	ldr	r2, [r7, #0]
 80012f4:	429a      	cmp	r2, r3
 80012f6:	d20b      	bcs.n	8001310 <HAL_ADC_PollForConversion+0xe0>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012fc:	f043 0204 	orr.w	r2, r3, #4
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	2200      	movs	r2, #0
 8001308:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        
        return HAL_TIMEOUT;
 800130c:	2303      	movs	r3, #3
 800130e:	e04f      	b.n	80013b0 <HAL_ADC_PollForConversion+0x180>
  while(HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	681a      	ldr	r2, [r3, #0]
 8001316:	697b      	ldr	r3, [r7, #20]
 8001318:	4013      	ands	r3, r2
 800131a:	2b00      	cmp	r3, #0
 800131c:	d0dd      	beq.n	80012da <HAL_ADC_PollForConversion+0xaa>
      }
    }
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	645a      	str	r2, [r3, #68]	; 0x44
  
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	68db      	ldr	r3, [r3, #12]
 8001330:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001334:	2b00      	cmp	r3, #0
 8001336:	d131      	bne.n	800139c <HAL_ADC_PollForConversion+0x16c>
     (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )
 8001338:	693b      	ldr	r3, [r7, #16]
 800133a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)           && 
 800133e:	2b00      	cmp	r3, #0
 8001340:	d12c      	bne.n	800139c <HAL_ADC_PollForConversion+0x16c>
  {
    /* If End of Sequence is reached, disable interrupts */
    if( __HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS) )
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	f003 0308 	and.w	r3, r3, #8
 800134c:	2b08      	cmp	r3, #8
 800134e:	d125      	bne.n	800139c <HAL_ADC_PollForConversion+0x16c>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	689b      	ldr	r3, [r3, #8]
 8001356:	f003 0304 	and.w	r3, r3, #4
 800135a:	2b00      	cmp	r3, #0
 800135c:	d112      	bne.n	8001384 <HAL_ADC_PollForConversion+0x154>
      {        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001362:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	645a      	str	r2, [r3, #68]	; 0x44
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800136e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001372:	2b00      	cmp	r3, #0
 8001374:	d112      	bne.n	800139c <HAL_ADC_PollForConversion+0x16c>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800137a:	f043 0201 	orr.w	r2, r3, #1
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	645a      	str	r2, [r3, #68]	; 0x44
 8001382:	e00b      	b.n	800139c <HAL_ADC_PollForConversion+0x16c>
        }
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001388:	f043 0220 	orr.w	r2, r3, #32
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001394:	f043 0201 	orr.w	r2, r3, #1
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	649a      	str	r2, [r3, #72]	; 0x48
  }
  
  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (READ_BIT (tmp_cfgr, ADC_CFGR_AUTDLY) == RESET)
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d103      	bne.n	80013ae <HAL_ADC_PollForConversion+0x17e>
  {
    /* Clear regular group conversion flag */
    /* (EOC or EOS depending on HAL ADC initialization parameter) */
    __HAL_ADC_CLEAR_FLAG(hadc, tmp_Flag_EOC);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	601a      	str	r2, [r3, #0]
  }
  
  /* Return ADC state */
  return HAL_OK;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3718      	adds	r7, #24
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}
 80013b8:	50000300 	.word	0x50000300

080013bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
	...

080013d8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013d8:	b480      	push	{r7}
 80013da:	b09d      	sub	sp, #116	; 0x74
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
 80013e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e2:	2300      	movs	r3, #0
 80013e4:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80013f2:	2b01      	cmp	r3, #1
 80013f4:	d101      	bne.n	80013fa <HAL_ADC_ConfigChannel+0x22>
 80013f6:	2302      	movs	r3, #2
 80013f8:	e2a5      	b.n	8001946 <HAL_ADC_ConfigChannel+0x56e>
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	2201      	movs	r2, #1
 80013fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	689b      	ldr	r3, [r3, #8]
 8001408:	f003 0304 	and.w	r3, r3, #4
 800140c:	2b00      	cmp	r3, #0
 800140e:	f040 8289 	bne.w	8001924 <HAL_ADC_ConfigChannel+0x54c>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8001412:	683b      	ldr	r3, [r7, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	2b04      	cmp	r3, #4
 8001418:	d81c      	bhi.n	8001454 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	685a      	ldr	r2, [r3, #4]
 8001424:	4613      	mov	r3, r2
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	4413      	add	r3, r2
 800142a:	005b      	lsls	r3, r3, #1
 800142c:	461a      	mov	r2, r3
 800142e:	231f      	movs	r3, #31
 8001430:	4093      	lsls	r3, r2
 8001432:	43db      	mvns	r3, r3
 8001434:	4019      	ands	r1, r3
 8001436:	683b      	ldr	r3, [r7, #0]
 8001438:	6818      	ldr	r0, [r3, #0]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	685a      	ldr	r2, [r3, #4]
 800143e:	4613      	mov	r3, r2
 8001440:	005b      	lsls	r3, r3, #1
 8001442:	4413      	add	r3, r2
 8001444:	005b      	lsls	r3, r3, #1
 8001446:	fa00 f203 	lsl.w	r2, r0, r3
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	430a      	orrs	r2, r1
 8001450:	631a      	str	r2, [r3, #48]	; 0x30
 8001452:	e063      	b.n	800151c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8001454:	683b      	ldr	r3, [r7, #0]
 8001456:	685b      	ldr	r3, [r3, #4]
 8001458:	2b09      	cmp	r3, #9
 800145a:	d81e      	bhi.n	800149a <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685a      	ldr	r2, [r3, #4]
 8001466:	4613      	mov	r3, r2
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	4413      	add	r3, r2
 800146c:	005b      	lsls	r3, r3, #1
 800146e:	3b1e      	subs	r3, #30
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43db      	mvns	r3, r3
 8001478:	4019      	ands	r1, r3
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	6818      	ldr	r0, [r3, #0]
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	685a      	ldr	r2, [r3, #4]
 8001482:	4613      	mov	r3, r2
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	4413      	add	r3, r2
 8001488:	005b      	lsls	r3, r3, #1
 800148a:	3b1e      	subs	r3, #30
 800148c:	fa00 f203 	lsl.w	r2, r0, r3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	430a      	orrs	r2, r1
 8001496:	635a      	str	r2, [r3, #52]	; 0x34
 8001498:	e040      	b.n	800151c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	2b0e      	cmp	r3, #14
 80014a0:	d81e      	bhi.n	80014e0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685a      	ldr	r2, [r3, #4]
 80014ac:	4613      	mov	r3, r2
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	4413      	add	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	3b3c      	subs	r3, #60	; 0x3c
 80014b6:	221f      	movs	r2, #31
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43db      	mvns	r3, r3
 80014be:	4019      	ands	r1, r3
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	6818      	ldr	r0, [r3, #0]
 80014c4:	683b      	ldr	r3, [r7, #0]
 80014c6:	685a      	ldr	r2, [r3, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	005b      	lsls	r3, r3, #1
 80014cc:	4413      	add	r3, r2
 80014ce:	005b      	lsls	r3, r3, #1
 80014d0:	3b3c      	subs	r3, #60	; 0x3c
 80014d2:	fa00 f203 	lsl.w	r2, r0, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	430a      	orrs	r2, r1
 80014dc:	639a      	str	r2, [r3, #56]	; 0x38
 80014de:	e01d      	b.n	800151c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80014e6:	683b      	ldr	r3, [r7, #0]
 80014e8:	685a      	ldr	r2, [r3, #4]
 80014ea:	4613      	mov	r3, r2
 80014ec:	005b      	lsls	r3, r3, #1
 80014ee:	4413      	add	r3, r2
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	3b5a      	subs	r3, #90	; 0x5a
 80014f4:	221f      	movs	r2, #31
 80014f6:	fa02 f303 	lsl.w	r3, r2, r3
 80014fa:	43db      	mvns	r3, r3
 80014fc:	4019      	ands	r1, r3
 80014fe:	683b      	ldr	r3, [r7, #0]
 8001500:	6818      	ldr	r0, [r3, #0]
 8001502:	683b      	ldr	r3, [r7, #0]
 8001504:	685a      	ldr	r2, [r3, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	005b      	lsls	r3, r3, #1
 800150a:	4413      	add	r3, r2
 800150c:	005b      	lsls	r3, r3, #1
 800150e:	3b5a      	subs	r3, #90	; 0x5a
 8001510:	fa00 f203 	lsl.w	r2, r0, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	430a      	orrs	r2, r1
 800151a:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689b      	ldr	r3, [r3, #8]
 8001522:	f003 030c 	and.w	r3, r3, #12
 8001526:	2b00      	cmp	r3, #0
 8001528:	f040 80e5 	bne.w	80016f6 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	2b09      	cmp	r3, #9
 8001532:	d91c      	bls.n	800156e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6999      	ldr	r1, [r3, #24]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	681a      	ldr	r2, [r3, #0]
 800153e:	4613      	mov	r3, r2
 8001540:	005b      	lsls	r3, r3, #1
 8001542:	4413      	add	r3, r2
 8001544:	3b1e      	subs	r3, #30
 8001546:	2207      	movs	r2, #7
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43db      	mvns	r3, r3
 800154e:	4019      	ands	r1, r3
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	6898      	ldr	r0, [r3, #8]
 8001554:	683b      	ldr	r3, [r7, #0]
 8001556:	681a      	ldr	r2, [r3, #0]
 8001558:	4613      	mov	r3, r2
 800155a:	005b      	lsls	r3, r3, #1
 800155c:	4413      	add	r3, r2
 800155e:	3b1e      	subs	r3, #30
 8001560:	fa00 f203 	lsl.w	r2, r0, r3
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	619a      	str	r2, [r3, #24]
 800156c:	e019      	b.n	80015a2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	6959      	ldr	r1, [r3, #20]
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	681a      	ldr	r2, [r3, #0]
 8001578:	4613      	mov	r3, r2
 800157a:	005b      	lsls	r3, r3, #1
 800157c:	4413      	add	r3, r2
 800157e:	2207      	movs	r2, #7
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	43db      	mvns	r3, r3
 8001586:	4019      	ands	r1, r3
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	6898      	ldr	r0, [r3, #8]
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	681a      	ldr	r2, [r3, #0]
 8001590:	4613      	mov	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	4413      	add	r3, r2
 8001596:	fa00 f203 	lsl.w	r2, r0, r3
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	430a      	orrs	r2, r1
 80015a0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80015a2:	683b      	ldr	r3, [r7, #0]
 80015a4:	695a      	ldr	r2, [r3, #20]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	68db      	ldr	r3, [r3, #12]
 80015ac:	08db      	lsrs	r3, r3, #3
 80015ae:	f003 0303 	and.w	r3, r3, #3
 80015b2:	005b      	lsls	r3, r3, #1
 80015b4:	fa02 f303 	lsl.w	r3, r2, r3
 80015b8:	66bb      	str	r3, [r7, #104]	; 0x68
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	691b      	ldr	r3, [r3, #16]
 80015be:	3b01      	subs	r3, #1
 80015c0:	2b03      	cmp	r3, #3
 80015c2:	d84f      	bhi.n	8001664 <HAL_ADC_ConfigChannel+0x28c>
 80015c4:	a201      	add	r2, pc, #4	; (adr r2, 80015cc <HAL_ADC_ConfigChannel+0x1f4>)
 80015c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ca:	bf00      	nop
 80015cc:	080015dd 	.word	0x080015dd
 80015d0:	080015ff 	.word	0x080015ff
 80015d4:	08001621 	.word	0x08001621
 80015d8:	08001643 	.word	0x08001643
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015e2:	4b9e      	ldr	r3, [pc, #632]	; (800185c <HAL_ADC_ConfigChannel+0x484>)
 80015e4:	4013      	ands	r3, r2
 80015e6:	683a      	ldr	r2, [r7, #0]
 80015e8:	6812      	ldr	r2, [r2, #0]
 80015ea:	0691      	lsls	r1, r2, #26
 80015ec:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80015ee:	430a      	orrs	r2, r1
 80015f0:	431a      	orrs	r2, r3
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80015fa:	661a      	str	r2, [r3, #96]	; 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80015fc:	e07e      	b.n	80016fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001604:	4b95      	ldr	r3, [pc, #596]	; (800185c <HAL_ADC_ConfigChannel+0x484>)
 8001606:	4013      	ands	r3, r2
 8001608:	683a      	ldr	r2, [r7, #0]
 800160a:	6812      	ldr	r2, [r2, #0]
 800160c:	0691      	lsls	r1, r2, #26
 800160e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001610:	430a      	orrs	r2, r1
 8001612:	431a      	orrs	r2, r3
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800161c:	665a      	str	r2, [r3, #100]	; 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800161e:	e06d      	b.n	80016fc <HAL_ADC_ConfigChannel+0x324>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8001626:	4b8d      	ldr	r3, [pc, #564]	; (800185c <HAL_ADC_ConfigChannel+0x484>)
 8001628:	4013      	ands	r3, r2
 800162a:	683a      	ldr	r2, [r7, #0]
 800162c:	6812      	ldr	r2, [r2, #0]
 800162e:	0691      	lsls	r1, r2, #26
 8001630:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001632:	430a      	orrs	r2, r1
 8001634:	431a      	orrs	r2, r3
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800163e:	669a      	str	r2, [r3, #104]	; 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001640:	e05c      	b.n	80016fc <HAL_ADC_ConfigChannel+0x324>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001648:	4b84      	ldr	r3, [pc, #528]	; (800185c <HAL_ADC_ConfigChannel+0x484>)
 800164a:	4013      	ands	r3, r2
 800164c:	683a      	ldr	r2, [r7, #0]
 800164e:	6812      	ldr	r2, [r2, #0]
 8001650:	0691      	lsls	r1, r2, #26
 8001652:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8001654:	430a      	orrs	r2, r1
 8001656:	431a      	orrs	r2, r3
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001660:	66da      	str	r2, [r3, #108]	; 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8001662:	e04b      	b.n	80016fc <HAL_ADC_ConfigChannel+0x324>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800166a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	069b      	lsls	r3, r3, #26
 8001674:	429a      	cmp	r2, r3
 8001676:	d107      	bne.n	8001688 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	681b      	ldr	r3, [r3, #0]
 8001682:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8001686:	661a      	str	r2, [r3, #96]	; 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800168e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	069b      	lsls	r3, r3, #26
 8001698:	429a      	cmp	r2, r3
 800169a:	d107      	bne.n	80016ac <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016aa:	665a      	str	r2, [r3, #100]	; 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80016b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	069b      	lsls	r3, r3, #26
 80016bc:	429a      	cmp	r2, r3
 80016be:	d107      	bne.n	80016d0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016ce:	669a      	str	r2, [r3, #104]	; 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80016d6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	069b      	lsls	r3, r3, #26
 80016e0:	429a      	cmp	r2, r3
 80016e2:	d10a      	bne.n	80016fa <HAL_ADC_ConfigChannel+0x322>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80016f2:	66da      	str	r2, [r3, #108]	; 0x6c
      }
      break;
 80016f4:	e001      	b.n	80016fa <HAL_ADC_ConfigChannel+0x322>
    }

  }
 80016f6:	bf00      	nop
 80016f8:	e000      	b.n	80016fc <HAL_ADC_ConfigChannel+0x324>
      break;
 80016fa:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	689b      	ldr	r3, [r3, #8]
 8001702:	f003 0303 	and.w	r3, r3, #3
 8001706:	2b01      	cmp	r3, #1
 8001708:	d108      	bne.n	800171c <HAL_ADC_ConfigChannel+0x344>
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	2b01      	cmp	r3, #1
 8001716:	d101      	bne.n	800171c <HAL_ADC_ConfigChannel+0x344>
 8001718:	2301      	movs	r3, #1
 800171a:	e000      	b.n	800171e <HAL_ADC_ConfigChannel+0x346>
 800171c:	2300      	movs	r3, #0
 800171e:	2b00      	cmp	r3, #0
 8001720:	f040 810b 	bne.w	800193a <HAL_ADC_ConfigChannel+0x562>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	68db      	ldr	r3, [r3, #12]
 8001728:	2b01      	cmp	r3, #1
 800172a:	d00f      	beq.n	800174c <HAL_ADC_ConfigChannel+0x374>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001734:	683b      	ldr	r3, [r7, #0]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	2201      	movs	r2, #1
 800173a:	fa02 f303 	lsl.w	r3, r2, r3
 800173e:	43da      	mvns	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	400a      	ands	r2, r1
 8001746:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
 800174a:	e049      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x408>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f8d3 10b0 	ldr.w	r1, [r3, #176]	; 0xb0
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2201      	movs	r2, #1
 800175a:	409a      	lsls	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	430a      	orrs	r2, r1
 8001762:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8001766:	683b      	ldr	r3, [r7, #0]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	2b09      	cmp	r3, #9
 800176c:	d91c      	bls.n	80017a8 <HAL_ADC_ConfigChannel+0x3d0>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	6999      	ldr	r1, [r3, #24]
 8001774:	683b      	ldr	r3, [r7, #0]
 8001776:	681a      	ldr	r2, [r3, #0]
 8001778:	4613      	mov	r3, r2
 800177a:	005b      	lsls	r3, r3, #1
 800177c:	4413      	add	r3, r2
 800177e:	3b1b      	subs	r3, #27
 8001780:	2207      	movs	r2, #7
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	4019      	ands	r1, r3
 800178a:	683b      	ldr	r3, [r7, #0]
 800178c:	6898      	ldr	r0, [r3, #8]
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	681a      	ldr	r2, [r3, #0]
 8001792:	4613      	mov	r3, r2
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	4413      	add	r3, r2
 8001798:	3b1b      	subs	r3, #27
 800179a:	fa00 f203 	lsl.w	r2, r0, r3
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	430a      	orrs	r2, r1
 80017a4:	619a      	str	r2, [r3, #24]
 80017a6:	e01b      	b.n	80017e0 <HAL_ADC_ConfigChannel+0x408>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	6959      	ldr	r1, [r3, #20]
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	4613      	mov	r3, r2
 80017b6:	005b      	lsls	r3, r3, #1
 80017b8:	4413      	add	r3, r2
 80017ba:	2207      	movs	r2, #7
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	43db      	mvns	r3, r3
 80017c2:	4019      	ands	r1, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	6898      	ldr	r0, [r3, #8]
 80017c8:	683b      	ldr	r3, [r7, #0]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	1c5a      	adds	r2, r3, #1
 80017ce:	4613      	mov	r3, r2
 80017d0:	005b      	lsls	r3, r3, #1
 80017d2:	4413      	add	r3, r2
 80017d4:	fa00 f203 	lsl.w	r2, r0, r3
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	430a      	orrs	r2, r1
 80017de:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80017e0:	4b1f      	ldr	r3, [pc, #124]	; (8001860 <HAL_ADC_ConfigChannel+0x488>)
 80017e2:	667b      	str	r3, [r7, #100]	; 0x64
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	2b10      	cmp	r3, #16
 80017ea:	d105      	bne.n	80017f8 <HAL_ADC_ConfigChannel+0x420>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80017ee:	689b      	ldr	r3, [r3, #8]
 80017f0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017f4:	2b00      	cmp	r3, #0
 80017f6:	d015      	beq.n	8001824 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 80017f8:	683b      	ldr	r3, [r7, #0]
 80017fa:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 80017fc:	2b11      	cmp	r3, #17
 80017fe:	d105      	bne.n	800180c <HAL_ADC_ConfigChannel+0x434>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001800:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 8001808:	2b00      	cmp	r3, #0
 800180a:	d00b      	beq.n	8001824 <HAL_ADC_ConfigChannel+0x44c>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8001810:	2b12      	cmp	r3, #18
 8001812:	f040 8092 	bne.w	800193a <HAL_ADC_ConfigChannel+0x562>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8001816:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001818:	689b      	ldr	r3, [r3, #8]
 800181a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800181e:	2b00      	cmp	r3, #0
 8001820:	f040 808b 	bne.w	800193a <HAL_ADC_ConfigChannel+0x562>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800182c:	d102      	bne.n	8001834 <HAL_ADC_ConfigChannel+0x45c>
 800182e:	4b0d      	ldr	r3, [pc, #52]	; (8001864 <HAL_ADC_ConfigChannel+0x48c>)
 8001830:	613b      	str	r3, [r7, #16]
 8001832:	e002      	b.n	800183a <HAL_ADC_ConfigChannel+0x462>
 8001834:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001838:	613b      	str	r3, [r7, #16]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	689b      	ldr	r3, [r3, #8]
 8001840:	f003 0303 	and.w	r3, r3, #3
 8001844:	2b01      	cmp	r3, #1
 8001846:	d10f      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x490>
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0301 	and.w	r3, r3, #1
 8001852:	2b01      	cmp	r3, #1
 8001854:	d108      	bne.n	8001868 <HAL_ADC_ConfigChannel+0x490>
 8001856:	2301      	movs	r3, #1
 8001858:	e007      	b.n	800186a <HAL_ADC_ConfigChannel+0x492>
 800185a:	bf00      	nop
 800185c:	83fff000 	.word	0x83fff000
 8001860:	50000300 	.word	0x50000300
 8001864:	50000100 	.word	0x50000100
 8001868:	2300      	movs	r3, #0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d150      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x538>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800186e:	693b      	ldr	r3, [r7, #16]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 8001870:	2b00      	cmp	r3, #0
 8001872:	d010      	beq.n	8001896 <HAL_ADC_ConfigChannel+0x4be>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001874:	693b      	ldr	r3, [r7, #16]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 0303 	and.w	r3, r3, #3
 800187c:	2b01      	cmp	r3, #1
 800187e:	d107      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x4b8>
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0301 	and.w	r3, r3, #1
 8001888:	2b01      	cmp	r3, #1
 800188a:	d101      	bne.n	8001890 <HAL_ADC_ConfigChannel+0x4b8>
 800188c:	2301      	movs	r3, #1
 800188e:	e000      	b.n	8001892 <HAL_ADC_ConfigChannel+0x4ba>
 8001890:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001892:	2b00      	cmp	r3, #0
 8001894:	d13c      	bne.n	8001910 <HAL_ADC_ConfigChannel+0x538>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	681b      	ldr	r3, [r3, #0]
 800189a:	2b10      	cmp	r3, #16
 800189c:	d11d      	bne.n	80018da <HAL_ADC_ConfigChannel+0x502>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018a6:	d118      	bne.n	80018da <HAL_ADC_ConfigChannel+0x502>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80018a8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018b0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018b2:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018b4:	4b27      	ldr	r3, [pc, #156]	; (8001954 <HAL_ADC_ConfigChannel+0x57c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4a27      	ldr	r2, [pc, #156]	; (8001958 <HAL_ADC_ConfigChannel+0x580>)
 80018ba:	fba2 2303 	umull	r2, r3, r2, r3
 80018be:	0c9a      	lsrs	r2, r3, #18
 80018c0:	4613      	mov	r3, r2
 80018c2:	009b      	lsls	r3, r3, #2
 80018c4:	4413      	add	r3, r2
 80018c6:	005b      	lsls	r3, r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80018ca:	e002      	b.n	80018d2 <HAL_ADC_ConfigChannel+0x4fa>
          {
            wait_loop_index--;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3b01      	subs	r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
          while(wait_loop_index != 0U)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d1f9      	bne.n	80018cc <HAL_ADC_ConfigChannel+0x4f4>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018d8:	e02e      	b.n	8001938 <HAL_ADC_ConfigChannel+0x560>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 80018da:	683b      	ldr	r3, [r7, #0]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	2b11      	cmp	r3, #17
 80018e0:	d10b      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x522>
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80018ea:	d106      	bne.n	80018fa <HAL_ADC_ConfigChannel+0x522>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 80018ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018ee:	689b      	ldr	r3, [r3, #8]
 80018f0:	f043 7280 	orr.w	r2, r3, #16777216	; 0x1000000
 80018f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018f6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80018f8:	e01e      	b.n	8001938 <HAL_ADC_ConfigChannel+0x560>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	2b12      	cmp	r3, #18
 8001900:	d11a      	bne.n	8001938 <HAL_ADC_ConfigChannel+0x560>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8001902:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001904:	689b      	ldr	r3, [r3, #8]
 8001906:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800190a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800190c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800190e:	e013      	b.n	8001938 <HAL_ADC_ConfigChannel+0x560>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001914:	f043 0220 	orr.w	r2, r3, #32
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	645a      	str	r2, [r3, #68]	; 0x44
        
        tmp_hal_status = HAL_ERROR;
 800191c:	2301      	movs	r3, #1
 800191e:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001922:	e00a      	b.n	800193a <HAL_ADC_ConfigChannel+0x562>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001928:	f043 0220 	orr.w	r2, r3, #32
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001930:	2301      	movs	r3, #1
 8001932:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
 8001936:	e000      	b.n	800193a <HAL_ADC_ConfigChannel+0x562>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8001938:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	2200      	movs	r2, #0
 800193e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001942:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
}
 8001946:	4618      	mov	r0, r3
 8001948:	3774      	adds	r7, #116	; 0x74
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	20000008 	.word	0x20000008
 8001958:	431bde83 	.word	0x431bde83

0800195c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 800195c:	b480      	push	{r7}
 800195e:	b09b      	sub	sp, #108	; 0x6c
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
 8001964:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001966:	2300      	movs	r3, #0
 8001968:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001974:	d102      	bne.n	800197c <HAL_ADCEx_MultiModeConfigChannel+0x20>
 8001976:	4b59      	ldr	r3, [pc, #356]	; (8001adc <HAL_ADCEx_MultiModeConfigChannel+0x180>)
 8001978:	60fb      	str	r3, [r7, #12]
 800197a:	e002      	b.n	8001982 <HAL_ADCEx_MultiModeConfigChannel+0x26>
 800197c:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001980:	60fb      	str	r3, [r7, #12]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d101      	bne.n	800198c <HAL_ADCEx_MultiModeConfigChannel+0x30>
  {
    /* Return function status */
    return HAL_ERROR;
 8001988:	2301      	movs	r3, #1
 800198a:	e0a1      	b.n	8001ad0 <HAL_ADCEx_MultiModeConfigChannel+0x174>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001992:	2b01      	cmp	r3, #1
 8001994:	d101      	bne.n	800199a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8001996:	2302      	movs	r3, #2
 8001998:	e09a      	b.n	8001ad0 <HAL_ADCEx_MultiModeConfigChannel+0x174>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	2201      	movs	r2, #1
 800199e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 0304 	and.w	r3, r3, #4
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d17e      	bne.n	8001aae <HAL_ADCEx_MultiModeConfigChannel+0x152>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	689b      	ldr	r3, [r3, #8]
 80019b4:	f003 0304 	and.w	r3, r3, #4
 80019b8:	2b00      	cmp	r3, #0
 80019ba:	d178      	bne.n	8001aae <HAL_ADCEx_MultiModeConfigChannel+0x152>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80019bc:	4b48      	ldr	r3, [pc, #288]	; (8001ae0 <HAL_ADCEx_MultiModeConfigChannel+0x184>)
 80019be:	663b      	str	r3, [r7, #96]	; 0x60
    
    /* If multimode is selected, configure all multimode paramaters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80019c0:	683b      	ldr	r3, [r7, #0]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d03f      	beq.n	8001a48 <HAL_ADCEx_MultiModeConfigChannel+0xec>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80019c8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019ca:	689b      	ldr	r3, [r3, #8]
 80019cc:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80019d0:	683b      	ldr	r3, [r7, #0]
 80019d2:	6859      	ldr	r1, [r3, #4]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019d8:	035b      	lsls	r3, r3, #13
 80019da:	430b      	orrs	r3, r1
 80019dc:	431a      	orrs	r2, r3
 80019de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80019e0:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	689b      	ldr	r3, [r3, #8]
 80019e8:	f003 0303 	and.w	r3, r3, #3
 80019ec:	2b01      	cmp	r3, #1
 80019ee:	d108      	bne.n	8001a02 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d101      	bne.n	8001a02 <HAL_ADCEx_MultiModeConfigChannel+0xa6>
 80019fe:	2301      	movs	r3, #1
 8001a00:	e000      	b.n	8001a04 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8001a02:	2300      	movs	r3, #0
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d15c      	bne.n	8001ac2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	689b      	ldr	r3, [r3, #8]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d107      	bne.n	8001a24 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	2b01      	cmp	r3, #1
 8001a1e:	d101      	bne.n	8001a24 <HAL_ADCEx_MultiModeConfigChannel+0xc8>
 8001a20:	2301      	movs	r3, #1
 8001a22:	e000      	b.n	8001a26 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8001a24:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d14b      	bne.n	8001ac2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 8001a2a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a2c:	689b      	ldr	r3, [r3, #8]
 8001a2e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001a32:	f023 030f 	bic.w	r3, r3, #15
 8001a36:	683a      	ldr	r2, [r7, #0]
 8001a38:	6811      	ldr	r1, [r2, #0]
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	6892      	ldr	r2, [r2, #8]
 8001a3e:	430a      	orrs	r2, r1
 8001a40:	431a      	orrs	r2, r3
 8001a42:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a44:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001a46:	e03c      	b.n	8001ac2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8001a48:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a50:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a52:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	f003 0303 	and.w	r3, r3, #3
 8001a5e:	2b01      	cmp	r3, #1
 8001a60:	d108      	bne.n	8001a74 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0301 	and.w	r3, r3, #1
 8001a6c:	2b01      	cmp	r3, #1
 8001a6e:	d101      	bne.n	8001a74 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8001a70:	2301      	movs	r3, #1
 8001a72:	e000      	b.n	8001a76 <HAL_ADCEx_MultiModeConfigChannel+0x11a>
 8001a74:	2300      	movs	r3, #0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d123      	bne.n	8001ac2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	f003 0303 	and.w	r3, r3, #3
 8001a82:	2b01      	cmp	r3, #1
 8001a84:	d107      	bne.n	8001a96 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f003 0301 	and.w	r3, r3, #1
 8001a8e:	2b01      	cmp	r3, #1
 8001a90:	d101      	bne.n	8001a96 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
 8001a92:	2301      	movs	r3, #1
 8001a94:	e000      	b.n	8001a98 <HAL_ADCEx_MultiModeConfigChannel+0x13c>
 8001a96:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d112      	bne.n	8001ac2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8001a9c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8001aa4:	f023 030f 	bic.w	r3, r3, #15
 8001aa8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8001aaa:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001aac:	e009      	b.n	8001ac2 <HAL_ADCEx_MultiModeConfigChannel+0x166>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ab2:	f043 0220 	orr.w	r2, r3, #32
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	645a      	str	r2, [r3, #68]	; 0x44
    
    tmp_hal_status = HAL_ERROR;
 8001aba:	2301      	movs	r3, #1
 8001abc:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
 8001ac0:	e000      	b.n	8001ac4 <HAL_ADCEx_MultiModeConfigChannel+0x168>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8001ac2:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  
  /* Return function status */
  return tmp_hal_status;
 8001acc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
} 
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	376c      	adds	r7, #108	; 0x6c
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	50000100 	.word	0x50000100
 8001ae0:	50000300 	.word	0x50000300

08001ae4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001ae4:	b580      	push	{r7, lr}
 8001ae6:	b084      	sub	sp, #16
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	689b      	ldr	r3, [r3, #8]
 8001af6:	f003 0303 	and.w	r3, r3, #3
 8001afa:	2b01      	cmp	r3, #1
 8001afc:	d108      	bne.n	8001b10 <ADC_Enable+0x2c>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0301 	and.w	r3, r3, #1
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d101      	bne.n	8001b10 <ADC_Enable+0x2c>
 8001b0c:	2301      	movs	r3, #1
 8001b0e:	e000      	b.n	8001b12 <ADC_Enable+0x2e>
 8001b10:	2300      	movs	r3, #0
 8001b12:	2b00      	cmp	r3, #0
 8001b14:	d13c      	bne.n	8001b90 <ADC_Enable+0xac>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	689a      	ldr	r2, [r3, #8]
 8001b1c:	4b1f      	ldr	r3, [pc, #124]	; (8001b9c <ADC_Enable+0xb8>)
 8001b1e:	4013      	ands	r3, r2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d00d      	beq.n	8001b40 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b28:	f043 0210 	orr.w	r2, r3, #16
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	645a      	str	r2, [r3, #68]	; 0x44
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b34:	f043 0201 	orr.w	r2, r3, #1
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	649a      	str	r2, [r3, #72]	; 0x48
      
      return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e028      	b.n	8001b92 <ADC_Enable+0xae>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	689a      	ldr	r2, [r3, #8]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f042 0201 	orr.w	r2, r2, #1
 8001b4e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8001b50:	f7ff f8c4 	bl	8000cdc <HAL_GetTick>
 8001b54:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b56:	e014      	b.n	8001b82 <ADC_Enable+0x9e>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001b58:	f7ff f8c0 	bl	8000cdc <HAL_GetTick>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	1ad3      	subs	r3, r2, r3
 8001b62:	2b02      	cmp	r3, #2
 8001b64:	d90d      	bls.n	8001b82 <ADC_Enable+0x9e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f043 0210 	orr.w	r2, r3, #16
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b76:	f043 0201 	orr.w	r2, r3, #1
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	649a      	str	r2, [r3, #72]	; 0x48
      
        return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e007      	b.n	8001b92 <ADC_Enable+0xae>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0301 	and.w	r3, r3, #1
 8001b8c:	2b01      	cmp	r3, #1
 8001b8e:	d1e3      	bne.n	8001b58 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001b90:	2300      	movs	r3, #0
}
 8001b92:	4618      	mov	r0, r3
 8001b94:	3710      	adds	r7, #16
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd80      	pop	{r7, pc}
 8001b9a:	bf00      	nop
 8001b9c:	8000003f 	.word	0x8000003f

08001ba0 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8001ba0:	b580      	push	{r7, lr}
 8001ba2:	b084      	sub	sp, #16
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	f003 0303 	and.w	r3, r3, #3
 8001bb6:	2b01      	cmp	r3, #1
 8001bb8:	d108      	bne.n	8001bcc <ADC_Disable+0x2c>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	681b      	ldr	r3, [r3, #0]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f003 0301 	and.w	r3, r3, #1
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d101      	bne.n	8001bcc <ADC_Disable+0x2c>
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e000      	b.n	8001bce <ADC_Disable+0x2e>
 8001bcc:	2300      	movs	r3, #0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d040      	beq.n	8001c54 <ADC_Disable+0xb4>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	689b      	ldr	r3, [r3, #8]
 8001bd8:	f003 030d 	and.w	r3, r3, #13
 8001bdc:	2b01      	cmp	r3, #1
 8001bde:	d10f      	bne.n	8001c00 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	689a      	ldr	r2, [r3, #8]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f042 0202 	orr.w	r2, r2, #2
 8001bee:	609a      	str	r2, [r3, #8]
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	2203      	movs	r2, #3
 8001bf6:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8001bf8:	f7ff f870 	bl	8000cdc <HAL_GetTick>
 8001bfc:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001bfe:	e022      	b.n	8001c46 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c04:	f043 0210 	orr.w	r2, r3, #16
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	645a      	str	r2, [r3, #68]	; 0x44
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c10:	f043 0201 	orr.w	r2, r3, #1
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	649a      	str	r2, [r3, #72]	; 0x48
      return HAL_ERROR;
 8001c18:	2301      	movs	r3, #1
 8001c1a:	e01c      	b.n	8001c56 <ADC_Disable+0xb6>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001c1c:	f7ff f85e 	bl	8000cdc <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d90d      	bls.n	8001c46 <ADC_Disable+0xa6>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c2e:	f043 0210 	orr.w	r2, r3, #16
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c3a:	f043 0201 	orr.w	r2, r3, #1
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e007      	b.n	8001c56 <ADC_Disable+0xb6>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d0e3      	beq.n	8001c1c <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8001c54:	2300      	movs	r3, #0
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
	...

08001c60 <ADC_ConversionStop>:
  *            @arg ADC_INJECTED_GROUP: ADC injected conversion type.
  *            @arg ADC_REGULAR_INJECTED_GROUP: ADC regular and injected conversion type.
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef* hadc, uint32_t ConversionGroup)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b086      	sub	sp, #24
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
 8001c68:	6039      	str	r1, [r7, #0]
  uint32_t tmp_ADC_CR_ADSTART_JADSTART = 0U;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = 0U;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8001c72:	2300      	movs	r3, #0
 8001c74:	613b      	str	r3, [r7, #16]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CONVERSION_GROUP(ConversionGroup));
    
  /* Verification if ADC is not already stopped (on regular and injected      */
  /* groups) to bypass this function if not needed.                           */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc))
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 030c 	and.w	r3, r3, #12
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	f000 8093 	beq.w	8001dac <ADC_ConversionStop+0x14c>
    /* auto-delay mode.                                                       */
    /* In auto-injection mode, regular group stop ADC_CR_ADSTP is used (not   */
    /* injected group stop ADC_CR_JADSTP).                                    */
    /* Procedure to be followed: Wait until JEOS=1U, clear JEOS, set ADSTP=1   */
    /* (see reference manual).                                                */
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	68db      	ldr	r3, [r3, #12]
 8001c8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c90:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001c94:	d12a      	bne.n	8001cec <ADC_ConversionStop+0x8c>
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	69db      	ldr	r3, [r3, #28]
    if ((HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_JAUTO)) &&
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d126      	bne.n	8001cec <ADC_ConversionStop+0x8c>
         (hadc->Init.LowPowerAutoWait==ENABLE)                   )
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	699b      	ldr	r3, [r3, #24]
         (hadc->Init.ContinuousConvMode==ENABLE)               &&
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d122      	bne.n	8001cec <ADC_ConversionStop+0x8c>
    {
      /* Use stop of regular group */
      ConversionGroup = ADC_REGULAR_GROUP;
 8001ca6:	230c      	movs	r3, #12
 8001ca8:	603b      	str	r3, [r7, #0]
      
      /* Wait until JEOS=1 (maximum Timeout: 4 injected conversions) */
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001caa:	e014      	b.n	8001cd6 <ADC_ConversionStop+0x76>
      {
        if (Conversion_Timeout_CPU_cycles >= (ADC_CONVERSION_TIME_MAX_CPU_CYCLES *4U))
 8001cac:	693b      	ldr	r3, [r7, #16]
 8001cae:	4a42      	ldr	r2, [pc, #264]	; (8001db8 <ADC_ConversionStop+0x158>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d90d      	bls.n	8001cd0 <ADC_ConversionStop+0x70>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cb8:	f043 0210 	orr.w	r2, r3, #16
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	645a      	str	r2, [r3, #68]	; 0x44
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001cc4:	f043 0201 	orr.w	r2, r3, #1
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	649a      	str	r2, [r3, #72]	; 0x48
          
          return HAL_ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	e06e      	b.n	8001dae <ADC_ConversionStop+0x14e>
        }
        Conversion_Timeout_CPU_cycles ++;
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	3301      	adds	r3, #1
 8001cd4:	613b      	str	r3, [r7, #16]
      while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS) == RESET)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001ce0:	2b40      	cmp	r3, #64	; 0x40
 8001ce2:	d1e3      	bne.n	8001cac <ADC_ConversionStop+0x4c>
      }

      /* Clear JEOS */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOS);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	2240      	movs	r2, #64	; 0x40
 8001cea:	601a      	str	r2, [r3, #0]
    }
    
    /* Stop potential conversion on going on regular group */
    if (ConversionGroup != ADC_INJECTED_GROUP)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	2b60      	cmp	r3, #96	; 0x60
 8001cf0:	d015      	beq.n	8001d1e <ADC_ConversionStop+0xbe>
    {
      /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	f003 0304 	and.w	r3, r3, #4
 8001cfc:	2b04      	cmp	r3, #4
 8001cfe:	d10e      	bne.n	8001d1e <ADC_ConversionStop+0xbe>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)     )
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	689b      	ldr	r3, [r3, #8]
 8001d06:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADSTART) && 
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d107      	bne.n	8001d1e <ADC_ConversionStop+0xbe>
      {
        /* Stop conversions on regular group */
        hadc->Instance->CR |= ADC_CR_ADSTP;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	689a      	ldr	r2, [r3, #8]
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	f042 0210 	orr.w	r2, r2, #16
 8001d1c:	609a      	str	r2, [r3, #8]
      }
    }

    /* Stop potential conversion on going on injected group */
    if (ConversionGroup != ADC_REGULAR_GROUP)
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	2b0c      	cmp	r3, #12
 8001d22:	d015      	beq.n	8001d50 <ADC_ConversionStop+0xf0>
    {
      /* Software is allowed to set JADSTP only when JADSTART=1 and ADDIS=0U */
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b08      	cmp	r3, #8
 8001d30:	d10e      	bne.n	8001d50 <ADC_ConversionStop+0xf0>
          HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADDIS)      )
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f003 0302 	and.w	r3, r3, #2
      if (HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_JADSTART) && 
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d107      	bne.n	8001d50 <ADC_ConversionStop+0xf0>
      {
        /* Stop conversions on injected group */
        hadc->Instance->CR |= ADC_CR_JADSTP;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f042 0220 	orr.w	r2, r2, #32
 8001d4e:	609a      	str	r2, [r3, #8]
      }
    }

    /* Selection of start and stop bits in function of regular or injected group */
    switch(ConversionGroup)
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2b60      	cmp	r3, #96	; 0x60
 8001d54:	d004      	beq.n	8001d60 <ADC_ConversionStop+0x100>
 8001d56:	2b6c      	cmp	r3, #108	; 0x6c
 8001d58:	d105      	bne.n	8001d66 <ADC_ConversionStop+0x106>
    {
    case ADC_REGULAR_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = (ADC_CR_ADSTART | ADC_CR_JADSTART);
 8001d5a:	230c      	movs	r3, #12
 8001d5c:	617b      	str	r3, [r7, #20]
        break;
 8001d5e:	e005      	b.n	8001d6c <ADC_ConversionStop+0x10c>
    case ADC_INJECTED_GROUP:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_JADSTART;
 8001d60:	2308      	movs	r3, #8
 8001d62:	617b      	str	r3, [r7, #20]
        break;
 8001d64:	e002      	b.n	8001d6c <ADC_ConversionStop+0x10c>
    /* Case ADC_REGULAR_GROUP */
    default:
        tmp_ADC_CR_ADSTART_JADSTART = ADC_CR_ADSTART;
 8001d66:	2304      	movs	r3, #4
 8001d68:	617b      	str	r3, [r7, #20]
        break;
 8001d6a:	bf00      	nop
    }
    
    /* Wait for conversion effectively stopped */
    tickstart = HAL_GetTick();
 8001d6c:	f7fe ffb6 	bl	8000cdc <HAL_GetTick>
 8001d70:	60f8      	str	r0, [r7, #12]
      
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001d72:	e014      	b.n	8001d9e <ADC_ConversionStop+0x13e>
    {
      if((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001d74:	f7fe ffb2 	bl	8000cdc <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b0b      	cmp	r3, #11
 8001d80:	d90d      	bls.n	8001d9e <ADC_ConversionStop+0x13e>
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d86:	f043 0210 	orr.w	r2, r3, #16
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	645a      	str	r2, [r3, #68]	; 0x44
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d92:	f043 0201 	orr.w	r2, r3, #1
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	649a      	str	r2, [r3, #72]	; 0x48
        
        return HAL_ERROR;
 8001d9a:	2301      	movs	r3, #1
 8001d9c:	e007      	b.n	8001dae <ADC_ConversionStop+0x14e>
    while((hadc->Instance->CR & tmp_ADC_CR_ADSTART_JADSTART) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	697b      	ldr	r3, [r7, #20]
 8001da6:	4013      	ands	r3, r2
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d1e3      	bne.n	8001d74 <ADC_ConversionStop+0x114>
    }
    
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001dac:	2300      	movs	r3, #0
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3718      	adds	r7, #24
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	000993ff 	.word	0x000993ff

08001dbc <NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001dbc:	b480      	push	{r7}
 8001dbe:	b085      	sub	sp, #20
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f003 0307 	and.w	r3, r3, #7
 8001dca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001dcc:	4b0c      	ldr	r3, [pc, #48]	; (8001e00 <NVIC_SetPriorityGrouping+0x44>)
 8001dce:	68db      	ldr	r3, [r3, #12]
 8001dd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001dd2:	68ba      	ldr	r2, [r7, #8]
 8001dd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001dd8:	4013      	ands	r3, r2
 8001dda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001de0:	68bb      	ldr	r3, [r7, #8]
 8001de2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001de4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001dec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001dee:	4a04      	ldr	r2, [pc, #16]	; (8001e00 <NVIC_SetPriorityGrouping+0x44>)
 8001df0:	68bb      	ldr	r3, [r7, #8]
 8001df2:	60d3      	str	r3, [r2, #12]
}
 8001df4:	bf00      	nop
 8001df6:	3714      	adds	r7, #20
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfe:	4770      	bx	lr
 8001e00:	e000ed00 	.word	0xe000ed00

08001e04 <NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
 8001e04:	b480      	push	{r7}
 8001e06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001e08:	4b04      	ldr	r3, [pc, #16]	; (8001e1c <NVIC_GetPriorityGrouping+0x18>)
 8001e0a:	68db      	ldr	r3, [r3, #12]
 8001e0c:	0a1b      	lsrs	r3, r3, #8
 8001e0e:	f003 0307 	and.w	r3, r3, #7
}
 8001e12:	4618      	mov	r0, r3
 8001e14:	46bd      	mov	sp, r7
 8001e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e1a:	4770      	bx	lr
 8001e1c:	e000ed00 	.word	0xe000ed00

08001e20 <NVIC_SetPriority>:
  \note    The priority cannot be set for every core interrupt.
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001e20:	b480      	push	{r7}
 8001e22:	b083      	sub	sp, #12
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	4603      	mov	r3, r0
 8001e28:	6039      	str	r1, [r7, #0]
 8001e2a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) < 0)
 8001e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	da0b      	bge.n	8001e4c <NVIC_SetPriority+0x2c>
  {
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	490c      	ldr	r1, [pc, #48]	; (8001e6c <NVIC_SetPriority+0x4c>)
 8001e3a:	79fb      	ldrb	r3, [r7, #7]
 8001e3c:	f003 030f 	and.w	r3, r3, #15
 8001e40:	3b04      	subs	r3, #4
 8001e42:	0112      	lsls	r2, r2, #4
 8001e44:	b2d2      	uxtb	r2, r2
 8001e46:	440b      	add	r3, r1
 8001e48:	761a      	strb	r2, [r3, #24]
  }
  else
  {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e4a:	e009      	b.n	8001e60 <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	4907      	ldr	r1, [pc, #28]	; (8001e70 <NVIC_SetPriority+0x50>)
 8001e52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e56:	0112      	lsls	r2, r2, #4
 8001e58:	b2d2      	uxtb	r2, r2
 8001e5a:	440b      	add	r3, r1
 8001e5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e60:	bf00      	nop
 8001e62:	370c      	adds	r7, #12
 8001e64:	46bd      	mov	sp, r7
 8001e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e6a:	4770      	bx	lr
 8001e6c:	e000ed00 	.word	0xe000ed00
 8001e70:	e000e100 	.word	0xe000e100

08001e74 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b089      	sub	sp, #36	; 0x24
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	f003 0307 	and.w	r3, r3, #7
 8001e86:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e88:	69fb      	ldr	r3, [r7, #28]
 8001e8a:	f1c3 0307 	rsb	r3, r3, #7
 8001e8e:	2b04      	cmp	r3, #4
 8001e90:	bf28      	it	cs
 8001e92:	2304      	movcs	r3, #4
 8001e94:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e96:	69fb      	ldr	r3, [r7, #28]
 8001e98:	3304      	adds	r3, #4
 8001e9a:	2b06      	cmp	r3, #6
 8001e9c:	d902      	bls.n	8001ea4 <NVIC_EncodePriority+0x30>
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3b03      	subs	r3, #3
 8001ea2:	e000      	b.n	8001ea6 <NVIC_EncodePriority+0x32>
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ea8:	f04f 32ff 	mov.w	r2, #4294967295
 8001eac:	69bb      	ldr	r3, [r7, #24]
 8001eae:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb2:	43da      	mvns	r2, r3
 8001eb4:	68bb      	ldr	r3, [r7, #8]
 8001eb6:	401a      	ands	r2, r3
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ebc:	f04f 31ff 	mov.w	r1, #4294967295
 8001ec0:	697b      	ldr	r3, [r7, #20]
 8001ec2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ec6:	43d9      	mvns	r1, r3
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ecc:	4313      	orrs	r3, r2
         );
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3724      	adds	r7, #36	; 0x24
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ed8:	4770      	bx	lr
	...

08001edc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	b082      	sub	sp, #8
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	3b01      	subs	r3, #1
 8001ee8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001eec:	d301      	bcc.n	8001ef2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e00f      	b.n	8001f12 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ef2:	4a0a      	ldr	r2, [pc, #40]	; (8001f1c <SysTick_Config+0x40>)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001efa:	210f      	movs	r1, #15
 8001efc:	f04f 30ff 	mov.w	r0, #4294967295
 8001f00:	f7ff ff8e 	bl	8001e20 <NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001f04:	4b05      	ldr	r3, [pc, #20]	; (8001f1c <SysTick_Config+0x40>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001f0a:	4b04      	ldr	r3, [pc, #16]	; (8001f1c <SysTick_Config+0x40>)
 8001f0c:	2207      	movs	r2, #7
 8001f0e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001f10:	2300      	movs	r3, #0
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	3708      	adds	r7, #8
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	e000e010 	.word	0xe000e010

08001f20 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b082      	sub	sp, #8
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001f28:	6878      	ldr	r0, [r7, #4]
 8001f2a:	f7ff ff47 	bl	8001dbc <NVIC_SetPriorityGrouping>
}
 8001f2e:	bf00      	nop
 8001f30:	3708      	adds	r7, #8
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001f36:	b580      	push	{r7, lr}
 8001f38:	b086      	sub	sp, #24
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	60b9      	str	r1, [r7, #8]
 8001f40:	607a      	str	r2, [r7, #4]
 8001f42:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f44:	2300      	movs	r3, #0
 8001f46:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f48:	f7ff ff5c 	bl	8001e04 <NVIC_GetPriorityGrouping>
 8001f4c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f4e:	687a      	ldr	r2, [r7, #4]
 8001f50:	68b9      	ldr	r1, [r7, #8]
 8001f52:	6978      	ldr	r0, [r7, #20]
 8001f54:	f7ff ff8e 	bl	8001e74 <NVIC_EncodePriority>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f5e:	4611      	mov	r1, r2
 8001f60:	4618      	mov	r0, r3
 8001f62:	f7ff ff5d 	bl	8001e20 <NVIC_SetPriority>
}
 8001f66:	bf00      	nop
 8001f68:	3718      	adds	r7, #24
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	bd80      	pop	{r7, pc}

08001f6e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f6e:	b580      	push	{r7, lr}
 8001f70:	b082      	sub	sp, #8
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f76:	6878      	ldr	r0, [r7, #4]
 8001f78:	f7ff ffb0 	bl	8001edc <SysTick_Config>
 8001f7c:	4603      	mov	r3, r0
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3708      	adds	r7, #8
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
	...

08001f88 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f88:	b480      	push	{r7}
 8001f8a:	b087      	sub	sp, #28
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	6078      	str	r0, [r7, #4]
 8001f90:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8001f92:	2300      	movs	r3, #0
 8001f94:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f96:	2300      	movs	r3, #0
 8001f98:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8001f9e:	e14e      	b.n	800223e <HAL_GPIO_Init+0x2b6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	681a      	ldr	r2, [r3, #0]
 8001fa4:	2101      	movs	r1, #1
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	fa01 f303 	lsl.w	r3, r1, r3
 8001fac:	4013      	ands	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]

    if(iocurrent)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 8140 	beq.w	8002238 <HAL_GPIO_Init+0x2b0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	685b      	ldr	r3, [r3, #4]
 8001fbc:	2b02      	cmp	r3, #2
 8001fbe:	d003      	beq.n	8001fc8 <HAL_GPIO_Init+0x40>
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	2b12      	cmp	r3, #18
 8001fc6:	d123      	bne.n	8002010 <HAL_GPIO_Init+0x88>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001fc8:	697b      	ldr	r3, [r7, #20]
 8001fca:	08da      	lsrs	r2, r3, #3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	3208      	adds	r2, #8
 8001fd0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001fd4:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001fd6:	697b      	ldr	r3, [r7, #20]
 8001fd8:	f003 0307 	and.w	r3, r3, #7
 8001fdc:	009b      	lsls	r3, r3, #2
 8001fde:	220f      	movs	r2, #15
 8001fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8001fe4:	43db      	mvns	r3, r3
 8001fe6:	693a      	ldr	r2, [r7, #16]
 8001fe8:	4013      	ands	r3, r2
 8001fea:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001fec:	683b      	ldr	r3, [r7, #0]
 8001fee:	691a      	ldr	r2, [r3, #16]
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	f003 0307 	and.w	r3, r3, #7
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffc:	693a      	ldr	r2, [r7, #16]
 8001ffe:	4313      	orrs	r3, r2
 8002000:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	08da      	lsrs	r2, r3, #3
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	3208      	adds	r2, #8
 800200a:	6939      	ldr	r1, [r7, #16]
 800200c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002016:	697b      	ldr	r3, [r7, #20]
 8002018:	005b      	lsls	r3, r3, #1
 800201a:	2203      	movs	r2, #3
 800201c:	fa02 f303 	lsl.w	r3, r2, r3
 8002020:	43db      	mvns	r3, r3
 8002022:	693a      	ldr	r2, [r7, #16]
 8002024:	4013      	ands	r3, r2
 8002026:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	685b      	ldr	r3, [r3, #4]
 800202c:	f003 0203 	and.w	r2, r3, #3
 8002030:	697b      	ldr	r3, [r7, #20]
 8002032:	005b      	lsls	r3, r3, #1
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	693a      	ldr	r2, [r7, #16]
 800203a:	4313      	orrs	r3, r2
 800203c:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	693a      	ldr	r2, [r7, #16]
 8002042:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	2b01      	cmp	r3, #1
 800204a:	d00b      	beq.n	8002064 <HAL_GPIO_Init+0xdc>
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	2b02      	cmp	r3, #2
 8002052:	d007      	beq.n	8002064 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002054:	683b      	ldr	r3, [r7, #0]
 8002056:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002058:	2b11      	cmp	r3, #17
 800205a:	d003      	beq.n	8002064 <HAL_GPIO_Init+0xdc>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800205c:	683b      	ldr	r3, [r7, #0]
 800205e:	685b      	ldr	r3, [r3, #4]
 8002060:	2b12      	cmp	r3, #18
 8002062:	d130      	bne.n	80020c6 <HAL_GPIO_Init+0x13e>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800206a:	697b      	ldr	r3, [r7, #20]
 800206c:	005b      	lsls	r3, r3, #1
 800206e:	2203      	movs	r2, #3
 8002070:	fa02 f303 	lsl.w	r3, r2, r3
 8002074:	43db      	mvns	r3, r3
 8002076:	693a      	ldr	r2, [r7, #16]
 8002078:	4013      	ands	r3, r2
 800207a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	68da      	ldr	r2, [r3, #12]
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	005b      	lsls	r3, r3, #1
 8002084:	fa02 f303 	lsl.w	r3, r2, r3
 8002088:	693a      	ldr	r2, [r7, #16]
 800208a:	4313      	orrs	r3, r2
 800208c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	693a      	ldr	r2, [r7, #16]
 8002092:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	685b      	ldr	r3, [r3, #4]
 8002098:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800209a:	2201      	movs	r2, #1
 800209c:	697b      	ldr	r3, [r7, #20]
 800209e:	fa02 f303 	lsl.w	r3, r2, r3
 80020a2:	43db      	mvns	r3, r3
 80020a4:	693a      	ldr	r2, [r7, #16]
 80020a6:	4013      	ands	r3, r2
 80020a8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	685b      	ldr	r3, [r3, #4]
 80020ae:	091b      	lsrs	r3, r3, #4
 80020b0:	f003 0201 	and.w	r2, r3, #1
 80020b4:	697b      	ldr	r3, [r7, #20]
 80020b6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	4313      	orrs	r3, r2
 80020be:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	693a      	ldr	r2, [r7, #16]
 80020c4:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80020cc:	697b      	ldr	r3, [r7, #20]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	2203      	movs	r2, #3
 80020d2:	fa02 f303 	lsl.w	r3, r2, r3
 80020d6:	43db      	mvns	r3, r3
 80020d8:	693a      	ldr	r2, [r7, #16]
 80020da:	4013      	ands	r3, r2
 80020dc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	689a      	ldr	r2, [r3, #8]
 80020e2:	697b      	ldr	r3, [r7, #20]
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	fa02 f303 	lsl.w	r3, r2, r3
 80020ea:	693a      	ldr	r2, [r7, #16]
 80020ec:	4313      	orrs	r3, r2
 80020ee:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	693a      	ldr	r2, [r7, #16]
 80020f4:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020fe:	2b00      	cmp	r3, #0
 8002100:	f000 809a 	beq.w	8002238 <HAL_GPIO_Init+0x2b0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002104:	4b55      	ldr	r3, [pc, #340]	; (800225c <HAL_GPIO_Init+0x2d4>)
 8002106:	699b      	ldr	r3, [r3, #24]
 8002108:	4a54      	ldr	r2, [pc, #336]	; (800225c <HAL_GPIO_Init+0x2d4>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6193      	str	r3, [r2, #24]
 8002110:	4b52      	ldr	r3, [pc, #328]	; (800225c <HAL_GPIO_Init+0x2d4>)
 8002112:	699b      	ldr	r3, [r3, #24]
 8002114:	f003 0301 	and.w	r3, r3, #1
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800211c:	4a50      	ldr	r2, [pc, #320]	; (8002260 <HAL_GPIO_Init+0x2d8>)
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	089b      	lsrs	r3, r3, #2
 8002122:	3302      	adds	r3, #2
 8002124:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002128:	613b      	str	r3, [r7, #16]
        temp &= ~((0x0FU) << (4U * (position & 0x03U)));
 800212a:	697b      	ldr	r3, [r7, #20]
 800212c:	f003 0303 	and.w	r3, r3, #3
 8002130:	009b      	lsls	r3, r3, #2
 8002132:	220f      	movs	r2, #15
 8002134:	fa02 f303 	lsl.w	r3, r2, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	693a      	ldr	r2, [r7, #16]
 800213c:	4013      	ands	r3, r2
 800213e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8002146:	d013      	beq.n	8002170 <HAL_GPIO_Init+0x1e8>
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	4a46      	ldr	r2, [pc, #280]	; (8002264 <HAL_GPIO_Init+0x2dc>)
 800214c:	4293      	cmp	r3, r2
 800214e:	d00d      	beq.n	800216c <HAL_GPIO_Init+0x1e4>
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	4a45      	ldr	r2, [pc, #276]	; (8002268 <HAL_GPIO_Init+0x2e0>)
 8002154:	4293      	cmp	r3, r2
 8002156:	d007      	beq.n	8002168 <HAL_GPIO_Init+0x1e0>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	4a44      	ldr	r2, [pc, #272]	; (800226c <HAL_GPIO_Init+0x2e4>)
 800215c:	4293      	cmp	r3, r2
 800215e:	d101      	bne.n	8002164 <HAL_GPIO_Init+0x1dc>
 8002160:	2303      	movs	r3, #3
 8002162:	e006      	b.n	8002172 <HAL_GPIO_Init+0x1ea>
 8002164:	2305      	movs	r3, #5
 8002166:	e004      	b.n	8002172 <HAL_GPIO_Init+0x1ea>
 8002168:	2302      	movs	r3, #2
 800216a:	e002      	b.n	8002172 <HAL_GPIO_Init+0x1ea>
 800216c:	2301      	movs	r3, #1
 800216e:	e000      	b.n	8002172 <HAL_GPIO_Init+0x1ea>
 8002170:	2300      	movs	r3, #0
 8002172:	697a      	ldr	r2, [r7, #20]
 8002174:	f002 0203 	and.w	r2, r2, #3
 8002178:	0092      	lsls	r2, r2, #2
 800217a:	4093      	lsls	r3, r2
 800217c:	693a      	ldr	r2, [r7, #16]
 800217e:	4313      	orrs	r3, r2
 8002180:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002182:	4937      	ldr	r1, [pc, #220]	; (8002260 <HAL_GPIO_Init+0x2d8>)
 8002184:	697b      	ldr	r3, [r7, #20]
 8002186:	089b      	lsrs	r3, r3, #2
 8002188:	3302      	adds	r3, #2
 800218a:	693a      	ldr	r2, [r7, #16]
 800218c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002190:	4b37      	ldr	r3, [pc, #220]	; (8002270 <HAL_GPIO_Init+0x2e8>)
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	43db      	mvns	r3, r3
 800219a:	693a      	ldr	r2, [r7, #16]
 800219c:	4013      	ands	r3, r2
 800219e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_GPIO_Init+0x22c>
        {
          temp |= iocurrent;
 80021ac:	693a      	ldr	r2, [r7, #16]
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	4313      	orrs	r3, r2
 80021b2:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 80021b4:	4a2e      	ldr	r2, [pc, #184]	; (8002270 <HAL_GPIO_Init+0x2e8>)
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80021ba:	4b2d      	ldr	r3, [pc, #180]	; (8002270 <HAL_GPIO_Init+0x2e8>)
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	43db      	mvns	r3, r3
 80021c4:	693a      	ldr	r2, [r7, #16]
 80021c6:	4013      	ands	r3, r2
 80021c8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80021ca:	683b      	ldr	r3, [r7, #0]
 80021cc:	685b      	ldr	r3, [r3, #4]
 80021ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80021d2:	2b00      	cmp	r3, #0
 80021d4:	d003      	beq.n	80021de <HAL_GPIO_Init+0x256>
        {
          temp |= iocurrent;
 80021d6:	693a      	ldr	r2, [r7, #16]
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	4313      	orrs	r3, r2
 80021dc:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80021de:	4a24      	ldr	r2, [pc, #144]	; (8002270 <HAL_GPIO_Init+0x2e8>)
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021e4:	4b22      	ldr	r3, [pc, #136]	; (8002270 <HAL_GPIO_Init+0x2e8>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	43db      	mvns	r3, r3
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	4013      	ands	r3, r2
 80021f2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80021f4:	683b      	ldr	r3, [r7, #0]
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d003      	beq.n	8002208 <HAL_GPIO_Init+0x280>
        {
          temp |= iocurrent;
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	4313      	orrs	r3, r2
 8002206:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <HAL_GPIO_Init+0x2e8>)
 800220a:	693b      	ldr	r3, [r7, #16]
 800220c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800220e:	4b18      	ldr	r3, [pc, #96]	; (8002270 <HAL_GPIO_Init+0x2e8>)
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 8002214:	68fb      	ldr	r3, [r7, #12]
 8002216:	43db      	mvns	r3, r3
 8002218:	693a      	ldr	r2, [r7, #16]
 800221a:	4013      	ands	r3, r2
 800221c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800221e:	683b      	ldr	r3, [r7, #0]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002226:	2b00      	cmp	r3, #0
 8002228:	d003      	beq.n	8002232 <HAL_GPIO_Init+0x2aa>
        {
          temp |= iocurrent;
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	4313      	orrs	r3, r2
 8002230:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002232:	4a0f      	ldr	r2, [pc, #60]	; (8002270 <HAL_GPIO_Init+0x2e8>)
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	60d3      	str	r3, [r2, #12]
      }
    }
    
    position++;
 8002238:	697b      	ldr	r3, [r7, #20]
 800223a:	3301      	adds	r3, #1
 800223c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != RESET)
 800223e:	683b      	ldr	r3, [r7, #0]
 8002240:	681a      	ldr	r2, [r3, #0]
 8002242:	697b      	ldr	r3, [r7, #20]
 8002244:	fa22 f303 	lsr.w	r3, r2, r3
 8002248:	2b00      	cmp	r3, #0
 800224a:	f47f aea9 	bne.w	8001fa0 <HAL_GPIO_Init+0x18>
  }
}
 800224e:	bf00      	nop
 8002250:	371c      	adds	r7, #28
 8002252:	46bd      	mov	sp, r7
 8002254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002258:	4770      	bx	lr
 800225a:	bf00      	nop
 800225c:	40021000 	.word	0x40021000
 8002260:	40010000 	.word	0x40010000
 8002264:	48000400 	.word	0x48000400
 8002268:	48000800 	.word	0x48000800
 800226c:	48000c00 	.word	0x48000c00
 8002270:	40010400 	.word	0x40010400

08002274 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002274:	b480      	push	{r7}
 8002276:	b083      	sub	sp, #12
 8002278:	af00      	add	r7, sp, #0
 800227a:	6078      	str	r0, [r7, #4]
 800227c:	460b      	mov	r3, r1
 800227e:	807b      	strh	r3, [r7, #2]
 8002280:	4613      	mov	r3, r2
 8002282:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002284:	787b      	ldrb	r3, [r7, #1]
 8002286:	2b00      	cmp	r3, #0
 8002288:	d003      	beq.n	8002292 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800228a:	887a      	ldrh	r2, [r7, #2]
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002290:	e002      	b.n	8002298 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002292:	887a      	ldrh	r2, [r7, #2]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002298:	bf00      	nop
 800229a:	370c      	adds	r7, #12
 800229c:	46bd      	mov	sp, r7
 800229e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a2:	4770      	bx	lr

080022a4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
 80022ac:	460b      	mov	r3, r1
 80022ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  GPIOx->ODR ^= GPIO_Pin;
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695a      	ldr	r2, [r3, #20]
 80022b4:	887b      	ldrh	r3, [r7, #2]
 80022b6:	405a      	eors	r2, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	615a      	str	r2, [r3, #20]
}
 80022bc:	bf00      	nop
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr

080022c8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
 80022ce:	af00      	add	r7, sp, #0
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	6018      	str	r0, [r3, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022d4:	1d3b      	adds	r3, r7, #4
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d102      	bne.n	80022e2 <HAL_RCC_OscConfig+0x1a>
  {
    return HAL_ERROR;
 80022dc:	2301      	movs	r3, #1
 80022de:	f000 beda 	b.w	8003096 <HAL_RCC_OscConfig+0xdce>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022e2:	1d3b      	adds	r3, r7, #4
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	f000 816e 	beq.w	80025ce <HAL_RCC_OscConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80022f2:	4bb5      	ldr	r3, [pc, #724]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 80022f4:	685b      	ldr	r3, [r3, #4]
 80022f6:	f003 030c 	and.w	r3, r3, #12
 80022fa:	2b04      	cmp	r3, #4
 80022fc:	d00c      	beq.n	8002318 <HAL_RCC_OscConfig+0x50>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80022fe:	4bb2      	ldr	r3, [pc, #712]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 8002300:	685b      	ldr	r3, [r3, #4]
 8002302:	f003 030c 	and.w	r3, r3, #12
 8002306:	2b08      	cmp	r3, #8
 8002308:	d15a      	bne.n	80023c0 <HAL_RCC_OscConfig+0xf8>
 800230a:	4baf      	ldr	r3, [pc, #700]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 800230c:	685b      	ldr	r3, [r3, #4]
 800230e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002312:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002316:	d153      	bne.n	80023c0 <HAL_RCC_OscConfig+0xf8>
 8002318:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800231c:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002320:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8002324:	fa93 f3a3 	rbit	r3, r3
 8002328:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return(result);
 800232c:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	fab3 f383 	clz	r3, r3
 8002334:	b2db      	uxtb	r3, r3
 8002336:	095b      	lsrs	r3, r3, #5
 8002338:	b2db      	uxtb	r3, r3
 800233a:	f043 0301 	orr.w	r3, r3, #1
 800233e:	b2db      	uxtb	r3, r3
 8002340:	2b01      	cmp	r3, #1
 8002342:	d102      	bne.n	800234a <HAL_RCC_OscConfig+0x82>
 8002344:	4ba0      	ldr	r3, [pc, #640]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	e015      	b.n	8002376 <HAL_RCC_OscConfig+0xae>
 800234a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800234e:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002352:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8002356:	fa93 f3a3 	rbit	r3, r3
 800235a:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 800235e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002362:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8002366:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 800236a:	fa93 f3a3 	rbit	r3, r3
 800236e:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8002372:	4b95      	ldr	r3, [pc, #596]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 8002374:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002376:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800237a:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 800237e:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8002382:	fa92 f2a2 	rbit	r2, r2
 8002386:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return(result);
 800238a:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 800238e:	fab2 f282 	clz	r2, r2
 8002392:	b252      	sxtb	r2, r2
 8002394:	f042 0220 	orr.w	r2, r2, #32
 8002398:	b252      	sxtb	r2, r2
 800239a:	b2d2      	uxtb	r2, r2
 800239c:	f002 021f 	and.w	r2, r2, #31
 80023a0:	2101      	movs	r1, #1
 80023a2:	fa01 f202 	lsl.w	r2, r1, r2
 80023a6:	4013      	ands	r3, r2
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	f000 810f 	beq.w	80025cc <HAL_RCC_OscConfig+0x304>
 80023ae:	1d3b      	adds	r3, r7, #4
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	f040 8109 	bne.w	80025cc <HAL_RCC_OscConfig+0x304>
      {
        return HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	f000 be6b 	b.w	8003096 <HAL_RCC_OscConfig+0xdce>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023c0:	1d3b      	adds	r3, r7, #4
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023ca:	d106      	bne.n	80023da <HAL_RCC_OscConfig+0x112>
 80023cc:	4b7e      	ldr	r3, [pc, #504]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	4a7d      	ldr	r2, [pc, #500]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 80023d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80023d6:	6013      	str	r3, [r2, #0]
 80023d8:	e030      	b.n	800243c <HAL_RCC_OscConfig+0x174>
 80023da:	1d3b      	adds	r3, r7, #4
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d10c      	bne.n	80023fe <HAL_RCC_OscConfig+0x136>
 80023e4:	4b78      	ldr	r3, [pc, #480]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4a77      	ldr	r2, [pc, #476]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 80023ea:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ee:	6013      	str	r3, [r2, #0]
 80023f0:	4b75      	ldr	r3, [pc, #468]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4a74      	ldr	r2, [pc, #464]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 80023f6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023fa:	6013      	str	r3, [r2, #0]
 80023fc:	e01e      	b.n	800243c <HAL_RCC_OscConfig+0x174>
 80023fe:	1d3b      	adds	r3, r7, #4
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	685b      	ldr	r3, [r3, #4]
 8002404:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002408:	d10c      	bne.n	8002424 <HAL_RCC_OscConfig+0x15c>
 800240a:	4b6f      	ldr	r3, [pc, #444]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a6e      	ldr	r2, [pc, #440]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 8002410:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	4b6c      	ldr	r3, [pc, #432]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	4a6b      	ldr	r2, [pc, #428]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 800241c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002420:	6013      	str	r3, [r2, #0]
 8002422:	e00b      	b.n	800243c <HAL_RCC_OscConfig+0x174>
 8002424:	4b68      	ldr	r3, [pc, #416]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	4a67      	ldr	r2, [pc, #412]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 800242a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800242e:	6013      	str	r3, [r2, #0]
 8002430:	4b65      	ldr	r3, [pc, #404]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	4a64      	ldr	r2, [pc, #400]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 8002436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800243a:	6013      	str	r3, [r2, #0]
      
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800243c:	4b62      	ldr	r3, [pc, #392]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 800243e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002440:	f023 020f 	bic.w	r2, r3, #15
 8002444:	1d3b      	adds	r3, r7, #4
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	689b      	ldr	r3, [r3, #8]
 800244a:	495f      	ldr	r1, [pc, #380]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 800244c:	4313      	orrs	r3, r2
 800244e:	62cb      	str	r3, [r1, #44]	; 0x2c
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002450:	1d3b      	adds	r3, r7, #4
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b00      	cmp	r3, #0
 8002458:	d05a      	beq.n	8002510 <HAL_RCC_OscConfig+0x248>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245a:	f7fe fc3f 	bl	8000cdc <HAL_GetTick>
 800245e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	e00a      	b.n	800247a <HAL_RCC_OscConfig+0x1b2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002464:	f7fe fc3a 	bl	8000cdc <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800246e:	1ad3      	subs	r3, r2, r3
 8002470:	2b64      	cmp	r3, #100	; 0x64
 8002472:	d902      	bls.n	800247a <HAL_RCC_OscConfig+0x1b2>
          {
            return HAL_TIMEOUT;
 8002474:	2303      	movs	r3, #3
 8002476:	f000 be0e 	b.w	8003096 <HAL_RCC_OscConfig+0xdce>
 800247a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800247e:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002482:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8002486:	fa93 f3a3 	rbit	r3, r3
 800248a:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return(result);
 800248e:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002492:	fab3 f383 	clz	r3, r3
 8002496:	b2db      	uxtb	r3, r3
 8002498:	095b      	lsrs	r3, r3, #5
 800249a:	b2db      	uxtb	r3, r3
 800249c:	f043 0301 	orr.w	r3, r3, #1
 80024a0:	b2db      	uxtb	r3, r3
 80024a2:	2b01      	cmp	r3, #1
 80024a4:	d102      	bne.n	80024ac <HAL_RCC_OscConfig+0x1e4>
 80024a6:	4b48      	ldr	r3, [pc, #288]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	e015      	b.n	80024d8 <HAL_RCC_OscConfig+0x210>
 80024ac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024b0:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b4:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 80024c0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80024c4:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 80024c8:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 80024cc:	fa93 f3a3 	rbit	r3, r3
 80024d0:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 80024d4:	4b3c      	ldr	r3, [pc, #240]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 80024d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024d8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80024dc:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 80024e0:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 80024e4:	fa92 f2a2 	rbit	r2, r2
 80024e8:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return(result);
 80024ec:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 80024f0:	fab2 f282 	clz	r2, r2
 80024f4:	b252      	sxtb	r2, r2
 80024f6:	f042 0220 	orr.w	r2, r2, #32
 80024fa:	b252      	sxtb	r2, r2
 80024fc:	b2d2      	uxtb	r2, r2
 80024fe:	f002 021f 	and.w	r2, r2, #31
 8002502:	2101      	movs	r1, #1
 8002504:	fa01 f202 	lsl.w	r2, r1, r2
 8002508:	4013      	ands	r3, r2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d0aa      	beq.n	8002464 <HAL_RCC_OscConfig+0x19c>
 800250e:	e05e      	b.n	80025ce <HAL_RCC_OscConfig+0x306>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002510:	f7fe fbe4 	bl	8000cdc <HAL_GetTick>
 8002514:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002518:	e00a      	b.n	8002530 <HAL_RCC_OscConfig+0x268>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800251a:	f7fe fbdf 	bl	8000cdc <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002524:	1ad3      	subs	r3, r2, r3
 8002526:	2b64      	cmp	r3, #100	; 0x64
 8002528:	d902      	bls.n	8002530 <HAL_RCC_OscConfig+0x268>
          {
            return HAL_TIMEOUT;
 800252a:	2303      	movs	r3, #3
 800252c:	f000 bdb3 	b.w	8003096 <HAL_RCC_OscConfig+0xdce>
 8002530:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002534:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002538:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 800253c:	fa93 f3a3 	rbit	r3, r3
 8002540:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return(result);
 8002544:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002548:	fab3 f383 	clz	r3, r3
 800254c:	b2db      	uxtb	r3, r3
 800254e:	095b      	lsrs	r3, r3, #5
 8002550:	b2db      	uxtb	r3, r3
 8002552:	f043 0301 	orr.w	r3, r3, #1
 8002556:	b2db      	uxtb	r3, r3
 8002558:	2b01      	cmp	r3, #1
 800255a:	d102      	bne.n	8002562 <HAL_RCC_OscConfig+0x29a>
 800255c:	4b1a      	ldr	r3, [pc, #104]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	e015      	b.n	800258e <HAL_RCC_OscConfig+0x2c6>
 8002562:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8002566:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800256a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 800256e:	fa93 f3a3 	rbit	r3, r3
 8002572:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8002576:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800257a:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 800257e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8002582:	fa93 f3a3 	rbit	r3, r3
 8002586:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 800258a:	4b0f      	ldr	r3, [pc, #60]	; (80025c8 <HAL_RCC_OscConfig+0x300>)
 800258c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258e:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002592:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8002596:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 800259a:	fa92 f2a2 	rbit	r2, r2
 800259e:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return(result);
 80025a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 80025a6:	fab2 f282 	clz	r2, r2
 80025aa:	b252      	sxtb	r2, r2
 80025ac:	f042 0220 	orr.w	r2, r2, #32
 80025b0:	b252      	sxtb	r2, r2
 80025b2:	b2d2      	uxtb	r2, r2
 80025b4:	f002 021f 	and.w	r2, r2, #31
 80025b8:	2101      	movs	r1, #1
 80025ba:	fa01 f202 	lsl.w	r2, r1, r2
 80025be:	4013      	ands	r3, r2
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d1aa      	bne.n	800251a <HAL_RCC_OscConfig+0x252>
 80025c4:	e003      	b.n	80025ce <HAL_RCC_OscConfig+0x306>
 80025c6:	bf00      	nop
 80025c8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025cc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025ce:	1d3b      	adds	r3, r7, #4
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f003 0302 	and.w	r3, r3, #2
 80025d8:	2b00      	cmp	r3, #0
 80025da:	f000 8170 	beq.w	80028be <HAL_RCC_OscConfig+0x5f6>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80025de:	4bd0      	ldr	r3, [pc, #832]	; (8002920 <HAL_RCC_OscConfig+0x658>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 030c 	and.w	r3, r3, #12
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d00b      	beq.n	8002602 <HAL_RCC_OscConfig+0x33a>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80025ea:	4bcd      	ldr	r3, [pc, #820]	; (8002920 <HAL_RCC_OscConfig+0x658>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f003 030c 	and.w	r3, r3, #12
 80025f2:	2b08      	cmp	r3, #8
 80025f4:	d16d      	bne.n	80026d2 <HAL_RCC_OscConfig+0x40a>
 80025f6:	4bca      	ldr	r3, [pc, #808]	; (8002920 <HAL_RCC_OscConfig+0x658>)
 80025f8:	685b      	ldr	r3, [r3, #4]
 80025fa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80025fe:	2b00      	cmp	r3, #0
 8002600:	d167      	bne.n	80026d2 <HAL_RCC_OscConfig+0x40a>
 8002602:	2302      	movs	r3, #2
 8002604:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002608:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 800260c:	fa93 f3a3 	rbit	r3, r3
 8002610:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return(result);
 8002614:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002618:	fab3 f383 	clz	r3, r3
 800261c:	b2db      	uxtb	r3, r3
 800261e:	095b      	lsrs	r3, r3, #5
 8002620:	b2db      	uxtb	r3, r3
 8002622:	f043 0301 	orr.w	r3, r3, #1
 8002626:	b2db      	uxtb	r3, r3
 8002628:	2b01      	cmp	r3, #1
 800262a:	d102      	bne.n	8002632 <HAL_RCC_OscConfig+0x36a>
 800262c:	4bbc      	ldr	r3, [pc, #752]	; (8002920 <HAL_RCC_OscConfig+0x658>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	e013      	b.n	800265a <HAL_RCC_OscConfig+0x392>
 8002632:	2302      	movs	r3, #2
 8002634:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002638:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 800263c:	fa93 f3a3 	rbit	r3, r3
 8002640:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8002644:	2302      	movs	r3, #2
 8002646:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 800264a:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800264e:	fa93 f3a3 	rbit	r3, r3
 8002652:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8002656:	4bb2      	ldr	r3, [pc, #712]	; (8002920 <HAL_RCC_OscConfig+0x658>)
 8002658:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800265a:	2202      	movs	r2, #2
 800265c:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8002660:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8002664:	fa92 f2a2 	rbit	r2, r2
 8002668:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return(result);
 800266c:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8002670:	fab2 f282 	clz	r2, r2
 8002674:	b252      	sxtb	r2, r2
 8002676:	f042 0220 	orr.w	r2, r2, #32
 800267a:	b252      	sxtb	r2, r2
 800267c:	b2d2      	uxtb	r2, r2
 800267e:	f002 021f 	and.w	r2, r2, #31
 8002682:	2101      	movs	r1, #1
 8002684:	fa01 f202 	lsl.w	r2, r1, r2
 8002688:	4013      	ands	r3, r2
 800268a:	2b00      	cmp	r3, #0
 800268c:	d007      	beq.n	800269e <HAL_RCC_OscConfig+0x3d6>
 800268e:	1d3b      	adds	r3, r7, #4
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	691b      	ldr	r3, [r3, #16]
 8002694:	2b01      	cmp	r3, #1
 8002696:	d002      	beq.n	800269e <HAL_RCC_OscConfig+0x3d6>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	f000 bcfc 	b.w	8003096 <HAL_RCC_OscConfig+0xdce>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800269e:	4ba0      	ldr	r3, [pc, #640]	; (8002920 <HAL_RCC_OscConfig+0x658>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80026a6:	1d3b      	adds	r3, r7, #4
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6959      	ldr	r1, [r3, #20]
 80026ac:	23f8      	movs	r3, #248	; 0xf8
 80026ae:	f8c7 3174 	str.w	r3, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026b2:	f8d7 3174 	ldr.w	r3, [r7, #372]	; 0x174
 80026b6:	fa93 f3a3 	rbit	r3, r3
 80026ba:	f8c7 3170 	str.w	r3, [r7, #368]	; 0x170
  return(result);
 80026be:	f8d7 3170 	ldr.w	r3, [r7, #368]	; 0x170
 80026c2:	fab3 f383 	clz	r3, r3
 80026c6:	fa01 f303 	lsl.w	r3, r1, r3
 80026ca:	4995      	ldr	r1, [pc, #596]	; (8002920 <HAL_RCC_OscConfig+0x658>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026d0:	e0f5      	b.n	80028be <HAL_RCC_OscConfig+0x5f6>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80026d2:	1d3b      	adds	r3, r7, #4
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	691b      	ldr	r3, [r3, #16]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	f000 8085 	beq.w	80027e8 <HAL_RCC_OscConfig+0x520>
 80026de:	2301      	movs	r3, #1
 80026e0:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026e4:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80026e8:	fa93 f3a3 	rbit	r3, r3
 80026ec:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return(result);
 80026f0:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80026f4:	fab3 f383 	clz	r3, r3
 80026f8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80026fc:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002700:	009b      	lsls	r3, r3, #2
 8002702:	461a      	mov	r2, r3
 8002704:	2301      	movs	r3, #1
 8002706:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002708:	f7fe fae8 	bl	8000cdc <HAL_GetTick>
 800270c:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002710:	e00a      	b.n	8002728 <HAL_RCC_OscConfig+0x460>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002712:	f7fe fae3 	bl	8000cdc <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 800271c:	1ad3      	subs	r3, r2, r3
 800271e:	2b02      	cmp	r3, #2
 8002720:	d902      	bls.n	8002728 <HAL_RCC_OscConfig+0x460>
          {
            return HAL_TIMEOUT;
 8002722:	2303      	movs	r3, #3
 8002724:	f000 bcb7 	b.w	8003096 <HAL_RCC_OscConfig+0xdce>
 8002728:	2302      	movs	r3, #2
 800272a:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800272e:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8002732:	fa93 f3a3 	rbit	r3, r3
 8002736:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return(result);
 800273a:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800273e:	fab3 f383 	clz	r3, r3
 8002742:	b2db      	uxtb	r3, r3
 8002744:	095b      	lsrs	r3, r3, #5
 8002746:	b2db      	uxtb	r3, r3
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	b2db      	uxtb	r3, r3
 800274e:	2b01      	cmp	r3, #1
 8002750:	d102      	bne.n	8002758 <HAL_RCC_OscConfig+0x490>
 8002752:	4b73      	ldr	r3, [pc, #460]	; (8002920 <HAL_RCC_OscConfig+0x658>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	e013      	b.n	8002780 <HAL_RCC_OscConfig+0x4b8>
 8002758:	2302      	movs	r3, #2
 800275a:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275e:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8002762:	fa93 f3a3 	rbit	r3, r3
 8002766:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 800276a:	2302      	movs	r3, #2
 800276c:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 8002770:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8002774:	fa93 f3a3 	rbit	r3, r3
 8002778:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800277c:	4b68      	ldr	r3, [pc, #416]	; (8002920 <HAL_RCC_OscConfig+0x658>)
 800277e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002780:	2202      	movs	r2, #2
 8002782:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8002786:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 800278a:	fa92 f2a2 	rbit	r2, r2
 800278e:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return(result);
 8002792:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8002796:	fab2 f282 	clz	r2, r2
 800279a:	b252      	sxtb	r2, r2
 800279c:	f042 0220 	orr.w	r2, r2, #32
 80027a0:	b252      	sxtb	r2, r2
 80027a2:	b2d2      	uxtb	r2, r2
 80027a4:	f002 021f 	and.w	r2, r2, #31
 80027a8:	2101      	movs	r1, #1
 80027aa:	fa01 f202 	lsl.w	r2, r1, r2
 80027ae:	4013      	ands	r3, r2
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d0ae      	beq.n	8002712 <HAL_RCC_OscConfig+0x44a>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027b4:	4b5a      	ldr	r3, [pc, #360]	; (8002920 <HAL_RCC_OscConfig+0x658>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80027bc:	1d3b      	adds	r3, r7, #4
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	6959      	ldr	r1, [r3, #20]
 80027c2:	23f8      	movs	r3, #248	; 0xf8
 80027c4:	f8c7 3144 	str.w	r3, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027c8:	f8d7 3144 	ldr.w	r3, [r7, #324]	; 0x144
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	f8c7 3140 	str.w	r3, [r7, #320]	; 0x140
  return(result);
 80027d4:	f8d7 3140 	ldr.w	r3, [r7, #320]	; 0x140
 80027d8:	fab3 f383 	clz	r3, r3
 80027dc:	fa01 f303 	lsl.w	r3, r1, r3
 80027e0:	494f      	ldr	r1, [pc, #316]	; (8002920 <HAL_RCC_OscConfig+0x658>)
 80027e2:	4313      	orrs	r3, r2
 80027e4:	600b      	str	r3, [r1, #0]
 80027e6:	e06a      	b.n	80028be <HAL_RCC_OscConfig+0x5f6>
 80027e8:	2301      	movs	r3, #1
 80027ea:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ee:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80027f2:	fa93 f3a3 	rbit	r3, r3
 80027f6:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return(result);
 80027fa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027fe:	fab3 f383 	clz	r3, r3
 8002802:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002806:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	461a      	mov	r2, r3
 800280e:	2300      	movs	r3, #0
 8002810:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002812:	f7fe fa63 	bl	8000cdc <HAL_GetTick>
 8002816:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800281a:	e00a      	b.n	8002832 <HAL_RCC_OscConfig+0x56a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800281c:	f7fe fa5e 	bl	8000cdc <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002826:	1ad3      	subs	r3, r2, r3
 8002828:	2b02      	cmp	r3, #2
 800282a:	d902      	bls.n	8002832 <HAL_RCC_OscConfig+0x56a>
          {
            return HAL_TIMEOUT;
 800282c:	2303      	movs	r3, #3
 800282e:	f000 bc32 	b.w	8003096 <HAL_RCC_OscConfig+0xdce>
 8002832:	2302      	movs	r3, #2
 8002834:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002838:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800283c:	fa93 f3a3 	rbit	r3, r3
 8002840:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return(result);
 8002844:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002848:	fab3 f383 	clz	r3, r3
 800284c:	b2db      	uxtb	r3, r3
 800284e:	095b      	lsrs	r3, r3, #5
 8002850:	b2db      	uxtb	r3, r3
 8002852:	f043 0301 	orr.w	r3, r3, #1
 8002856:	b2db      	uxtb	r3, r3
 8002858:	2b01      	cmp	r3, #1
 800285a:	d102      	bne.n	8002862 <HAL_RCC_OscConfig+0x59a>
 800285c:	4b30      	ldr	r3, [pc, #192]	; (8002920 <HAL_RCC_OscConfig+0x658>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	e013      	b.n	800288a <HAL_RCC_OscConfig+0x5c2>
 8002862:	2302      	movs	r3, #2
 8002864:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002868:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 800286c:	fa93 f3a3 	rbit	r3, r3
 8002870:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 8002874:	2302      	movs	r3, #2
 8002876:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 800287a:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 800287e:	fa93 f3a3 	rbit	r3, r3
 8002882:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8002886:	4b26      	ldr	r3, [pc, #152]	; (8002920 <HAL_RCC_OscConfig+0x658>)
 8002888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800288a:	2202      	movs	r2, #2
 800288c:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 8002890:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 8002894:	fa92 f2a2 	rbit	r2, r2
 8002898:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return(result);
 800289c:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80028a0:	fab2 f282 	clz	r2, r2
 80028a4:	b252      	sxtb	r2, r2
 80028a6:	f042 0220 	orr.w	r2, r2, #32
 80028aa:	b252      	sxtb	r2, r2
 80028ac:	b2d2      	uxtb	r2, r2
 80028ae:	f002 021f 	and.w	r2, r2, #31
 80028b2:	2101      	movs	r1, #1
 80028b4:	fa01 f202 	lsl.w	r2, r1, r2
 80028b8:	4013      	ands	r3, r2
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d1ae      	bne.n	800281c <HAL_RCC_OscConfig+0x554>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028be:	1d3b      	adds	r3, r7, #4
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	f003 0308 	and.w	r3, r3, #8
 80028c8:	2b00      	cmp	r3, #0
 80028ca:	f000 80d8 	beq.w	8002a7e <HAL_RCC_OscConfig+0x7b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	699b      	ldr	r3, [r3, #24]
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d067      	beq.n	80029a8 <HAL_RCC_OscConfig+0x6e0>
 80028d8:	2301      	movs	r3, #1
 80028da:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028de:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80028e2:	fa93 f3a3 	rbit	r3, r3
 80028e6:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return(result);
 80028ea:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ee:	fab3 f383 	clz	r3, r3
 80028f2:	461a      	mov	r2, r3
 80028f4:	4b0b      	ldr	r3, [pc, #44]	; (8002924 <HAL_RCC_OscConfig+0x65c>)
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	461a      	mov	r2, r3
 80028fc:	2301      	movs	r3, #1
 80028fe:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002900:	f7fe f9ec 	bl	8000cdc <HAL_GetTick>
 8002904:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002908:	e00e      	b.n	8002928 <HAL_RCC_OscConfig+0x660>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800290a:	f7fe f9e7 	bl	8000cdc <HAL_GetTick>
 800290e:	4602      	mov	r2, r0
 8002910:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002914:	1ad3      	subs	r3, r2, r3
 8002916:	2b02      	cmp	r3, #2
 8002918:	d906      	bls.n	8002928 <HAL_RCC_OscConfig+0x660>
        {
          return HAL_TIMEOUT;
 800291a:	2303      	movs	r3, #3
 800291c:	e3bb      	b.n	8003096 <HAL_RCC_OscConfig+0xdce>
 800291e:	bf00      	nop
 8002920:	40021000 	.word	0x40021000
 8002924:	10908120 	.word	0x10908120
 8002928:	2302      	movs	r3, #2
 800292a:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800292e:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002932:	fa93 f3a3 	rbit	r3, r3
 8002936:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800293a:	2302      	movs	r3, #2
 800293c:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8002940:	f8d7 3104 	ldr.w	r3, [r7, #260]	; 0x104
 8002944:	fa93 f2a3 	rbit	r2, r3
 8002948:	f507 7380 	add.w	r3, r7, #256	; 0x100
 800294c:	601a      	str	r2, [r3, #0]
 800294e:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 8002952:	2202      	movs	r2, #2
 8002954:	601a      	str	r2, [r3, #0]
 8002956:	f107 03fc 	add.w	r3, r7, #252	; 0xfc
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	fa93 f2a3 	rbit	r2, r3
 8002960:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8002964:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002966:	4ba5      	ldr	r3, [pc, #660]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002968:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800296a:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 800296e:	2102      	movs	r1, #2
 8002970:	6019      	str	r1, [r3, #0]
 8002972:	f107 03f4 	add.w	r3, r7, #244	; 0xf4
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	fa93 f1a3 	rbit	r1, r3
 800297c:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002980:	6019      	str	r1, [r3, #0]
  return(result);
 8002982:	f107 03f0 	add.w	r3, r7, #240	; 0xf0
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	fab3 f383 	clz	r3, r3
 800298c:	b25b      	sxtb	r3, r3
 800298e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002992:	b25b      	sxtb	r3, r3
 8002994:	b2db      	uxtb	r3, r3
 8002996:	f003 031f 	and.w	r3, r3, #31
 800299a:	2101      	movs	r1, #1
 800299c:	fa01 f303 	lsl.w	r3, r1, r3
 80029a0:	4013      	ands	r3, r2
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d0b1      	beq.n	800290a <HAL_RCC_OscConfig+0x642>
 80029a6:	e06a      	b.n	8002a7e <HAL_RCC_OscConfig+0x7b6>
 80029a8:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80029ac:	2201      	movs	r2, #1
 80029ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b0:	f107 03ec 	add.w	r3, r7, #236	; 0xec
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	fa93 f2a3 	rbit	r2, r3
 80029ba:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80029be:	601a      	str	r2, [r3, #0]
  return(result);
 80029c0:	f107 03e8 	add.w	r3, r7, #232	; 0xe8
 80029c4:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c6:	fab3 f383 	clz	r3, r3
 80029ca:	461a      	mov	r2, r3
 80029cc:	4b8c      	ldr	r3, [pc, #560]	; (8002c00 <HAL_RCC_OscConfig+0x938>)
 80029ce:	4413      	add	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	461a      	mov	r2, r3
 80029d4:	2300      	movs	r3, #0
 80029d6:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029d8:	f7fe f980 	bl	8000cdc <HAL_GetTick>
 80029dc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029e0:	e009      	b.n	80029f6 <HAL_RCC_OscConfig+0x72e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029e2:	f7fe f97b 	bl	8000cdc <HAL_GetTick>
 80029e6:	4602      	mov	r2, r0
 80029e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	2b02      	cmp	r3, #2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_OscConfig+0x72e>
        {
          return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e34f      	b.n	8003096 <HAL_RCC_OscConfig+0xdce>
 80029f6:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 80029fa:	2202      	movs	r2, #2
 80029fc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029fe:	f107 03e4 	add.w	r3, r7, #228	; 0xe4
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	fa93 f2a3 	rbit	r2, r3
 8002a08:	f107 03e0 	add.w	r3, r7, #224	; 0xe0
 8002a0c:	601a      	str	r2, [r3, #0]
 8002a0e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a12:	2202      	movs	r2, #2
 8002a14:	601a      	str	r2, [r3, #0]
 8002a16:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	fa93 f2a3 	rbit	r2, r3
 8002a20:	f107 03d8 	add.w	r3, r7, #216	; 0xd8
 8002a24:	601a      	str	r2, [r3, #0]
 8002a26:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a2a:	2202      	movs	r2, #2
 8002a2c:	601a      	str	r2, [r3, #0]
 8002a2e:	f107 03d4 	add.w	r3, r7, #212	; 0xd4
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	fa93 f2a3 	rbit	r2, r3
 8002a38:	f107 03d0 	add.w	r3, r7, #208	; 0xd0
 8002a3c:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a3e:	4b6f      	ldr	r3, [pc, #444]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002a40:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a42:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a46:	2102      	movs	r1, #2
 8002a48:	6019      	str	r1, [r3, #0]
 8002a4a:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	fa93 f1a3 	rbit	r1, r3
 8002a54:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a58:	6019      	str	r1, [r3, #0]
  return(result);
 8002a5a:	f107 03c8 	add.w	r3, r7, #200	; 0xc8
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	fab3 f383 	clz	r3, r3
 8002a64:	b25b      	sxtb	r3, r3
 8002a66:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8002a6a:	b25b      	sxtb	r3, r3
 8002a6c:	b2db      	uxtb	r3, r3
 8002a6e:	f003 031f 	and.w	r3, r3, #31
 8002a72:	2101      	movs	r1, #1
 8002a74:	fa01 f303 	lsl.w	r3, r1, r3
 8002a78:	4013      	ands	r3, r2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d1b1      	bne.n	80029e2 <HAL_RCC_OscConfig+0x71a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a7e:	1d3b      	adds	r3, r7, #4
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f003 0304 	and.w	r3, r3, #4
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	f000 8159 	beq.w	8002d40 <HAL_RCC_OscConfig+0xa78>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a8e:	2300      	movs	r3, #0
 8002a90:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a94:	4b59      	ldr	r3, [pc, #356]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002a96:	69db      	ldr	r3, [r3, #28]
 8002a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d112      	bne.n	8002ac6 <HAL_RCC_OscConfig+0x7fe>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002aa0:	4b56      	ldr	r3, [pc, #344]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002aa2:	69db      	ldr	r3, [r3, #28]
 8002aa4:	4a55      	ldr	r2, [pc, #340]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002aa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002aaa:	61d3      	str	r3, [r2, #28]
 8002aac:	4b53      	ldr	r3, [pc, #332]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002aae:	69db      	ldr	r3, [r3, #28]
 8002ab0:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 8002ab4:	f107 030c 	add.w	r3, r7, #12
 8002ab8:	601a      	str	r2, [r3, #0]
 8002aba:	f107 030c 	add.w	r3, r7, #12
 8002abe:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8002ac0:	2301      	movs	r3, #1
 8002ac2:	f887 31ff 	strb.w	r3, [r7, #511]	; 0x1ff
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ac6:	4b4f      	ldr	r3, [pc, #316]	; (8002c04 <HAL_RCC_OscConfig+0x93c>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d11a      	bne.n	8002b08 <HAL_RCC_OscConfig+0x840>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ad2:	4b4c      	ldr	r3, [pc, #304]	; (8002c04 <HAL_RCC_OscConfig+0x93c>)
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4a4b      	ldr	r2, [pc, #300]	; (8002c04 <HAL_RCC_OscConfig+0x93c>)
 8002ad8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002adc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ade:	f7fe f8fd 	bl	8000cdc <HAL_GetTick>
 8002ae2:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ae6:	e009      	b.n	8002afc <HAL_RCC_OscConfig+0x834>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ae8:	f7fe f8f8 	bl	8000cdc <HAL_GetTick>
 8002aec:	4602      	mov	r2, r0
 8002aee:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002af2:	1ad3      	subs	r3, r2, r3
 8002af4:	2b64      	cmp	r3, #100	; 0x64
 8002af6:	d901      	bls.n	8002afc <HAL_RCC_OscConfig+0x834>
        {
          return HAL_TIMEOUT;
 8002af8:	2303      	movs	r3, #3
 8002afa:	e2cc      	b.n	8003096 <HAL_RCC_OscConfig+0xdce>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002afc:	4b41      	ldr	r3, [pc, #260]	; (8002c04 <HAL_RCC_OscConfig+0x93c>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	d0ef      	beq.n	8002ae8 <HAL_RCC_OscConfig+0x820>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b08:	1d3b      	adds	r3, r7, #4
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d106      	bne.n	8002b20 <HAL_RCC_OscConfig+0x858>
 8002b12:	4b3a      	ldr	r3, [pc, #232]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002b14:	6a1b      	ldr	r3, [r3, #32]
 8002b16:	4a39      	ldr	r2, [pc, #228]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002b18:	f043 0301 	orr.w	r3, r3, #1
 8002b1c:	6213      	str	r3, [r2, #32]
 8002b1e:	e02f      	b.n	8002b80 <HAL_RCC_OscConfig+0x8b8>
 8002b20:	1d3b      	adds	r3, r7, #4
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d10c      	bne.n	8002b44 <HAL_RCC_OscConfig+0x87c>
 8002b2a:	4b34      	ldr	r3, [pc, #208]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	4a33      	ldr	r2, [pc, #204]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	6213      	str	r3, [r2, #32]
 8002b36:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002b38:	6a1b      	ldr	r3, [r3, #32]
 8002b3a:	4a30      	ldr	r2, [pc, #192]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002b3c:	f023 0304 	bic.w	r3, r3, #4
 8002b40:	6213      	str	r3, [r2, #32]
 8002b42:	e01d      	b.n	8002b80 <HAL_RCC_OscConfig+0x8b8>
 8002b44:	1d3b      	adds	r3, r7, #4
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	68db      	ldr	r3, [r3, #12]
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d10c      	bne.n	8002b68 <HAL_RCC_OscConfig+0x8a0>
 8002b4e:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002b50:	6a1b      	ldr	r3, [r3, #32]
 8002b52:	4a2a      	ldr	r2, [pc, #168]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002b54:	f043 0304 	orr.w	r3, r3, #4
 8002b58:	6213      	str	r3, [r2, #32]
 8002b5a:	4b28      	ldr	r3, [pc, #160]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002b5c:	6a1b      	ldr	r3, [r3, #32]
 8002b5e:	4a27      	ldr	r2, [pc, #156]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002b60:	f043 0301 	orr.w	r3, r3, #1
 8002b64:	6213      	str	r3, [r2, #32]
 8002b66:	e00b      	b.n	8002b80 <HAL_RCC_OscConfig+0x8b8>
 8002b68:	4b24      	ldr	r3, [pc, #144]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002b6a:	6a1b      	ldr	r3, [r3, #32]
 8002b6c:	4a23      	ldr	r2, [pc, #140]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002b6e:	f023 0301 	bic.w	r3, r3, #1
 8002b72:	6213      	str	r3, [r2, #32]
 8002b74:	4b21      	ldr	r3, [pc, #132]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002b76:	6a1b      	ldr	r3, [r3, #32]
 8002b78:	4a20      	ldr	r2, [pc, #128]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002b7a:	f023 0304 	bic.w	r3, r3, #4
 8002b7e:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002b80:	1d3b      	adds	r3, r7, #4
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	68db      	ldr	r3, [r3, #12]
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d06b      	beq.n	8002c62 <HAL_RCC_OscConfig+0x99a>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b8a:	f7fe f8a7 	bl	8000cdc <HAL_GetTick>
 8002b8e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b92:	e00b      	b.n	8002bac <HAL_RCC_OscConfig+0x8e4>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b94:	f7fe f8a2 	bl	8000cdc <HAL_GetTick>
 8002b98:	4602      	mov	r2, r0
 8002b9a:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002b9e:	1ad3      	subs	r3, r2, r3
 8002ba0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d901      	bls.n	8002bac <HAL_RCC_OscConfig+0x8e4>
        {
          return HAL_TIMEOUT;
 8002ba8:	2303      	movs	r3, #3
 8002baa:	e274      	b.n	8003096 <HAL_RCC_OscConfig+0xdce>
 8002bac:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bb0:	2202      	movs	r2, #2
 8002bb2:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bb4:	f107 03c4 	add.w	r3, r7, #196	; 0xc4
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	fa93 f2a3 	rbit	r2, r3
 8002bbe:	f107 03c0 	add.w	r3, r7, #192	; 0xc0
 8002bc2:	601a      	str	r2, [r3, #0]
 8002bc4:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002bc8:	2202      	movs	r2, #2
 8002bca:	601a      	str	r2, [r3, #0]
 8002bcc:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	fa93 f2a3 	rbit	r2, r3
 8002bd6:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002bda:	601a      	str	r2, [r3, #0]
  return(result);
 8002bdc:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8002be0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002be2:	fab3 f383 	clz	r3, r3
 8002be6:	b2db      	uxtb	r3, r3
 8002be8:	095b      	lsrs	r3, r3, #5
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	f043 0302 	orr.w	r3, r3, #2
 8002bf0:	b2db      	uxtb	r3, r3
 8002bf2:	2b02      	cmp	r3, #2
 8002bf4:	d108      	bne.n	8002c08 <HAL_RCC_OscConfig+0x940>
 8002bf6:	4b01      	ldr	r3, [pc, #4]	; (8002bfc <HAL_RCC_OscConfig+0x934>)
 8002bf8:	6a1b      	ldr	r3, [r3, #32]
 8002bfa:	e013      	b.n	8002c24 <HAL_RCC_OscConfig+0x95c>
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	10908120 	.word	0x10908120
 8002c04:	40007000 	.word	0x40007000
 8002c08:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c0c:	2202      	movs	r2, #2
 8002c0e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c10:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	fa93 f2a3 	rbit	r2, r3
 8002c1a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8002c1e:	601a      	str	r2, [r3, #0]
 8002c20:	4bbb      	ldr	r3, [pc, #748]	; (8002f10 <HAL_RCC_OscConfig+0xc48>)
 8002c22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c24:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002c28:	2102      	movs	r1, #2
 8002c2a:	6011      	str	r1, [r2, #0]
 8002c2c:	f107 02ac 	add.w	r2, r7, #172	; 0xac
 8002c30:	6812      	ldr	r2, [r2, #0]
 8002c32:	fa92 f1a2 	rbit	r1, r2
 8002c36:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c3a:	6011      	str	r1, [r2, #0]
  return(result);
 8002c3c:	f107 02a8 	add.w	r2, r7, #168	; 0xa8
 8002c40:	6812      	ldr	r2, [r2, #0]
 8002c42:	fab2 f282 	clz	r2, r2
 8002c46:	b252      	sxtb	r2, r2
 8002c48:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002c4c:	b252      	sxtb	r2, r2
 8002c4e:	b2d2      	uxtb	r2, r2
 8002c50:	f002 021f 	and.w	r2, r2, #31
 8002c54:	2101      	movs	r1, #1
 8002c56:	fa01 f202 	lsl.w	r2, r1, r2
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d099      	beq.n	8002b94 <HAL_RCC_OscConfig+0x8cc>
 8002c60:	e064      	b.n	8002d2c <HAL_RCC_OscConfig+0xa64>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c62:	f7fe f83b 	bl	8000cdc <HAL_GetTick>
 8002c66:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6a:	e00b      	b.n	8002c84 <HAL_RCC_OscConfig+0x9bc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c6c:	f7fe f836 	bl	8000cdc <HAL_GetTick>
 8002c70:	4602      	mov	r2, r0
 8002c72:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002c76:	1ad3      	subs	r3, r2, r3
 8002c78:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d901      	bls.n	8002c84 <HAL_RCC_OscConfig+0x9bc>
        {
          return HAL_TIMEOUT;
 8002c80:	2303      	movs	r3, #3
 8002c82:	e208      	b.n	8003096 <HAL_RCC_OscConfig+0xdce>
 8002c84:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c88:	2202      	movs	r2, #2
 8002c8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	fa93 f2a3 	rbit	r2, r3
 8002c96:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8002c9a:	601a      	str	r2, [r3, #0]
 8002c9c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ca0:	2202      	movs	r2, #2
 8002ca2:	601a      	str	r2, [r3, #0]
 8002ca4:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	fa93 f2a3 	rbit	r2, r3
 8002cae:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002cb2:	601a      	str	r2, [r3, #0]
  return(result);
 8002cb4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8002cb8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cba:	fab3 f383 	clz	r3, r3
 8002cbe:	b2db      	uxtb	r3, r3
 8002cc0:	095b      	lsrs	r3, r3, #5
 8002cc2:	b2db      	uxtb	r3, r3
 8002cc4:	f043 0302 	orr.w	r3, r3, #2
 8002cc8:	b2db      	uxtb	r3, r3
 8002cca:	2b02      	cmp	r3, #2
 8002ccc:	d102      	bne.n	8002cd4 <HAL_RCC_OscConfig+0xa0c>
 8002cce:	4b90      	ldr	r3, [pc, #576]	; (8002f10 <HAL_RCC_OscConfig+0xc48>)
 8002cd0:	6a1b      	ldr	r3, [r3, #32]
 8002cd2:	e00d      	b.n	8002cf0 <HAL_RCC_OscConfig+0xa28>
 8002cd4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002cd8:	2202      	movs	r2, #2
 8002cda:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002cdc:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	fa93 f2a3 	rbit	r2, r3
 8002ce6:	f107 0390 	add.w	r3, r7, #144	; 0x90
 8002cea:	601a      	str	r2, [r3, #0]
 8002cec:	4b88      	ldr	r3, [pc, #544]	; (8002f10 <HAL_RCC_OscConfig+0xc48>)
 8002cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cf0:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002cf4:	2102      	movs	r1, #2
 8002cf6:	6011      	str	r1, [r2, #0]
 8002cf8:	f107 028c 	add.w	r2, r7, #140	; 0x8c
 8002cfc:	6812      	ldr	r2, [r2, #0]
 8002cfe:	fa92 f1a2 	rbit	r1, r2
 8002d02:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d06:	6011      	str	r1, [r2, #0]
  return(result);
 8002d08:	f107 0288 	add.w	r2, r7, #136	; 0x88
 8002d0c:	6812      	ldr	r2, [r2, #0]
 8002d0e:	fab2 f282 	clz	r2, r2
 8002d12:	b252      	sxtb	r2, r2
 8002d14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d18:	b252      	sxtb	r2, r2
 8002d1a:	b2d2      	uxtb	r2, r2
 8002d1c:	f002 021f 	and.w	r2, r2, #31
 8002d20:	2101      	movs	r1, #1
 8002d22:	fa01 f202 	lsl.w	r2, r1, r2
 8002d26:	4013      	ands	r3, r2
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d19f      	bne.n	8002c6c <HAL_RCC_OscConfig+0x9a4>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002d2c:	f897 31ff 	ldrb.w	r3, [r7, #511]	; 0x1ff
 8002d30:	2b01      	cmp	r3, #1
 8002d32:	d105      	bne.n	8002d40 <HAL_RCC_OscConfig+0xa78>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d34:	4b76      	ldr	r3, [pc, #472]	; (8002f10 <HAL_RCC_OscConfig+0xc48>)
 8002d36:	69db      	ldr	r3, [r3, #28]
 8002d38:	4a75      	ldr	r2, [pc, #468]	; (8002f10 <HAL_RCC_OscConfig+0xc48>)
 8002d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002d3e:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002d40:	1d3b      	adds	r3, r7, #4
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	69db      	ldr	r3, [r3, #28]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	f000 81a4 	beq.w	8003094 <HAL_RCC_OscConfig+0xdcc>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d4c:	4b70      	ldr	r3, [pc, #448]	; (8002f10 <HAL_RCC_OscConfig+0xc48>)
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f003 030c 	and.w	r3, r3, #12
 8002d54:	2b08      	cmp	r3, #8
 8002d56:	f000 819b 	beq.w	8003090 <HAL_RCC_OscConfig+0xdc8>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002d5a:	1d3b      	adds	r3, r7, #4
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	69db      	ldr	r3, [r3, #28]
 8002d60:	2b02      	cmp	r3, #2
 8002d62:	f040 8113 	bne.w	8002f8c <HAL_RCC_OscConfig+0xcc4>
 8002d66:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002d6a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002d6e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d70:	f107 0384 	add.w	r3, r7, #132	; 0x84
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	fa93 f2a3 	rbit	r2, r3
 8002d7a:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d7e:	601a      	str	r2, [r3, #0]
  return(result);
 8002d80:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8002d84:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d86:	fab3 f383 	clz	r3, r3
 8002d8a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002d8e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002d92:	009b      	lsls	r3, r3, #2
 8002d94:	461a      	mov	r2, r3
 8002d96:	2300      	movs	r3, #0
 8002d98:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d9a:	f7fd ff9f 	bl	8000cdc <HAL_GetTick>
 8002d9e:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002da2:	e009      	b.n	8002db8 <HAL_RCC_OscConfig+0xaf0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002da4:	f7fd ff9a 	bl	8000cdc <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002dae:	1ad3      	subs	r3, r2, r3
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d901      	bls.n	8002db8 <HAL_RCC_OscConfig+0xaf0>
          {
            return HAL_TIMEOUT;
 8002db4:	2303      	movs	r3, #3
 8002db6:	e16e      	b.n	8003096 <HAL_RCC_OscConfig+0xdce>
 8002db8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002dbc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dc0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dc2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	fa93 f2a3 	rbit	r2, r3
 8002dcc:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002dd0:	601a      	str	r2, [r3, #0]
  return(result);
 8002dd2:	f107 0378 	add.w	r3, r7, #120	; 0x78
 8002dd6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002dd8:	fab3 f383 	clz	r3, r3
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	095b      	lsrs	r3, r3, #5
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	f043 0301 	orr.w	r3, r3, #1
 8002de6:	b2db      	uxtb	r3, r3
 8002de8:	2b01      	cmp	r3, #1
 8002dea:	d102      	bne.n	8002df2 <HAL_RCC_OscConfig+0xb2a>
 8002dec:	4b48      	ldr	r3, [pc, #288]	; (8002f10 <HAL_RCC_OscConfig+0xc48>)
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	e01b      	b.n	8002e2a <HAL_RCC_OscConfig+0xb62>
 8002df2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002df6:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002dfa:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002dfc:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	fa93 f2a3 	rbit	r2, r3
 8002e06:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8002e0a:	601a      	str	r2, [r3, #0]
 8002e0c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e10:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002e14:	601a      	str	r2, [r3, #0]
 8002e16:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	fa93 f2a3 	rbit	r2, r3
 8002e20:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8002e24:	601a      	str	r2, [r3, #0]
 8002e26:	4b3a      	ldr	r3, [pc, #232]	; (8002f10 <HAL_RCC_OscConfig+0xc48>)
 8002e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e2a:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002e2e:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002e32:	6011      	str	r1, [r2, #0]
 8002e34:	f107 0264 	add.w	r2, r7, #100	; 0x64
 8002e38:	6812      	ldr	r2, [r2, #0]
 8002e3a:	fa92 f1a2 	rbit	r1, r2
 8002e3e:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e42:	6011      	str	r1, [r2, #0]
  return(result);
 8002e44:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8002e48:	6812      	ldr	r2, [r2, #0]
 8002e4a:	fab2 f282 	clz	r2, r2
 8002e4e:	b252      	sxtb	r2, r2
 8002e50:	f042 0220 	orr.w	r2, r2, #32
 8002e54:	b252      	sxtb	r2, r2
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	f002 021f 	and.w	r2, r2, #31
 8002e5c:	2101      	movs	r1, #1
 8002e5e:	fa01 f202 	lsl.w	r2, r1, r2
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d19d      	bne.n	8002da4 <HAL_RCC_OscConfig+0xadc>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                             RCC_OscInitStruct->PLL.PREDIV,
                             RCC_OscInitStruct->PLL.PLLMUL);
#else
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002e68:	4b29      	ldr	r3, [pc, #164]	; (8002f10 <HAL_RCC_OscConfig+0xc48>)
 8002e6a:	685b      	ldr	r3, [r3, #4]
 8002e6c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002e70:	1d3b      	adds	r3, r7, #4
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8002e76:	1d3b      	adds	r3, r7, #4
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6a1b      	ldr	r3, [r3, #32]
 8002e7c:	430b      	orrs	r3, r1
 8002e7e:	4924      	ldr	r1, [pc, #144]	; (8002f10 <HAL_RCC_OscConfig+0xc48>)
 8002e80:	4313      	orrs	r3, r2
 8002e82:	604b      	str	r3, [r1, #4]
 8002e84:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e88:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e8c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e8e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	fa93 f2a3 	rbit	r2, r3
 8002e98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002e9c:	601a      	str	r2, [r3, #0]
  return(result);
 8002e9e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ea2:	681b      	ldr	r3, [r3, #0]
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ea4:	fab3 f383 	clz	r3, r3
 8002ea8:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002eac:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002eb8:	f7fd ff10 	bl	8000cdc <HAL_GetTick>
 8002ebc:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ec0:	e009      	b.n	8002ed6 <HAL_RCC_OscConfig+0xc0e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ec2:	f7fd ff0b 	bl	8000cdc <HAL_GetTick>
 8002ec6:	4602      	mov	r2, r0
 8002ec8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002ecc:	1ad3      	subs	r3, r2, r3
 8002ece:	2b02      	cmp	r3, #2
 8002ed0:	d901      	bls.n	8002ed6 <HAL_RCC_OscConfig+0xc0e>
          {
            return HAL_TIMEOUT;
 8002ed2:	2303      	movs	r3, #3
 8002ed4:	e0df      	b.n	8003096 <HAL_RCC_OscConfig+0xdce>
 8002ed6:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002eda:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002ede:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ee0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	fa93 f2a3 	rbit	r2, r3
 8002eea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002eee:	601a      	str	r2, [r3, #0]
  return(result);
 8002ef0:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8002ef4:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002ef6:	fab3 f383 	clz	r3, r3
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	095b      	lsrs	r3, r3, #5
 8002efe:	b2db      	uxtb	r3, r3
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	b2db      	uxtb	r3, r3
 8002f06:	2b01      	cmp	r3, #1
 8002f08:	d104      	bne.n	8002f14 <HAL_RCC_OscConfig+0xc4c>
 8002f0a:	4b01      	ldr	r3, [pc, #4]	; (8002f10 <HAL_RCC_OscConfig+0xc48>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	e01d      	b.n	8002f4c <HAL_RCC_OscConfig+0xc84>
 8002f10:	40021000 	.word	0x40021000
 8002f14:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f1e:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	fa93 f2a3 	rbit	r2, r3
 8002f28:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002f2c:	601a      	str	r2, [r3, #0]
 8002f2e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f32:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002f36:	601a      	str	r2, [r3, #0]
 8002f38:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	fa93 f2a3 	rbit	r2, r3
 8002f42:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002f46:	601a      	str	r2, [r3, #0]
 8002f48:	4b55      	ldr	r3, [pc, #340]	; (80030a0 <HAL_RCC_OscConfig+0xdd8>)
 8002f4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f4c:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002f50:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8002f54:	6011      	str	r1, [r2, #0]
 8002f56:	f107 023c 	add.w	r2, r7, #60	; 0x3c
 8002f5a:	6812      	ldr	r2, [r2, #0]
 8002f5c:	fa92 f1a2 	rbit	r1, r2
 8002f60:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f64:	6011      	str	r1, [r2, #0]
  return(result);
 8002f66:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8002f6a:	6812      	ldr	r2, [r2, #0]
 8002f6c:	fab2 f282 	clz	r2, r2
 8002f70:	b252      	sxtb	r2, r2
 8002f72:	f042 0220 	orr.w	r2, r2, #32
 8002f76:	b252      	sxtb	r2, r2
 8002f78:	b2d2      	uxtb	r2, r2
 8002f7a:	f002 021f 	and.w	r2, r2, #31
 8002f7e:	2101      	movs	r1, #1
 8002f80:	fa01 f202 	lsl.w	r2, r1, r2
 8002f84:	4013      	ands	r3, r2
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d09b      	beq.n	8002ec2 <HAL_RCC_OscConfig+0xbfa>
 8002f8a:	e083      	b.n	8003094 <HAL_RCC_OscConfig+0xdcc>
 8002f8c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f90:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f94:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f96:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	fa93 f2a3 	rbit	r2, r3
 8002fa0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002fa4:	601a      	str	r2, [r3, #0]
  return(result);
 8002fa6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002faa:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fac:	fab3 f383 	clz	r3, r3
 8002fb0:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8002fb4:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	461a      	mov	r2, r3
 8002fbc:	2300      	movs	r3, #0
 8002fbe:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fc0:	f7fd fe8c 	bl	8000cdc <HAL_GetTick>
 8002fc4:	f8c7 01f8 	str.w	r0, [r7, #504]	; 0x1f8
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fc8:	e009      	b.n	8002fde <HAL_RCC_OscConfig+0xd16>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002fca:	f7fd fe87 	bl	8000cdc <HAL_GetTick>
 8002fce:	4602      	mov	r2, r0
 8002fd0:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8002fd4:	1ad3      	subs	r3, r2, r3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d901      	bls.n	8002fde <HAL_RCC_OscConfig+0xd16>
          {
            return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e05b      	b.n	8003096 <HAL_RCC_OscConfig+0xdce>
 8002fde:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fe2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8002fe6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fe8:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	fa93 f2a3 	rbit	r2, r3
 8002ff2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ff6:	601a      	str	r2, [r3, #0]
  return(result);
 8002ff8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002ffc:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002ffe:	fab3 f383 	clz	r3, r3
 8003002:	b2db      	uxtb	r3, r3
 8003004:	095b      	lsrs	r3, r3, #5
 8003006:	b2db      	uxtb	r3, r3
 8003008:	f043 0301 	orr.w	r3, r3, #1
 800300c:	b2db      	uxtb	r3, r3
 800300e:	2b01      	cmp	r3, #1
 8003010:	d102      	bne.n	8003018 <HAL_RCC_OscConfig+0xd50>
 8003012:	4b23      	ldr	r3, [pc, #140]	; (80030a0 <HAL_RCC_OscConfig+0xdd8>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	e01b      	b.n	8003050 <HAL_RCC_OscConfig+0xd88>
 8003018:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800301c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8003020:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003022:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	fa93 f2a3 	rbit	r2, r3
 800302c:	f107 0320 	add.w	r3, r7, #32
 8003030:	601a      	str	r2, [r3, #0]
 8003032:	f107 031c 	add.w	r3, r7, #28
 8003036:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800303a:	601a      	str	r2, [r3, #0]
 800303c:	f107 031c 	add.w	r3, r7, #28
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	fa93 f2a3 	rbit	r2, r3
 8003046:	f107 0318 	add.w	r3, r7, #24
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	4b14      	ldr	r3, [pc, #80]	; (80030a0 <HAL_RCC_OscConfig+0xdd8>)
 800304e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003050:	f107 0214 	add.w	r2, r7, #20
 8003054:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8003058:	6011      	str	r1, [r2, #0]
 800305a:	f107 0214 	add.w	r2, r7, #20
 800305e:	6812      	ldr	r2, [r2, #0]
 8003060:	fa92 f1a2 	rbit	r1, r2
 8003064:	f107 0210 	add.w	r2, r7, #16
 8003068:	6011      	str	r1, [r2, #0]
  return(result);
 800306a:	f107 0210 	add.w	r2, r7, #16
 800306e:	6812      	ldr	r2, [r2, #0]
 8003070:	fab2 f282 	clz	r2, r2
 8003074:	b252      	sxtb	r2, r2
 8003076:	f042 0220 	orr.w	r2, r2, #32
 800307a:	b252      	sxtb	r2, r2
 800307c:	b2d2      	uxtb	r2, r2
 800307e:	f002 021f 	and.w	r2, r2, #31
 8003082:	2101      	movs	r1, #1
 8003084:	fa01 f202 	lsl.w	r2, r1, r2
 8003088:	4013      	ands	r3, r2
 800308a:	2b00      	cmp	r3, #0
 800308c:	d19d      	bne.n	8002fca <HAL_RCC_OscConfig+0xd02>
 800308e:	e001      	b.n	8003094 <HAL_RCC_OscConfig+0xdcc>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_RCC_OscConfig+0xdce>
    }
  }
  
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	f507 7700 	add.w	r7, r7, #512	; 0x200
 800309c:	46bd      	mov	sp, r7
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40021000 	.word	0x40021000

080030a4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b09e      	sub	sp, #120	; 0x78
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
 80030ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80030ae:	2300      	movs	r3, #0
 80030b0:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d101      	bne.n	80030bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	e164      	b.n	8003386 <HAL_RCC_ClockConfig+0x2e2>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80030bc:	4b92      	ldr	r3, [pc, #584]	; (8003308 <HAL_RCC_ClockConfig+0x264>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	f003 0307 	and.w	r3, r3, #7
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d910      	bls.n	80030ec <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030ca:	4b8f      	ldr	r3, [pc, #572]	; (8003308 <HAL_RCC_ClockConfig+0x264>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f023 0207 	bic.w	r2, r3, #7
 80030d2:	498d      	ldr	r1, [pc, #564]	; (8003308 <HAL_RCC_ClockConfig+0x264>)
 80030d4:	683b      	ldr	r3, [r7, #0]
 80030d6:	4313      	orrs	r3, r2
 80030d8:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80030da:	4b8b      	ldr	r3, [pc, #556]	; (8003308 <HAL_RCC_ClockConfig+0x264>)
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	f003 0307 	and.w	r3, r3, #7
 80030e2:	683a      	ldr	r2, [r7, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d001      	beq.n	80030ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e14c      	b.n	8003386 <HAL_RCC_ClockConfig+0x2e2>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f003 0302 	and.w	r3, r3, #2
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	d008      	beq.n	800310a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80030f8:	4b84      	ldr	r3, [pc, #528]	; (800330c <HAL_RCC_ClockConfig+0x268>)
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689b      	ldr	r3, [r3, #8]
 8003104:	4981      	ldr	r1, [pc, #516]	; (800330c <HAL_RCC_ClockConfig+0x268>)
 8003106:	4313      	orrs	r3, r2
 8003108:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	f003 0301 	and.w	r3, r3, #1
 8003112:	2b00      	cmp	r3, #0
 8003114:	f000 80df 	beq.w	80032d6 <HAL_RCC_ClockConfig+0x232>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	2b01      	cmp	r3, #1
 800311e:	d13d      	bne.n	800319c <HAL_RCC_ClockConfig+0xf8>
 8003120:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8003124:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003126:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003128:	fa93 f3a3 	rbit	r3, r3
 800312c:	66fb      	str	r3, [r7, #108]	; 0x6c
  return(result);
 800312e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003130:	fab3 f383 	clz	r3, r3
 8003134:	b2db      	uxtb	r3, r3
 8003136:	095b      	lsrs	r3, r3, #5
 8003138:	b2db      	uxtb	r3, r3
 800313a:	f043 0301 	orr.w	r3, r3, #1
 800313e:	b2db      	uxtb	r3, r3
 8003140:	2b01      	cmp	r3, #1
 8003142:	d102      	bne.n	800314a <HAL_RCC_ClockConfig+0xa6>
 8003144:	4b71      	ldr	r3, [pc, #452]	; (800330c <HAL_RCC_ClockConfig+0x268>)
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	e00f      	b.n	800316a <HAL_RCC_ClockConfig+0xc6>
 800314a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800314e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003150:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003152:	fa93 f3a3 	rbit	r3, r3
 8003156:	667b      	str	r3, [r7, #100]	; 0x64
 8003158:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800315c:	663b      	str	r3, [r7, #96]	; 0x60
 800315e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003160:	fa93 f3a3 	rbit	r3, r3
 8003164:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003166:	4b69      	ldr	r3, [pc, #420]	; (800330c <HAL_RCC_ClockConfig+0x268>)
 8003168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800316a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800316e:	65ba      	str	r2, [r7, #88]	; 0x58
 8003170:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003172:	fa92 f2a2 	rbit	r2, r2
 8003176:	657a      	str	r2, [r7, #84]	; 0x54
  return(result);
 8003178:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800317a:	fab2 f282 	clz	r2, r2
 800317e:	b252      	sxtb	r2, r2
 8003180:	f042 0220 	orr.w	r2, r2, #32
 8003184:	b252      	sxtb	r2, r2
 8003186:	b2d2      	uxtb	r2, r2
 8003188:	f002 021f 	and.w	r2, r2, #31
 800318c:	2101      	movs	r1, #1
 800318e:	fa01 f202 	lsl.w	r2, r1, r2
 8003192:	4013      	ands	r3, r2
 8003194:	2b00      	cmp	r3, #0
 8003196:	d17d      	bne.n	8003294 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e0f4      	b.n	8003386 <HAL_RCC_ClockConfig+0x2e2>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	2b02      	cmp	r3, #2
 80031a2:	d13d      	bne.n	8003220 <HAL_RCC_ClockConfig+0x17c>
 80031a4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031a8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80031ac:	fa93 f3a3 	rbit	r3, r3
 80031b0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return(result);
 80031b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80031b4:	fab3 f383 	clz	r3, r3
 80031b8:	b2db      	uxtb	r3, r3
 80031ba:	095b      	lsrs	r3, r3, #5
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	f043 0301 	orr.w	r3, r3, #1
 80031c2:	b2db      	uxtb	r3, r3
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d102      	bne.n	80031ce <HAL_RCC_ClockConfig+0x12a>
 80031c8:	4b50      	ldr	r3, [pc, #320]	; (800330c <HAL_RCC_ClockConfig+0x268>)
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	e00f      	b.n	80031ee <HAL_RCC_ClockConfig+0x14a>
 80031ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031d2:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80031d6:	fa93 f3a3 	rbit	r3, r3
 80031da:	647b      	str	r3, [r7, #68]	; 0x44
 80031dc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031e0:	643b      	str	r3, [r7, #64]	; 0x40
 80031e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e4:	fa93 f3a3 	rbit	r3, r3
 80031e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80031ea:	4b48      	ldr	r3, [pc, #288]	; (800330c <HAL_RCC_ClockConfig+0x268>)
 80031ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ee:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80031f2:	63ba      	str	r2, [r7, #56]	; 0x38
 80031f4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80031f6:	fa92 f2a2 	rbit	r2, r2
 80031fa:	637a      	str	r2, [r7, #52]	; 0x34
  return(result);
 80031fc:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031fe:	fab2 f282 	clz	r2, r2
 8003202:	b252      	sxtb	r2, r2
 8003204:	f042 0220 	orr.w	r2, r2, #32
 8003208:	b252      	sxtb	r2, r2
 800320a:	b2d2      	uxtb	r2, r2
 800320c:	f002 021f 	and.w	r2, r2, #31
 8003210:	2101      	movs	r1, #1
 8003212:	fa01 f202 	lsl.w	r2, r1, r2
 8003216:	4013      	ands	r3, r2
 8003218:	2b00      	cmp	r3, #0
 800321a:	d13b      	bne.n	8003294 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e0b2      	b.n	8003386 <HAL_RCC_ClockConfig+0x2e2>
 8003220:	2302      	movs	r3, #2
 8003222:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003226:	fa93 f3a3 	rbit	r3, r3
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800322c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800322e:	fab3 f383 	clz	r3, r3
 8003232:	b2db      	uxtb	r3, r3
 8003234:	095b      	lsrs	r3, r3, #5
 8003236:	b2db      	uxtb	r3, r3
 8003238:	f043 0301 	orr.w	r3, r3, #1
 800323c:	b2db      	uxtb	r3, r3
 800323e:	2b01      	cmp	r3, #1
 8003240:	d102      	bne.n	8003248 <HAL_RCC_ClockConfig+0x1a4>
 8003242:	4b32      	ldr	r3, [pc, #200]	; (800330c <HAL_RCC_ClockConfig+0x268>)
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	e00d      	b.n	8003264 <HAL_RCC_ClockConfig+0x1c0>
 8003248:	2302      	movs	r3, #2
 800324a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800324c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800324e:	fa93 f3a3 	rbit	r3, r3
 8003252:	627b      	str	r3, [r7, #36]	; 0x24
 8003254:	2302      	movs	r3, #2
 8003256:	623b      	str	r3, [r7, #32]
 8003258:	6a3b      	ldr	r3, [r7, #32]
 800325a:	fa93 f3a3 	rbit	r3, r3
 800325e:	61fb      	str	r3, [r7, #28]
 8003260:	4b2a      	ldr	r3, [pc, #168]	; (800330c <HAL_RCC_ClockConfig+0x268>)
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	2202      	movs	r2, #2
 8003266:	61ba      	str	r2, [r7, #24]
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	fa92 f2a2 	rbit	r2, r2
 800326e:	617a      	str	r2, [r7, #20]
  return(result);
 8003270:	697a      	ldr	r2, [r7, #20]
 8003272:	fab2 f282 	clz	r2, r2
 8003276:	b252      	sxtb	r2, r2
 8003278:	f042 0220 	orr.w	r2, r2, #32
 800327c:	b252      	sxtb	r2, r2
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	f002 021f 	and.w	r2, r2, #31
 8003284:	2101      	movs	r1, #1
 8003286:	fa01 f202 	lsl.w	r2, r1, r2
 800328a:	4013      	ands	r3, r2
 800328c:	2b00      	cmp	r3, #0
 800328e:	d101      	bne.n	8003294 <HAL_RCC_ClockConfig+0x1f0>
      {
        return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e078      	b.n	8003386 <HAL_RCC_ClockConfig+0x2e2>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003294:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_RCC_ClockConfig+0x268>)
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f023 0203 	bic.w	r2, r3, #3
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	491a      	ldr	r1, [pc, #104]	; (800330c <HAL_RCC_ClockConfig+0x268>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032a6:	f7fd fd19 	bl	8000cdc <HAL_GetTick>
 80032aa:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ac:	e00a      	b.n	80032c4 <HAL_RCC_ClockConfig+0x220>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032ae:	f7fd fd15 	bl	8000cdc <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80032bc:	4293      	cmp	r3, r2
 80032be:	d901      	bls.n	80032c4 <HAL_RCC_ClockConfig+0x220>
      {
        return HAL_TIMEOUT;
 80032c0:	2303      	movs	r3, #3
 80032c2:	e060      	b.n	8003386 <HAL_RCC_ClockConfig+0x2e2>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032c4:	4b11      	ldr	r3, [pc, #68]	; (800330c <HAL_RCC_ClockConfig+0x268>)
 80032c6:	685b      	ldr	r3, [r3, #4]
 80032c8:	f003 020c 	and.w	r2, r3, #12
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	009b      	lsls	r3, r3, #2
 80032d2:	429a      	cmp	r2, r3
 80032d4:	d1eb      	bne.n	80032ae <HAL_RCC_ClockConfig+0x20a>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80032d6:	4b0c      	ldr	r3, [pc, #48]	; (8003308 <HAL_RCC_ClockConfig+0x264>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0307 	and.w	r3, r3, #7
 80032de:	683a      	ldr	r2, [r7, #0]
 80032e0:	429a      	cmp	r2, r3
 80032e2:	d215      	bcs.n	8003310 <HAL_RCC_ClockConfig+0x26c>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032e4:	4b08      	ldr	r3, [pc, #32]	; (8003308 <HAL_RCC_ClockConfig+0x264>)
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f023 0207 	bic.w	r2, r3, #7
 80032ec:	4906      	ldr	r1, [pc, #24]	; (8003308 <HAL_RCC_ClockConfig+0x264>)
 80032ee:	683b      	ldr	r3, [r7, #0]
 80032f0:	4313      	orrs	r3, r2
 80032f2:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032f4:	4b04      	ldr	r3, [pc, #16]	; (8003308 <HAL_RCC_ClockConfig+0x264>)
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	683a      	ldr	r2, [r7, #0]
 80032fe:	429a      	cmp	r2, r3
 8003300:	d006      	beq.n	8003310 <HAL_RCC_ClockConfig+0x26c>
    {
      return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e03f      	b.n	8003386 <HAL_RCC_ClockConfig+0x2e2>
 8003306:	bf00      	nop
 8003308:	40022000 	.word	0x40022000
 800330c:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f003 0304 	and.w	r3, r3, #4
 8003318:	2b00      	cmp	r3, #0
 800331a:	d008      	beq.n	800332e <HAL_RCC_ClockConfig+0x28a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800331c:	4b1c      	ldr	r3, [pc, #112]	; (8003390 <HAL_RCC_ClockConfig+0x2ec>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	4919      	ldr	r1, [pc, #100]	; (8003390 <HAL_RCC_ClockConfig+0x2ec>)
 800332a:	4313      	orrs	r3, r2
 800332c:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f003 0308 	and.w	r3, r3, #8
 8003336:	2b00      	cmp	r3, #0
 8003338:	d009      	beq.n	800334e <HAL_RCC_ClockConfig+0x2aa>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800333a:	4b15      	ldr	r3, [pc, #84]	; (8003390 <HAL_RCC_ClockConfig+0x2ec>)
 800333c:	685b      	ldr	r3, [r3, #4]
 800333e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691b      	ldr	r3, [r3, #16]
 8003346:	00db      	lsls	r3, r3, #3
 8003348:	4911      	ldr	r1, [pc, #68]	; (8003390 <HAL_RCC_ClockConfig+0x2ec>)
 800334a:	4313      	orrs	r3, r2
 800334c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800334e:	f000 f825 	bl	800339c <HAL_RCC_GetSysClockFreq>
 8003352:	4601      	mov	r1, r0
 8003354:	4b0e      	ldr	r3, [pc, #56]	; (8003390 <HAL_RCC_ClockConfig+0x2ec>)
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800335c:	23f0      	movs	r3, #240	; 0xf0
 800335e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	fa93 f3a3 	rbit	r3, r3
 8003366:	60fb      	str	r3, [r7, #12]
  return(result);
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	fab3 f383 	clz	r3, r3
 800336e:	fa22 f303 	lsr.w	r3, r2, r3
 8003372:	4a08      	ldr	r2, [pc, #32]	; (8003394 <HAL_RCC_ClockConfig+0x2f0>)
 8003374:	5cd3      	ldrb	r3, [r2, r3]
 8003376:	fa21 f303 	lsr.w	r3, r1, r3
 800337a:	4a07      	ldr	r2, [pc, #28]	; (8003398 <HAL_RCC_ClockConfig+0x2f4>)
 800337c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (TICK_INT_PRIORITY);
 800337e:	2000      	movs	r0, #0
 8003380:	f7fd fc68 	bl	8000c54 <HAL_InitTick>
  
  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3778      	adds	r7, #120	; 0x78
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000
 8003394:	080056d8 	.word	0x080056d8
 8003398:	20000008 	.word	0x20000008

0800339c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800339c:	b480      	push	{r7}
 800339e:	b08b      	sub	sp, #44	; 0x2c
 80033a0:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80033a2:	2300      	movs	r3, #0
 80033a4:	61fb      	str	r3, [r7, #28]
 80033a6:	2300      	movs	r3, #0
 80033a8:	61bb      	str	r3, [r7, #24]
 80033aa:	2300      	movs	r3, #0
 80033ac:	627b      	str	r3, [r7, #36]	; 0x24
 80033ae:	2300      	movs	r3, #0
 80033b0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 80033b2:	2300      	movs	r3, #0
 80033b4:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 80033b6:	4b29      	ldr	r3, [pc, #164]	; (800345c <HAL_RCC_GetSysClockFreq+0xc0>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80033bc:	69fb      	ldr	r3, [r7, #28]
 80033be:	f003 030c 	and.w	r3, r3, #12
 80033c2:	2b04      	cmp	r3, #4
 80033c4:	d002      	beq.n	80033cc <HAL_RCC_GetSysClockFreq+0x30>
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d003      	beq.n	80033d2 <HAL_RCC_GetSysClockFreq+0x36>
 80033ca:	e03c      	b.n	8003446 <HAL_RCC_GetSysClockFreq+0xaa>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80033cc:	4b24      	ldr	r3, [pc, #144]	; (8003460 <HAL_RCC_GetSysClockFreq+0xc4>)
 80033ce:	623b      	str	r3, [r7, #32]
      break;
 80033d0:	e03c      	b.n	800344c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80033d2:	69fb      	ldr	r3, [r7, #28]
 80033d4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80033d8:	f44f 1370 	mov.w	r3, #3932160	; 0x3c0000
 80033dc:	60bb      	str	r3, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	fa93 f3a3 	rbit	r3, r3
 80033e4:	607b      	str	r3, [r7, #4]
  return(result);
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	fab3 f383 	clz	r3, r3
 80033ec:	fa22 f303 	lsr.w	r3, r2, r3
 80033f0:	4a1c      	ldr	r2, [pc, #112]	; (8003464 <HAL_RCC_GetSysClockFreq+0xc8>)
 80033f2:	5cd3      	ldrb	r3, [r2, r3]
 80033f4:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80033f6:	4b19      	ldr	r3, [pc, #100]	; (800345c <HAL_RCC_GetSysClockFreq+0xc0>)
 80033f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fa:	f003 020f 	and.w	r2, r3, #15
 80033fe:	230f      	movs	r3, #15
 8003400:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	fa93 f3a3 	rbit	r3, r3
 8003408:	60fb      	str	r3, [r7, #12]
  return(result);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	fab3 f383 	clz	r3, r3
 8003410:	fa22 f303 	lsr.w	r3, r2, r3
 8003414:	4a14      	ldr	r2, [pc, #80]	; (8003468 <HAL_RCC_GetSysClockFreq+0xcc>)
 8003416:	5cd3      	ldrb	r3, [r2, r3]
 8003418:	61bb      	str	r3, [r7, #24]
#if defined(RCC_CFGR_PLLSRC_HSI_DIV2)
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI)
 800341a:	69fb      	ldr	r3, [r7, #28]
 800341c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003420:	2b00      	cmp	r3, #0
 8003422:	d008      	beq.n	8003436 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (HSE_VALUE / prediv) * pllmul;
 8003424:	4a0e      	ldr	r2, [pc, #56]	; (8003460 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003426:	69bb      	ldr	r3, [r7, #24]
 8003428:	fbb2 f2f3 	udiv	r2, r2, r3
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	fb02 f303 	mul.w	r3, r2, r3
 8003432:	627b      	str	r3, [r7, #36]	; 0x24
 8003434:	e004      	b.n	8003440 <HAL_RCC_GetSysClockFreq+0xa4>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (HSI_VALUE >> 1U) * pllmul;
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	4a0c      	ldr	r2, [pc, #48]	; (800346c <HAL_RCC_GetSysClockFreq+0xd0>)
 800343a:	fb02 f303 	mul.w	r3, r2, r3
 800343e:	627b      	str	r3, [r7, #36]	; 0x24
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (HSI_VALUE / prediv) * pllmul;
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 8003440:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003442:	623b      	str	r3, [r7, #32]
      break;
 8003444:	e002      	b.n	800344c <HAL_RCC_GetSysClockFreq+0xb0>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003446:	4b06      	ldr	r3, [pc, #24]	; (8003460 <HAL_RCC_GetSysClockFreq+0xc4>)
 8003448:	623b      	str	r3, [r7, #32]
      break;
 800344a:	bf00      	nop
    }
  }
  return sysclockfreq;
 800344c:	6a3b      	ldr	r3, [r7, #32]
}
 800344e:	4618      	mov	r0, r3
 8003450:	372c      	adds	r7, #44	; 0x2c
 8003452:	46bd      	mov	sp, r7
 8003454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003458:	4770      	bx	lr
 800345a:	bf00      	nop
 800345c:	40021000 	.word	0x40021000
 8003460:	007a1200 	.word	0x007a1200
 8003464:	080056b8 	.word	0x080056b8
 8003468:	080056c8 	.word	0x080056c8
 800346c:	003d0900 	.word	0x003d0900

08003470 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003470:	b480      	push	{r7}
 8003472:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003474:	4b03      	ldr	r3, [pc, #12]	; (8003484 <HAL_RCC_GetHCLKFreq+0x14>)
 8003476:	681b      	ldr	r3, [r3, #0]
}
 8003478:	4618      	mov	r0, r3
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr
 8003482:	bf00      	nop
 8003484:	20000008 	.word	0x20000008

08003488 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800348e:	f7ff ffef 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 8003492:	4601      	mov	r1, r0
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800349c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80034a0:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	fa93 f3a3 	rbit	r3, r3
 80034a8:	603b      	str	r3, [r7, #0]
  return(result);
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	fab3 f383 	clz	r3, r3
 80034b0:	fa22 f303 	lsr.w	r3, r2, r3
 80034b4:	4a04      	ldr	r2, [pc, #16]	; (80034c8 <HAL_RCC_GetPCLK1Freq+0x40>)
 80034b6:	5cd3      	ldrb	r3, [r2, r3]
 80034b8:	fa21 f303 	lsr.w	r3, r1, r3
}    
 80034bc:	4618      	mov	r0, r3
 80034be:	3708      	adds	r7, #8
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bd80      	pop	{r7, pc}
 80034c4:	40021000 	.word	0x40021000
 80034c8:	080056e8 	.word	0x080056e8

080034cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b082      	sub	sp, #8
 80034d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 80034d2:	f7ff ffcd 	bl	8003470 <HAL_RCC_GetHCLKFreq>
 80034d6:	4601      	mov	r1, r0
 80034d8:	4b0b      	ldr	r3, [pc, #44]	; (8003508 <HAL_RCC_GetPCLK2Freq+0x3c>)
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f403 5260 	and.w	r2, r3, #14336	; 0x3800
 80034e0:	f44f 5360 	mov.w	r3, #14336	; 0x3800
 80034e4:	607b      	str	r3, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	fa93 f3a3 	rbit	r3, r3
 80034ec:	603b      	str	r3, [r7, #0]
  return(result);
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	fab3 f383 	clz	r3, r3
 80034f4:	fa22 f303 	lsr.w	r3, r2, r3
 80034f8:	4a04      	ldr	r2, [pc, #16]	; (800350c <HAL_RCC_GetPCLK2Freq+0x40>)
 80034fa:	5cd3      	ldrb	r3, [r2, r3]
 80034fc:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8003500:	4618      	mov	r0, r3
 8003502:	3708      	adds	r7, #8
 8003504:	46bd      	mov	sp, r7
 8003506:	bd80      	pop	{r7, pc}
 8003508:	40021000 	.word	0x40021000
 800350c:	080056e8 	.word	0x080056e8

08003510 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b092      	sub	sp, #72	; 0x48
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003518:	2300      	movs	r3, #0
 800351a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 800351c:	2300      	movs	r3, #0
 800351e:	63fb      	str	r3, [r7, #60]	; 0x3c
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003528:	2b00      	cmp	r3, #0
 800352a:	f000 80cf 	beq.w	80036cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    FlagStatus       pwrclkchanged = RESET;
 800352e:	2300      	movs	r3, #0
 8003530:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003534:	4b86      	ldr	r3, [pc, #536]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003536:	69db      	ldr	r3, [r3, #28]
 8003538:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d10e      	bne.n	800355e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003540:	4b83      	ldr	r3, [pc, #524]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003542:	69db      	ldr	r3, [r3, #28]
 8003544:	4a82      	ldr	r2, [pc, #520]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800354a:	61d3      	str	r3, [r2, #28]
 800354c:	4b80      	ldr	r3, [pc, #512]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800354e:	69db      	ldr	r3, [r3, #28]
 8003550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003554:	60bb      	str	r3, [r7, #8]
 8003556:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003558:	2301      	movs	r3, #1
 800355a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800355e:	4b7d      	ldr	r3, [pc, #500]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003566:	2b00      	cmp	r3, #0
 8003568:	d118      	bne.n	800359c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800356a:	4b7a      	ldr	r3, [pc, #488]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	4a79      	ldr	r2, [pc, #484]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003574:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003576:	f7fd fbb1 	bl	8000cdc <HAL_GetTick>
 800357a:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800357c:	e008      	b.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800357e:	f7fd fbad 	bl	8000cdc <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b64      	cmp	r3, #100	; 0x64
 800358a:	d901      	bls.n	8003590 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e0da      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x236>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003590:	4b70      	ldr	r3, [pc, #448]	; (8003754 <HAL_RCCEx_PeriphCLKConfig+0x244>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800359c:	4b6c      	ldr	r3, [pc, #432]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800359e:	6a1b      	ldr	r3, [r3, #32]
 80035a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80035a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d07c      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035b4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80035b6:	429a      	cmp	r2, r3
 80035b8:	d075      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80035ba:	4b65      	ldr	r3, [pc, #404]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035c4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035c8:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035cc:	fa93 f3a3 	rbit	r3, r3
 80035d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80035d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80035d4:	fab3 f383 	clz	r3, r3
 80035d8:	461a      	mov	r2, r3
 80035da:	4b5f      	ldr	r3, [pc, #380]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80035dc:	4413      	add	r3, r2
 80035de:	009b      	lsls	r3, r3, #2
 80035e0:	461a      	mov	r2, r3
 80035e2:	2301      	movs	r3, #1
 80035e4:	6013      	str	r3, [r2, #0]
 80035e6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80035ea:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035ee:	fa93 f3a3 	rbit	r3, r3
 80035f2:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 80035f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	461a      	mov	r2, r3
 80035fc:	4b56      	ldr	r3, [pc, #344]	; (8003758 <HAL_RCCEx_PeriphCLKConfig+0x248>)
 80035fe:	4413      	add	r3, r2
 8003600:	009b      	lsls	r3, r3, #2
 8003602:	461a      	mov	r2, r3
 8003604:	2300      	movs	r3, #0
 8003606:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003608:	4a51      	ldr	r2, [pc, #324]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 800360a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800360c:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800360e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003610:	f003 0301 	and.w	r3, r3, #1
 8003614:	2b00      	cmp	r3, #0
 8003616:	d046      	beq.n	80036a6 <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003618:	f7fd fb60 	bl	8000cdc <HAL_GetTick>
 800361c:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800361e:	e00a      	b.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x126>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003620:	f7fd fb5c 	bl	8000cdc <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	f241 3288 	movw	r2, #5000	; 0x1388
 800362e:	4293      	cmp	r3, r2
 8003630:	d901      	bls.n	8003636 <HAL_RCCEx_PeriphCLKConfig+0x126>
          {
            return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e087      	b.n	8003746 <HAL_RCCEx_PeriphCLKConfig+0x236>
 8003636:	2302      	movs	r3, #2
 8003638:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800363c:	fa93 f3a3 	rbit	r3, r3
 8003640:	627b      	str	r3, [r7, #36]	; 0x24
 8003642:	2302      	movs	r3, #2
 8003644:	623b      	str	r3, [r7, #32]
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	fa93 f3a3 	rbit	r3, r3
 800364c:	61fb      	str	r3, [r7, #28]
  return(result);
 800364e:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003650:	fab3 f383 	clz	r3, r3
 8003654:	b2db      	uxtb	r3, r3
 8003656:	095b      	lsrs	r3, r3, #5
 8003658:	b2db      	uxtb	r3, r3
 800365a:	f043 0302 	orr.w	r3, r3, #2
 800365e:	b2db      	uxtb	r3, r3
 8003660:	2b02      	cmp	r3, #2
 8003662:	d102      	bne.n	800366a <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8003664:	4b3a      	ldr	r3, [pc, #232]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	e007      	b.n	800367a <HAL_RCCEx_PeriphCLKConfig+0x16a>
 800366a:	2302      	movs	r3, #2
 800366c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800366e:	69bb      	ldr	r3, [r7, #24]
 8003670:	fa93 f3a3 	rbit	r3, r3
 8003674:	617b      	str	r3, [r7, #20]
 8003676:	4b36      	ldr	r3, [pc, #216]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003678:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800367a:	2202      	movs	r2, #2
 800367c:	613a      	str	r2, [r7, #16]
 800367e:	693a      	ldr	r2, [r7, #16]
 8003680:	fa92 f2a2 	rbit	r2, r2
 8003684:	60fa      	str	r2, [r7, #12]
  return(result);
 8003686:	68fa      	ldr	r2, [r7, #12]
 8003688:	fab2 f282 	clz	r2, r2
 800368c:	b252      	sxtb	r2, r2
 800368e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003692:	b252      	sxtb	r2, r2
 8003694:	b2d2      	uxtb	r2, r2
 8003696:	f002 021f 	and.w	r2, r2, #31
 800369a:	2101      	movs	r1, #1
 800369c:	fa01 f202 	lsl.w	r2, r1, r2
 80036a0:	4013      	ands	r3, r2
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d0bc      	beq.n	8003620 <HAL_RCCEx_PeriphCLKConfig+0x110>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80036a6:	4b2a      	ldr	r3, [pc, #168]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036a8:	6a1b      	ldr	r3, [r3, #32]
 80036aa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4927      	ldr	r1, [pc, #156]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036b4:	4313      	orrs	r3, r2
 80036b6:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80036b8:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80036bc:	2b01      	cmp	r3, #1
 80036be:	d105      	bne.n	80036cc <HAL_RCCEx_PeriphCLKConfig+0x1bc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036c0:	4b23      	ldr	r3, [pc, #140]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	4a22      	ldr	r2, [pc, #136]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80036ca:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	f003 0301 	and.w	r3, r3, #1
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d008      	beq.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x1da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80036d8:	4b1d      	ldr	r3, [pc, #116]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036dc:	f023 0203 	bic.w	r2, r3, #3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	689b      	ldr	r3, [r3, #8]
 80036e4:	491a      	ldr	r1, [pc, #104]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036e6:	4313      	orrs	r3, r2
 80036e8:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f003 0320 	and.w	r3, r3, #32
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d008      	beq.n	8003708 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80036f6:	4b16      	ldr	r3, [pc, #88]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	f023 0210 	bic.w	r2, r3, #16
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	68db      	ldr	r3, [r3, #12]
 8003702:	4913      	ldr	r1, [pc, #76]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003704:	4313      	orrs	r3, r2
 8003706:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003710:	2b00      	cmp	r3, #0
 8003712:	d008      	beq.n	8003726 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8003714:	4b0e      	ldr	r3, [pc, #56]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003716:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003718:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	691b      	ldr	r3, [r3, #16]
 8003720:	490b      	ldr	r1, [pc, #44]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003722:	4313      	orrs	r3, r2
 8003724:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800372e:	2b00      	cmp	r3, #0
 8003730:	d008      	beq.n	8003744 <HAL_RCCEx_PeriphCLKConfig+0x234>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003736:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	695b      	ldr	r3, [r3, #20]
 800373e:	4904      	ldr	r1, [pc, #16]	; (8003750 <HAL_RCCEx_PeriphCLKConfig+0x240>)
 8003740:	4313      	orrs	r3, r2
 8003742:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8003744:	2300      	movs	r3, #0
}
 8003746:	4618      	mov	r0, r3
 8003748:	3748      	adds	r7, #72	; 0x48
 800374a:	46bd      	mov	sp, r7
 800374c:	bd80      	pop	{r7, pc}
 800374e:	bf00      	nop
 8003750:	40021000 	.word	0x40021000
 8003754:	40007000 	.word	0x40007000
 8003758:	10908100 	.word	0x10908100

0800375c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800375c:	b580      	push	{r7, lr}
 800375e:	b082      	sub	sp, #8
 8003760:	af00      	add	r7, sp, #0
 8003762:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if(huart == NULL)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d101      	bne.n	800376e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800376a:	2301      	movs	r3, #1
 800376c:	e043      	b.n	80037f6 <HAL_UART_Init+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if(huart->gState == HAL_UART_STATE_RESET)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d106      	bne.n	8003788 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003782:	6878      	ldr	r0, [r7, #4]
 8003784:	f000 feaa 	bl	80044dc <HAL_UART_MspInit>
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2224      	movs	r2, #36	; 0x24
 800378c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	681a      	ldr	r2, [r3, #0]
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f022 0201 	bic.w	r2, r2, #1
 800379e:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f8b9 	bl	8003918 <UART_SetConfig>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b01      	cmp	r3, #1
 80037aa:	d101      	bne.n	80037b0 <HAL_UART_Init+0x54>
  {
    return HAL_ERROR;
 80037ac:	2301      	movs	r3, #1
 80037ae:	e022      	b.n	80037f6 <HAL_UART_Init+0x9a>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d002      	beq.n	80037be <HAL_UART_Init+0x62>
  {
    UART_AdvFeatureConfig(huart);
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fa13 	bl	8003be4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	685a      	ldr	r2, [r3, #4]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80037cc:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	689a      	ldr	r2, [r3, #8]
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80037dc:	609a      	str	r2, [r3, #8]

  /* Enable the Peripheral */
  __HAL_UART_ENABLE(huart);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	681a      	ldr	r2, [r3, #0]
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f042 0201 	orr.w	r2, r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80037ee:	6878      	ldr	r0, [r7, #4]
 80037f0:	f000 fa9a 	bl	8003d28 <UART_CheckIdleState>
 80037f4:	4603      	mov	r3, r0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_UART_Transmit>:
  * @param Size Amount of data to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037fe:	b580      	push	{r7, lr}
 8003800:	b088      	sub	sp, #32
 8003802:	af02      	add	r7, sp, #8
 8003804:	60f8      	str	r0, [r7, #12]
 8003806:	60b9      	str	r1, [r7, #8]
 8003808:	603b      	str	r3, [r7, #0]
 800380a:	4613      	mov	r3, r2
 800380c:	80fb      	strh	r3, [r7, #6]
  uint16_t* tmp;
  uint32_t tickstart = 0U;
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if(huart->gState == HAL_UART_STATE_READY)
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
 8003818:	b2db      	uxtb	r3, r3
 800381a:	2b20      	cmp	r3, #32
 800381c:	d177      	bne.n	800390e <HAL_UART_Transmit+0x110>
  {
    if((pData == NULL ) || (Size == 0U))
 800381e:	68bb      	ldr	r3, [r7, #8]
 8003820:	2b00      	cmp	r3, #0
 8003822:	d002      	beq.n	800382a <HAL_UART_Transmit+0x2c>
 8003824:	88fb      	ldrh	r3, [r7, #6]
 8003826:	2b00      	cmp	r3, #0
 8003828:	d101      	bne.n	800382e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e070      	b.n	8003910 <HAL_UART_Transmit+0x112>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	f893 3068 	ldrb.w	r3, [r3, #104]	; 0x68
 8003834:	2b01      	cmp	r3, #1
 8003836:	d101      	bne.n	800383c <HAL_UART_Transmit+0x3e>
 8003838:	2302      	movs	r3, #2
 800383a:	e069      	b.n	8003910 <HAL_UART_Transmit+0x112>
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	2201      	movs	r2, #1
 8003840:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	2200      	movs	r2, #0
 8003848:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	2221      	movs	r2, #33	; 0x21
 800384e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8003852:	f7fd fa43 	bl	8000cdc <HAL_GetTick>
 8003856:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	88fa      	ldrh	r2, [r7, #6]
 800385c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	88fa      	ldrh	r2, [r7, #6]
 8003864:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while(huart->TxXferCount > 0U)
 8003868:	e034      	b.n	80038d4 <HAL_UART_Transmit+0xd6>
    {
      huart->TxXferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003870:	b29b      	uxth	r3, r3
 8003872:	3b01      	subs	r3, #1
 8003874:	b29a      	uxth	r2, r3
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
      if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	9300      	str	r3, [sp, #0]
 8003880:	697b      	ldr	r3, [r7, #20]
 8003882:	2200      	movs	r2, #0
 8003884:	2180      	movs	r1, #128	; 0x80
 8003886:	68f8      	ldr	r0, [r7, #12]
 8003888:	f000 fa97 	bl	8003dba <UART_WaitOnFlagUntilTimeout>
 800388c:	4603      	mov	r3, r0
 800388e:	2b00      	cmp	r3, #0
 8003890:	d001      	beq.n	8003896 <HAL_UART_Transmit+0x98>
      {
        return HAL_TIMEOUT;
 8003892:	2303      	movs	r3, #3
 8003894:	e03c      	b.n	8003910 <HAL_UART_Transmit+0x112>
      }
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	689b      	ldr	r3, [r3, #8]
 800389a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800389e:	d111      	bne.n	80038c4 <HAL_UART_Transmit+0xc6>
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	691b      	ldr	r3, [r3, #16]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d10d      	bne.n	80038c4 <HAL_UART_Transmit+0xc6>
      {
        tmp = (uint16_t*) pData;
 80038a8:	68bb      	ldr	r3, [r7, #8]
 80038aa:	613b      	str	r3, [r7, #16]
        huart->Instance->TDR = (*tmp & (uint16_t)0x01FFU);
 80038ac:	693b      	ldr	r3, [r7, #16]
 80038ae:	881a      	ldrh	r2, [r3, #0]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80038b8:	b292      	uxth	r2, r2
 80038ba:	851a      	strh	r2, [r3, #40]	; 0x28
        pData += 2U;
 80038bc:	68bb      	ldr	r3, [r7, #8]
 80038be:	3302      	adds	r3, #2
 80038c0:	60bb      	str	r3, [r7, #8]
 80038c2:	e007      	b.n	80038d4 <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (*pData++ & (uint8_t)0xFFU);
 80038c4:	68bb      	ldr	r3, [r7, #8]
 80038c6:	1c5a      	adds	r2, r3, #1
 80038c8:	60ba      	str	r2, [r7, #8]
 80038ca:	781a      	ldrb	r2, [r3, #0]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	b292      	uxth	r2, r2
 80038d2:	851a      	strh	r2, [r3, #40]	; 0x28
    while(huart->TxXferCount > 0U)
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80038da:	b29b      	uxth	r3, r3
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1c4      	bne.n	800386a <HAL_UART_Transmit+0x6c>
      }
    }
    if(UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	9300      	str	r3, [sp, #0]
 80038e4:	697b      	ldr	r3, [r7, #20]
 80038e6:	2200      	movs	r2, #0
 80038e8:	2140      	movs	r1, #64	; 0x40
 80038ea:	68f8      	ldr	r0, [r7, #12]
 80038ec:	f000 fa65 	bl	8003dba <UART_WaitOnFlagUntilTimeout>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_UART_Transmit+0xfc>
    {
      return HAL_TIMEOUT;
 80038f6:	2303      	movs	r3, #3
 80038f8:	e00a      	b.n	8003910 <HAL_UART_Transmit+0x112>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2220      	movs	r2, #32
 80038fe:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	2200      	movs	r2, #0
 8003906:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

    return HAL_OK;
 800390a:	2300      	movs	r3, #0
 800390c:	e000      	b.n	8003910 <HAL_UART_Transmit+0x112>
  }
  else
  {
    return HAL_BUSY;
 800390e:	2302      	movs	r3, #2
  }
}
 8003910:	4618      	mov	r0, r3
 8003912:	3718      	adds	r7, #24
 8003914:	46bd      	mov	sp, r7
 8003916:	bd80      	pop	{r7, pc}

08003918 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b086      	sub	sp, #24
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg                     = 0x00000000U;
 8003920:	2300      	movs	r3, #0
 8003922:	60fb      	str	r3, [r7, #12]
  UART_ClockSourceTypeDef clocksource = UART_CLOCKSOURCE_UNDEFINED;
 8003924:	2310      	movs	r3, #16
 8003926:	75fb      	strb	r3, [r7, #23]
  uint16_t brrtemp                    = 0x0000U;
 8003928:	2300      	movs	r3, #0
 800392a:	817b      	strh	r3, [r7, #10]
  uint16_t usartdiv                   = 0x0000U;
 800392c:	2300      	movs	r3, #0
 800392e:	82bb      	strh	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003930:	2300      	movs	r3, #0
 8003932:	74fb      	strb	r3, [r7, #19]
   *  the UART Word Length, Parity, Mode and oversampling:
   *  set the M bits according to huart->Init.WordLength value
   *  set PCE and PS bits according to huart->Init.Parity value
   *  set TE and RE bits according to huart->Init.Mode value
   *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	689a      	ldr	r2, [r3, #8]
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	431a      	orrs	r2, r3
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	695b      	ldr	r3, [r3, #20]
 8003942:	431a      	orrs	r2, r3
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	69db      	ldr	r3, [r3, #28]
 8003948:	4313      	orrs	r3, r2
 800394a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1, UART_CR1_FIELDS, tmpreg);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	4b9f      	ldr	r3, [pc, #636]	; (8003bd0 <UART_SetConfig+0x2b8>)
 8003954:	4013      	ands	r3, r2
 8003956:	687a      	ldr	r2, [r7, #4]
 8003958:	6812      	ldr	r2, [r2, #0]
 800395a:	68f9      	ldr	r1, [r7, #12]
 800395c:	430b      	orrs	r3, r1
 800395e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68da      	ldr	r2, [r3, #12]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	430a      	orrs	r2, r1
 8003974:	605a      	str	r2, [r3, #4]
  /* Configure
   * - UART HardWare Flow Control: set CTSE and RTSE bits according
   *   to huart->Init.HwFlowCtl value
   * - one-bit sampling method versus three samples' majority rule according
   *   to huart->Init.OneBitSampling */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl | huart->Init.OneBitSampling ;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	699a      	ldr	r2, [r3, #24]
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6a1b      	ldr	r3, [r3, #32]
 800397e:	4313      	orrs	r3, r2
 8003980:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE | USART_CR3_ONEBIT), tmpreg);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68fa      	ldr	r2, [r7, #12]
 8003992:	430a      	orrs	r2, r1
 8003994:	609a      	str	r2, [r3, #8]

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4a8e      	ldr	r2, [pc, #568]	; (8003bd4 <UART_SetConfig+0x2bc>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d121      	bne.n	80039e4 <UART_SetConfig+0xcc>
 80039a0:	4b8d      	ldr	r3, [pc, #564]	; (8003bd8 <UART_SetConfig+0x2c0>)
 80039a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a4:	f003 0303 	and.w	r3, r3, #3
 80039a8:	2b03      	cmp	r3, #3
 80039aa:	d817      	bhi.n	80039dc <UART_SetConfig+0xc4>
 80039ac:	a201      	add	r2, pc, #4	; (adr r2, 80039b4 <UART_SetConfig+0x9c>)
 80039ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80039b2:	bf00      	nop
 80039b4:	080039c5 	.word	0x080039c5
 80039b8:	080039d1 	.word	0x080039d1
 80039bc:	080039d7 	.word	0x080039d7
 80039c0:	080039cb 	.word	0x080039cb
 80039c4:	2300      	movs	r3, #0
 80039c6:	75fb      	strb	r3, [r7, #23]
 80039c8:	e01e      	b.n	8003a08 <UART_SetConfig+0xf0>
 80039ca:	2302      	movs	r3, #2
 80039cc:	75fb      	strb	r3, [r7, #23]
 80039ce:	e01b      	b.n	8003a08 <UART_SetConfig+0xf0>
 80039d0:	2304      	movs	r3, #4
 80039d2:	75fb      	strb	r3, [r7, #23]
 80039d4:	e018      	b.n	8003a08 <UART_SetConfig+0xf0>
 80039d6:	2308      	movs	r3, #8
 80039d8:	75fb      	strb	r3, [r7, #23]
 80039da:	e015      	b.n	8003a08 <UART_SetConfig+0xf0>
 80039dc:	2310      	movs	r3, #16
 80039de:	75fb      	strb	r3, [r7, #23]
 80039e0:	bf00      	nop
 80039e2:	e011      	b.n	8003a08 <UART_SetConfig+0xf0>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a7c      	ldr	r2, [pc, #496]	; (8003bdc <UART_SetConfig+0x2c4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d102      	bne.n	80039f4 <UART_SetConfig+0xdc>
 80039ee:	2300      	movs	r3, #0
 80039f0:	75fb      	strb	r3, [r7, #23]
 80039f2:	e009      	b.n	8003a08 <UART_SetConfig+0xf0>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a79      	ldr	r2, [pc, #484]	; (8003be0 <UART_SetConfig+0x2c8>)
 80039fa:	4293      	cmp	r3, r2
 80039fc:	d102      	bne.n	8003a04 <UART_SetConfig+0xec>
 80039fe:	2300      	movs	r3, #0
 8003a00:	75fb      	strb	r3, [r7, #23]
 8003a02:	e001      	b.n	8003a08 <UART_SetConfig+0xf0>
 8003a04:	2310      	movs	r3, #16
 8003a06:	75fb      	strb	r3, [r7, #23]

  /* Check UART Over Sampling to set Baud Rate Register */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	69db      	ldr	r3, [r3, #28]
 8003a0c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a10:	d16f      	bne.n	8003af2 <UART_SetConfig+0x1da>
  {
    switch (clocksource)
 8003a12:	7dfb      	ldrb	r3, [r7, #23]
 8003a14:	2b08      	cmp	r3, #8
 8003a16:	d857      	bhi.n	8003ac8 <UART_SetConfig+0x1b0>
 8003a18:	a201      	add	r2, pc, #4	; (adr r2, 8003a20 <UART_SetConfig+0x108>)
 8003a1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a1e:	bf00      	nop
 8003a20:	08003a45 	.word	0x08003a45
 8003a24:	08003a61 	.word	0x08003a61
 8003a28:	08003a7d 	.word	0x08003a7d
 8003a2c:	08003ac9 	.word	0x08003ac9
 8003a30:	08003a97 	.word	0x08003a97
 8003a34:	08003ac9 	.word	0x08003ac9
 8003a38:	08003ac9 	.word	0x08003ac9
 8003a3c:	08003ac9 	.word	0x08003ac9
 8003a40:	08003ab3 	.word	0x08003ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003a44:	f7ff fd20 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 8003a48:	4603      	mov	r3, r0
 8003a4a:	005a      	lsls	r2, r3, #1
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	085b      	lsrs	r3, r3, #1
 8003a52:	441a      	add	r2, r3
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	82bb      	strh	r3, [r7, #20]
        break;
 8003a5e:	e036      	b.n	8003ace <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_PCLK2:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003a60:	f7ff fd34 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 8003a64:	4603      	mov	r3, r0
 8003a66:	005a      	lsls	r2, r3, #1
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	685b      	ldr	r3, [r3, #4]
 8003a6c:	085b      	lsrs	r3, r3, #1
 8003a6e:	441a      	add	r2, r3
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	685b      	ldr	r3, [r3, #4]
 8003a74:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a78:	82bb      	strh	r3, [r7, #20]
        break;
 8003a7a:	e028      	b.n	8003ace <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	085b      	lsrs	r3, r3, #1
 8003a82:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8003a86:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	6852      	ldr	r2, [r2, #4]
 8003a8e:	fbb3 f3f2 	udiv	r3, r3, r2
 8003a92:	82bb      	strh	r3, [r7, #20]
        break;
 8003a94:	e01b      	b.n	8003ace <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_SYSCLK:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003a96:	f7ff fc81 	bl	800339c <HAL_RCC_GetSysClockFreq>
 8003a9a:	4603      	mov	r3, r0
 8003a9c:	005a      	lsls	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	685b      	ldr	r3, [r3, #4]
 8003aa2:	085b      	lsrs	r3, r3, #1
 8003aa4:	441a      	add	r2, r3
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8003aae:	82bb      	strh	r3, [r7, #20]
        break;
 8003ab0:	e00d      	b.n	8003ace <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	085b      	lsrs	r3, r3, #1
 8003ab8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	685b      	ldr	r3, [r3, #4]
 8003ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ac4:	82bb      	strh	r3, [r7, #20]
        break;
 8003ac6:	e002      	b.n	8003ace <UART_SetConfig+0x1b6>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	74fb      	strb	r3, [r7, #19]
        break;
 8003acc:	bf00      	nop
    }

    brrtemp = usartdiv & 0xFFF0U;
 8003ace:	8abb      	ldrh	r3, [r7, #20]
 8003ad0:	f023 030f 	bic.w	r3, r3, #15
 8003ad4:	817b      	strh	r3, [r7, #10]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003ad6:	8abb      	ldrh	r3, [r7, #20]
 8003ad8:	105b      	asrs	r3, r3, #1
 8003ada:	b29b      	uxth	r3, r3
 8003adc:	f003 0307 	and.w	r3, r3, #7
 8003ae0:	b29a      	uxth	r2, r3
 8003ae2:	897b      	ldrh	r3, [r7, #10]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	817b      	strh	r3, [r7, #10]
    huart->Instance->BRR = brrtemp;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	897a      	ldrh	r2, [r7, #10]
 8003aee:	60da      	str	r2, [r3, #12]
 8003af0:	e069      	b.n	8003bc6 <UART_SetConfig+0x2ae>
  }
  else
  {
    switch (clocksource)
 8003af2:	7dfb      	ldrb	r3, [r7, #23]
 8003af4:	2b08      	cmp	r3, #8
 8003af6:	d863      	bhi.n	8003bc0 <UART_SetConfig+0x2a8>
 8003af8:	a201      	add	r2, pc, #4	; (adr r2, 8003b00 <UART_SetConfig+0x1e8>)
 8003afa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003afe:	bf00      	nop
 8003b00:	08003b25 	.word	0x08003b25
 8003b04:	08003b45 	.word	0x08003b45
 8003b08:	08003b65 	.word	0x08003b65
 8003b0c:	08003bc1 	.word	0x08003bc1
 8003b10:	08003b85 	.word	0x08003b85
 8003b14:	08003bc1 	.word	0x08003bc1
 8003b18:	08003bc1 	.word	0x08003bc1
 8003b1c:	08003bc1 	.word	0x08003bc1
 8003b20:	08003ba5 	.word	0x08003ba5
    {
      case UART_CLOCKSOURCE_PCLK1:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003b24:	f7ff fcb0 	bl	8003488 <HAL_RCC_GetPCLK1Freq>
 8003b28:	4602      	mov	r2, r0
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	085b      	lsrs	r3, r3, #1
 8003b30:	441a      	add	r2, r3
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b3a:	b29a      	uxth	r2, r3
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	60da      	str	r2, [r3, #12]
        break;
 8003b42:	e040      	b.n	8003bc6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_PCLK2:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003b44:	f7ff fcc2 	bl	80034cc <HAL_RCC_GetPCLK2Freq>
 8003b48:	4602      	mov	r2, r0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	085b      	lsrs	r3, r3, #1
 8003b50:	441a      	add	r2, r3
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	685b      	ldr	r3, [r3, #4]
 8003b56:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60da      	str	r2, [r3, #12]
        break;
 8003b62:	e030      	b.n	8003bc6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_HSI:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	685b      	ldr	r3, [r3, #4]
 8003b68:	085b      	lsrs	r3, r3, #1
 8003b6a:	f503 03f4 	add.w	r3, r3, #7995392	; 0x7a0000
 8003b6e:	f503 5390 	add.w	r3, r3, #4608	; 0x1200
 8003b72:	687a      	ldr	r2, [r7, #4]
 8003b74:	6852      	ldr	r2, [r2, #4]
 8003b76:	fbb3 f3f2 	udiv	r3, r3, r2
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	60da      	str	r2, [r3, #12]
        break;
 8003b82:	e020      	b.n	8003bc6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_SYSCLK:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003b84:	f7ff fc0a 	bl	800339c <HAL_RCC_GetSysClockFreq>
 8003b88:	4602      	mov	r2, r0
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	685b      	ldr	r3, [r3, #4]
 8003b8e:	085b      	lsrs	r3, r3, #1
 8003b90:	441a      	add	r2, r3
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	685b      	ldr	r3, [r3, #4]
 8003b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b9a:	b29a      	uxth	r2, r3
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60da      	str	r2, [r3, #12]
        break;
 8003ba2:	e010      	b.n	8003bc6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_LSE:
        huart->Instance->BRR = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	685b      	ldr	r3, [r3, #4]
 8003ba8:	085b      	lsrs	r3, r3, #1
 8003baa:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bb6:	b29a      	uxth	r2, r3
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	60da      	str	r2, [r3, #12]
        break;
 8003bbe:	e002      	b.n	8003bc6 <UART_SetConfig+0x2ae>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8003bc0:	2301      	movs	r3, #1
 8003bc2:	74fb      	strb	r3, [r7, #19]
        break;
 8003bc4:	bf00      	nop
    }
  }

  return ret;
 8003bc6:	7cfb      	ldrb	r3, [r7, #19]

}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3718      	adds	r7, #24
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	bd80      	pop	{r7, pc}
 8003bd0:	efff69f3 	.word	0xefff69f3
 8003bd4:	40013800 	.word	0x40013800
 8003bd8:	40021000 	.word	0x40021000
 8003bdc:	40004400 	.word	0x40004400
 8003be0:	40004800 	.word	0x40004800

08003be4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bf0:	f003 0301 	and.w	r3, r3, #1
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d00a      	beq.n	8003c0e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	430a      	orrs	r2, r1
 8003c0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	f003 0302 	and.w	r3, r3, #2
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d00a      	beq.n	8003c30 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	430a      	orrs	r2, r1
 8003c2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	f003 0304 	and.w	r3, r3, #4
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d00a      	beq.n	8003c52 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	430a      	orrs	r2, r1
 8003c50:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c56:	f003 0308 	and.w	r3, r3, #8
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00a      	beq.n	8003c74 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	685b      	ldr	r3, [r3, #4]
 8003c64:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	430a      	orrs	r2, r1
 8003c72:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c78:	f003 0310 	and.w	r3, r3, #16
 8003c7c:	2b00      	cmp	r3, #0
 8003c7e:	d00a      	beq.n	8003c96 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c9a:	f003 0320 	and.w	r3, r3, #32
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d00a      	beq.n	8003cb8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d01a      	beq.n	8003cfa <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cde:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ce2:	d10a      	bne.n	8003cfa <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685b      	ldr	r3, [r3, #4]
 8003cea:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	430a      	orrs	r2, r1
 8003cf8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d00a      	beq.n	8003d1c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	430a      	orrs	r2, r1
 8003d1a:	605a      	str	r2, [r3, #4]
  }
}
 8003d1c:	bf00      	nop
 8003d1e:	370c      	adds	r7, #12
 8003d20:	46bd      	mov	sp, r7
 8003d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d26:	4770      	bx	lr

08003d28 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003d28:	b580      	push	{r7, lr}
 8003d2a:	b086      	sub	sp, #24
 8003d2c:	af02      	add	r7, sp, #8
 8003d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003d30:	2300      	movs	r3, #0
 8003d32:	60fb      	str	r3, [r7, #12]

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003d3a:	f7fc ffcf 	bl	8000cdc <HAL_GetTick>
 8003d3e:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 0308 	and.w	r3, r3, #8
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d10e      	bne.n	8003d6c <UART_CheckIdleState+0x44>
  {
    /* Wait until TEACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d4e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d52:	9300      	str	r3, [sp, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003d5c:	6878      	ldr	r0, [r7, #4]
 8003d5e:	f000 f82c 	bl	8003dba <UART_WaitOnFlagUntilTimeout>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d001      	beq.n	8003d6c <UART_CheckIdleState+0x44>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003d68:	2303      	movs	r3, #3
 8003d6a:	e022      	b.n	8003db2 <UART_CheckIdleState+0x8a>
    }
  }
  /* Check if the Receiver is enabled */
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f003 0304 	and.w	r3, r3, #4
 8003d76:	2b04      	cmp	r3, #4
 8003d78:	d10e      	bne.n	8003d98 <UART_CheckIdleState+0x70>
  {
    /* Wait until REACK flag is set */
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003d7a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003d88:	6878      	ldr	r0, [r7, #4]
 8003d8a:	f000 f816 	bl	8003dba <UART_WaitOnFlagUntilTimeout>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d001      	beq.n	8003d98 <UART_CheckIdleState+0x70>
    {
      /* Timeout Occured */
      return HAL_TIMEOUT;
 8003d94:	2303      	movs	r3, #3
 8003d96:	e00c      	b.n	8003db2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState  = HAL_UART_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2220      	movs	r2, #32
 8003d9c:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
  huart->RxState = HAL_UART_STATE_READY;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2220      	movs	r2, #32
 8003da4:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2200      	movs	r2, #0
 8003dac:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68

  return HAL_OK;
 8003db0:	2300      	movs	r3, #0
}
 8003db2:	4618      	mov	r0, r3
 8003db4:	3710      	adds	r7, #16
 8003db6:	46bd      	mov	sp, r7
 8003db8:	bd80      	pop	{r7, pc}

08003dba <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8003dba:	b580      	push	{r7, lr}
 8003dbc:	b084      	sub	sp, #16
 8003dbe:	af00      	add	r7, sp, #0
 8003dc0:	60f8      	str	r0, [r7, #12]
 8003dc2:	60b9      	str	r1, [r7, #8]
 8003dc4:	603b      	str	r3, [r7, #0]
 8003dc6:	4613      	mov	r3, r2
 8003dc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003dca:	e02c      	b.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 8003dcc:	69bb      	ldr	r3, [r7, #24]
 8003dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dd2:	d028      	beq.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d007      	beq.n	8003dea <UART_WaitOnFlagUntilTimeout+0x30>
 8003dda:	f7fc ff7f 	bl	8000cdc <HAL_GetTick>
 8003dde:	4602      	mov	r2, r0
 8003de0:	683b      	ldr	r3, [r7, #0]
 8003de2:	1ad3      	subs	r3, r2, r3
 8003de4:	69ba      	ldr	r2, [r7, #24]
 8003de6:	429a      	cmp	r2, r3
 8003de8:	d21d      	bcs.n	8003e26 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	681a      	ldr	r2, [r3, #0]
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003df8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	689a      	ldr	r2, [r3, #8]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	f022 0201 	bic.w	r2, r2, #1
 8003e08:	609a      	str	r2, [r3, #8]

        huart->gState  = HAL_UART_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 2069 	strb.w	r2, [r3, #105]	; 0x69
        huart->RxState = HAL_UART_STATE_READY;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2220      	movs	r2, #32
 8003e16:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2200      	movs	r2, #0
 8003e1e:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
        return HAL_TIMEOUT;
 8003e22:	2303      	movs	r3, #3
 8003e24:	e00f      	b.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x8c>
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	69da      	ldr	r2, [r3, #28]
 8003e2c:	68bb      	ldr	r3, [r7, #8]
 8003e2e:	4013      	ands	r3, r2
 8003e30:	68ba      	ldr	r2, [r7, #8]
 8003e32:	429a      	cmp	r2, r3
 8003e34:	bf0c      	ite	eq
 8003e36:	2301      	moveq	r3, #1
 8003e38:	2300      	movne	r3, #0
 8003e3a:	b2db      	uxtb	r3, r3
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	79fb      	ldrb	r3, [r7, #7]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d0c3      	beq.n	8003dcc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e44:	2300      	movs	r3, #0
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}
	...

08003e50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b0e6      	sub	sp, #408	; 0x198
 8003e54:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003e56:	f7fc fee7 	bl	8000c28 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003e5a:	f000 f821 	bl	8003ea0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003e5e:	f000 f915 	bl	800408c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003e62:	f000 f8e3 	bl	800402c <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8003e66:	f000 f873 	bl	8003f50 <MX_ADC1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  value_adc = check_ADC(&hadc1, rawValues, 200);
 8003e6a:	1d3b      	adds	r3, r7, #4
 8003e6c:	22c8      	movs	r2, #200	; 0xc8
 8003e6e:	4619      	mov	r1, r3
 8003e70:	4809      	ldr	r0, [pc, #36]	; (8003e98 <main+0x48>)
 8003e72:	f000 f955 	bl	8004120 <check_ADC>
 8003e76:	eef0 7a40 	vmov.f32	s15, s0
 8003e7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e7e:	ee17 3a90 	vmov	r3, s15
 8003e82:	f8a7 3196 	strh.w	r3, [r7, #406]	; 0x196
	  tx_UART_int(&huart2, value_adc, 10);
 8003e86:	f8b7 3196 	ldrh.w	r3, [r7, #406]	; 0x196
 8003e8a:	220a      	movs	r2, #10
 8003e8c:	4619      	mov	r1, r3
 8003e8e:	4803      	ldr	r0, [pc, #12]	; (8003e9c <main+0x4c>)
 8003e90:	f000 f9e2 	bl	8004258 <tx_UART_int>
	  value_adc = check_ADC(&hadc1, rawValues, 200);
 8003e94:	e7e9      	b.n	8003e6a <main+0x1a>
 8003e96:	bf00      	nop
 8003e98:	200000a0 	.word	0x200000a0
 8003e9c:	200000f4 	.word	0x200000f4

08003ea0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b096      	sub	sp, #88	; 0x58
 8003ea4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003ea6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003eaa:	2228      	movs	r2, #40	; 0x28
 8003eac:	2100      	movs	r1, #0
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f000 fc50 	bl	8004754 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003eb4:	f107 031c 	add.w	r3, r7, #28
 8003eb8:	2200      	movs	r2, #0
 8003eba:	601a      	str	r2, [r3, #0]
 8003ebc:	605a      	str	r2, [r3, #4]
 8003ebe:	609a      	str	r2, [r3, #8]
 8003ec0:	60da      	str	r2, [r3, #12]
 8003ec2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ec4:	1d3b      	adds	r3, r7, #4
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
 8003eca:	605a      	str	r2, [r3, #4]
 8003ecc:	609a      	str	r2, [r3, #8]
 8003ece:	60da      	str	r2, [r3, #12]
 8003ed0:	611a      	str	r2, [r3, #16]
 8003ed2:	615a      	str	r2, [r3, #20]

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003ed4:	2302      	movs	r3, #2
 8003ed6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003ed8:	2301      	movs	r3, #1
 8003eda:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003edc:	2310      	movs	r3, #16
 8003ede:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8003ee8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003eec:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003eee:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003ef2:	4618      	mov	r0, r3
 8003ef4:	f7fe f9e8 	bl	80022c8 <HAL_RCC_OscConfig>
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d001      	beq.n	8003f02 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8003efe:	f000 f9a3 	bl	8004248 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003f02:	230f      	movs	r3, #15
 8003f04:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003f06:	2302      	movs	r3, #2
 8003f08:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 8003f0a:	2380      	movs	r3, #128	; 0x80
 8003f0c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003f0e:	2300      	movs	r3, #0
 8003f10:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003f12:	2300      	movs	r3, #0
 8003f14:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003f16:	f107 031c 	add.w	r3, r7, #28
 8003f1a:	2100      	movs	r1, #0
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	f7ff f8c1 	bl	80030a4 <HAL_RCC_ClockConfig>
 8003f22:	4603      	mov	r3, r0
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d001      	beq.n	8003f2c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8003f28:	f000 f98e 	bl	8004248 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8003f2c:	2380      	movs	r3, #128	; 0x80
 8003f2e:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Adc12ClockSelection = RCC_ADC12PLLCLK_DIV1;
 8003f30:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003f34:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003f36:	1d3b      	adds	r3, r7, #4
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f7ff fae9 	bl	8003510 <HAL_RCCEx_PeriphCLKConfig>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d001      	beq.n	8003f48 <SystemClock_Config+0xa8>
  {
    Error_Handler();
 8003f44:	f000 f980 	bl	8004248 <Error_Handler>
  }
}
 8003f48:	bf00      	nop
 8003f4a:	3758      	adds	r7, #88	; 0x58
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}

08003f50 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b08a      	sub	sp, #40	; 0x28
 8003f54:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8003f56:	f107 031c 	add.w	r3, r7, #28
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	601a      	str	r2, [r3, #0]
 8003f5e:	605a      	str	r2, [r3, #4]
 8003f60:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8003f62:	1d3b      	adds	r3, r7, #4
 8003f64:	2200      	movs	r2, #0
 8003f66:	601a      	str	r2, [r3, #0]
 8003f68:	605a      	str	r2, [r3, #4]
 8003f6a:	609a      	str	r2, [r3, #8]
 8003f6c:	60da      	str	r2, [r3, #12]
 8003f6e:	611a      	str	r2, [r3, #16]
 8003f70:	615a      	str	r2, [r3, #20]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config 
  */
  hadc1.Instance = ADC1;
 8003f72:	4b2d      	ldr	r3, [pc, #180]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003f74:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8003f78:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8003f7a:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8003f80:	4b29      	ldr	r3, [pc, #164]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003f86:	4b28      	ldr	r3, [pc, #160]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003f88:	2200      	movs	r2, #0
 8003f8a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003f8c:	4b26      	ldr	r3, [pc, #152]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003f8e:	2200      	movs	r2, #0
 8003f90:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003f92:	4b25      	ldr	r3, [pc, #148]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003f94:	2200      	movs	r2, #0
 8003f96:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003f98:	4b23      	ldr	r3, [pc, #140]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003f9a:	2200      	movs	r2, #0
 8003f9c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003f9e:	4b22      	ldr	r3, [pc, #136]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003fa0:	2201      	movs	r2, #1
 8003fa2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003fa4:	4b20      	ldr	r3, [pc, #128]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8003faa:	4b1f      	ldr	r3, [pc, #124]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	621a      	str	r2, [r3, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003fb0:	4b1d      	ldr	r3, [pc, #116]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8003fb6:	4b1c      	ldr	r3, [pc, #112]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003fb8:	2204      	movs	r2, #4
 8003fba:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003fbc:	4b1a      	ldr	r3, [pc, #104]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	619a      	str	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8003fc2:	4b19      	ldr	r3, [pc, #100]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8003fc8:	4817      	ldr	r0, [pc, #92]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003fca:	f7fc feb5 	bl	8000d38 <HAL_ADC_Init>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d001      	beq.n	8003fd8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8003fd4:	f000 f938 	bl	8004248 <Error_Handler>
  }
  /** Configure the ADC multi-mode 
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8003fdc:	f107 031c 	add.w	r3, r7, #28
 8003fe0:	4619      	mov	r1, r3
 8003fe2:	4811      	ldr	r0, [pc, #68]	; (8004028 <MX_ADC1_Init+0xd8>)
 8003fe4:	f7fd fcba 	bl	800195c <HAL_ADCEx_MultiModeConfigChannel>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d001      	beq.n	8003ff2 <MX_ADC1_Init+0xa2>
  {
    Error_Handler();
 8003fee:	f000 f92b 	bl	8004248 <Error_Handler>
  }
  /** Configure Regular Channel 
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8003ff2:	2301      	movs	r3, #1
 8003ff4:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8003ffa:	2300      	movs	r3, #0
 8003ffc:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8003ffe:	2300      	movs	r3, #0
 8004000:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8004002:	2300      	movs	r3, #0
 8004004:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8004006:	2300      	movs	r3, #0
 8004008:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800400a:	1d3b      	adds	r3, r7, #4
 800400c:	4619      	mov	r1, r3
 800400e:	4806      	ldr	r0, [pc, #24]	; (8004028 <MX_ADC1_Init+0xd8>)
 8004010:	f7fd f9e2 	bl	80013d8 <HAL_ADC_ConfigChannel>
 8004014:	4603      	mov	r3, r0
 8004016:	2b00      	cmp	r3, #0
 8004018:	d001      	beq.n	800401e <MX_ADC1_Init+0xce>
  {
    Error_Handler();
 800401a:	f000 f915 	bl	8004248 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800401e:	bf00      	nop
 8004020:	3728      	adds	r7, #40	; 0x28
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
 8004026:	bf00      	nop
 8004028:	200000a0 	.word	0x200000a0

0800402c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8004030:	4b14      	ldr	r3, [pc, #80]	; (8004084 <MX_USART2_UART_Init+0x58>)
 8004032:	4a15      	ldr	r2, [pc, #84]	; (8004088 <MX_USART2_UART_Init+0x5c>)
 8004034:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8004036:	4b13      	ldr	r3, [pc, #76]	; (8004084 <MX_USART2_UART_Init+0x58>)
 8004038:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 800403c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800403e:	4b11      	ldr	r3, [pc, #68]	; (8004084 <MX_USART2_UART_Init+0x58>)
 8004040:	2200      	movs	r2, #0
 8004042:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8004044:	4b0f      	ldr	r3, [pc, #60]	; (8004084 <MX_USART2_UART_Init+0x58>)
 8004046:	2200      	movs	r2, #0
 8004048:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800404a:	4b0e      	ldr	r3, [pc, #56]	; (8004084 <MX_USART2_UART_Init+0x58>)
 800404c:	2200      	movs	r2, #0
 800404e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004050:	4b0c      	ldr	r3, [pc, #48]	; (8004084 <MX_USART2_UART_Init+0x58>)
 8004052:	220c      	movs	r2, #12
 8004054:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004056:	4b0b      	ldr	r3, [pc, #44]	; (8004084 <MX_USART2_UART_Init+0x58>)
 8004058:	2200      	movs	r2, #0
 800405a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800405c:	4b09      	ldr	r3, [pc, #36]	; (8004084 <MX_USART2_UART_Init+0x58>)
 800405e:	2200      	movs	r2, #0
 8004060:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004062:	4b08      	ldr	r3, [pc, #32]	; (8004084 <MX_USART2_UART_Init+0x58>)
 8004064:	2200      	movs	r2, #0
 8004066:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004068:	4b06      	ldr	r3, [pc, #24]	; (8004084 <MX_USART2_UART_Init+0x58>)
 800406a:	2200      	movs	r2, #0
 800406c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800406e:	4805      	ldr	r0, [pc, #20]	; (8004084 <MX_USART2_UART_Init+0x58>)
 8004070:	f7ff fb74 	bl	800375c <HAL_UART_Init>
 8004074:	4603      	mov	r3, r0
 8004076:	2b00      	cmp	r3, #0
 8004078:	d001      	beq.n	800407e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800407a:	f000 f8e5 	bl	8004248 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800407e:	bf00      	nop
 8004080:	bd80      	pop	{r7, pc}
 8004082:	bf00      	nop
 8004084:	200000f4 	.word	0x200000f4
 8004088:	40004400 	.word	0x40004400

0800408c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800408c:	b580      	push	{r7, lr}
 800408e:	b088      	sub	sp, #32
 8004090:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004092:	f107 030c 	add.w	r3, r7, #12
 8004096:	2200      	movs	r2, #0
 8004098:	601a      	str	r2, [r3, #0]
 800409a:	605a      	str	r2, [r3, #4]
 800409c:	609a      	str	r2, [r3, #8]
 800409e:	60da      	str	r2, [r3, #12]
 80040a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80040a2:	4b1d      	ldr	r3, [pc, #116]	; (8004118 <MX_GPIO_Init+0x8c>)
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	4a1c      	ldr	r2, [pc, #112]	; (8004118 <MX_GPIO_Init+0x8c>)
 80040a8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80040ac:	6153      	str	r3, [r2, #20]
 80040ae:	4b1a      	ldr	r3, [pc, #104]	; (8004118 <MX_GPIO_Init+0x8c>)
 80040b0:	695b      	ldr	r3, [r3, #20]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	60bb      	str	r3, [r7, #8]
 80040b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040ba:	4b17      	ldr	r3, [pc, #92]	; (8004118 <MX_GPIO_Init+0x8c>)
 80040bc:	695b      	ldr	r3, [r3, #20]
 80040be:	4a16      	ldr	r2, [pc, #88]	; (8004118 <MX_GPIO_Init+0x8c>)
 80040c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040c4:	6153      	str	r3, [r2, #20]
 80040c6:	4b14      	ldr	r3, [pc, #80]	; (8004118 <MX_GPIO_Init+0x8c>)
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040d2:	4b11      	ldr	r3, [pc, #68]	; (8004118 <MX_GPIO_Init+0x8c>)
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	4a10      	ldr	r2, [pc, #64]	; (8004118 <MX_GPIO_Init+0x8c>)
 80040d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80040dc:	6153      	str	r3, [r2, #20]
 80040de:	4b0e      	ldr	r3, [pc, #56]	; (8004118 <MX_GPIO_Init+0x8c>)
 80040e0:	695b      	ldr	r3, [r3, #20]
 80040e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80040e6:	603b      	str	r3, [r7, #0]
 80040e8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80040ea:	2200      	movs	r2, #0
 80040ec:	2108      	movs	r1, #8
 80040ee:	480b      	ldr	r0, [pc, #44]	; (800411c <MX_GPIO_Init+0x90>)
 80040f0:	f7fe f8c0 	bl	8002274 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80040f4:	2308      	movs	r3, #8
 80040f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80040f8:	2301      	movs	r3, #1
 80040fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040fc:	2300      	movs	r3, #0
 80040fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004100:	2300      	movs	r3, #0
 8004102:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8004104:	f107 030c 	add.w	r3, r7, #12
 8004108:	4619      	mov	r1, r3
 800410a:	4804      	ldr	r0, [pc, #16]	; (800411c <MX_GPIO_Init+0x90>)
 800410c:	f7fd ff3c 	bl	8001f88 <HAL_GPIO_Init>

}
 8004110:	bf00      	nop
 8004112:	3720      	adds	r7, #32
 8004114:	46bd      	mov	sp, r7
 8004116:	bd80      	pop	{r7, pc}
 8004118:	40021000 	.word	0x40021000
 800411c:	48000400 	.word	0x48000400

08004120 <check_ADC>:

/* USER CODE BEGIN 4 */
float check_ADC(ADC_HandleTypeDef *hadc, uint16_t *pData, uint16_t Size){
 8004120:	b590      	push	{r4, r7, lr}
 8004122:	b08b      	sub	sp, #44	; 0x2c
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	4613      	mov	r3, r2
 800412c:	80fb      	strh	r3, [r7, #6]
	double data_adc;
	double processed_adc;
	for (uint8_t i=0;i<Size;i++){
 800412e:	2300      	movs	r3, #0
 8004130:	77fb      	strb	r3, [r7, #31]
 8004132:	e040      	b.n	80041b6 <check_ADC+0x96>
		HAL_ADC_Start(&hadc1);
 8004134:	4840      	ldr	r0, [pc, #256]	; (8004238 <check_ADC+0x118>)
 8004136:	f7fc ff8f 	bl	8001058 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc1, 1000);
 800413a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800413e:	483e      	ldr	r0, [pc, #248]	; (8004238 <check_ADC+0x118>)
 8004140:	f7fd f876 	bl	8001230 <HAL_ADC_PollForConversion>
		pData[i] = HAL_ADC_GetValue(&hadc1);
 8004144:	483c      	ldr	r0, [pc, #240]	; (8004238 <check_ADC+0x118>)
 8004146:	f7fd f939 	bl	80013bc <HAL_ADC_GetValue>
 800414a:	4601      	mov	r1, r0
 800414c:	7ffb      	ldrb	r3, [r7, #31]
 800414e:	005b      	lsls	r3, r3, #1
 8004150:	68ba      	ldr	r2, [r7, #8]
 8004152:	4413      	add	r3, r2
 8004154:	b28a      	uxth	r2, r1
 8004156:	801a      	strh	r2, [r3, #0]
		HAL_ADC_Stop(&hadc1);
 8004158:	4837      	ldr	r0, [pc, #220]	; (8004238 <check_ADC+0x118>)
 800415a:	f7fd f833 	bl	80011c4 <HAL_ADC_Stop>
		data_adc = pData[i]*3300/4095;
 800415e:	7ffb      	ldrb	r3, [r7, #31]
 8004160:	005b      	lsls	r3, r3, #1
 8004162:	68ba      	ldr	r2, [r7, #8]
 8004164:	4413      	add	r3, r2
 8004166:	881b      	ldrh	r3, [r3, #0]
 8004168:	461a      	mov	r2, r3
 800416a:	f640 43e4 	movw	r3, #3300	; 0xce4
 800416e:	fb03 f302 	mul.w	r3, r3, r2
 8004172:	4a32      	ldr	r2, [pc, #200]	; (800423c <check_ADC+0x11c>)
 8004174:	fb82 1203 	smull	r1, r2, r2, r3
 8004178:	441a      	add	r2, r3
 800417a:	12d2      	asrs	r2, r2, #11
 800417c:	17db      	asrs	r3, r3, #31
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	4618      	mov	r0, r3
 8004182:	f7fc f9c7 	bl	8000514 <__aeabi_i2d>
 8004186:	4603      	mov	r3, r0
 8004188:	460c      	mov	r4, r1
 800418a:	e9c7 3404 	strd	r3, r4, [r7, #16]
		processed_adc += data_adc;
 800418e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004192:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8004196:	f7fc f871 	bl	800027c <__adddf3>
 800419a:	4603      	mov	r3, r0
 800419c:	460c      	mov	r4, r1
 800419e:	e9c7 3408 	strd	r3, r4, [r7, #32]

		HAL_Delay(1); // Sustituir por timer
 80041a2:	2001      	movs	r0, #1
 80041a4:	f7fc fda6 	bl	8000cf4 <HAL_Delay>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_3);
 80041a8:	2108      	movs	r1, #8
 80041aa:	4825      	ldr	r0, [pc, #148]	; (8004240 <check_ADC+0x120>)
 80041ac:	f7fe f87a 	bl	80022a4 <HAL_GPIO_TogglePin>
	for (uint8_t i=0;i<Size;i++){
 80041b0:	7ffb      	ldrb	r3, [r7, #31]
 80041b2:	3301      	adds	r3, #1
 80041b4:	77fb      	strb	r3, [r7, #31]
 80041b6:	7ffb      	ldrb	r3, [r7, #31]
 80041b8:	b29b      	uxth	r3, r3
 80041ba:	88fa      	ldrh	r2, [r7, #6]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d8b9      	bhi.n	8004134 <check_ADC+0x14>
	}

	processed_adc = processed_adc/Size;
 80041c0:	88fb      	ldrh	r3, [r7, #6]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7fc f9a6 	bl	8000514 <__aeabi_i2d>
 80041c8:	4603      	mov	r3, r0
 80041ca:	460c      	mov	r4, r1
 80041cc:	461a      	mov	r2, r3
 80041ce:	4623      	mov	r3, r4
 80041d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80041d4:	f7fc fb32 	bl	800083c <__aeabi_ddiv>
 80041d8:	4603      	mov	r3, r0
 80041da:	460c      	mov	r4, r1
 80041dc:	e9c7 3408 	strd	r3, r4, [r7, #32]
	processed_adc = processed_adc/(10*0.908);
 80041e0:	a313      	add	r3, pc, #76	; (adr r3, 8004230 <check_ADC+0x110>)
 80041e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e6:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80041ea:	f7fc fb27 	bl	800083c <__aeabi_ddiv>
 80041ee:	4603      	mov	r3, r0
 80041f0:	460c      	mov	r4, r1
 80041f2:	e9c7 3408 	strd	r3, r4, [r7, #32]
	processed_adc = round(processed_adc);
 80041f6:	ed97 0b08 	vldr	d0, [r7, #32]
 80041fa:	f000 ff3d 	bl	8005078 <round>
 80041fe:	ed87 0b08 	vstr	d0, [r7, #32]
	processed_adc = processed_adc*10;
 8004202:	f04f 0200 	mov.w	r2, #0
 8004206:	4b0f      	ldr	r3, [pc, #60]	; (8004244 <check_ADC+0x124>)
 8004208:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800420c:	f7fc f9ec 	bl	80005e8 <__aeabi_dmul>
 8004210:	4603      	mov	r3, r0
 8004212:	460c      	mov	r4, r1
 8004214:	e9c7 3408 	strd	r3, r4, [r7, #32]

	return processed_adc;
 8004218:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800421c:	f7fc fcb4 	bl	8000b88 <__aeabi_d2f>
 8004220:	4603      	mov	r3, r0
 8004222:	ee07 3a90 	vmov	s15, r3
}
 8004226:	eeb0 0a67 	vmov.f32	s0, s15
 800422a:	372c      	adds	r7, #44	; 0x2c
 800422c:	46bd      	mov	sp, r7
 800422e:	bd90      	pop	{r4, r7, pc}
 8004230:	c28f5c29 	.word	0xc28f5c29
 8004234:	402228f5 	.word	0x402228f5
 8004238:	200000a0 	.word	0x200000a0
 800423c:	80080081 	.word	0x80080081
 8004240:	48000400 	.word	0x48000400
 8004244:	40240000 	.word	0x40240000

08004248 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004248:	b480      	push	{r7}
 800424a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800424c:	bf00      	nop
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
	...

08004258 <tx_UART_int>:
#include "print_UART.h"
#include "math.h"

void tx_UART_int(UART_HandleTypeDef *huart, int data, uint32_t Timeout) {
 8004258:	b5b0      	push	{r4, r5, r7, lr}
 800425a:	b08a      	sub	sp, #40	; 0x28
 800425c:	af00      	add	r7, sp, #0
 800425e:	60f8      	str	r0, [r7, #12]
 8004260:	60b9      	str	r1, [r7, #8]
 8004262:	607a      	str	r2, [r7, #4]
 8004264:	466b      	mov	r3, sp
 8004266:	461d      	mov	r5, r3
	uint8_t negativo = 0;
 8004268:	2300      	movs	r3, #0
 800426a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	if (data < 0) {	// Si es negativo se pasa a positivo y activamos el flag
 800426e:	68bb      	ldr	r3, [r7, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	da05      	bge.n	8004280 <tx_UART_int+0x28>
		data = -data;
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	425b      	negs	r3, r3
 8004278:	60bb      	str	r3, [r7, #8]
		negativo = 1;
 800427a:	2301      	movs	r3, #1
 800427c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
	}

	uint8_t size = size_int(data);
 8004280:	68b8      	ldr	r0, [r7, #8]
 8004282:	f000 f897 	bl	80043b4 <size_int>
 8004286:	4603      	mov	r3, r0
 8004288:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	char data_char[size];		// String de chars
 800428c:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 8004290:	4603      	mov	r3, r0
 8004292:	3b01      	subs	r3, #1
 8004294:	623b      	str	r3, [r7, #32]
 8004296:	b2c1      	uxtb	r1, r0
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	f04f 0400 	mov.w	r4, #0
 80042a4:	00d4      	lsls	r4, r2, #3
 80042a6:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80042aa:	00cb      	lsls	r3, r1, #3
 80042ac:	b2c1      	uxtb	r1, r0
 80042ae:	f04f 0200 	mov.w	r2, #0
 80042b2:	f04f 0300 	mov.w	r3, #0
 80042b6:	f04f 0400 	mov.w	r4, #0
 80042ba:	00d4      	lsls	r4, r2, #3
 80042bc:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 80042c0:	00cb      	lsls	r3, r1, #3
 80042c2:	4603      	mov	r3, r0
 80042c4:	3307      	adds	r3, #7
 80042c6:	08db      	lsrs	r3, r3, #3
 80042c8:	00db      	lsls	r3, r3, #3
 80042ca:	ebad 0d03 	sub.w	sp, sp, r3
 80042ce:	466b      	mov	r3, sp
 80042d0:	3300      	adds	r3, #0
 80042d2:	61fb      	str	r3, [r7, #28]
	sprintf(data_char,"%d", data);	// Cada numero del int en un char
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	68ba      	ldr	r2, [r7, #8]
 80042d8:	4935      	ldr	r1, [pc, #212]	; (80043b0 <tx_UART_int+0x158>)
 80042da:	4618      	mov	r0, r3
 80042dc:	f000 fa42 	bl	8004764 <siprintf>

	size = size+negativo+2;
 80042e0:	f897 2025 	ldrb.w	r2, [r7, #37]	; 0x25
 80042e4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80042e8:	4413      	add	r3, r2
 80042ea:	b2db      	uxtb	r3, r3
 80042ec:	3302      	adds	r3, #2
 80042ee:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	uint8_t int_str[size];
 80042f2:	f897 0025 	ldrb.w	r0, [r7, #37]	; 0x25
 80042f6:	4603      	mov	r3, r0
 80042f8:	3b01      	subs	r3, #1
 80042fa:	61bb      	str	r3, [r7, #24]
 80042fc:	b2c1      	uxtb	r1, r0
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	f04f 0300 	mov.w	r3, #0
 8004306:	f04f 0400 	mov.w	r4, #0
 800430a:	00d4      	lsls	r4, r2, #3
 800430c:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004310:	00cb      	lsls	r3, r1, #3
 8004312:	b2c1      	uxtb	r1, r0
 8004314:	f04f 0200 	mov.w	r2, #0
 8004318:	f04f 0300 	mov.w	r3, #0
 800431c:	f04f 0400 	mov.w	r4, #0
 8004320:	00d4      	lsls	r4, r2, #3
 8004322:	ea44 7451 	orr.w	r4, r4, r1, lsr #29
 8004326:	00cb      	lsls	r3, r1, #3
 8004328:	4603      	mov	r3, r0
 800432a:	3307      	adds	r3, #7
 800432c:	08db      	lsrs	r3, r3, #3
 800432e:	00db      	lsls	r3, r3, #3
 8004330:	ebad 0d03 	sub.w	sp, sp, r3
 8004334:	466b      	mov	r3, sp
 8004336:	3300      	adds	r3, #0
 8004338:	617b      	str	r3, [r7, #20]

	int_str[size-1] = '\r';
 800433a:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800433e:	3b01      	subs	r3, #1
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	210d      	movs	r1, #13
 8004344:	54d1      	strb	r1, [r2, r3]
	int_str[size-2] = '\n';
 8004346:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 800434a:	3b02      	subs	r3, #2
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	210a      	movs	r1, #10
 8004350:	54d1      	strb	r1, [r2, r3]

	for(int8_t i=(size-3); i>=0; i--){
 8004352:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8004356:	3b03      	subs	r3, #3
 8004358:	b2db      	uxtb	r3, r3
 800435a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800435e:	e011      	b.n	8004384 <tx_UART_int+0x12c>
		int_str[i] = (uint8_t) data_char[i-negativo];
 8004360:	f997 2026 	ldrsb.w	r2, [r7, #38]	; 0x26
 8004364:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004368:	1ad2      	subs	r2, r2, r3
 800436a:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800436e:	69f9      	ldr	r1, [r7, #28]
 8004370:	5c89      	ldrb	r1, [r1, r2]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	54d1      	strb	r1, [r2, r3]
	for(int8_t i=(size-3); i>=0; i--){
 8004376:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 800437a:	b2db      	uxtb	r3, r3
 800437c:	3b01      	subs	r3, #1
 800437e:	b2db      	uxtb	r3, r3
 8004380:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8004384:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 8004388:	2b00      	cmp	r3, #0
 800438a:	dae9      	bge.n	8004360 <tx_UART_int+0x108>
	}
	if (negativo == 1) {
 800438c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004390:	2b01      	cmp	r3, #1
 8004392:	d102      	bne.n	800439a <tx_UART_int+0x142>
		int_str[0] = '-';
 8004394:	697b      	ldr	r3, [r7, #20]
 8004396:	222d      	movs	r2, #45	; 0x2d
 8004398:	701a      	strb	r2, [r3, #0]
	}
	HAL_UART_Transmit(huart,int_str,sizeof(int_str), 10);	// TX por UART del array de uint8_t
 800439a:	6979      	ldr	r1, [r7, #20]
 800439c:	b282      	uxth	r2, r0
 800439e:	230a      	movs	r3, #10
 80043a0:	68f8      	ldr	r0, [r7, #12]
 80043a2:	f7ff fa2c 	bl	80037fe <HAL_UART_Transmit>
 80043a6:	46ad      	mov	sp, r5
}
 80043a8:	bf00      	nop
 80043aa:	3728      	adds	r7, #40	; 0x28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	bdb0      	pop	{r4, r5, r7, pc}
 80043b0:	080056b4 	.word	0x080056b4

080043b4 <size_int>:
	byte_str[8] = '\r';
	byte_str[9] = '\n';
	HAL_UART_Transmit(huart, byte_str, sizeof(byte_str), 10);
}

uint8_t size_int(int data){
 80043b4:	b590      	push	{r4, r7, lr}
 80043b6:	b085      	sub	sp, #20
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
	uint8_t size;
	if (data==0){
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d102      	bne.n	80043c8 <size_int+0x14>
		size = 1;
 80043c2:	2301      	movs	r3, #1
 80043c4:	73fb      	strb	r3, [r7, #15]
 80043c6:	e021      	b.n	800440c <size_int+0x58>
	}
	else {
		size = floor(log10(data))+1;
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fc f8a3 	bl	8000514 <__aeabi_i2d>
 80043ce:	4603      	mov	r3, r0
 80043d0:	460c      	mov	r4, r1
 80043d2:	ec44 3b10 	vmov	d0, r3, r4
 80043d6:	f000 fe99 	bl	800510c <log10>
 80043da:	eeb0 7a40 	vmov.f32	s14, s0
 80043de:	eef0 7a60 	vmov.f32	s15, s1
 80043e2:	eeb0 0a47 	vmov.f32	s0, s14
 80043e6:	eef0 0a67 	vmov.f32	s1, s15
 80043ea:	f000 fdc1 	bl	8004f70 <floor>
 80043ee:	ec51 0b10 	vmov	r0, r1, d0
 80043f2:	f04f 0200 	mov.w	r2, #0
 80043f6:	4b08      	ldr	r3, [pc, #32]	; (8004418 <size_int+0x64>)
 80043f8:	f7fb ff40 	bl	800027c <__adddf3>
 80043fc:	4603      	mov	r3, r0
 80043fe:	460c      	mov	r4, r1
 8004400:	4618      	mov	r0, r3
 8004402:	4621      	mov	r1, r4
 8004404:	f7fc fba0 	bl	8000b48 <__aeabi_d2uiz>
 8004408:	4603      	mov	r3, r0
 800440a:	73fb      	strb	r3, [r7, #15]
	}
	return size;
 800440c:	7bfb      	ldrb	r3, [r7, #15]
}
 800440e:	4618      	mov	r0, r3
 8004410:	3714      	adds	r7, #20
 8004412:	46bd      	mov	sp, r7
 8004414:	bd90      	pop	{r4, r7, pc}
 8004416:	bf00      	nop
 8004418:	3ff00000 	.word	0x3ff00000

0800441c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004422:	4b0f      	ldr	r3, [pc, #60]	; (8004460 <HAL_MspInit+0x44>)
 8004424:	699b      	ldr	r3, [r3, #24]
 8004426:	4a0e      	ldr	r2, [pc, #56]	; (8004460 <HAL_MspInit+0x44>)
 8004428:	f043 0301 	orr.w	r3, r3, #1
 800442c:	6193      	str	r3, [r2, #24]
 800442e:	4b0c      	ldr	r3, [pc, #48]	; (8004460 <HAL_MspInit+0x44>)
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f003 0301 	and.w	r3, r3, #1
 8004436:	607b      	str	r3, [r7, #4]
 8004438:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800443a:	4b09      	ldr	r3, [pc, #36]	; (8004460 <HAL_MspInit+0x44>)
 800443c:	69db      	ldr	r3, [r3, #28]
 800443e:	4a08      	ldr	r2, [pc, #32]	; (8004460 <HAL_MspInit+0x44>)
 8004440:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004444:	61d3      	str	r3, [r2, #28]
 8004446:	4b06      	ldr	r3, [pc, #24]	; (8004460 <HAL_MspInit+0x44>)
 8004448:	69db      	ldr	r3, [r3, #28]
 800444a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800444e:	603b      	str	r3, [r7, #0]
 8004450:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004452:	bf00      	nop
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr
 800445e:	bf00      	nop
 8004460:	40021000 	.word	0x40021000

08004464 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b08a      	sub	sp, #40	; 0x28
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800446c:	f107 0314 	add.w	r3, r7, #20
 8004470:	2200      	movs	r2, #0
 8004472:	601a      	str	r2, [r3, #0]
 8004474:	605a      	str	r2, [r3, #4]
 8004476:	609a      	str	r2, [r3, #8]
 8004478:	60da      	str	r2, [r3, #12]
 800447a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004484:	d124      	bne.n	80044d0 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8004486:	4b14      	ldr	r3, [pc, #80]	; (80044d8 <HAL_ADC_MspInit+0x74>)
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	4a13      	ldr	r2, [pc, #76]	; (80044d8 <HAL_ADC_MspInit+0x74>)
 800448c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004490:	6153      	str	r3, [r2, #20]
 8004492:	4b11      	ldr	r3, [pc, #68]	; (80044d8 <HAL_ADC_MspInit+0x74>)
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800449a:	613b      	str	r3, [r7, #16]
 800449c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800449e:	4b0e      	ldr	r3, [pc, #56]	; (80044d8 <HAL_ADC_MspInit+0x74>)
 80044a0:	695b      	ldr	r3, [r3, #20]
 80044a2:	4a0d      	ldr	r2, [pc, #52]	; (80044d8 <HAL_ADC_MspInit+0x74>)
 80044a4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a8:	6153      	str	r3, [r2, #20]
 80044aa:	4b0b      	ldr	r3, [pc, #44]	; (80044d8 <HAL_ADC_MspInit+0x74>)
 80044ac:	695b      	ldr	r3, [r3, #20]
 80044ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044b2:	60fb      	str	r3, [r7, #12]
 80044b4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration    
    PA0     ------> ADC1_IN1 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80044b6:	2301      	movs	r3, #1
 80044b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80044ba:	2303      	movs	r3, #3
 80044bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80044be:	2300      	movs	r3, #0
 80044c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80044c2:	f107 0314 	add.w	r3, r7, #20
 80044c6:	4619      	mov	r1, r3
 80044c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80044cc:	f7fd fd5c 	bl	8001f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80044d0:	bf00      	nop
 80044d2:	3728      	adds	r7, #40	; 0x28
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bd80      	pop	{r7, pc}
 80044d8:	40021000 	.word	0x40021000

080044dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b08a      	sub	sp, #40	; 0x28
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80044e4:	f107 0314 	add.w	r3, r7, #20
 80044e8:	2200      	movs	r2, #0
 80044ea:	601a      	str	r2, [r3, #0]
 80044ec:	605a      	str	r2, [r3, #4]
 80044ee:	609a      	str	r2, [r3, #8]
 80044f0:	60da      	str	r2, [r3, #12]
 80044f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a18      	ldr	r2, [pc, #96]	; (800455c <HAL_UART_MspInit+0x80>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d129      	bne.n	8004552 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80044fe:	4b18      	ldr	r3, [pc, #96]	; (8004560 <HAL_UART_MspInit+0x84>)
 8004500:	69db      	ldr	r3, [r3, #28]
 8004502:	4a17      	ldr	r2, [pc, #92]	; (8004560 <HAL_UART_MspInit+0x84>)
 8004504:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004508:	61d3      	str	r3, [r2, #28]
 800450a:	4b15      	ldr	r3, [pc, #84]	; (8004560 <HAL_UART_MspInit+0x84>)
 800450c:	69db      	ldr	r3, [r3, #28]
 800450e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004512:	613b      	str	r3, [r7, #16]
 8004514:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004516:	4b12      	ldr	r3, [pc, #72]	; (8004560 <HAL_UART_MspInit+0x84>)
 8004518:	695b      	ldr	r3, [r3, #20]
 800451a:	4a11      	ldr	r2, [pc, #68]	; (8004560 <HAL_UART_MspInit+0x84>)
 800451c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004520:	6153      	str	r3, [r2, #20]
 8004522:	4b0f      	ldr	r3, [pc, #60]	; (8004560 <HAL_UART_MspInit+0x84>)
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452a:	60fb      	str	r3, [r7, #12]
 800452c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA15     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin|VCP_RX_Pin;
 800452e:	f248 0304 	movw	r3, #32772	; 0x8004
 8004532:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004534:	2302      	movs	r3, #2
 8004536:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004538:	2300      	movs	r3, #0
 800453a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800453c:	2303      	movs	r3, #3
 800453e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004540:	2307      	movs	r3, #7
 8004542:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004544:	f107 0314 	add.w	r3, r7, #20
 8004548:	4619      	mov	r1, r3
 800454a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800454e:	f7fd fd1b 	bl	8001f88 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004552:	bf00      	nop
 8004554:	3728      	adds	r7, #40	; 0x28
 8004556:	46bd      	mov	sp, r7
 8004558:	bd80      	pop	{r7, pc}
 800455a:	bf00      	nop
 800455c:	40004400 	.word	0x40004400
 8004560:	40021000 	.word	0x40021000

08004564 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8004568:	bf00      	nop
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr

08004572 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004572:	b480      	push	{r7}
 8004574:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004576:	e7fe      	b.n	8004576 <HardFault_Handler+0x4>

08004578 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800457c:	e7fe      	b.n	800457c <MemManage_Handler+0x4>

0800457e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800457e:	b480      	push	{r7}
 8004580:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004582:	e7fe      	b.n	8004582 <BusFault_Handler+0x4>

08004584 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004584:	b480      	push	{r7}
 8004586:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004588:	e7fe      	b.n	8004588 <UsageFault_Handler+0x4>

0800458a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800458a:	b480      	push	{r7}
 800458c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800458e:	bf00      	nop
 8004590:	46bd      	mov	sp, r7
 8004592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004596:	4770      	bx	lr

08004598 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004598:	b480      	push	{r7}
 800459a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800459c:	bf00      	nop
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr

080045a6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80045a6:	b480      	push	{r7}
 80045a8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80045aa:	bf00      	nop
 80045ac:	46bd      	mov	sp, r7
 80045ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b2:	4770      	bx	lr

080045b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80045b8:	f7fc fb7c 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80045bc:	bf00      	nop
 80045be:	bd80      	pop	{r7, pc}

080045c0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b084      	sub	sp, #16
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80045c8:	4b11      	ldr	r3, [pc, #68]	; (8004610 <_sbrk+0x50>)
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d102      	bne.n	80045d6 <_sbrk+0x16>
		heap_end = &end;
 80045d0:	4b0f      	ldr	r3, [pc, #60]	; (8004610 <_sbrk+0x50>)
 80045d2:	4a10      	ldr	r2, [pc, #64]	; (8004614 <_sbrk+0x54>)
 80045d4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80045d6:	4b0e      	ldr	r3, [pc, #56]	; (8004610 <_sbrk+0x50>)
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80045dc:	4b0c      	ldr	r3, [pc, #48]	; (8004610 <_sbrk+0x50>)
 80045de:	681a      	ldr	r2, [r3, #0]
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	4413      	add	r3, r2
 80045e4:	466a      	mov	r2, sp
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d907      	bls.n	80045fa <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80045ea:	f000 f889 	bl	8004700 <__errno>
 80045ee:	4602      	mov	r2, r0
 80045f0:	230c      	movs	r3, #12
 80045f2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80045f4:	f04f 33ff 	mov.w	r3, #4294967295
 80045f8:	e006      	b.n	8004608 <_sbrk+0x48>
	}

	heap_end += incr;
 80045fa:	4b05      	ldr	r3, [pc, #20]	; (8004610 <_sbrk+0x50>)
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	4413      	add	r3, r2
 8004602:	4a03      	ldr	r2, [pc, #12]	; (8004610 <_sbrk+0x50>)
 8004604:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8004606:	68fb      	ldr	r3, [r7, #12]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3710      	adds	r7, #16
 800460c:	46bd      	mov	sp, r7
 800460e:	bd80      	pop	{r7, pc}
 8004610:	20000090 	.word	0x20000090
 8004614:	20000168 	.word	0x20000168

08004618 <SystemInit>:
  *         Initialize the FPU setting, vector table location and the PLL configuration is reset.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004618:	b480      	push	{r7}
 800461a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800461c:	4b1f      	ldr	r3, [pc, #124]	; (800469c <SystemInit+0x84>)
 800461e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004622:	4a1e      	ldr	r2, [pc, #120]	; (800469c <SystemInit+0x84>)
 8004624:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004628:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= 0x00000001U;
 800462c:	4b1c      	ldr	r3, [pc, #112]	; (80046a0 <SystemInit+0x88>)
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	4a1b      	ldr	r2, [pc, #108]	; (80046a0 <SystemInit+0x88>)
 8004632:	f043 0301 	orr.w	r3, r3, #1
 8004636:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR &= 0xF87FC00CU;
 8004638:	4b19      	ldr	r3, [pc, #100]	; (80046a0 <SystemInit+0x88>)
 800463a:	685a      	ldr	r2, [r3, #4]
 800463c:	4918      	ldr	r1, [pc, #96]	; (80046a0 <SystemInit+0x88>)
 800463e:	4b19      	ldr	r3, [pc, #100]	; (80046a4 <SystemInit+0x8c>)
 8004640:	4013      	ands	r3, r2
 8004642:	604b      	str	r3, [r1, #4]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= 0xFEF6FFFFU;
 8004644:	4b16      	ldr	r3, [pc, #88]	; (80046a0 <SystemInit+0x88>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a15      	ldr	r2, [pc, #84]	; (80046a0 <SystemInit+0x88>)
 800464a:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 800464e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004652:	6013      	str	r3, [r2, #0]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8004654:	4b12      	ldr	r3, [pc, #72]	; (80046a0 <SystemInit+0x88>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4a11      	ldr	r2, [pc, #68]	; (80046a0 <SystemInit+0x88>)
 800465a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800465e:	6013      	str	r3, [r2, #0]

  /* Reset PLLSRC, PLLXTPRE, PLLMUL and USBPRE bits */
  RCC->CFGR &= 0xFF80FFFFU;
 8004660:	4b0f      	ldr	r3, [pc, #60]	; (80046a0 <SystemInit+0x88>)
 8004662:	685b      	ldr	r3, [r3, #4]
 8004664:	4a0e      	ldr	r2, [pc, #56]	; (80046a0 <SystemInit+0x88>)
 8004666:	f423 03fe 	bic.w	r3, r3, #8323072	; 0x7f0000
 800466a:	6053      	str	r3, [r2, #4]

  /* Reset PREDIV1[3:0] bits */
  RCC->CFGR2 &= 0xFFFFFFF0U;
 800466c:	4b0c      	ldr	r3, [pc, #48]	; (80046a0 <SystemInit+0x88>)
 800466e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004670:	4a0b      	ldr	r2, [pc, #44]	; (80046a0 <SystemInit+0x88>)
 8004672:	f023 030f 	bic.w	r3, r3, #15
 8004676:	62d3      	str	r3, [r2, #44]	; 0x2c

  /* Reset USARTSW[1:0], I2CSW and TIMs bits */
  RCC->CFGR3 &= 0xFF00FCCCU;
 8004678:	4b09      	ldr	r3, [pc, #36]	; (80046a0 <SystemInit+0x88>)
 800467a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800467c:	4908      	ldr	r1, [pc, #32]	; (80046a0 <SystemInit+0x88>)
 800467e:	4b0a      	ldr	r3, [pc, #40]	; (80046a8 <SystemInit+0x90>)
 8004680:	4013      	ands	r3, r2
 8004682:	630b      	str	r3, [r1, #48]	; 0x30

  /* Disable all interrupts */
  RCC->CIR = 0x00000000U;
 8004684:	4b06      	ldr	r3, [pc, #24]	; (80046a0 <SystemInit+0x88>)
 8004686:	2200      	movs	r2, #0
 8004688:	609a      	str	r2, [r3, #8]

#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800468a:	4b04      	ldr	r3, [pc, #16]	; (800469c <SystemInit+0x84>)
 800468c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004690:	609a      	str	r2, [r3, #8]
#endif
}
 8004692:	bf00      	nop
 8004694:	46bd      	mov	sp, r7
 8004696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800469a:	4770      	bx	lr
 800469c:	e000ed00 	.word	0xe000ed00
 80046a0:	40021000 	.word	0x40021000
 80046a4:	f87fc00c 	.word	0xf87fc00c
 80046a8:	ff00fccc 	.word	0xff00fccc

080046ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80046ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80046e4 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80046b0:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80046b2:	e003      	b.n	80046bc <LoopCopyDataInit>

080046b4 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80046b4:	4b0c      	ldr	r3, [pc, #48]	; (80046e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80046b6:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80046b8:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80046ba:	3104      	adds	r1, #4

080046bc <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80046bc:	480b      	ldr	r0, [pc, #44]	; (80046ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80046be:	4b0c      	ldr	r3, [pc, #48]	; (80046f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80046c0:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80046c2:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80046c4:	d3f6      	bcc.n	80046b4 <CopyDataInit>
	ldr	r2, =_sbss
 80046c6:	4a0b      	ldr	r2, [pc, #44]	; (80046f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80046c8:	e002      	b.n	80046d0 <LoopFillZerobss>

080046ca <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80046ca:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80046cc:	f842 3b04 	str.w	r3, [r2], #4

080046d0 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80046d0:	4b09      	ldr	r3, [pc, #36]	; (80046f8 <LoopForever+0x16>)
	cmp	r2, r3
 80046d2:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80046d4:	d3f9      	bcc.n	80046ca <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80046d6:	f7ff ff9f 	bl	8004618 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80046da:	f000 f817 	bl	800470c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80046de:	f7ff fbb7 	bl	8003e50 <main>

080046e2 <LoopForever>:

LoopForever:
    b LoopForever
 80046e2:	e7fe      	b.n	80046e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80046e4:	20003000 	.word	0x20003000
	ldr	r3, =_sidata
 80046e8:	08005734 	.word	0x08005734
	ldr	r0, =_sdata
 80046ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80046f0:	20000074 	.word	0x20000074
	ldr	r2, =_sbss
 80046f4:	20000074 	.word	0x20000074
	ldr	r3, = _ebss
 80046f8:	20000168 	.word	0x20000168

080046fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80046fc:	e7fe      	b.n	80046fc <ADC1_2_IRQHandler>
	...

08004700 <__errno>:
 8004700:	4b01      	ldr	r3, [pc, #4]	; (8004708 <__errno+0x8>)
 8004702:	6818      	ldr	r0, [r3, #0]
 8004704:	4770      	bx	lr
 8004706:	bf00      	nop
 8004708:	2000000c 	.word	0x2000000c

0800470c <__libc_init_array>:
 800470c:	b570      	push	{r4, r5, r6, lr}
 800470e:	4e0d      	ldr	r6, [pc, #52]	; (8004744 <__libc_init_array+0x38>)
 8004710:	4c0d      	ldr	r4, [pc, #52]	; (8004748 <__libc_init_array+0x3c>)
 8004712:	1ba4      	subs	r4, r4, r6
 8004714:	10a4      	asrs	r4, r4, #2
 8004716:	2500      	movs	r5, #0
 8004718:	42a5      	cmp	r5, r4
 800471a:	d109      	bne.n	8004730 <__libc_init_array+0x24>
 800471c:	4e0b      	ldr	r6, [pc, #44]	; (800474c <__libc_init_array+0x40>)
 800471e:	4c0c      	ldr	r4, [pc, #48]	; (8004750 <__libc_init_array+0x44>)
 8004720:	f000 ffbc 	bl	800569c <_init>
 8004724:	1ba4      	subs	r4, r4, r6
 8004726:	10a4      	asrs	r4, r4, #2
 8004728:	2500      	movs	r5, #0
 800472a:	42a5      	cmp	r5, r4
 800472c:	d105      	bne.n	800473a <__libc_init_array+0x2e>
 800472e:	bd70      	pop	{r4, r5, r6, pc}
 8004730:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004734:	4798      	blx	r3
 8004736:	3501      	adds	r5, #1
 8004738:	e7ee      	b.n	8004718 <__libc_init_array+0xc>
 800473a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800473e:	4798      	blx	r3
 8004740:	3501      	adds	r5, #1
 8004742:	e7f2      	b.n	800472a <__libc_init_array+0x1e>
 8004744:	0800572c 	.word	0x0800572c
 8004748:	0800572c 	.word	0x0800572c
 800474c:	0800572c 	.word	0x0800572c
 8004750:	08005730 	.word	0x08005730

08004754 <memset>:
 8004754:	4402      	add	r2, r0
 8004756:	4603      	mov	r3, r0
 8004758:	4293      	cmp	r3, r2
 800475a:	d100      	bne.n	800475e <memset+0xa>
 800475c:	4770      	bx	lr
 800475e:	f803 1b01 	strb.w	r1, [r3], #1
 8004762:	e7f9      	b.n	8004758 <memset+0x4>

08004764 <siprintf>:
 8004764:	b40e      	push	{r1, r2, r3}
 8004766:	b500      	push	{lr}
 8004768:	b09c      	sub	sp, #112	; 0x70
 800476a:	ab1d      	add	r3, sp, #116	; 0x74
 800476c:	9002      	str	r0, [sp, #8]
 800476e:	9006      	str	r0, [sp, #24]
 8004770:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004774:	4809      	ldr	r0, [pc, #36]	; (800479c <siprintf+0x38>)
 8004776:	9107      	str	r1, [sp, #28]
 8004778:	9104      	str	r1, [sp, #16]
 800477a:	4909      	ldr	r1, [pc, #36]	; (80047a0 <siprintf+0x3c>)
 800477c:	f853 2b04 	ldr.w	r2, [r3], #4
 8004780:	9105      	str	r1, [sp, #20]
 8004782:	6800      	ldr	r0, [r0, #0]
 8004784:	9301      	str	r3, [sp, #4]
 8004786:	a902      	add	r1, sp, #8
 8004788:	f000 f866 	bl	8004858 <_svfiprintf_r>
 800478c:	9b02      	ldr	r3, [sp, #8]
 800478e:	2200      	movs	r2, #0
 8004790:	701a      	strb	r2, [r3, #0]
 8004792:	b01c      	add	sp, #112	; 0x70
 8004794:	f85d eb04 	ldr.w	lr, [sp], #4
 8004798:	b003      	add	sp, #12
 800479a:	4770      	bx	lr
 800479c:	2000000c 	.word	0x2000000c
 80047a0:	ffff0208 	.word	0xffff0208

080047a4 <__ssputs_r>:
 80047a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047a8:	688e      	ldr	r6, [r1, #8]
 80047aa:	429e      	cmp	r6, r3
 80047ac:	4682      	mov	sl, r0
 80047ae:	460c      	mov	r4, r1
 80047b0:	4690      	mov	r8, r2
 80047b2:	4699      	mov	r9, r3
 80047b4:	d837      	bhi.n	8004826 <__ssputs_r+0x82>
 80047b6:	898a      	ldrh	r2, [r1, #12]
 80047b8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80047bc:	d031      	beq.n	8004822 <__ssputs_r+0x7e>
 80047be:	6825      	ldr	r5, [r4, #0]
 80047c0:	6909      	ldr	r1, [r1, #16]
 80047c2:	1a6f      	subs	r7, r5, r1
 80047c4:	6965      	ldr	r5, [r4, #20]
 80047c6:	2302      	movs	r3, #2
 80047c8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80047cc:	fb95 f5f3 	sdiv	r5, r5, r3
 80047d0:	f109 0301 	add.w	r3, r9, #1
 80047d4:	443b      	add	r3, r7
 80047d6:	429d      	cmp	r5, r3
 80047d8:	bf38      	it	cc
 80047da:	461d      	movcc	r5, r3
 80047dc:	0553      	lsls	r3, r2, #21
 80047de:	d530      	bpl.n	8004842 <__ssputs_r+0x9e>
 80047e0:	4629      	mov	r1, r5
 80047e2:	f000 fb2b 	bl	8004e3c <_malloc_r>
 80047e6:	4606      	mov	r6, r0
 80047e8:	b950      	cbnz	r0, 8004800 <__ssputs_r+0x5c>
 80047ea:	230c      	movs	r3, #12
 80047ec:	f8ca 3000 	str.w	r3, [sl]
 80047f0:	89a3      	ldrh	r3, [r4, #12]
 80047f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80047f6:	81a3      	strh	r3, [r4, #12]
 80047f8:	f04f 30ff 	mov.w	r0, #4294967295
 80047fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004800:	463a      	mov	r2, r7
 8004802:	6921      	ldr	r1, [r4, #16]
 8004804:	f000 faa8 	bl	8004d58 <memcpy>
 8004808:	89a3      	ldrh	r3, [r4, #12]
 800480a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800480e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004812:	81a3      	strh	r3, [r4, #12]
 8004814:	6126      	str	r6, [r4, #16]
 8004816:	6165      	str	r5, [r4, #20]
 8004818:	443e      	add	r6, r7
 800481a:	1bed      	subs	r5, r5, r7
 800481c:	6026      	str	r6, [r4, #0]
 800481e:	60a5      	str	r5, [r4, #8]
 8004820:	464e      	mov	r6, r9
 8004822:	454e      	cmp	r6, r9
 8004824:	d900      	bls.n	8004828 <__ssputs_r+0x84>
 8004826:	464e      	mov	r6, r9
 8004828:	4632      	mov	r2, r6
 800482a:	4641      	mov	r1, r8
 800482c:	6820      	ldr	r0, [r4, #0]
 800482e:	f000 fa9e 	bl	8004d6e <memmove>
 8004832:	68a3      	ldr	r3, [r4, #8]
 8004834:	1b9b      	subs	r3, r3, r6
 8004836:	60a3      	str	r3, [r4, #8]
 8004838:	6823      	ldr	r3, [r4, #0]
 800483a:	441e      	add	r6, r3
 800483c:	6026      	str	r6, [r4, #0]
 800483e:	2000      	movs	r0, #0
 8004840:	e7dc      	b.n	80047fc <__ssputs_r+0x58>
 8004842:	462a      	mov	r2, r5
 8004844:	f000 fb54 	bl	8004ef0 <_realloc_r>
 8004848:	4606      	mov	r6, r0
 800484a:	2800      	cmp	r0, #0
 800484c:	d1e2      	bne.n	8004814 <__ssputs_r+0x70>
 800484e:	6921      	ldr	r1, [r4, #16]
 8004850:	4650      	mov	r0, sl
 8004852:	f000 faa5 	bl	8004da0 <_free_r>
 8004856:	e7c8      	b.n	80047ea <__ssputs_r+0x46>

08004858 <_svfiprintf_r>:
 8004858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800485c:	461d      	mov	r5, r3
 800485e:	898b      	ldrh	r3, [r1, #12]
 8004860:	061f      	lsls	r7, r3, #24
 8004862:	b09d      	sub	sp, #116	; 0x74
 8004864:	4680      	mov	r8, r0
 8004866:	460c      	mov	r4, r1
 8004868:	4616      	mov	r6, r2
 800486a:	d50f      	bpl.n	800488c <_svfiprintf_r+0x34>
 800486c:	690b      	ldr	r3, [r1, #16]
 800486e:	b96b      	cbnz	r3, 800488c <_svfiprintf_r+0x34>
 8004870:	2140      	movs	r1, #64	; 0x40
 8004872:	f000 fae3 	bl	8004e3c <_malloc_r>
 8004876:	6020      	str	r0, [r4, #0]
 8004878:	6120      	str	r0, [r4, #16]
 800487a:	b928      	cbnz	r0, 8004888 <_svfiprintf_r+0x30>
 800487c:	230c      	movs	r3, #12
 800487e:	f8c8 3000 	str.w	r3, [r8]
 8004882:	f04f 30ff 	mov.w	r0, #4294967295
 8004886:	e0c8      	b.n	8004a1a <_svfiprintf_r+0x1c2>
 8004888:	2340      	movs	r3, #64	; 0x40
 800488a:	6163      	str	r3, [r4, #20]
 800488c:	2300      	movs	r3, #0
 800488e:	9309      	str	r3, [sp, #36]	; 0x24
 8004890:	2320      	movs	r3, #32
 8004892:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004896:	2330      	movs	r3, #48	; 0x30
 8004898:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800489c:	9503      	str	r5, [sp, #12]
 800489e:	f04f 0b01 	mov.w	fp, #1
 80048a2:	4637      	mov	r7, r6
 80048a4:	463d      	mov	r5, r7
 80048a6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80048aa:	b10b      	cbz	r3, 80048b0 <_svfiprintf_r+0x58>
 80048ac:	2b25      	cmp	r3, #37	; 0x25
 80048ae:	d13e      	bne.n	800492e <_svfiprintf_r+0xd6>
 80048b0:	ebb7 0a06 	subs.w	sl, r7, r6
 80048b4:	d00b      	beq.n	80048ce <_svfiprintf_r+0x76>
 80048b6:	4653      	mov	r3, sl
 80048b8:	4632      	mov	r2, r6
 80048ba:	4621      	mov	r1, r4
 80048bc:	4640      	mov	r0, r8
 80048be:	f7ff ff71 	bl	80047a4 <__ssputs_r>
 80048c2:	3001      	adds	r0, #1
 80048c4:	f000 80a4 	beq.w	8004a10 <_svfiprintf_r+0x1b8>
 80048c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80048ca:	4453      	add	r3, sl
 80048cc:	9309      	str	r3, [sp, #36]	; 0x24
 80048ce:	783b      	ldrb	r3, [r7, #0]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	f000 809d 	beq.w	8004a10 <_svfiprintf_r+0x1b8>
 80048d6:	2300      	movs	r3, #0
 80048d8:	f04f 32ff 	mov.w	r2, #4294967295
 80048dc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80048e0:	9304      	str	r3, [sp, #16]
 80048e2:	9307      	str	r3, [sp, #28]
 80048e4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80048e8:	931a      	str	r3, [sp, #104]	; 0x68
 80048ea:	462f      	mov	r7, r5
 80048ec:	2205      	movs	r2, #5
 80048ee:	f817 1b01 	ldrb.w	r1, [r7], #1
 80048f2:	4850      	ldr	r0, [pc, #320]	; (8004a34 <_svfiprintf_r+0x1dc>)
 80048f4:	f7fb fc6c 	bl	80001d0 <memchr>
 80048f8:	9b04      	ldr	r3, [sp, #16]
 80048fa:	b9d0      	cbnz	r0, 8004932 <_svfiprintf_r+0xda>
 80048fc:	06d9      	lsls	r1, r3, #27
 80048fe:	bf44      	itt	mi
 8004900:	2220      	movmi	r2, #32
 8004902:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004906:	071a      	lsls	r2, r3, #28
 8004908:	bf44      	itt	mi
 800490a:	222b      	movmi	r2, #43	; 0x2b
 800490c:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004910:	782a      	ldrb	r2, [r5, #0]
 8004912:	2a2a      	cmp	r2, #42	; 0x2a
 8004914:	d015      	beq.n	8004942 <_svfiprintf_r+0xea>
 8004916:	9a07      	ldr	r2, [sp, #28]
 8004918:	462f      	mov	r7, r5
 800491a:	2000      	movs	r0, #0
 800491c:	250a      	movs	r5, #10
 800491e:	4639      	mov	r1, r7
 8004920:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004924:	3b30      	subs	r3, #48	; 0x30
 8004926:	2b09      	cmp	r3, #9
 8004928:	d94d      	bls.n	80049c6 <_svfiprintf_r+0x16e>
 800492a:	b1b8      	cbz	r0, 800495c <_svfiprintf_r+0x104>
 800492c:	e00f      	b.n	800494e <_svfiprintf_r+0xf6>
 800492e:	462f      	mov	r7, r5
 8004930:	e7b8      	b.n	80048a4 <_svfiprintf_r+0x4c>
 8004932:	4a40      	ldr	r2, [pc, #256]	; (8004a34 <_svfiprintf_r+0x1dc>)
 8004934:	1a80      	subs	r0, r0, r2
 8004936:	fa0b f000 	lsl.w	r0, fp, r0
 800493a:	4318      	orrs	r0, r3
 800493c:	9004      	str	r0, [sp, #16]
 800493e:	463d      	mov	r5, r7
 8004940:	e7d3      	b.n	80048ea <_svfiprintf_r+0x92>
 8004942:	9a03      	ldr	r2, [sp, #12]
 8004944:	1d11      	adds	r1, r2, #4
 8004946:	6812      	ldr	r2, [r2, #0]
 8004948:	9103      	str	r1, [sp, #12]
 800494a:	2a00      	cmp	r2, #0
 800494c:	db01      	blt.n	8004952 <_svfiprintf_r+0xfa>
 800494e:	9207      	str	r2, [sp, #28]
 8004950:	e004      	b.n	800495c <_svfiprintf_r+0x104>
 8004952:	4252      	negs	r2, r2
 8004954:	f043 0302 	orr.w	r3, r3, #2
 8004958:	9207      	str	r2, [sp, #28]
 800495a:	9304      	str	r3, [sp, #16]
 800495c:	783b      	ldrb	r3, [r7, #0]
 800495e:	2b2e      	cmp	r3, #46	; 0x2e
 8004960:	d10c      	bne.n	800497c <_svfiprintf_r+0x124>
 8004962:	787b      	ldrb	r3, [r7, #1]
 8004964:	2b2a      	cmp	r3, #42	; 0x2a
 8004966:	d133      	bne.n	80049d0 <_svfiprintf_r+0x178>
 8004968:	9b03      	ldr	r3, [sp, #12]
 800496a:	1d1a      	adds	r2, r3, #4
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	9203      	str	r2, [sp, #12]
 8004970:	2b00      	cmp	r3, #0
 8004972:	bfb8      	it	lt
 8004974:	f04f 33ff 	movlt.w	r3, #4294967295
 8004978:	3702      	adds	r7, #2
 800497a:	9305      	str	r3, [sp, #20]
 800497c:	4d2e      	ldr	r5, [pc, #184]	; (8004a38 <_svfiprintf_r+0x1e0>)
 800497e:	7839      	ldrb	r1, [r7, #0]
 8004980:	2203      	movs	r2, #3
 8004982:	4628      	mov	r0, r5
 8004984:	f7fb fc24 	bl	80001d0 <memchr>
 8004988:	b138      	cbz	r0, 800499a <_svfiprintf_r+0x142>
 800498a:	2340      	movs	r3, #64	; 0x40
 800498c:	1b40      	subs	r0, r0, r5
 800498e:	fa03 f000 	lsl.w	r0, r3, r0
 8004992:	9b04      	ldr	r3, [sp, #16]
 8004994:	4303      	orrs	r3, r0
 8004996:	3701      	adds	r7, #1
 8004998:	9304      	str	r3, [sp, #16]
 800499a:	7839      	ldrb	r1, [r7, #0]
 800499c:	4827      	ldr	r0, [pc, #156]	; (8004a3c <_svfiprintf_r+0x1e4>)
 800499e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80049a2:	2206      	movs	r2, #6
 80049a4:	1c7e      	adds	r6, r7, #1
 80049a6:	f7fb fc13 	bl	80001d0 <memchr>
 80049aa:	2800      	cmp	r0, #0
 80049ac:	d038      	beq.n	8004a20 <_svfiprintf_r+0x1c8>
 80049ae:	4b24      	ldr	r3, [pc, #144]	; (8004a40 <_svfiprintf_r+0x1e8>)
 80049b0:	bb13      	cbnz	r3, 80049f8 <_svfiprintf_r+0x1a0>
 80049b2:	9b03      	ldr	r3, [sp, #12]
 80049b4:	3307      	adds	r3, #7
 80049b6:	f023 0307 	bic.w	r3, r3, #7
 80049ba:	3308      	adds	r3, #8
 80049bc:	9303      	str	r3, [sp, #12]
 80049be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80049c0:	444b      	add	r3, r9
 80049c2:	9309      	str	r3, [sp, #36]	; 0x24
 80049c4:	e76d      	b.n	80048a2 <_svfiprintf_r+0x4a>
 80049c6:	fb05 3202 	mla	r2, r5, r2, r3
 80049ca:	2001      	movs	r0, #1
 80049cc:	460f      	mov	r7, r1
 80049ce:	e7a6      	b.n	800491e <_svfiprintf_r+0xc6>
 80049d0:	2300      	movs	r3, #0
 80049d2:	3701      	adds	r7, #1
 80049d4:	9305      	str	r3, [sp, #20]
 80049d6:	4619      	mov	r1, r3
 80049d8:	250a      	movs	r5, #10
 80049da:	4638      	mov	r0, r7
 80049dc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80049e0:	3a30      	subs	r2, #48	; 0x30
 80049e2:	2a09      	cmp	r2, #9
 80049e4:	d903      	bls.n	80049ee <_svfiprintf_r+0x196>
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d0c8      	beq.n	800497c <_svfiprintf_r+0x124>
 80049ea:	9105      	str	r1, [sp, #20]
 80049ec:	e7c6      	b.n	800497c <_svfiprintf_r+0x124>
 80049ee:	fb05 2101 	mla	r1, r5, r1, r2
 80049f2:	2301      	movs	r3, #1
 80049f4:	4607      	mov	r7, r0
 80049f6:	e7f0      	b.n	80049da <_svfiprintf_r+0x182>
 80049f8:	ab03      	add	r3, sp, #12
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	4622      	mov	r2, r4
 80049fe:	4b11      	ldr	r3, [pc, #68]	; (8004a44 <_svfiprintf_r+0x1ec>)
 8004a00:	a904      	add	r1, sp, #16
 8004a02:	4640      	mov	r0, r8
 8004a04:	f3af 8000 	nop.w
 8004a08:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004a0c:	4681      	mov	r9, r0
 8004a0e:	d1d6      	bne.n	80049be <_svfiprintf_r+0x166>
 8004a10:	89a3      	ldrh	r3, [r4, #12]
 8004a12:	065b      	lsls	r3, r3, #25
 8004a14:	f53f af35 	bmi.w	8004882 <_svfiprintf_r+0x2a>
 8004a18:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004a1a:	b01d      	add	sp, #116	; 0x74
 8004a1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a20:	ab03      	add	r3, sp, #12
 8004a22:	9300      	str	r3, [sp, #0]
 8004a24:	4622      	mov	r2, r4
 8004a26:	4b07      	ldr	r3, [pc, #28]	; (8004a44 <_svfiprintf_r+0x1ec>)
 8004a28:	a904      	add	r1, sp, #16
 8004a2a:	4640      	mov	r0, r8
 8004a2c:	f000 f882 	bl	8004b34 <_printf_i>
 8004a30:	e7ea      	b.n	8004a08 <_svfiprintf_r+0x1b0>
 8004a32:	bf00      	nop
 8004a34:	080056f0 	.word	0x080056f0
 8004a38:	080056f6 	.word	0x080056f6
 8004a3c:	080056fa 	.word	0x080056fa
 8004a40:	00000000 	.word	0x00000000
 8004a44:	080047a5 	.word	0x080047a5

08004a48 <_printf_common>:
 8004a48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004a4c:	4691      	mov	r9, r2
 8004a4e:	461f      	mov	r7, r3
 8004a50:	688a      	ldr	r2, [r1, #8]
 8004a52:	690b      	ldr	r3, [r1, #16]
 8004a54:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	bfb8      	it	lt
 8004a5c:	4613      	movlt	r3, r2
 8004a5e:	f8c9 3000 	str.w	r3, [r9]
 8004a62:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004a66:	4606      	mov	r6, r0
 8004a68:	460c      	mov	r4, r1
 8004a6a:	b112      	cbz	r2, 8004a72 <_printf_common+0x2a>
 8004a6c:	3301      	adds	r3, #1
 8004a6e:	f8c9 3000 	str.w	r3, [r9]
 8004a72:	6823      	ldr	r3, [r4, #0]
 8004a74:	0699      	lsls	r1, r3, #26
 8004a76:	bf42      	ittt	mi
 8004a78:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004a7c:	3302      	addmi	r3, #2
 8004a7e:	f8c9 3000 	strmi.w	r3, [r9]
 8004a82:	6825      	ldr	r5, [r4, #0]
 8004a84:	f015 0506 	ands.w	r5, r5, #6
 8004a88:	d107      	bne.n	8004a9a <_printf_common+0x52>
 8004a8a:	f104 0a19 	add.w	sl, r4, #25
 8004a8e:	68e3      	ldr	r3, [r4, #12]
 8004a90:	f8d9 2000 	ldr.w	r2, [r9]
 8004a94:	1a9b      	subs	r3, r3, r2
 8004a96:	42ab      	cmp	r3, r5
 8004a98:	dc28      	bgt.n	8004aec <_printf_common+0xa4>
 8004a9a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004a9e:	6822      	ldr	r2, [r4, #0]
 8004aa0:	3300      	adds	r3, #0
 8004aa2:	bf18      	it	ne
 8004aa4:	2301      	movne	r3, #1
 8004aa6:	0692      	lsls	r2, r2, #26
 8004aa8:	d42d      	bmi.n	8004b06 <_printf_common+0xbe>
 8004aaa:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004aae:	4639      	mov	r1, r7
 8004ab0:	4630      	mov	r0, r6
 8004ab2:	47c0      	blx	r8
 8004ab4:	3001      	adds	r0, #1
 8004ab6:	d020      	beq.n	8004afa <_printf_common+0xb2>
 8004ab8:	6823      	ldr	r3, [r4, #0]
 8004aba:	68e5      	ldr	r5, [r4, #12]
 8004abc:	f8d9 2000 	ldr.w	r2, [r9]
 8004ac0:	f003 0306 	and.w	r3, r3, #6
 8004ac4:	2b04      	cmp	r3, #4
 8004ac6:	bf08      	it	eq
 8004ac8:	1aad      	subeq	r5, r5, r2
 8004aca:	68a3      	ldr	r3, [r4, #8]
 8004acc:	6922      	ldr	r2, [r4, #16]
 8004ace:	bf0c      	ite	eq
 8004ad0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ad4:	2500      	movne	r5, #0
 8004ad6:	4293      	cmp	r3, r2
 8004ad8:	bfc4      	itt	gt
 8004ada:	1a9b      	subgt	r3, r3, r2
 8004adc:	18ed      	addgt	r5, r5, r3
 8004ade:	f04f 0900 	mov.w	r9, #0
 8004ae2:	341a      	adds	r4, #26
 8004ae4:	454d      	cmp	r5, r9
 8004ae6:	d11a      	bne.n	8004b1e <_printf_common+0xd6>
 8004ae8:	2000      	movs	r0, #0
 8004aea:	e008      	b.n	8004afe <_printf_common+0xb6>
 8004aec:	2301      	movs	r3, #1
 8004aee:	4652      	mov	r2, sl
 8004af0:	4639      	mov	r1, r7
 8004af2:	4630      	mov	r0, r6
 8004af4:	47c0      	blx	r8
 8004af6:	3001      	adds	r0, #1
 8004af8:	d103      	bne.n	8004b02 <_printf_common+0xba>
 8004afa:	f04f 30ff 	mov.w	r0, #4294967295
 8004afe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b02:	3501      	adds	r5, #1
 8004b04:	e7c3      	b.n	8004a8e <_printf_common+0x46>
 8004b06:	18e1      	adds	r1, r4, r3
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	2030      	movs	r0, #48	; 0x30
 8004b0c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b10:	4422      	add	r2, r4
 8004b12:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b16:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b1a:	3302      	adds	r3, #2
 8004b1c:	e7c5      	b.n	8004aaa <_printf_common+0x62>
 8004b1e:	2301      	movs	r3, #1
 8004b20:	4622      	mov	r2, r4
 8004b22:	4639      	mov	r1, r7
 8004b24:	4630      	mov	r0, r6
 8004b26:	47c0      	blx	r8
 8004b28:	3001      	adds	r0, #1
 8004b2a:	d0e6      	beq.n	8004afa <_printf_common+0xb2>
 8004b2c:	f109 0901 	add.w	r9, r9, #1
 8004b30:	e7d8      	b.n	8004ae4 <_printf_common+0x9c>
	...

08004b34 <_printf_i>:
 8004b34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004b38:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8004b3c:	460c      	mov	r4, r1
 8004b3e:	7e09      	ldrb	r1, [r1, #24]
 8004b40:	b085      	sub	sp, #20
 8004b42:	296e      	cmp	r1, #110	; 0x6e
 8004b44:	4617      	mov	r7, r2
 8004b46:	4606      	mov	r6, r0
 8004b48:	4698      	mov	r8, r3
 8004b4a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004b4c:	f000 80b3 	beq.w	8004cb6 <_printf_i+0x182>
 8004b50:	d822      	bhi.n	8004b98 <_printf_i+0x64>
 8004b52:	2963      	cmp	r1, #99	; 0x63
 8004b54:	d036      	beq.n	8004bc4 <_printf_i+0x90>
 8004b56:	d80a      	bhi.n	8004b6e <_printf_i+0x3a>
 8004b58:	2900      	cmp	r1, #0
 8004b5a:	f000 80b9 	beq.w	8004cd0 <_printf_i+0x19c>
 8004b5e:	2958      	cmp	r1, #88	; 0x58
 8004b60:	f000 8083 	beq.w	8004c6a <_printf_i+0x136>
 8004b64:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004b68:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004b6c:	e032      	b.n	8004bd4 <_printf_i+0xa0>
 8004b6e:	2964      	cmp	r1, #100	; 0x64
 8004b70:	d001      	beq.n	8004b76 <_printf_i+0x42>
 8004b72:	2969      	cmp	r1, #105	; 0x69
 8004b74:	d1f6      	bne.n	8004b64 <_printf_i+0x30>
 8004b76:	6820      	ldr	r0, [r4, #0]
 8004b78:	6813      	ldr	r3, [r2, #0]
 8004b7a:	0605      	lsls	r5, r0, #24
 8004b7c:	f103 0104 	add.w	r1, r3, #4
 8004b80:	d52a      	bpl.n	8004bd8 <_printf_i+0xa4>
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	6011      	str	r1, [r2, #0]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	da03      	bge.n	8004b92 <_printf_i+0x5e>
 8004b8a:	222d      	movs	r2, #45	; 0x2d
 8004b8c:	425b      	negs	r3, r3
 8004b8e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004b92:	486f      	ldr	r0, [pc, #444]	; (8004d50 <_printf_i+0x21c>)
 8004b94:	220a      	movs	r2, #10
 8004b96:	e039      	b.n	8004c0c <_printf_i+0xd8>
 8004b98:	2973      	cmp	r1, #115	; 0x73
 8004b9a:	f000 809d 	beq.w	8004cd8 <_printf_i+0x1a4>
 8004b9e:	d808      	bhi.n	8004bb2 <_printf_i+0x7e>
 8004ba0:	296f      	cmp	r1, #111	; 0x6f
 8004ba2:	d020      	beq.n	8004be6 <_printf_i+0xb2>
 8004ba4:	2970      	cmp	r1, #112	; 0x70
 8004ba6:	d1dd      	bne.n	8004b64 <_printf_i+0x30>
 8004ba8:	6823      	ldr	r3, [r4, #0]
 8004baa:	f043 0320 	orr.w	r3, r3, #32
 8004bae:	6023      	str	r3, [r4, #0]
 8004bb0:	e003      	b.n	8004bba <_printf_i+0x86>
 8004bb2:	2975      	cmp	r1, #117	; 0x75
 8004bb4:	d017      	beq.n	8004be6 <_printf_i+0xb2>
 8004bb6:	2978      	cmp	r1, #120	; 0x78
 8004bb8:	d1d4      	bne.n	8004b64 <_printf_i+0x30>
 8004bba:	2378      	movs	r3, #120	; 0x78
 8004bbc:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004bc0:	4864      	ldr	r0, [pc, #400]	; (8004d54 <_printf_i+0x220>)
 8004bc2:	e055      	b.n	8004c70 <_printf_i+0x13c>
 8004bc4:	6813      	ldr	r3, [r2, #0]
 8004bc6:	1d19      	adds	r1, r3, #4
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	6011      	str	r1, [r2, #0]
 8004bcc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bd0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bd4:	2301      	movs	r3, #1
 8004bd6:	e08c      	b.n	8004cf2 <_printf_i+0x1be>
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	6011      	str	r1, [r2, #0]
 8004bdc:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004be0:	bf18      	it	ne
 8004be2:	b21b      	sxthne	r3, r3
 8004be4:	e7cf      	b.n	8004b86 <_printf_i+0x52>
 8004be6:	6813      	ldr	r3, [r2, #0]
 8004be8:	6825      	ldr	r5, [r4, #0]
 8004bea:	1d18      	adds	r0, r3, #4
 8004bec:	6010      	str	r0, [r2, #0]
 8004bee:	0628      	lsls	r0, r5, #24
 8004bf0:	d501      	bpl.n	8004bf6 <_printf_i+0xc2>
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	e002      	b.n	8004bfc <_printf_i+0xc8>
 8004bf6:	0668      	lsls	r0, r5, #25
 8004bf8:	d5fb      	bpl.n	8004bf2 <_printf_i+0xbe>
 8004bfa:	881b      	ldrh	r3, [r3, #0]
 8004bfc:	4854      	ldr	r0, [pc, #336]	; (8004d50 <_printf_i+0x21c>)
 8004bfe:	296f      	cmp	r1, #111	; 0x6f
 8004c00:	bf14      	ite	ne
 8004c02:	220a      	movne	r2, #10
 8004c04:	2208      	moveq	r2, #8
 8004c06:	2100      	movs	r1, #0
 8004c08:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004c0c:	6865      	ldr	r5, [r4, #4]
 8004c0e:	60a5      	str	r5, [r4, #8]
 8004c10:	2d00      	cmp	r5, #0
 8004c12:	f2c0 8095 	blt.w	8004d40 <_printf_i+0x20c>
 8004c16:	6821      	ldr	r1, [r4, #0]
 8004c18:	f021 0104 	bic.w	r1, r1, #4
 8004c1c:	6021      	str	r1, [r4, #0]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d13d      	bne.n	8004c9e <_printf_i+0x16a>
 8004c22:	2d00      	cmp	r5, #0
 8004c24:	f040 808e 	bne.w	8004d44 <_printf_i+0x210>
 8004c28:	4665      	mov	r5, ip
 8004c2a:	2a08      	cmp	r2, #8
 8004c2c:	d10b      	bne.n	8004c46 <_printf_i+0x112>
 8004c2e:	6823      	ldr	r3, [r4, #0]
 8004c30:	07db      	lsls	r3, r3, #31
 8004c32:	d508      	bpl.n	8004c46 <_printf_i+0x112>
 8004c34:	6923      	ldr	r3, [r4, #16]
 8004c36:	6862      	ldr	r2, [r4, #4]
 8004c38:	429a      	cmp	r2, r3
 8004c3a:	bfde      	ittt	le
 8004c3c:	2330      	movle	r3, #48	; 0x30
 8004c3e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004c42:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004c46:	ebac 0305 	sub.w	r3, ip, r5
 8004c4a:	6123      	str	r3, [r4, #16]
 8004c4c:	f8cd 8000 	str.w	r8, [sp]
 8004c50:	463b      	mov	r3, r7
 8004c52:	aa03      	add	r2, sp, #12
 8004c54:	4621      	mov	r1, r4
 8004c56:	4630      	mov	r0, r6
 8004c58:	f7ff fef6 	bl	8004a48 <_printf_common>
 8004c5c:	3001      	adds	r0, #1
 8004c5e:	d14d      	bne.n	8004cfc <_printf_i+0x1c8>
 8004c60:	f04f 30ff 	mov.w	r0, #4294967295
 8004c64:	b005      	add	sp, #20
 8004c66:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004c6a:	4839      	ldr	r0, [pc, #228]	; (8004d50 <_printf_i+0x21c>)
 8004c6c:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004c70:	6813      	ldr	r3, [r2, #0]
 8004c72:	6821      	ldr	r1, [r4, #0]
 8004c74:	1d1d      	adds	r5, r3, #4
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	6015      	str	r5, [r2, #0]
 8004c7a:	060a      	lsls	r2, r1, #24
 8004c7c:	d50b      	bpl.n	8004c96 <_printf_i+0x162>
 8004c7e:	07ca      	lsls	r2, r1, #31
 8004c80:	bf44      	itt	mi
 8004c82:	f041 0120 	orrmi.w	r1, r1, #32
 8004c86:	6021      	strmi	r1, [r4, #0]
 8004c88:	b91b      	cbnz	r3, 8004c92 <_printf_i+0x15e>
 8004c8a:	6822      	ldr	r2, [r4, #0]
 8004c8c:	f022 0220 	bic.w	r2, r2, #32
 8004c90:	6022      	str	r2, [r4, #0]
 8004c92:	2210      	movs	r2, #16
 8004c94:	e7b7      	b.n	8004c06 <_printf_i+0xd2>
 8004c96:	064d      	lsls	r5, r1, #25
 8004c98:	bf48      	it	mi
 8004c9a:	b29b      	uxthmi	r3, r3
 8004c9c:	e7ef      	b.n	8004c7e <_printf_i+0x14a>
 8004c9e:	4665      	mov	r5, ip
 8004ca0:	fbb3 f1f2 	udiv	r1, r3, r2
 8004ca4:	fb02 3311 	mls	r3, r2, r1, r3
 8004ca8:	5cc3      	ldrb	r3, [r0, r3]
 8004caa:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004cae:	460b      	mov	r3, r1
 8004cb0:	2900      	cmp	r1, #0
 8004cb2:	d1f5      	bne.n	8004ca0 <_printf_i+0x16c>
 8004cb4:	e7b9      	b.n	8004c2a <_printf_i+0xf6>
 8004cb6:	6813      	ldr	r3, [r2, #0]
 8004cb8:	6825      	ldr	r5, [r4, #0]
 8004cba:	6961      	ldr	r1, [r4, #20]
 8004cbc:	1d18      	adds	r0, r3, #4
 8004cbe:	6010      	str	r0, [r2, #0]
 8004cc0:	0628      	lsls	r0, r5, #24
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	d501      	bpl.n	8004cca <_printf_i+0x196>
 8004cc6:	6019      	str	r1, [r3, #0]
 8004cc8:	e002      	b.n	8004cd0 <_printf_i+0x19c>
 8004cca:	066a      	lsls	r2, r5, #25
 8004ccc:	d5fb      	bpl.n	8004cc6 <_printf_i+0x192>
 8004cce:	8019      	strh	r1, [r3, #0]
 8004cd0:	2300      	movs	r3, #0
 8004cd2:	6123      	str	r3, [r4, #16]
 8004cd4:	4665      	mov	r5, ip
 8004cd6:	e7b9      	b.n	8004c4c <_printf_i+0x118>
 8004cd8:	6813      	ldr	r3, [r2, #0]
 8004cda:	1d19      	adds	r1, r3, #4
 8004cdc:	6011      	str	r1, [r2, #0]
 8004cde:	681d      	ldr	r5, [r3, #0]
 8004ce0:	6862      	ldr	r2, [r4, #4]
 8004ce2:	2100      	movs	r1, #0
 8004ce4:	4628      	mov	r0, r5
 8004ce6:	f7fb fa73 	bl	80001d0 <memchr>
 8004cea:	b108      	cbz	r0, 8004cf0 <_printf_i+0x1bc>
 8004cec:	1b40      	subs	r0, r0, r5
 8004cee:	6060      	str	r0, [r4, #4]
 8004cf0:	6863      	ldr	r3, [r4, #4]
 8004cf2:	6123      	str	r3, [r4, #16]
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cfa:	e7a7      	b.n	8004c4c <_printf_i+0x118>
 8004cfc:	6923      	ldr	r3, [r4, #16]
 8004cfe:	462a      	mov	r2, r5
 8004d00:	4639      	mov	r1, r7
 8004d02:	4630      	mov	r0, r6
 8004d04:	47c0      	blx	r8
 8004d06:	3001      	adds	r0, #1
 8004d08:	d0aa      	beq.n	8004c60 <_printf_i+0x12c>
 8004d0a:	6823      	ldr	r3, [r4, #0]
 8004d0c:	079b      	lsls	r3, r3, #30
 8004d0e:	d413      	bmi.n	8004d38 <_printf_i+0x204>
 8004d10:	68e0      	ldr	r0, [r4, #12]
 8004d12:	9b03      	ldr	r3, [sp, #12]
 8004d14:	4298      	cmp	r0, r3
 8004d16:	bfb8      	it	lt
 8004d18:	4618      	movlt	r0, r3
 8004d1a:	e7a3      	b.n	8004c64 <_printf_i+0x130>
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	464a      	mov	r2, r9
 8004d20:	4639      	mov	r1, r7
 8004d22:	4630      	mov	r0, r6
 8004d24:	47c0      	blx	r8
 8004d26:	3001      	adds	r0, #1
 8004d28:	d09a      	beq.n	8004c60 <_printf_i+0x12c>
 8004d2a:	3501      	adds	r5, #1
 8004d2c:	68e3      	ldr	r3, [r4, #12]
 8004d2e:	9a03      	ldr	r2, [sp, #12]
 8004d30:	1a9b      	subs	r3, r3, r2
 8004d32:	42ab      	cmp	r3, r5
 8004d34:	dcf2      	bgt.n	8004d1c <_printf_i+0x1e8>
 8004d36:	e7eb      	b.n	8004d10 <_printf_i+0x1dc>
 8004d38:	2500      	movs	r5, #0
 8004d3a:	f104 0919 	add.w	r9, r4, #25
 8004d3e:	e7f5      	b.n	8004d2c <_printf_i+0x1f8>
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1ac      	bne.n	8004c9e <_printf_i+0x16a>
 8004d44:	7803      	ldrb	r3, [r0, #0]
 8004d46:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004d4a:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004d4e:	e76c      	b.n	8004c2a <_printf_i+0xf6>
 8004d50:	08005701 	.word	0x08005701
 8004d54:	08005712 	.word	0x08005712

08004d58 <memcpy>:
 8004d58:	b510      	push	{r4, lr}
 8004d5a:	1e43      	subs	r3, r0, #1
 8004d5c:	440a      	add	r2, r1
 8004d5e:	4291      	cmp	r1, r2
 8004d60:	d100      	bne.n	8004d64 <memcpy+0xc>
 8004d62:	bd10      	pop	{r4, pc}
 8004d64:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d68:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004d6c:	e7f7      	b.n	8004d5e <memcpy+0x6>

08004d6e <memmove>:
 8004d6e:	4288      	cmp	r0, r1
 8004d70:	b510      	push	{r4, lr}
 8004d72:	eb01 0302 	add.w	r3, r1, r2
 8004d76:	d807      	bhi.n	8004d88 <memmove+0x1a>
 8004d78:	1e42      	subs	r2, r0, #1
 8004d7a:	4299      	cmp	r1, r3
 8004d7c:	d00a      	beq.n	8004d94 <memmove+0x26>
 8004d7e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004d82:	f802 4f01 	strb.w	r4, [r2, #1]!
 8004d86:	e7f8      	b.n	8004d7a <memmove+0xc>
 8004d88:	4283      	cmp	r3, r0
 8004d8a:	d9f5      	bls.n	8004d78 <memmove+0xa>
 8004d8c:	1881      	adds	r1, r0, r2
 8004d8e:	1ad2      	subs	r2, r2, r3
 8004d90:	42d3      	cmn	r3, r2
 8004d92:	d100      	bne.n	8004d96 <memmove+0x28>
 8004d94:	bd10      	pop	{r4, pc}
 8004d96:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004d9a:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8004d9e:	e7f7      	b.n	8004d90 <memmove+0x22>

08004da0 <_free_r>:
 8004da0:	b538      	push	{r3, r4, r5, lr}
 8004da2:	4605      	mov	r5, r0
 8004da4:	2900      	cmp	r1, #0
 8004da6:	d045      	beq.n	8004e34 <_free_r+0x94>
 8004da8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004dac:	1f0c      	subs	r4, r1, #4
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	bfb8      	it	lt
 8004db2:	18e4      	addlt	r4, r4, r3
 8004db4:	f000 f8d2 	bl	8004f5c <__malloc_lock>
 8004db8:	4a1f      	ldr	r2, [pc, #124]	; (8004e38 <_free_r+0x98>)
 8004dba:	6813      	ldr	r3, [r2, #0]
 8004dbc:	4610      	mov	r0, r2
 8004dbe:	b933      	cbnz	r3, 8004dce <_free_r+0x2e>
 8004dc0:	6063      	str	r3, [r4, #4]
 8004dc2:	6014      	str	r4, [r2, #0]
 8004dc4:	4628      	mov	r0, r5
 8004dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dca:	f000 b8c8 	b.w	8004f5e <__malloc_unlock>
 8004dce:	42a3      	cmp	r3, r4
 8004dd0:	d90c      	bls.n	8004dec <_free_r+0x4c>
 8004dd2:	6821      	ldr	r1, [r4, #0]
 8004dd4:	1862      	adds	r2, r4, r1
 8004dd6:	4293      	cmp	r3, r2
 8004dd8:	bf04      	itt	eq
 8004dda:	681a      	ldreq	r2, [r3, #0]
 8004ddc:	685b      	ldreq	r3, [r3, #4]
 8004dde:	6063      	str	r3, [r4, #4]
 8004de0:	bf04      	itt	eq
 8004de2:	1852      	addeq	r2, r2, r1
 8004de4:	6022      	streq	r2, [r4, #0]
 8004de6:	6004      	str	r4, [r0, #0]
 8004de8:	e7ec      	b.n	8004dc4 <_free_r+0x24>
 8004dea:	4613      	mov	r3, r2
 8004dec:	685a      	ldr	r2, [r3, #4]
 8004dee:	b10a      	cbz	r2, 8004df4 <_free_r+0x54>
 8004df0:	42a2      	cmp	r2, r4
 8004df2:	d9fa      	bls.n	8004dea <_free_r+0x4a>
 8004df4:	6819      	ldr	r1, [r3, #0]
 8004df6:	1858      	adds	r0, r3, r1
 8004df8:	42a0      	cmp	r0, r4
 8004dfa:	d10b      	bne.n	8004e14 <_free_r+0x74>
 8004dfc:	6820      	ldr	r0, [r4, #0]
 8004dfe:	4401      	add	r1, r0
 8004e00:	1858      	adds	r0, r3, r1
 8004e02:	4282      	cmp	r2, r0
 8004e04:	6019      	str	r1, [r3, #0]
 8004e06:	d1dd      	bne.n	8004dc4 <_free_r+0x24>
 8004e08:	6810      	ldr	r0, [r2, #0]
 8004e0a:	6852      	ldr	r2, [r2, #4]
 8004e0c:	605a      	str	r2, [r3, #4]
 8004e0e:	4401      	add	r1, r0
 8004e10:	6019      	str	r1, [r3, #0]
 8004e12:	e7d7      	b.n	8004dc4 <_free_r+0x24>
 8004e14:	d902      	bls.n	8004e1c <_free_r+0x7c>
 8004e16:	230c      	movs	r3, #12
 8004e18:	602b      	str	r3, [r5, #0]
 8004e1a:	e7d3      	b.n	8004dc4 <_free_r+0x24>
 8004e1c:	6820      	ldr	r0, [r4, #0]
 8004e1e:	1821      	adds	r1, r4, r0
 8004e20:	428a      	cmp	r2, r1
 8004e22:	bf04      	itt	eq
 8004e24:	6811      	ldreq	r1, [r2, #0]
 8004e26:	6852      	ldreq	r2, [r2, #4]
 8004e28:	6062      	str	r2, [r4, #4]
 8004e2a:	bf04      	itt	eq
 8004e2c:	1809      	addeq	r1, r1, r0
 8004e2e:	6021      	streq	r1, [r4, #0]
 8004e30:	605c      	str	r4, [r3, #4]
 8004e32:	e7c7      	b.n	8004dc4 <_free_r+0x24>
 8004e34:	bd38      	pop	{r3, r4, r5, pc}
 8004e36:	bf00      	nop
 8004e38:	20000094 	.word	0x20000094

08004e3c <_malloc_r>:
 8004e3c:	b570      	push	{r4, r5, r6, lr}
 8004e3e:	1ccd      	adds	r5, r1, #3
 8004e40:	f025 0503 	bic.w	r5, r5, #3
 8004e44:	3508      	adds	r5, #8
 8004e46:	2d0c      	cmp	r5, #12
 8004e48:	bf38      	it	cc
 8004e4a:	250c      	movcc	r5, #12
 8004e4c:	2d00      	cmp	r5, #0
 8004e4e:	4606      	mov	r6, r0
 8004e50:	db01      	blt.n	8004e56 <_malloc_r+0x1a>
 8004e52:	42a9      	cmp	r1, r5
 8004e54:	d903      	bls.n	8004e5e <_malloc_r+0x22>
 8004e56:	230c      	movs	r3, #12
 8004e58:	6033      	str	r3, [r6, #0]
 8004e5a:	2000      	movs	r0, #0
 8004e5c:	bd70      	pop	{r4, r5, r6, pc}
 8004e5e:	f000 f87d 	bl	8004f5c <__malloc_lock>
 8004e62:	4a21      	ldr	r2, [pc, #132]	; (8004ee8 <_malloc_r+0xac>)
 8004e64:	6814      	ldr	r4, [r2, #0]
 8004e66:	4621      	mov	r1, r4
 8004e68:	b991      	cbnz	r1, 8004e90 <_malloc_r+0x54>
 8004e6a:	4c20      	ldr	r4, [pc, #128]	; (8004eec <_malloc_r+0xb0>)
 8004e6c:	6823      	ldr	r3, [r4, #0]
 8004e6e:	b91b      	cbnz	r3, 8004e78 <_malloc_r+0x3c>
 8004e70:	4630      	mov	r0, r6
 8004e72:	f000 f863 	bl	8004f3c <_sbrk_r>
 8004e76:	6020      	str	r0, [r4, #0]
 8004e78:	4629      	mov	r1, r5
 8004e7a:	4630      	mov	r0, r6
 8004e7c:	f000 f85e 	bl	8004f3c <_sbrk_r>
 8004e80:	1c43      	adds	r3, r0, #1
 8004e82:	d124      	bne.n	8004ece <_malloc_r+0x92>
 8004e84:	230c      	movs	r3, #12
 8004e86:	6033      	str	r3, [r6, #0]
 8004e88:	4630      	mov	r0, r6
 8004e8a:	f000 f868 	bl	8004f5e <__malloc_unlock>
 8004e8e:	e7e4      	b.n	8004e5a <_malloc_r+0x1e>
 8004e90:	680b      	ldr	r3, [r1, #0]
 8004e92:	1b5b      	subs	r3, r3, r5
 8004e94:	d418      	bmi.n	8004ec8 <_malloc_r+0x8c>
 8004e96:	2b0b      	cmp	r3, #11
 8004e98:	d90f      	bls.n	8004eba <_malloc_r+0x7e>
 8004e9a:	600b      	str	r3, [r1, #0]
 8004e9c:	50cd      	str	r5, [r1, r3]
 8004e9e:	18cc      	adds	r4, r1, r3
 8004ea0:	4630      	mov	r0, r6
 8004ea2:	f000 f85c 	bl	8004f5e <__malloc_unlock>
 8004ea6:	f104 000b 	add.w	r0, r4, #11
 8004eaa:	1d23      	adds	r3, r4, #4
 8004eac:	f020 0007 	bic.w	r0, r0, #7
 8004eb0:	1ac3      	subs	r3, r0, r3
 8004eb2:	d0d3      	beq.n	8004e5c <_malloc_r+0x20>
 8004eb4:	425a      	negs	r2, r3
 8004eb6:	50e2      	str	r2, [r4, r3]
 8004eb8:	e7d0      	b.n	8004e5c <_malloc_r+0x20>
 8004eba:	428c      	cmp	r4, r1
 8004ebc:	684b      	ldr	r3, [r1, #4]
 8004ebe:	bf16      	itet	ne
 8004ec0:	6063      	strne	r3, [r4, #4]
 8004ec2:	6013      	streq	r3, [r2, #0]
 8004ec4:	460c      	movne	r4, r1
 8004ec6:	e7eb      	b.n	8004ea0 <_malloc_r+0x64>
 8004ec8:	460c      	mov	r4, r1
 8004eca:	6849      	ldr	r1, [r1, #4]
 8004ecc:	e7cc      	b.n	8004e68 <_malloc_r+0x2c>
 8004ece:	1cc4      	adds	r4, r0, #3
 8004ed0:	f024 0403 	bic.w	r4, r4, #3
 8004ed4:	42a0      	cmp	r0, r4
 8004ed6:	d005      	beq.n	8004ee4 <_malloc_r+0xa8>
 8004ed8:	1a21      	subs	r1, r4, r0
 8004eda:	4630      	mov	r0, r6
 8004edc:	f000 f82e 	bl	8004f3c <_sbrk_r>
 8004ee0:	3001      	adds	r0, #1
 8004ee2:	d0cf      	beq.n	8004e84 <_malloc_r+0x48>
 8004ee4:	6025      	str	r5, [r4, #0]
 8004ee6:	e7db      	b.n	8004ea0 <_malloc_r+0x64>
 8004ee8:	20000094 	.word	0x20000094
 8004eec:	20000098 	.word	0x20000098

08004ef0 <_realloc_r>:
 8004ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ef2:	4607      	mov	r7, r0
 8004ef4:	4614      	mov	r4, r2
 8004ef6:	460e      	mov	r6, r1
 8004ef8:	b921      	cbnz	r1, 8004f04 <_realloc_r+0x14>
 8004efa:	4611      	mov	r1, r2
 8004efc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004f00:	f7ff bf9c 	b.w	8004e3c <_malloc_r>
 8004f04:	b922      	cbnz	r2, 8004f10 <_realloc_r+0x20>
 8004f06:	f7ff ff4b 	bl	8004da0 <_free_r>
 8004f0a:	4625      	mov	r5, r4
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f10:	f000 f826 	bl	8004f60 <_malloc_usable_size_r>
 8004f14:	42a0      	cmp	r0, r4
 8004f16:	d20f      	bcs.n	8004f38 <_realloc_r+0x48>
 8004f18:	4621      	mov	r1, r4
 8004f1a:	4638      	mov	r0, r7
 8004f1c:	f7ff ff8e 	bl	8004e3c <_malloc_r>
 8004f20:	4605      	mov	r5, r0
 8004f22:	2800      	cmp	r0, #0
 8004f24:	d0f2      	beq.n	8004f0c <_realloc_r+0x1c>
 8004f26:	4631      	mov	r1, r6
 8004f28:	4622      	mov	r2, r4
 8004f2a:	f7ff ff15 	bl	8004d58 <memcpy>
 8004f2e:	4631      	mov	r1, r6
 8004f30:	4638      	mov	r0, r7
 8004f32:	f7ff ff35 	bl	8004da0 <_free_r>
 8004f36:	e7e9      	b.n	8004f0c <_realloc_r+0x1c>
 8004f38:	4635      	mov	r5, r6
 8004f3a:	e7e7      	b.n	8004f0c <_realloc_r+0x1c>

08004f3c <_sbrk_r>:
 8004f3c:	b538      	push	{r3, r4, r5, lr}
 8004f3e:	4c06      	ldr	r4, [pc, #24]	; (8004f58 <_sbrk_r+0x1c>)
 8004f40:	2300      	movs	r3, #0
 8004f42:	4605      	mov	r5, r0
 8004f44:	4608      	mov	r0, r1
 8004f46:	6023      	str	r3, [r4, #0]
 8004f48:	f7ff fb3a 	bl	80045c0 <_sbrk>
 8004f4c:	1c43      	adds	r3, r0, #1
 8004f4e:	d102      	bne.n	8004f56 <_sbrk_r+0x1a>
 8004f50:	6823      	ldr	r3, [r4, #0]
 8004f52:	b103      	cbz	r3, 8004f56 <_sbrk_r+0x1a>
 8004f54:	602b      	str	r3, [r5, #0]
 8004f56:	bd38      	pop	{r3, r4, r5, pc}
 8004f58:	20000164 	.word	0x20000164

08004f5c <__malloc_lock>:
 8004f5c:	4770      	bx	lr

08004f5e <__malloc_unlock>:
 8004f5e:	4770      	bx	lr

08004f60 <_malloc_usable_size_r>:
 8004f60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f64:	1f18      	subs	r0, r3, #4
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	bfbc      	itt	lt
 8004f6a:	580b      	ldrlt	r3, [r1, r0]
 8004f6c:	18c0      	addlt	r0, r0, r3
 8004f6e:	4770      	bx	lr

08004f70 <floor>:
 8004f70:	ec51 0b10 	vmov	r0, r1, d0
 8004f74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f78:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004f7c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004f80:	2e13      	cmp	r6, #19
 8004f82:	460c      	mov	r4, r1
 8004f84:	ee10 5a10 	vmov	r5, s0
 8004f88:	4680      	mov	r8, r0
 8004f8a:	dc34      	bgt.n	8004ff6 <floor+0x86>
 8004f8c:	2e00      	cmp	r6, #0
 8004f8e:	da16      	bge.n	8004fbe <floor+0x4e>
 8004f90:	a335      	add	r3, pc, #212	; (adr r3, 8005068 <floor+0xf8>)
 8004f92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f96:	f7fb f971 	bl	800027c <__adddf3>
 8004f9a:	2200      	movs	r2, #0
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	f7fb fdb3 	bl	8000b08 <__aeabi_dcmpgt>
 8004fa2:	b148      	cbz	r0, 8004fb8 <floor+0x48>
 8004fa4:	2c00      	cmp	r4, #0
 8004fa6:	da59      	bge.n	800505c <floor+0xec>
 8004fa8:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004fac:	4a30      	ldr	r2, [pc, #192]	; (8005070 <floor+0x100>)
 8004fae:	432b      	orrs	r3, r5
 8004fb0:	2500      	movs	r5, #0
 8004fb2:	42ab      	cmp	r3, r5
 8004fb4:	bf18      	it	ne
 8004fb6:	4614      	movne	r4, r2
 8004fb8:	4621      	mov	r1, r4
 8004fba:	4628      	mov	r0, r5
 8004fbc:	e025      	b.n	800500a <floor+0x9a>
 8004fbe:	4f2d      	ldr	r7, [pc, #180]	; (8005074 <floor+0x104>)
 8004fc0:	4137      	asrs	r7, r6
 8004fc2:	ea01 0307 	and.w	r3, r1, r7
 8004fc6:	4303      	orrs	r3, r0
 8004fc8:	d01f      	beq.n	800500a <floor+0x9a>
 8004fca:	a327      	add	r3, pc, #156	; (adr r3, 8005068 <floor+0xf8>)
 8004fcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd0:	f7fb f954 	bl	800027c <__adddf3>
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	f7fb fd96 	bl	8000b08 <__aeabi_dcmpgt>
 8004fdc:	2800      	cmp	r0, #0
 8004fde:	d0eb      	beq.n	8004fb8 <floor+0x48>
 8004fe0:	2c00      	cmp	r4, #0
 8004fe2:	bfbe      	ittt	lt
 8004fe4:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004fe8:	fa43 f606 	asrlt.w	r6, r3, r6
 8004fec:	19a4      	addlt	r4, r4, r6
 8004fee:	ea24 0407 	bic.w	r4, r4, r7
 8004ff2:	2500      	movs	r5, #0
 8004ff4:	e7e0      	b.n	8004fb8 <floor+0x48>
 8004ff6:	2e33      	cmp	r6, #51	; 0x33
 8004ff8:	dd0b      	ble.n	8005012 <floor+0xa2>
 8004ffa:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8004ffe:	d104      	bne.n	800500a <floor+0x9a>
 8005000:	ee10 2a10 	vmov	r2, s0
 8005004:	460b      	mov	r3, r1
 8005006:	f7fb f939 	bl	800027c <__adddf3>
 800500a:	ec41 0b10 	vmov	d0, r0, r1
 800500e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005012:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8005016:	f04f 33ff 	mov.w	r3, #4294967295
 800501a:	fa23 f707 	lsr.w	r7, r3, r7
 800501e:	4207      	tst	r7, r0
 8005020:	d0f3      	beq.n	800500a <floor+0x9a>
 8005022:	a311      	add	r3, pc, #68	; (adr r3, 8005068 <floor+0xf8>)
 8005024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005028:	f7fb f928 	bl	800027c <__adddf3>
 800502c:	2200      	movs	r2, #0
 800502e:	2300      	movs	r3, #0
 8005030:	f7fb fd6a 	bl	8000b08 <__aeabi_dcmpgt>
 8005034:	2800      	cmp	r0, #0
 8005036:	d0bf      	beq.n	8004fb8 <floor+0x48>
 8005038:	2c00      	cmp	r4, #0
 800503a:	da02      	bge.n	8005042 <floor+0xd2>
 800503c:	2e14      	cmp	r6, #20
 800503e:	d103      	bne.n	8005048 <floor+0xd8>
 8005040:	3401      	adds	r4, #1
 8005042:	ea25 0507 	bic.w	r5, r5, r7
 8005046:	e7b7      	b.n	8004fb8 <floor+0x48>
 8005048:	2301      	movs	r3, #1
 800504a:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800504e:	fa03 f606 	lsl.w	r6, r3, r6
 8005052:	4435      	add	r5, r6
 8005054:	4545      	cmp	r5, r8
 8005056:	bf38      	it	cc
 8005058:	18e4      	addcc	r4, r4, r3
 800505a:	e7f2      	b.n	8005042 <floor+0xd2>
 800505c:	2500      	movs	r5, #0
 800505e:	462c      	mov	r4, r5
 8005060:	e7aa      	b.n	8004fb8 <floor+0x48>
 8005062:	bf00      	nop
 8005064:	f3af 8000 	nop.w
 8005068:	8800759c 	.word	0x8800759c
 800506c:	7e37e43c 	.word	0x7e37e43c
 8005070:	bff00000 	.word	0xbff00000
 8005074:	000fffff 	.word	0x000fffff

08005078 <round>:
 8005078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800507a:	ec57 6b10 	vmov	r6, r7, d0
 800507e:	f3c7 500a 	ubfx	r0, r7, #20, #11
 8005082:	f2a0 34ff 	subw	r4, r0, #1023	; 0x3ff
 8005086:	2c13      	cmp	r4, #19
 8005088:	463b      	mov	r3, r7
 800508a:	463d      	mov	r5, r7
 800508c:	dc17      	bgt.n	80050be <round+0x46>
 800508e:	2c00      	cmp	r4, #0
 8005090:	da09      	bge.n	80050a6 <round+0x2e>
 8005092:	3401      	adds	r4, #1
 8005094:	f007 4300 	and.w	r3, r7, #2147483648	; 0x80000000
 8005098:	d103      	bne.n	80050a2 <round+0x2a>
 800509a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800509e:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 80050a2:	2100      	movs	r1, #0
 80050a4:	e02c      	b.n	8005100 <round+0x88>
 80050a6:	4a18      	ldr	r2, [pc, #96]	; (8005108 <round+0x90>)
 80050a8:	4122      	asrs	r2, r4
 80050aa:	4217      	tst	r7, r2
 80050ac:	d100      	bne.n	80050b0 <round+0x38>
 80050ae:	b19e      	cbz	r6, 80050d8 <round+0x60>
 80050b0:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 80050b4:	4123      	asrs	r3, r4
 80050b6:	442b      	add	r3, r5
 80050b8:	ea23 0302 	bic.w	r3, r3, r2
 80050bc:	e7f1      	b.n	80050a2 <round+0x2a>
 80050be:	2c33      	cmp	r4, #51	; 0x33
 80050c0:	dd0d      	ble.n	80050de <round+0x66>
 80050c2:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 80050c6:	d107      	bne.n	80050d8 <round+0x60>
 80050c8:	4630      	mov	r0, r6
 80050ca:	4639      	mov	r1, r7
 80050cc:	ee10 2a10 	vmov	r2, s0
 80050d0:	f7fb f8d4 	bl	800027c <__adddf3>
 80050d4:	4606      	mov	r6, r0
 80050d6:	460f      	mov	r7, r1
 80050d8:	ec47 6b10 	vmov	d0, r6, r7
 80050dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80050de:	f2a0 4213 	subw	r2, r0, #1043	; 0x413
 80050e2:	f04f 30ff 	mov.w	r0, #4294967295
 80050e6:	40d0      	lsrs	r0, r2
 80050e8:	4206      	tst	r6, r0
 80050ea:	d0f5      	beq.n	80050d8 <round+0x60>
 80050ec:	2201      	movs	r2, #1
 80050ee:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 80050f2:	fa02 f404 	lsl.w	r4, r2, r4
 80050f6:	1931      	adds	r1, r6, r4
 80050f8:	bf28      	it	cs
 80050fa:	189b      	addcs	r3, r3, r2
 80050fc:	ea21 0100 	bic.w	r1, r1, r0
 8005100:	461f      	mov	r7, r3
 8005102:	460e      	mov	r6, r1
 8005104:	e7e8      	b.n	80050d8 <round+0x60>
 8005106:	bf00      	nop
 8005108:	000fffff 	.word	0x000fffff

0800510c <log10>:
 800510c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800510e:	ed2d 8b02 	vpush	{d8}
 8005112:	b08b      	sub	sp, #44	; 0x2c
 8005114:	ec55 4b10 	vmov	r4, r5, d0
 8005118:	f000 f87a 	bl	8005210 <__ieee754_log10>
 800511c:	4b36      	ldr	r3, [pc, #216]	; (80051f8 <log10+0xec>)
 800511e:	eeb0 8a40 	vmov.f32	s16, s0
 8005122:	eef0 8a60 	vmov.f32	s17, s1
 8005126:	f993 6000 	ldrsb.w	r6, [r3]
 800512a:	1c73      	adds	r3, r6, #1
 800512c:	d05c      	beq.n	80051e8 <log10+0xdc>
 800512e:	4622      	mov	r2, r4
 8005130:	462b      	mov	r3, r5
 8005132:	4620      	mov	r0, r4
 8005134:	4629      	mov	r1, r5
 8005136:	f7fb fcf1 	bl	8000b1c <__aeabi_dcmpun>
 800513a:	4607      	mov	r7, r0
 800513c:	2800      	cmp	r0, #0
 800513e:	d153      	bne.n	80051e8 <log10+0xdc>
 8005140:	2200      	movs	r2, #0
 8005142:	2300      	movs	r3, #0
 8005144:	4620      	mov	r0, r4
 8005146:	4629      	mov	r1, r5
 8005148:	f7fb fcca 	bl	8000ae0 <__aeabi_dcmple>
 800514c:	2800      	cmp	r0, #0
 800514e:	d04b      	beq.n	80051e8 <log10+0xdc>
 8005150:	4b2a      	ldr	r3, [pc, #168]	; (80051fc <log10+0xf0>)
 8005152:	9301      	str	r3, [sp, #4]
 8005154:	9708      	str	r7, [sp, #32]
 8005156:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800515a:	e9cd 4504 	strd	r4, r5, [sp, #16]
 800515e:	b9a6      	cbnz	r6, 800518a <log10+0x7e>
 8005160:	4b27      	ldr	r3, [pc, #156]	; (8005200 <log10+0xf4>)
 8005162:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8005166:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800516a:	4620      	mov	r0, r4
 800516c:	2200      	movs	r2, #0
 800516e:	2300      	movs	r3, #0
 8005170:	4629      	mov	r1, r5
 8005172:	f7fb fca1 	bl	8000ab8 <__aeabi_dcmpeq>
 8005176:	bb40      	cbnz	r0, 80051ca <log10+0xbe>
 8005178:	2301      	movs	r3, #1
 800517a:	2e02      	cmp	r6, #2
 800517c:	9300      	str	r3, [sp, #0]
 800517e:	d119      	bne.n	80051b4 <log10+0xa8>
 8005180:	f7ff fabe 	bl	8004700 <__errno>
 8005184:	2321      	movs	r3, #33	; 0x21
 8005186:	6003      	str	r3, [r0, #0]
 8005188:	e019      	b.n	80051be <log10+0xb2>
 800518a:	4b1e      	ldr	r3, [pc, #120]	; (8005204 <log10+0xf8>)
 800518c:	2200      	movs	r2, #0
 800518e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005192:	4620      	mov	r0, r4
 8005194:	2200      	movs	r2, #0
 8005196:	2300      	movs	r3, #0
 8005198:	4629      	mov	r1, r5
 800519a:	f7fb fc8d 	bl	8000ab8 <__aeabi_dcmpeq>
 800519e:	2800      	cmp	r0, #0
 80051a0:	d0ea      	beq.n	8005178 <log10+0x6c>
 80051a2:	2302      	movs	r3, #2
 80051a4:	429e      	cmp	r6, r3
 80051a6:	9300      	str	r3, [sp, #0]
 80051a8:	d111      	bne.n	80051ce <log10+0xc2>
 80051aa:	f7ff faa9 	bl	8004700 <__errno>
 80051ae:	2322      	movs	r3, #34	; 0x22
 80051b0:	6003      	str	r3, [r0, #0]
 80051b2:	e011      	b.n	80051d8 <log10+0xcc>
 80051b4:	4668      	mov	r0, sp
 80051b6:	f000 f8b5 	bl	8005324 <matherr>
 80051ba:	2800      	cmp	r0, #0
 80051bc:	d0e0      	beq.n	8005180 <log10+0x74>
 80051be:	4812      	ldr	r0, [pc, #72]	; (8005208 <log10+0xfc>)
 80051c0:	f000 f8b2 	bl	8005328 <nan>
 80051c4:	ed8d 0b06 	vstr	d0, [sp, #24]
 80051c8:	e006      	b.n	80051d8 <log10+0xcc>
 80051ca:	2302      	movs	r3, #2
 80051cc:	9300      	str	r3, [sp, #0]
 80051ce:	4668      	mov	r0, sp
 80051d0:	f000 f8a8 	bl	8005324 <matherr>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d0e8      	beq.n	80051aa <log10+0x9e>
 80051d8:	9b08      	ldr	r3, [sp, #32]
 80051da:	b11b      	cbz	r3, 80051e4 <log10+0xd8>
 80051dc:	f7ff fa90 	bl	8004700 <__errno>
 80051e0:	9b08      	ldr	r3, [sp, #32]
 80051e2:	6003      	str	r3, [r0, #0]
 80051e4:	ed9d 8b06 	vldr	d8, [sp, #24]
 80051e8:	eeb0 0a48 	vmov.f32	s0, s16
 80051ec:	eef0 0a68 	vmov.f32	s1, s17
 80051f0:	b00b      	add	sp, #44	; 0x2c
 80051f2:	ecbd 8b02 	vpop	{d8}
 80051f6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80051f8:	20000070 	.word	0x20000070
 80051fc:	08005723 	.word	0x08005723
 8005200:	c7efffff 	.word	0xc7efffff
 8005204:	fff00000 	.word	0xfff00000
 8005208:	080056f5 	.word	0x080056f5
 800520c:	00000000 	.word	0x00000000

08005210 <__ieee754_log10>:
 8005210:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005214:	ec55 4b10 	vmov	r4, r5, d0
 8005218:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 800521c:	462b      	mov	r3, r5
 800521e:	da2f      	bge.n	8005280 <__ieee754_log10+0x70>
 8005220:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8005224:	4322      	orrs	r2, r4
 8005226:	d10a      	bne.n	800523e <__ieee754_log10+0x2e>
 8005228:	493b      	ldr	r1, [pc, #236]	; (8005318 <__ieee754_log10+0x108>)
 800522a:	2200      	movs	r2, #0
 800522c:	2300      	movs	r3, #0
 800522e:	2000      	movs	r0, #0
 8005230:	f7fb fb04 	bl	800083c <__aeabi_ddiv>
 8005234:	ec41 0b10 	vmov	d0, r0, r1
 8005238:	b003      	add	sp, #12
 800523a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800523e:	2d00      	cmp	r5, #0
 8005240:	da08      	bge.n	8005254 <__ieee754_log10+0x44>
 8005242:	ee10 2a10 	vmov	r2, s0
 8005246:	4620      	mov	r0, r4
 8005248:	4629      	mov	r1, r5
 800524a:	f7fb f815 	bl	8000278 <__aeabi_dsub>
 800524e:	2200      	movs	r2, #0
 8005250:	2300      	movs	r3, #0
 8005252:	e7ed      	b.n	8005230 <__ieee754_log10+0x20>
 8005254:	2200      	movs	r2, #0
 8005256:	4b31      	ldr	r3, [pc, #196]	; (800531c <__ieee754_log10+0x10c>)
 8005258:	4629      	mov	r1, r5
 800525a:	ee10 0a10 	vmov	r0, s0
 800525e:	f7fb f9c3 	bl	80005e8 <__aeabi_dmul>
 8005262:	f06f 0235 	mvn.w	r2, #53	; 0x35
 8005266:	4604      	mov	r4, r0
 8005268:	460d      	mov	r5, r1
 800526a:	460b      	mov	r3, r1
 800526c:	492c      	ldr	r1, [pc, #176]	; (8005320 <__ieee754_log10+0x110>)
 800526e:	428b      	cmp	r3, r1
 8005270:	dd08      	ble.n	8005284 <__ieee754_log10+0x74>
 8005272:	4622      	mov	r2, r4
 8005274:	462b      	mov	r3, r5
 8005276:	4620      	mov	r0, r4
 8005278:	4629      	mov	r1, r5
 800527a:	f7fa ffff 	bl	800027c <__adddf3>
 800527e:	e7d9      	b.n	8005234 <__ieee754_log10+0x24>
 8005280:	2200      	movs	r2, #0
 8005282:	e7f3      	b.n	800526c <__ieee754_log10+0x5c>
 8005284:	1518      	asrs	r0, r3, #20
 8005286:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 800528a:	4410      	add	r0, r2
 800528c:	ea4f 79d0 	mov.w	r9, r0, lsr #31
 8005290:	4448      	add	r0, r9
 8005292:	f3c3 0813 	ubfx	r8, r3, #0, #20
 8005296:	f7fb f93d 	bl	8000514 <__aeabi_i2d>
 800529a:	f5c9 737f 	rsb	r3, r9, #1020	; 0x3fc
 800529e:	3303      	adds	r3, #3
 80052a0:	ea48 5503 	orr.w	r5, r8, r3, lsl #20
 80052a4:	ec45 4b10 	vmov	d0, r4, r5
 80052a8:	4606      	mov	r6, r0
 80052aa:	460f      	mov	r7, r1
 80052ac:	f000 f844 	bl	8005338 <__ieee754_log>
 80052b0:	a313      	add	r3, pc, #76	; (adr r3, 8005300 <__ieee754_log10+0xf0>)
 80052b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052b6:	4630      	mov	r0, r6
 80052b8:	4639      	mov	r1, r7
 80052ba:	ed8d 0b00 	vstr	d0, [sp]
 80052be:	f7fb f993 	bl	80005e8 <__aeabi_dmul>
 80052c2:	ed9d 0b00 	vldr	d0, [sp]
 80052c6:	4604      	mov	r4, r0
 80052c8:	460d      	mov	r5, r1
 80052ca:	a30f      	add	r3, pc, #60	; (adr r3, 8005308 <__ieee754_log10+0xf8>)
 80052cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052d0:	ec51 0b10 	vmov	r0, r1, d0
 80052d4:	f7fb f988 	bl	80005e8 <__aeabi_dmul>
 80052d8:	4602      	mov	r2, r0
 80052da:	460b      	mov	r3, r1
 80052dc:	4620      	mov	r0, r4
 80052de:	4629      	mov	r1, r5
 80052e0:	f7fa ffcc 	bl	800027c <__adddf3>
 80052e4:	a30a      	add	r3, pc, #40	; (adr r3, 8005310 <__ieee754_log10+0x100>)
 80052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ea:	4604      	mov	r4, r0
 80052ec:	460d      	mov	r5, r1
 80052ee:	4630      	mov	r0, r6
 80052f0:	4639      	mov	r1, r7
 80052f2:	f7fb f979 	bl	80005e8 <__aeabi_dmul>
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4620      	mov	r0, r4
 80052fc:	4629      	mov	r1, r5
 80052fe:	e7bc      	b.n	800527a <__ieee754_log10+0x6a>
 8005300:	11f12b36 	.word	0x11f12b36
 8005304:	3d59fef3 	.word	0x3d59fef3
 8005308:	1526e50e 	.word	0x1526e50e
 800530c:	3fdbcb7b 	.word	0x3fdbcb7b
 8005310:	509f6000 	.word	0x509f6000
 8005314:	3fd34413 	.word	0x3fd34413
 8005318:	c3500000 	.word	0xc3500000
 800531c:	43500000 	.word	0x43500000
 8005320:	7fefffff 	.word	0x7fefffff

08005324 <matherr>:
 8005324:	2000      	movs	r0, #0
 8005326:	4770      	bx	lr

08005328 <nan>:
 8005328:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005330 <nan+0x8>
 800532c:	4770      	bx	lr
 800532e:	bf00      	nop
 8005330:	00000000 	.word	0x00000000
 8005334:	7ff80000 	.word	0x7ff80000

08005338 <__ieee754_log>:
 8005338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533c:	ec51 0b10 	vmov	r0, r1, d0
 8005340:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005344:	b087      	sub	sp, #28
 8005346:	460d      	mov	r5, r1
 8005348:	da27      	bge.n	800539a <__ieee754_log+0x62>
 800534a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800534e:	4303      	orrs	r3, r0
 8005350:	ee10 2a10 	vmov	r2, s0
 8005354:	d10a      	bne.n	800536c <__ieee754_log+0x34>
 8005356:	49cc      	ldr	r1, [pc, #816]	; (8005688 <__ieee754_log+0x350>)
 8005358:	2200      	movs	r2, #0
 800535a:	2300      	movs	r3, #0
 800535c:	2000      	movs	r0, #0
 800535e:	f7fb fa6d 	bl	800083c <__aeabi_ddiv>
 8005362:	ec41 0b10 	vmov	d0, r0, r1
 8005366:	b007      	add	sp, #28
 8005368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800536c:	2900      	cmp	r1, #0
 800536e:	da05      	bge.n	800537c <__ieee754_log+0x44>
 8005370:	460b      	mov	r3, r1
 8005372:	f7fa ff81 	bl	8000278 <__aeabi_dsub>
 8005376:	2200      	movs	r2, #0
 8005378:	2300      	movs	r3, #0
 800537a:	e7f0      	b.n	800535e <__ieee754_log+0x26>
 800537c:	4bc3      	ldr	r3, [pc, #780]	; (800568c <__ieee754_log+0x354>)
 800537e:	2200      	movs	r2, #0
 8005380:	f7fb f932 	bl	80005e8 <__aeabi_dmul>
 8005384:	f06f 0335 	mvn.w	r3, #53	; 0x35
 8005388:	460d      	mov	r5, r1
 800538a:	4ac1      	ldr	r2, [pc, #772]	; (8005690 <__ieee754_log+0x358>)
 800538c:	4295      	cmp	r5, r2
 800538e:	dd06      	ble.n	800539e <__ieee754_log+0x66>
 8005390:	4602      	mov	r2, r0
 8005392:	460b      	mov	r3, r1
 8005394:	f7fa ff72 	bl	800027c <__adddf3>
 8005398:	e7e3      	b.n	8005362 <__ieee754_log+0x2a>
 800539a:	2300      	movs	r3, #0
 800539c:	e7f5      	b.n	800538a <__ieee754_log+0x52>
 800539e:	152c      	asrs	r4, r5, #20
 80053a0:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 80053a4:	f3c5 0513 	ubfx	r5, r5, #0, #20
 80053a8:	441c      	add	r4, r3
 80053aa:	f505 2315 	add.w	r3, r5, #610304	; 0x95000
 80053ae:	f603 7364 	addw	r3, r3, #3940	; 0xf64
 80053b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80053b6:	f083 527f 	eor.w	r2, r3, #1069547520	; 0x3fc00000
 80053ba:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 80053be:	ea42 0105 	orr.w	r1, r2, r5
 80053c2:	eb04 5413 	add.w	r4, r4, r3, lsr #20
 80053c6:	2200      	movs	r2, #0
 80053c8:	4bb2      	ldr	r3, [pc, #712]	; (8005694 <__ieee754_log+0x35c>)
 80053ca:	f7fa ff55 	bl	8000278 <__aeabi_dsub>
 80053ce:	1cab      	adds	r3, r5, #2
 80053d0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80053d4:	2b02      	cmp	r3, #2
 80053d6:	4682      	mov	sl, r0
 80053d8:	468b      	mov	fp, r1
 80053da:	f04f 0200 	mov.w	r2, #0
 80053de:	dc53      	bgt.n	8005488 <__ieee754_log+0x150>
 80053e0:	2300      	movs	r3, #0
 80053e2:	f7fb fb69 	bl	8000ab8 <__aeabi_dcmpeq>
 80053e6:	b1d0      	cbz	r0, 800541e <__ieee754_log+0xe6>
 80053e8:	2c00      	cmp	r4, #0
 80053ea:	f000 8120 	beq.w	800562e <__ieee754_log+0x2f6>
 80053ee:	4620      	mov	r0, r4
 80053f0:	f7fb f890 	bl	8000514 <__aeabi_i2d>
 80053f4:	a390      	add	r3, pc, #576	; (adr r3, 8005638 <__ieee754_log+0x300>)
 80053f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fa:	4606      	mov	r6, r0
 80053fc:	460f      	mov	r7, r1
 80053fe:	f7fb f8f3 	bl	80005e8 <__aeabi_dmul>
 8005402:	a38f      	add	r3, pc, #572	; (adr r3, 8005640 <__ieee754_log+0x308>)
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	4604      	mov	r4, r0
 800540a:	460d      	mov	r5, r1
 800540c:	4630      	mov	r0, r6
 800540e:	4639      	mov	r1, r7
 8005410:	f7fb f8ea 	bl	80005e8 <__aeabi_dmul>
 8005414:	4602      	mov	r2, r0
 8005416:	460b      	mov	r3, r1
 8005418:	4620      	mov	r0, r4
 800541a:	4629      	mov	r1, r5
 800541c:	e7ba      	b.n	8005394 <__ieee754_log+0x5c>
 800541e:	a38a      	add	r3, pc, #552	; (adr r3, 8005648 <__ieee754_log+0x310>)
 8005420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005424:	4650      	mov	r0, sl
 8005426:	4659      	mov	r1, fp
 8005428:	f7fb f8de 	bl	80005e8 <__aeabi_dmul>
 800542c:	4602      	mov	r2, r0
 800542e:	460b      	mov	r3, r1
 8005430:	2000      	movs	r0, #0
 8005432:	4999      	ldr	r1, [pc, #612]	; (8005698 <__ieee754_log+0x360>)
 8005434:	f7fa ff20 	bl	8000278 <__aeabi_dsub>
 8005438:	4652      	mov	r2, sl
 800543a:	4606      	mov	r6, r0
 800543c:	460f      	mov	r7, r1
 800543e:	465b      	mov	r3, fp
 8005440:	4650      	mov	r0, sl
 8005442:	4659      	mov	r1, fp
 8005444:	f7fb f8d0 	bl	80005e8 <__aeabi_dmul>
 8005448:	4602      	mov	r2, r0
 800544a:	460b      	mov	r3, r1
 800544c:	4630      	mov	r0, r6
 800544e:	4639      	mov	r1, r7
 8005450:	f7fb f8ca 	bl	80005e8 <__aeabi_dmul>
 8005454:	4606      	mov	r6, r0
 8005456:	460f      	mov	r7, r1
 8005458:	b914      	cbnz	r4, 8005460 <__ieee754_log+0x128>
 800545a:	4632      	mov	r2, r6
 800545c:	463b      	mov	r3, r7
 800545e:	e0a0      	b.n	80055a2 <__ieee754_log+0x26a>
 8005460:	4620      	mov	r0, r4
 8005462:	f7fb f857 	bl	8000514 <__aeabi_i2d>
 8005466:	a374      	add	r3, pc, #464	; (adr r3, 8005638 <__ieee754_log+0x300>)
 8005468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546c:	4680      	mov	r8, r0
 800546e:	4689      	mov	r9, r1
 8005470:	f7fb f8ba 	bl	80005e8 <__aeabi_dmul>
 8005474:	a372      	add	r3, pc, #456	; (adr r3, 8005640 <__ieee754_log+0x308>)
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	4604      	mov	r4, r0
 800547c:	460d      	mov	r5, r1
 800547e:	4640      	mov	r0, r8
 8005480:	4649      	mov	r1, r9
 8005482:	f7fb f8b1 	bl	80005e8 <__aeabi_dmul>
 8005486:	e0a5      	b.n	80055d4 <__ieee754_log+0x29c>
 8005488:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800548c:	f7fa fef6 	bl	800027c <__adddf3>
 8005490:	4602      	mov	r2, r0
 8005492:	460b      	mov	r3, r1
 8005494:	4650      	mov	r0, sl
 8005496:	4659      	mov	r1, fp
 8005498:	f7fb f9d0 	bl	800083c <__aeabi_ddiv>
 800549c:	e9cd 0100 	strd	r0, r1, [sp]
 80054a0:	4620      	mov	r0, r4
 80054a2:	f7fb f837 	bl	8000514 <__aeabi_i2d>
 80054a6:	e9dd 2300 	ldrd	r2, r3, [sp]
 80054aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80054ae:	4610      	mov	r0, r2
 80054b0:	4619      	mov	r1, r3
 80054b2:	f7fb f899 	bl	80005e8 <__aeabi_dmul>
 80054b6:	4602      	mov	r2, r0
 80054b8:	460b      	mov	r3, r1
 80054ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80054be:	f7fb f893 	bl	80005e8 <__aeabi_dmul>
 80054c2:	a363      	add	r3, pc, #396	; (adr r3, 8005650 <__ieee754_log+0x318>)
 80054c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c8:	4680      	mov	r8, r0
 80054ca:	4689      	mov	r9, r1
 80054cc:	f7fb f88c 	bl	80005e8 <__aeabi_dmul>
 80054d0:	a361      	add	r3, pc, #388	; (adr r3, 8005658 <__ieee754_log+0x320>)
 80054d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d6:	f7fa fed1 	bl	800027c <__adddf3>
 80054da:	4642      	mov	r2, r8
 80054dc:	464b      	mov	r3, r9
 80054de:	f7fb f883 	bl	80005e8 <__aeabi_dmul>
 80054e2:	a35f      	add	r3, pc, #380	; (adr r3, 8005660 <__ieee754_log+0x328>)
 80054e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054e8:	f7fa fec8 	bl	800027c <__adddf3>
 80054ec:	4642      	mov	r2, r8
 80054ee:	464b      	mov	r3, r9
 80054f0:	f7fb f87a 	bl	80005e8 <__aeabi_dmul>
 80054f4:	a35c      	add	r3, pc, #368	; (adr r3, 8005668 <__ieee754_log+0x330>)
 80054f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054fa:	f7fa febf 	bl	800027c <__adddf3>
 80054fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005502:	f7fb f871 	bl	80005e8 <__aeabi_dmul>
 8005506:	a35a      	add	r3, pc, #360	; (adr r3, 8005670 <__ieee754_log+0x338>)
 8005508:	e9d3 2300 	ldrd	r2, r3, [r3]
 800550c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005510:	4640      	mov	r0, r8
 8005512:	4649      	mov	r1, r9
 8005514:	f7fb f868 	bl	80005e8 <__aeabi_dmul>
 8005518:	a357      	add	r3, pc, #348	; (adr r3, 8005678 <__ieee754_log+0x340>)
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	f7fa fead 	bl	800027c <__adddf3>
 8005522:	4642      	mov	r2, r8
 8005524:	464b      	mov	r3, r9
 8005526:	f7fb f85f 	bl	80005e8 <__aeabi_dmul>
 800552a:	a355      	add	r3, pc, #340	; (adr r3, 8005680 <__ieee754_log+0x348>)
 800552c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005530:	f7fa fea4 	bl	800027c <__adddf3>
 8005534:	4642      	mov	r2, r8
 8005536:	464b      	mov	r3, r9
 8005538:	f7fb f856 	bl	80005e8 <__aeabi_dmul>
 800553c:	f5a5 26c2 	sub.w	r6, r5, #397312	; 0x61000
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8005548:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800554c:	f7fa fe96 	bl	800027c <__adddf3>
 8005550:	f2a6 467a 	subw	r6, r6, #1146	; 0x47a
 8005554:	3551      	adds	r5, #81	; 0x51
 8005556:	4335      	orrs	r5, r6
 8005558:	2d00      	cmp	r5, #0
 800555a:	4680      	mov	r8, r0
 800555c:	4689      	mov	r9, r1
 800555e:	dd48      	ble.n	80055f2 <__ieee754_log+0x2ba>
 8005560:	2200      	movs	r2, #0
 8005562:	4b4d      	ldr	r3, [pc, #308]	; (8005698 <__ieee754_log+0x360>)
 8005564:	4650      	mov	r0, sl
 8005566:	4659      	mov	r1, fp
 8005568:	f7fb f83e 	bl	80005e8 <__aeabi_dmul>
 800556c:	4652      	mov	r2, sl
 800556e:	465b      	mov	r3, fp
 8005570:	f7fb f83a 	bl	80005e8 <__aeabi_dmul>
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4606      	mov	r6, r0
 800557a:	460f      	mov	r7, r1
 800557c:	4640      	mov	r0, r8
 800557e:	4649      	mov	r1, r9
 8005580:	f7fa fe7c 	bl	800027c <__adddf3>
 8005584:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005588:	f7fb f82e 	bl	80005e8 <__aeabi_dmul>
 800558c:	4680      	mov	r8, r0
 800558e:	4689      	mov	r9, r1
 8005590:	b964      	cbnz	r4, 80055ac <__ieee754_log+0x274>
 8005592:	4602      	mov	r2, r0
 8005594:	460b      	mov	r3, r1
 8005596:	4630      	mov	r0, r6
 8005598:	4639      	mov	r1, r7
 800559a:	f7fa fe6d 	bl	8000278 <__aeabi_dsub>
 800559e:	4602      	mov	r2, r0
 80055a0:	460b      	mov	r3, r1
 80055a2:	4650      	mov	r0, sl
 80055a4:	4659      	mov	r1, fp
 80055a6:	f7fa fe67 	bl	8000278 <__aeabi_dsub>
 80055aa:	e6da      	b.n	8005362 <__ieee754_log+0x2a>
 80055ac:	a322      	add	r3, pc, #136	; (adr r3, 8005638 <__ieee754_log+0x300>)
 80055ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055b6:	f7fb f817 	bl	80005e8 <__aeabi_dmul>
 80055ba:	a321      	add	r3, pc, #132	; (adr r3, 8005640 <__ieee754_log+0x308>)
 80055bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c0:	4604      	mov	r4, r0
 80055c2:	460d      	mov	r5, r1
 80055c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055c8:	f7fb f80e 	bl	80005e8 <__aeabi_dmul>
 80055cc:	4642      	mov	r2, r8
 80055ce:	464b      	mov	r3, r9
 80055d0:	f7fa fe54 	bl	800027c <__adddf3>
 80055d4:	4602      	mov	r2, r0
 80055d6:	460b      	mov	r3, r1
 80055d8:	4630      	mov	r0, r6
 80055da:	4639      	mov	r1, r7
 80055dc:	f7fa fe4c 	bl	8000278 <__aeabi_dsub>
 80055e0:	4652      	mov	r2, sl
 80055e2:	465b      	mov	r3, fp
 80055e4:	f7fa fe48 	bl	8000278 <__aeabi_dsub>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	4620      	mov	r0, r4
 80055ee:	4629      	mov	r1, r5
 80055f0:	e7d9      	b.n	80055a6 <__ieee754_log+0x26e>
 80055f2:	4602      	mov	r2, r0
 80055f4:	460b      	mov	r3, r1
 80055f6:	4650      	mov	r0, sl
 80055f8:	4659      	mov	r1, fp
 80055fa:	f7fa fe3d 	bl	8000278 <__aeabi_dsub>
 80055fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005602:	f7fa fff1 	bl	80005e8 <__aeabi_dmul>
 8005606:	4606      	mov	r6, r0
 8005608:	460f      	mov	r7, r1
 800560a:	2c00      	cmp	r4, #0
 800560c:	f43f af25 	beq.w	800545a <__ieee754_log+0x122>
 8005610:	a309      	add	r3, pc, #36	; (adr r3, 8005638 <__ieee754_log+0x300>)
 8005612:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005616:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800561a:	f7fa ffe5 	bl	80005e8 <__aeabi_dmul>
 800561e:	a308      	add	r3, pc, #32	; (adr r3, 8005640 <__ieee754_log+0x308>)
 8005620:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005624:	4604      	mov	r4, r0
 8005626:	460d      	mov	r5, r1
 8005628:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800562c:	e729      	b.n	8005482 <__ieee754_log+0x14a>
 800562e:	2000      	movs	r0, #0
 8005630:	2100      	movs	r1, #0
 8005632:	e696      	b.n	8005362 <__ieee754_log+0x2a>
 8005634:	f3af 8000 	nop.w
 8005638:	fee00000 	.word	0xfee00000
 800563c:	3fe62e42 	.word	0x3fe62e42
 8005640:	35793c76 	.word	0x35793c76
 8005644:	3dea39ef 	.word	0x3dea39ef
 8005648:	55555555 	.word	0x55555555
 800564c:	3fd55555 	.word	0x3fd55555
 8005650:	df3e5244 	.word	0xdf3e5244
 8005654:	3fc2f112 	.word	0x3fc2f112
 8005658:	96cb03de 	.word	0x96cb03de
 800565c:	3fc74664 	.word	0x3fc74664
 8005660:	94229359 	.word	0x94229359
 8005664:	3fd24924 	.word	0x3fd24924
 8005668:	55555593 	.word	0x55555593
 800566c:	3fe55555 	.word	0x3fe55555
 8005670:	d078c69f 	.word	0xd078c69f
 8005674:	3fc39a09 	.word	0x3fc39a09
 8005678:	1d8e78af 	.word	0x1d8e78af
 800567c:	3fcc71c5 	.word	0x3fcc71c5
 8005680:	9997fa04 	.word	0x9997fa04
 8005684:	3fd99999 	.word	0x3fd99999
 8005688:	c3500000 	.word	0xc3500000
 800568c:	43500000 	.word	0x43500000
 8005690:	7fefffff 	.word	0x7fefffff
 8005694:	3ff00000 	.word	0x3ff00000
 8005698:	3fe00000 	.word	0x3fe00000

0800569c <_init>:
 800569c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800569e:	bf00      	nop
 80056a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056a2:	bc08      	pop	{r3}
 80056a4:	469e      	mov	lr, r3
 80056a6:	4770      	bx	lr

080056a8 <_fini>:
 80056a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056aa:	bf00      	nop
 80056ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80056ae:	bc08      	pop	{r3}
 80056b0:	469e      	mov	lr, r3
 80056b2:	4770      	bx	lr
